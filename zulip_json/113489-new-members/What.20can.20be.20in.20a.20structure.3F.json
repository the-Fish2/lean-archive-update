[
    {
        "content": "<p>(Please ignore my previous message.)</p>\n<p>Can a <code>Prop</code> be in a structure? In the MWE below, the structure is OK until the declaration of <code>mid</code> which is not an equation or type but a <code>Prop</code>. The error is <code>unexpected token namespace, expected ,</code>.</p>\n<p>I have tried writing it as a separate definition which is accepted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mid</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">Plane.btw</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>but then I can't use it in the lemma below. Since it is an implication of the form <code>P→Q</code>, I should be able to <code>apply</code> it since the goal is <code>Q</code> and then the goal will be <code>P</code> which is the hypothesis <code>h</code>, but I get the error <code>failed to unify</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.NNReal</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Point</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Cartesian_Plane</span> <span class=\"n\">where</span>\n  <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Point</span>\n  <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">NNReal</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">B</span> <span class=\"n\">A</span>\n  <span class=\"n\">btw</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">B</span> <span class=\"n\">C</span>\n  <span class=\"n\">mid</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span> <span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"n\">btw</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"n\">B</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Cartesian_Plane</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">Plane</span> <span class=\"o\">:</span> <span class=\"n\">Cartesian_Plane</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">Plane.btw</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Plane.mid</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 419487674,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1706889914
    },
    {
        "content": "<p>I think <code>mid</code> should be spelt <code>∃ (C : Point), btw A C B</code>,  or slightly less clearly <code>∃ C, btw A C B</code>. Note that <code>zero</code>, <code>symm</code>, and <code>btw</code> are all <code>Prop</code>s/</p>",
        "id": 419489342,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706890395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20can.20be.20in.20a.20structure.3F/near/419489342\">said</a>:</p>\n<blockquote>\n<p>I think <code>mid</code> should be spelt <code>∃ (C : Point), btw A C B</code>,  or slightly less clearly <code>∃ C, btw A C B</code>. Note that <code>zero</code>, <code>symm</code>, and <code>btw</code> are all <code>Prop</code>s/</p>\n</blockquote>\n<p>I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">btw</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"n\">B</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">C</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 419496812,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1706892903
    },
    {
        "content": "<p>The term <code>btw A B C</code> is a proof of <code>d A C = d A B + d B C</code>, not the proposition itself. I think instead, <code>btw</code> should be defined as a predicate (i.e., a <code>Prop</code>-valued function rather than a proof-valued function). </p>\n<p>Since it seems like the type of <code>btw</code> is intending to define what \"between\" means, one option is to just use that definition in the specification of <code>mid</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Cartesian_Plane</span> <span class=\"n\">where</span>\n  <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Point</span>\n  <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">NNReal</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">B</span> <span class=\"n\">A</span>\n  <span class=\"n\">mid</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">B</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>If you want to keep the spelling/name <code>btw</code>, you can also abstract it out of the structure definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">btw</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">NNReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">B</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Cartesian_Plane</span> <span class=\"n\">where</span>\n  <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Point</span>\n  <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">NNReal</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">B</span> <span class=\"n\">A</span>\n  <span class=\"n\">mid</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">btw</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span>\n</code></pre></div>",
        "id": 419500193,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1706894185
    },
    {
        "content": "<p>something seems a bit off about the <code>Cartesian_Plane</code> definition... the set of points <code>P</code> isn't referenced in any of the other fields</p>",
        "id": 419557609,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1706920131
    },
    {
        "content": "<p>maybe it's unnecessary?</p>\n<p>at the same time, I understand the desire to specify the points in the plane</p>\n<p>just seems odd to define a structure where there's a carrier set but nothing else references it... it makes me think there's some confusion in the design</p>\n<p>just my 2 cents</p>",
        "id": 419558748,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1706920873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20can.20be.20in.20a.20structure.3F/near/419558748\">said</a>:</p>\n<blockquote>\n<p>maybe it's unnecessary?</p>\n<p>at the same time, I understand the desire to specify the points in the plane</p>\n<p>just seems odd to define a structure where there's a carrier set but nothing else references it... it makes me think there's some confusion in the design</p>\n<p>just my 2 cents</p>\n</blockquote>\n<p>Yes. It works without <code>P</code>. I was naively copying the definition in the book that a Plane is a set of points and a distance function.</p>",
        "id": 419613720,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1706970824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319223\">Logan Murphy</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20can.20be.20in.20a.20structure.3F/near/419500193\">said</a>:</p>\n<blockquote>\n<p>If you want to keep the spelling/name <code>btw</code>, you can also abstract it out of the structure definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">btw</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">NNReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">B</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Cartesian_Plane</span> <span class=\"n\">where</span>\n  <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Point</span>\n  <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">NNReal</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">B</span> <span class=\"n\">A</span>\n  <span class=\"n\">mid</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">btw</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>The problem with this is that I have to keep giving the parameter <code>d</code> at every use. I would prefer if all definitions and axioms could be encapsulated in one structure. This is keeping too confusing for me so I'lll drop it <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n</blockquote>",
        "id": 419613960,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1706970986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"667469\">@Moti Ben-Ari</span> Don't be discouraged! You could do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Cartesian_Plane</span> <span class=\"n\">where</span>\n  <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">NNReal</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">B</span> <span class=\"n\">A</span>\n  <span class=\"n\">btw</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">B</span> <span class=\"n\">C</span>\n  <span class=\"n\">mid</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">btw</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>though it does mean that someone instantiating their own instance of <code>Cartesian_Plane</code> would be able to define <code>btw</code> however they wanted. I wonder if there's a way to define a structure field as derived and read-only...</p>",
        "id": 419638623,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1706991632
    }
]