[
    {
        "content": "<p>I've tried industriously to understand type universes and sorts, but I still have no idea how to deal with this kind of error <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"bp\">?</span><span class=\"n\">u.401</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">u.397</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.401</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.401</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">u.397</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">u.397</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 418351339,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706303262
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Normed.Field.Basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Clone</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">CommutingMultiarg</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">t</span>\n  <span class=\"n\">commutes</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Commute_with_φ_Clone</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Clone</span> <span class=\"o\">(</span><span class=\"n\">CommutingMultiarg</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ts</span> <span class=\"bp\">↦</span> <span class=\"n\">ts</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 418351354,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706303275
    },
    {
        "content": "<p>Just kidding. It seems that adding <code>{t : Type*} </code> to <code>Commute_with_φ_Clone</code> fixes it ... it was trying to assume a <code>Sort</code> instead? whatever</p>",
        "id": 418351687,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706303463
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> has marked this topic as resolved.</p>",
        "id": 418351693,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706303465
    },
    {
        "content": "<p><code>autoImplicit</code> strikes again</p>",
        "id": 418354150,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1706304823
    }
]