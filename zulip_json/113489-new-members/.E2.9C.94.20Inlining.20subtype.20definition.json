[
    {
        "content": "<p>Hello everyone!<br>\nI created a simple definition to create a subtype from a set (it might already exists natively I guess). The issue is that when I define instances using it, Lean fails to synthesize the instance (it looks like it unfolded the definition once but not within the instances definition). Is there a way to \"inline\" this definiton?<br>\nMWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">st</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">st</span> <span class=\"n\">E</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">st</span> <span class=\"n\">E</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">inner</span> <span class=\"o\">(⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">st</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">st</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 436532010,
        "sender_full_name": "Gaëtan Serré",
        "timestamp": 1714580785
    },
    {
        "content": "<p>This is happening because <code>⟨f, hf⟩</code> is notation for <code>Subtype.mk f hf : {x // x ∈ E}</code> which, as you have noticed, is the wrong type.</p>",
        "id": 436535213,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714581921
    },
    {
        "content": "<p>One solution would be to create <code>Set.mk f hf : st E</code>. Another would be, as you mention, to make <code>st</code> reducible.</p>",
        "id": 436536791,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714582539
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Elem#doc\">docs#Set.Elem</a> for an example</p>",
        "id": 436536822,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714582554
    },
    {
        "content": "<p>Thank you, that makes sense</p>",
        "id": 436537264,
        "sender_full_name": "Gaëtan Serré",
        "timestamp": 1714582720
    },
    {
        "content": "<p>I guess <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Elem#doc\">docs#Set.Elem</a> is the right thing to do</p>",
        "id": 436537311,
        "sender_full_name": "Gaëtan Serré",
        "timestamp": 1714582740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"635099\">Gaëtan Serré</span> has marked this topic as resolved.</p>",
        "id": 436545904,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714586004
    },
    {
        "content": "<p>In fact, you should be able to write <code>(⟨g, hg⟩ : E)</code> since Elem is registered as a coercion</p>",
        "id": 436546816,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714586348
    },
    {
        "content": "<p>Yes this works, I guess the solution was to get rid of <code>st</code> (as I expected unfortunately <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span>)</p>",
        "id": 436553149,
        "sender_full_name": "Gaëtan Serré",
        "timestamp": 1714588766
    }
]