[
    {
        "content": "<p>why does lean not allow to user datatype parameters when defining inductives mutually dependent like following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"n\">α</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">two</span> <span class=\"o\">(</span><span class=\"n\">other</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">other</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span> <span class=\"n\">α</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>i may not use  \"A other\" in the B inductive (just A alpha), however i am allowed to do so when not using mutual</p>",
        "id": 417538515,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1706048042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> has marked this topic as resolved.</p>",
        "id": 417551969,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706055149
    },
    {
        "content": "<p>nvm found the answer in the manual</p>",
        "id": 417552011,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1706055176
    },
    {
        "content": "<p>If you can link it here, it might help the next person who stumbles upon the same problem :)</p>",
        "id": 417626654,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706096074
    },
    {
        "content": "<p>My Solution was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"n\">α</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">two</span> <span class=\"o\">(</span><span class=\"n\">other</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">other</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span> <span class=\"n\">α</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The Problem was naming the Type parameter, which when using mutual was the same one for A and B and yields in the same problem than:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">two</span> <span class=\"o\">(</span><span class=\"n\">other</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">other</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>thats explained here <br>\n<a href=\"https://lean-lang.org/functional_programming_in_lean/dependent-types/indices-parameters-universes.html\">https://lean-lang.org/functional_programming_in_lean/dependent-types/indices-parameters-universes.html</a></p>",
        "id": 417640452,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1706101252
    }
]