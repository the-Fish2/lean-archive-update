[
    {
        "content": "<p>I'm trying to show that <code>k ≤ k + 2</code>.</p>\n<p>My strategy is to first use <code>Nat.le.refl</code> and then use <code>Nat.le.step</code> twice.</p>\n<p>But somehow I can't get anything involving <code>Nat.le.refl</code> to work.</p>\n<p>For example, the simplest:</p>\n<p><code>#eval (@Nat.le.refl (4: ℕ))</code></p>\n<p>Gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">invalid</span><span class=\"w\"> </span><span class=\"kn\">universe</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">greater</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"n\">Less</span><span class=\"bp\">-</span><span class=\"n\">equal</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">reflexive</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Init</span><span class=\"bp\">.</span><span class=\"n\">Prelude</span>\n\n<span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">quick</span><span class=\"w\"> </span><span class=\"n\">fixes</span><span class=\"w\"> </span><span class=\"n\">available</span>\n</code></pre></div>\n<p>Does anybody know what I'm doing wrong?</p>",
        "id": 441469804,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1717079368
    },
    {
        "content": "<p>Ha, interesting, this seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">k_le_k_add_2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 441475090,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1717080756
    },
    {
        "content": "<p>Yeah, the issue is with <code>#eval</code> - what would it mean to evaluate a term like that? <code>#check (@Nat.le.refl (4: Nat))</code> also works</p>",
        "id": 441475377,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717080829
    },
    {
        "content": "<p>Ah makes sense. I just misremembered how this works. I think I got thrown off by the implicit k, and then got entangled in the <code>#eval</code> thing. Thank you!</p>",
        "id": 441476042,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1717081015
    }
]