[
    {
        "content": "<p>I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">n</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- for i : ℕ</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">i</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"c1\">-- bar (i : Fin 5 × Fin 6) : ℕ -- Why is this different from #check (foo i)?</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"c1\">-- fun i ↦ 30</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- 30</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- (kernel) declaration has free variables '_eval'</span>\n</code></pre></div>\n<ol>\n<li>Why is the type of <code>bar</code> not the same as the type of <code>foo i</code> when <code>bar</code> is defined to be <code>foo i</code>?</li>\n<li>I am not sure what <code>#eval</code> is complaining about in the final line. Is it complaining that <code>i</code> is a free variable?</li>\n</ol>",
        "id": 441464171,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717077842
    },
    {
        "content": "<p>This is because <code>variable (i : Fin 5 × Fin 6)</code> turns <code>i</code> into a parameter for all the following definitions whenever they mention <code>i</code>. This is why the type of <code>bar</code> is different, it still requires a parameter with the same type as <code>i</code>.</p>",
        "id": 441469803,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1717079368
    },
    {
        "content": "<p>And I believe <code>eval</code> is complaining that <code>i</code> is not defined (it is a free variable), even though you don' t need its definition and its type is fixed, it is still an undefined parameter.</p>",
        "id": 441471053,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1717079680
    },
    {
        "content": "<p>Change this line to <code>def i := ((0,0) : Fin 5 × Fin 6)</code> and it all works</p>",
        "id": 441471494,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1717079793
    },
    {
        "content": "<p>So, in the code above <code>def bar := foo i</code> is syntactic sugar for  <code>def bar (i : Fin 5 × Fin) := foo i</code>?<br>\nWhat I don't understand here is why <code>#check (foo i)</code> doesn't give the same type as <code>bar</code>.</p>",
        "id": 441471729,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717079854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"397075\">Kevin Cheung</span> <a href=\"#narrow/stream/113489-new-members/topic/Puzzled.20by.20an.20example.20on.20types/near/441471729\">said</a>:</p>\n<blockquote>\n<p>So, in the code above <code>def bar := foo i</code> is syntactic sugar for <code>def bar (i : Fin 5 × Fin) := foo i</code>?</p>\n</blockquote>\n<p>Exactly. And this is exactly why it doesn't give the same type.</p>",
        "id": 441472627,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1717080068
    },
    {
        "content": "<p>So, is it impossible to define something that is exactly what <code>foo i</code> is in <code>#check (foo i)</code>?</p>",
        "id": 441473429,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717080277
    },
    {
        "content": "<p>I don't believe this is possible without some hackery, because it would mean that the free variable <code>i</code> is leaking outside the section/module. Imagine if you were to reference this definition from other file, what would <code>i</code> be? </p>\n<p>In a more extreme case, you could have <code>(i : False)</code>, and if it wasn't turned into a parameter for <code>bar</code>, then <code>bar</code> used outside would be silently assuming something false from a different context.</p>",
        "id": 441474681,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1717080636
    },
    {
        "content": "<p>I see. So <code>#check foo i</code> basically reduces <code>foo i</code> first before showing its type?</p>",
        "id": 441502378,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717086851
    }
]