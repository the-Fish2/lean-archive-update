[
    {
        "content": "<p>Check the line  \"induction' hn : Fintype.card n with r IH generalizing n M\",<br>\nin the \"zero\" step, the proof is given by a \"elim\"（a contradiction thing）, right?</p>\n<p>So in step \"zero\", it is inconsistent. And we get the Goal（a Goal that i  doubt its correctness）.<br>\nThen in step \"succ\", how can we trust the recursive hypothesis \"IH\", and why can we say that we have proved it in step \"succ\"?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_list_transvec_mul_mul_list_transvec_eq_diagonal_aux2</span> <span class=\"c1\">--???</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">L'</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">TransvectionStruct</span> <span class=\"n\">n</span> <span class=\"bp\">𝕜</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">L.map</span> <span class=\"n\">toMatrix</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">L'.map</span> <span class=\"n\">toMatrix</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n  <span class=\"bp\">=</span> <span class=\"n\">diagonal</span> <span class=\"n\">D</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- 下面这里对n的数量进行归纳，0-（n-1）</span>\n  <span class=\"c1\">-- 还有n数量为n₁时（记为r），成立假设即IH</span>\n  <span class=\"c1\">-- 要推r+1的情况也成立。</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">r</span> <span class=\"n\">IH</span> <span class=\"n\">generalizing</span> <span class=\"n\">n</span> <span class=\"n\">M</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">List.nil</span><span class=\"o\">,</span> <span class=\"n\">List.nil</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"c1\">--填充Goal里的存在假设</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fintype.card_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hn.elim'</span> <span class=\"n\">i</span> <span class=\"c1\">-- ???这里用到了矛盾推一切</span>\n    <span class=\"c1\">-- 已知p真，任意命题q，p∨q</span>\n    <span class=\"c1\">-- 1.则：p∨q是真的。</span>\n    <span class=\"c1\">-- 2. ∨的两边至少一个真的，命题才是真的</span>\n    <span class=\"c1\">-- 3. 给到¬p, 则分析p∨q已知是真的，由2知p和q至少一个真的，但是¬p说的是p不是真的，所以只能是q是真的</span>\n    <span class=\"c1\">-- 由此推出q是真的。</span>\n    <span class=\"c1\">-- 但注意这是一个不一致的系统，有不满足“排中律”的两个命题存在，比如p和¬p</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span> <span class=\"n\">Sum</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">refine'</span> <span class=\"n\">Fintype.equivOfCardEq</span> <span class=\"n\">_</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Fintype.card_sum</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">Unit</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">reindex_exists_list_transvec_mul_mul_list_transvec_eq_diagonal2</span> <span class=\"n\">M</span> <span class=\"n\">e</span>\n    <span class=\"n\">apply</span>\n      <span class=\"n\">exists_list_transvec_mul_mul_list_transvec_eq_diagonal_induction2</span> <span class=\"k\">fun</span> <span class=\"n\">N</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 412102029,
        "sender_full_name": "chenjulang",
        "timestamp": 1704880110
    },
    {
        "content": "<p>The \"Elim\" thing  make me confused now and then...</p>",
        "id": 412102465,
        "sender_full_name": "chenjulang",
        "timestamp": 1704880247
    },
    {
        "content": "<p>Instead of thinking things like \"am I proving this by contradiction or not\", you can just think at all times that you are trying to show that the goal follows from the hypotheses. You say things like \"it is inconsistent\" and \"doubt the correctness of the goal\" but the goal does not exist abstractly by itself, what exists is the local context (the goal and hypotheses together) and your job is to show that the hypotheses imply the goal (and not worry at all about meaningless ideas such as whether the goal is \"true\" without the hypotheses, indeed the goal probably does not even make sense without some of the things in the list of hypotheses).</p>",
        "id": 412119861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704885679
    },
    {
        "content": "<p>The induction step is just <code>apply</code>ing a theorem (a recursor) which has, as inputs, several proofs, so it changes a context to some finite set of related but different contexts.</p>",
        "id": 412120079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704885757
    },
    {
        "content": "<p>you are right</p>",
        "id": 412184422,
        "sender_full_name": "chenjulang",
        "timestamp": 1704906144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 412184544,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704906188
    }
]