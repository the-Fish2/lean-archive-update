[
    {
        "content": "<p>I'm trying to understand the core of LEAN by doing things with as few extra constructs as possible. (For instance, I want to avoid using <code>match</code>). I want to implement \"fst\" for Prod, but I'm struggling how to use \"rec\". Here's what I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Prod.rec</span> <span class=\"c1\">-- : (mk : (fst : α) → (snd : β) → motive (fst, snd)) (t : α × β) : motive t</span>\n<span class=\"kd\">def</span> <span class=\"n\">fst_alt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Prod.rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I'm not exactly sure what the first argument to \"rec\" should be - I thought it's a function specifying the return type, but I'm not sure how <code>motive (fst, snd)</code>relates to <code>motive t</code> when I type <code>#check Prod.rec</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- (some of) the result of #check Prod.rec</span>\n<span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>How do I implement <code>fst2_alt</code>, and what does the type of <code>Prod.rec</code> mean?</p>",
        "id": 439547336,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1716201822
    },
    {
        "content": "<p>You can ask lean to fill it in and have a look:<br>\n<a href=\"https://live.lean-lang.org/#code=noncomputable%0D%0Adef%20fst'%20%3A%20(a%20%C3%97%20b)%20-%3E%20a%20%3A%3D%0D%0A%20%20Prod.rec%20(fun%20x%20_y%20%3D%3E%20x)%0D%0A%0D%0Aset_option%20pp.explicit%20true%0D%0A%23print%20fst\">https://live.lean-lang.org/#code=noncomputable%0D%0Adef%20fst'%20%3A%20(a%20%C3%97%20b)%20-%3E%20a%20%3A%3D%0D%0A%20%20Prod.rec%20(fun%20x%20_y%20%3D%3E%20x)%0D%0A%0D%0Aset_option%20pp.explicit%20true%0D%0A%23print%20fst</a>'</p>",
        "id": 439564472,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1716208469
    },
    {
        "content": "<p>For <code>#check Prod.rec</code> I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Prod.rec.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Prod.mk</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">fst</span> <span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>So you can see what the type of <code>motive</code>, i.e. the function for constructing the return type, is.</p>",
        "id": 439577354,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1716212810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20do.20I.20implement.20.22fst.22.20using.20Prod.2Erec.3F/near/439564472\">said</a>:</p>\n<blockquote>\n<p>You can ask lean to fill it in and have a look:<br>\n<a href=\"https://live.lean-lang.org/#code=noncomputable%0D%0Adef%20fst'%20%3A%20(a%20%C3%97%20b)%20-%3E%20a%20%3A%3D%0D%0A%20%20Prod.rec%20(fun%20x%20_y%20%3D%3E%20x)%0D%0A%0D%0Aset_option%20pp.explicit%20true%0D%0A%23print%20fst\">https://live.lean-lang.org/#code=noncomputable%0D%0Adef%20fst'%20%3A%20(a%20%C3%97%20b)%20-%3E%20a%20%3A%3D%0D%0A%20%20Prod.rec%20(fun%20x%20_y%20%3D%3E%20x)%0D%0A%0D%0Aset_option%20pp.explicit%20true%0D%0A%23print%20fst</a>'</p>\n</blockquote>\n<p>I thought \"rec\" was kinda like asking to use the Church encoding of Prod, but I'm not sure if that's right.<br>\nWhy you have to use \"noncomputable\" here? What does it do?</p>\n<p>Edit:</p>\n<p>I forgot to mention that when I remove <code>noncomputable</code> I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">generator</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"n\">recursor</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">Prod.rec'</span><span class=\"w\"> </span><span class=\"n\">yet</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">consider</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">...</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"bp\">/</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">structural</span><span class=\"w\"> </span><span class=\"n\">recursion</span>\n</code></pre></div>\n<p>So I guess my question is, why does this require <code>noncomputable</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">fst'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Prod.rec</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But this works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">fst''</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Prod.casesOn</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 440041378,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1716366529
    },
    {
        "content": "<p>When you use <code>match</code> then the compiler will implement matching as you wrote it, like in other functional programming languages. The conversion to <code>rec</code> is only done for the benefit of proofs, i.e. the kernel, which only understands <code>rec</code>. But that means pragmatically, one usually doesn't need to compile <code>rec</code>, and thus the compiler simply doesn't do it.</p>",
        "id": 440077801,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1716379931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20do.20I.20implement.20.22fst.22.20using.20Prod.2Erec.3F/near/440077801\">said</a>:</p>\n<blockquote>\n<p>When you use <code>match</code> then the compiler will implement matching as you wrote it, like in other functional programming languages. The conversion to <code>rec</code> is only done for the benefit of proofs, i.e. the kernel, which only understands <code>rec</code>. But that means pragmatically, one usually doesn't need to compile <code>rec</code>, and thus the compiler simply doesn't do it.</p>\n</blockquote>\n<p>I'm specifically interested in what <code>match</code> statements actual compile to, because I'm trying to understand the core language. IIUC, you're saying that <code>match</code> statements will compile to <code>casesOn</code>, but some proofs compile to <code>rec</code>, which works because the kernel only does typechecking rather than execution(?).</p>\n<p>If that's right, in what cases does the conversion to \"rec\" happen?</p>",
        "id": 440084760,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1716382336
    }
]