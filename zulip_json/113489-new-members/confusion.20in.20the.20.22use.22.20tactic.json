[
    {
        "content": "<p>Hi reading <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C04_Sets_and_Functions.html\">MIL Chapter 04</a><br>\nI see lots of proofs using the tactic <code>use</code>. I am quite confused in the deference between <code>use</code> and <code>exists</code></p>",
        "id": 435011807,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1713886362
    },
    {
        "content": "<p>for example all these work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">α</span>\n<span class=\"k\">#check</span> <span class=\"n\">β</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">xs</span>\n  <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span>\n  <span class=\"c1\">-- exists x -- this works</span>\n  <span class=\"c1\">-- use x, xs -- this works too</span>\n  <span class=\"c1\">-- refine ⟨x, xs, rfl⟩ -- this also works</span>\n</code></pre></div>",
        "id": 435011987,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1713886413
    },
    {
        "content": "<p>The doc <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Use.html#Mathlib.Tactic.%C2%ABtacticUse!___,,%C2%BB\">Mathlib.Tactic.Use</a> says it's equivalent to <code>refine</code> with placeholders automatically inserted. But I cannot find the document for <code>refine</code></p>",
        "id": 435012428,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1713886541
    },
    {
        "content": "<p>If you hover over <code>refine</code> you get some documentation:</p>\n<blockquote>\n<p><code>refine e</code> behaves like <code>exact e</code>, except that named (<code>?x</code>) or unnamed (<code>?_</code>)<br>\nholes in <code>e</code> that are not solved by unification with the main goal's target type<br>\nare converted into new goals, using the hole's name, if any, as the goal case name.</p>\n</blockquote>",
        "id": 435012982,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713886701
    },
    {
        "content": "<p>If there are no holes you can (and probably should) use <code>exact</code> instead, for example <code>exact ⟨x, xs, rfl⟩</code> in the above.</p>",
        "id": 435013130,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713886766
    },
    {
        "content": "<p>The <code>exists a,b,c</code> tactic is equivalent to doing <code>refine ⟨a,b,c,?_⟩; try trivial</code></p>",
        "id": 435013287,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713886814
    },
    {
        "content": "<p>It should be the case that <code>exists a,b,c</code> can always be replaced by <code>use a,b,c</code> (though you may have to follow it up with <code>trivial</code> since <code>use</code> uses slightly different tactics than <code>try trivial</code> afterwards).</p>\n<p>Note that <code>use x</code> works in your above example, you don't need <code>use x, xs</code>.</p>",
        "id": 435013555,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713886900
    },
    {
        "content": "<p>Ah I see the doc for <code>refine</code> now. I pressed <code>F12</code> to goto doc in vscode before which shows something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">builtin_tactic</span> <span class=\"bp\">«</span><span class=\"n\">refine</span><span class=\"bp\">»</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">evalRefine</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div>",
        "id": 435013692,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1713886940
    },
    {
        "content": "<p>\"go to definition\" goes to the implementation, but \"go to declaration\" goes to the syntax definition, which is where docstrings generally are placed.</p>",
        "id": 435013811,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713886983
    },
    {
        "content": "<p>Yeah I didn't notice the difference before <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> Thank you very much Kyle</p>",
        "id": 435014168,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1713887102
    },
    {
        "content": "<p>The difference between <code>exists</code> and <code>use</code> is that <code>use</code> is smarter about handling nested inductive types. <code>use a,b,c</code> essentially detects whether it should do <code>refine ⟨a,b,c,?_⟩</code> or <code>exact ⟨a,b,c⟩</code>. (Keep in mind that anonymous constructor notation is right associative, so <code>⟨a,b,c⟩</code> could stand for <code>⟨a,⟨b,c⟩⟩</code>, for example in a nested Exists.</p>",
        "id": 435014291,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713887139
    },
    {
        "content": "<p>There's also <code>use!</code>, which is smarter still.</p>",
        "id": 435014322,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713887155
    },
    {
        "content": "<p>Yeah I am kind of getting it now</p>",
        "id": 435014553,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1713887237
    },
    {
        "content": "<p>In the following, <code>use! x</code> is the same as <code>refine ⟨⟨x, ?property⟩, ?h⟩</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span><span class=\"bp\">!</span> <span class=\"n\">x</span>\n  <span class=\"c1\">-- case property</span>\n  <span class=\"c1\">-- ...</span>\n  <span class=\"c1\">-- ⊢ x ∈ s</span>\n  <span class=\"c1\">--</span>\n  <span class=\"c1\">-- case h</span>\n  <span class=\"c1\">-- ...</span>\n  <span class=\"c1\">-- ⊢ p ↑{ val := x, property := ?property }</span>\n</code></pre></div>",
        "id": 435014680,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713887277
    },
    {
        "content": "<p>It is willing to put more effort into applying constructors until it can use something.</p>",
        "id": 435014798,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713887314
    },
    {
        "content": "<p>I am not getting the example for <code>use!</code>, from the document it seems similar to <code>simp at *</code> that manuplates both the goal and the existing varaibles. Changing it to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span><span class=\"bp\">!</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I get a new goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">case</span> <span class=\"n\">h</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">↑</span><span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 435017589,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1713888178
    },
    {
        "content": "<p>what is <code>{ val := x, property := h }</code> here?</p>",
        "id": 435017952,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1713888286
    },
    {
        "content": "<p>Oh hovering on the goal I understand the meaning of  <code>{ val := x, property := h }</code>. It's a term of the subtype <code>{ α // p}</code></p>",
        "id": 435018328,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1713888391
    },
    {
        "content": "<p>This works <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> very smart indeed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span><span class=\"bp\">!</span> <span class=\"n\">x</span>\n  <span class=\"c1\">-- case property</span>\n  <span class=\"c1\">-- ...</span>\n  <span class=\"c1\">-- ⊢ x ∈ s</span>\n  <span class=\"c1\">--</span>\n  <span class=\"c1\">-- case h</span>\n  <span class=\"c1\">-- ...</span>\n  <span class=\"c1\">-- ⊢ p ↑{ val := x, property := ?property }</span>\n</code></pre></div>",
        "id": 435019206,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1713888670
    },
    {
        "content": "<p>I found that if I were in the halfway of the tatic <code>use</code>, the goal does not show what I shoud supply to <code>use</code> furthur more, as in the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">):=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xt</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Or.inl</span> <span class=\"n\">xs</span> <span class=\"c1\">-- Here after comma, the goal does not hint the rest goal</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span> <span class=\"c1\">-- should add `, Or.inr xt`</span>\n</code></pre></div>",
        "id": 435020956,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1713889199
    },
    {
        "content": "<p>Oh it does change the goal, perfect <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">):=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xt</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Or.inl</span> <span class=\"n\">xs</span> <span class=\"c1\">-- Here after comma, the goal does not hint the rest goal</span>\n  <span class=\"c1\">-- before this the goal is:</span>\n  <span class=\"c1\">--    α : Type u_1</span>\n  <span class=\"c1\">--    β : Type u_2</span>\n  <span class=\"c1\">--    f : α → β</span>\n  <span class=\"c1\">--    s t : Set α</span>\n  <span class=\"c1\">--    x : α</span>\n  <span class=\"c1\">--    xt : x ∈ t</span>\n  <span class=\"c1\">--    ⊢ f x ∈ f '' (s ∪ t)</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span>\n  <span class=\"c1\">-- now it's x ∈ s ∪ t ∧ f x = f x</span>\n  <span class=\"c1\">-- it hints the usage of `, Or.inr xt`</span>\n</code></pre></div>",
        "id": 435022043,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1713889530
    },
    {
        "content": "<p>With <code>tauto</code>, you can discharge each goal after <code>use x</code>. The <code>&lt;;&gt;</code> causes the same tactic script to be used for each goal produced by <code>rintro</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">):=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xt</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span>\n    <span class=\"bp\">&lt;;&gt;</span> <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span>\n</code></pre></div>",
        "id": 435035124,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713893595
    },
    {
        "content": "<p>There's also <code>use x (discharger := tauto)</code>, which does basically the same thing</p>",
        "id": 435038826,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713894772
    }
]