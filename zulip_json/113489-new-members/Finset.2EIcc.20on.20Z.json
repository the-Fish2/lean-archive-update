[
    {
        "content": "<p>How can I prove the second 'have' part is ture on Z? I can't push forward my prove any more. :-( </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sub_of_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hncons</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">Finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"k\">have</span> <span class=\"n\">hcons</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hncons</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hcons</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 430072125,
        "sender_full_name": "Junjie Bai",
        "timestamp": 1711634051
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">hcons</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hncons</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">n</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">cons_eq_insert</span><span class=\"o\">,</span> <span class=\"n\">mem_insert</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc</span><span class=\"o\">]</span>\n    <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 430105832,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711641919
    },
    {
        "content": "<p>I would guess you can use <code>mem_cons</code> to use one fewer lemma</p>",
        "id": 430108854,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711642678
    },
    {
        "content": "<p>Indeed!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">hcons</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hncons</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">n</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">mem_cons</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc</span><span class=\"o\">]</span>\n    <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 430109070,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711642731
    },
    {
        "content": "<p>Did you know that this was a possibility?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">hcons</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hncons</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">n</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 430109320,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711642794
    },
    {
        "content": "<p>I learned a lot from it! Thanks a lot!</p>",
        "id": 430206282,
        "sender_full_name": "Junjie Bai",
        "timestamp": 1711691440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Finset.2EIcc.20on.20Z/near/430109320\">said</a>:</p>\n<blockquote>\n<p>Did you know that this was a possibility?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">hcons</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hncons</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">n</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Presumably that does the same as <code>simp; omega</code>?</p>",
        "id": 430221561,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711701366
    },
    {
        "content": "<p>Yes, it is the same, at least in this case.  I wonder if using it systematically might be a good way of \"avoiding\" non-terminal simps...</p>",
        "id": 430221728,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711701435
    },
    {
        "content": "<p>(Of course, limiting the tactics that can be used in that position)</p>",
        "id": 430221825,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711701469
    },
    {
        "content": "<p>I think that <code>simp; omega</code> should just be allowed. If <code>simp</code> simplifies slightly differently, <code>omega</code> is still likely to finish the goal.</p>",
        "id": 430222223,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711701649
    },
    {
        "content": "<p>I think using weird syntax to avoid non-terminal simp (which is something <em>we</em> have decided is bad) would be stupid</p>",
        "id": 430222239,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711701660
    },
    {
        "content": "<p>Ok, I'm making progress on the new version of the non-terminal <code>simp</code> linter and was indeed planning to go with the allowed followers approach.</p>",
        "id": 430222432,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711701764
    },
    {
        "content": "<p>(or rather, rigid tactics cannot follow flexible ones)</p>",
        "id": 430222508,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711701809
    }
]