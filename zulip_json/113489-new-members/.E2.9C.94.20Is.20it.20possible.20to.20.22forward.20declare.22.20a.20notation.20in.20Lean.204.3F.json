[
    {
        "content": "<p>I'm working with type classes and I'd like to improve the readability of my code by using conventional mathematical notations earlier in the definitions. Currently, I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n  <span class=\"n\">mul_left_inv</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"⁻¹\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Group.inv</span>\n</code></pre></div>\n<p>I would like to define the notation ⁻¹ before it's actually bound to the <code>inv</code> function in the <code>Group</code> class. This way, I can use the g⁻¹ notation directly in the <code>mul_left_inv</code> property, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n  <span class=\"n\">mul_left_inv</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>Is there a way to achieve this \"forward declaration\" of notation in Lean?</p>",
        "id": 417239386,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1705933329
    },
    {
        "content": "<p>In Mathlib one of the ways we get around this is that we have a separate <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Inv#doc\">docs#Inv</a> type class (or more generally, we have a notation class for all the most common pieces of notation <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HMul#doc\">docs#HMul</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HAdd#doc\">docs#HAdd</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HSMul#doc\">docs#HSMul</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Neg#doc\">docs#Neg</a>, etc.). Then you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Inv</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n<span class=\"n\">mul_left_inv</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 417261331,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705939099
    },
    {
        "content": "<p>Thanks Jireh! I saw that workaround. Perhaps there isn't a clean way to achieve this without introducing a \"notation class\". I was hoping for a method where the class hierarchy would align neatly with the mathematical hierarchy, where Group extends only Monoid, Monoid extends only Semigroup, and Semigroup extends only Magma.</p>",
        "id": 417264807,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1705939949
    },
    {
        "content": "<p>What about commutative ones?</p>",
        "id": 417265426,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705940122
    },
    {
        "content": "<p>I.e., at some point you get diamonds if you do anything nontrivial.</p>",
        "id": 417265485,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705940141
    },
    {
        "content": "<p>Yeah, you're absolutely right about that! I'm currently focusing on structures up to groups and aiming for minimal non-mathematical elements for clearer pedagogical purposes. Your points are well-taken for more complex scenarios.</p>",
        "id": 417267650,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1705940744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"683979\">Isak Colboubrani</span> has marked this topic as resolved.</p>",
        "id": 417382076,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705993090
    }
]