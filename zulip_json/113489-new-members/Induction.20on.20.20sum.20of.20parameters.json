[
    {
        "content": "<p>Hi, </p>\n<p>very basic question but, if I want to prove <code>theorem F (m n : Nat): P m n</code> by induction on <code>m+n</code>, is there a tactic or trick that allows this without changing the theorem statement or creating an auxiliary lemma? I can imagine how reformulating to <code>theorem F (m n N: Nat) (h: m+n = N): P m n</code> and then doing induction on <code>N</code> would work. But can this be avoided?</p>",
        "id": 429448050,
        "sender_full_name": "Bernardo Anibal Subercaseaux Roa",
        "timestamp": 1711382180
    },
    {
        "content": "<p><code>induction h : m + n</code>?</p>",
        "id": 429450556,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711382632
    },
    {
        "content": "<p>I tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">euclid_algo_symmetric</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">euclid_algo</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">euclid_algo</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>but get <code>unknown identifier 'h'</code> and also </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">induction'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">major</span> <span class=\"n\">premise</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">an</span> <span class=\"kd\">inductive</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.57616</span>\n<span class=\"n\">mn</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.57616</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">euclid_algo</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">euclid_algo</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>Am I doing something wrong?</p>",
        "id": 429451532,
        "sender_full_name": "Bernardo Anibal Subercaseaux Roa",
        "timestamp": 1711382829
    },
    {
        "content": "<p>Maybe this only works with <code>induction'</code></p>",
        "id": 429452154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711382951
    },
    {
        "content": "<p>that did work! Thanks! is there a simple explanation of the difference between <code>induction </code> and <code>induction'</code>? or some  resource I should check?</p>",
        "id": 429453338,
        "sender_full_name": "Bernardo Anibal Subercaseaux Roa",
        "timestamp": 1711383184
    },
    {
        "content": "<p><code>induction'</code> is on the way out, is the main difference. Although maybe it just got a reprieve :-)</p>",
        "id": 429488446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711393061
    },
    {
        "content": "<p>you can do <code>generalize e : m + n = mn; induction mn generalizing m n</code></p>",
        "id": 429526977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711408522
    }
]