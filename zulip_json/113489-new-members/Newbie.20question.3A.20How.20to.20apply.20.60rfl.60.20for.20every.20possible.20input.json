[
    {
        "content": "<p>Below is a minimal example of what I'm trying to do. How can I rewrite <code>colors_map_to_one_enumerated_proof</code> to avoid enumerating over colors explicitly? <code>colors_map_to_one_abstracted_proof</code> is my failed attempt. I expect I'm missing a very simple change that would make this work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Color</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Blue</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Red</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Color</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Red</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Blue</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n\n<span class=\"sd\">/--Prove that f is 1 for all colors by going over each color explicitly-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">colors_map_to_one_enumerated_proof</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Color</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Color</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Color.Red</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Color.Blue</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"sd\">/--Prove that f is 1 for all colors without going over each color explicitly. Does not work.-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">colors_map_to_one_abstracted_proof</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Color</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Color</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- Fails</span>\n</code></pre></div>\n<p>Failure message:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>The rfl tactic failed. Possible reasons:\n- The goal is not a reflexive relation (neither `=` nor a relation with a @[refl] lemma).\n- The arguments of the relation are not equal.\nTry using the reflexivitiy lemma for your relation explicitly, e.g. `exact Eq.rfl`.\nc x✝ : Color\n⊢ f x✝ = 1\n</code></pre></div>",
        "id": 439435996,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1716122858
    },
    {
        "content": "<p>It doesn't work because the equality is true, but it's not true by definition. If you do cases on c then you're using <code>Color.rec</code> which is an axiom.</p>",
        "id": 439436448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716123283
    },
    {
        "content": "<p><code>by cases c &lt;;&gt; rfl</code> might be the answer you want here</p>",
        "id": 439437361,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716124241
    },
    {
        "content": "<p>Thank you! That worked.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">colors_map_to_one_abstracted_proof</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Color</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Color</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(In case anyone reads this in the future, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Tactics.html#Lean.Parser.Tactic.%C2%ABtactic_%3C;%3E_%C2%BB\">here</a> are the docs for the <code>&lt;;&gt;</code> tactic.)</p>",
        "id": 439477641,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1716164180
    },
    {
        "content": "<p>Followup question: I want this to work when I use <code>\\a</code> instead of <code>Color</code>, where <code>\\a</code> is any finite product of inductive types. How can I express this? I know I can do something like <code>[TypeClassName \\a]</code> to express that <code>\\a</code> satisfied the type class <code>TypeClassName</code>, but I don't know wha the analagous syntax is for saying a type is inductive. </p>\n<p>I checked that, if I replace <code>Color</code> with a product of inductive types <code>Color \\times Size</code>, that <code>by cases c &lt;;&gt; rfl</code> still works.</p>",
        "id": 439479432,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1716166092
    },
    {
        "content": "<p>The error I get is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>tactic 'induction' failed, major premise type is not an inductive type\n</code></pre></div>",
        "id": 439479467,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1716166148
    },
    {
        "content": "<p>I'm no expert but I don't think you can get this to work because the tactic would have to split the goal into an unknown number of cases.</p>",
        "id": 439479784,
        "sender_full_name": "Ted Hwa",
        "timestamp": 1716166511
    },
    {
        "content": "<p>Fair! In retrospect, I realize this followup example doesn't really map to the actual problem I'm working on.</p>",
        "id": 439480217,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1716166960
    },
    {
        "content": "<p>Related question: Given an inductive type, can I get a list of all its values? For now, I made a custom <code>FinType</code> type class with an <code>.all</code> method, but I expect there's a more built-in technique.</p>",
        "id": 439481182,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1716168046
    },
    {
        "content": "<p>Be careful with that idea. Inductive types encompass much more than just finite enumerations.  It allows for recursion as well. For example, <code>Nat</code> is an inductive type.</p>",
        "id": 439481409,
        "sender_full_name": "Ted Hwa",
        "timestamp": 1716168297
    },
    {
        "content": "<p>Thanks for the warning. Is there a standard way to talk about types with a finite number of values?</p>",
        "id": 439481456,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1716168355
    },
    {
        "content": "<p>Can you explain more what you are trying to do? Usually I haven't found a need for something like <code>.all</code>. As for  Fintype, it <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fintype/Basic.html#Fintype\">already has</a> a field called <code>elems</code> but I don't think I've ever used it directly.</p>",
        "id": 439481772,
        "sender_full_name": "Ted Hwa",
        "timestamp": 1716168658
    },
    {
        "content": "<p>I didn't realize <code>Fintype</code> existed - I made a new typeclass for that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><br>\nThanks for the link!</p>\n<p>I'm trying to create a type for Probability Distributions over finite event spaces, where the event variables of the distribution are part of the type. <br>\nEg if I have a probability distribution over <code>Color</code>, and a probability distribution over <code>Species</code>, I want the product distribution over <code>Color x Species</code> to have its type inferred automatically.</p>\n<p>I'm representing a <code>Distribution</code> as a function mapping the event space to non negative rationals, along with a proof that the function sums to one. I'm using <code>.all</code> / <code>.elems</code> to define the how to sum up all the values of the function.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Type with a finite number of members-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">FinType</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">all</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"sd\">/--Product of FinTypes is a FinType-/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">FinType</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FinType</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">FinType</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">all</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">FinType.all</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">product</span> <span class=\"o\">(</span><span class=\"n\">FinType.all</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Color</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Blue</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Red</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Species</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Pansy</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Rose</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Size</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Small</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Large</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">FinType</span> <span class=\"n\">Color</span> <span class=\"n\">where</span>\n  <span class=\"n\">all</span> <span class=\"o\">:=</span>  <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">Blue</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">Red</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">FinType</span> <span class=\"n\">Species</span> <span class=\"n\">where</span>\n  <span class=\"n\">all</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">Pansy</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">Rose</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">FinType</span> <span class=\"n\">Size</span> <span class=\"n\">where</span>\n  <span class=\"n\">all</span> <span class=\"o\">:=</span>  <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">Small</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">Large</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--Sum all elements of a FinType when mapped via f. Can we do this without the parens?-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">finmapsum</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">FinType</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">NNRat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NNRat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">FinType.all</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"sd\">/--True iff α sums to 1 via f-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">SumsToOne</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">FinType</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">NNRat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">finmapsum</span> <span class=\"n\">α</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Distribution</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">FinType</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"n\">where</span>\n  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">NNRat</span>\n  <span class=\"n\">sums_to_one</span> <span class=\"o\">:</span> <span class=\"n\">SumsToOne</span> <span class=\"n\">f</span>\n\n\n<span class=\"sd\">/--Make product of functions-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">product_function</span> <span class=\"o\">(</span><span class=\"n\">fa</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">NNRat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fb</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">NNRat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">NNRat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">fa</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fb</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n\n<span class=\"sd\">/--The product of two probability distributions is still a distribution, ie the probabilities sum to 1.-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">product_is_distribution</span> <span class=\"o\">[</span><span class=\"n\">FinType</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FinType</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">pa</span> <span class=\"o\">:</span> <span class=\"n\">Distribution</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pb</span> <span class=\"o\">:</span> <span class=\"n\">Distribution</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SumsToOne</span> <span class=\"o\">(</span><span class=\"n\">product_function</span> <span class=\"n\">pa</span> <span class=\"n\">pb</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 439483353,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1716170400
    },
    {
        "content": "<p>You want to use the <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">BigOperators</a> which can be used to form a sum over a finite set. For that to work, you need to use the built-in classes, not your own.</p>",
        "id": 439483943,
        "sender_full_name": "Ted Hwa",
        "timestamp": 1716170847
    },
    {
        "content": "<p>Thanks! I'll give those a try.</p>",
        "id": 439483961,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1716170882
    },
    {
        "content": "<p>The topic of this thread doesn't convey at all the fact that you want to make finite probability spaces, something which we probably have already. I would ask another question in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> or <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a>  (threads are cheap!) about implementation of finite probability spaces containing your actual question, you might find all the work is already done.</p>",
        "id": 439526419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716193911
    },
    {
        "content": "<p>I have some stuff on finite probability spaces <a href=\"https://command-master.github.io/lean-bourgain/docs/Pseudorandom/PMF.html\">here</a>, you can take a look at how I implemented it</p>",
        "id": 439539524,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1716198815
    },
    {
        "content": "<p>Fair! I got a bit <a href=\"https://en.wikipedia.org/wiki/XY_problem\">XY</a>'ed <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>I <a href=\"#narrow/stream/113489-new-members/topic/Finite.20probability.20spaces.20implementations\">posted</a> another question for this now.</p>\n<p>I'll take a look through your implementation, Daniel. Thanks for making and sharing it!</p>",
        "id": 439813835,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1716297119
    }
]