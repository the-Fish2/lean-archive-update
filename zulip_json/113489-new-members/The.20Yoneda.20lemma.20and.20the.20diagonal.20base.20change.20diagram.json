[
    {
        "content": "<p>Hi I am trying to prove the diagonal base change diagram is cartesian for some exercises, following <a href=\"https://math.stackexchange.com/a/4648573/195865\">https://math.stackexchange.com/a/4648573/195865</a> but stuck at the very begining. The setup is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Pullbacks</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.CommSq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Diagonal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.FiniteLimits</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Types</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Types</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Presheaf</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n<span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">Category</span>\n<span class=\"kn\">open</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasFiniteLimits</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X‚ÇÅ</span> <span class=\"n\">X‚ÇÇ</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span><span class=\"o\">:</span> <span class=\"n\">X‚ÇÅ</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span><span class=\"o\">:</span> <span class=\"n\">X‚ÇÇ</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 437145417,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1714927347
    },
    {
        "content": "<p>Then I defined the diagram:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\"> the morphism X‚ÇÅ √óY X‚ÇÇ -&gt; X‚ÇÅ √óZ X‚ÇÇ</span>\n<span class=\"sd\">-/</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"p\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pullback.mapDesc</span> <span class=\"n\">f‚ÇÅ</span> <span class=\"n\">f‚ÇÇ</span> <span class=\"n\">g</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\"> the diagonal morphism Y -&gt; Y √óZ Y</span>\n<span class=\"sd\">-/</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"d\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pullback.diagonal</span> <span class=\"n\">g</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\"> the morphism X‚ÇÅ √óY X‚ÇÇ -&gt; Y</span>\n<span class=\"sd\"> there are two choice for it, just pick up one</span>\n<span class=\"sd\">-/</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"h\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">pullback.fst</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">pullback</span> <span class=\"n\">f‚ÇÅ</span> <span class=\"n\">f‚ÇÇ</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\">the morphism X‚ÇÅ √óZ X‚ÇÇ -&gt; Y √óZ Y</span>\n<span class=\"sd\">-/</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"q\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">pullback.map</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"n\">g</span> <span class=\"n\">f‚ÇÅ</span> <span class=\"n\">f‚ÇÇ</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comp_id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comp_id</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\"> the diagonal base change diagram</span>\n<span class=\"sd\">   X‚ÇÅ √óY X‚ÇÇ --&gt; X‚ÇÅ √óZ X‚ÇÇ</span>\n<span class=\"sd\">      | ‚åü           |</span>\n<span class=\"sd\">      |             |</span>\n<span class=\"sd\">      v             v</span>\n<span class=\"sd\">      Y  ------&gt; Y √óZ Y</span>\n<span class=\"sd\">  is cartesian</span>\n<span class=\"sd\">this will be proved via the Yoneda lemma.</span>\n<span class=\"sd\">see &lt;https://math.stackexchange.com/a/4648573/195865&gt;</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">DiagonalBaseChangeDiagram</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">isPullback</span> <span class=\"o\">:</span> <span class=\"n\">IsPullback</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"n\">q</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 437145432,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1714927373
    },
    {
        "content": "<p>But when I tried to apply an instance of it for presheaves on <code>C</code> like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">diagonalBaseChangeDiagramForPresheaf</span> <span class=\"o\">(</span><span class=\"n\">X‚ÇÅ</span> <span class=\"n\">X‚ÇÇ</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span><span class=\"o\">:</span> <span class=\"n\">X‚ÇÅ</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span><span class=\"o\">:</span> <span class=\"n\">X‚ÇÇ</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">DiagonalBaseChangeDiagram</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">X‚ÇÅ</span> <span class=\"n\">X‚ÇÇ</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f‚ÇÅ</span> <span class=\"n\">f‚ÇÇ</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I got an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">v</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"bp\">?</span><span class=\"n\">u.23323</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"bp\">?</span><span class=\"n\">u.23322</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"k\">with</span>\n  <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"bp\">?</span><span class=\"n\">u.23323</span><span class=\"o\">)),</span> <span class=\"n\">Small.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"bp\">?</span><span class=\"n\">u.23323</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"bp\">?</span><span class=\"n\">u.23323</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n    <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"bp\">?</span><span class=\"n\">u.23323</span><span class=\"o\">)),</span> <span class=\"n\">Small.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"bp\">?</span><span class=\"n\">u.23323</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"bp\">?</span><span class=\"n\">u.23323</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"n\">Œ±</span>\n</code></pre></div>",
        "id": 437145550,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1714927450
    },
    {
        "content": "<p>I am quite confused in why there is some universe issue here. The following naive example does work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Pullbacks</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.CommSq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Diagonal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.FiniteLimits</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Types</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Types</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Presheaf</span>\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">Category</span>\n<span class=\"kn\">open</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IsPullBackClass</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">isPullback</span> <span class=\"o\">:</span> <span class=\"n\">IsPullback</span> <span class=\"n\">fst</span> <span class=\"n\">snd</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n\n<span class=\"k\">#check</span> <span class=\"n\">IsPullBackClass</span> <span class=\"n\">C</span>\n<span class=\"k\">#check</span> <span class=\"n\">IsPullBackClass</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">IsPullBackClass</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"n\">isPullBackClassForPresheaf</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">IsPullBackClass</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">fst</span> <span class=\"n\">snd</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thank you in advance <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 437145682,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1714927571
    },
    {
        "content": "<p>I am not sure what is the problem, but first, I would suggest not using <code>class</code> (which has a different status in Lean as compared to <code>structure</code>), and prove a <code>lemma</code> rather than an <code>instance</code>. I would also replace <code>variable (X‚ÇÅ X‚ÇÇ Y Z : C)</code> by <code>variable {X‚ÇÅ X‚ÇÇ Y Z : C}</code> because the objects can be deduced from the types of the given morphisms.</p>",
        "id": 437152927,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1714933730
    },
    {
        "content": "<p>Yeah thank you for the advice. I am changing it to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">diagonalBaseChangeDiagramForType</span> <span class=\"o\">{</span><span class=\"n\">X‚ÇÅ</span> <span class=\"n\">X‚ÇÇ</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n     <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span><span class=\"o\">:</span> <span class=\"n\">X‚ÇÅ</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span><span class=\"o\">:</span> <span class=\"n\">X‚ÇÇ</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">IsPullback</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"n\">q</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">diagonalBaseChangeDiagramForPresheaf</span> <span class=\"o\">{</span><span class=\"n\">X‚ÇÅ</span> <span class=\"n\">X‚ÇÇ</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n     <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span><span class=\"o\">:</span> <span class=\"n\">X‚ÇÅ</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span><span class=\"o\">:</span> <span class=\"n\">X‚ÇÇ</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">IsPullback</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"n\">q</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\"> the diagonal base change diagram</span>\n\n<span class=\"sd\">   X‚ÇÅ √óY X‚ÇÇ --&gt; X‚ÇÅ √óZ X‚ÇÇ</span>\n<span class=\"sd\">      | ‚åü           |</span>\n<span class=\"sd\">      |             |</span>\n<span class=\"sd\">      v             v</span>\n<span class=\"sd\">      Y  ------&gt; Y √óZ Y</span>\n<span class=\"sd\">  is cartesian</span>\n\n<span class=\"sd\">this will be proved via the Yoneda lemma.</span>\n<span class=\"sd\">see &lt;https://math.stackexchange.com/a/4648573/195865&gt;</span>\n<span class=\"sd\">TODO prove this via diagonalBaseChangeDiagramForPresheaf,</span>\n<span class=\"sd\">     i.e., it suffices to check it's pullback in the category of sets</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">diagonalBaseChangeDiagram</span> <span class=\"o\">:</span> <span class=\"n\">IsPullback</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"n\">q</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and it reports no error <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 437180303,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1714961469
    },
    {
        "content": "<p>Btw is this result contained in Mathlib?</p>",
        "id": 437180934,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1714961985
    }
]