[
    {
        "content": "<p>I'm looking at</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/MeasureTheory/MeasurableSpace/Basic.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/MeasureTheory/MeasurableSpace/Basic.html</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Powerset.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Powerset.html</a></p>\n<p>I want to say some basic stuff like <code>{{}, {1}, {2}, {1,2}}</code> for <code>{1,2}</code> is measurable and generally the powerset of a finite set is measurable. But idk how to even state them.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">MeasurableSet</span> <span class=\"o\">(</span><span class=\"n\">Finset.powerset</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"mi\">3</span><span class=\"o\">))</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Finset.powerset</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Set</span> <span class=\"bp\">?</span><span class=\"n\">m.12</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 425611672,
        "sender_full_name": "Iocta",
        "timestamp": 1709934047
    },
    {
        "content": "<p>Whether every set in the power set is measurable depends on the sigma algebra that you pick. This is not true in general, consider the trivial sigma algebra for sets with 2 or more elements.</p>",
        "id": 425615369,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709935841
    },
    {
        "content": "<p>If <code>s = {1,2}</code>, the trivial sigma algebra is <code>b = {{}, {1,2}}</code>: <code>complement {}  = {1,2}</code> which is in <code>b</code> and <code>complement {1,2} = {}</code> which is in <code>b</code>. <code>union {} {1,2} = {1,2}</code> which is in <code>b</code>. So it's closed under complementation and union. In the docs we have</p>\n<blockquote>\n<p>A measurable space is a set equipped with a σ-algebra, a collection of subsets closed under complementation and countable union.</p>\n</blockquote>\n<p>which I think we've satisfied. What am I missing?</p>",
        "id": 425616139,
        "sender_full_name": "Iocta",
        "timestamp": 1709936242
    },
    {
        "content": "<p>My point was that any finite set with at least two elements admits at least two sigma algebras: one in which every element in the power set is measurable, and one in which only the empty set and the full set are measurable. As such, I guess you’d need to specify which sigma algebra you want to use? Perhaps there is a default one on a finite set. So my point was that the sets that you wanted to show are measurable, are only measurable for one sigma algebra, and not for the other.</p>",
        "id": 425618611,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709937683
    },
    {
        "content": "<p>So you may want to determine first what the default sigma algebra is on a finite set (if there is one), and if that is the one for which you want to state this.</p>",
        "id": 425618736,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709937748
    },
    {
        "content": "<p>there's also the issue that you're passing in a <code>Finset</code> instead of a <code>Set</code>... that's the immediate cause of the error</p>",
        "id": 425619625,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709938224
    },
    {
        "content": "<p><code>MeasurableSet (Set.powerset {0, 1, 2})</code> typechecks just fine</p>",
        "id": 425619898,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709938398
    },
    {
        "content": "<p>or you could do <code>MeasurableSet (Set.powerset { n | n &lt; 3 })</code></p>",
        "id": 425620420,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709938748
    }
]