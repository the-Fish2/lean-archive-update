[
    {
        "content": "<p>Hi everyone,</p>\n<p>I am trying to write some instances extends some structure and <code>Algebra K L</code>, then the following phenomenon occurs. Why is the following <code>rfl</code> failed?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Galois</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAlgebra</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- failed</span>\n</code></pre></div>\n<p>This problem causes type mismatch error when I try to write instances filling some field with <code>algebraMap K L</code> . Is this a bug or is there something I miss? Thank you!</p>",
        "id": 421503651,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1707934178
    },
    {
        "content": "<p>This is expected. The smul field of an algebra instance will not be defeq to the one obtained from the ring hom</p>",
        "id": 421510140,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707936534
    },
    {
        "content": "<p>This might be what you are thinking of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Galois</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Subfield</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Subfield.toAlgebra</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">L</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAlgebra</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 421510851,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707936811
    },
    {
        "content": "<p>In general you should avoid using <code>RingHom.toAlgebra</code> if you can</p>",
        "id": 421511277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707936984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/.28algebraMap.20K.20L.29.2EtoAlgebra.20not.20definitionally.20equal/near/421510140\">said</a>:</p>\n<blockquote>\n<p>This is expected. The smul field of an algebra instance will not be defeq to the one obtained from the ring hom</p>\n</blockquote>\n<p>I see. Thank you very much! I tried to fill the <code>smul</code> field in my instance directly using <code>Algebra.smul</code> then everything works.</p>",
        "id": 421511787,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1707937181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"611077\">Jiang Jiedong</span> has marked this topic as resolved.</p>",
        "id": 421512125,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707937282
    },
    {
        "content": "<p>can you show a bit more about what you're doing here?</p>",
        "id": 421512696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707937455
    },
    {
        "content": "<p>Of course! I was trying to define <code>ValAlgebra</code> and instance of <code>ValAlgebra K L</code> when <code>K</code> is a discretely valued field and <code>L</code> is a finite extension of <code>K</code>. (just leaving every proof as sorry) Let <code>K'</code> be an intermediate field. I found that <code>IsScalarTower K K' L</code> instance will be unable to synth anymore, if I write a bad <code>ValAlgebra K L</code> instance using <code>RingHom.toAlgebra</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.Valuation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.DiscreteValuationRing.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Galois</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Group.TypeTags</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Hom.Ring</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">DiscreteValuation</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">DiscretelyValued</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Valued</span> <span class=\"n\">R</span> <span class=\"n\">ℤₘ₀</span> <span class=\"n\">where</span>\n  <span class=\"n\">v_is_surj</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">v.toFun</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Surjective</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommGroupWithZero</span> <span class=\"bp\">Γ</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Valued</span> <span class=\"n\">R</span> <span class=\"bp\">Γ</span><span class=\"o\">]:</span> <span class=\"n\">Preorder</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ValRingHom</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"n\">R</span> <span class=\"bp\">Γ</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommGroupWithZero</span> <span class=\"bp\">Γ</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommGroupWithZero</span> <span class=\"bp\">Γ</span><span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">vR</span> <span class=\"o\">:</span> <span class=\"n\">Valued</span> <span class=\"n\">R</span> <span class=\"bp\">Γ</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vS</span> <span class=\"o\">:</span> <span class=\"n\">Valued</span> <span class=\"n\">S</span> <span class=\"bp\">Γ</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">OrderRingHom</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">ContinuousMap</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">val_isEquiv_comap</span> <span class=\"o\">:</span> <span class=\"n\">vR.v.IsEquiv</span> <span class=\"o\">(</span><span class=\"n\">vS.v.comap</span> <span class=\"n\">toOrderRingHom.toRingHom</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ValAlgebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"n\">R</span> <span class=\"bp\">Γ</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommGroupWithZero</span> <span class=\"bp\">Γ</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommGroupWithZero</span> <span class=\"bp\">Γ</span><span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">vR</span> <span class=\"o\">:</span> <span class=\"n\">Valued</span> <span class=\"n\">R</span> <span class=\"bp\">Γ</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vA</span> <span class=\"o\">:</span> <span class=\"n\">Valued</span> <span class=\"n\">A</span> <span class=\"bp\">Γ</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">ValRingHom</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DiscretelyValued</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DiscretelyValued</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ValAlgebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">monotone'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">continuous_toFun</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">val_isEquiv_comap</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"n\">a.smul</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"n\">a.commutes'</span>\n  <span class=\"n\">smul_def'</span> <span class=\"o\">:=</span> <span class=\"n\">a.smul_def'</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K'</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsGalois</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">K</span> <span class=\"n\">K'</span> <span class=\"n\">L</span>\n  <span class=\"c1\">-- would fail if ValAlgebra K L is written badly, I wrote a ValRingHom.toValAlgebra at first</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">ValAlgebra</span> <span class=\"n\">K</span> <span class=\"n\">K'</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">ValAlgebra</span> <span class=\"n\">K'</span> <span class=\"n\">L</span>\n</code></pre></div>",
        "id": 421516187,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1707938666
    },
    {
        "content": "<p>You should be able to write just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ValAlgebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">where</span>\n  <span class=\"n\">monotone'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">continuous_toFun</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">val_isEquiv_comap</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and lean will automatically fill in the other fields using <code>a</code> in the background</p>",
        "id": 421607212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707987383
    }
]