[
    {
        "content": "<p>How can I detect fallacious proofs like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">proof</span><span class=\"o\">:(</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">3</span><span class=\"o\">):=</span><span class=\"n\">a</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Q E D -/</span>\n</code></pre></div>",
        "id": 445643036,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718811828
    },
    {
        "content": "<p><code>#print proof</code></p>",
        "id": 445643787,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1718811982
    },
    {
        "content": "<p>It's not fallacious, it just has type <code>2 = 3 → 2 = 3</code></p>",
        "id": 445643823,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1718811991
    },
    {
        "content": "<p>You proved <code>2 = 3 → 2 = 3</code>, there is nothing wrong with that.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">proof</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">3</span><span class=\"o\">):=</span><span class=\"n\">a</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Q E D -/</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">proof</span><span class=\"w\"> </span><span class=\"c1\">-- proof (a : 2 = 3) : 2 = 3</span>\n</code></pre></div>",
        "id": 445644029,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1718812045
    },
    {
        "content": "<p>More to the point: this goes to show that it is safer to avoid <code>variable</code>s in <code>Prop</code></p>",
        "id": 445645347,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1718812347
    },
    {
        "content": "<p>Is there a way to check if a proof has used variables by mistake? e.g. if someone had define <code>variable (proof2equals3:2=3)</code> in another library</p>",
        "id": 445645478,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718812378
    },
    {
        "content": "<p><code>variable</code> is local to your file (or section)</p>",
        "id": 445646479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718812612
    },
    {
        "content": "<p>In addition to Mauricio's suggestion, you can hover over <code>proof</code> in VS Code and see its type.</p>",
        "id": 445659022,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718815998
    },
    {
        "content": "<p>A proof, but you can see that you've relied on an extra axiom:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">axiom</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">proof</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Q E D -/</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">proof</span><span class=\"w\">          </span><span class=\"c1\">-- proof : 2 = 3</span>\n<span class=\"bp\">#</span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">axioms</span><span class=\"w\"> </span><span class=\"n\">proof</span><span class=\"w\">   </span><span class=\"c1\">-- 'proof' depends on axioms: [a]</span>\n</code></pre></div>",
        "id": 446091984,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1718979279
    }
]