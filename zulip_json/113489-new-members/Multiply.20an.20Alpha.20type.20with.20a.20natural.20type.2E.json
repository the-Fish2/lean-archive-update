[
    {
        "content": "<p>Hi all,</p>\n<p>I was wondering if it was possible to easily set up the second definition <code>summa_mul</code> to work out. In the second definition, I need help adding an instance to allow for the multiplication of an alpha and a natural number. Is this possible? And, if so, how can I do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Filter</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">summa</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">summa_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HMul</span> <span class=\"n\">α</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">i</span>\n<span class=\"c1\">-- Here is the error!</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">summa</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">9</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">summa</span> <span class=\"mi\">8</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 435905348,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1714334597
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HMul#doc\">docs#HMul</a> takes three inputs: if you feed it X, Y and Z, then this means that <code>x * y : Z</code> if <code>x : X</code> and <code>y : Y</code>. So if you want the type of <code>a * i</code> to be alpha again, then you want <code>[HMul α ℕ α]</code>.</p>",
        "id": 435907984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714337327
    },
    {
        "content": "<p>Usually we would write this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">summa_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 435908773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714338064
    },
    {
        "content": "<p>Here <code>•</code> is \"the obvious multiplication by the naturals\" not just \"some arbitrary function that is written with a <code>*</code> symbol</p>",
        "id": 435908801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714338097
    }
]