[
    {
        "content": "<p>I'm trying to formalize the argument that the only automorphism of R is the identity.</p>\n<p>The proof I'm following first proves that f(x)=x for all rational numbers (Lean seems to know this already via <code>map_ratCast</code>), then shows that it's monotone (I've proven that part), and then it argues basically by \"sandwiching\" a real number between successfully closer rational numbers.</p>\n<p>It's that last part that I'm struggling with. I know that real numbers are defined as equivalence classes of Cauchy sequences, but I don't yet understand how I can make use of that. If I'm following the proof as it's presented, I would have to show a) that for a real number x, for any arbitrary epsilon, there are two rational numbers with distance &lt; epsilon such that x is between them, and b) the classic argument that two real numbers are equal iff their distance is less than any arbitrary epsilon. Both of these I don't know how to prove. But maybe there's also another (more natural) way to do something equivalent in Lean?</p>\n<p>Basically, what I have is the following, and I don't know how to proceed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">r_auto_unique</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">RingHom</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_bij</span> <span class=\"o\">:</span> <span class=\"n\">Bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">RingHom.id</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">monotone</span> <span class=\"o\">:</span> <span class=\"n\">StrictMono</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"n\">lt</span>\n    <span class=\"k\">let</span> <span class=\"n\">ysq</span> <span class=\"o\">:=</span> <span class=\"n\">x'</span><span class=\"bp\">-</span><span class=\"n\">x</span>\n    <span class=\"k\">have</span> <span class=\"n\">ysq_pos</span> <span class=\"o\">:</span> <span class=\"n\">ysq</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">Real.sqrt</span> <span class=\"n\">ysq</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">calc</span>\n        <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x'</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">ysq</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sq_sqrt</span><span class=\"o\">]</span>\n          <span class=\"n\">linarith</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n        <span class=\"n\">_</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">apply</span> <span class=\"n\">sq_pos_of_ne_zero</span>\n            <span class=\"n\">intro</span> <span class=\"n\">contra</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">f.map_zero'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">contra</span>\n            <span class=\"n\">apply</span> <span class=\"n\">is_bij.left</span> <span class=\"n\">at</span> <span class=\"n\">contra</span>\n            <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">sqrt_pos_of_pos</span> <span class=\"n\">ysq_pos</span>\n            <span class=\"n\">linarith</span>\n    <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>(Maybe I should go back to reading \"Mathematics in Lean\"? Is that explained there?)</p>",
        "id": 433618515,
        "sender_full_name": "Tainnor",
        "timestamp": 1713307192
    },
    {
        "content": "<p>There will almost certainly be a lemma saying something trivially mathematically equivalent to this in the library, but if you want to prove it yourself then to sandwich r between two rationals which distance &lt; epsilon apart then choose N with N&gt;1/epsilon, let s be floor(<code>3*N*r</code>)-1 and t=ceil(<code>3*N*r</code>)+1 and then use s/3N and t/3N. (or just floor(Nr) and ceil(Nr) if &lt;= is OK)</p>",
        "id": 433619115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713307457
    },
    {
        "content": "<p>The answer depends on how much you want to develop yourself rather than using from the library. There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exists_rat_btwn#doc\">docs#exists_rat_btwn</a> that you can use with x - eps/2 and x and again on the other side</p>",
        "id": 433619330,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713307581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20prove.20equalities.20of.20real.20numbers/near/433619330\">said</a>:</p>\n<blockquote>\n<p>The answer depends on how much you want to develop yourself rather than using from the library. There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exists_rat_btwn#doc\">docs#exists_rat_btwn</a> that you can use with x - eps/2 and x and again on the other side</p>\n</blockquote>\n<p>Yeah, I'm fine with using mathlib for things like that. Thanks, that should help. I did look at the docs, but sometimes it can be hard to find something very particular.</p>",
        "id": 433619431,
        "sender_full_name": "Tainnor",
        "timestamp": 1713307660
    },
    {
        "content": "<p>How about question b)? Is there a theorem for \"if for all eps &gt; 0, |r-r'| &lt; eps, then r = r'\"?</p>",
        "id": 433619544,
        "sender_full_name": "Tainnor",
        "timestamp": 1713307705
    },
    {
        "content": "<p>And maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=eq_of_forall_dist_le#doc\">docs#eq_of_forall_dist_le</a> for the second</p>",
        "id": 433619557,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713307716
    },
    {
        "content": "<p>wonderful! Thanks. I was looking for exactly that.</p>",
        "id": 433619644,
        "sender_full_name": "Tainnor",
        "timestamp": 1713307778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"685366\">Tainnor</span> has marked this topic as resolved.</p>",
        "id": 433619806,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713307870
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearOrderedRing.uniqueOrderedRingIso#doc\">docs#LinearOrderedRing.uniqueOrderedRingIso</a> is roughly that result</p>",
        "id": 433679003,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713336693
    }
]