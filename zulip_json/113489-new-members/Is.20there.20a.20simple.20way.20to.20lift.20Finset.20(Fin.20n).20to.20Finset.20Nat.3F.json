[
    {
        "content": "<p>I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set4</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">set4'</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>I wanted to prove that <code>set4</code> and <code>set4'</code> are equal. After some experimenting, I came upon the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">set4'</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.map</span> <span class=\"o\">⟨</span><span class=\"n\">Fin.val</span><span class=\"o\">,</span> <span class=\"n\">Fin.val_injective</span><span class=\"o\">⟩</span> <span class=\"n\">set4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>But the statement of the proposition seems a bit verbose. Is there a cleaner way to express that <code>set4</code> and <code>set4'</code> are equal?</p>",
        "id": 431064677,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1712155266
    },
    {
        "content": "<p>No, you found the correct spelling</p>",
        "id": 431064797,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712155302
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 431064884,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1712155323
    },
    {
        "content": "<p>There's no bundling of <code>Fin.val</code> as an embedding?</p>",
        "id": 431115140,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712156747
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.valEmbedding#doc\">docs#Fin.valEmbedding</a></p>",
        "id": 431115257,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712156773
    },
    {
        "content": "<p>Thank you. So the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">set4'</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.map</span> <span class=\"n\">Fin.valEmbedding</span> <span class=\"n\">set4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Are there tricks to finding these things?</p>",
        "id": 431117797,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1712157538
    },
    {
        "content": "<p>You can use loogle:</p>\n<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ⊢ Fin ?n ↪ ℕ</p>",
        "id": 431596634,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712347808
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fin/Basic.html#Fin.valEmbedding\">Fin.valEmbedding</a></p>",
        "id": 431596636,
        "sender_full_name": "loogle",
        "timestamp": 1712347809
    }
]