[
    {
        "content": "<p>There is the following example in <em>Mathematics in Lean</em> in Section 3.2:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FnUb</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FnHasUb</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">FnUb</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fnUb_add</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"o\">:</span> <span class=\"n\">FnUb</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hgb</span> <span class=\"o\">:</span> <span class=\"n\">FnUb</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">FnUb</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hgb</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ubf</span> <span class=\"o\">:</span> <span class=\"n\">FnHasUb</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ubg</span> <span class=\"o\">:</span> <span class=\"n\">FnHasUb</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FnHasUb</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ubfa</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ubf</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">ubgb</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ubg</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">fnUb_add</span> <span class=\"n\">ubfa</span> <span class=\"n\">ubgb</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Replacing the two <code>obtain</code>s  in the <code>example</code> also works. Other than that <code>obtain</code> removes the original hypothesis from the context, how else could <code>have</code> and <code>obtain</code> differ? I tried to construct an example where one could deconstruct with <code>obtain</code> but not with <code>have</code>. So far no success. Help much appreciated.</p>",
        "id": 422615316,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1708521469
    },
    {
        "content": "<p>It has a few more bells and whistles:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">em</span> <span class=\"n\">True</span>\n  <span class=\"n\">all_goals</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 422618045,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708522290
    },
    {
        "content": "<p>Wow. Thanks. I wouldn't have come up with these.</p>",
        "id": 422627239,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1708525032
    },
    {
        "content": "<blockquote>\n<p>\"The <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/RCases.html#Std.Tactic.obtain\">obtain tactic</a> is a combination of have and rcases\"</p>\n</blockquote>\n<p>Here's the docs on <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/RCases.html#Std.Tactic.rcases\">rcases</a>. The recursive pattern matching with <code>rcases</code> can sometimes save you a lot of boilerplate.</p>",
        "id": 422699324,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1708547002
    }
]