[
    {
        "content": "<p>Why does the following example fail, even though it is basically copied from the documentation (<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Basic.html#Set.pair_comm\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Basic.html#Set.pair_comm</a>).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Set.pair_comm</span>\n</code></pre></div>\n<p>I get the error <code>typeclass instance problem is stuck, it is often due to metavariables</code>.</p>",
        "id": 422117649,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1708280338
    },
    {
        "content": "<p>You need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">({</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Set.pair_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 422117812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708280484
    },
    {
        "content": "<p>(I assume you had the import, and just forgot to post it)</p>",
        "id": 422117819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708280494
    },
    {
        "content": "<p>The fact you need <code>: Set</code> is definitely annoying</p>",
        "id": 422117829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708280509
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> !</p>",
        "id": 422117941,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1708280578
    },
    {
        "content": "<p>I wonder if it would make sense for mathlib to have a default instance here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">default_instance</span> <span class=\"n\">low</span><span class=\"o\">]</span> <span class=\"n\">Set.instSingletonSet</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Set.pair_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 422118374,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708280930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690867\">Philipp SL Schäfer</span> has marked this topic as resolved.</p>",
        "id": 422119013,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708281509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Pair.20set.20in.20proposition/near/422118374\">said</a>:</p>\n<blockquote>\n<p>I wonder if it would make sense for mathlib to have a default instance here?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">default_instance</span> <span class=\"n\">low</span><span class=\"o\">]</span> <span class=\"n\">Set.instSingletonSet</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Set.pair_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I think that would be a great idea</p>",
        "id": 422347753,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708405972
    }
]