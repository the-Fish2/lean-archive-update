[
    {
        "content": "<p>How to express \"The set of column vectors of a matrix\"?</p>\n<p>I have this, i want to get it like \"A.to_column_vectors\", of course this doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n      <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Because i am translating this theorem from LinearAlgebra:<br>\n\"Given that A is an m * n matrix, for any m-dimensional vector b, the linear equation system AX=b has at most one solution. Use lean code to prove that the column vectors of A are linearly independent\"</p>\n<p>Something like , this is wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">linear_equations_unique_solution</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">A.mul_vec</span> <span class=\"n\">b₁</span> <span class=\"bp\">=</span> <span class=\"n\">A.mul_vec</span> <span class=\"n\">b₂</span> <span class=\"bp\">→</span> <span class=\"n\">b₁</span> <span class=\"bp\">=</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">A.to_column_vectors</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 409901527,
        "sender_full_name": "chenjulang",
        "timestamp": 1703502509
    },
    {
        "content": "<p>Any ideas about how to describe this theorem in LEAN?</p>",
        "id": 409901657,
        "sender_full_name": "chenjulang",
        "timestamp": 1703502622
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.mulVec_injective_iff#doc\">docs#Matrix.mulVec_injective_iff</a> ?</p>",
        "id": 409904157,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703504628
    },
    {
        "content": "<p>I have a try</p>",
        "id": 409908904,
        "sender_full_name": "chenjulang",
        "timestamp": 1703508463
    },
    {
        "content": "<p>Very close</p>",
        "id": 409911617,
        "sender_full_name": "chenjulang",
        "timestamp": 1703510808
    },
    {
        "content": "<p>Any ideas? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n      <span class=\"kd\">theorem</span> <span class=\"n\">MainGoal4</span>  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n      <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n      <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n      <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 409912700,
        "sender_full_name": "chenjulang",
        "timestamp": 1703511839
    },
    {
        "content": "<p>how can we use \"hA\"</p>",
        "id": 409912943,
        "sender_full_name": "chenjulang",
        "timestamp": 1703512071
    },
    {
        "content": "<p>First of all <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>. In particular why work with matrices over <code>Fin 1</code>?<br>\nNext, in <code>hA</code>, <code>b</code> has type <code>Matrix m n R</code> which is probably unintended?</p>",
        "id": 409916466,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703514541
    },
    {
        "content": "<p>I may have defined it wrong and I don’t know how to correct it.</p>",
        "id": 409917205,
        "sender_full_name": "chenjulang",
        "timestamp": 1703515159
    },
    {
        "content": "<p>Maybe <code>(hA : ∀ b : Matrix m (Fin 1) R, ∃! x, A * x = b)</code>?<br>\nBut why not just <code>(hA : ∀ b : m → R, ∃! x, A.mulVec x = b)</code>?</p>",
        "id": 409917436,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703515353
    },
    {
        "content": "<p><span aria-label=\"shaking face\" class=\"emoji emoji-1fae8\" role=\"img\" title=\"shaking face\">:shaking_face:</span>  i am not sure</p>",
        "id": 409917556,
        "sender_full_name": "chenjulang",
        "timestamp": 1703515461
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n      <span class=\"kd\">theorem</span> <span class=\"n\">MainGoal4</span>  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n      <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n      <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n      <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">--todo</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">LinearIndependent</span><span class=\"o\">]</span>\n        <span class=\"n\">refine'</span> <span class=\"n\">_root_.by_contradiction</span> <span class=\"n\">_</span>\n        <span class=\"n\">intro</span> <span class=\"n\">oppo</span>\n        <span class=\"k\">let</span> <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">hA</span> <span class=\"mi\">0</span>\n        <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Matrix.mul_zero</span> <span class=\"n\">A</span>\n        <span class=\"c1\">--</span>\n        <span class=\"c1\">-- refine' Matrix.mulVec_injective_iff.1 _</span>\n        <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 409919410,
        "sender_full_name": "chenjulang",
        "timestamp": 1703517079
    },
    {
        "content": "<p>Now I know \"h2\"and\"h3\" says “There is at most one x”，“0 is one of it”.<br>\nAnd then oppo says \"There are other solutions to x besides the zero vector\".</p>\n<p>These two things are obviously contradictory. <br>\nBut how to express this contradiction?</p>",
        "id": 409919613,
        "sender_full_name": "chenjulang",
        "timestamp": 1703517270
    },
    {
        "content": "<p><span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 409919814,
        "sender_full_name": "chenjulang",
        "timestamp": 1703517437
    },
    {
        "content": "<p>Is there a specific application to this? I strongly believe you are <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>-ing.</p>",
        "id": 409921619,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703518620
    },
    {
        "content": "<p><code>hA</code> does not say that There are other solutions to x <strong>besides the zero vector</strong></p>",
        "id": 409921670,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703518678
    },
    {
        "content": "<p>oh</p>",
        "id": 409921787,
        "sender_full_name": "chenjulang",
        "timestamp": 1703518776
    },
    {
        "content": "<p>you are right</p>",
        "id": 409921795,
        "sender_full_name": "chenjulang",
        "timestamp": 1703518783
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/v7NAxmxMsPHtq9zA2HwAvjjc/image.png\">image.png</a><br>\nCan oppo says \"There are other solutions to x besides the zero vector\"?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/v7NAxmxMsPHtq9zA2HwAvjjc/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/v7NAxmxMsPHtq9zA2HwAvjjc/image.png\"></a></div>",
        "id": 409921980,
        "sender_full_name": "chenjulang",
        "timestamp": 1703518949
    },
    {
        "content": "<p>Now i am trying to translate oppo into \"There are other solutions to x besides the zero vector\"</p>",
        "id": 409922008,
        "sender_full_name": "chenjulang",
        "timestamp": 1703518992
    },
    {
        "content": "<p>something like that maybe</p>",
        "id": 409922017,
        "sender_full_name": "chenjulang",
        "timestamp": 1703519003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>  speaking of \"specific application\", i copy that from the book  “linear algebra and its applications”， it is an after-class exercise .</p>",
        "id": 409922251,
        "sender_full_name": "chenjulang",
        "timestamp": 1703519215
    },
    {
        "content": "<p>If your goal is to translate textbook statements into lean and there are no lean applications, is the following good enough?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">MainGoal4</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">A.transpose</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Matrix.mulVec_injective_iff.1</span> <span class=\"o\">((</span><span class=\"n\">Function.bijective_iff_existsUnique</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hA</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span>\n</code></pre></div>",
        "id": 409922576,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703519571
    },
    {
        "content": "<p>Excellent!!!</p>",
        "id": 409922689,
        "sender_full_name": "chenjulang",
        "timestamp": 1703519728
    },
    {
        "content": "<p>Do you think there is a way to solve ？（through my kind of thinking above) <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> <br>\nSomething like \"oppo\" can implies \"There are other solutions to x besides the zero vector\"</p>",
        "id": 409922891,
        "sender_full_name": "chenjulang",
        "timestamp": 1703519944
    },
    {
        "content": "<p>Your idea is to use the theorem related to injectivity and bijection, which is of course very powerful.</p>",
        "id": 409922980,
        "sender_full_name": "chenjulang",
        "timestamp": 1703520012
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">MainGoal4</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">A.transpose</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">LinearIndependent</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.ker_eq_bot'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">hv'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 409923941,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703520746
    },
    {
        "content": "<p>oh oh</p>",
        "id": 409923962,
        "sender_full_name": "chenjulang",
        "timestamp": 1703520799
    },
    {
        "content": "<p>Thanks a lot</p>",
        "id": 409923965,
        "sender_full_name": "chenjulang",
        "timestamp": 1703520806
    },
    {
        "content": "<p>I'll try</p>",
        "id": 409924089,
        "sender_full_name": "chenjulang",
        "timestamp": 1703520929
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 409924160,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703520994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>  Thanks for your inspiration. This is my proof \"MainGoal4\", have a look, i translate it from textbook:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n          <span class=\"kd\">theorem</span> <span class=\"n\">MainGoal4_1</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n          <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n          <span class=\"o\">:</span>\n          <span class=\"n\">mulVec</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">yi</span> <span class=\"bp\">↦</span> <span class=\"bp\">∑</span> <span class=\"n\">xi</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">xi</span> <span class=\"bp\">•</span> <span class=\"n\">A</span> <span class=\"n\">yi</span> <span class=\"n\">xi</span>\n            <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mulVec</span><span class=\"o\">]</span>\n            <span class=\"n\">ext</span> <span class=\"n\">h7_x</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dotProduct</span><span class=\"o\">]</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n            <span class=\"n\">refine'</span> <span class=\"n\">sum_congr</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n            <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n            <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x_1</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">h7_x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span>\n\n      <span class=\"kd\">theorem</span> <span class=\"n\">MainGoal4</span>\n      <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n      <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- mulVec就是矩阵和向量的乘法运算</span>\n      <span class=\"o\">:</span><span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">A.transpose</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"c1\">-- refine' linearIndependent_iff'.2 _</span>\n        <span class=\"n\">refine'</span> <span class=\"n\">Fintype.linearIndependent_iff.mpr</span> <span class=\"n\">_</span>\n        <span class=\"k\">have</span> <span class=\"n\">h6</span><span class=\"o\">:=</span> <span class=\"n\">hA</span> <span class=\"mi\">0</span>\n        <span class=\"k\">have</span> <span class=\"n\">_h6</span><span class=\"o\">:=</span> <span class=\"n\">hA</span> <span class=\"mi\">0</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h6_1</span><span class=\"o\">,</span> <span class=\"n\">h6_2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h6</span>\n        <span class=\"k\">have</span> <span class=\"n\">h7</span><span class=\"o\">:</span> <span class=\"n\">mulVec</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"c1\">-- 这个引理可以单独抽出来</span>\n        <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">yi</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">xi</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">xi</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">yi</span> <span class=\"n\">xi</span><span class=\"o\">)</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">MainGoal4_1</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h7</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h6_1</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span>\n        <span class=\"n\">by_contra</span> <span class=\"n\">oppo</span>\n        <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">oppo</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Matrix.transpose</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n        <span class=\"n\">clear</span> <span class=\"n\">hA</span>\n        <span class=\"k\">have</span> <span class=\"n\">h6_oppo</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">,(</span><span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">use</span> <span class=\"mi\">0</span>\n          <span class=\"n\">use</span> <span class=\"n\">h1</span>\n          <span class=\"n\">constructor</span>\n          <span class=\"bp\">·</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">oppo</span> <span class=\"c1\">-- 机器和人一样对于这种双重否定的问题一样很难理解</span>\n            <span class=\"n\">exact</span> <span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">oppo.symm</span><span class=\"o\">)</span> <span class=\"n\">h3</span>\n            <span class=\"n\">done</span>\n          <span class=\"n\">constructor</span>\n          <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">mulVec_zero</span> <span class=\"n\">A</span>\n          <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MainGoal4_1</span> <span class=\"n\">A</span> <span class=\"n\">h1</span><span class=\"o\">]</span>\n            <span class=\"k\">have</span> <span class=\"n\">h8</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n            <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">yi</span> <span class=\"bp\">↦</span> <span class=\"bp\">∑</span> <span class=\"n\">xi</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">xi</span> <span class=\"bp\">•</span> <span class=\"n\">A</span> <span class=\"n\">yi</span> <span class=\"n\">xi</span><span class=\"o\">)</span>\n              <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n              <span class=\"n\">ext</span> <span class=\"n\">h8_1</span>\n              <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_apply</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h8</span><span class=\"o\">]</span>\n            <span class=\"n\">clear</span> <span class=\"n\">h8</span>\n            <span class=\"n\">exact</span> <span class=\"n\">h2</span>\n          <span class=\"n\">done</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">x3</span><span class=\"o\">,</span><span class=\"n\">x4</span><span class=\"o\">,</span><span class=\"n\">x5</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h6_oppo</span>\n        <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ExistsUnique.unique</span> <span class=\"n\">_h6</span> <span class=\"n\">x4</span> <span class=\"n\">x5</span><span class=\"o\">)</span>\n        <span class=\"n\">exact</span> <span class=\"n\">x3</span> <span class=\"n\">h4</span>\n        <span class=\"n\">done</span>\n\n\n      <span class=\"kd\">theorem</span> <span class=\"n\">MainGoal5</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"c1\">-- 一个大神的证明</span>\n      <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">A.transpose</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Matrix.mulVec_injective_iff.1</span> <span class=\"o\">((</span><span class=\"n\">Function.bijective_iff_existsUnique</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hA</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span>\n        <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 410036131,
        "sender_full_name": "chenjulang",
        "timestamp": 1703603093
    }
]