[
    {
        "content": "<p>If I have a functor <code>T</code> and I can do <code>T.obj (T.obj X))</code> but I can't do <code>(T ⋙ T).obj X</code>, what do I need to tell Lean to get it to allow me to do this?</p>\n<p>The first example works fine but the second example errors with the following message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.311</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.308</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.315</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Monoidal.Braided</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Types</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Monad.Types</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">NatTrans</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Monad</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">guard'</span> <span class=\"o\">:</span> <span class=\"n\">T.obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">T.obj</span> <span class=\"o\">(</span><span class=\"n\">T.obj</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Monad</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">guard'</span> <span class=\"o\">:</span> <span class=\"n\">T.obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"bp\">⋙</span> <span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422531441,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1708481173
    },
    {
        "content": "<p>one thing you can do is write <code>T ⋙ T</code> as <code>(T : Functor C C) ⋙ T</code> or <code>T.toFunctor ⋙ T</code> to give Lean a hint about the coercion it's supposed to be doing</p>",
        "id": 422532273,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708481884
    },
    {
        "content": "<p>Using T.toFunctor makes everything work, thank you!</p>",
        "id": 422532427,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1708482006
    },
    {
        "content": "<p>no problem!</p>",
        "id": 422532570,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708482134
    },
    {
        "content": "<p>Is there a similar thing going on here (note: I've changed the type of <code>guard'</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Monad</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">guard'</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">T.obj</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"o\">:=</span> <span class=\"n\">T.map</span> <span class=\"n\">guard'</span> <span class=\"bp\">≫</span> <span class=\"n\">T.μ.app</span> <span class=\"n\">X</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I see the following error message but I would've expected <code>T.obj (T.obj X)</code> to be the same as <code> (T.toFunctor ⋙ T.toFunctor).obj X</code> due to <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp_obj\"><code>CategoryTheory.Functor.comp_obj</code></a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">T.map</span> <span class=\"n\">guard'</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">Monad.μ</span> <span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span>\n<span class=\"n\">argument</span>\n  <span class=\"o\">(</span><span class=\"n\">Monad.μ</span> <span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">T.toFunctor</span> <span class=\"bp\">⋙</span> <span class=\"n\">T.toFunctor</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">T.obj</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.114</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">T.obj</span> <span class=\"o\">(</span><span class=\"n\">T.obj</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"bp\">?</span><span class=\"n\">m.259</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.114</span>\n</code></pre></div>",
        "id": 422532632,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1708482217
    },
    {
        "content": "<p>There's also the possibility I made a mathematical mistake here as opposed to it being a lean issue, I'm not very confident in what I'm writing</p>",
        "id": 422532921,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1708482435
    },
    {
        "content": "<p>is it possible that the terms are in the wrong order?</p>",
        "id": 422533055,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708482583
    },
    {
        "content": "<p><code>set filter := T.μ.app X ≫ T.map guard'</code> works</p>",
        "id": 422533145,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708482643
    },
    {
        "content": "<p>one thing that might help is to write out</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">T.μ.app</span> <span class=\"n\">X</span>\n<span class=\"k\">have</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">T.map</span> <span class=\"n\">guard'</span>\n<span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">≫</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>so you can inspect the types and see how it fits together</p>",
        "id": 422533307,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708482833
    },
    {
        "content": "<p>Thank you! All of this makes sense now. After seeing the type of <code>T.μ.app X ≫ T.map guard'</code> I figured I was wrong in passing <code>X</code> to <code>T.μ.app X</code> and tried <code>set filter := T.map guard' ≫ T.μ.app _</code> which seems to work, is there a way to see what lean filled used to fill in the <code>_</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Monad</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">guard'</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">T.obj</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">set</span> <span class=\"n\">filter'</span> <span class=\"o\">:=</span> <span class=\"n\">T.μ.app</span> <span class=\"n\">_</span> <span class=\"bp\">≫</span> <span class=\"n\">T.map</span> <span class=\"n\">guard'</span>\n    <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"o\">:=</span> <span class=\"n\">T.map</span> <span class=\"n\">guard'</span> <span class=\"bp\">≫</span> <span class=\"n\">T.μ.app</span> <span class=\"n\">_</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    C : Type ?u.113</span>\n<span class=\"cm\">    x : C</span>\n<span class=\"cm\">    inst✝ : Category.{?u.114, ?u.113} C</span>\n<span class=\"cm\">    T : CategoryTheory.Monad C</span>\n<span class=\"cm\">    X : C</span>\n<span class=\"cm\">    guard' : X ⟶ T.obj x</span>\n<span class=\"cm\">    filter' : (T.toFunctor ⋙ T.toFunctor).obj X ⟶ T.obj (T.obj x) := (Monad.μ T).app X ≫ T.map guard'</span>\n<span class=\"cm\">    filter : T.obj X ⟶ T.obj x := T.map guard' ≫ (Monad.μ T).app x</span>\n<span class=\"cm\">    ⊢ sorryAx (Sort ?u.241)</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422533565,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1708483045
    },
    {
        "content": "<p>try hovering over the <code>_</code></p>",
        "id": 422533728,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708483179
    },
    {
        "content": "<p>from my end it looks like the value is <code>x</code> (lowercase)</p>",
        "id": 422533789,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708483206
    },
    {
        "content": "<p>OH <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 422533829,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1708483243
    },
    {
        "content": "<p>The original code works now, the lowercase x in the type signature should be uppercase</p>",
        "id": 422533856,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1708483268
    },
    {
        "content": "<p>Thank you!!</p>",
        "id": 422533871,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1708483272
    },
    {
        "content": "<p>sure thing... if you want to avoid stuff like that you can try turning off <code>autoImplicit</code></p>",
        "id": 422533901,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708483297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"601198\">Sam Ezeh</span> has marked this topic as resolved.</p>",
        "id": 422533911,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708483319
    }
]