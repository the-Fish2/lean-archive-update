[
    {
        "content": "<p>Hi! In <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html#well-founded-recursion-and-induction\">TPIL the section 8. Induction and Recursion</a> the example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">takeWhile</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"mi\">0</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">as.size</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">as.get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n      <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"k\">then</span>\n        <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r.push</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">r</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">r</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">go</span> <span class=\"n\">i</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">as.size</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>seems not working</p>",
        "id": 421809408,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708071269
    },
    {
        "content": "<p>In my local env it says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">395</span><span class=\"o\">:</span><span class=\"mi\">26</span><span class=\"o\">:</span>\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Array</span> <span class=\"n\">α</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">α</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.50873</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.50873</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 421809694,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708071407
    },
    {
        "content": "<p>Yet in <a href=\"http://live.lang-lang.org\">live.lang-lang.org</a> the same code snippet <a href=\"http://tinyurl.com/y538k977\">here</a> reports two different problems:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LeanProject.lean</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"mi\">8</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`-</span><span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">remaining</span> <span class=\"n\">goals</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">decreasing_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">tactic</span> <span class=\"n\">for</span> <span class=\"n\">discharging</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">goal</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"n\">as</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span>\n<span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">as</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Array.get</span> <span class=\"n\">as</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">sorryAx</span> <span class=\"n\">Nat</span> <span class=\"n\">true</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sorryAx</span> <span class=\"n\">Nat</span> <span class=\"n\">true</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n<span class=\"n\">LeanProject.lean</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span><span class=\"mi\">27</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">as.size'</span>\n<span class=\"n\">LeanProject.lean</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span><span class=\"mi\">2</span>\n<span class=\"n\">Too</span> <span class=\"n\">many</span> <span class=\"n\">extra</span> <span class=\"kd\">parameters</span> <span class=\"n\">bound</span><span class=\"bp\">;</span> <span class=\"n\">the</span> <span class=\"n\">function</span> <span class=\"kd\">definition</span> <span class=\"n\">only</span> <span class=\"n\">has</span> <span class=\"mi\">0</span> <span class=\"n\">extra</span> <span class=\"kd\">parameters</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 421809928,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708071521
    },
    {
        "content": "<p>It seems in my local env some type cannot be inferred yet I dont know why in the playground the <code>termination_by</code> does not work</p>",
        "id": 421811833,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708072286
    },
    {
        "content": "<p>adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>before the def now in my local env it works</p>",
        "id": 421812838,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708072681
    },
    {
        "content": "<p>The syntax of <code>termination_by</code> changed recently. This works on live:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">takeWhile</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"mi\">0</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">as.size</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">as.get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n      <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"k\">then</span>\n        <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r.push</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">r</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">r</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">as.size</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 421813224,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708072844
    },
    {
        "content": "<p>Yeah I checked on live it works now<span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 421814182,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708073214
    },
    {
        "content": "<p>Ah I checked the website of TPIL it's <code>termination by as.size - i</code> now. I used my local version of TPIL from  <a href=\"https://github.com/leanprover/theorem_proving_in_lean4\">https://github.com/leanprover/theorem_proving_in_lean4</a> before. Currently I am using 4.5.0-rc1 and updating it to 4.6.0-rc1 now <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 421817528,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708074486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560873\">Coriver Chen</span> has marked this topic as resolved.</p>",
        "id": 421818509,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708074875
    }
]