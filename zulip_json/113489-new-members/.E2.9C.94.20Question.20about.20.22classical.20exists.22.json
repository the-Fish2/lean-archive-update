[
    {
        "content": "<p>I am learning lean4 from the \"Theorem Proving in Lean 4\" book, and couldn't understand the following proof in Chapter 4 regarding \"classical exists\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Classical</span>\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">byContradiction</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">      </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">        </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">h3</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\">    </span><span class=\"c1\">-- how did we get h3?</span>\n<span class=\"w\">        </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h4</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h3</span><span class=\"bp\">⟩</span>\n<span class=\"w\">        </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"n\">h4</span>\n<span class=\"w\">      </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>My question is marked in comment: how did we get <code>h3</code>? Some guidance or suggestions will be highly appreciated!</p>",
        "id": 442602054,
        "sender_full_name": "Ying Xiong",
        "timestamp": 1717527194
    },
    {
        "content": "<p>What's happening in the code here</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">      </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">        </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">h3</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\">    </span><span class=\"c1\">-- how did we get h3?</span>\n</code></pre></div>\n<p>is that you are making a proof of h2, which means you're making a term of type <code>∀ x, ¬ p x</code>, which means you are making a function which eats a term <code>x</code> and then spits out a proof of <code>¬ p x</code>. But a proof of <code>¬ p x</code> is a function which eats a term of type <code>p x</code> and returns a term of type <code>False</code>, because the <em>definition</em> of <code>¬ P</code> is <code>P -&gt; False</code>. So the second <code>fun</code> line in the quote above is making this function by assuming you have a term of the input type, and then the code proceeds to create a term of the output type, namely <code>False</code>.</p>",
        "id": 442602491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717527361
    },
    {
        "content": "<p>Thanks for the answer, Kevin! That makes sense!</p>",
        "id": 442650294,
        "sender_full_name": "Ying Xiong",
        "timestamp": 1717543283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"712239\">Ying Xiong</span> has marked this topic as resolved.</p>",
        "id": 442650295,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717543284
    },
    {
        "content": "<p>Thanks for the answer, Kevin!</p>",
        "id": 442650331,
        "sender_full_name": "Ying Xiong",
        "timestamp": 1717543303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"712239\">Ying Xiong</span> has marked this topic as unresolved.</p>",
        "id": 442650335,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717543307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"712239\">Ying Xiong</span> has marked this topic as resolved.</p>",
        "id": 442650360,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717543321
    }
]