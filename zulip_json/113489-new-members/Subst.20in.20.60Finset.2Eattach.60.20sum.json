[
    {
        "content": "<p>I am trying to prove the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SimpleGraph.edges</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">e₀</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hG'</span> <span class=\"o\">:</span> <span class=\"n\">G'.edges</span> <span class=\"bp\">=</span> <span class=\"n\">G.edges</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">e₀</span><span class=\"o\">})</span>\n    <span class=\"o\">(</span><span class=\"n\">he₀</span> <span class=\"o\">:</span> <span class=\"n\">e₀</span> <span class=\"bp\">∈</span> <span class=\"n\">G'.edges</span><span class=\"o\">)</span>                       <span class=\"c1\">-- Already implied by other arguments, but passed explicitly to keep statement short</span>\n    <span class=\"o\">(</span><span class=\"n\">hne</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">e</span><span class=\"o\">},</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">G.edges</span> <span class=\"bp\">→</span> <span class=\"n\">e.fst</span> <span class=\"bp\">≠</span> <span class=\"n\">e.snd</span><span class=\"o\">)</span>  <span class=\"c1\">-- Already implied by other arguments, but passed explicitly to keep statement short</span>\n    <span class=\"o\">(</span><span class=\"n\">hne'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">e</span><span class=\"o\">},</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">G'.edges</span> <span class=\"bp\">→</span> <span class=\"n\">e.fst</span> <span class=\"bp\">≠</span> <span class=\"n\">e.snd</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G'.edges</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">hne'</span> <span class=\"n\">e.prop</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">hne'</span> <span class=\"n\">he₀</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G.edges</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">hne</span> <span class=\"n\">e.prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(Full context can be found at <a href=\"https://github.com/niklasmohrin/lean-seminar-2023/blob/b645cf3547e88de2d4dbc5c660d8c4e89e5cf000/FlowEquivalentForest/Matrix.lean#L120-L128\">https://github.com/niklasmohrin/lean-seminar-2023/blob/b645cf3547e88de2d4dbc5c660d8c4e89e5cf000/FlowEquivalentForest/Matrix.lean#L120-L128</a>)</p>\n<p>Using <code>rw[hG']</code> gives <code>motive is not type correct</code>, which makes sense, because the <code>f</code> argument of <code>Finset.sum</code> would change type. So I suppose I would have to use <code>subst</code> somehow, but I can't really get there, because <code>generalize G.edges = G_edges at *</code> somehow gives me <code>hG' : G_edges = G_edges ∪ {e₀}</code> and even if it worked, I also cannot figure out how to prove the reduced version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">e₀</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hs'</span> <span class=\"o\">:</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">e₀</span><span class=\"o\">})</span>\n    <span class=\"o\">(</span><span class=\"n\">he₀</span> <span class=\"o\">:</span> <span class=\"n\">e₀</span> <span class=\"bp\">∈</span> <span class=\"n\">s'</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hne</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">e</span><span class=\"o\">},</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">e.fst</span> <span class=\"bp\">≠</span> <span class=\"n\">e.snd</span><span class=\"o\">)</span>  <span class=\"c1\">-- Already implied by other arguments, but passed explicitly to keep statement short</span>\n    <span class=\"o\">(</span><span class=\"n\">hne'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">e</span><span class=\"o\">},</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">s'</span> <span class=\"bp\">→</span> <span class=\"n\">e.fst</span> <span class=\"bp\">≠</span> <span class=\"n\">e.snd</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">hne'</span> <span class=\"n\">e.prop</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">hne'</span> <span class=\"n\">he₀</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">hne</span> <span class=\"n\">e.prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hs'</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I would want to use <code>Finset.sum_insert</code> somehow now, but the types that are being summed are still different. After <code>simp</code>, it is clear that <code>Finset.sum_insert</code> does not apply, because there still is a <code>Finset.attach</code> in there.</p>\n<p>Does someone know what I can do?</p>",
        "id": 411077088,
        "sender_full_name": "Niklas Mohrin",
        "timestamp": 1704313924
    },
    {
        "content": "<p>A very powerful tool in this kind of situation is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum_nbij#doc\">docs#Finset.sum_nbij</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum_nbij%27#doc\">docs#Finset.sum_nbij'</a></p>",
        "id": 411077236,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704314015
    },
    {
        "content": "<p>Oh interesting. So I would split the <code>s'</code> sum and biject the <code>s</code> part of the <code>s'</code> sum over into the <code>s</code> world?</p>",
        "id": 411077972,
        "sender_full_name": "Niklas Mohrin",
        "timestamp": 1704314420
    },
    {
        "content": "<p>Hm, it seems a bit tedious to prove bijectivity, maybe I am better off rephrasing everything so that I am not summing <code>Finset (V \\times V)</code>, but instead a <code>Finset UnequalPair</code>?</p>",
        "id": 411078256,
        "sender_full_name": "Niklas Mohrin",
        "timestamp": 1704314597
    },
    {
        "content": "<p>Possibly. I'm lacking context to give you an informed opinion.</p>",
        "id": 411081526,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704315950
    }
]