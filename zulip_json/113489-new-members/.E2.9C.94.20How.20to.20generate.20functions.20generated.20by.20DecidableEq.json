[
    {
        "content": "<p>So I have a relation of the type <code>a -&gt; a -&gt; Prop</code> that can be passed to <code>Quot</code> to get <code>Quote MyEq</code> Type but how do I generate the functions so that I can use my version of equality using <code>=</code> and <code>==</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Token</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Id</span> <span class=\"o\">:</span> <span class=\"n\">Token</span> <span class=\"c1\">-- | Terminal Symbol</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Ident</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Token</span> <span class=\"c1\">-- | Token contains a String Identifier</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Number</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Token</span> <span class=\"c1\">-- | Token contains an Int value</span>\n  <span class=\"bp\">|</span> <span class=\"n\">If_Symbol</span> <span class=\"o\">:</span> <span class=\"n\">Token</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Then_Symbol</span> <span class=\"o\">:</span> <span class=\"n\">Token</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TokenEq</span> <span class=\"o\">(</span><span class=\"n\">Î±</span> <span class=\"n\">Î²</span> <span class=\"o\">:</span> <span class=\"n\">Token</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">Î±</span><span class=\"o\">,</span> <span class=\"n\">Î²</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Token.Id</span><span class=\"o\">,</span> <span class=\"n\">Token.Ident</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n</code></pre></div>",
        "id": 430558889,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711958630
    },
    {
        "content": "<p>You can write <code>instance : BEq Token where beq := sorry</code> if you want boolean equality, but then you should have written <code>: Bool</code> not <code>: Prop</code></p>",
        "id": 430560506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711959624
    },
    {
        "content": "<p>If you want <code>=</code> to mean <code>TokenEq</code>, then you can use <code>x y : Quot TokenEq</code> and then <code>x = y</code> will work.</p>",
        "id": 430560578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711959663
    },
    {
        "content": "<p>I wanted it for <code>=</code>, what did you mean use <code>x y : Quot TokenEq</code> for <code>x = y</code> I need to compare <code>Token</code> type not <code>Quot TokenEq</code> type</p>",
        "id": 430561134,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711960033
    },
    {
        "content": "<p>is that not I am supposed to do? I'm not sure.</p>",
        "id": 430562183,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711960735
    },
    {
        "content": "<p>You can convert from <code>Token</code> to <code>Quot TokenEq</code> with <code>Quot.mk</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Token</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">TokenEq</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Quot.mk</span> <span class=\"n\">TokenEq</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Quot.mk</span> <span class=\"n\">TokenEq</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Quot.sound</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 430564256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711961870
    },
    {
        "content": "<p>adding the above example still doesn't generate <code>Decidable ( ...)</code> definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Token</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">TokenEq</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Quot.mk</span> <span class=\"n\">TokenEq</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Quot.mk</span> <span class=\"n\">TokenEq</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Quot.sound</span> <span class=\"n\">h</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Token.Id</span> <span class=\"bp\">=</span> <span class=\"n\">Token.Ident</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>\n<p>results in </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>synthesize\n<span class=\"w\">  </span>Decidable<span class=\"w\"> </span><span class=\"o\">(</span>Token.Id<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>Token.Ident<span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 430565347,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711962501
    },
    {
        "content": "<p>(The <code>lean</code> in <code>```lean</code> should not be necessary: the default is to use <code>lean</code>.)</p>",
        "id": 430565487,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711962594
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>  I updated the snippet, sorry.</p>",
        "id": 430593256,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711978324
    },
    {
        "content": "<p>You will want to write an instance of <code>DecidableEq (Quot TokenEq)</code></p>",
        "id": 430602122,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711982042
    },
    {
        "content": "<p>Something to watch out for conceptually here is that <code>Quot</code> isn't a typeclass, it creates a completely new type with the new equality. That means that everything you do will have to be in terms of this <code>Quot</code> -- you'll never work with <code>Token</code> directly again once you finish up the API.</p>\n<p>Maybe if you finish up the definition of <code>TokenEq</code> it'll be easier then to show you the next steps. It ought to be reflexive, symmetric, and transitive. Maybe you could write a specification for your new equality?</p>",
        "id": 430606062,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711983259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar ðŸ¦€ (he/him)</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20generate.20functions.20generated.20by.20DecidableEq/near/430565347\">said</a>:</p>\n<blockquote>\n<p>adding the above example still doesn't [...]</p>\n</blockquote>\n<p><code>example</code>s essentially always do nothing; they exist for the human reader, not to have any effect on the rest of the file!</p>",
        "id": 430642091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711995865
    },
    {
        "content": "<p>Do you want equality to work normally except in the case of <code>Token.Id</code> and <code>Token.Ident \"\"</code>? If so, is there a reason why you don't want to just define <code>Token.Id</code> as <code>Token.Ident \"\"</code>? That makes more sense to me than defining a quotient where only two specific values are equivalent.</p>",
        "id": 430645077,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711996886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20generate.20functions.20generated.20by.20DecidableEq/near/430645077\">said</a>:</p>\n<blockquote>\n<p>Do you want equality to work normally except in the case of <code>Token.Id</code> and <code>Token.Ident \"\"</code>? If so, is there a reason why you don't want to just define <code>Token.Id</code> as <code>Token.Ident \"\"</code>? That makes more sense to me than defining a quotient where only two specific values are equivalent.</p>\n</blockquote>\n<p>I wanted to try to write out the complete thing as an exercise for myself</p>",
        "id": 430645238,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711996950
    },
    {
        "content": "<p>Do you mean you wanted to work with quotient types as an exercise? Otherwise I'm not sure why defining <code>Token.Id</code> as <code>Token.Ident \"\"</code> isn't \"complete\".</p>",
        "id": 430645508,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711997083
    },
    {
        "content": "<p>Yep I want to understand Quotient types concretely</p>",
        "id": 430645609,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711997131
    },
    {
        "content": "<p>Oh okay, that's fair. Carry on then!</p>",
        "id": 430645705,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711997165
    },
    {
        "content": "<p>Thanks for the help <span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> but I also have a question since you mentioned it, is it possible to express <code>Token.Id</code> as a special case of <code>Token.Ident s</code> because all this started when I was trying to \"simulate\" certain behaviour in haskell. So in haskell this is done using</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">instance</span><span class=\"w\"> </span><span class=\"kt\">Eq</span><span class=\"w\"> </span><span class=\"kt\">Token</span><span class=\"w\"> </span><span class=\"kr\">where</span>\n<span class=\"p\">(</span><span class=\"kt\">Ident</span><span class=\"w\"> </span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">â‰¡</span><span class=\"w\"> </span><span class=\"kt\">Id</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">True</span>\n<span class=\"o\">...</span>\n</code></pre></div>",
        "id": 430646177,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711997380
    },
    {
        "content": "<p>Expressing <code>Token.Id</code> as a special case of <code>Token.Ident</code> is kind of what I was suggesting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Token</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Ident</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Token</span> <span class=\"c1\">-- | Token contains a String Identifier</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Number</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Token</span> <span class=\"c1\">-- | Token contains an Int value</span>\n  <span class=\"bp\">|</span> <span class=\"n\">If_Symbol</span> <span class=\"o\">:</span> <span class=\"n\">Token</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Then_Symbol</span> <span class=\"o\">:</span> <span class=\"n\">Token</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Token.Id</span> <span class=\"o\">:</span> <span class=\"n\">Token</span> <span class=\"o\">:=</span> <span class=\"n\">Token.Ident</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Token.Id</span> <span class=\"bp\">=</span> <span class=\"n\">Token.Ident</span> <span class=\"s2\">\"\"</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>There isn't really a good way to make <code>Token.Id = Token.Ident \"\"</code> true if they're both distinct constructors of an inductive type. That's why people were suggesting a quotient type, where instead of comparing the Tokens directly, you're comparing their quotients.</p>",
        "id": 430647114,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711997707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20generate.20functions.20generated.20by.20DecidableEq/near/430647114\">said</a>:</p>\n<blockquote>\n<p>Expressing <code>Token.Id</code> as a special case of <code>Token.Ident</code> is kind of what I was suggesting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Token</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Ident</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Token</span> <span class=\"c1\">-- | Token contains a String Identifier</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Number</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Token</span> <span class=\"c1\">-- | Token contains an Int value</span>\n  <span class=\"bp\">|</span> <span class=\"n\">If_Symbol</span> <span class=\"o\">:</span> <span class=\"n\">Token</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Then_Symbol</span> <span class=\"o\">:</span> <span class=\"n\">Token</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Token.Id</span> <span class=\"o\">:</span> <span class=\"n\">Token</span> <span class=\"o\">:=</span> <span class=\"n\">Token.Ident</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Token.Id</span> <span class=\"bp\">=</span> <span class=\"n\">Token.Ident</span> <span class=\"s2\">\"\"</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>There isn't really a good way to make <code>Token.Id = Token.Ident \"\"</code> true if they're both distinct constructors of an inductive type. That's why people were suggesting a quotient type, where instead of comparing the Tokens directly, you're comparing their quotients.</p>\n</blockquote>\n<p>But this seems easy to implement for now, I didn't know I can add a constructor as a <code>def</code> to an already defined inductive type, that's pretty cool</p>",
        "id": 430647317,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711997794
    },
    {
        "content": "<p>Thanks! again</p>",
        "id": 430647343,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711997806
    },
    {
        "content": "<p>Sure... I'll just note that it's not actually a constructor, it just looks like one because it's defined on the <code>Token</code> namespace. But it should work for your purposes.</p>",
        "id": 430647528,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711997884
    },
    {
        "content": "<p>You can add <code>@[match_pattern]</code> to it so that it can be used in pattern matching too</p>",
        "id": 430658779,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712003363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"652766\">Christian K</span> has marked this topic as resolved.</p>",
        "id": 431655644,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712393677
    }
]