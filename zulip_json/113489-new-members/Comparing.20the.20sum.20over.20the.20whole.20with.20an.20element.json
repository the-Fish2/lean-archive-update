[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">DiscreteRandomVariable</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- all possible events may happen -/</span>\n  <span class=\"n\">events</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n\n  <span class=\"sd\">/-- the events are discrete -/</span>\n  <span class=\"n\">discrete</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">events</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span>\n\n  <span class=\"sd\">/-- the probability mass function -/</span>\n  <span class=\"n\">prob</span> <span class=\"o\">:</span> <span class=\"n\">events</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n\n  <span class=\"sd\">/-- the probability is non-negative -/</span>\n  <span class=\"n\">prob_nneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">prob</span> <span class=\"n\">x</span>\n\n  <span class=\"sd\">/-- the sum of all probabilities is 1 -/</span>\n  <span class=\"n\">sum_eq_one</span> <span class=\"o\">:</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">events</span><span class=\"o\">),</span> <span class=\"n\">prob</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">DiscreteRandomVariable</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">prob_leq</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">DiscreteRandomVariable</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X.events</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X.prob</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">nneg</span> <span class=\"o\">:=</span> <span class=\"n\">prob_nneg</span> <span class=\"n\">X</span> <span class=\"n\">x</span>\n  <span class=\"k\">have</span> <span class=\"n\">eq_one</span> <span class=\"o\">:=</span> <span class=\"n\">sum_eq_one</span> <span class=\"n\">X</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X.events</span><span class=\"o\">),</span> <span class=\"n\">X.prob</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">eq_one</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≥</span> <span class=\"n\">prob</span> <span class=\"n\">X</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- I want to show this!</span>\n  <span class=\"n\">replace</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">prob</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">not_lt.mpr</span> <span class=\"n\">this</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 423263984,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1708868051
    },
    {
        "content": "<p>I am trying to formalise information theory in lean and have defined discrete random variables. I want to show its basic property, but I don't know how to prove it.</p>\n<p>If it is already in the library, please let me know. Thanks．</p>",
        "id": 423264084,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1708868132
    },
    {
        "content": "<p>you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=le_tsum#doc\">docs#le_tsum</a></p>",
        "id": 423280283,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708883801
    },
    {
        "content": "<p>in fact you can prove the whole thing with <code>le_tsum</code>, no need for a proof by contradiction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">prob_summable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">DiscreteRandomVariable</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"n\">X.prob</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">tsum_eq_zero_of_not_summable</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sum_eq_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">prob_leq</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">DiscreteRandomVariable</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X.events</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X.prob</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">X.sum_eq_one</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_tsum</span> <span class=\"n\">prob_summable</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X.prob_nneg</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 423280685,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708884218
    },
    {
        "content": "<p>there's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PMF#doc\">docs#PMF</a></p>",
        "id": 423280875,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708884378
    },
    {
        "content": "<p>if you switch to using <code>PMF</code>, <code>prob_leq</code> is equivalent to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PMF.coe_le_one#doc\">docs#PMF.coe_le_one</a></p>",
        "id": 423281775,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708885219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> Thank you!!</p>",
        "id": 423370141,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1708944674
    },
    {
        "content": "<p><del>The PMF allows probability values to go to infinity, but I don't want to allow that....</del></p>",
        "id": 423609066,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1709041556
    },
    {
        "content": "<p>I cannot prove entropy's non-negativity...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.ProbabilityMassFunction.Basic</span>\n\n<span class=\"sd\">/-- PMF returns a value in `ENNReal`, which is equal to `[0, ∞]` -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">PMF</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- an example of discrete variable.</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">PMF.Example</span>\n\n<span class=\"sd\">/-- six-sided dice is an exmaple of discrete random variable. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Die</span> <span class=\"o\">:</span> <span class=\"n\">PMF</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">PMF</span><span class=\"o\">]</span>\n  <span class=\"n\">use</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- I want to show that</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">PMF.Example</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">entropy</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">PMF</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">-</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toReal</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toReal</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">abbrev</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">entropy</span>\n\n<span class=\"c1\">-- I want to show this!</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">entropy_nonneg</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">PMF</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">H</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 423609359,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1709041655
    },
    {
        "content": "<p><del>Because <code>ENNReal.toReal</code> send <code>∞</code> to 0.</del></p>",
        "id": 423609838,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1709041819
    },
    {
        "content": "<p>Do you know we have a definition of entropy in PFR?</p>",
        "id": 423610565,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709042066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Thanks for telling me. I did not know that ...</p>",
        "id": 423610748,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1709042143
    },
    {
        "content": "<p>where is the definition of entropy? I dont find it...</p>",
        "id": 423612544,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1709042657
    },
    {
        "content": "<p>It's all in here: <a href=\"https://github.com/teorth/pfr/tree/master/PFR/ForMathlib/Entropy\">https://github.com/teorth/pfr/tree/master/PFR/ForMathlib/Entropy</a></p>",
        "id": 423619600,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709044362
    }
]