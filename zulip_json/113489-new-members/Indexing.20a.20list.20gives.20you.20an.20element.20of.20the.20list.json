[
    {
        "content": "<p>I couldn't find anything that does this in std</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It feels like it should be easy to prove for myself, but I get as far simplifying to <code>List.Mem (List.get l i) l</code> but then I get stuck. Where should I be looking?</p>",
        "id": 418555695,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1706495234
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.get_mem#doc\">docs#List.get_mem</a> is in <code>Std.Data.List.Init.Lemmas</code></p>",
        "id": 418560413,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1706499271
    },
    {
        "content": "<p>in terms of advice, I would say that the way to find a membership lemma related to a given function is to just search mathlib for \"[type] [function] mem\", so in this case \"list get mem\" (and it turns out that's basically the name of the lemma)</p>",
        "id": 418560812,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1706499646
    },
    {
        "content": "<p>(of course in retrospect this seems obvious but I understand it's tricky to know what the magic words are)</p>",
        "id": 418560970,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1706499814
    },
    {
        "content": "<p>Thanks for all the help :)</p>\n<p>I've been having some luck just re-wording stuff a few ways and using the <code>apply?</code> library search tactic. But yeah, so far I've been finding dependent types are intuitive enough, but all the naming conventions and simp-normal forms and such are a struggle for me. I suspect it takes time as with any library.</p>",
        "id": 418644061,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1706537237
    }
]