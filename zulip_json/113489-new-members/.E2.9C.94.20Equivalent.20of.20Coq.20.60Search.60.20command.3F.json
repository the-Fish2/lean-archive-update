[
    {
        "content": "<p>I'm new to Lean and coming from Coq. Is there an equivalent to Coq's <code>Search</code> command, which lets you search either for a pattern (e.g., <code>Search (?x + ?y = ?y + ?x).</code>) or for text in the name (e.g., <code>Search \"add\".</code>)? I use it often and feel lost in Lean without it. Additionally, I've found no listings online of the symbols defined by the stdlib, such as those produced by <code>coqdoc</code>.</p>",
        "id": 429258092,
        "sender_full_name": "Thalia Archibald",
        "timestamp": 1711321280
    },
    {
        "content": "<p><a href=\"https://loogle.lean-lang.org/\">loogle</a> is probably the Lean equivalent to <code>Search</code>.</p>",
        "id": 429258267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711321449
    },
    {
        "content": "<p>Thanks! And it looks like there's a CLI version and editor integration too, so it sounds perfect</p>",
        "id": 429258501,
        "sender_full_name": "Thalia Archibald",
        "timestamp": 1711321583
    },
    {
        "content": "<p>You can even activate it via the Zulip: <span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ?x + ?y = ?y + ?x</p>",
        "id": 429258539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711321653
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 429258547,
        "sender_full_name": "loogle",
        "timestamp": 1711321675
    },
    {
        "content": "<p>Well, usually you can :-)</p>",
        "id": 429258562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711321683
    },
    {
        "content": "<p>And is there somewhere with generated listings of the exports from the standard library or other libraries? The manual has empty pages for the built-in types, e.g., <a href=\"https://lean-lang.org/lean4/doc/char.html\">https://lean-lang.org/lean4/doc/char.html</a>.</p>",
        "id": 429258998,
        "sender_full_name": "Thalia Archibald",
        "timestamp": 1711322038
    },
    {
        "content": "<p>Click on one of the loogle search results and you will be brought there^^</p>",
        "id": 429259080,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1711322102
    },
    {
        "content": "<p>Huh. I get this same error online and with the CLI:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>loogle<span class=\"w\"> </span><span class=\"s1\">'?x + ?y = ?y + ?x'</span>\n<span class=\"o\">(</span>deterministic<span class=\"o\">)</span><span class=\"w\"> </span>timeout<span class=\"w\"> </span>at<span class=\"w\"> </span><span class=\"s1\">'isDefEq'</span>,<span class=\"w\"> </span>maximum<span class=\"w\"> </span>number<span class=\"w\"> </span>of<span class=\"w\"> </span>heartbeats<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">200000</span><span class=\"o\">)</span><span class=\"w\"> </span>has<span class=\"w\"> </span>been<span class=\"w\"> </span>reached<span class=\"w\"> </span><span class=\"o\">(</span>use<span class=\"w\"> </span><span class=\"s1\">'set_option maxHeartbeats &lt;num&gt;'</span><span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>the<span class=\"w\"> </span>limit<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 429259576,
        "sender_full_name": "Thalia Archibald",
        "timestamp": 1711322630
    },
    {
        "content": "<p>Perhaps it times out, because its context is <em>every</em> package, whereas Coq <code>Search</code> only considers the items visible in the current scope.</p>",
        "id": 429259725,
        "sender_full_name": "Thalia Archibald",
        "timestamp": 1711322764
    },
    {
        "content": "<p>It actually doesn't search every package by default. Just Init, Lean, Std, and Mathlib. It doesn't seem to use a very efficient algorithm for the pattern queries though so I find it helps to add some additional constants or keywords to narrow the search. <code>_ + ?y = ?y + _, \"add\"</code> completes in reasonable time</p>",
        "id": 429260591,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711323427
    },
    {
        "content": "<p>Ah wonderful. Good to know about <code>,</code>. And the results shed a bit of light onto its query strategy:</p>\n<blockquote>\n<p>Found 11455 definitions mentioning HAdd.hAdd and Eq. Of these, 4255 have a name containing \"add\". Of these, 52 match your pattern(s).</p>\n</blockquote>",
        "id": 429261047,
        "sender_full_name": "Thalia Archibald",
        "timestamp": 1711323710
    },
    {
        "content": "<p>Note that the conjunction of different patterns is \"local\", that is <code>?a ≤ ?b, ?b ≤ ?a</code> will give you all applications of LE.le; do you know if this is the case in Coq's <code>Search</code>?</p>",
        "id": 429262567,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1711325056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"704016\">Thalia Archibald</span> has marked this topic as resolved.</p>",
        "id": 429327336,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711358754
    },
    {
        "content": "<p>There is also a VS Code loogle extension <br>\n<a href=\"https://marketplace.visualstudio.com/items?itemName=ShreyasSrinivas.loogle-lean\">https://marketplace.visualstudio.com/items?itemName=ShreyasSrinivas.loogle-lean</a></p>",
        "id": 429931822,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1711567538
    }
]