[
    {
        "content": "<p>I'm trying to define the real logarithm, but I don't know how:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Rpos</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">re_exp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"c1\">-- obviously not the actual implementation</span>\n\n<span class=\"c1\">-- I have the proof for this</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">re_exp_bij_on_rpos</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">BijOn</span><span class=\"w\"> </span><span class=\"n\">re_exp</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"w\"> </span><span class=\"n\">Rpos</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- application type mismatch</span>\n<span class=\"c1\">--   Set.BijOn.equiv re_exp_bij_on_rpos</span>\n<span class=\"c1\">-- argument</span>\n<span class=\"c1\">--   re_exp_bij_on_rpos</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--  Set.BijOn re_exp Set.univ Rpos : Prop</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   ?m.136 → ?m.137 : Type (max ?u.134 ?u.135)</span>\n<span class=\"c1\">--def re_log (x : Rpos) : ℝ := re_exp_bij_on_rpos.equiv.invFun</span>\n\n<span class=\"c1\">-- can't even get this to work</span>\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">re_exp_equiv</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"n\">Rpos</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">re_exp_bij_on_rpos</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n<span class=\"w\">  </span><span class=\"c1\">-- how do I unify ℝ und ↑Set.univ?</span>\n<span class=\"w\">  </span><span class=\"c1\">-- apply? is useless, simp or rfl don't work either</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 440651215,
        "sender_full_name": "Tainnor",
        "timestamp": 1716657476
    },
    {
        "content": "<p>Are you aware of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.log#doc\">docs#Real.log</a> ?</p>",
        "id": 440651466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716657706
    },
    {
        "content": "<p>I'm trying to implement it myself for pedagogical reasons</p>",
        "id": 440651526,
        "sender_full_name": "Tainnor",
        "timestamp": 1716657741
    },
    {
        "content": "<p>You're on the right track with <code>.equiv</code></p>",
        "id": 440651663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716657876
    },
    {
        "content": "<p>But you don't want to unify, you should be looking for another equivalence; <code>ℝ = ↑Set.univ</code> is false, but <code>ℝ ≃ ↑Set.univ</code> is easy</p>",
        "id": 440651713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716657933
    },
    {
        "content": "<p>Ok, this appears to work. It's a bit of a mouthful, though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">re_log</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">((</span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"n\">re_exp_bij_on_rpos</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">invFun</span>\n</code></pre></div>",
        "id": 440652071,
        "sender_full_name": "Tainnor",
        "timestamp": 1716658305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"685366\">Tainnor</span> has marked this topic as resolved.</p>",
        "id": 440652259,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716658537
    }
]