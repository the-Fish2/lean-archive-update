[
    {
        "content": "<p>When should <code>@&amp; Type</code> be preferred over <code>Type</code> in user code (i.e., non-Lean internal code)?</p>\n<p>Is <code>@&amp;</code> in Lean similar to <code>const ref</code> in C++?</p>\n<p>Here are some examples from <code>Prelude.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Prelude</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">@&amp;</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">@&amp;</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Prelude</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">@&amp;</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">@&amp;</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Prelude</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">pow</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">@&amp;</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">@&amp;</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Prelude</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">beq</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">@&amp;</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">@&amp;</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Bool</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Prelude</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">decEq</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">@&amp;</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Decidable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Eq</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 441328316,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1717021049
    },
    {
        "content": "<p>Sounds like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Term.borrowed#doc\">docs#Lean.Parser.Term.borrowed</a> is missing a docstring</p>",
        "id": 441328705,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717021230
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/4305\">lean4#4305</a></p>",
        "id": 441332879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717023008
    },
    {
        "content": "<p>Thank you! It seems to me that a mathematics student (non-FFI user) can effectively read <code>@&amp; Type</code> as <code>Type</code> without any issues and will probably never need to write <code>@&amp; Type</code> themselves. Would that be an accurate summary?</p>",
        "id": 441538369,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1717097682
    },
    {
        "content": "<p>If it helps, I don't know what FFI means but I've written a bunch of maths in Lean and I don't think I ever wrote <code>@&amp;</code> once (indeed I don't know what <code>@&amp;</code> means either)</p>",
        "id": 441538578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717097756
    },
    {
        "content": "<p>Thanks Kevin! As a mathematics student that answers my question regarding the need for <code>@&amp;</code> in mathematics :)</p>\n<p>FFI, or Foreign Function Interface, is a mechanism that allows code written in one programming language to call functions or use services written in another language:</p>\n<ul>\n<li>FFI in general, <a href=\"https://en.wikipedia.org/wiki/Foreign_function_interface\">https://en.wikipedia.org/wiki/Foreign_function_interface</a></li>\n<li>FFI in Lean, <a href=\"https://lean-lang.org/lean4/doc/dev/ffi.html\">https://lean-lang.org/lean4/doc/dev/ffi.html</a></li>\n</ul>",
        "id": 441540201,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1717098254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"683979\">Isak Colboubrani</span> has marked this topic as resolved.</p>",
        "id": 441540576,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717098366
    }
]