[
    {
        "content": "<p>Hey, I followed the book's <a href=\"https://lean-lang.org/theorem_proving_in_lean4/induction_and_recursion.html#local-recursive-declarations\">\"Local recursive declarations\"</a> example to create a janky proof about List.groupBy. But what strikes me is, a) most of the proofs in the standard library are much shorter than mine, and b) when I prove my next thing about groupBy, I would be essentially copy-pasting the <code>let rec aux</code>. I think I want a reusable <code>inductionOn</code>-type construct but, what it would take as the inductive/base case parameters?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">groupby_loop_invariant</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ag'</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">List.groupBy.loop</span> <span class=\"n\">r</span> <span class=\"n\">ag'</span> <span class=\"n\">g'</span> <span class=\"o\">[]</span> <span class=\"o\">[])</span><span class=\"bp\">.</span><span class=\"n\">Forall</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ag</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rem</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n      <span class=\"c1\">-- [really long proof here...]</span>\n      <span class=\"gr\">sorry</span>\n  <span class=\"n\">exact</span> <span class=\"n\">aux</span> <span class=\"n\">ag'</span> <span class=\"n\">g'</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">groups_non_empty</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l.groupBy</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Forall</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.groupBy</span><span class=\"o\">]</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">exact</span> <span class=\"n\">groupby_loop_invariant</span> <span class=\"n\">r</span> <span class=\"n\">as</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Or like, is my approach reasonable to begin with?</p>",
        "id": 410732539,
        "sender_full_name": "Stuart Geipel",
        "timestamp": 1704123086
    },
    {
        "content": "<p>Where does <code>Forall</code> come from?  Please follow <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> when ask questions.</p>",
        "id": 410792225,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1704168679
    },
    {
        "content": "<p>Sorry - my mistake. Here is a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">groupby_loop_invariant</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ag'</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">List.groupBy.loop</span> <span class=\"n\">r</span> <span class=\"n\">ag'</span> <span class=\"n\">g'</span> <span class=\"o\">[]</span> <span class=\"o\">[])</span><span class=\"bp\">.</span><span class=\"n\">Forall</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ag</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rem</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n      <span class=\"n\">rem.Forall</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">List.groupBy.loop</span> <span class=\"n\">r</span> <span class=\"n\">as</span> <span class=\"n\">ag</span> <span class=\"n\">g</span> <span class=\"n\">rem</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Forall</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span>\n      <span class=\"c1\">-- [really long proof here...]</span>\n      <span class=\"gr\">sorry</span>\n  <span class=\"n\">exact</span> <span class=\"n\">aux</span> <span class=\"n\">ag'</span> <span class=\"n\">g'</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">groups_non_empty</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l.groupBy</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Forall</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.groupBy</span><span class=\"o\">]</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">exact</span> <span class=\"n\">groupby_loop_invariant</span> <span class=\"n\">r</span> <span class=\"n\">as</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>I was able to delete <code>universe u</code> but the wiki included that so I left it in.</p>",
        "id": 410936432,
        "sender_full_name": "Stuart Geipel",
        "timestamp": 1704245736
    },
    {
        "content": "<p>I'm hoping that there's either a simpler way of proving this that doesn't require <code>let rec aux</code>, or a way to \"box up\" that recursion in a way to make future proofs simpler</p>",
        "id": 410939656,
        "sender_full_name": "Stuart Geipel",
        "timestamp": 1704246630
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 410940599,
        "sender_full_name": "David Spies",
        "timestamp": 1704247204
    }
]