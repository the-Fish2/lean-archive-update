[
    {
        "content": "<p>I am new to Lean and playing the Lean Game 4. This is in reference to problem Advanced Multiplication World: 4.</p>\n<p>Currently, in the middle of solution, I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Objects</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">:</span>¬†<span class=\"n\">‚Ñï</span>\n\n<span class=\"n\">Assumptions</span><span class=\"o\">:</span>\n<span class=\"n\">hn</span><span class=\"o\">:</span>¬†<span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>\n\n<span class=\"n\">Goal</span><span class=\"o\">:</span>\n<span class=\"n\">succ</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>I then <code>apply succ_le_succ</code>. Here <code>succ_le_succ x y</code> is a proof that if <code>succ x ‚â§ succ y</code> then <code>x ‚â§ y</code>. But the result of this is that my goal changes to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I would expect that the goal changes to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>What gives?</p>",
        "id": 436181706,
        "sender_full_name": "Abdullah Khalid",
        "timestamp": 1714445976
    },
    {
        "content": "<p>Here you are applying the lemma to the goal whereas you wanted to apply it to the assumption.</p>",
        "id": 436182686,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714446457
    },
    {
        "content": "<p>Applying the lemma to the whole means you want to reason by sufficient condition. The instruction you gave to Lean and the the new goal you got translate to ‚ÄúAccording to lemma succ_le_succ, it suffices to prove that <code>succ (succ 0) ‚â§ succ (succ n)</code>.</p>",
        "id": 436182865,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714446566
    },
    {
        "content": "<p>I have already used the assumption (<code>rw [hn]</code>) in a previous step to replace <code>a</code> in the goal with <code>succ n</code>.  It should not be relevant anymore. I just left it there for completeness.</p>",
        "id": 436182962,
        "sender_full_name": "Abdullah Khalid",
        "timestamp": 1714446615
    },
    {
        "content": "<p>Sorry, I read too quickly you context. But my explanation of what Lean is doing here is still correct.</p>",
        "id": 436183247,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714446788
    },
    {
        "content": "<p>What you would need here is the converse implication to <code>succ_le_succ</code>. But this is clearly not the intended solution at this stage. I will include a hint below that you can unfold if you are stuck.</p>",
        "id": 436183422,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714446899
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Hint</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Use succ_eq_add_one</p>\n</div></div>",
        "id": 436184139,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714447340
    },
    {
        "content": "<p>Okay. Thank you.</p>",
        "id": 436184412,
        "sender_full_name": "Abdullah Khalid",
        "timestamp": 1714447517
    },
    {
        "content": "<p>As an added note, there's a good reason apply doesn't work this way. You could use it to fall into a logical fallacy</p>\n<hr>\n<p>For example, a bad proof that assumes apply can change the goal as above:</p>\n<p>I have a job in construction, and here's a<br>\nproof that I am a ski instructor:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Active State:\n  h‚ÇÅ : \"I am a ski instructor\" ‚Üí \"I have a job\"\n  h‚ÇÇ : \"I have a job\"\n  Goal: \"I am a ski instructor\"\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Command:\n  apply h‚ÇÅ\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Active State:\n  h‚ÇÅ : \"I am a ski instructor\" ‚Üí \"I have a job\"\n  h‚ÇÇ : \"I have a job\"\n  Goal: \"I have a job\"\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Command:\n  exact h‚ÇÇ\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>level completed! üéâ\n</code></pre></div>\n<p>This is a bad proof because I'm <strong>not</strong> a ski instructor! You could use this proof to show that anybody with a job is a ski instructor, which is clearly not true.</p>\n<p>Apply can only change the goal as a means of reasoning backwards. If I know that <code>p ‚Üí q</code>, then I can say something like \"If I show that <code>p</code> is true, then as a final step this implication can be used to obtain the truth of <code>q</code> as well.\" If your goal is <code>q</code>, you can reason that it suffices to prove <code>p</code>.</p>",
        "id": 436315164,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1714496004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"664276\">Mark Fischer</span> <a href=\"#narrow/stream/113489-new-members/topic/Problem.20with.20Lean.20Game/near/436315164\">said</a>:</p>\n<blockquote>\n<p>As an added note, there's a good reason apply doesn't work this way. You could use it to fall into a logical fallacy</p>\n<hr>\n<p>For example, a bad proof that assumes apply can change the goal as above:</p>\n<p>I have a job in construction, and here's a<br>\nproof that I am a ski instructor:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Active State:\n  h‚ÇÅ : \"I am a ski instructor\" ‚Üí \"I have a job\"\n  h‚ÇÇ : \"I have a job\"\n  Goal: \"I am a ski instructor\"\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Command:\n  apply h‚ÇÅ\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Active State:\n  h‚ÇÅ : \"I am a ski instructor\" ‚Üí \"I have a job\"\n  h‚ÇÇ : \"I have a job\"\n  Goal: \"I have a job\"\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Command:\n  exact h‚ÇÇ\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>level completed! üéâ\n</code></pre></div>\n<p>This is a bad proof because I'm <strong>not</strong> a ski instructor! You could use this proof to show that anybody with a job is a ski instructor, which is clearly not true.</p>\n<p>Apply can only change the goal as a means of reasoning backwards. If I know that <code>p ‚Üí q</code>, then I can say something like \"If I show that <code>p</code> is true, then as a final step this implication can be used to obtain the truth of <code>q</code> as well.\" If your goal is <code>q</code>, you can reason that it suffices to prove <code>p</code>.</p>\n</blockquote>\n<p>Thank you. This clarified a lot.</p>",
        "id": 436618440,
        "sender_full_name": "Abdullah Khalid",
        "timestamp": 1714627251
    }
]