[
    {
        "content": "<p>Does anyone know whether there exists a simple coercion from type <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a> to <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a>? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fromEdgeSet</span> <span class=\"n\">subgraph.edgeSet</span>\n</code></pre></div>\n<p>seems to work, but this feels kind of hacky.</p>\n<p>Something like the coercion that exists for the other way around would be nice:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">SimpleGraph.toSubgraph</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">≤</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 436491976,
        "sender_full_name": "Lode Vermeulen",
        "timestamp": 1714566756
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph.Subgraph.coe#doc\">docs#SimpleGraph.Subgraph.coe</a> gives the graph with the subgraph's vertex set, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph.Subgraph.spanningCoe#doc\">docs#SimpleGraph.Subgraph.spanningCoe</a> gives the graph with the original graph's vertex type</p>",
        "id": 436492446,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714566976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Coercion.20from.20Subgraph.20to.20SimpleGraph/near/436492446\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph.Subgraph.coe#doc\">docs#SimpleGraph.Subgraph.coe</a> gives the graph with the subgraph's vertex set, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph.Subgraph.spanningCoe#doc\">docs#SimpleGraph.Subgraph.spanningCoe</a> gives the graph with the original graph's vertex type</p>\n</blockquote>\n<p>But this only gives you the vertex set, not the vertex set <strong>and</strong> the edge set, right?</p>",
        "id": 436492624,
        "sender_full_name": "Lode Vermeulen",
        "timestamp": 1714567076
    },
    {
        "content": "<p>What do you mean \"only the vertex set\"? I'm not sure what graph that would be — do you mean a graph with no edges?</p>",
        "id": 436493081,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714567294
    },
    {
        "content": "<p>It should be the case that <code>G'.spanningCoe = fromEdgeSet G'.edgeSet</code></p>",
        "id": 436493369,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714567450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Coercion.20from.20Subgraph.20to.20SimpleGraph/near/436493369\">said</a>:</p>\n<blockquote>\n<p>It should be the case that <code>G'.spanningCoe = fromEdgeSet G'.edgeSet</code></p>\n</blockquote>\n<p>Ah, it does! This is exactly what I was looking for, thanks.</p>",
        "id": 436493536,
        "sender_full_name": "Lode Vermeulen",
        "timestamp": 1714567546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690587\">Lode Vermeulen</span> has marked this topic as resolved.</p>",
        "id": 436493630,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714567583
    }
]