[
    {
        "content": "<p>I just started playing around with Lean4, and while proving one of the matrix identities from the Matrix Cookbook I got stuck at this stage:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span>\n<span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span>\n<span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">m</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∑</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i_1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">x_1</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"n\">j</span> <span class=\"n\">i_1</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">j</span> <span class=\"n\">x_1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i_1</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"n\">i_1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>where <code>R</code> is a <code>Field</code>, and <code>m</code> and <code>n</code> are <code>Fintype</code>s.</p>\n<p>The goal identity holds, using commutativity of multiplication, and swapping the <code>x_1</code> and <code>i_1</code> variables. So I thought that perhaps we could prove the identity along those lines.</p>\n<p>How can we instruct Lean4 to rewrite the expression inside the double summation using commutativity? What is the most elegant approach? I tried using the <code>conv</code> tactic but got stuck.</p>\n<p>After applying commutativity, do we need to rename the variables for Lean to realize the expressions are identical? If so, how can that be accomplished?</p>\n<p>Or is there a better alternative altogether to prove the goal?</p>",
        "id": 425976120,
        "sender_full_name": "Frank Vernaillen",
        "timestamp": 1710178626
    },
    {
        "content": "<p>It would be nice if you provide your lean code, it makes it easier to understand the goal.</p>",
        "id": 425978192,
        "sender_full_name": "Christian K",
        "timestamp": 1710179350
    },
    {
        "content": "<p>The goal shows up in my unsophisticated proof attempt below for equation 454 (from the <a href=\"https://github.com/eric-wieser/lean-matrix-cookbook\">Matrix Cookbook</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basis</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_444</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">stdBasisMatrix</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">updateColumn</span> <span class=\"mi\">0</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">·</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>  <span class=\"c1\">-- No problem proving this</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_454</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">stdBasisMatrix</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">*</span> <span class=\"n\">vecMulVec</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">vecMulVec</span><span class=\"o\">,</span> <span class=\"n\">mul_apply</span><span class=\"o\">,</span> <span class=\"n\">transpose_apply</span><span class=\"o\">,</span> <span class=\"n\">of_apply</span><span class=\"o\">]</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">eq_444</span><span class=\"o\">,</span> <span class=\"n\">updateColumn</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dotProduct</span><span class=\"o\">,</span> <span class=\"n\">mulVec</span><span class=\"o\">]</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.mul_apply</span><span class=\"o\">,</span> <span class=\"n\">of_apply</span><span class=\"o\">,</span> <span class=\"n\">Function.update</span><span class=\"o\">]</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">eq_rec_constant</span><span class=\"o\">,</span> <span class=\"n\">zero_apply</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_ite</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_ite</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_ite_eq'</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_univ</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">Finset.mul_sum</span><span class=\"o\">]</span>\n      <span class=\"c1\">--  ⊢ ∑ x_1 : n, ∑ i_1 : n, x x_1 * (x i_1 * (B j i_1 * A x_1 i)) =</span>\n      <span class=\"c1\">--    ∑ x_1 : n, ∑ i_1 : n, B j x_1 * (A i_1 i * (x x_1 * x i_1))</span>\n      <span class=\"gr\">sorry</span>  <span class=\"c1\">-- stuck here</span>\n</code></pre></div>",
        "id": 426005896,
        "sender_full_name": "Frank Vernaillen",
        "timestamp": 1710190069
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basis</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_444</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">stdBasisMatrix</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">updateColumn</span> <span class=\"mi\">0</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">·</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>  <span class=\"c1\">-- No problem proving this</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_454'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_454</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">stdBasisMatrix</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">*</span> <span class=\"n\">vecMulVec</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">vecMulVec</span><span class=\"o\">,</span> <span class=\"n\">mul_apply</span><span class=\"o\">,</span> <span class=\"n\">transpose_apply</span><span class=\"o\">,</span> <span class=\"n\">of_apply</span><span class=\"o\">]</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">eq_444</span><span class=\"o\">,</span> <span class=\"n\">updateColumn</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dotProduct</span><span class=\"o\">,</span> <span class=\"n\">mulVec</span><span class=\"o\">]</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.mul_apply</span><span class=\"o\">,</span> <span class=\"n\">of_apply</span><span class=\"o\">,</span> <span class=\"n\">Function.update</span><span class=\"o\">]</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">eq_rec_constant</span><span class=\"o\">,</span> <span class=\"n\">zero_apply</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_ite</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_ite</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_ite_eq'</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_univ</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">Finset.mul_sum</span><span class=\"o\">]</span>\n      <span class=\"c1\">--  ⊢ ∑ x_1 : n, ∑ i_1 : n, x x_1 * (x i_1 * (B j i_1 * A x_1 i)) =</span>\n      <span class=\"c1\">--    ∑ x_1 : n, ∑ i_1 : n, B j x_1 * (A i_1 i * (x x_1 * x i_1))</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_454'</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_congr</span> <span class=\"n\">rfl</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_congr</span> <span class=\"n\">rfl</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 426012275,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710192781
    },
    {
        "content": "<p>Splendid! Thanks a lot Ruben.<br>\nI learned something new <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span></p>",
        "id": 426017855,
        "sender_full_name": "Frank Vernaillen",
        "timestamp": 1710195369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"700082\">Frank Vernaillen</span> has marked this topic as resolved.</p>",
        "id": 426034973,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710205554
    }
]