[
    {
        "content": "<p>What's the cleanest way to set up \"modular induction\" as below?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">elab_as_elim</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mod_induction</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 411531448,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1704569334
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mod.inductionOn#doc\">docs#Nat.mod.inductionOn</a></p>",
        "id": 411531549,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704569431
    },
    {
        "content": "<p>Yes, but it looks unwieldy to use</p>",
        "id": 411531573,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1704569480
    },
    {
        "content": "<p>Sure but probably you can start from there</p>",
        "id": 411531586,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704569497
    },
    {
        "content": "<p>... or at least get inspiration from the proof</p>",
        "id": 411531600,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704569512
    }
]