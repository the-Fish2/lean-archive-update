[
    {
        "content": "<p>I feel like this is true, but apparently <code>cast</code> is unpredictable... does anyone know how to prove it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">Q</span> <span class=\"n\">a</span><span class=\"o\">}):</span>\n<span class=\"n\">cast</span> <span class=\"n\">h₃</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">h₁</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">h₂</span><span class=\"o\">⟩)</span>\n    <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 410703117,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1704097251
    },
    {
        "content": "<p>No this is definitely unprovable.</p>",
        "id": 410704534,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704098709
    },
    {
        "content": "<p>It's good to remember the \"cardinality model\" of Lean, where types are equal iff they have the same cardinality. Here, <code>{a // P a}</code> and <code>{a // Q a}</code> could have the same cardinality without having <code>P = Q</code>. In the case where <code>P ≠ Q</code>, the cast could possibly not be the identity, even just on <code>{a | P a ∧ Q a}</code>.</p>",
        "id": 410704675,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704098865
    },
    {
        "content": "<p>So even if <code>α</code> is <code>Fin 2</code> it won't be provable?</p>",
        "id": 410705047,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1704099211
    },
    {
        "content": "<p>If <code>α := Fin 2</code>, then it is provable since from <code>{a // P a} = {a // Q a}</code> you can derive that the number of elements satisfying <code>P</code> is the same as the number of elements satisfying <code>Q</code>, and since <code>a</code> satisfies both, it must be that <code>P = Q</code>. So you can substitute that in and then your result is easy.</p>",
        "id": 410705397,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704099553
    },
    {
        "content": "<p>Yeah, your lemma is provable iff <code>α</code> has at most two elements.</p>",
        "id": 410705421,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704099588
    },
    {
        "content": "<p>Thanks, makes sense. Anyway, it turned that I only needed this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">u₁</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">u₂</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">u₁</span> <span class=\"bp\">=</span> <span class=\"n\">u₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">u₁</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">u₂</span> <span class=\"n\">a</span><span class=\"o\">}):</span>\n<span class=\"n\">cast</span> <span class=\"n\">h₃</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">h₁</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">h₂</span><span class=\"o\">⟩)</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">subst</span> <span class=\"n\">hu</span>\n      <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n    <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 410708752,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1704102477
    }
]