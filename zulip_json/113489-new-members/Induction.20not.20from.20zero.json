[
    {
        "content": "<p>I am trying to prove that the n'th Fibonacci number is less than (7/5)^n. Problems:</p>\n<ol>\n<li>Is there a type positive that I can use instead of <code>Nat</code>? I could work around this by offseting by 1 but I don't like this.</li>\n<li>For the recursive definition <code>n=...</code>, I get \"failed to show termination\".</li>\n<li>For <code>fib n &lt; (7.0/5.0)^n</code>,I get \"failed to synthesize instance OfScientific\".</li>\n<li>Related to (1): can I do induction from 1 and not 0? I found <code>Nat.le_induction</code>, but I don't understand: To use in an induction proof, the syntax is <code>induction n, hn</code> using <code>Nat.le_induction</code> (or the same for <code>induction'</code> and I can't find an example.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fib</span> <span class=\"mi\">12</span>  <span class=\"c1\">-- Prints 144</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"c1\">-- Prints 1.960000</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">seven_fifths</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 411204350,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1704380612
    },
    {
        "content": "<ol>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PNat#doc\">docs#PNat</a> exists</li>\n<li><code>| n + 2 =&gt; fib (n + 1) + fin n</code></li>\n<li>What type should 7/5 be? Rational? Real?</li>\n</ol>",
        "id": 411205941,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704381066
    },
    {
        "content": "<p>Naturals start at 0 in Lean and your result is still true for 0;  but mathlib already has <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.fib#doc\">docs#Nat.fib</a> and I suspect that you would be better off using that rather than rolling your own.</p>",
        "id": 411209179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704381961
    },
    {
        "content": "<p>The reason it allows you to write - is because there is a subtraction defined on the naturals, but it's truncating. Your definition at the moment reads \"if 1 then 1, if 2 then 1, else fib (n - 1) + fib (n - 2)\"; as 0 - 2 = 0 in this truncating division, the definition for n = 0 is an infinite loop.</p>",
        "id": 411209849,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704382157
    },
    {
        "content": "<p>Thanks. I found mkRat and am using Nat.fib.</p>",
        "id": 411215287,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1704383740
    },
    {
        "content": "<p>If you want rationals then <code>(7/5 : \\Q)</code> will be fine, you don't need to get your hands dirty.</p>",
        "id": 411216635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704384106
    },
    {
        "content": "<p>By the way, I suspect the result isn't true: doesn't the nth Fibonacci number grow approximately like (1.618...)^n?</p>",
        "id": 411217131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704384236
    },
    {
        "content": "<p>Indeed by your own calculation <code>fib 12 = 144</code> but <code>(7/5)^12&lt;144</code>.</p>",
        "id": 411217598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704384349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Induction.20not.20from.20zero/near/411217131\">said</a>:</p>\n<blockquote>\n<p>By the way, I suspect the result isn't true: doesn't the nth Fibonacci number grow approximately like (1.618...)^n?</p>\n</blockquote>\n<p>Sorry, it should be 7/4 = 1.75</p>",
        "id": 411219055,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1704384786
    },
    {
        "content": "<p>For examples, you can use GitHub code search on the mathlib4 repo, like this:<br>\n<a href=\"https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4+induction+using+Nat.le_induction&amp;type=code\">https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4+induction+using+Nat.le_induction&amp;type=code</a></p>",
        "id": 411476946,
        "sender_full_name": "Chris Wong",
        "timestamp": 1704518179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294142\">Chris Wong</span> <a href=\"#narrow/stream/113489-new-members/topic/Induction.20not.20from.20zero/near/411476946\">said</a>:</p>\n<blockquote>\n<p>For examples, you can use GitHub code search on the mathlib4 repo, like this:<br>\n<a href=\"https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4+induction+using+Nat.le_induction&amp;type=code\">https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4+induction+using+Nat.le_induction&amp;type=code</a></p>\n</blockquote>\n<p>Thanks ... no Fibonacci theorems ... so far</p>",
        "id": 411485499,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1704527892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Induction.20not.20from.20zero/near/411217131\">said</a>:</p>\n<blockquote>\n<p>By the way, I suspect the result isn't true: doesn't the nth Fibonacci number grow approximately like (1.618...)^n?</p>\n</blockquote>\n<p>I was going to ask why we don't have this in mathlib, but it turns out we do... <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=geom_gold_isSol_fibRec#doc\">docs#geom_gold_isSol_fibRec</a></p>",
        "id": 411496122,
        "sender_full_name": "Chris Wong",
        "timestamp": 1704537119
    },
    {
        "content": "<p>It's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.coe_fib_eq#doc\">docs#Real.coe_fib_eq</a> I guess, although the docstring mentions \"dependent equality\" which will probably confuse a lot of people :-/</p>",
        "id": 411500837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704540953
    },
    {
        "content": "<p>Count me confused</p>",
        "id": 411502720,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704542590
    },
    {
        "content": "<p>Is \"dependent equality\" just referring to the fact that there's a free variable in the equality?</p>",
        "id": 411503833,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704543513
    },
    {
        "content": "<p>If so, almost all equalities stated in mathlib are dependent.</p>",
        "id": 411503848,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704543535
    },
    {
        "content": "<p>By the way, the theorem that the nth Fibonacci number is at most 2 ^ n is an example in both my book <em>How To Prove It with Lean</em> and also Heather Macbeth's book <em>The Mechanics of Proof</em>.  In my book, the example is in Section 6.4.  In Heather's, it is in Section 6.3, Example 6.3.3.  Both of us use tactics in this example that are not standard Lean tactics.  I use a tactic I called <code>by_strong_induc</code>, and Heather uses a tactic called <code>two_step_induction</code>.</p>\n<p>Heather and I also both have custom tactics to deal with induction that doesn't start with 0.  Heather's is called <code>induction_from_starting_point</code>.  Mine is a version of induction that automatically detects if the goal has the form <code>∀ n ≥ k, ...</code>, and if so it sets up the induction to start at <code>k</code>.</p>",
        "id": 411515570,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1704555158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453098\">Dan Velleman</span> <a href=\"#narrow/stream/113489-new-members/topic/Induction.20not.20from.20zero/near/411515570\">said</a>:</p>\n<blockquote>\n<p>Both of us use tactics in this example that are not standard Lean tactics.  I use a tactic I called <code>by_strong_induc</code>, and Heather uses a tactic called <code>two_step_induction</code>.</p>\n</blockquote>\n<p>In my opinion, it is not a good idea to use non-standard tactics, because the student will find it difficult to understand how to do such proofs with standard tactics. For example, Heather uses a tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">two_step_induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">IH1</span> <span class=\"n\">IH2</span>\n</code></pre></div>\n<p>based on the definition of <code>Nat.twoStepInduction</code>. How do I start a proof of this theorem using a standard tactic?</p>",
        "id": 411522102,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1704560942
    },
    {
        "content": "<p>There's <a href=\"https://hrmacbeth.github.io/math2001/Mainstream_Lean.html\">a section</a> of the book hinting at the correct syntax, which in this case is <code>induction' n using Nat.twoStepInduction with k IH1 IH2</code>.</p>",
        "id": 411522957,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1704561803
    },
    {
        "content": "<p>Whether or not it's appropriate to use non-standard tactics depends very much on the context.</p>\n<p>If you want to prove this from first principles, another way is to state and prove the theorem which can be proved by usual induction tactic (which here is <code>F n &lt;= 2^n \\and F (n+1) &lt;= 2^(n+1)</code> and then deduce the result from that.</p>",
        "id": 411523131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704561970
    },
    {
        "content": "<p>I personally don't think <code>induction'</code> should be used in new code, the unprimed version is much nicer</p>",
        "id": 411523132,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704561976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Induction.20not.20from.20zero/near/411523132\">said</a>:</p>\n<blockquote>\n<p>I personally don't think <code>induction'</code> should be used in new code, the unprimed version is much nicer</p>\n</blockquote>\n<p>Good point. For reference, the syntax would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.twoStepInduction</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">H1</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">H2</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">H3</span> <span class=\"n\">k</span> <span class=\"n\">IH1</span> <span class=\"n\">IH2</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where the case names H1, H2 and H3 are defined by <code>Nat.twoStepInduction</code>.</p>",
        "id": 411523894,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1704562686
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.twoStepInduction#doc\">docs#Nat.twoStepInduction</a><br>\nThese names are bad, I think, <code>H0</code>, <code>H1</code> and <code>H</code> (or so) would be better.</p>",
        "id": 411528020,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704566513
    },
    {
        "content": "<p><code>zero</code>, <code>one</code>, <code>ind</code> probably</p>",
        "id": 411528143,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704566577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Induction.20not.20from.20zero/near/411523131\">said</a>:</p>\n<blockquote>\n<p>Whether or not it's appropriate to use non-standard tactics depends very much on the context.</p>\n</blockquote>\n<p>I agree.  If your purpose is to teach Lean, then it's best to use standard tactics.  If your purpose is to use Lean as a tool to teach proof writing, then I think nonstandard tactics are appropriate.</p>\n<p>Note that Heather has an appendix on \"Transitioning to mainstream Lean\".  I am planning to add such an appendix to <em>How To Prove It with Lean</em> as well.</p>",
        "id": 411528681,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1704567096
    },
    {
        "content": "<p>By the way, in addition to the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> Fibonacci bound, I have an exercise (end of section 6.3) proving decimal bounds similar to the OP's original question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">forall_sufficiently_large</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">6</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">7</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 411529363,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704567622
    },
    {
        "content": "<p>Unfortunately the Lean core issue <a href=\"https://github.com/leanprover/lean4/pull/2159\">lean4#2159</a> intersects with that question so the infoview prints weird output during part of the proof.</p>",
        "id": 411529588,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704567760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Induction.20not.20from.20zero/near/411500837\">said</a>:</p>\n<blockquote>\n<p>It's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.coe_fib_eq#doc\">docs#Real.coe_fib_eq</a> I guess, although the docstring mentions \"dependent equality\" which will probably confuse a lot of people :-/</p>\n</blockquote>\n<p>It seems strange to me that we have two versions, one of which is just funext of the the other. Is this pattern common?</p>",
        "id": 411589984,
        "sender_full_name": "Chris Wong",
        "timestamp": 1704624329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Induction.20not.20from.20zero/near/411523132\">said</a>:</p>\n<blockquote>\n<p>I personally don't think <code>induction'</code> should be used in new code, the unprimed version is much nicer</p>\n</blockquote>\n<p>Could someone please explain the difference between <code>induction</code> and <code>induction'</code> and when to use which one? MIL uses <code>induction'</code> exclusively (except for p. 130) and TPIN4 uses <code>induction</code> exclusively!</p>",
        "id": 411594699,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1704628252
    },
    {
        "content": "<p>NNG uses induction' and calls it induction!</p>",
        "id": 411612730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704645360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648495\">Christian Merten</span> has marked this topic as resolved.</p>",
        "id": 411756826,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704726513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648495\">Christian Merten</span> has marked this topic as unresolved.</p>",
        "id": 411768399,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704729857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294142\">Chris Wong</span> <a href=\"#narrow/stream/113489-new-members/topic/Induction.20not.20from.20zero/near/411589984\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Induction.20not.20from.20zero/near/411500837\">said</a>:</p>\n<blockquote>\n<p>It's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.coe_fib_eq#doc\">docs#Real.coe_fib_eq</a> I guess, although the docstring mentions \"dependent equality\" which will probably confuse a lot of people :-/</p>\n</blockquote>\n<p>It seems strange to me that we have two versions, one of which is just funext of the the other. Is this pattern common?</p>\n</blockquote>\n<p>I guess it is quite common for some tactics are not smart enough and sometimes you have to prepare some theorems for them to eat although people may feel another one is just the same.</p>",
        "id": 417140786,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1705885572
    }
]