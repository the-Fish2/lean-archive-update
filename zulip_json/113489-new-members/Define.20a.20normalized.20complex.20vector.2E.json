[
    {
        "content": "<p>I want to define a normalized vector using Mathlib, and I expected the following to work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">normalized_complex_vector</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span>\n  <span class=\"n\">norm</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>However, Lean complains that it fails to synthesize instances for <code>v * vᴴ = 1</code>. What is the problem?</p>\n<p>The error message is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HMul</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.31529</span>\n</code></pre></div>",
        "id": 417277107,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705943490
    },
    {
        "content": "<p>Seems you need to either transpose a matrix, or use a vector and something like <code>dotProduct</code>.</p>",
        "id": 417278335,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705943864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Define.20a.20normalized.20complex.20vector.2E/near/417278335\">said</a>:</p>\n<blockquote>\n<p>Seems you need to either transpose a matrix, or use a vector and something like <code>dotProduct</code>.</p>\n</blockquote>\n<p>I thought that I conjugate transposed the 2nd <code>v</code> with <code>ᴴ</code>, is that right?</p>",
        "id": 417278512,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705943915
    },
    {
        "content": "<p>Can you give me the right import so that I will be able to check?</p>",
        "id": 417278588,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705943941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Define.20a.20normalized.20complex.20vector.2E/near/417278588\">said</a>:</p>\n<blockquote>\n<p>Can you give me the right import so that I will be able to check?</p>\n</blockquote>\n<p>Here it is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n</code></pre></div>\n<p>I also add it to the main post.</p>",
        "id": 417278655,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705943966
    },
    {
        "content": "<p>Interesting this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">normalized_complex_vector</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span>\n  <span class=\"n\">norm</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v.conjTranspose</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 417278839,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705944027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Define.20a.20normalized.20complex.20vector.2E/near/417278839\">said</a>:</p>\n<blockquote>\n<p>Interesting this works:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">normalized_complex_vector</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span>\n  <span class=\"n\">norm</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v.conjTranspose</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>ah... That is indeed very interesting...</p>",
        "id": 417278956,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705944065
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n</code></pre></div>",
        "id": 417279109,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705944120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Define.20a.20normalized.20complex.20vector.2E/near/417279109\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks! I guess that I need to strengthen my understanding of <code>scope</code>s now.</p>",
        "id": 417279306,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705944178
    },
    {
        "content": "<p>I'd like to know how it originally understood <code>ᴴ</code> so that it complained about <code>*</code> instead. Maybe it was trying to parse <code>(v * v)ᴴ</code> before opening the scope which revealed the priority of the notation.</p>",
        "id": 417279846,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705944351
    },
    {
        "content": "<p>It is complaining about both errors simultaneously</p>",
        "id": 417291600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705948411
    },
    {
        "content": "<p><code>open scoped Matrix</code> is probably safer than <code>open Matrix</code></p>",
        "id": 417291736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705948449
    },
    {
        "content": "<p>Is <code>?m.31529</code> about the unknown symbol?</p>",
        "id": 417315536,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705957633
    },
    {
        "content": "<p>That's lean saying \"multiplication is heterogeneous but I can't find any <code>*</code> which eats two d x 1 matrices and spits out anything at all\"</p>",
        "id": 417316116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705957865
    }
]