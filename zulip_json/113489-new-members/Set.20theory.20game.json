[
    {
        "content": "<p>Hi everyone. I am stuck on the final level of the Set Theory Game. It says that for a for a set A, such that for any family of sets F such that \\U0 F = A A\\in F, A must be a singleton.  (A : Set U) (h1 : ∀ F, (⋃₀ F = A → A ∈ F)) : ∃ x, A = {x}. It seems to me that it is not true if A is the empty set. Then it is only possible that F contains the empty set and no other sets. However, the empty set is not a singleton. Am I missing something?<br>\n<a href=\"/user_uploads/3121/clPiTpL3QKGX8VjP9TIuvd0_/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/clPiTpL3QKGX8VjP9TIuvd0_/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/clPiTpL3QKGX8VjP9TIuvd0_/image.png\"></a></div>",
        "id": 439285321,
        "sender_full_name": "Daniil Zhitov",
        "timestamp": 1715976549
    },
    {
        "content": "<p>Yes, F might be the empty set (and hence F would not contain the empty set, because F contains no sets at all).</p>",
        "id": 439293466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715980956
    },
    {
        "content": "<p>I believe he is asking when <code>F = {∅}</code>. The issue is that <code>h1</code> requires you to provide an <code>F</code> <em>and</em> a proof that <code>⋃₀ F = A</code>. This proof is impossible to provide when <code>F = {∅}</code>, so you can never satisfy <code>h1 {∅}</code>.</p>",
        "id": 439294062,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1715981304
    },
    {
        "content": "<p>I missed the possibility of F being the empty set rather than F = {∅} indeed. I think F = ∅ could be used at h1 and leads to a contradiction with A \\in \\emptyset.</p>",
        "id": 439294250,
        "sender_full_name": "Daniil Zhitov",
        "timestamp": 1715981429
    },
    {
        "content": "<p>I can't really make this work though. I am stuck at trying to prove False from  x\\in\\emptyset.</p>",
        "id": 439294846,
        "sender_full_name": "Daniil Zhitov",
        "timestamp": 1715981774
    },
    {
        "content": "<p>What do you have so far? You should be trying to construct an <code>F</code> that you can show its union is equal to <code>A</code>.</p>",
        "id": 439295067,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1715981910
    },
    {
        "content": "<p>I know from the way Lean implements the empty set that x \\in \\emptyset is definitionally equal to <code>False</code>.</p>",
        "id": 439295167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715981984
    },
    {
        "content": "<p>Indeed!</p>",
        "id": 439295272,
        "sender_full_name": "Daniil Zhitov",
        "timestamp": 1715982038
    },
    {
        "content": "<p>If you try to use <code>F = ∅</code>, you'll also run into problems proving <code>⋃₀ F = A</code>.</p>",
        "id": 439295307,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1715982055
    },
    {
        "content": "<p>hmmm</p>",
        "id": 439295645,
        "sender_full_name": "Daniil Zhitov",
        "timestamp": 1715982252
    },
    {
        "content": "<p>My idea is that for F =\\empty the \\U0 will produce empty. Thus \\U0 F = A so A\\in\\empty (of the universe of families). Contradictory as desired.</p>",
        "id": 439295777,
        "sender_full_name": "Daniil Zhitov",
        "timestamp": 1715982358
    },
    {
        "content": "<p>I am trying to implement this right now.</p>",
        "id": 439295837,
        "sender_full_name": "Daniil Zhitov",
        "timestamp": 1715982374
    },
    {
        "content": "<p>The issue you are going to run into is the fact that <em>you</em> need to provide the proof of <code>⋃₀ F = A</code>. It is not a consequence.</p>",
        "id": 439296513,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1715982795
    },
    {
        "content": "<p>In case A is empty, applying F empty  would prove this result. Thus,  A in empty. I am repeating the same thing so sorry if am missing something.</p>",
        "id": 439296718,
        "sender_full_name": "Daniil Zhitov",
        "timestamp": 1715982925
    },
    {
        "content": "<p>I've managed to do the case with A empty entirely. Now the only challenge is so get an element y from the non-empty A.</p>",
        "id": 439297035,
        "sender_full_name": "Daniil Zhitov",
        "timestamp": 1715983151
    },
    {
        "content": "<p>code for this<br>\n part if you are interested is</p>\n<p>have h2 := h1 {s | ∀ x1∈A, s={x1}}<br>\nby_cases hE : A = ∅<br>\nhave hE1 : False<br>\napply h1 ∅ <br>\next y<br>\nrw [mem_sUnion]<br>\napply Iff.intro<br>\nintro h<br>\nobtain ⟨t,ht⟩ := h<br>\ncases' ht with h3 h4<br>\ncases' h3<br>\nintro h<br>\nrw [hE] at h<br>\ncases' h<br>\ncases' hE1</p>",
        "id": 439297199,
        "sender_full_name": "Daniil Zhitov",
        "timestamp": 1715983236
    },
    {
        "content": "<p>I have managed to obtain an element from non-empty A. I think I should be able to get it from there. Thank you guys!</p>",
        "id": 439298162,
        "sender_full_name": "Daniil Zhitov",
        "timestamp": 1715983809
    },
    {
        "content": "<p>You'll find that proving <code>A ≠ ∅</code> is unnecessary once you figure out the rest of the proof. Also, using <code>F = ∅</code> gives a fairly short 1 liner that <code>A ≠ ∅</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⋃₀</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h1</span> <span class=\"bp\">∅</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.sUnion_empty</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 439298700,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1715984117
    },
    {
        "content": "<p>In your first step, I don't think you've made the best choice of the set to apply <code>h1</code> to.  The hint suggests that you should appy <code>h1</code> to a family of sets with two properties, and the first property is that the union of the family must be <code>A</code>.  For your choice, that might not be true.  It might help to think about this example:  Suppose that <code>A = {0, 1}</code>.  If <code>F = {s | ∀ x1∈A, s={x1}}</code> (the family you chose), then you'll have <code>F = ∅</code>, and it will not be the case that the union of <code>F</code> will be <code>A</code>.  If you change your definition slightly, you'll get <code>F = {{0}, {1}}</code>, and then it will be the case that the union of <code>F</code> is equal to <code>A</code>.</p>",
        "id": 439311099,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1715993577
    },
    {
        "content": "<p>Yes, I have already understood my mistake and have solved the level by changing the universal quantifier to the existential one.</p>",
        "id": 439333444,
        "sender_full_name": "Daniil Zhitov",
        "timestamp": 1716016240
    },
    {
        "content": "<p>I am currently working through the Set theory game on Level 6 / 8 : A subset of a union intersected with the complement of another</p>\n<p><a href=\"/user_uploads/3121/qM-Py9I1getPk7Ukb1_Z5TUI/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/qM-Py9I1getPk7Ukb1_Z5TUI/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/qM-Py9I1getPk7Ukb1_Z5TUI/image.png\"></a></div><p>I have no issues unwrapping h and the goal with the given proofs, but I'm not sure how to use h1 at all given this relatively complicated statement. Any pointers as to how to break h1 down into a more usable form?</p>",
        "id": 440650361,
        "sender_full_name": "awefhio",
        "timestamp": 1716656570
    },
    {
        "content": "<p>h says that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x\\in y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>∈</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">y\\in F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>, and it suffices to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>∈</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">y\\in G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> as well. What happens if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo mathvariant=\"normal\">∉</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">y\\notin G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.0556em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>?</p>",
        "id": 440650697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716656919
    },
    {
        "content": "<p>How would I try to introduce this idea?</p>\n<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hGc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">⋃₀</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hy</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"bp\">ᶜ</span>\n</code></pre></div>\n<p>would not work since I'll have to prove the statements first.</p>",
        "id": 440651785,
        "sender_full_name": "awefhio",
        "timestamp": 1716658002
    },
    {
        "content": "<p>You can use <code>have</code> to assert something that you haven't proven yet.  Proving that statement becomes your immediate goal.  Once you have proven the statement, you return to your original goal, with the statement asserted by the <code>have</code> available as a new assumption.</p>",
        "id": 440651921,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1716658146
    },
    {
        "content": "<p>In the set theory game, click on <code>have</code> in the list of tactics on the right and look at the first bullet point.</p>",
        "id": 440651996,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1716658204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453098\">Dan Velleman</span> <a href=\"#narrow/stream/113489-new-members/topic/Set.20theory.20game/near/440651921\">said</a>:</p>\n<blockquote>\n<p>You can use <code>have</code> to assert something that you haven't proven yet.  Proving that statement becomes your immediate goal.  Once you have proven the statement, you return to your original goal, with the statement asserted by the <code>have</code> available as a new assumption.</p>\n</blockquote>\n<p>I think I do understand this part. The issue I'm having is what do I do after introducing the \"have\" statement.</p>",
        "id": 440652866,
        "sender_full_name": "awefhio",
        "timestamp": 1716659167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Set.20theory.20game/near/440650697\">said</a>:</p>\n<blockquote>\n<p>h says that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x\\in y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>∈</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">y\\in F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>, and it suffices to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>∈</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">y\\in G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> as well. What happens if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo mathvariant=\"normal\">∉</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">y\\notin G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.0556em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>?</p>\n</blockquote>\n<p>Oh I think I know, I assert  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>∈</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">y\\in G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> then I try proving by contradiction?</p>",
        "id": 440653373,
        "sender_full_name": "awefhio",
        "timestamp": 1716659790
    },
    {
        "content": "<p>I got it, thanks!!</p>",
        "id": 440653743,
        "sender_full_name": "awefhio",
        "timestamp": 1716660135
    }
]