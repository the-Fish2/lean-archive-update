[
    {
        "content": "<p>I want to prove  in Lean4 the following theorem as a basic sanity check (not trying to generalize it yet, just as is):</p>\n<blockquote>\n<p>thm: Show that f(x) = 2 / (x^2 + x - 6) has 2 vertical asymptotes at x=-3, x=2.</p>\n</blockquote>\n<p>This is my current attempt</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">Strategy</span>\n\n<span class=\"cm\">define: f</span>\n\n<span class=\"cm\">lemma: (x^2 + x - 6) = (x + 3)(x - 2)</span>\n\n<span class=\"cm\">define: vertical asymptote, as lim_{x-&gt;val} f(x) = infity</span>\n<span class=\"cm\">(on either side i.e. vertical asymptote if goes to infinity if it does from left or right)</span>\n\n<span class=\"cm\">Theorem1: Show that f(x) = 2 / (x^2 + x - 6) has 2 vertical asymptotes at x=-3, x=2.</span>\n<span class=\"cm\">proof:</span>\n<span class=\"cm\">rewrite f -&gt; 2 / (x + 3)(x - 2)</span>\n<span class=\"cm\">cases:</span>\n<span class=\"cm\">1. show lim_{x -&gt; -3} f(x) = infinity</span>\n<span class=\"cm\">2. show lim_{x -&gt; 2} f(x) = infinity</span>\n<span class=\"cm\">end</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n<span class=\"c1\">-- import Mathlib.Topology.MetricSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"c1\">-- import Mathlib.Analysis.Calculus.Tendsto</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">6</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Preliminary lemma that might be used to simplify expressions or directly in proof</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">denom_factorization</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">6</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">ring</span>\n\n<span class=\"c1\">-- thm: Show that f(x) = 2 / (x^2 + x - 6) has 2 vertical asymptotes at x=-3, x=2.</span>\n<span class=\"c1\">-- thm: Show that lim_{x -&gt; -3} f(x) = infinity /\\ lim_{x -&gt; 2} f(x) = infinity</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">vertical_asymptotes_thm1</span> <span class=\"o\">:</span>\n</code></pre></div>\n<p>how does one do this?</p>\n<p>What I am stuck in is that there seems to be multiple limit/tendsto functions and I am worried about type coercion (and my general lack of experience in Lean makes it hard for me to try things).</p>\n<p>e.g.,</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Order/LeftRightLim.html#Function.leftLim\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Order/LeftRightLim.html#Function.leftLim</a></p>\n<p>and </p>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecificLimits/Basic.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecificLimits/Basic.html</a></p>\n<p>but I'm really only interested in the real numbers version of this theorem.</p>",
        "id": 421761521,
        "sender_full_name": "Brando Miranda",
        "timestamp": 1708041038
    },
    {
        "content": "<p>Can you offer a rigorous definition of vertical asymptote? Your claim lim_{x -&gt; -3} f(x) = infinity will not be true for your function, because as x tends to -3 from above the limit will be -infinity. Does -1/x^2 have a vertical asymptote at x=0?</p>",
        "id": 421762303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708041479
    },
    {
        "content": "<p>Does 1/(x sin(1/x)) have a vertical asymptote at x=0?</p>",
        "id": 421762392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708041511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20that.20function.20of.20reciprocals.20have.20vertical.20asymptote/near/421762303\">said</a>:</p>\n<blockquote>\n<p>Can you offer a rigorous definition of vertical asymptote? Your claim lim_{x -&gt; -3} f(x) = infinity will not be true for your function, because as x tends to -3 from above the limit will be -infinity. Does -1/x^2 have a vertical asymptote at x=0?</p>\n</blockquote>\n<p>You are correct. My theorem is wrong (doesn't match what I drew on paper). My apologies. As you correctly identified, I am trying to find the correct Mathlib definitions (with the right types) to define vertical asymptote. The definition of vertical asymptote I had in mind was:</p>\n<blockquote>\n<p>A vertical asymptote of a graph is := \"a vertical line x = a where the graph tends toward positive or negative infinity as the inputs approach a\".</p>\n</blockquote>\n<p>Therefore the theorem I wanted to write (informally) is (with my specific f):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- definition f: f(x) = 2 / (x^2 + x - 6)</span>\n<span class=\"c1\">-- lemma denom_factorization (x : ℝ) : x^2 + x - 6 = (x - 2) * (x + 3) := by ring</span>\n<span class=\"c1\">-- definition Func_has_Vertical_Asymptote: (f: Real -&gt; Real) (a : Real) : lim_{x -&gt; a} = +- infinity</span>\n<span class=\"c1\">-- theorem Has_two_vertical_asymptotes:  Func_has_Vertical_Asymptote f 2 /\\ Func_has_Vertical_Asymptote f -3 := by sorry</span>\n</code></pre></div>\n<p>but I'm struggling to understand how or which limit function to use. Given there are so mean that seem correct, filters, metric spaces, reals, etc. What I'd personally do is use Reals given, the type of my function f.</p>",
        "id": 421764329,
        "sender_full_name": "Brando Miranda",
        "timestamp": 1708042520
    },
    {
        "content": "<p>I am still not happy with the definition (in the sense that I don't know what \"tending towards x or y as the inputs approach z\" even <em>means</em>). Does 1/x(sin(1/x)) have a vertical asymptote at x=0? Can you write an epsilon-delta-like definition of what you mean by \"tending to x or y\"?</p>",
        "id": 421764919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708042898
    },
    {
        "content": "<p>Once we have a rigorous mathematical definition it will be fine translating it into Lean, but right now I don't feel like I have a rigorous definition of this concept.</p>",
        "id": 421765248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708043112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20that.20function.20of.20reciprocals.20have.20vertical.20asymptote/near/421764919\">said</a>:</p>\n<blockquote>\n<p>I am still not happy with the definition (in the sense that I don't know what \"tending towards x or y as the inputs approach z\" even <em>means</em>). Does 1/x(sin(1/x)) have a vertical asymptote at x=0? Can you write an epsilon-delta-like definition of what you mean by \"tending to x or y\"?</p>\n</blockquote>\n<p>I will assume you meant <code>g(x) = 1/(x sin(1/x))</code> (and not <code>1/x sin(1/x)</code>). I appreciate the issue i.e.  as <code>x -&gt; 0</code> then <code>1/x-&gt;+-infinity</code> but sin(1/x) oscillates very rapidly between +-1 (rapidly meaning <code>sin'(x) = -cos(1/x)x^-2</code> compared to <code>x' = 1</code>). What I would have personally done is allow <code>g(x)</code> to have a vertical asymptote since the other term is always bounded, even if it oscillates. But that messes the traditional definition of limit, which usually goes to a specific concrete value <code>L</code> i.e. <code>lim_{x-&gt;a} f(x) = L</code>. Therefore, we should stick to the standard epsilon-delta definition of limits and <strong>not</strong> allow <code>1/(x sin(1/x))</code>to have a vertical asymptote. It doesn't seem standard to change the traditional definition of limit and my goal is use Mathlib as much as possible.</p>",
        "id": 421768459,
        "sender_full_name": "Brando Miranda",
        "timestamp": 1708045032
    },
    {
        "content": "<p>So what is your definition? Because if a sequence x_,n is tending to zero by jumping between positive and negative reals (which is a perfectly allowable way to tend to zero) then 1/x_n will also be jumping around between large positive and large negative numbers which you've just disallowed. Does the function f(x) = 1/x if x is rational and -1/x if x is irrational have a vertical asymptote?</p>\n<p>Let me try and clarify. I do not actually want you to answer that question. Your personal opinion on whether that function has a vertical asymptote will get us nowhere. I want you to give me a formal mathematical definition of \"has a vertical asymptote\" which does not contain the word \"limit\" but which instead begins something like  \"for all epsilon &gt; 0...\". Something that lean can actually work with. Just to be clear -- have you seen the formal mathematical definition of a limit or a derivative? The point I'm trying to make with the pathological examples of functions I'm throwing out is that you can't just say \"look at the picture\" because a general function is totally wild and doesn't look like the pictures of functions with asymptotes which you see in the high school textbooks. Lean can't work with pictures or ideas or vague concepts like \"tends to +infinity or -infinity\", it can't work with \"Kevin suggests a function and Brando comes up with their own opinion about whether it has an asymptote and then it's Kevin's move again\" -- we need to see a definition with absolutely no hand-waving and no vague usage of the word \"limit\" (eg no meaningless phrase \"limit is this or that\") before we can even state the theorem. We need epsilons and deltas, not Isaac Newton mathematics. This is not physics.</p>",
        "id": 421805060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708068991
    },
    {
        "content": "<p>Hi Kevin (apologies for delay, wasn't around for a bit but I'm back). </p>\n<p>The definition of limit I was expecting is the standard one for real numbers <code>\\forall \\eps &gt;0, \\exists delta &gt;0 s.t. if 0 &lt; |x - c| &lt; delta ==&gt; 0 &lt; | f(x) - L | &lt; eps</code> meaning <code>lim_{x-&gt;c} f(x) = L</code> where L is a constant real. I expected such a definition to exist in lean that was compatible with the definition of extended reals (using +- infinity, I was thinking of the formal definition Walter Rudin had in his textbook).  So that I could prove my function had to limits that go to plus or minus infinity at the corresponding two points <code>-3</code> and <code>2</code>. So I am defining formally Vertical Asymptote as <code>def VA (f : R -&gt; R) := lim f = +- infinity</code>. If that is wrong I'm happy to correct it.</p>\n<p>I am happy (especially as I am learning lean) to define limits from scratch. I currently working on it right now and happy to share my attempt in a bit.</p>",
        "id": 423938235,
        "sender_full_name": "Brando Miranda",
        "timestamp": 1709172892
    },
    {
        "content": "<p>Note: your epsilon definition doesn't work to define <code>lim f = +infinity</code> because you can't choose <code>L = +infinity</code>.  So here, if you want Kevin to be able to answer you, you'll need to provide \"the formal definition Walter Rudin had in his textbook\", or at least specify exactly which of Rudin's textbooks you mean, and on what page the definition can be found (but it's better to just reproduce it here).</p>",
        "id": 423940129,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1709174302
    },
    {
        "content": "<p>My main objection was not about the definition of limit, but the concept of \"limit is x or y\" (a phrase you used more than once). Does this mean \"either limit is x or limit is y\" (which I know how to translate into lean) or does it include \"function is hopping between x and y and is kind of tending to both of them\" (in which case we need an epsilon delta definition of what you mean).</p>",
        "id": 423979541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709198832
    },
    {
        "content": "<p>Basically the sooner we stop writing large walls of text and you just post three lines of LaTeX actually saying rigorously what you mean by a vertical asymptote without using the phrase \"limit is x or y\" and ideally using epsilons and deltas, the sooner we can proceed.</p>",
        "id": 423980008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709199024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20that.20function.20of.20reciprocals.20have.20vertical.20asymptote/near/421764919\">said</a>:</p>\n<blockquote>\n<p>I am still not happy with the definition (in the sense that I don't know what \"tending towards x or y as the inputs approach z\" even <em>means</em>). Does 1/x(sin(1/x)) have a vertical asymptote at x=0? Can you write an epsilon-delta-like definition of what you mean by \"tending to x or y\"?</p>\n</blockquote>\n<p>I think we can crib Wikipedia's definition: there is a vertical asymptote of <code>f</code> at <code>x</code> if <code>Tendsto f (\\MCN[&gt;] x) atTop</code> or the three variants replacing <code>&gt;</code> with <code>&lt;</code> or <code>atTop</code>  with <code>atBot</code> or both</p>",
        "id": 424015449,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1709212158
    },
    {
        "content": "<p>So you think the definition is \"either tends to +infinity or -infinity as we tend to x from above, and also either tends to +infty or -infinity as we tend to x from below\". That sounds like a reasonable definition to me.</p>",
        "id": 424058793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709224184
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Normed/Field/Basic.html#Filter.tendsto_inv%E2%82%80_nhdsWithin_ne_zero\">docs#Filter.tendsto_inv₀_nhdsWithin_ne_zero</a> for a proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">1/x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">x</span></span></span></span> has a vertical asymptote at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>.</p>",
        "id": 424061749,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1709224949
    },
    {
        "content": "<p>That is yet another interpretation of “vertical asymptote”.</p>",
        "id": 424062601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709225201
    },
    {
        "content": "<p>Right: 1/x if x is rational and -1/x if x is irrational satisfies that bornology criterion but not Jeremy's criterion.</p>",
        "id": 424110433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709241650
    },
    {
        "content": "<p>Ok I made some progress on my current proof attempt. I defined limit to infinity as unbounded limit and only considering the right limit for simplicity:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"c1\">-- define 1/x (reciprocal) for reals</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">):</span>  <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span>\n<span class=\"k\">#check</span> <span class=\"n\">f</span>\n\n<span class=\"c1\">-- -- unit test that f 1 = 1, f 2 = 1/2</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test_f1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test_f2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n<span class=\"k\">#print</span> <span class=\"n\">test_f1</span>\n<span class=\"k\">#print</span> <span class=\"n\">test_f2</span>\n\n<span class=\"c1\">-- The limit of f x as x approaches c+ from the right is +infinity i.e., limit is unbounded from the right</span>\n<span class=\"c1\">-- i.e., lim_{x -&gt; c+} f(x) = +infinity</span>\n<span class=\"kd\">def</span> <span class=\"n\">has_unbounded_limit_right</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">reciprocal_has_unbounded_limit_right</span> <span class=\"o\">:</span> <span class=\"n\">has_unbounded_limit_right</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">M</span> <span class=\"n\">hM</span>\n  <span class=\"n\">use</span> <span class=\"n\">M</span><span class=\"bp\">⁻¹</span>\n  <span class=\"c1\">-- split (what did scott want with this, read)</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">inv_pos</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">h_x_pos</span><span class=\"o\">,</span> <span class=\"n\">h_x_lt_δ</span><span class=\"o\">⟩</span>\n  <span class=\"c1\">-- rewrite both hypothesis using substraction zero</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_x_pos</span> <span class=\"n\">h_x_lt_δ</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n    <span class=\"c1\">-- multiply both sides of h_x_lt_δ by x⁻¹ on the left using mul_lt_mul_right</span>\n    <span class=\"k\">#check</span> <span class=\"n\">mul_lt_mul_right</span>\n</code></pre></div>\n<p>I've tried a bunch of things after <code>    -- multiply both sides of h_x_lt_δ by x⁻¹ on the left using mul_lt_mul_right</code>  with <code>apply?</code>, <code>exact?</code>, <code>rw?</code>, more  + copilot, GPT4, Moogle, mathlib docs etc. I just can't seem to find the right tactic to do what I want to do. Does someone know how to get Lean to do <code>multiply both sides of h_x_lt_δ by x⁻¹ on the left using mul_lt_mul_right</code>?</p>\n<p>(todo: running out of time this morning but I can paste my pen and pencil proof in a bit)</p>",
        "id": 424281764,
        "sender_full_name": "Brando Miranda",
        "timestamp": 1709310498
    },
    {
        "content": "<p><code>exact?</code> was able to find <code>exact (lt_inv hM h_x_pos).mpr h_x_lt_δ</code> which closes the proof.</p>",
        "id": 424282827,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1709310784
    },
    {
        "content": "<p>Sorry, were you asking specifically for this?<br>\n<code> rw [← mul_lt_mul_left (inv_pos.mpr h_x_pos)] at h_x_lt_δ</code></p>",
        "id": 424284347,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1709311142
    },
    {
        "content": "<p>I found a couple of proofs I'm happy with. Thanks y'all!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- import real numbers form mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span>\n<span class=\"k\">#print</span> <span class=\"n\">f</span>\n<span class=\"k\">#check</span> <span class=\"n\">f</span>\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- #eval f 1</span>\n<span class=\"c1\">-- theorem any_R : ℝ -&gt; R := λ x : ℝ, x -- TODO</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">unit_test_f_1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">unit_test_f_2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">units_f_eq_f'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f'</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f'</span><span class=\"o\">]</span>\n<span class=\"k\">#print</span> <span class=\"n\">units_f_eq_f'</span>\n\n<span class=\"c1\">-- lim_{x -&gt; c+} f(x) = +infinity := ∀ M &gt; 0, ∃ δ &gt; 0, ∀ x : ℝ, 0 &lt; x - c &lt; δ → f(x) &gt; M</span>\n<span class=\"kd\">def</span> <span class=\"n\">unbounded_limit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- show 1/x is unbounded as x -&gt; 0 (or 1/x has a veritcal asymptote at x = 0)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">limit_of_reciprocal_of_x_is_unbounded</span><span class=\"o\">:</span> <span class=\"n\">unbounded_limit</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">unbounded_limit</span> <span class=\"n\">f</span>\n  <span class=\"c1\">-- choose M : ℝ and is M &gt; 0</span>\n  <span class=\"n\">intro</span> <span class=\"n\">M</span> <span class=\"n\">h_M_pos</span>\n  <span class=\"c1\">-- choose delta = M⁻¹ by a tactic</span>\n  <span class=\"n\">use</span> <span class=\"n\">M</span><span class=\"bp\">⁻¹</span>\n  <span class=\"c1\">-- deconstruct the constructor Left ∧ Right = And(Left, Right) to Left, Right using a tactic</span>\n  <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h_M_pos</span><span class=\"o\">])</span> <span class=\"c1\">-- TODO try to find the lemma in mathlib to prove this</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">h_x_pos</span><span class=\"o\">,</span> <span class=\"n\">h_x_lt_M</span><span class=\"o\">⟩</span>\n    <span class=\"c1\">-- rewrite x - 0 to x using a tactic for sub</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_x_pos</span> <span class=\"n\">h_x_lt_M</span>\n    <span class=\"c1\">-- using rewrite do M &lt; x⁻¹ → M * x &lt; x⁻¹ * x by mulitpling both sides by x on the right</span>\n    <span class=\"c1\">-- #print mul_lt_mul_right -- (a0 : 0 &lt; a) : b * a &lt; c * a ↔ b &lt; c</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_lt_mul_right</span> <span class=\"n\">h_M_pos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_x_lt_M</span>\n    <span class=\"c1\">-- #print mul_inv_cancel</span>\n    <span class=\"c1\">-- mul_inv_cancel: a ≠ 0 → a * a⁻¹ = 1</span>\n    <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_x_lt_M</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_M_neq_zero</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">h_M_pos</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_inv_cancel</span> <span class=\"n\">h_M_neq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_x_lt_M</span>\n    <span class=\"c1\">-- multiply both sides by x⁻¹ on the left</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_x_inv_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"n\">inv_pos.mpr</span> <span class=\"n\">h_x_pos</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">h_x_inv_pos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_x_lt_M</span>\n    <span class=\"c1\">-- apply associativity of mul</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_x_lt_M</span>\n    <span class=\"c1\">-- mul_inv_cancel: a ≠ 0 → a * a⁻¹ = 1</span>\n    <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_x_lt_M</span>\n    <span class=\"c1\">-- cancel the x * x⁻¹ to 1</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_x_neq_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">h_x_pos</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_inv_cancel</span> <span class=\"n\">h_x_neq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_x_lt_M</span>\n    <span class=\"c1\">-- apply 1 * M = M</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_x_lt_M</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_x_lt_M</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_x_lt_M</span>\n    <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 424471127,
        "sender_full_name": "Brando Miranda",
        "timestamp": 1709439061
    },
    {
        "content": "<p>I want to do  two things however:</p>\n<ol>\n<li>I want to change the statement to say that <code>1/x</code> has a single asymptote from the right (as I formally defined). How do I change the theorem (or extend it) and state I want prove there is a single right asymptote for some x value?</li>\n<li>I would like to change the theorem to work the unbounded limit definition in mathlib. This is the new skill I want to obtain, using matlib as much as possible. I feel my definition although fine probably already exists in mathlib. How do I do this? Or what is a starter/general tips so I can give it a shot on my current proof.</li>\n</ol>\n<p>Thanks!</p>\n<p>Side: note, is there a good lean hammer or one to be released? like the one in Isabelle that is amazing?</p>",
        "id": 424471238,
        "sender_full_name": "Brando Miranda",
        "timestamp": 1709439194
    },
    {
        "content": "<p>regarding (2), you're <code>unbounded_limit f c</code> would be written <code>Tendsto f (𝓝[&gt;] c) atTop</code> with <code>open Filter Topology</code>.</p>",
        "id": 426770545,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710517377
    },
    {
        "content": "<p>Regarding (1), it's not clear to me what you mean. Do you mean that there exists a unique <code>c</code> such that <code>unbounded_limit (fun x ↦ 1/x) c</code>?</p>",
        "id": 426771284,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710517581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246156\">@Brando Miranda</span>  Here's a proof for (2) that the version I gave is equivalent to yours:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">-- lim_{x -&gt; c+} f(x) = +infinity := ∀ M &gt; 0, ∃ δ &gt; 0, ∀ x : ℝ, 0 &lt; x - c &lt; δ → f(x) &gt; M</span>\n<span class=\"kd\">def</span> <span class=\"n\">unbounded_limit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- is Mathlib really missing this?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Set.Ioo_inter_Ioi_of_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set.Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∩</span> <span class=\"n\">Set.Ioi</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">Set.Ioo</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_Ioo</span><span class=\"o\">,</span> <span class=\"n\">mem_Ioi</span><span class=\"o\">,</span> <span class=\"n\">and_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">and_congr_left_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">and_iff_right_iff_imp</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">hc</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">h.trans_lt</span> <span class=\"n\">hc</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unbounded_limit</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.nhdsWithin_basis_ball.tendsto_iff</span> <span class=\"o\">(</span><span class=\"n\">atTop_basis_Ioi'</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">unbounded_limit</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Real.ball_eq_Ioo</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">]</span>\n  <span class=\"n\">peel</span> <span class=\"k\">with</span> <span class=\"n\">ε</span> <span class=\"n\">_hε</span> <span class=\"n\">δ</span> <span class=\"n\">hδ</span> <span class=\"n\">x</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.Ioo_inter_Ioi_of_le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">hδ.le</span><span class=\"o\">])]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sub_lt_iff_lt_add'</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 426782787,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710521084
    },
    {
        "content": "<p>All the real mathematics happens with the single rewrite <code>rw [Metric.nhdsWithin_basis_ball.tendsto_iff (atTop_basis_Ioi' 0)]</code>. This declaration, namely <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.HasBasis.tendsto_iff#doc\">docs#Filter.HasBasis.tendsto_iff</a> is the way to convert between ε-δ-style limits and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto#doc\">docs#Filter.Tendsto</a> statements. For this, you need a basis for the corresponding filter.</p>",
        "id": 426782835,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710521098
    },
    {
        "content": "<p>Some common bases include:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Metric.nhds_basis_ball#doc\">docs#Metric.nhds_basis_ball</a>, which is the usual basis for the filter <code>𝓝 a</code> (this is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=nhds#doc\">docs#nhds</a>)</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Metric.nhdsWithin_basis_ball#doc\">docs#Metric.nhdsWithin_basis_ball</a>, this is the usual basis for the filter for <code>𝓝 a</code> but restricted to a set <code>s</code>, so in particular this works for <code>𝓝[&gt;] a</code> (where <code>s := Set.Ioi a</code>), or <code>𝓝[≠] a</code>(where <code>s := {a}ᶜ</code>), and this allows you to take one-sided limits, or limits at point (but excluding the limiting value).</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.atTop_basis#doc\">docs#Filter.atTop_basis</a>, the usual basis for the filter at infinity (use <code>atBot</code> for negative infinity). But there are several variants, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.atTop_basis%27#doc\">docs#Filter.atTop_basis'</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.atTop_basis_Ioi#doc\">docs#Filter.atTop_basis_Ioi</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.atTop_basis_Ioi%27#doc\">docs#Filter.atTop_basis_Ioi'</a>, and you'll note that I used the last one above because in your definition of <code>unbounded_limit</code> you required <code>M &gt; 0</code>.</li>\n</ul>",
        "id": 426782870,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710521106
    },
    {
        "content": "<p>There are plenty more filter bases, but these are the only you need to talk about the various kinds of limits one encounters in an introductory real analysis class.</p>",
        "id": 426782882,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710521110
    }
]