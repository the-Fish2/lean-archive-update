[
    {
        "content": "<p>I know that the function <code>timeit</code> exists. However, it seems to print the time to the console, rather than returning it to the program.</p>\n<p>Is there an action getTime that can work like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myTimeIt</span> <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Milliseconds</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">tick</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">getTime</span>\n  <span class=\"n\">a</span>\n  <span class=\"n\">tock</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">getTime</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">tock</span> <span class=\"bp\">-</span> <span class=\"n\">tick</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 418908189,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1706643826
    },
    {
        "content": "<p>if you're just looking for two numbers that are accurate relative to each other (rather than asking for the current UNIX timestamp) then <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.monoMsNow#doc\">docs#IO.monoMsNow</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.monoNanosNow#doc\">docs#IO.monoNanosNow</a> should work</p>",
        "id": 418909536,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1706644352
    },
    {
        "content": "<p>Thanks! It almost works.</p>\n<p>I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myTimeIt</span> <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoMsNow</span><span class=\"bp\">;</span>\n    <span class=\"n\">act</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">t'</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoMsNow</span><span class=\"bp\">;</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"n\">t</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"n\">TypeLean</span> <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 418911020,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1706644968
    },
    {
        "content": "<p>You wrote nat, but mean Nat</p>",
        "id": 418911674,
        "sender_full_name": "Julian Berman",
        "timestamp": 1706645219
    },
    {
        "content": "<p>Ohh, I see. Thanks for the quick response, everyone. My code is now this, and it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myTimeIt</span> <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoMsNow</span><span class=\"bp\">;</span>\n    <span class=\"n\">act</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">t'</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoMsNow</span><span class=\"bp\">;</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 418911860,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1706645293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130290\">Agnishom Chattopadhyay</span> has marked this topic as resolved.</p>",
        "id": 418911890,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706645307
    }
]