[
    {
        "content": "<p>It doesn't seem like the notation <code>∑ x in s, f x</code> is available when <code>s</code> is a <code>Multiset</code>. Can one expect this to be added in the near future?</p>",
        "id": 440526867,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716562844
    },
    {
        "content": "<p>I don't expect it</p>",
        "id": 440529528,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716563870
    },
    {
        "content": "<p>Is there a fundamental limitation on how bigoperators work for that to be the case?</p>",
        "id": 440588563,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1716591702
    },
    {
        "content": "<p>There is no limitation, most frontend things of this sort that you could imagine are almost surely possible in Lean with a bit of work. Its only that getting these things right (writing custom elaborators and delaborators) takes some skills and many users tend not to make this sort of customization so the rate of additions of this nature is lower.</p>",
        "id": 440597054,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1716600164
    },
    {
        "content": "<p>So if I really need that kind of feature, I can try doing it myself and perhaps making a pull request once it's sufficiently polished?</p>",
        "id": 440619957,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716626355
    },
    {
        "content": "<p>Yeah sure. My two cents is that it will be moderately hard to get the notation to work without breaking the existing uses.</p>",
        "id": 440620029,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716626421
    },
    {
        "content": "<p>I should however ask: Why do you need to consider sums indexed by a multiset? This is a bit pathological</p>",
        "id": 440620043,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716626455
    },
    {
        "content": "<p>I am trying to formalize some results in combinatorial designs. There, the blocks form a multiset. A lot of the arguments make use of sums over multisets.</p>",
        "id": 440620073,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716626494
    },
    {
        "content": "<p>Are they sums <em>of</em> a multiset or <em>indexed by</em> a multiset?</p>",
        "id": 440620120,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716626528
    },
    {
        "content": "<p>The proof I was looking at does require a sum indexed by elements of the blocks (a multiset).</p>",
        "id": 440620211,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716626657
    },
    {
        "content": "<p><del>So <code>∑ x ∈ s, f x</code> does not do what you want</del> You edited your message</p>",
        "id": 440620227,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716626691
    },
    {
        "content": "<p>Mind showing the proof?</p>",
        "id": 440620243,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716626714
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/1sYMqX4dj5yxLFTydaWndQW0/Screenshot-2024-05-25-at-4.45.46AM.png\">Screenshot-2024-05-25-at-4.45.46AM.png</a><br>\nFrom Combinatorial Designs by Doug Stinson.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/1sYMqX4dj5yxLFTydaWndQW0/Screenshot-2024-05-25-at-4.45.46AM.png\" title=\"Screenshot-2024-05-25-at-4.45.46AM.png\"><img src=\"/user_uploads/3121/1sYMqX4dj5yxLFTydaWndQW0/Screenshot-2024-05-25-at-4.45.46AM.png\"></a></div>",
        "id": 440620312,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716626776
    },
    {
        "content": "<p>It doesn't explicitly use such sums. But my attempt at formalizing the argument leads to such sums.</p>",
        "id": 440620331,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716626806
    },
    {
        "content": "<p>In any case, I am kind of stuck because I need the equivalent of <code>Finset.sum_comm</code> for <code>Multiset</code>. But that doesn't seem to exist.</p>",
        "id": 440620353,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716626834
    },
    {
        "content": "<p>Are you aware of <a href=\"https://tqft.net/mathlib4files/Combinatorics/Enumerative/DoubleCounting\">file#Combinatorics/Enumerative/DoubleCounting</a> ?</p>",
        "id": 440620369,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716626875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"397075\">Kevin Cheung</span> <a href=\"#narrow/stream/113489-new-members/topic/BigOperators.20for.20Multiset.3F/near/440620312\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/3121/1sYMqX4dj5yxLFTydaWndQW0/Screenshot-2024-05-25-at-4.45.46AM.png\">Screenshot-2024-05-25-at-4.45.46AM.png</a><br>\nFrom Combinatorial Designs by Doug Stinson.</p>\n</blockquote>\n<p>And do you have a Lean statement I can look at?</p>",
        "id": 440620418,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716626908
    },
    {
        "content": "<p>This is a very preliminary version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">BigOperators</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">BigOperators</span><span class=\"bp\">.</span><span class=\"n\">Fin</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Design</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DecidableEq</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">points</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"w\">  </span><span class=\"n\">blocks</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Multiset</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">//</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">⊆</span><span class=\"w\"> </span><span class=\"n\">points</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">BIBD</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DecidableEq</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">lambda</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">extends</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">Design</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">incomplete</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"n\">k</span>\n<span class=\"w\">  </span><span class=\"n\">nontrivial</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">≥</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">  </span><span class=\"n\">points_count</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">points</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">v</span>\n<span class=\"w\">  </span><span class=\"n\">block_size</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">k</span>\n<span class=\"w\">  </span><span class=\"n\">balance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"bp\">.</span><span class=\"n\">countP</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">lambda</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">thm_1_8</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DecidableEq</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">BIBD</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">lambda</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">points</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">blocks</span><span class=\"bp\">.</span><span class=\"n\">countP</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">lambda</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I hope things are correct so far.</p>",
        "id": 440620520,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716627055
    },
    {
        "content": "<p>Unrelated to the rest of the discussion, but surely you want <code>structure Design (α : Type*) [DecidableEq α] where</code></p>",
        "id": 440620559,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716627104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/BigOperators.20for.20Multiset.3F/near/440620369\">said</a>:</p>\n<blockquote>\n<p>Are you aware of <a href=\"https://tqft.net/mathlib4files/Combinatorics/Enumerative/DoubleCounting\">file#Combinatorics/Enumerative/DoubleCounting</a> ?</p>\n</blockquote>\n<p>I'm not aware. Do you suggest to somehow formulate blocks as some sort of <code>FinType</code> instead of <code>Multiset</code>?</p>",
        "id": 440620823,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716627366
    },
    {
        "content": "<p>Unclear to me so far, but I think you will suffer a lot with those multisets. The fundamental issue with multisets is that if you have a function <code>f : α → β</code> then you can't send two copies of the same element <code>a : α</code> in <code>m : Multiset α</code> to different elements in <code>β</code></p>",
        "id": 440620917,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716627485
    },
    {
        "content": "<p>I see.</p>",
        "id": 440620941,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716627532
    },
    {
        "content": "<p>Perhaps I need to go the route of an incidence matrix of a BIBD.</p>",
        "id": 440620956,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716627566
    },
    {
        "content": "<p>Hmm. Maybe I want to define blocks as a <code>Finset</code> of functions that map from a finite set to subsets of the points.</p>",
        "id": 440621257,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716627847
    },
    {
        "content": "<p>Looks like using Multsets is going to be a dead end. I will need to talk to my design colleague and see what's the best way to go about this.</p>",
        "id": 440621503,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716628162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"397075\">Kevin Cheung</span> <a href=\"#narrow/stream/113489-new-members/topic/BigOperators.20for.20Multiset.3F/near/440621257\">said</a>:</p>\n<blockquote>\n<p>Hmm. Maybe I want to define blocks as a <code>Finset</code> of functions that map from a finite set to subsets of the points.</p>\n</blockquote>\n<p>Yes, that's my first thought as well</p>",
        "id": 440628811,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716635973
    }
]