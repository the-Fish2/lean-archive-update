[
    {
        "content": "<p>How should I prove the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ofNat</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">ofNat</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">ofNat</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">ofNat</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">ofNat</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 436593220,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714608394
    },
    {
        "content": "<p><code>exact h</code></p>",
        "id": 436593299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714608442
    },
    {
        "content": "<p>Nope :(</p>",
        "id": 436593324,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714608462
    },
    {
        "content": "<p><code>ofNat</code> is <code>Int.ofNat</code></p>",
        "id": 436593328,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714608466
    },
    {
        "content": "<p>Let me edit</p>",
        "id": 436593333,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714608470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/113489-new-members/topic/Lifting.20Nat.20lemmas.20to.20Int/near/436593328\">said</a>:</p>\n<blockquote>\n<p><code>ofNat</code> is <code>Int.ofNat</code></p>\n</blockquote>\n<p>The preferred spelling is <code>Nat.cast</code></p>",
        "id": 436593402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714608502
    },
    {
        "content": "<p>I got this from <code>cases</code> on an Int :(</p>",
        "id": 436593425,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714608520
    },
    {
        "content": "<p>Well that was your first mistake :)</p>",
        "id": 436593452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714608536
    },
    {
        "content": "<p><code>obtain ⟨n, rfl | rfl⟩ := z.eq_nat_or_neg</code> is usually a better choice</p>",
        "id": 436593530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714608594
    },
    {
        "content": "<p>Lmao. How should I prove the following then? Or at least the first steps I guess</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lt_div_mul_add_pos</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nth_rw</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.div_add_mod'</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_add_div</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">add_rotate</span><span class=\"o\">]</span>\n  <span class=\"n\">nth_rw</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.div_add_mod'</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_lt_add_right</span> <span class=\"bp\">$</span> <span class=\"n\">Nat.lt_add_left</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">Nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"n\">hb</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span>\n</code></pre></div>",
        "id": 436593535,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714608596
    },
    {
        "content": "<p>Ohh okay I will try</p>",
        "id": 436593597,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714608605
    },
    {
        "content": "<p>Ahha so I use that to get <code>Nat.cast</code>, from which <code>norm_cast</code> can simplify all of that away</p>",
        "id": 436593863,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714608834
    },
    {
        "content": "<p>amazing</p>",
        "id": 436593864,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714608835
    },
    {
        "content": "<p>Any hint on closing this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Int.mul_add_div</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 436596380,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714610674
    },
    {
        "content": "<p>It seems the <code>Int</code> part is missing a ton of lemmas from <code>Nat</code>, and I can't prove them even with the entire Mathlib. Or is it my skill issue</p>",
        "id": 436596425,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714610707
    },
    {
        "content": "<p>Assuming you are using the division from <code>Data.Int.Basic</code>, this is not true due to rounding, right?</p>",
        "id": 436601145,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1714614454
    },
    {
        "content": "<p>Why?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Int.mul_add_div</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span> <span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">:={</span><span class=\"n\">numInst</span><span class=\"o\">:=</span><span class=\"mi\">1000</span><span class=\"o\">,</span><span class=\"n\">maxSize</span><span class=\"o\">:=</span><span class=\"mi\">1000</span><span class=\"o\">})</span> <span class=\"c\">/-</span><span class=\"cm\"> passes -/</span>\n</code></pre></div>",
        "id": 436601217,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714614500
    },
    {
        "content": "<p>If <code>m</code> stays the same, <code>a -&gt; a / m</code> rounds the same way</p>",
        "id": 436601238,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714614524
    },
    {
        "content": "<p>If that's what you mean</p>",
        "id": 436601242,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714614527
    },
    {
        "content": "<p>I think</p>",
        "id": 436601247,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714614533
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Int.fdiv_eq_floor</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Int.fdiv</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">⌋</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases'</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">b</span>\n  <span class=\"bp\">·</span> <span class=\"n\">cases'</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fdiv</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">div_nonneg</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_cast</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">omega</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ofNat_floor_eq_floor</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.cast_add</span><span class=\"o\">,</span>\n      <span class=\"n\">Nat.floor_div_eq_div</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_cast</span>\n  <span class=\"bp\">·</span> <span class=\"n\">cases'</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fdiv</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">negSucc_eq</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">neg_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">neg_add</span><span class=\"o\">,</span> <span class=\"n\">div_neg</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_iff_eq_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">floor_add_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I am now stuck on this. <code>Int</code> is painful...</p>",
        "id": 436602723,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714615588
    },
    {
        "content": "<p>Like <code>fdiv</code> is defined in core Lean (?) but never used again</p>",
        "id": 436602776,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714615623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/113489-new-members/topic/Lifting.20Nat.20lemmas.20to.20Int/near/436601238\">said</a>:</p>\n<blockquote>\n<p>If <code>m</code> stays the same, <code>a -&gt; a / m</code> rounds the same way</p>\n</blockquote>\n<p>Ah I see, sorry!</p>",
        "id": 436602817,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1714615656
    },
    {
        "content": "<p>Okay I got <code>mul_add_div</code> down:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Int.mul_add_div</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_mul_ediv_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 436603790,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714616332
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/commit/9ccf392be03aa7b3b80c9e5b2c5e24272d36ee27#diff-efd89f01e8fa474be03044698b70ca62e27ffaddc9440e5570fe97daaf5cbc70R132\">https://github.com/leanprover/std4/commit/9ccf392be03aa7b3b80c9e5b2c5e24272d36ee27#diff-efd89f01e8fa474be03044698b70ca62e27ffaddc9440e5570fe97daaf5cbc70R132</a> there's no way I can figure this out myself</p>",
        "id": 436603802,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714616347
    }
]