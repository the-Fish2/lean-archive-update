[
    {
        "content": "<p>Say I have a tree with variadic children:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">leaf</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>The <code>induction</code> tactic does not work with <code>Tree</code> because it's a nested inductive type. Is there a way to \"manually\" construct the induction principle for <code>Tree</code>, in such a way that it works with the <code>induction</code> tactic? (Are there any good examples of this or something similar in Mathlib?)</p>",
        "id": 437905021,
        "sender_full_name": "Will Crichton",
        "timestamp": 1715299551
    },
    {
        "content": "<p>Ok I managed to write an example. If this is my induction principle:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Tree.induction_principle</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_leaf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">leaf</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_node</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">ts</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">x</span> <span class=\"n\">ts</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">t</span>\n  <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Tree.rec</span> <span class=\"n\">α</span>\n    <span class=\"n\">p</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ts</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">ts</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"n\">h_leaf</span>\n    <span class=\"n\">h_node</span>\n    <span class=\"o\">(</span><span class=\"n\">List.forall_mem_nil</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h_head</span> <span class=\"n\">h_tail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.forall_mem_cons.mpr</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"n\">h_head</span> <span class=\"n\">h_tail</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Can I integrate this with the tactic system?</p>",
        "id": 437907230,
        "sender_full_name": "Will Crichton",
        "timestamp": 1715301225
    },
    {
        "content": "<p>Yes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">induction_eliminator</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Tree.induction_principle</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">leaf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">leaf</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">ts</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">x</span> <span class=\"n\">ts</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">t</span>\n  <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Tree.rec</span> <span class=\"n\">α</span>\n    <span class=\"n\">p</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ts</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">ts</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"n\">leaf</span>\n    <span class=\"n\">node</span>\n    <span class=\"o\">(</span><span class=\"n\">List.forall_mem_nil</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h_head</span> <span class=\"n\">h_tail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.forall_mem_cons.mpr</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"n\">h_head</span> <span class=\"n\">h_tail</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">x</span> <span class=\"n\">ts</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 437926451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715318869
    },
    {
        "content": "<p>Incredible. And it works with <code>generalizing</code>! Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> .</p>",
        "id": 437926949,
        "sender_full_name": "Will Crichton",
        "timestamp": 1715319291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"625391\">Will Crichton</span> has marked this topic as resolved.</p>",
        "id": 437926956,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715319296
    }
]