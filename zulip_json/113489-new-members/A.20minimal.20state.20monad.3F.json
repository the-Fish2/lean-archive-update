[
    {
        "content": "<p>Hi all,</p>\n<p>I am trying to write minimal versions of some of the examples from FPiL, and this is an attempt to build a minimal state monad without using the monad transformers from <a href=\"https://lean-lang.org/functional_programming_in_lean/monad-transformers/transformers.html#state\">this section</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">universe</span><span class=\"w\"> </span><span class=\"n\">u</span>\n<span class=\"kn\">universe</span><span class=\"w\"> </span><span class=\"n\">v</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\">   </span><span class=\"c1\">-- \"S\" stands for both \"State\" and \"String\"</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Monad</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\">                    </span><span class=\"c1\">-- or just: bind sa f := ...</span>\n<span class=\"w\">  </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"s2\">\"\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"bp\">⟩</span>\n<span class=\"w\">  </span><span class=\"n\">bind</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"w\">       </span><span class=\"o\">(</span><span class=\"n\">sa</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">sa</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\">     </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">sa</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n<span class=\"w\">    </span><span class=\"bp\">⟨</span><span class=\"n\">state</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\">                   </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\">   </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\">   </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n</code></pre></div>\n<p>Now how do I add \"get\" and \"set\" methods to S? In theory it should be possible to do that either by making S an instance of MonadState or by making S an instance of a new class with methods \"get\" and \"set\"... the answer should be trivial, but I can't get the syntax right... <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 446269145,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719060152
    },
    {
        "content": "<p>What you have there is not a state monad, the state monad with a string as state is defined through <code>def S (a : Type) : Type := String -&gt; Prod String a</code>, you are missing the input string parameter.</p>",
        "id": 446269729,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719060679
    },
    {
        "content": "<p>Fixed - but now both <code>instance : Monad S where</code> and <code>instance : Monad (S α) where</code> give errors. Try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">universe</span><span class=\"w\"> </span><span class=\"n\">u</span>\n<span class=\"kn\">universe</span><span class=\"w\"> </span><span class=\"n\">v</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\">   </span><span class=\"c1\">-- \"S\" stands for both \"State\" and \"String\"</span>\n\n<span class=\"c1\">-- instance : Monad S where      -- invalid fields and constructors</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Monad</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\">     </span><span class=\"c1\">-- application type mismatch</span>\n<span class=\"w\">  </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"s2\">\"\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"bp\">⟩</span>\n<span class=\"w\">  </span><span class=\"n\">bind</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\">     </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n<span class=\"w\">    </span><span class=\"bp\">⟨</span><span class=\"n\">state</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\">                   </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\">   </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\">   </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n</code></pre></div>",
        "id": 446270653,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719061365
    },
    {
        "content": "<p>it needs to be <code>instance : Monad S</code> and you need to put a bit more effort into writing your <code>pure</code> and <code>bind</code> than what you currently have</p>",
        "id": 446270717,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719061441
    },
    {
        "content": "<p>I'll try! Thanks! =)</p>",
        "id": 446270847,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719061521
    }
]