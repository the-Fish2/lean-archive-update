[
    {
        "content": "<p>Hei,<br>\nI'm experimenting with the file '02iff.lean' from GlimpseOfLean in Visual Studio Code.<br>\nThere is the context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span>\n<span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">q</span>\n<span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"n\">hp</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span>\n</code></pre></div>\n<p>and the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"n\">r</span>\n</code></pre></div>\n<p>From this state, the command <code>have hz : 0 = 0</code> leads to the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>However, from the same state, the command <code>have hq : q</code> leads to the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"n\">sorryAx</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">27373</span><span class=\"w\"> </span><span class=\"n\">true</span>\n</code></pre></div>\n<p>I'd rather expect a goal like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"n\">q</span>\n</code></pre></div>\n<p>Why does this goal show up? What does it mean? Is there a way to get a more appropriate goal?</p>",
        "id": 442556504,
        "sender_full_name": "grianneau",
        "timestamp": 1717514614
    },
    {
        "content": "<p>For me, <code>have hq : q</code> results in a new goal <code>⊢ q</code> as expected. Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 442563744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717516329
    },
    {
        "content": "<p>Thank your for your message. By trying to make a mwe I found a way to get <code>⊢ q</code>!<br>\nA non-working example is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">GlimpseOfLean</span><span class=\"bp\">.</span><span class=\"n\">Library</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Now prove the following simple statement in propositional logic.</span>\n<span class=\"cm\">Note that `p → q → r` means `p → (q → r)`. -/</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"n\">hp</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hq</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">q</span>\n<span class=\"w\">    </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">h2</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>with the cursor just at the end of the line <code>have hq : q</code>. It displays <code>⊢ sorryAx ?m.24369 true</code>.</p>\n<p>When I remove the indentation of <code>apply h2</code> it displays as expected.</p>",
        "id": 442570859,
        "sender_full_name": "grianneau",
        "timestamp": 1717518054
    },
    {
        "content": "<p>Aah. I always tell my students to put their cursor at the beginning of the line, not the end. I agree that cursors at the end of the line can produce pretty crazy messages :-)</p>",
        "id": 442572749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717518571
    },
    {
        "content": "<p>I am sorry, this conversation reveals that GlimpseOfLean uses a syntax for <code>have</code> that is now deprecated, partly because it leads to this kind of confusion. I will fix this so that other users don’t meet that issue.</p>",
        "id": 442572979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717518627
    },
    {
        "content": "<p>I have a very hard time knowing whether people use this tutorial. We don’t get many questions about it here (or at least I don’t see them) so it is not active maintained.</p>",
        "id": 442573129,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717518682
    },
    {
        "content": "<p>If I put the cursor at the beginning of <code>have hq : q</code> the goal remains <code>⊢ r</code>.<br>\nIf I put it at the beginning of <code>apply h2</code> it still displays <code>⊢ sorryAx ?m.24369 true</code>.</p>",
        "id": 442575733,
        "sender_full_name": "grianneau",
        "timestamp": 1717519428
    },
    {
        "content": "<p>If you delete the indented <code>apply</code> line then you get <code>⊢ q</code> on the next line. I totally agree that this is confusing, I have no idea what's going on here.</p>",
        "id": 442585056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717522175
    },
    {
        "content": "<p>It's reading <code>have hq : q apply h2</code></p>",
        "id": 442585756,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717522366
    },
    {
        "content": "<p>Thank you! I understand a little bit better now. I'm not stuck anymore!</p>",
        "id": 442588990,
        "sender_full_name": "grianneau",
        "timestamp": 1717523316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/mysterious.20.60sorryAx.20.3Fm.2E27373.20true.60/near/442585756\">said</a>:</p>\n<blockquote>\n<p>It's reading <code>have hq : q apply h2</code></p>\n</blockquote>\n<p>Why? I have no understanding of all this whitespace stuff. Or is this something to do with the parser for <code>have</code>?</p>",
        "id": 442589185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717523387
    },
    {
        "content": "<p>(as far as I can tell) If you indent the next line, it reads as a continuation of the previous line</p>",
        "id": 442590350,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717523712
    },
    {
        "content": "<p>One could use <code>:= by</code> and then the <code>by</code> causes it to expect an indented block, or use <code>·</code> below the <code>have</code></p>",
        "id": 442590509,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717523757
    },
    {
        "content": "<p>In your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> there's a red squiggle under <code>q</code>. A rule of thumb is that if there are any red squiggles on terms, then you shouldn't try to interpret the goal state, since you have a more immediate error.</p>\n<p>The error on <code>q</code> is \"function expected at <code>q</code>, term has type <code>Prop</code>\". It's not the most informative message, but it's hinting that the way it's parsing, <code>q</code> somehow thinks it has additional arguments.</p>",
        "id": 442591561,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717524040
    },
    {
        "content": "<p>Without the mathlib <code>have</code> extension, the error message is a bit better, but still fairly subtle. You get <code>unexpected token '}'; expected '|'</code> at the end of of the <code>apply h2</code> line, and at the end of the <code>have</code> line the goal state appears to be</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span>\n<span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">q</span>\n<span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"n\">hp</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span>\n<span class=\"n\">hq</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">sorryAx</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">Sort</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">473</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">true</span>\n<span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"n\">r</span>\n</code></pre></div>",
        "id": 442594102,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717524818
    },
    {
        "content": "<p>I bumped GlimpseOfLean to current Lean and Mathlib. It no longer has the dangerous syntax for <code>have</code>.</p>",
        "id": 442643998,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717540282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326083\">grianneau</span> has marked this topic as resolved.</p>",
        "id": 442726403,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717576537
    }
]