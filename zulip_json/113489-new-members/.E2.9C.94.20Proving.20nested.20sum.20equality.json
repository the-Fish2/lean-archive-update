[
    {
        "content": "<p>I need to prove the following theorem which is informally trivial, but it took me an embarrassingly long time to write, the proof is quite long and it also takes quite a while to compile. Is there a more straightforward way to do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span>\n<span class=\"k\">in</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">kl</span> <span class=\"k\">in</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">kl.fst</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">kl.snd</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n    <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">refl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n      <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n      <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_partition</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">sum_nbij</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">κ</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">Quotient.mk''</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">k</span> <span class=\"n\">kRange</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_image</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">mem_range</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">kRange</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Setoid.r</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">_</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Setoid.r</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Setoid.r</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">xlt</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">quot_eq</span>\n    <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xlt</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">quot_eq</span><span class=\"o\">,</span> <span class=\"n\">Setoid.r</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">k</span> <span class=\"n\">kRange</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sum_nbij</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">⟩)</span>\n    <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">l</span> <span class=\"n\">lRange</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_range</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"bp\">.</span> <span class=\"n\">omega</span>\n      <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Quotient.mk</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Quotient.mk''</span><span class=\"o\">,</span> <span class=\"n\">Quotient.eq''</span><span class=\"o\">]</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Setoid.r</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">_</span>\n      <span class=\"n\">simp</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">⟩</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">mle</span> <span class=\"n\">quot_eq</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Quotient.mk</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Quotient.mk''</span><span class=\"o\">,</span> <span class=\"n\">Quotient.eq''</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">quot_eq</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Setoid.r</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">quot_eq</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">quot_eq</span><span class=\"o\">]</span>\n      <span class=\"n\">omega</span>\n    <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">l</span> <span class=\"n\">_</span>\n      <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 438219910,
        "sender_full_name": "Tainnor",
        "timestamp": 1715556837
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">kl</span> <span class=\"k\">in</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">kl.fst</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">kl.snd</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">sum_finset_product'</span> <span class=\"bp\">..</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">mem_product</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"o\">]</span>\n  <span class=\"n\">omega</span>\n</code></pre></div>\n<p>works</p>",
        "id": 438232263,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715568380
    },
    {
        "content": "<p>Thanks, that seems to help. I didn't find that theorem somehow, even though I was looking quite a bit...</p>",
        "id": 438237380,
        "sender_full_name": "Tainnor",
        "timestamp": 1715571768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"685366\">Tainnor</span> has marked this topic as resolved.</p>",
        "id": 438237382,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715571771
    }
]