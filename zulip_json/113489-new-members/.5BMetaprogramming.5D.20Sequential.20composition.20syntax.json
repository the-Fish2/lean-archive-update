[
    {
        "content": "<p>I'd like to implement a new operator for sequential composition of program specifications.<br>\nIt's written as <code>S ; R</code> where <code>S</code> and <code>R</code> are boolean expressions representing specifications.</p>\n<p>Both <code>S</code> and <code>R</code> can use variables with pre-state <code>σ</code> and post-state <code>σ'</code> values.<br>\nThe sequential composition is defined as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">S</span> <span class=\"bp\">;</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"bp\">∃</span> <span class=\"n\">σ''</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">σ'</span> <span class=\"bp\">↦</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">σ''</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">σ</span> <span class=\"bp\">↦</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">σ''</span>\n      <span class=\"bp\">=</span> <span class=\"bp\">∃</span> <span class=\"n\">x''</span> <span class=\"n\">y''</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span> <span class=\"bp\">↦</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x''</span> <span class=\"n\">y''</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">x''</span> <span class=\"n\">y''</span>\n</code></pre></div>\n<p>Essentially, it checks if there exist intermediate state <code>σ''</code> such that both <code>S</code> and <code>R</code> hold after substituting these intermediate states for their respective variables in <code>S</code> and <code>R</code>.</p>\n<p>For example, if <code>x</code> and <code>y</code> are variables of <code>S</code> and <code>R</code>, then <code>S ; R</code> should be rewritten as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∃</span> <span class=\"n\">x''</span> <span class=\"n\">y''</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">x''</span><span class=\"o\">,</span> <span class=\"n\">y''</span> <span class=\"n\">for</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">y'</span> <span class=\"k\">in</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">x''</span><span class=\"o\">,</span> <span class=\"n\">y''</span> <span class=\"n\">for</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I've been exploring using macros to achieve this, but I'm stuck on how to rename variable names inside the terms <code>S</code> and <code>R</code>.<br>\nAny suggestions or guidance would be greatly appreciated!</p>",
        "id": 424809700,
        "sender_full_name": "Vlad",
        "timestamp": 1709623592
    }
]