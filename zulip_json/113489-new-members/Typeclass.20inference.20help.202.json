[
    {
        "content": "<p>Is it possible to make the following work automatically for all <code>IsMultiplicative</code> functions? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.VonMangoldt</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Finset</span> <span class=\"n\">BigOperators</span> <span class=\"n\">ArithmeticFunction</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">IsMultiplicative</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hf.map_one</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">invertibleOne</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">only_if_invertible</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Use ζ -/</span>\n  <span class=\"n\">apply</span> <span class=\"n\">only_if_invertible</span> <span class=\"n\">f</span> <span class=\"c\">/-</span><span class=\"cm\"> fails to synthesize Invertible (f 1) -/</span>\n</code></pre></div>\n<p>The idea is I want <code>[Invertible (f 1)]</code> to be inferred automatically (when possible, i.e. when <code>f</code> is multiplicative). This is because I am defining <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>, which is only defined when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>∈</mo><msup><mi>R</mi><mo lspace=\"0em\" rspace=\"0em\">×</mo></msup></mrow><annotation encoding=\"application/x-tex\">f(1) \\in R^{\\times}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">×</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 426017403,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710195199
    },
    {
        "content": "<p>Sorry if the example is not really clear, I can dump my full code when I'm done, so give me an hour or something.</p>",
        "id": 426017701,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710195324
    },
    {
        "content": "<p>In short I have a definition<br>\n<code>def mkUnit (f : ArithmeticFunction R) [Invertible (f 1)] : (ArithmeticFunction R)ˣ := ⟨f, f.inv, f.mul_inv, f.inv_mul⟩</code></p>",
        "id": 426017794,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710195359
    },
    {
        "content": "<p>You can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Use ζ -/</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">only_if_invertible</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>to make <code>Invertible (f 1)</code> an explicit goal.</p>",
        "id": 426023812,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710197881
    },
    {
        "content": "<p>Yeah I was trying to let the typeclass system infer it automatically, but I'll leave that aside for now.</p>",
        "id": 426023969,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710197943
    },
    {
        "content": "<p>(deleted - I misread)</p>",
        "id": 426024016,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710197965
    },
    {
        "content": "<p>Oh I might have typo'ed as well...</p>",
        "id": 426024142,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710198006
    },
    {
        "content": "<p>Okay I came up with a hack (and fixed my mistake). TLDR use <code>[Fact ...]</code> to infer the facts automatically.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">IsMultiplicative</span> <span class=\"n\">f</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hf.out.map_one</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">invertibleOne</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">only_if_invertible</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">IsMultiplicative</span> <span class=\"o\">(</span><span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Fact.mk</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">natCoe_apply</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">isMultiplicative_zeta.right</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_mul</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">only_if_invertible</span> <span class=\"o\">(</span><span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> works now lol? -/</span>\n</code></pre></div>",
        "id": 426025188,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710198528
    },
    {
        "content": "<p>But this is probably not good code</p>",
        "id": 426025200,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710198537
    },
    {
        "content": "<p>I will just put something together then let some Lean expert take a look at it...</p>",
        "id": 426025227,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710198552
    }
]