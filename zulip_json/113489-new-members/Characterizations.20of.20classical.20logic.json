[
    {
        "content": "<p>Hi,</p>\n<p>I'm just starting with Lean. I want to prove the equivalences in Coq'art Exercise 5.7.</p>\n<p>I did this in Coq:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Definition</span> <span class=\"n\">dm_not_and_not</span>\n                   <span class=\"o\">:=</span> <span class=\"k\">forall</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"bp\">~</span><span class=\"o\">(</span><span class=\"bp\">~</span><span class=\"n\">P</span> <span class=\"bp\">/\\</span> <span class=\"bp\">~</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"bp\">\\/</span> <span class=\"n\">Q.</span>\n<span class=\"n\">Definition</span> <span class=\"n\">implies_to_or</span>\n                   <span class=\"o\">:=</span> <span class=\"k\">forall</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">~</span><span class=\"n\">P</span> <span class=\"bp\">\\/</span> <span class=\"n\">Q</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"n\">Lemma</span> <span class=\"n\">dm_implies_to_or</span> <span class=\"o\">:</span> <span class=\"n\">dm_not_and_not</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">implies_to_or.</span>\n<span class=\"n\">Proof.</span>\n  <span class=\"n\">intro</span> <span class=\"n\">Hdm.</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">implies_to_or.</span>\n  <span class=\"n\">intros</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">H.</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Hdm.</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H1.</span>\n  <span class=\"n\">elim</span> <span class=\"n\">H1.</span>\n  <span class=\"n\">intros</span> <span class=\"n\">H2</span> <span class=\"n\">H3.</span>\n  <span class=\"n\">assert</span> <span class=\"n\">P.</span>\n  <span class=\"n\">assert</span> <span class=\"o\">(</span><span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">\\/</span> <span class=\"bp\">~</span><span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n  <span class=\"bp\">-</span> <span class=\"n\">apply</span> <span class=\"n\">Hdm.</span>\n    <span class=\"n\">intro</span> <span class=\"n\">Hx.</span>\n    <span class=\"n\">elim</span> <span class=\"n\">Hx.</span>\n    <span class=\"n\">intros</span> <span class=\"n\">Hy</span> <span class=\"n\">Hz.</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Hz.</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Hy.</span>\n  <span class=\"bp\">-</span> <span class=\"n\">elim</span> <span class=\"n\">hc.</span>\n    <span class=\"n\">trivial.</span>\n    <span class=\"n\">intro</span> <span class=\"n\">H4.</span>\n       <span class=\"n\">elim</span> <span class=\"n\">H2.</span>\n       <span class=\"n\">exact</span> <span class=\"n\">H4.</span>\n  <span class=\"bp\">-</span> <span class=\"n\">apply</span> <span class=\"n\">H3.</span>\n    <span class=\"n\">apply</span> <span class=\"n\">H.</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H0.</span>\n<span class=\"n\">Qed.</span>\n</code></pre></div>\n<p>Now I want prove this in Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">DeMorgan</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ImplDef</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">DeMorgan_ImplDef</span><span class=\"o\">:</span> <span class=\"n\">DeMorgan</span> <span class=\"bp\">→</span> <span class=\"n\">ImplDef</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hDeMorgan</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ImplDef</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hDeMorgan</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span>\n <span class=\"bp\">.....</span>\n</code></pre></div>\n<p>Here I don't know how to finish the proof.<br>\nI tried to have the negation of h1 and then apply absurd, but I could not prove the negation of h1.<br>\nAny hints?</p>",
        "id": 430464548,
        "sender_full_name": "Burkhardt Renz",
        "timestamp": 1711878915
    },
    {
        "content": "<p>what have you tried?</p>",
        "id": 430464683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711879041
    },
    {
        "content": "<p>Hi Mario,<br>\n I have included my attempt in the question</p>",
        "id": 430464965,
        "sender_full_name": "Burkhardt Renz",
        "timestamp": 1711879316
    },
    {
        "content": "<p>the line <code>elim H1. intros H2 H3.</code> is equivalent to <code>let ⟨h2, h3⟩ := h1</code> in lean</p>",
        "id": 430465101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711879443
    },
    {
        "content": "<p>you can also combine it with the previous <code>intro h1</code> line to get <code>intro ⟨h2, h3⟩</code></p>",
        "id": 430465133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711879476
    },
    {
        "content": "<p>(there is no need to rethink the proof strategy if you already have a coq proof; you should be able to mostly line-by-line convert it to a lean proof)</p>",
        "id": 430465175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711879529
    },
    {
        "content": "<p>although your coq proof is overcomplicated; it is possible to prove a contradiction directly from <code>p -&gt; q</code>, <code>¬¬p</code>, <code>¬q</code> without any further use of LEM or de Morgan</p>",
        "id": 430465430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711879766
    },
    {
        "content": "<p>Okay<br>\n<code>¬ q ∧ (p → q)</code> gives   <code>¬ p</code>, a contradiction to <code>¬ ¬ p</code>.</p>\n<p>Can you help me to put this argument backwards from <code>False</code>?</p>",
        "id": 430466203,
        "sender_full_name": "Burkhardt Renz",
        "timestamp": 1711880560
    },
    {
        "content": "<p>you don't have to structure the proof backwards if you don't want to</p>",
        "id": 430466332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711880675
    },
    {
        "content": "<p>but if you do, then since the last step in your sketch is applying <code>¬¬p</code> to <code>¬p</code>, you should start by applying <code>¬¬p</code> to the goal so that you get a <code>¬p</code> subgoal</p>",
        "id": 430466386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711880731
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 430466907,
        "sender_full_name": "Burkhardt Renz",
        "timestamp": 1711881282
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/CharacteriZations.20of.20classical.20logic\">#new members &gt; CharacteriZations of classical logic</a> by <span class=\"user-mention silent\" data-user-id=\"705569\">Burkhardt Renz</span>.</p>",
        "id": 430565770,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711962690
    }
]