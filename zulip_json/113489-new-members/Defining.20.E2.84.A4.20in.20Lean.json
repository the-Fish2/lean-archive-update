[
    {
        "content": "<p>For educational purposes, I aim to define the natural numbers, the integers, and addition in Lean.</p>\n<p>I've defined the natural numbers as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">nat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span>\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I now wish to define the integers as the equivalence classes for the relation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mi>R</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo separator=\"true\">,</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo>⇔</mo><mi>a</mi><mo>+</mo><mi>d</mi><mo>=</mo><mi>b</mi><mo>+</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">(a, b) R(c, d) \\Leftrightarrow a+d=b+c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⇔</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>. With say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">-5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">5</span></span></span></span> representing the class with pairs such as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>6</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>10</mn><mo separator=\"true\">,</mo><mn>15</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1,6),(10,15)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">6</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">10</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">15</span><span class=\"mclose\">)</span></span></span></span>, and similar.</p>\n<p>What would be a succinct way to implement this in Lean?</p>",
        "id": 435284024,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1713998706
    },
    {
        "content": "<p>You could use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quotient#doc\">docs4#Quotient</a>. To do that, first construct an equivalence relation (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equivalence#doc\">docs4#Equivalence</a>) over <code>nat × nat</code>. Then wrap that in a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Setoid#doc\">docs4#Setoid</a>, and define <code>int</code> as the corresponding quotient.</p>",
        "id": 435289236,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1714002431
    },
    {
        "content": "<p>I read somewhere that MLTT doesn't have quotient types? So what's happening here</p>",
        "id": 435298138,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714009762
    },
    {
        "content": "<p>Not without extra axioms it doesn't, but Lean has those. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quot.sound#doc\">docs#Quot.sound</a></p>",
        "id": 435301851,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714013095
    },
    {
        "content": "<p>Jireh this is more than an extra axiom, in the sense that choice is an extra axiom: there is an extra reduction rule.</p>",
        "id": 435301964,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714013194
    },
    {
        "content": "<p>Thanks for the helpful hints!</p>\n<p>This is my current attempt (<a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">nat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span>\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">int_as_nat_pair</span> <span class=\"n\">where</span>\n  <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n  <span class=\"n\">minus</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">int_relation</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">int_as_nat_pair</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">add</span> <span class=\"n\">x.plus</span> <span class=\"n\">y.minus</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">x.minus</span> <span class=\"n\">y.plus</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">is_equivalence_relation</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"n\">int_relation</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"n\">int_setoid</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">int_as_nat_pair</span> <span class=\"n\">where</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">int_relation</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">is_equivalence_relation</span>\n<span class=\"kd\">def</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">int_setoid</span>\n</code></pre></div>\n<p>Does this implementation look correct, aside from the unfinished proof?</p>",
        "id": 435470961,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1714080621
    },
    {
        "content": "<p>Yes, although I would have used the [Add] notation typeclass and used the notation in the definition of the equivalence relation</p>",
        "id": 435487305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714091519
    },
    {
        "content": "<p>Thanks! I'm now using <code>Add</code>.</p>\n<p>This is my current <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">nat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span>\n<span class=\"kd\">def</span> <span class=\"n\">nat.add</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">nat.add</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">int_as_nat_pair</span> <span class=\"n\">where</span>\n  <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n  <span class=\"n\">minus</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">int_relation</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">int_as_nat_pair</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x.plus</span> <span class=\"bp\">+</span> <span class=\"n\">y.minus</span> <span class=\"bp\">=</span> <span class=\"n\">x.minus</span> <span class=\"bp\">+</span> <span class=\"n\">y.plus</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">is_equivalence_relation</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"n\">int_relation</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Equivalence.mk</span>\n  <span class=\"n\">case</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">case</span> <span class=\"n\">symm</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">case</span> <span class=\"n\">trans</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"n\">int_setoid</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">int_as_nat_pair</span> <span class=\"n\">where</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">int_relation</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">is_equivalence_relation</span>\n<span class=\"kd\">def</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">int_setoid</span>\n</code></pre></div>\n<p>I'm not sure how to define <code>int.add</code> and create instances of <code>int</code> such as say <code>int.zero</code> (<code>(0, 0)</code>), <code>int.one</code> (<code>(1, 0)</code>) and <code>int.minus_two</code> (<code>(0, 2)</code>).</p>\n<p>This is what I want to achieve:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">int.add</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">TODO</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">int</span> <span class=\"n\">where</span>\n   <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">int.add</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.zero</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">TODO</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.one</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">TODO</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.minus_two</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">TODO</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">int.one</span> <span class=\"bp\">+</span> <span class=\"n\">int.minus_two</span> <span class=\"bp\">+</span> <span class=\"n\">int.one</span> <span class=\"bp\">=</span> <span class=\"n\">int.zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Any hints?</p>",
        "id": 436787993,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1714689683
    },
    {
        "content": "<p>You're looking for <code>Quotient.mk _</code></p>",
        "id": 436788252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714689852
    },
    {
        "content": "<p>Thank you for the hint!</p>\n<p>I am now utilizing <code>Quotient.mk _</code> to define <code>int.zero</code>, <code>int.one</code>, and others as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">int.zero</span>      <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">int_setoid</span> <span class=\"o\">(</span><span class=\"n\">int_as_nat_pair.mk</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.one</span>       <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">int_setoid</span> <span class=\"o\">(</span><span class=\"n\">int_as_nat_pair.mk</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.two</span>       <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">int_setoid</span> <span class=\"o\">(</span><span class=\"n\">int_as_nat_pair.mk</span> <span class=\"mi\">2</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.minus_one</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">int_setoid</span> <span class=\"o\">(</span><span class=\"n\">int_as_nat_pair.mk</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.minus_two</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">int_setoid</span> <span class=\"o\">(</span><span class=\"n\">int_as_nat_pair.mk</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Here is my definition for <code>int.add</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">int.add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.liftOn₂</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">int_setoid</span> <span class=\"o\">(</span><span class=\"n\">int_as_nat_pair.mk</span> <span class=\"o\">(</span><span class=\"n\">x.plus</span> <span class=\"bp\">+</span> <span class=\"n\">y.plus</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x.minus</span> <span class=\"bp\">+</span> <span class=\"n\">y.minus</span><span class=\"o\">)))</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Does it appear correct?</p>\n<p>The following test cases behave as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">int.zero</span> <span class=\"bp\">=</span> <span class=\"n\">int.zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">int.zero</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">int.zero</span> <span class=\"bp\">+</span> <span class=\"n\">int.zero</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">int.zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">int.one</span> <span class=\"bp\">+</span> <span class=\"n\">int.zero</span> <span class=\"bp\">=</span> <span class=\"n\">int.one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">int.zero</span> <span class=\"bp\">+</span> <span class=\"n\">int.minus_two</span> <span class=\"bp\">=</span> <span class=\"n\">int.minus_two</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">int.minus_two</span> <span class=\"bp\">+</span> <span class=\"n\">int.zero</span> <span class=\"bp\">=</span> <span class=\"n\">int.minus_two</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">int.one</span> <span class=\"bp\">+</span> <span class=\"n\">int.one</span> <span class=\"bp\">=</span> <span class=\"n\">int.two</span> <span class=\"bp\">+</span> <span class=\"n\">int.zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int.zero</span> <span class=\"bp\">+</span> <span class=\"n\">int.zero</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">int.one</span> <span class=\"bp\">=</span> <span class=\"n\">int.one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int.one</span> <span class=\"bp\">+</span> <span class=\"n\">int.zero</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">int.one</span> <span class=\"bp\">=</span> <span class=\"n\">int.two</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int.zero</span> <span class=\"bp\">+</span> <span class=\"n\">int.minus_two</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">int.zero</span> <span class=\"bp\">=</span> <span class=\"n\">int.minus_two</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">int.minus_one</span> <span class=\"bp\">+</span> <span class=\"n\">int.minus_one</span> <span class=\"bp\">=</span> <span class=\"n\">int.minus_two</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int.zero</span> <span class=\"bp\">+</span> <span class=\"n\">int.zero</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">int.minus_two</span> <span class=\"bp\">=</span> <span class=\"n\">int.minus_two</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>However, these two do not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int.one</span> <span class=\"bp\">+</span> <span class=\"n\">int.one</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">int.minus_two</span> <span class=\"bp\">=</span> <span class=\"n\">int.zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int.one</span> <span class=\"bp\">+</span> <span class=\"n\">int.minus_two</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">int.one</span> <span class=\"bp\">=</span> <span class=\"n\">int.zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I am unsure why: these two cases do not seem structurally different from the previous ones. What could be the issue?</p>\n<p>This is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">nat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span>\n<span class=\"kd\">def</span> <span class=\"n\">nat.add</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">nat.add</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">int_as_nat_pair</span> <span class=\"n\">where</span>\n  <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n  <span class=\"n\">minus</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">int_relation</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">int_as_nat_pair</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x.plus</span> <span class=\"bp\">+</span> <span class=\"n\">y.minus</span> <span class=\"bp\">=</span> <span class=\"n\">x.minus</span> <span class=\"bp\">+</span> <span class=\"n\">y.plus</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">int_relation_is_equivalence_relation</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"n\">int_relation</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Equivalence.mk</span>\n  <span class=\"n\">case</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">case</span> <span class=\"n\">symm</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">case</span> <span class=\"n\">trans</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">int_setoid</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">int_as_nat_pair</span> <span class=\"n\">where</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">int_relation</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">int_relation_is_equivalence_relation</span>\n<span class=\"kd\">def</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">int_setoid</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">int.zero</span>      <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">int_setoid</span> <span class=\"o\">(</span><span class=\"n\">int_as_nat_pair.mk</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.one</span>       <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">int_setoid</span> <span class=\"o\">(</span><span class=\"n\">int_as_nat_pair.mk</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.two</span>       <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">int_setoid</span> <span class=\"o\">(</span><span class=\"n\">int_as_nat_pair.mk</span> <span class=\"mi\">2</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.minus_one</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">int_setoid</span> <span class=\"o\">(</span><span class=\"n\">int_as_nat_pair.mk</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.minus_two</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">int_setoid</span> <span class=\"o\">(</span><span class=\"n\">int_as_nat_pair.mk</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">int.add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.liftOn₂</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">int_setoid</span> <span class=\"o\">(</span><span class=\"n\">int_as_nat_pair.mk</span> <span class=\"o\">(</span><span class=\"n\">x.plus</span> <span class=\"bp\">+</span> <span class=\"n\">y.plus</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x.minus</span> <span class=\"bp\">+</span> <span class=\"n\">y.minus</span><span class=\"o\">)))</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">int</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">int.add</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">int.zero</span> <span class=\"bp\">=</span> <span class=\"n\">int.zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">int.zero</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">int.zero</span> <span class=\"bp\">+</span> <span class=\"n\">int.zero</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">int.zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">int.one</span> <span class=\"bp\">+</span> <span class=\"n\">int.zero</span> <span class=\"bp\">=</span> <span class=\"n\">int.one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">int.zero</span> <span class=\"bp\">+</span> <span class=\"n\">int.minus_two</span> <span class=\"bp\">=</span> <span class=\"n\">int.minus_two</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">int.minus_two</span> <span class=\"bp\">+</span> <span class=\"n\">int.zero</span> <span class=\"bp\">=</span> <span class=\"n\">int.minus_two</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">int.one</span> <span class=\"bp\">+</span> <span class=\"n\">int.one</span> <span class=\"bp\">=</span> <span class=\"n\">int.two</span> <span class=\"bp\">+</span> <span class=\"n\">int.zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int.zero</span> <span class=\"bp\">+</span> <span class=\"n\">int.zero</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">int.one</span> <span class=\"bp\">=</span> <span class=\"n\">int.one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int.one</span> <span class=\"bp\">+</span> <span class=\"n\">int.zero</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">int.one</span> <span class=\"bp\">=</span> <span class=\"n\">int.two</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int.zero</span> <span class=\"bp\">+</span> <span class=\"n\">int.minus_two</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">int.zero</span> <span class=\"bp\">=</span> <span class=\"n\">int.minus_two</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">int.minus_one</span> <span class=\"bp\">+</span> <span class=\"n\">int.minus_one</span> <span class=\"bp\">=</span> <span class=\"n\">int.minus_two</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int.zero</span> <span class=\"bp\">+</span> <span class=\"n\">int.zero</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">int.minus_two</span> <span class=\"bp\">=</span> <span class=\"n\">int.minus_two</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int.one</span> <span class=\"bp\">+</span> <span class=\"n\">int.one</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">int.minus_two</span> <span class=\"bp\">=</span> <span class=\"n\">int.zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 436967918,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1714775147
    },
    {
        "content": "<p>I've revisited my implementation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> (as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>×</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N} \\times \\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>), and now I'm obtaining the expected outcomes.</p>\n<p>However, for some of my straightforward <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> proofs that I assumed could be resolved using <code>rfl</code>, I find that I need to use <code>apply Quotient.sound</code> before <code>rfl</code>. I'm puzzled about what distinguishes the cases where only <code>rfl</code> is needed from those where <code>apply Quotient.sound</code> followed by <code>rfl</code> is required. Any suggestions? Am I overlooking any setup step that would enable me to bypass calling <code>apply Quotient.sound</code> even for these scenarios?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- solvable by rfl only</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- solvable by Quotient.sound + rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Quotient.sound</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Quotient.sound</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Quotient.sound</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Quotient.sound</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Full <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- define nat</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">nat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n\n<span class=\"c1\">-- support nat literals</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span> <span class=\"n\">where</span> <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">nat.zero</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span>\n\n<span class=\"c1\">-- support nat add &amp; mul</span>\n<span class=\"kd\">def</span> <span class=\"n\">nat.add</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">n2</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">n2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">nat</span> <span class=\"n\">where</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">nat.add</span>\n<span class=\"kd\">def</span> <span class=\"n\">nat.mul</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">n2</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">n2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n1</span> <span class=\"bp\">+</span> <span class=\"n\">mul</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">nat</span> <span class=\"n\">where</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">nat.mul</span>\n\n<span class=\"c1\">-- define int (nat x nat) as a quotient type</span>\n<span class=\"kd\">def</span> <span class=\"n\">int_pair</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">int_pair_relation</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"o\">:</span> <span class=\"n\">int_pair</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">ab.1</span> <span class=\"bp\">+</span> <span class=\"n\">cd.2</span> <span class=\"bp\">=</span> <span class=\"n\">cd.1</span> <span class=\"bp\">+</span> <span class=\"n\">ab.2</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">int_pair_rel_is_equiv_rel</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"n\">int_pair_relation</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">int_pair_setoid</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">int_pair</span> <span class=\"o\">:=</span> <span class=\"n\">Setoid.mk</span> <span class=\"n\">int_pair_relation</span> <span class=\"n\">int_pair_rel_is_equiv_rel</span>\n<span class=\"kd\">instance</span> <span class=\"n\">int_pair_setoid_instance</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">int_pair</span> <span class=\"o\">:=</span> <span class=\"n\">int_pair_setoid</span>\n<span class=\"kd\">def</span> <span class=\"n\">int</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">int_pair_setoid</span>\n\n<span class=\"c1\">-- support int add, mul &amp; neg</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.add</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"n\">z2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient.liftOn₂</span> <span class=\"n\">z1</span> <span class=\"n\">z2</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">int_pair_setoid</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">y.1</span><span class=\"o\">,</span> <span class=\"n\">x.2</span> <span class=\"bp\">+</span> <span class=\"n\">y.2</span><span class=\"o\">))</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">int</span> <span class=\"n\">where</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">int.add</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.mul</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"n\">z2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient.liftOn₂</span> <span class=\"n\">z1</span> <span class=\"n\">z2</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">int_pair_setoid</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">*</span> <span class=\"n\">y.1</span> <span class=\"bp\">+</span> <span class=\"n\">x.2</span> <span class=\"bp\">*</span> <span class=\"n\">y.2</span><span class=\"o\">,</span> <span class=\"n\">x.1</span> <span class=\"bp\">*</span> <span class=\"n\">y.2</span> <span class=\"bp\">+</span> <span class=\"n\">x.2</span> <span class=\"bp\">*</span> <span class=\"n\">y.1</span><span class=\"o\">))</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">int</span> <span class=\"n\">where</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">int.mul</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.neg</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient.liftOn</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">int_pair_setoid</span> <span class=\"o\">(</span><span class=\"n\">x.2</span><span class=\"o\">,</span> <span class=\"n\">x.1</span><span class=\"o\">))</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"n\">int</span> <span class=\"n\">where</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">int.neg</span>\n\n<span class=\"c1\">-- support int literals</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.zero</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">int_pair_setoid</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.one</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">int_pair_setoid</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">int</span> <span class=\"mi\">0</span> <span class=\"n\">where</span> <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">int.zero</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">int</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"bp\">+</span> <span class=\"n\">int.one</span>\n\n<span class=\"c1\">-- solvable by rfl only</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- solvable by Quotient.sound + rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Quotient.sound</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Quotient.sound</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Quotient.sound</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Quotient.sound</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 437240354,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1714993770
    },
    {
        "content": "<p><code>rfl</code> works when <code>x.plus = y.plus</code> and <code>x.minus = y.minus</code>. <code>Quotient.sound rfl</code> works when  <code>x.plus + y.minus = x.minus + y.plus</code>.</p>",
        "id": 437242271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714994572
    },
    {
        "content": "<p>Ah, now the pattern becomes clear to me. Thank you for pointing it out!</p>\n<p>I'm currently pondering why my custom construction of <code>int</code> necessitates the use of <code>apply Quotient.sound</code>, whereas Lean's native <code>Int</code> construction does not require it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- My custom \"int\"</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Quotient.sound</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- Lean's Int</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Considering the chosen <code>Quotient</code> construction I've employed here, is the use of <code>apply Quotient.sound</code> inevitable, or is there a method to enable Lean to penetrate through the quotient construction and permit <code>rfl</code> to function without the prerequisite of <code>apply Quotient.sound</code>?</p>",
        "id": 437354201,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1715038573
    },
    {
        "content": "<p>I just want to mention a followup exercise you could do, once you've explored this one. The <code>Quotient</code> is there when you don't have a good choice for a quotient type, but quotients are defined using <em>universal properties</em>. If it's possible to choose a type, like for example taking a representative element per equivalence class, then you can use that as the quotient.</p>\n<p>For example, you could use this for your quotient:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">int</span> <span class=\"n\">where</span>\n  <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">int_pair</span>\n  <span class=\"n\">normalized</span> <span class=\"o\">:</span> <span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">p.2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>You would define <code>int.mk : int_pair -&gt; int</code> as a replacement for <code>Quotient.mk</code> by subtracting one from both <code>p.1</code> and <code>p.2</code> so long as <code>normalized</code> is not true. The goal would be to replace each <code>Quotient</code> lemma with one specialized for this <code>int</code>.</p>",
        "id": 437355616,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715039581
    },
    {
        "content": "<p>Regarding your question, if you use the <code>reduce</code> tactic from <code>Mathlib.Tactic.Common</code>, you can see the issue. Put into Quotient syntax, the problem is that the goal is the same as <code>Quotient.mk int_pair_setoid (2, 1) = Quotient.mk int_pair_setoid (1, 0)</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">int_pair_setoid</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">int_pair_setoid</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Quotient.sound</span>\n  <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n  <span class=\"c1\">-- ⊢ 2 + 0 = 1 + 1</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>That is, <code>rfl</code> doesn't succeed without <code>Quotient.sound</code> since <code>(2, 1)</code> is not equal to <code>(1, 0)</code>.</p>",
        "id": 437356169,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715039987
    },
    {
        "content": "<p>This lack of normalization by the way is an issue for computations, since the numbers hidden inside the integers might keep growing without bound.</p>",
        "id": 437356515,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715040186
    },
    {
        "content": "<p>For fun, note that you can use metaprogramming to create a new tactic for doing <code>rfl</code> for <code>int</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"zrfl\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">Quotient.sound</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">zrfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">zrfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">zrfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">zrfl</span>\n</code></pre></div>",
        "id": 437356555,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715040225
    },
    {
        "content": "<p>With your OfNat instance, note that you can write it like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>without need to to refer to fields of an instance obtained via <code>inferInstance</code>. (This is how it's intended to be written.)</p>",
        "id": 437356828,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715040416
    },
    {
        "content": "<p>If you insert an <code>int</code> normalization function in your arithmetic operations you can get the arithmetic to be by <code>rfl</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">int_pair.normalize</span> <span class=\"o\">:</span> <span class=\"n\">int_pair</span> <span class=\"bp\">→</span> <span class=\"n\">int_pair</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">int_pair.normalize</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">int.normalize</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.liftOn</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">int.mk</span> <span class=\"n\">x.normalize</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">int.add</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"n\">z2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">int.normalize</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">Quotient.liftOn₂</span> <span class=\"n\">z1</span> <span class=\"n\">z2</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">int_pair_setoid</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">y.1</span><span class=\"o\">,</span> <span class=\"n\">x.2</span> <span class=\"bp\">+</span> <span class=\"n\">y.2</span><span class=\"o\">))</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>You'll want this for proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">int.normalize_eq</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z.normalize</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 437358226,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715041510
    },
    {
        "content": "<p>The answer to \"why doesn't Lean's <code>Int</code> need to use <code>Quotient.sound</code> is \"Lean's <code>Int</code> was written by computer scientists not mathematicians, and hence is not defined as a quotient\". This makes the API harder to develop but it makes computation more efficient or something</p>",
        "id": 437416464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715075056
    },
    {
        "content": "<p>You don't want to see what <a href=\"https://arxiv.org/pdf/2007.00167\">Int as written by computer scientists</a> looks like</p>",
        "id": 437418523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715075826
    },
    {
        "content": "<p>I meant a different kind of computer scientist</p>",
        "id": 437470021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715093243
    },
    {
        "content": "<p>Applied computer scientist</p>",
        "id": 437475504,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715094926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> There's no harm in defining <code>Int</code> as a Quotient even for computation since you can make your <code>Int.add</code>/<code>Int.mul</code>/etc. evaluate to normal forms, where you're sure that the representative inside the <code>Quotient.mk</code> is such that one of the two numbers is zero.</p>\n<p>Plus, since when have mathematicians insisted on a particular construction for a quotient? Aren't we happy with universal properties and choosing <em>some</em> set that can serve as \"the\" quotient? (I might even argue that <code>Quotient</code> is not the construction mathematicians have in mind when they think about the generic construction of a quotient-by-a-relation. There are no equivalence classes in sight. You could say that what's really going on is that <code>Quotient</code> is what happens if you replace <code>Eq</code> for one type with a coarser relation. That's to say, it's a mechanism to make it so that you can't tell the difference between certain elements anymore, and somehow the original elements are still there. Isak's questions about <code>rfl</code> vs <code>Quotient.sound rfl</code> point toward the fact that the underlying representatives still matter a whole lot.)</p>",
        "id": 437479494,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715096247
    },
    {
        "content": "<p>I'm totally happy with Lean's model of a quotient. I think the model in core is horrible because you end up with this pathological constructor which has no good properties. Making the API for Int like that is like going on a quest starting with a crappy sword. With the quotient definition everything instantly reduces to something which <code>omega</code> can solve and is often just an easy NNG level where you have access to all the Nat API. Whereas checking addition is associative in core involves numerous case splits, some of which use the theory of <code>subNatNat : N -&gt; N -&gt; Z</code> which needs to be developed first, including the fabulous theorem <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.subNatNat_add_negSucc#doc\">docs#Int.subNatNat_add_negSucc</a> . In the quotient approach <code>subNatNat</code> is uncurried into <code>quotient.mk</code> and everything is so much easier.</p>",
        "id": 437503854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715105075
    },
    {
        "content": "<p>Arguably core is forgetting to prove the universal property first. The definition in core \"is\" the quotient, but there's no API that lets you work with it as the quotient. <em>Edit:</em> I see, I missed <code>subNatNat</code>, which is the quotient map from N x N to Z.</p>",
        "id": 437504439,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715105284
    },
    {
        "content": "<p>Oh right, I just remembered that <a href=\"#narrow/stream/113489-new-members/topic/Pattern.20matching.20on.20quotient.20types/near/426896763\">we've had this discussion before</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 437504562,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715105333
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> for your valuable insights and code review. I learned a lot thanks to your feedback!</p>\n<p>After introducing the suggested normalisation to one representative per equivalence class I'm able to solve the trivial theorems using only <code>rfl</code> (without <code>apply Quotient.sound</code>) which is great.</p>\n<p>I think I've now implemented your suggestions with one exception: I'm unable to add the suggested constraint <code>normalized : p.1 = 0 ∨ p.2 = 0</code> on <code>int</code>.</p>\n<p>Here is my current setup:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">int_pair</span> <span class=\"n\">where</span>\n  <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n  <span class=\"n\">minus</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">int_pair_setoid</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">int_pair</span> <span class=\"o\">:=</span> <span class=\"n\">Setoid.mk</span> <span class=\"n\">int_pair_relation</span> <span class=\"n\">int_pair_rel_is_equiv_rel</span>\n<span class=\"kd\">def</span> <span class=\"n\">int</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">int_pair_setoid</span>\n</code></pre></div>\n<p>More specifically, I am unsure about the appropriate location for this constraint within the quotient structure. My understanding is that applying the constraint directly to <code>int_pair</code> would preclude the representation of non-normalized pairs. Would the solution involve creating an additional type <code>int_pair_constrained</code> that encompasses both an <code>int_pair</code> and the imposed constraint? What would be the best way to approach this?</p>\n<p>Current <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- define nat</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n\n<span class=\"c1\">-- support nat literals</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span> <span class=\"n\">where</span> <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">nat.zero</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- support nat add &amp; mul</span>\n<span class=\"kd\">def</span> <span class=\"n\">nat.add</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">n2</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">n2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">nat</span> <span class=\"n\">where</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">nat.add</span>\n<span class=\"kd\">def</span> <span class=\"n\">nat.mul</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">n2</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">n2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n1</span> <span class=\"bp\">+</span> <span class=\"n\">mul</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">nat</span> <span class=\"n\">where</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">nat.mul</span>\n\n<span class=\"c1\">-- define int (nat x nat) as a quotient type</span>\n<span class=\"kd\">structure</span> <span class=\"n\">int_pair</span> <span class=\"n\">where</span>\n  <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n  <span class=\"n\">minus</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">int_pair.normalize</span> <span class=\"o\">:</span> <span class=\"n\">int_pair</span> <span class=\"bp\">→</span> <span class=\"n\">int_pair</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">minus</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">minus</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">minus</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">minus</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">minus</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">int_pair.normalize</span> <span class=\"o\">{</span> <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">minus</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"o\">}</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.plus</span>\n<span class=\"kd\">def</span> <span class=\"n\">int_pair_relation</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"o\">:</span> <span class=\"n\">int_pair</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">ab.plus</span> <span class=\"bp\">+</span> <span class=\"n\">cd.minus</span> <span class=\"bp\">=</span> <span class=\"n\">cd.plus</span> <span class=\"bp\">+</span> <span class=\"n\">ab.minus</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">int_pair_rel_is_equiv_rel</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"n\">int_pair_relation</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">int_pair_setoid</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">int_pair</span> <span class=\"o\">:=</span> <span class=\"n\">Setoid.mk</span> <span class=\"n\">int_pair_relation</span> <span class=\"n\">int_pair_rel_is_equiv_rel</span>\n<span class=\"kd\">instance</span> <span class=\"n\">int_pair_setoid_instance</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">int_pair</span> <span class=\"o\">:=</span> <span class=\"n\">int_pair_setoid</span>\n<span class=\"kd\">def</span> <span class=\"n\">int</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">int_pair_setoid</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.normalize</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.liftOn</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">int_pair_setoid</span> <span class=\"n\">x.normalize</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.mk</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">int_pair</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">int.normalize</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">int_pair_setoid</span> <span class=\"n\">z</span>\n\n<span class=\"c1\">-- support int add, mul &amp; neg</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.add</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"n\">z2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">int.normalize</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Quotient.liftOn₂</span> <span class=\"n\">z1</span> <span class=\"n\">z2</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">int_pair_setoid</span> <span class=\"o\">{</span> <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"n\">x.plus</span> <span class=\"bp\">+</span> <span class=\"n\">y.plus</span><span class=\"o\">,</span> <span class=\"n\">minus</span> <span class=\"o\">:=</span> <span class=\"n\">x.minus</span> <span class=\"bp\">+</span> <span class=\"n\">y.minus</span> <span class=\"o\">})</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">int</span> <span class=\"n\">where</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">int.add</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.mul</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"n\">z2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">int.normalize</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Quotient.liftOn₂</span> <span class=\"n\">z1</span> <span class=\"n\">z2</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">int_pair_setoid</span> <span class=\"o\">{</span> <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"n\">x.plus</span> <span class=\"bp\">*</span> <span class=\"n\">y.plus</span> <span class=\"bp\">+</span> <span class=\"n\">x.minus</span> <span class=\"bp\">*</span> <span class=\"n\">y.minus</span><span class=\"o\">,</span> <span class=\"n\">minus</span> <span class=\"o\">:=</span> <span class=\"n\">x.plus</span> <span class=\"bp\">*</span> <span class=\"n\">y.minus</span> <span class=\"bp\">+</span> <span class=\"n\">x.minus</span> <span class=\"bp\">*</span> <span class=\"n\">y.plus</span> <span class=\"o\">})</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">int</span> <span class=\"n\">where</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">int.mul</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.neg</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">int.normalize</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Quotient.liftOn</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">int_pair_setoid</span> <span class=\"o\">{</span> <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"n\">x.minus</span><span class=\"o\">,</span> <span class=\"n\">minus</span> <span class=\"o\">:=</span> <span class=\"n\">x.plus</span> <span class=\"o\">})</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"n\">int</span> <span class=\"n\">where</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">int.neg</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">int.normalize_eq</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z.normalize</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- support int literals</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.zero</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">int.mk</span> <span class=\"o\">{</span> <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">minus</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">int.one</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">int.mk</span> <span class=\"o\">{</span> <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">minus</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">int</span> <span class=\"mi\">0</span> <span class=\"n\">where</span> <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">int.zero</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">int</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">int.one</span>\n\n<span class=\"c1\">-- now solvable by rfl only (previous solvable by Quotient.sound + rfl)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 437735483,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1715204801
    },
    {
        "content": "<p>The idea is that once you add that normalization field, you can use that type as \"the\" quotient (\"the\" is in quotes because, taking an idea from category theory, a quotient <code>Q</code> of a type <code>A</code> is an type with a map <code>A -&gt; Q</code> that satisfies the universal property of quotients).</p>\n<p>Here's a start. What you'd do is create all the <code>Quotient</code> functions you had been using for the <code>int</code> type. I have <code>int.mk'</code> being the former <code>Quotient.mk</code>, and <code>int.liftOn</code> is the former <code>Quotient.liftOn</code>. Once you have all the basic <code>Quotient</code> functions and theorems defined, this <code>int</code> <em>is</em> a quotient type. (The <code>Quotient</code> type is necessary when you can't choose a normal form. In this version, you do not need to normalize after each operation because normalization occurs within <code>int.mk'</code>.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">int_pair</span> <span class=\"n\">where</span>\n  <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n  <span class=\"n\">minus</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"kd\">structure</span> <span class=\"n\">int</span> <span class=\"n\">where</span>\n  <span class=\"n\">pair</span> <span class=\"o\">:</span> <span class=\"n\">int_pair</span>\n  <span class=\"n\">normalized</span> <span class=\"o\">:</span> <span class=\"n\">pair.plus</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">pair.minus</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">int_pair.normalize</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"o\">:</span> <span class=\"n\">int_pair</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int_pair</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">pair</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">minus</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">minus</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pair</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">minus</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">int_pair.normalize</span> <span class=\"o\">{</span> <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">minus</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">int_pair_relation</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"o\">:</span> <span class=\"n\">int_pair</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">ab.plus</span> <span class=\"bp\">+</span> <span class=\"n\">cd.minus</span> <span class=\"bp\">=</span> <span class=\"n\">cd.plus</span> <span class=\"bp\">+</span> <span class=\"n\">ab.minus</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">int_rel_is_equiv_rel</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"n\">int_pair_relation</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">int_pair.normalize_normalized</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">int_pair</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">p.normalize.plus</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">p.normalize.minus</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">p</span> <span class=\"n\">using</span> <span class=\"n\">int_pair.normalize.induct</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">normalize</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inr</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">normalize</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inl</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">next</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">obtain</span> <span class=\"n\">ih</span> <span class=\"bp\">|</span> <span class=\"n\">ih</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">normalize</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">int.mk'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">int_pair</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">pair</span> <span class=\"o\">:=</span> <span class=\"n\">p.normalize</span><span class=\"o\">,</span> <span class=\"n\">normalized</span> <span class=\"o\">:=</span> <span class=\"n\">p.normalize_normalized</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">int.liftOn</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">int_pair</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"n\">int_pair_relation</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f</span> <span class=\"n\">z.pair</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">int.liftOn_mk'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">int_pair</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">int_pair</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">int.liftOn</span> <span class=\"o\">(</span><span class=\"n\">int.mk'</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 437849107,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715272257
    },
    {
        "content": "<p>To implement <code>rat.normalize</code>, I need <code>nat.gcd</code>. Since I prefer to make everything self-contained for learning purposes, I want to avoid using <code>Nat.gcd</code> if possible.</p>\n<p>Given the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, what would be a suitable minimal implementation of <code>nat.gcd</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">OfNat</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- def nat.gcd (n1 n2 : nat) : nat := ...</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">75</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">25</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 440582696,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1716587897
    },
    {
        "content": "<p>I found the following <code>nat.gcd</code> definition in the <a href=\"https://arxiv.org/abs/2306.15626\">LeanDojo paper (page 5)</a>, and it appears to be taken from <code>data/nat/gcd.lean</code>in Lean 3. I've updated it to what I believe is the corresponding Lean 4 syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">y</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, it seems like I'm missing the code necessary to convince Lean that this recursion will terminate. What am I missing? Did something change between Lean 3 and Lean 4 regarding recursion termination, or is my Lean 3 to Lean 4 port incorrect?</p>\n<p>This is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">-- define nat</span>\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n\n<span class=\"c1\">-- support nat literals</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">OfNat</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Temporarily implement nat.mod by using Nat.mod (to be fixed!).</span>\n<span class=\"c1\">-- Assume nat.mod exists for now.</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">custom_nat_to_nat</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">custom_nat_to_nat</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">nat_to_custom_nat</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat_to_custom_nat</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n1</span><span class=\"w\"> </span><span class=\"n\">n2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">n1_nat</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">custom_nat_to_nat</span><span class=\"w\"> </span><span class=\"n\">n1</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">n2_nat</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">custom_nat_to_nat</span><span class=\"w\"> </span><span class=\"n\">n2</span>\n<span class=\"w\">  </span><span class=\"n\">n1_nat</span><span class=\"w\"> </span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"n\">n2_nat</span><span class=\"w\"> </span><span class=\"bp\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">nat_to_custom_nat</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Mod</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">mod</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">y</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">75</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">25</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 440743777,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1716760732
    },
    {
        "content": "<p>I successfully delayed the need to address this by directing Lean to assume, without verification, that the recursion will terminate (using <code>decreasing_by sorry</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">y</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm still curious about what changes, if any, occurred between Lean 3 and Lean 4 regarding the requirement to prove recursion termination.</p>",
        "id": 440906009,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1716836723
    }
]