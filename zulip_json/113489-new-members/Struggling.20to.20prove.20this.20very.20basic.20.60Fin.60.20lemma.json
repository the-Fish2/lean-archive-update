[
    {
        "content": "<p>Is there a tactic that can resolve something like this right away? (It is true, right?)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">thing</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">20</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_iff_exists_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 409828206,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1703436838
    },
    {
        "content": "<p><code>using 1</code> I think?</p>",
        "id": 409828270,
        "sender_full_name": "Andrea Bourque",
        "timestamp": 1703436893
    },
    {
        "content": "<p>Sorry, <code>use 1</code>, or at least that's how it was in Lean 3</p>",
        "id": 409828287,
        "sender_full_name": "Andrea Bourque",
        "timestamp": 1703436926
    },
    {
        "content": "<p>That doesn't quite work. I thought <code>use</code> was for proving existentials?</p>",
        "id": 409828657,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1703437295
    },
    {
        "content": "<p><code>a &gt;= b</code> means (or is equivalent to) there exists a non-negative <code>c</code> such that <code>a = b+c</code>. <br>\nAnd I was mistaken. It should be something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">hc</span>\n<span class=\"n\">use</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>the first line gives you <code>hc: n = 4 + c</code>, and then the second line makes your goal <code>n-1 = 3 + c</code>. From there you can <code>rw hc</code> and then <code>simp</code>.<br>\nLet me know if that works</p>",
        "id": 409829157,
        "sender_full_name": "Andrea Bourque",
        "timestamp": 1703437695
    },
    {
        "content": "<p>Ugh, looks like I might be mistaken on how <code>cases</code> works in Lean 4. Maybe.</p>",
        "id": 409829265,
        "sender_full_name": "Andrea Bourque",
        "timestamp": 1703437831
    },
    {
        "content": "<p>Looks like it gives a dependent elimination error.</p>",
        "id": 409829566,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1703438187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"482574\">Andrea Bourque</span> <a href=\"#narrow/stream/113489-new-members/topic/Struggling.20to.20prove.20this.20very.20basic.20.60Fin.60.20lemma/near/409829265\">said</a>:</p>\n<blockquote>\n<p>Ugh, looks like I might be mistaken on how <code>cases</code> works in Lean 4. Maybe.</p>\n</blockquote>\n<p><code>cases' h with c hc</code></p>",
        "id": 409829592,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703438232
    },
    {
        "content": "<p>Are you doing the NNG or working in mathlib? The definition of <code>≤</code> is not the same (but of course the two are equivalent).</p>",
        "id": 409829594,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703438236
    },
    {
        "content": "<p>Working in mathlib!</p>",
        "id": 409829607,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1703438268
    },
    {
        "content": "<p><code>cases' h with c hc</code> - This similarly gives a dependent elimination error.</p>",
        "id": 409829694,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1703438363
    },
    {
        "content": "<p>Then you can first of all do <code>rw [le_iff_exists_add] at h</code> to get the version with <code>∃</code></p>",
        "id": 409829760,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703438413
    },
    {
        "content": "<p><code>a ≤ b ↔ ∃ (c : α), b = a + c</code> is true by definition in the NNG, but it is a theorem in mathlib, so <code>cases</code> doesn't work.</p>",
        "id": 409829787,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703438457
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">20</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n\n<span class=\"bp\">▶</span> <span class=\"mi\">331</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"bp\">-</span><span class=\"mi\">331</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.74853</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">m.74854</span>\n</code></pre></div>\n<p>The <code>le_iff_exists_add</code> lemma also does not work. So I guess the answer is no, there is not anything that can resolve this automatically? I was surprised <code>aesop</code> couldn't do it out of the box either.</p>",
        "id": 409830173,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1703438868
    },
    {
        "content": "<p>Can you write a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 409830349,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703439053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462544\">Malcolm Langfield</span> <a href=\"#narrow/stream/113489-new-members/topic/Struggling.20to.20prove.20this.20very.20basic.20.60Fin.60.20lemma/near/409829694\">said</a>:</p>\n<blockquote>\n<p><code>cases' h with c hc</code> - This similarly gives a dependent elimination error.</p>\n</blockquote>\n<p>That comment was just for the syntax.</p>",
        "id": 409830372,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703439091
    },
    {
        "content": "<p>Wait, sorry, <code>n</code> has type <code>Fin 20</code>!</p>",
        "id": 409830570,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703439288
    },
    {
        "content": "<p>Is this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">thing</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">20</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>really what you want?</p>",
        "id": 409830584,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703439310
    },
    {
        "content": "<p>Yes, I mean it doesn't have to be exactly <code>20</code>, but some <code>Fin</code>.</p>",
        "id": 409830598,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1703439331
    },
    {
        "content": "<p>It does say <code>Fin</code> in the title. I edited the OP to give a MWE!</p>",
        "id": 409830609,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1703439348
    },
    {
        "content": "<p>Sorry, my fault.</p>",
        "id": 409830665,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703439369
    },
    {
        "content": "<p>All good all good! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 409830672,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1703439378
    },
    {
        "content": "<p>Then first of all you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.le_iff_val_le_val#doc\">docs#Fin.le_iff_val_le_val</a></p>",
        "id": 409830698,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703439419
    },
    {
        "content": "<p>to get rid of <code>Fin</code></p>",
        "id": 409830705,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703439423
    },
    {
        "content": "<p>Thanks! That gets me to here, and then it looks like I need some sort of <code>val_sub</code> lemma that doesn't exist.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">20</span>\n<span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 409831009,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1703439748
    },
    {
        "content": "<p>And it shouldn't exist, right? I don't think such a lemma would be true when <code>n</code> is <code>0</code>.</p>",
        "id": 409831031,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1703439788
    },
    {
        "content": "<p>Well, it's a little tricky</p>",
        "id": 409831130,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703439915
    },
    {
        "content": "<p>let me see</p>",
        "id": 409831136,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703439922
    },
    {
        "content": "<p>You can do something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">thing</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">20</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">Fin.le_iff_val_le_val</span><span class=\"o\">,</span> <span class=\"n\">le_iff_exists_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">use</span> <span class=\"n\">k</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exfalso</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hk</span>\n    <span class=\"n\">change</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"n\">at</span> <span class=\"n\">hk</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.coe_sub_one</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">h0</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">_</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_assoc</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span>\n      <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 409831723,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703440647
    },
    {
        "content": "<p>It's tricky because you play with subtraction on <code>Fin</code>, that is not very well behaved (what is <code>0 - 1</code>?)</p>",
        "id": 409831979,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703440889
    },
    {
        "content": "<p>How did you end up with such a goal?</p>",
        "id": 409832072,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703440927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Struggling.20to.20prove.20this.20very.20basic.20.60Fin.60.20lemma/near/409831979\">said</a>:</p>\n<blockquote>\n<p>It's tricky because you play with subtraction on <code>Fin</code>, that is not very well behaved (what is <code>0 - 1</code>?)</p>\n</blockquote>\n<p>(I'm a newbie) shouldn't this just be 0 :Fin _ ? Also is it possible to modify the omega tactic to also solve things involving Fin _ ? Like if the type was N, omega would have finished immediately right?</p>",
        "id": 409832377,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1703441168
    },
    {
        "content": "<p>I have gotten here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">k</span>\n\n<span class=\"bp\">▶</span> <span class=\"mi\">342</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"bp\">-</span><span class=\"mi\">342</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">?</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">c</span>\n</code></pre></div>\n<p>But <code>add_sub_assoc'</code> is not working when I believe it should.</p>",
        "id": 409832387,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1703441188
    },
    {
        "content": "<p>I've posted a full proof above.</p>",
        "id": 409832413,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703441230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"662620\">@Andy Jiang</span> <code>0 - 1</code> is <code>19</code> in this case, because we are working in <code>Fin 20</code>.</p>",
        "id": 409832433,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1703441256
    },
    {
        "content": "<p>Oh thanks! I've never seen the <code>change</code> tactic before!</p>",
        "id": 409832492,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1703441287
    },
    {
        "content": "<p>It's possible that a smart use of <code>fin_cases</code> can close the goal immediately, but I think the real point is why you want to prove this.</p>",
        "id": 409832550,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703441394
    },
    {
        "content": "<p>I work with Lean in industry, this came up in a program verification problem.</p>",
        "id": 409832716,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1703441547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462544\">Malcolm Langfield</span> <a href=\"#narrow/stream/113489-new-members/topic/Struggling.20to.20prove.20this.20very.20basic.20.60Fin.60.20lemma/near/409832433\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"662620\">Andy Jiang</span> <code>0 - 1</code> is <code>19</code> in this case, because we are working in <code>Fin 20</code>.</p>\n</blockquote>\n<p>Ah so the goal is actually false when 20 is changed to 4?</p>",
        "id": 409832988,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1703441880
    },
    {
        "content": "<p>Yes, it is false.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">thing'</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"mi\">1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 409833690,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703442618
    },
    {
        "content": "<p>Indeed <code>slim_check</code> works here.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">thing</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span>\n\n\n<span class=\"bp\">===================</span>\n<span class=\"n\">Found</span> <span class=\"n\">problems</span><span class=\"bp\">!</span>\n<span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"n\">guard</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"n\">issue</span><span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">hold</span>\n<span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"n\">shrinks</span><span class=\"o\">)</span>\n<span class=\"c1\">-------------------</span>\n</code></pre></div>",
        "id": 409833791,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703442750
    },
    {
        "content": "<p>I have the Fin version of the exists add in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9033\">#9033</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/9033/files#diff-6ae63812d312aba302a17e36f91f095aee62f00d3cb2f4966f176ea040474db6R1338\">https://github.com/leanprover-community/mathlib4/pull/9033/files#diff-6ae63812d312aba302a17e36f91f095aee62f00d3cb2f4966f176ea040474db6R1338</a></p>",
        "id": 409836077,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1703445343
    },
    {
        "content": "<p>Thanks very much for all your help guys!!</p>",
        "id": 409836412,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1703445771
    },
    {
        "content": "<p>A little more straight proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">thing</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">20</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Fin.le_iff_val_le_val.mpr</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.coe_sub_iff_le.mpr</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n.val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.sub_le_sub_right</span> <span class=\"n\">h</span> <span class=\"mi\">1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 409970478,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1703563723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Struggling.20to.20prove.20this.20very.20basic.20.60Fin.60.20lemma/near/409833791\">said</a>:</p>\n<blockquote>\n<p>Indeed <code>slim_check</code> works here.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">thing</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span>\n\n\n<span class=\"bp\">===================</span>\n<span class=\"n\">Found</span> <span class=\"n\">problems</span><span class=\"bp\">!</span>\n<span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"n\">guard</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"n\">issue</span><span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">hold</span>\n<span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"n\">shrinks</span><span class=\"o\">)</span>\n<span class=\"c1\">-------------------</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">things</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span>\n</code></pre></div>\n<p>The <code>slim_check</code> close the goal and say <code>no goals to be solved</code> with a red line. Is the proof finished? Or it is some kind of another sorry.</p>",
        "id": 409970851,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1703564078
    },
    {
        "content": "<p><code>slim_check</code> won't solve any goals (as far as I know), it only finds a counterexample or fails to find one and gives up with a kind of sorry.</p>",
        "id": 409995095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703581069
    }
]