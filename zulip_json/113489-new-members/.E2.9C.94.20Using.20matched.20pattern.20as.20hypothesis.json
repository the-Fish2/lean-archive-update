[
    {
        "content": "<p>How can I use a matched pattern as a hypothesis?</p>\n<p>For example, consider the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">Pattern</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- use x = Pattern 1 here</span>\n<span class=\"bp\">|</span> <span class=\"n\">Pattern</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- use x = Pattern 2 here</span>\n</code></pre></div>\n<p>In the first pattern body, how can I use the fact that <code>x = Pattern 1</code>? Or <code>x = Pattern 2</code> in the second?</p>",
        "id": 423090479,
        "sender_full_name": "Alexander Gillon",
        "timestamp": 1708720574
    },
    {
        "content": "<p>Do you even have <code>x</code> after the <code>=&gt;</code>?</p>",
        "id": 423090783,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708720731
    },
    {
        "content": "<p>Yes. Consider if I have some other hypothesis <code>h</code> which involves <code>x</code>, and I now want to expand <code>h</code> with the new information I have about <code>x</code>.</p>",
        "id": 423092809,
        "sender_full_name": "Alexander Gillon",
        "timestamp": 1708721594
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 423093037,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708721686
    },
    {
        "content": "<p>I am, like Damiano, surprised that in the first pattern body, all occurrences of <code>x</code> haven't already been replaced by <code>Pattern 1</code> by the time you're at that <code>sorry</code>.</p>",
        "id": 423093356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708721821
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n    <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n    <span class=\"n\">nNonZero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">s.n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">s.n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">s.nNonZero</span>\n            <span class=\"c1\">-- need to use s.n matched with Nat.zero here to rewrite h2 to h1</span>\n            <span class=\"gr\">sorry</span>\n        <span class=\"gr\">sorry</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 423094534,
        "sender_full_name": "Alexander Gillon",
        "timestamp": 1708722260
    },
    {
        "content": "<p>Try matching on all of <code>s</code> instead of <code>s.n</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.zero</span><span class=\"o\">,</span> <span class=\"n\">nz</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"gr\">sorry</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Then <code>nz</code> should be the <code>h1</code> you are trying to prove you have.</p>",
        "id": 423095445,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1708722622
    },
    {
        "content": "<p>I see, that worked. Thanks.</p>",
        "id": 423095767,
        "sender_full_name": "Alexander Gillon",
        "timestamp": 1708722805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"694154\">Alexander Gillon</span> has marked this topic as resolved.</p>",
        "id": 423174576,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708784991
    }
]