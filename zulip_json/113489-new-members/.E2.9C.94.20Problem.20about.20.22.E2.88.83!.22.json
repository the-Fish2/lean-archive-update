[
    {
        "content": "<p>h2 and h2_oppo are opposite, why can't i use them to prove \"False\"?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">MainGoal6</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n      <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"o\">:</span><span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">A.transpose</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">LinearIndependent</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.ker_eq_bot'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n        <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">hv'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n        <span class=\"k\">let</span> <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">hA</span> <span class=\"mi\">0</span>\n        <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">A.mulVec</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">mulVec_zero</span> <span class=\"n\">A</span>\n        <span class=\"k\">have</span> <span class=\"n\">h2_oppo</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">,(</span><span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span><span class=\"o\">)</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n          <span class=\"c1\">-- use 0</span>\n          <span class=\"c1\">-- use v</span>\n          <span class=\"c1\">-- constructor</span>\n          <span class=\"c1\">-- · exact h3</span>\n          <span class=\"c1\">-- · sorry</span>\n          <span class=\"c1\">-- rw [Finsupp.total] at hv</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h2_oppo</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 409972556,
        "sender_full_name": "chenjulang",
        "timestamp": 1703565429
    },
    {
        "content": "<p>this final line dosen't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"n\">h2_oppo</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 409973974,
        "sender_full_name": "chenjulang",
        "timestamp": 1703566729
    },
    {
        "content": "<p>They are not contradictory by definition. Use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ExistsUnique.unique#doc\">docs#ExistsUnique.unique</a> to get one.</p>",
        "id": 409975366,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703567624
    },
    {
        "content": "<p>OK</p>",
        "id": 409976678,
        "sender_full_name": "chenjulang",
        "timestamp": 1703568751
    },
    {
        "content": "<p>Get it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">MainGoal8</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n      <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"o\">:</span><span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">A.transpose</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">LinearIndependent</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.ker_eq_bot'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n        <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">hv'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n        <span class=\"k\">let</span> <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">hA</span> <span class=\"mi\">0</span>\n        <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">A.mulVec</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">mulVec_zero</span> <span class=\"n\">A</span>\n        <span class=\"k\">have</span> <span class=\"n\">h2_oppo</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">,(</span><span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n          <span class=\"c1\">-- use 0</span>\n          <span class=\"c1\">-- use v</span>\n          <span class=\"c1\">-- constructor</span>\n          <span class=\"c1\">-- · exact h3</span>\n          <span class=\"c1\">-- · sorry</span>\n          <span class=\"c1\">-- rw [Finsupp.total] at hv</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">x3</span><span class=\"o\">,</span><span class=\"n\">x4</span><span class=\"o\">,</span><span class=\"n\">x5</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h2_oppo</span>\n        <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ExistsUnique.unique</span> <span class=\"n\">h2</span> <span class=\"n\">x4</span> <span class=\"n\">x5</span><span class=\"o\">)</span>\n        <span class=\"n\">exact</span> <span class=\"n\">x3</span> <span class=\"n\">h4</span>\n</code></pre></div>",
        "id": 409976949,
        "sender_full_name": "chenjulang",
        "timestamp": 1703569013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 409976961,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703569024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>  Thanks a lot</p>",
        "id": 409976984,
        "sender_full_name": "chenjulang",
        "timestamp": 1703569054
    }
]