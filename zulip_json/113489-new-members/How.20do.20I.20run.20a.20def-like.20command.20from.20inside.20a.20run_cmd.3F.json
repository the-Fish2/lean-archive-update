[
    {
        "content": "<p>Hi all,</p>\n<p>I am a newbie trying to do advanced things <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span>, like manipulating Syntax and TSyntax objects, and generating several kinds of diagrams from them - see <a href=\"#narrow/stream/113489-new-members/topic/What.20parsers.20parses.20the.20.22.28ab.20.3A.20.CE.B1.C3.97.CE.B2.29.22.20in.20a.20.22fun.20.2E.2E.2E.20.3D.3E.20.2E.2E.2E.22.3F\">this thread</a>, and <a href=\"http://anggtwu.net/eev-lean4.html\">my page on Lean</a>...</p>",
        "id": 447368753,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719452461
    },
    {
        "content": "<p>Now I am looking for a way to, ahem, \"export a syntax object from a <code>run_cmd</code> by calling a <code>def</code>-like function inside the <code>run_cmd</code>\". For example, this code prints a syntax object both \"as a term\" and \"as its <code>repr</code>\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"n\">run_cmd</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"{stx}\"</span>\n<span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"{repr stx}\"</span>\n<span class=\"w\">  </span><span class=\"c1\">-- mydef `bla stx</span>\n\n<span class=\"c1\">-- #eval bla</span>\n<span class=\"c1\">-- #eval repr bla</span>\n</code></pre></div>",
        "id": 447368785,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719452495
    },
    {
        "content": "<p>Screenshot:<br>\n<a href=\"/user_uploads/3121/2zZ7C8IKcVA3JdcKcNLAF-bf/sshot.png\">sshot.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2zZ7C8IKcVA3JdcKcNLAF-bf/sshot.png\" title=\"sshot.png\"><img src=\"/user_uploads/3121/2zZ7C8IKcVA3JdcKcNLAF-bf/sshot.png\"></a></div>",
        "id": 447368927,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719452596
    },
    {
        "content": "<p>The commented lines above - the <code>mydef</code> and the two last <code>#eval</code>s - show what I would like to have. The <code>mydef `bla stx</code> would do something like <code>def bla := &lt;currentvalueofstx&gt;</code>, and this <code>bla</code> would accessible outside the <code>run_cmd</code>; the two commented <code>#eval</code>s would print the value of that <code>bla</code>.</p>",
        "id": 447369360,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719452889
    },
    {
        "content": "<p>It seems that <code>mkDefViewOfDef</code> - that generates a <code>DefView</code> structure - does a part of what I need, but its code is too complex for me...</p>",
        "id": 447370094,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719453430
    },
    {
        "content": "<p>Anyone knows how to write that <code>mydef</code>? A fragile one-minute hack with no error-checking at all would be more than enough! Thanks in advance... <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 447370198,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719453502
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Command</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">mydef</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Name</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">`term</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CommandElabM</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">elabCommand</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">))</span>\n\n<span class=\"n\">run_cmd</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"{stx}\"</span>\n<span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"{repr stx}\"</span>\n<span class=\"w\">  </span><span class=\"n\">mydef</span><span class=\"w\"> </span><span class=\"ss\">`bla</span><span class=\"w\"> </span><span class=\"n\">stx</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">bla</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">repr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">bla</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 447462263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719490397
    },
    {
        "content": "<p>note that your original <code>#eval bla</code> fails because the resulting expression has type <code>Nat -&gt; Nat</code></p>",
        "id": 447462460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719490450
    },
    {
        "content": "<p>you can <code>#print bla</code> if you want to see that it was defined as intended</p>",
        "id": 447462498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719490467
    },
    {
        "content": "<p>Wow and thanks, but that's not exactly what I was looking for... I wanted to store in bla the syntax object that appears in the right side of the screenshot, and that looks like this: <code>{ raw := ... }</code></p>",
        "id": 447466555,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719491620
    },
    {
        "content": "<p>I think that we will have to modify the environment in a more low-level-ish way - and that's why I was trying to understand <code>DefView</code>s...</p>",
        "id": 447472268,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719493208
    },
    {
        "content": "<p><code>def bla := Unhygienic.run `(fun a =&gt; a+2)</code>?</p>",
        "id": 447520719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719505792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, perfect! Thanks! =)</p>",
        "id": 447539312,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719510363
    }
]