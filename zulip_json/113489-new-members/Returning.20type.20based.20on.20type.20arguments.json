[
    {
        "content": "<p>I'm trying to write my own basic implementation of a Category. I know this exists already in Mathlib, but I'm doing this for learning purposes. </p>\n<p>I'm getting the error <code>type expected, got (A : TypeCat.Obj)</code>. This error suggests that the function needs to return a type, but  the parameter <code>A</code> has  type <code>TypeCat.Obj</code> which is equal to <code>Type</code> based on the definition of <code>Obj</code>. So my thinking is that <code>A -&gt; B</code> is also a value of type Type. But the compiler appears to disagree.  </p>\n<p><a href=\"/user_uploads/3121/9St2lNbjbe3DW6fO6RxYMyGN/Screenshot-180.png\">Screenshot-180.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9St2lNbjbe3DW6fO6RxYMyGN/Screenshot-180.png\" title=\"Screenshot-180.png\"><img src=\"/user_uploads/3121/9St2lNbjbe3DW6fO6RxYMyGN/Screenshot-180.png\"></a></div><p>On the other hand, if I replace <code>TypeCat.Obj</code> with <code>Type</code> I get a different error. </p>\n<p><a href=\"/user_uploads/3121/7G6h_eTJ8XQS6JRk6l44QgVH/Screenshot-181.png\">Screenshot-181.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7G6h_eTJ8XQS6JRk6l44QgVH/Screenshot-181.png\" title=\"Screenshot-181.png\"><img src=\"/user_uploads/3121/7G6h_eTJ8XQS6JRk6l44QgVH/Screenshot-181.png\"></a></div><p>It appears that there is a lack of transparency about the definitional equality of these things (or more likely I just have a mistake somewhere in the code).</p>",
        "id": 410074737,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1703630963
    },
    {
        "content": "<p>In your definition, I would remove <code>Hom</code>, and rename <code>HomType</code> as <code>Hom</code>.</p>",
        "id": 410077060,
        "sender_full_name": "Joël Riou",
        "timestamp": 1703633148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> <a href=\"#narrow/stream/113489-new-members/topic/Returning.20type.20based.20on.20type.20arguments/near/410077060\">said</a>:</p>\n<blockquote>\n<p>In your definition, I would remove <code>Hom</code>, and rename <code>HomType</code> as <code>Hom</code>.</p>\n</blockquote>\n<p>Thanks Joël. </p>\n<p>I tried your suggestion. I get the same error. <br>\n<code>type expected, got (A : TypeCat.Obj)</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">MyCategory</span>  <span class=\"n\">where</span>\n  <span class=\"n\">Obj</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">):</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n  <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n  <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">A</span> <span class=\"n\">C</span>\n\n  <span class=\"c1\">-- Laws</span>\n  <span class=\"n\">unit_right</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">}(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"n\">unit_left</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">}(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"n\">comp_assoc</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">}(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TypeCat</span> <span class=\"o\">:</span> <span class=\"n\">MyCategory</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">Obj</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">Hom</span>  <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">TypeCat.Obj</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span> <span class=\"c1\">-- ERROR HERE</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TypeCat.Hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">unit_right</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">unit_left</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">comp_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 410077502,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1703633530
    },
    {
        "content": "<p>I am not completely sure how Lean understands <code>TypeCat.Obj</code> in the definition of <code>TypeCat</code> itself. This is not necessary anyway:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">TypeCat</span> <span class=\"o\">:</span> <span class=\"n\">MyCategory</span> <span class=\"n\">where</span>\n  <span class=\"n\">Obj</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n  <span class=\"c1\">-- this also works: Hom := fun A B =&gt; A → B</span>\n  <span class=\"n\">id</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n  <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">unit_right</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">unit_left</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">comp_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 410079577,
        "sender_full_name": "Joël Riou",
        "timestamp": 1703635346
    },
    {
        "content": "<p>Thanks. So the key difference in syntax is you aren't using the curly braces to define a structure. I think that syntactic sugar  for structure definitions may have been causing some issues. </p>\n<p>I wasn't able to apply the arguments before the <code>:=</code> for example. I would get an error. </p>\n<p>This way is much better.</p>\n<p>Also, strangely, I notice it works with <code>def ... where</code> but not <code>def ...  :=</code>  while usually these two are interchangeable.</p>",
        "id": 410081679,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1703636527
    },
    {
        "content": "<p>Note that <code>Hom := fun A B =&gt; A → B</code> would also work with the syntax for structures using braces, so the actual problem was with the \"cast\" to <code>TypeCat.Obj</code>.<br>\nThe <code>where</code> syntax in Lean4 is very nice (although it does not work everywhere: for example, if a field of a structure is itself a structure, it cannot be applied there).<br>\nAbout fields of structures which contain a proof, the category theory part of mathlib uses a lot of automation: for example, in <a href=\"https://github.com/leanprover-community/mathlib4/blob/9757df4e07dcd5870b7118b17e70c6d3945251c7//Mathlib/CategoryTheory/Category/Basic.lean#L159-L166\">https://github.com/leanprover-community/mathlib4/blob/9757df4e07dcd5870b7118b17e70c6d3945251c7//Mathlib/CategoryTheory/Category/Basic.lean#L159-L166</a> the axioms <code>id_comp</code> have a predefined definition with <code>:= by aesop_cat</code>, which means that when we define a category structure, we usually do not need to verify the axioms: Lean shall automatically try to close the goals using the <code>aesop_cat</code> variant of the <code>aesop</code> tactic. This also applies when defining functors, natural transformations, etc.</p>",
        "id": 410107796,
        "sender_full_name": "Joël Riou",
        "timestamp": 1703656934
    }
]