[
    {
        "content": "<p>Hi,</p>\n<p>I am trying to get familiar with linear algebra in Lean and have run into some confusing problems. The first is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">ℂ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which gives an error about matrix-vector multiplication:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HMul</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Vector</span> <span class=\"n\">ℂ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.2951861</span>\n</code></pre></div>\n<p>I am not sure how to handle this - is Matrix - Vector multiplication defined a different way? The second problem I had was for this problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">ℂ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>with error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HAdd</span> <span class=\"o\">(</span><span class=\"n\">Vector</span> <span class=\"n\">ℂ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">Vector</span> <span class=\"n\">ℂ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Lean thinks that 0 is a natural number, but of course I want it to be the vector of 0s from \\C. But Lean cannot infer it if I provide the right type either:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">ℂ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">ℂ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>with error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Vector</span> <span class=\"n\">ℂ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HAdd</span> <span class=\"o\">(</span><span class=\"n\">Vector</span> <span class=\"n\">ℂ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Vector</span> <span class=\"n\">ℂ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.2784030</span>\n</code></pre></div>\n<p>the second part leads me to think \"Vector\" is not the right class for what I want, it seems addition is not defined on it either? It would be great if there was a clean way to write the 0-vector given arbitrary n. Anyone know how to resolve these issues?</p>",
        "id": 426618386,
        "sender_full_name": "George Tsoukalas",
        "timestamp": 1710446290
    },
    {
        "content": "<p>Probably you want <code>M *ᵥ (0 : n → ℂ)</code>, where the notation <code>*ᵥ</code> is for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.mulVec#doc\">docs#Matrix.mulVec</a></p>",
        "id": 426625200,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710448947
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">*ᵥ</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Matrix.mulVec_zero</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 426625529,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710449089
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Vector#doc\">docs#Vector</a> is really about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List#doc\">docs#List</a> with a fixed length, but in general we don't use lists for things involving matrices.</p>",
        "id": 426625838,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710449214
    },
    {
        "content": "<p>Instead, the matrix version of a vector is <code>v : n → ℂ</code>.</p>",
        "id": 426625887,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710449240
    },
    {
        "content": "<p>You can multiply on the left with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.vecMul#doc\">docs#Matrix.vecMul</a> (with notation <code>ᵥ*</code> inside the <code>Matrix</code> scope) and on the right with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.mulVec#doc\">docs#Matrix.mulVec</a> (with notation <code>*ᵥ</code>).</p>",
        "id": 426626068,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710449307
    }
]