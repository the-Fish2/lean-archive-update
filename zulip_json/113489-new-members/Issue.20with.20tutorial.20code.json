[
    {
        "content": "<p>Hello folks!</p>\n<p>I think I'm having trouble with my lean4 environment in Visual Studio Code.</p>\n<p>The following code-snippet from this tutorial is given me errors: </p>\n<p><a href=\"https://leanprover-community.github.io/mathematics_in_lean/C01_Introduction.html#getting-started\">https://leanprover-community.github.io/mathematics_in_lean/C01_Introduction.html#getting-started</a></p>\n<p><strong>Here's the Snippet:</strong></p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Even</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Even</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hk</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">↦</span>\n\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hmn</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mul_add</span><span class=\"o\">]</span>\n\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"bp\">⟨_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hmn</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n<p><strong>Here are the errors:</strong></p>\n<p>function expected at Even<br>\nterm has type<br>\n?m.9</p>\n<p>function expected at<br>\nEven<br>\nterm has type<br>\n?m.9</p>\n<p><strong>Here's my setup information:</strong></p>\n<p><strong>Operating system</strong>: Windows_NT (release: 10.0.22631)<br>\n<strong>CPU architecture</strong>: x64<br>\n<strong>CPU model</strong>: 16 x 11th Gen Intel(R) Core(TM) i9-11900K @ 3.50GHz<br>\n<strong>Available RAM</strong>: 34.24 GB</p>\n<p><strong>Curl installed</strong>: true<br>\n<strong>Git installed</strong>: true<br>\n<strong>Elan</strong>: Reasonably up-to-date (version: 3.1.1)<br>\n<strong>Lean</strong>: Reasonably up-to-date (version: 4.1.0-rc1)<br>\n<strong>Project</strong>: No open project</p>\n<hr>\n<p><strong>Elan toolchains</strong>: </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">installed</span><span class=\"w\"> </span><span class=\"n\">toolchains</span>\n<span class=\"c1\">--------------------</span>\n\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">stable</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">v4</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"bp\">.</span><span class=\"m\">0</span><span class=\"bp\">-</span><span class=\"n\">rc1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n\n\n<span class=\"n\">active</span><span class=\"w\"> </span><span class=\"n\">toolchain</span>\n<span class=\"c1\">----------------</span>\n\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">v4</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"bp\">.</span><span class=\"m\">0</span><span class=\"bp\">-</span><span class=\"n\">rc1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n\n<span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"mf\">4.1</span><span class=\"bp\">.</span><span class=\"m\">0</span><span class=\"bp\">-</span><span class=\"n\">rc1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">commit</span><span class=\"w\"> </span><span class=\"mi\">339615042</span><span class=\"n\">d90</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Are these errors sensible? or is there something wrong with my Lean setup?</p>\n<p>Any help would be appreciated.</p>",
        "id": 446648373,
        "sender_full_name": "Oliver D",
        "timestamp": 1719243672
    },
    {
        "content": "<p>Cannot be answered unless you include your import headers, see <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 446648887,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1719243821
    },
    {
        "content": "<p>I assume the issue here is that MIL snippets themselves are not  runnable. It looks like they recommend running the MIL repo which probably comes with an environment</p>\n<p>EDIT: indeed here it is: <a href=\"https://github.com/leanprover-community/mathematics_in_lean/blob/master/MIL/C01_Introduction/S02_Overview.lean\">https://github.com/leanprover-community/mathematics_in_lean/blob/master/MIL/C01_Introduction/S02_Overview.lean</a></p>\n<p>there is <code>import MIL.Common</code></p>\n<p>That file contains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Util</span><span class=\"bp\">.</span><span class=\"n\">Delaborators</span>\n\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">warningAsError</span><span class=\"w\"> </span><span class=\"n\">false</span>\n</code></pre></div>\n<p>but I would recommend just running it their way</p>",
        "id": 446649497,
        "sender_full_name": "llllvvuu",
        "timestamp": 1719243976
    },
    {
        "content": "<p>Thanks for the replies!</p>\n<p>I had zero imports above the code snippet - I didn't think to include any in my scratchpad, apologies for the stupid question.</p>\n<p>Does Visual Studio Code / Lean4 / elan not have support for detecting if an import is missing for a piece of code, or perhaps a primitive object?</p>",
        "id": 446652576,
        "sender_full_name": "Oliver D",
        "timestamp": 1719244494
    },
    {
        "content": "<p>Something that might be a bit confusing when you first start in lean is that if you use an undeclared identifier, Lean may assume that it must be a term and elaborate with an anonymous type. </p>\n<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"c1\">-- Bar.{u_1, u_2} {p : Sort u_1} {q : Sort u_2} : p → q</span>\n</code></pre></div>\n<p>Instead of saying \"I don't know what p or q are in this context,\" leans just says \"Cool, these must be terms in some universe of types.\" and doesn't throw an error.</p>\n<p>Which is nice in some cases: for example in the follow the conjunction <code>∧</code>, it's easy to infer that p and q must be Propositions (terms in <code>Prop</code>) and we can drop the boilerplate.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"c1\">-- Bar {p q : Prop} : p ∧ q</span>\n</code></pre></div>\n<p>The issue is that <code>Even</code> has a type like: <code>Nat → Prop</code>, which is not something the elaborator will do for you. You could, for example, get a different error if you include a type for <code>Even</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">Even</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Even</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Even</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hk</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">↦</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hmn</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mul_add</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"bp\">⟨_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hmn</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n<p>but really, you need the definition for <code>Even</code>, which requires the import as you've seen.</p>\n<hr>\n<p>I suspect in future, the language server may see such errors and be able to suggest possible imports that would fix it. As far as I know, that's not currently a thing.</p>",
        "id": 446659620,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1719245887
    },
    {
        "content": "<p>Understood - thanks!</p>\n<p>I'm currently in that stage where I'm so new, it's a little harder to distinguish between a setup issue, or a syntax / code issue - I don't have confidence in the installation just yet it seems.</p>\n<p>Indeed my problem seemed to have been an import issue - I included the following import:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n</code></pre></div>\n<p>It seemed to load the entirety of that package (which took, expectedly, a whole hour or so), and the errors disappeared - I imagine I could have just included the import specific to even and this would have finished MUCH faster.</p>",
        "id": 446664779,
        "sender_full_name": "Oliver D",
        "timestamp": 1719247415
    },
    {
        "content": "<p>I would not expect anything to take an hour. If you have a fully compiled mathlib (and you can download compiled binaries using <code>lake exe cache get</code>) then it should just take a few seconds to run <code>import Mathlib</code>.</p>",
        "id": 446785912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719295281
    }
]