[
    {
        "content": "<p>So far when I start a new project from start I've just been starting with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n</code></pre></div>\n<p>Can this cause problems? Sometimes the files runs slow and exact? keeps timing out. </p>\n<p>I tried deleting the global import and importing files one at a time. After a lot of trial and error and searching for definitions and theorems on the Mathlib docs, I was able to get a working collection of imports. In my particular case it was this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Sort</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Sort</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Divisors</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith.Frontend</span>\n</code></pre></div>\n<p>(I was working with  the sorted list of divisors). Is there any way to consolidate these imports? For example, I would have thought one could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data</span>\n</code></pre></div>\n<p>but this does not work.</p>",
        "id": 433162217,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713126177
    },
    {
        "content": "<p>Do you know about <code>#minimize_imports</code>? If you place this at the end of a (compiling) file, it will suggest a minimal set of imports for the file. (These suggestions miss tactics and notation, so sometimes you'll need to add more things - but in my experience, this is often pretty good.)</p>",
        "id": 433162731,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1713126680
    },
    {
        "content": "<p>Putting <code>import Mathlib</code> in mathlib files doesn't work (that will create import cycles, I think). In a \"scratch file\", that's fine in principle (with a few exceptions...). In Lean 3, <code>exact?</code> used to get a lot slower - if I understood correctly, that's much less of an issue in Lean 4.</p>",
        "id": 433162941,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1713126862
    },
    {
        "content": "<p>Personally, once I've finished a logical change, I try to minimize imports (reasonably) - but during development, placing an <code>import Mathlib</code> seems like a fine compromise if I don't want to do import hunting.</p>",
        "id": 433163003,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1713126942
    },
    {
        "content": "<p>If the claim is \"if I <code>import Mathlib</code> then <code>exact?</code> times out when it worked before\" then I suspect that this is a bug; my understanding was that this sort of issue had been fixed now, although obviously the more you import, the more work <code>exact?</code> has to do. I had understood that it was now very good at doing this kind of work now though. Do you have a concrete example? Is this a regression or something which is to be expected?</p>",
        "id": 433167663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713131212
    },
    {
        "content": "<p>If it's a bug then it's a Heisenbug--I took a long walk and when I returned to the same file, exact? was working perfectly. It even suggested a highly complex 30-line completion of a simple subgoal. Maybe the lesson is to take more long walks.</p>",
        "id": 433169838,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713133005
    }
]