[
    {
        "content": "<p>As I think it's more natural to reason about Nat's, I expected Lean to simplify <code>USize.toNat 17</code> to <code>17 % USize.size</code>.<br>\nSo I decided to add a simp lemma, but it doesn't work :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">th</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">USize.toNat</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"n\">USize.size</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">USize.toNat</span> <span class=\"mi\">17</span> <span class=\"bp\">=</span> <span class=\"mi\">17</span> <span class=\"bp\">%</span> <span class=\"n\">USize.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">USize.toNat</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"mi\">17</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">17</span> <span class=\"bp\">%</span> <span class=\"n\">USize.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p><code>rw [th]</code> works,  <code>simp [th _]</code> works,  but <code>simp</code> doesn't work,  nor does <code>simp [th]</code><br>\nWhy is that?</p>",
        "id": 431792383,
        "sender_full_name": "Julien Michel",
        "timestamp": 1712507872
    },
    {
        "content": "<p>Two things:</p>\n<ul>\n<li>You need an OfNat on both sides</li>\n<li>You need to use <code>no_index</code> on the LHS, look at other ofNat lemmas in mathlib for inspiration. There is a note about this, but our tools for linking to said note I think are still out of action.</li>\n</ul>",
        "id": 431826533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712533764
    }
]