[
    {
        "content": "<p>I would like to have the commented code work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">ih</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">intros</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span>\n<span class=\"w\">    </span><span class=\"c\">/-</span><span class=\"cm\"> have := ih β α -/</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It seems like I need to make a more general induction hypothesis, but I cant get it to work.</p>",
        "id": 441963561,
        "sender_full_name": "Eric Paul",
        "timestamp": 1717275769
    },
    {
        "content": "<p>You can't quantify over universes, they're not first class citizens. So what you have can't typecheck because the universes don't match.</p>",
        "id": 441967031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717277660
    },
    {
        "content": "<p>There's a typo in your <code>ih</code>, but other than that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">ih</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\">    </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">ih</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n</code></pre></div>",
        "id": 441967032,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717277662
    },
    {
        "content": "<p>What's the error you were getting?</p>",
        "id": 441967110,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717277729
    },
    {
        "content": "<p>To Kevin's point, this theorem might not state what you want it to state.</p>",
        "id": 441967390,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717277870
    },
    {
        "content": "<p>I see, thank you. </p>\n<p>The proof I am trying to formalize does seem to need to use the induction hypothesis both ways (i.e. <code>ih α β</code> and <code>ih β α</code>). I've settled on having <code>α</code> and <code>β</code> be in the same universe but that felt wrong since everywhere else they've been able to be in arbitrary universes. Should that feel wrong?</p>",
        "id": 441971383,
        "sender_full_name": "Eric Paul",
        "timestamp": 1717279189
    },
    {
        "content": "<p>Universe issues are often (but not always) a sign that you're approaching a problem from an odd angle, so perhaps. You can try posting a mwe for what you're working on, someone might be able to provide more/better guidance.</p>",
        "id": 441973670,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717280089
    },
    {
        "content": "<p>What Kevin said is the main takeaway: you can't explicitly quantify over universes (as in <code>forall u, Type u ...</code>), they're implicitly quantified when you invoke a declaration. So once you're actually in <code>test</code>, <code>u, v</code> are effectively fixed.</p>",
        "id": 441974091,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717280273
    },
    {
        "content": "<p>That makes sense, thank you both for the help.</p>",
        "id": 441975357,
        "sender_full_name": "Eric Paul",
        "timestamp": 1717280822
    },
    {
        "content": "<p>I think you can resolve this case by having a conjunction of the two possible universe orders in the conclusion</p>",
        "id": 441979489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717282889
    },
    {
        "content": "<p>You'll end up duplicating the proof, but you can then extract that to a lemma, and the duplication is done mostly automatically for you through how universe variables work</p>",
        "id": 441979663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717282993
    },
    {
        "content": "<p>Ah I see what you’re saying, I’ll give that a go, thanks</p>",
        "id": 441991271,
        "sender_full_name": "Eric Paul",
        "timestamp": 1717290569
    },
    {
        "content": "<p>That worked perfectly, thanks again!</p>",
        "id": 442015622,
        "sender_full_name": "Eric Paul",
        "timestamp": 1717311828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"512030\">Eric Paul</span> has marked this topic as resolved.</p>",
        "id": 442015669,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717311848
    }
]