[
    {
        "content": "<p>i'm trying to prove that the minimal distance is a strict upper bound to the packing radius, and i'd like to use a proof by contradiction. however, lean doesn't recognise the pattern i'm trying to rewrite...</p>\n<p>i'm guessing there is some kind of diamond issue, but i don't quite get exactly what diamond is the issue... can someone help?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Order.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bornology.Basic</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">imports</span>\n  <span class=\"kn\">section</span>\n\n    <span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n    <span class=\"kd\">class</span> <span class=\"n\">GDist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n      <span class=\"n\">gdist</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n    <span class=\"kn\">open</span> <span class=\"n\">Set</span>\n    <span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n    <span class=\"kd\">def</span> <span class=\"n\">Bornology.ofGDist</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">gdist</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gdist_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">gdist</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">gdist_triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">gdist</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bornology</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n      <span class=\"n\">Bornology.ofBounded</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span><span class=\"o\">⦄,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">y</span><span class=\"o\">⦄,</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"o\">}</span>\n        <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hx.elim</span><span class=\"o\">⟩</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span> <span class=\"n\">t</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hc</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hy</span><span class=\"o\">)⟩)</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n          <span class=\"n\">rcases</span> <span class=\"n\">s.eq_empty_or_nonempty</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n          <span class=\"bp\">·</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">empty_union</span><span class=\"o\">]</span>\n          <span class=\"n\">rcases</span> <span class=\"n\">t.eq_empty_or_nonempty</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span>\n          <span class=\"bp\">·</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">union_empty</span><span class=\"o\">]</span>\n          <span class=\"n\">rsuffices</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hC</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span>\n          <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">C</span> <span class=\"bp\">+</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">gdist_triangle</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n            <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">gdist_comm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"n\">_</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"n\">_</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n          <span class=\"n\">rcases</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">Cs</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">rcases</span> <span class=\"n\">ht</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">Ct</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">⟩</span>\n          <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">max</span> <span class=\"n\">Cs</span> <span class=\"o\">(</span><span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">Ct</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"n\">hz</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hz.elim</span>\n            <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hz</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">hx</span> <span class=\"n\">hz</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hz</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">gdist_triangle</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span>\n              <span class=\"o\">(</span><span class=\"n\">add_le_add</span> <span class=\"n\">le_rfl</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"n\">hy</span> <span class=\"n\">hz</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))⟩)</span>\n        <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">gdist</span> <span class=\"n\">z</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">forall_eq.2</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">forall_eq.2</span> <span class=\"n\">le_rfl</span><span class=\"o\">⟩</span>\n\n    <span class=\"kd\">class</span> <span class=\"n\">GPseudoMetricSpace</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">GDist</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n      <span class=\"n\">gdist_self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n      <span class=\"n\">gdist_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">gdist</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n      <span class=\"n\">gdist_triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">gdist</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n      <span class=\"n\">toBornology</span> <span class=\"o\">:</span> <span class=\"n\">Bornology</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Bornology.ofGDist</span> <span class=\"n\">gdist</span> <span class=\"n\">gdist_comm</span> <span class=\"n\">gdist_triangle</span>\n      <span class=\"n\">cobounded_sets</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Bornology.cobounded</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"bp\">=</span>\n        <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span> <span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"kd\">end</span>\n  <span class=\"kn\">section</span> <span class=\"n\">gpseudometricspace</span>\n    <span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">GPseudoMetricSpace</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"n\">ε</span> <span class=\"n\">ε₁</span> <span class=\"n\">ε₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"kd\">def</span> <span class=\"n\">closedBall</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">GDist.gdist</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span> <span class=\"n\">gpseudometricspace</span>\n\n  <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CompleteLattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">GPseudoMetricSpace</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"kd\">def</span> <span class=\"n\">Separates</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">closedBall</span> <span class=\"n\">x</span> <span class=\"n\">δ</span> <span class=\"bp\">∩</span> <span class=\"n\">closedBall</span> <span class=\"n\">y</span> <span class=\"n\">δ</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span>\n\n  <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">packing_radius</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Separates</span> <span class=\"n\">s</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">GDist.gdist</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)),</span><span class=\"n\">GDist.gdist</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">y</span>\n\n  <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">minimal_distance</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">GDist.gdist</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">imports</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">extracted_1.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">GPseudoMetricSpace</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">minimal_distance</span> <span class=\"n\">s</span> <span class=\"n\">β</span> <span class=\"bp\">≤</span> <span class=\"n\">packing_radius</span> <span class=\"n\">s</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">packing_radius</span> <span class=\"n\">s</span> <span class=\"n\">β</span> <span class=\"bp\">&lt;</span> <span class=\"n\">minimal_distance</span> <span class=\"n\">s</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">minimal_distance</span> <span class=\"n\">s</span> <span class=\"n\">β</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">packing_radius</span> <span class=\"n\">s</span> <span class=\"n\">β</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">not_le</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 421253981,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707834497
    },
    {
        "content": "<p>it gives this error at the last line:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>tactic 'rewrite' failed, did not find instance of the pattern in the target expression\n  b &lt; a\nα : Type u_1\ns : Set α\nβ : Type u_2\ninst : CompleteLattice β\ninst_1 : LinearOrderedAddCommMonoid β\ninst_2 : GPseudoMetricSpace α β\na b : β\nh : ¬a ≤ b\n⊢ b &lt; a\n</code></pre></div>",
        "id": 421254205,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707834574
    },
    {
        "content": "<p>i suppose it doesn't know how to decide between <code>[CompleteLattice]</code> and <code>[LinearOrderedAddCommMonoid]</code>... but how should i go about fixing this?</p>",
        "id": 421254576,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707834684
    },
    {
        "content": "<p>When you use these two instances, you are putting two unrelated orders on your type, so Lean is rightly confused. You should probably just remove the complete lattice one.</p>",
        "id": 421255252,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1707834861
    },
    {
        "content": "<p>i need those for the definition of minimal distance and packing radius though...</p>",
        "id": 421255604,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707834962
    },
    {
        "content": "<p>Note that most examples of<code>LinearOrderedAddCommMonoid</code> are not complete lattices, by the way (for instance the real line is not a complete lattice, neither are the natural numbers).</p>",
        "id": 421255734,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1707834991
    },
    {
        "content": "<p>no, but when you include infinity and require non-negative values, they are...</p>",
        "id": 421255941,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707835049
    },
    {
        "content": "<p>Sure. But this becomes quite restrictive.</p>",
        "id": 421256117,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1707835087
    },
    {
        "content": "<p>actually, it makes sense when you look at it as a generalised notion of metric space</p>",
        "id": 421256247,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707835119
    },
    {
        "content": "<p>the codomain of a metric is always non-negative, and adding elements to make the codomain of the metric a complete lattice shouldn't pose any restriction on what can and cannot work as codomain</p>",
        "id": 421256925,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707835293
    },
    {
        "content": "<p>In theory, sure. In practice, it makes a big difference having a distance taking values in real numbers or in extended real numbers, as the behavior of operations is much nicer on real numbers.</p>",
        "id": 421257979,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1707835608
    },
    {
        "content": "<p>then how do you suggest i fix this? because i don't see a better solution...</p>",
        "id": 421258425,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707835761
    },
    {
        "content": "<p>What if you replace the <code>CompleteLattice</code> instance with <code>[SupSet β] [InfSet β]</code>?</p>\n<p>(<strong>Edit:</strong> Yeah this doesn't make sense since it doesn't give you any lemmas about the Sup and Inf... never mind)</p>",
        "id": 421295349,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707846638
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 421295748,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707846783
    },
    {
        "content": "<p>still, perhaps there's a way to get the assumptions you need in a more piecemeal fashion that avoids combining two different orders</p>",
        "id": 421296825,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707847182
    },
    {
        "content": "<p>I'm curious how other types do this... <code>EReal</code> has a <code>CompleteLinearOrder</code> instance and a <code>LinearOrderedAddCommMonoid</code> instance, but somehow that doesn't cause problems</p>",
        "id": 421299392,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707848199
    },
    {
        "content": "<p>and if you replace <code>CompleteLattice</code> with <code>CompleteLinearOrder</code> in <span class=\"user-mention\" data-user-id=\"684366\">@Edward van de Meent</span>'s code, the problem goes away</p>",
        "id": 421299770,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707848382
    },
    {
        "content": "<p>I would just use the usual <code>ENNReal</code>-valued <code>edist</code> (which is indeed a complete lattice) to define the main objects, and then define real-valued versions by using the junk value  <code>0</code> when the genuine value is infinite. Just like we do for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EMetric.diam#doc\">docs#EMetric.diam</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Metric.diam#doc\">docs#Metric.diam</a>, for instance.</p>",
        "id": 421303996,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1707849845
    }
]