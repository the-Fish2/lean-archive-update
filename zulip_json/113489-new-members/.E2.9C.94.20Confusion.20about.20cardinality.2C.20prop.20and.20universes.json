[
    {
        "content": "<p>Hi, I'm playing around a bit with the following definition, just to see how easily the results for CountableInterFilter generalise to intersections over larger sets. However, some of the types don't work out, so I'm probably doing something wrong here. Does anyone have a good suggestion? </p>\n<p>I've marked the places where things go wrong in the below example. I don't care about fixing the sorry's at this point (I'm just trying to get the hypotheses right at this point), I'm just curious why the conditions on cardinality don't work. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Ordinal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- A filter `l` has the countable intersection property if for any countable collection</span>\n<span class=\"sd\">of sets `s ∈ l` their intersection belongs to `l` as well. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">CardinalInterFilter</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.aleph0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- For a collection of sets `s ∈ l` with cardinality below c,</span>\n<span class=\"sd\">  their intersection belongs to `l` as well. -/</span>\n  <span class=\"n\">cardinal_sInter_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk</span> <span class=\"n\">S</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">⋂₀</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.aleph0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CardinalInterFilter</span> <span class=\"n\">l</span> <span class=\"n\">hc</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cardinal_sInter_mem</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hSc</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.mk</span> <span class=\"n\">S</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⋂₀</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n    <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">hS</span> <span class=\"n\">_s</span> <span class=\"n\">hs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mem_of_superset</span> <span class=\"n\">hS</span> <span class=\"o\">(</span><span class=\"n\">sInter_subset_of_mem</span> <span class=\"n\">hs</span><span class=\"o\">),</span>\n  <span class=\"n\">CardinalInterFilter.cardinal_sInter_mem</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hSc</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cardinal_iInter_mem</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.mk</span> <span class=\"n\">ι</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"c1\">-- &lt;- this one fails with</span>\n  <span class=\"c1\">-- application type mismatch</span>\n  <span class=\"c1\">-- Cardinal.mk ι</span>\n  <span class=\"c1\">-- argument</span>\n  <span class=\"c1\">-- ι</span>\n  <span class=\"c1\">-- has type</span>\n  <span class=\"c1\">-- Sort u_1 : Type u_1</span>\n  <span class=\"c1\">-- but is expected to have type</span>\n  <span class=\"c1\">-- Type ?u.892 : Type (?u.892 + 1)</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cardinal_bInter_mem</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.mk</span> <span class=\"n\">S</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"c1\">-- &lt;- this one fails with</span>\n  <span class=\"c1\">-- type mismatch</span>\n  <span class=\"c1\">-- c</span>\n  <span class=\"c1\">-- has type</span>\n  <span class=\"c1\">-- Cardinal.{u_2} : Type (u_2 + 1)</span>\n  <span class=\"c1\">-- but is expected to have type</span>\n  <span class=\"c1\">-- Cardinal.{u_4} : Type (u_4 + 1)</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">⋂</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 421424925,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707910038
    },
    {
        "content": "<p>You should write <code>{ι : Type*}</code> at the top instead of <code>Sort*</code> to fix the first error.</p>\n<p>For the second error, now write <code>ι : Type u</code>, and then use <code>c : Cardinal.{u}</code>. This should ensure that everything is in the same universe, which is what you want.</p>",
        "id": 421474632,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1707925638
    },
    {
        "content": "<p>Thank you. I've tried to make the necessary modifications, but now I get slightly different errors: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Ordinal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- A filter `l` has the countable intersection property if for any countable collection</span>\n<span class=\"sd\">of sets `s ∈ l` their intersection belongs to `l` as well. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">CardinalInterFilter</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.aleph0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- For a collection of sets `s ∈ l` with cardinality below c,</span>\n<span class=\"sd\">  their intersection belongs to `l` as well. -/</span>\n  <span class=\"n\">cardinal_sInter_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk</span> <span class=\"n\">S</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">⋂₀</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.aleph0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CardinalInterFilter</span> <span class=\"n\">l</span> <span class=\"n\">hc</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cardinal_sInter_mem</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hSc</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.mk</span> <span class=\"n\">S</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⋂₀</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n    <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">hS</span> <span class=\"n\">_s</span> <span class=\"n\">hs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mem_of_superset</span> <span class=\"n\">hS</span> <span class=\"o\">(</span><span class=\"n\">sInter_subset_of_mem</span> <span class=\"n\">hs</span><span class=\"o\">),</span>\n  <span class=\"n\">CardinalInterFilter.cardinal_sInter_mem</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hSc</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cardinal_iInter_mem</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.mk</span> <span class=\"n\">ι</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"c1\">-- &lt;- this one fails with</span>\n  <span class=\"c1\">-- type mismatch</span>\n  <span class=\"c1\">-- c</span>\n  <span class=\"c1\">-- has type</span>\n  <span class=\"c1\">-- Cardinal.{u_2} : Type (u_2 + 1)</span>\n  <span class=\"c1\">-- but is expected to have type</span>\n  <span class=\"c1\">-- Cardinal.{u_1} : Type (u_1 + 1)</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cardinal_bInter_mem</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.mk</span> <span class=\"n\">S</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"c1\">-- &lt;- this one fails with</span>\n  <span class=\"c1\">-- type mismatch</span>\n  <span class=\"c1\">-- c</span>\n  <span class=\"c1\">-- has type</span>\n  <span class=\"c1\">-- Cardinal.{u} : Type (u + 1)</span>\n  <span class=\"c1\">-- but is expected to have type</span>\n  <span class=\"c1\">-- Cardinal.{u_4} : Type (u_4 + 1)</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">⋂</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 421477726,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707926440
    },
    {
        "content": "<p>I think that’s because you still have <code>c : Cardinal</code> instead of <code>c : Cardinal.{u}</code></p>",
        "id": 421480668,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1707927226
    },
    {
        "content": "<p>Replacing that doesn't fix it, now also get a problem earlier on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Ordinal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- A filter `l` has the countable intersection property if for any countable collection</span>\n<span class=\"sd\">of sets `s ∈ l` their intersection belongs to `l` as well. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">CardinalInterFilter</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.aleph0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- For a collection of sets `s ∈ l` with cardinality below c,</span>\n<span class=\"sd\">  their intersection belongs to `l` as well. -/</span>\n  <span class=\"n\">cardinal_sInter_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk</span> <span class=\"n\">S</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">⋂₀</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n  <span class=\"c1\">-- Now also breaks on the line above:</span>\n  <span class=\"c1\">-- type mismatch</span>\n  <span class=\"c1\">-- c</span>\n  <span class=\"c1\">-- has type</span>\n  <span class=\"c1\">-- Cardinal.{u} : Type (u + 1)</span>\n  <span class=\"c1\">-- but is expected to have type</span>\n  <span class=\"c1\">-- Cardinal.{u_2} : Type (u_2 + 1)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">{</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.aleph0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CardinalInterFilter</span> <span class=\"n\">l</span> <span class=\"n\">hc</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cardinal_sInter_mem</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hSc</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.mk</span> <span class=\"n\">S</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⋂₀</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n    <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">hS</span> <span class=\"n\">_s</span> <span class=\"n\">hs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mem_of_superset</span> <span class=\"n\">hS</span> <span class=\"o\">(</span><span class=\"n\">sInter_subset_of_mem</span> <span class=\"n\">hs</span><span class=\"o\">),</span>\n  <span class=\"n\">CardinalInterFilter.cardinal_sInter_mem</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hSc</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cardinal_iInter_mem</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.mk</span> <span class=\"n\">ι</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"c1\">-- &lt;- this one fails with</span>\n  <span class=\"c1\">-- type mismatch</span>\n  <span class=\"c1\">-- c</span>\n  <span class=\"c1\">-- has type</span>\n  <span class=\"c1\">-- Cardinal.{u_2} : Type (u_2 + 1)</span>\n  <span class=\"c1\">-- but is expected to have type</span>\n  <span class=\"c1\">-- Cardinal.{u_1} : Type (u_1 + 1)</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cardinal_bInter_mem</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.mk</span> <span class=\"n\">S</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"c1\">-- &lt;- this one fails with</span>\n  <span class=\"c1\">-- type mismatch</span>\n  <span class=\"c1\">-- c</span>\n  <span class=\"c1\">-- has type</span>\n  <span class=\"c1\">-- Cardinal.{u} : Type (u + 1)</span>\n  <span class=\"c1\">-- but is expected to have type</span>\n  <span class=\"c1\">-- Cardinal.{u_4} : Type (u_4 + 1)</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">⋂</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 421481583,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707927484
    },
    {
        "content": "<p><code>ι </code> and <code>c</code> must have the same universe parameter in order for <code>Cardinal.mk ι</code> and <code>c</code> to have the same type. If <code>ι : Type v</code> and <code>c : Cardinal.{u}</code>, you'd need to write <code>Cardinal.lift.{u} (Cardinal.mk ι) &lt; Cardinal.lift.{v} c</code> for a type correct statement. BTW if you <code>open Cardinal</code> you should be able to use the notation <code>#ι</code>for <code>Cardinal.mk ι</code>.</p>",
        "id": 421482299,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707927675
    },
    {
        "content": "<p>You can fix the errors by setting <code>{ι : Type u}</code> and <code>{α β : Type u}</code>.</p>",
        "id": 421482427,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1707927721
    },
    {
        "content": "<p>Thank you, that worked!</p>",
        "id": 421482654,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707927779
    },
    {
        "content": "<p>also <code>[Cardinal.mk ι &lt; c]</code> doesn't work because <code>&lt;</code> is not a class</p>",
        "id": 421482775,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707927816
    },
    {
        "content": "<p>Yes, I've changed that one to something like <code>(hc : Cardinal.mk ι &lt; c)</code></p>",
        "id": 421483261,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707927954
    },
    {
        "content": "<p>If you're interested, I've made a PR with the basic definitions and some straightforward results. This is <a href=\"https://github.com/leanprover-community/mathlib4/pull/10531\">#10531</a>. The development of this PR and the PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/10515\">#10515</a> (defining cocardinal filters) will be done somewhat in tandem (in particular, design choices for the hypotheses).</p>",
        "id": 421494339,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707931194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> has marked this topic as resolved.</p>",
        "id": 421497187,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707932080
    }
]