[
    {
        "content": "<p>I have been having a hard time attacking this proof (sorry'd to save you from having to look at all the failed attempts!). </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.PresentedGroup</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rels</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"n\">α</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">relationsEquiv</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Equiv.Set.congr</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup.freeGroupCongr</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEquiv</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mapEq</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup.map</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup.freeGroupCongr</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.normalClosure</span> <span class=\"n\">rels</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Subgroup.normalClosure</span> <span class=\"o\">(</span><span class=\"n\">relationsEquiv</span> <span class=\"n\">e</span> <span class=\"n\">rels</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- tried `ext` etc but to no avail</span>\n</code></pre></div>\n<p>Anyone have any good ideas on how to attack this proof?  </p>\n<p>Also, does my use of <code>relationsEquiv</code> seem reasonable for pushing through the equivalence of types?</p>",
        "id": 409328449,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703143930
    },
    {
        "content": "<p>Why not simply using <code>e ''</code>?</p>",
        "id": 409338716,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703148347
    },
    {
        "content": "<p>Sorry, <code>(freeGroupCongr e) ''</code></p>",
        "id": 409338792,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703148369
    },
    {
        "content": "<p>Let me see if I can make some progress</p>",
        "id": 409339491,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703148643
    },
    {
        "content": "<p>I didn't try that so, yeah, maybe that will help.</p>",
        "id": 409341101,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703149112
    },
    {
        "content": "<p>Voilà</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rels</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"n\">α</span><span class=\"o\">)}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Subgroup</span> <span class=\"n\">FreeGroup</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">relationsEquiv</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Equiv.Set.congr</span> <span class=\"o\">(</span><span class=\"n\">freeGroupCongr</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEquiv</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mapEq</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.normalClosure</span> <span class=\"n\">rels</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">freeGroupCongr</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Subgroup.normalClosure</span> <span class=\"o\">((</span><span class=\"n\">freeGroupCongr</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">''</span> <span class=\"n\">rels</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Normal</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">((</span><span class=\"n\">freeGroupCongr</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.normalClosure</span> <span class=\"n\">rels</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">show</span> <span class=\"n\">Normal</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">((</span><span class=\"n\">freeGroupCongr</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toMonoidHom</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.normalClosure</span> <span class=\"n\">rels</span><span class=\"o\">))</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_equiv_eq_comap_symm</span><span class=\"o\">]</span>\n    <span class=\"n\">infer_instance</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_le_iff_le_comap</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">normalClosure_le_normal</span>\n    <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">hr</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">freeGroupCongr_apply</span><span class=\"o\">,</span> <span class=\"n\">coe_comap</span><span class=\"o\">,</span> <span class=\"n\">MonoidHom.coe_coe</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_preimage</span><span class=\"o\">,</span>\n      <span class=\"n\">SetLike.mem_coe</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subset_normalClosure</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_image</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Subgroup.normalClosure_le_normal</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">freeGroupCongr_apply</span><span class=\"o\">,</span> <span class=\"n\">coe_map</span><span class=\"o\">,</span> <span class=\"n\">MonoidHom.coe_coe</span><span class=\"o\">,</span> <span class=\"n\">Set.image_subset_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">hr</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_image</span><span class=\"o\">,</span> <span class=\"n\">SetLike.mem_coe</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">subset_normalClosure</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 409341984,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703149392
    },
    {
        "content": "<p>I didn't use <code>relationsEquiv</code>, but I guess the proof is the same.</p>",
        "id": 409342013,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703149408
    },
    {
        "content": "<p>The main point is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.normalClosure_le_normal#doc\">docs#Subgroup.normalClosure_le_normal</a>, all the rest is not very difficult</p>",
        "id": 409342200,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703149470
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 409342269,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703149496
    },
    {
        "content": "<p>I have never used ' ' before but now after all the pain I had ...I won't forget</p>",
        "id": 409342371,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703149538
    },
    {
        "content": "<p>It's just the image</p>",
        "id": 409342399,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703149548
    },
    {
        "content": "<p>I was going to PR this but since you found the proof, feel free</p>",
        "id": 409342577,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703149615
    },
    {
        "content": "<p>You can use my code, no problem</p>",
        "id": 409342627,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703149630
    },
    {
        "content": "<p>Anyway we should fix the statement of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.map_equiv_eq_comap_symm#doc\">docs#Subgroup.map_equiv_eq_comap_symm</a></p>",
        "id": 409342744,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703149673
    },
    {
        "content": "<p>It contains a weird <code>MulEquiv.toMonoidHom</code></p>",
        "id": 409342810,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703149685
    },
    {
        "content": "<p>Yeah that's because <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.map#doc\">docs#Subgroup.map</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.comap#doc\">docs#Subgroup.comap</a> take in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidHom#doc\">docs#MonoidHom</a>.</p>",
        "id": 409343050,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703149780
    },
    {
        "content": "<p>Sure, but if it were a coercion we can apply it directly I think</p>",
        "id": 409343303,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703149859
    },
    {
        "content": "<p>Like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subring.map_equiv_eq_comap_symm#doc\">docs#Subring.map_equiv_eq_comap_symm</a></p>",
        "id": 409343340,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703149870
    },
    {
        "content": "<p>The coercion ought to be syntactically equal though?</p>",
        "id": 409343378,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703149886
    },
    {
        "content": "<p>Hmm... I want the version that allows to avoid the <code>show</code> line above. Let me see</p>",
        "id": 409343573,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703149942
    },
    {
        "content": "<p>Something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rels</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"n\">α</span><span class=\"o\">)}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Subgroup</span> <span class=\"n\">FreeGroup</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Subgroup.map_equiv_eq_comap_symm'</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K.map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">K.comap</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">f.symm</span> <span class=\"o\">:=</span>\n  <span class=\"n\">SetLike.coe_injective</span> <span class=\"o\">(</span><span class=\"n\">f.toEquiv.image_eq_preimage</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mapEq</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.normalClosure</span> <span class=\"n\">rels</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">freeGroupCongr</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Subgroup.normalClosure</span> <span class=\"o\">((</span><span class=\"n\">freeGroupCongr</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">''</span> <span class=\"n\">rels</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Normal</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">((</span><span class=\"n\">freeGroupCongr</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.normalClosure</span> <span class=\"n\">rels</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_equiv_eq_comap_symm'</span><span class=\"o\">]</span>\n    <span class=\"n\">infer_instance</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_le_iff_le_comap</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">normalClosure_le_normal</span>\n    <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">hr</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">freeGroupCongr_apply</span><span class=\"o\">,</span> <span class=\"n\">coe_comap</span><span class=\"o\">,</span> <span class=\"n\">MonoidHom.coe_coe</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_preimage</span><span class=\"o\">,</span>\n      <span class=\"n\">SetLike.mem_coe</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subset_normalClosure</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_image</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Subgroup.normalClosure_le_normal</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">freeGroupCongr_apply</span><span class=\"o\">,</span> <span class=\"n\">coe_map</span><span class=\"o\">,</span> <span class=\"n\">MonoidHom.coe_coe</span><span class=\"o\">,</span> <span class=\"n\">Set.image_subset_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">hr</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_image</span><span class=\"o\">,</span> <span class=\"n\">SetLike.mem_coe</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">subset_normalClosure</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 409343981,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703150069
    },
    {
        "content": "<p>My question is: Are you sure the <code>show</code> was even needed in the first place?</p>",
        "id": 409344112,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703150125
    },
    {
        "content": "<p>Yes</p>",
        "id": 409344130,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703150133
    },
    {
        "content": "<p>Hmm, that's bad. Where is the coercion <code>(α ≃* β) → (α →* β)</code> defined?</p>",
        "id": 409344283,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703150178
    },
    {
        "content": "<p>The coercion used by Lean is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidHomClass.toMonoidHom#doc\">docs#MonoidHomClass.toMonoidHom</a></p>",
        "id": 409344447,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703150235
    },
    {
        "content": "<p>That is not <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulEquiv.toMonoidHom#doc\">docs#MulEquiv.toMonoidHom</a></p>",
        "id": 409344497,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703150250
    },
    {
        "content": "<p>of course they're definitionally equal</p>",
        "id": 409344539,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703150262
    },
    {
        "content": "<p>Ah yes, we still have to decide whether we want to keep those coercions in the first place</p>",
        "id": 409344716,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703150308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/proof.20ideas/near/409344716\">said</a>:</p>\n<blockquote>\n<p>Ah yes, we still have to decide whether we want to keep those coercions in the first place</p>\n</blockquote>\n<p>In the time being before this decision is made, for the PR I am putting together, should this include <code>Subgroup.map_equiv_eq_comap_symm'</code>?  The main theorem I am proving is the statement <code>PresentedGroup rels ≃* PresentedGroup ((freeGroupCongr e)'' rels)</code> but for generality the above changes probably should go in a new <code>section</code> in <code>Mathlib.GroupTheory.QuotientGroup</code> where <code>Subgroup.map_equiv_eq_comap_symm'</code> could be placed.  I can have a lemma in <code>PresentedGroup</code> using the above.</p>",
        "id": 409440356,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703182276
    },
    {
        "content": "<p>I think you'd do better to use <code>(freeGroupCongr e.symm ⁻¹' rels)</code> which usually has a better defeq</p>",
        "id": 409441606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703182733
    },
    {
        "content": "<p>Okay, will try that out, thanks.</p>",
        "id": 409444036,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703183801
    },
    {
        "content": "<p>In the process of generalizing the code and the below compiles fine by itself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">G'</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Subgroup</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Subgroup.map_equiv_eq_comap_symm''</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">K.map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">K.comap</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">f.symm</span> <span class=\"o\">:=</span>\n  <span class=\"n\">SetLike.coe_injective</span> <span class=\"o\">(</span><span class=\"n\">f.toEquiv.image_eq_preimage</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">normalClosure_map_equiv_eq_normalClosure_comap</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">normalClosure</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">normalClosure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Normal</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">normalClosure</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_equiv_eq_comap_symm'</span><span class=\"o\">]</span>\n    <span class=\"n\">infer_instance</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_le_iff_le_comap</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">normalClosure_le_normal</span>\n    <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">hr</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_comap</span><span class=\"o\">,</span> <span class=\"n\">MonoidHom.coe_coe</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">SetLike.mem_coe</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subset_normalClosure</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_image</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Subgroup.normalClosure_le_normal</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_map</span><span class=\"o\">,</span> <span class=\"n\">MonoidHom.coe_coe</span><span class=\"o\">,</span> <span class=\"n\">Set.image_subset_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">hr</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_image</span><span class=\"o\">,</span> <span class=\"n\">SetLike.mem_coe</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">subset_normalClosure</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>but when I put the associated lemmas in <code>Mathlib.GroupTheory.Subgroup.Basic</code> the <code>infer_instance</code> errors with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Normal</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">MulEquiv.symm</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">normalClosure</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Any ideas?</p>\n<p>For added (but probably irrelevant)  information I have put <code>normalClosure_map_equiv_eq_normalClosure_comap</code> below the other <code>normalClosure</code> lemmas in <code>Mathlib.GroupTheory.Subgroup.Basic</code>.</p>\n<p>Ah, seems that when I put it at the very bottom of the file it compiles fine...will try and find what is causing this!</p>",
        "id": 409462050,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703191620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/9185\">#9185</a></p>",
        "id": 409472597,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703196967
    },
    {
        "content": "<p>You can <code>#synth</code> the instance to find out where exactly in the file it is</p>",
        "id": 409491809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703206366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> when you get time for another look <a href=\"https://github.com/leanprover-community/mathlib4/pull/9185\">#9185</a></p>",
        "id": 410329626,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703789119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> what are your thoughts on what <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> said in the conversation for <a href=\"https://github.com/leanprover-community/mathlib4/pull/9185\">#9185</a>?  If possible,  I would like to get this PR merged as I have a couple other branches that could be made into PRs that are blocked on this.</p>\n<p>Actually, this brings up a question I have for others and what they do when you have multiple dependent PRs?  Is there one convention that most contributors use?</p>",
        "id": 410746841,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1704136539
    },
    {
        "content": "<p>This <code>toMonoidHom</code> vs <code>MonoidHomClass.coe</code> thing is a mess, though obviously not one of your making</p>",
        "id": 410747010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704136708
    },
    {
        "content": "<p>Mostly my making, but I'm not sure which way we should fix it <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 410747040,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704136749
    },
    {
        "content": "<p>Yes, understood on that front.  What about his second comment for the snippet he provided which would remove the equivalence assumption from the comap lemma?</p>",
        "id": 410747073,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1704136793
    },
    {
        "content": "<p>Just saw your comment, thanks!</p>",
        "id": 410747264,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1704136961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I say we can just do that in a follow up PR then.</p>",
        "id": 410747290,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1704137001
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9403\">#9403</a> is an easy extension of <a href=\"https://github.com/leanprover-community/mathlib4/pull/9185\">#9185</a> if anyone is up for a review</p>",
        "id": 411103057,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1704327950
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9403\">#9403</a> has been awaiting review for 2 weeks now.  Is there a better way to get a review besides pinging Zulip (which I did above as well but that didn't seem to help)?</p>",
        "id": 412751361,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1705184321
    },
    {
        "content": "<p>When I just looked at it, I saw that building failed (and maybe you just restarted CI just now?). Reviewers tend to look through <a href=\"https://bit.ly/3cKk3ld\">#queue</a>, which excludes PRs with failed builds.</p>",
        "id": 412752483,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705185416
    },
    {
        "content": "<p>Hi Newell. Sorry that your PR and messages seem to have been missed. One possible reason your PR hasn't gotten a review is that the latest commit on the PR had a red X, i.e. it wasn't passing CI. I took a look and it seemed to me that the failure was possibly an artifact from when our cache was broken so I've re-triggered the CI job just now. Hopefully your PR will soon pass CI and show up on the reviewers and maintainers' radar.</p>",
        "id": 412752492,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1705185422
    },
    {
        "content": "<p>I had suspected it might have been the build fail (which as you mentioned was due to the cache issues we faced two weeks ago) that was making it so it wasn't reviewed.  Thanks for the verification.</p>",
        "id": 412752794,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1705185650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I reverted the last commit but CI is failing on <em>check the cache</em>.  I have never seen this before.  Do you know if a new CI run needs to be re-triggered or is it something else?</p>",
        "id": 412765552,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1705194124
    },
    {
        "content": "<p>I'm not sure. Maybe try merging the master branch?</p>",
        "id": 412766143,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705194534
    },
    {
        "content": "<p>I'm trying to prove lemma vec_in_K by lemmas t1 and t2. The problem is that I do not know how to deal with summation in  Lean.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.PiL2</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Reflection</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.RowCol</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Finprod</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zero_vec</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">):</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">sumK</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">NNReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"n\">i</span>\n<span class=\"c1\">-- Define K cone 1.2</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">vmatrix</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sumK</span> <span class=\"n\">s</span> <span class=\"n\">vmatrix</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">s_lambda</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">NNReal</span><span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">t1</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">s_lambda</span> <span class=\"n\">i</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">vmatrix</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">vmatrix</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">s_lambda</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">t2</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">s_lambda</span> <span class=\"n\">i</span> <span class=\"n\">t</span> <span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">vmatrix</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">zero_vec</span> <span class=\"n\">n</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">s_lambda</span> <span class=\"n\">i</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">s_lambda</span><span class=\"o\">]</span>\n    <span class=\"n\">by_contra</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">zero_vec</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">zero_mul</span>\n<span class=\"c1\">-- all column vectors are in the cone</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">vec_in_K</span><span class=\"o\">(</span><span class=\"n\">i'</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">):</span> <span class=\"n\">vmatrix</span> <span class=\"n\">i'</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span> <span class=\"n\">vmatrix</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span>\n  <span class=\"n\">use</span> <span class=\"n\">s_lambda</span> <span class=\"n\">i'</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">sumK</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 436804778,
        "sender_full_name": "victoria",
        "timestamp": 1714701802
    },
    {
        "content": "<p>Don't mix <code>range m</code> and <code>Fin m</code>, these are two different ways of counting to m-1 and they're not <em>equal</em>.<br>\nTry</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sumK</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">NNReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>instead.</p>",
        "id": 437016179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714824078
    },
    {
        "content": "<p><code>Fin m</code> is a type, and <code>range m</code> is a term.</p>",
        "id": 437016392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714824204
    },
    {
        "content": "<p>I've changed range m into Fin m. But I'm still stuck on the proof of the lemma vec_in_K. Should I try something like \"cases\" here?</p>",
        "id": 437563715,
        "sender_full_name": "victoria",
        "timestamp": 1715135323
    },
    {
        "content": "<p>You should post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> so we can be stuck at exactly the same point as you</p>",
        "id": 438083699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715408239
    },
    {
        "content": "<p>Hi, i'm new here. i'm facing problem to solve this, anyone please help me to tackle this problem<br>\n<a href=\"/user_uploads/3121/ksudmmB-eGYFxAY7xuouTuUG/Screenshot-2024-05-15-023937.png\">Screenshot-2024-05-15-023937.png</a><br>\n2+2=4 ? how can I solve this one?<br>\nnatural number game</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ksudmmB-eGYFxAY7xuouTuUG/Screenshot-2024-05-15-023937.png\" title=\"Screenshot-2024-05-15-023937.png\"><img src=\"/user_uploads/3121/ksudmmB-eGYFxAY7xuouTuUG/Screenshot-2024-05-15-023937.png\"></a></div>",
        "id": 438687135,
        "sender_full_name": "Jawad Ali",
        "timestamp": 1715733708
    },
    {
        "content": "<p>Hi, I am New here, i need your help regarding proving the 2+2=4 ??? how can I tackle this problem?</p>",
        "id": 438687911,
        "sender_full_name": "Jawad Ali",
        "timestamp": 1715734170
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works. Do you mean in the natural numbers game?</p>",
        "id": 438689884,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1715735364
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/proof.20ideas/near/438687135\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/generalize_proofs.20failed\">#general &gt; generalize_proofs failed</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 438690018,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715735439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"712445\">@Jawad Ali</span> I moved the context of your question here. (It appears before the message that Rida initially saw.)</p>",
        "id": 438690076,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715735485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"580947\">Rida Hamadani</span> <a href=\"#narrow/stream/113489-new-members/topic/proof.20ideas/near/438689884\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works. Do you mean in the natural numbers game?</p>\n</blockquote>\n<p>yes in natural number game</p>",
        "id": 438690112,
        "sender_full_name": "Jawad Ali",
        "timestamp": 1715735515
    },
    {
        "content": "<p>you can check this SS as well<br>\n<a href=\"/user_uploads/3121/lq1jfLNXocSU-AUzIshqPJ5N/Screenshot-2024-05-15-023937.png\">Screenshot-2024-05-15-023937.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lq1jfLNXocSU-AUzIshqPJ5N/Screenshot-2024-05-15-023937.png\" title=\"Screenshot-2024-05-15-023937.png\"><img src=\"/user_uploads/3121/lq1jfLNXocSU-AUzIshqPJ5N/Screenshot-2024-05-15-023937.png\"></a></div>",
        "id": 438690222,
        "sender_full_name": "Jawad Ali",
        "timestamp": 1715735573
    },
    {
        "content": "<p>Can you rewrite both sides of the equation as <code>succ(succ(succ(1)))</code>?</p>",
        "id": 438690774,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1715735911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"580947\">Rida Hamadani</span> <a href=\"#narrow/stream/113489-new-members/topic/proof.20ideas/near/438690774\">said</a>:</p>\n<blockquote>\n<p>Can you rewrite both sides of the equation as <code>succ(succ(succ(1)))</code>?</p>\n</blockquote>\n<p>BTW how can I do that?</p>",
        "id": 438690883,
        "sender_full_name": "Jawad Ali",
        "timestamp": 1715735988
    },
    {
        "content": "<p>First, use the lemmas for <code>4 = succ 3</code>, <code>3 = succ 2</code>, and <code>2 = succ 1</code>.<br>\nYou should end up with <code>succ 1 + succ 1 = succ (succ (succ 1))</code><br>\nAfter that, you can use the lemma you proved in the previous level.</p>",
        "id": 438691139,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1715736152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"580947\">Rida Hamadani</span> <a href=\"#narrow/stream/113489-new-members/topic/proof.20ideas/near/438691139\">said</a>:</p>\n<blockquote>\n<p>First, use the lemmas for <code>4 = succ 3</code>, <code>3 = succ 2</code>, and <code>2 = succ 1</code>.<br>\nYou should end up with <code>succ 1 + succ 1 = succ (succ (succ 1))</code><br>\nAfter that, you can use the lemma you proved in the previous level.</p>\n</blockquote>\n<p>succ1+succ 1= succ(succ(succ1)) how can I solve this? so sorry for more questions</p>",
        "id": 438693190,
        "sender_full_name": "Jawad Ali",
        "timestamp": 1715737508
    },
    {
        "content": "<p>Have you tried <code>add_succ</code>? After that you will only need 1 more step.</p>",
        "id": 438693724,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1715737815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"580947\">Rida Hamadani</span> <a href=\"#narrow/stream/113489-new-members/topic/proof.20ideas/near/438693724\">said</a>:</p>\n<blockquote>\n<p>Have you tried <code>add_succ</code>? After that you will only need 1 more step.</p>\n</blockquote>\n<p>yes I tried, succ (succ 1 + 1) = succ (succ (succ 1))?</p>",
        "id": 438693846,
        "sender_full_name": "Jawad Ali",
        "timestamp": 1715737894
    },
    {
        "content": "<p>That's the equality provided by <code>succ_eq_add_one</code></p>",
        "id": 438693935,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1715737936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"580947\">Rida Hamadani</span> <a href=\"#narrow/stream/113489-new-members/topic/proof.20ideas/near/438693935\">said</a>:</p>\n<blockquote>\n<p>That's the equality provided by <code>succ_eq_add_one</code></p>\n</blockquote>\n<p>still stuck with this problem: succ 1 + 1 + 1 = succ (succ (succ 1))</p>",
        "id": 438699161,
        "sender_full_name": "Jawad Ali",
        "timestamp": 1715739945
    },
    {
        "content": "<p>Use the other side of the equality in <code>succ_eq_add_one</code></p>",
        "id": 438699579,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1715740068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"580947\">Rida Hamadani</span> <a href=\"#narrow/stream/113489-new-members/topic/proof.20ideas/near/438699579\">said</a>:</p>\n<blockquote>\n<p>Use the other side of the equality in <code>succ_eq_add_one</code></p>\n</blockquote>\n<p>Finally its done, Thanks you so much<br>\n<span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 438700313,
        "sender_full_name": "Jawad Ali",
        "timestamp": 1715740299
    }
]