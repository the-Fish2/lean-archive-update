[
    {
        "content": "<p>The following code errors with a message - The Type universes are in u + 2 instead of u + 1 which is how inductive types must be smaller than or equal to universe level 1</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">DecodingErr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">JErr</span> <span class=\"o\">:</span> <span class=\"n\">JSONErr</span> <span class=\"bp\">â†’</span> <span class=\"n\">DecodingErr</span>\n<span class=\"bp\">|</span> <span class=\"n\">JParseErr</span> <span class=\"o\">:</span> <span class=\"n\">Prod</span> <span class=\"n\">FileContext</span> <span class=\"n\">ParseErr</span> <span class=\"bp\">â†’</span> <span class=\"n\">DecodingErr</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>error:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error:<span class=\"w\"> </span>invalid<span class=\"w\"> </span>universe<span class=\"w\"> </span>level<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>constructor<span class=\"w\"> </span><span class=\"s1\">'DecodingErr.JParseErr'</span>,<span class=\"w\"> </span>parameter<span class=\"w\"> </span><span class=\"s1\">'ParseErr'</span><span class=\"w\"> </span>has<span class=\"w\"> </span><span class=\"nb\">type</span>\n<span class=\"w\">  </span>Type<span class=\"w\"> </span>?u.13626\nat<span class=\"w\"> </span>universe<span class=\"w\"> </span>level\n<span class=\"w\">  </span>?u.13626+2\nit<span class=\"w\"> </span>must<span class=\"w\"> </span>be<span class=\"w\"> </span>smaller<span class=\"w\"> </span>than<span class=\"w\"> </span>or<span class=\"w\"> </span>equal<span class=\"w\"> </span>to<span class=\"w\"> </span>the<span class=\"w\"> </span>inductive<span class=\"w\"> </span>datatype<span class=\"w\"> </span>universe<span class=\"w\"> </span>level\n<span class=\"w\">  </span><span class=\"m\">1</span>\n</code></pre></div>\n<p>Can anyone point me to a direction where I can correct this error?<br>\nThe implementations of the other data types are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Bounds</span> <span class=\"n\">where</span>\n  <span class=\"n\">startLine</span><span class=\"o\">:</span> <span class=\"n\">Int</span>\n  <span class=\"n\">startCol</span><span class=\"o\">:</span> <span class=\"n\">Int</span>\n  <span class=\"n\">endLine</span><span class=\"o\">:</span> <span class=\"n\">Int</span>\n  <span class=\"n\">endCol</span><span class=\"o\">:</span> <span class=\"n\">Int</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">FileContext</span> <span class=\"n\">where</span>\n  <span class=\"n\">file</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">range</span> <span class=\"o\">:</span> <span class=\"n\">Bounds</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>",
        "id": 434557505,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1713672854
    },
    {
        "content": "<p><code>JSONErr</code> and <code>ParseErr</code> are autoimplicits in this code. Did you intend to refer to some pre-existing types?</p>",
        "id": 434557741,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1713673148
    },
    {
        "content": "<p>If I make them explicit, perhaps the error is clearer</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bounds</span> <span class=\"n\">where</span>\n  <span class=\"n\">startLine</span><span class=\"o\">:</span> <span class=\"n\">Int</span>\n  <span class=\"n\">startCol</span><span class=\"o\">:</span> <span class=\"n\">Int</span>\n  <span class=\"n\">endLine</span><span class=\"o\">:</span> <span class=\"n\">Int</span>\n  <span class=\"n\">endCol</span><span class=\"o\">:</span> <span class=\"n\">Int</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">FileContext</span> <span class=\"n\">where</span>\n  <span class=\"n\">file</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">range</span> <span class=\"o\">:</span> <span class=\"n\">Bounds</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">DecodingErr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">JErr</span> <span class=\"o\">{</span><span class=\"n\">JSONErr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">JSONErr</span> <span class=\"bp\">â†’</span> <span class=\"n\">DecodingErr</span>\n<span class=\"bp\">|</span> <span class=\"n\">JParseErr</span> <span class=\"o\">{</span><span class=\"n\">ParseErr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Prod</span> <span class=\"n\">FileContext</span> <span class=\"n\">ParseErr</span> <span class=\"bp\">â†’</span> <span class=\"n\">DecodingErr</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>",
        "id": 434557815,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1713673233
    },
    {
        "content": "<p>Here the <code>JErr</code> constructor takes two parameters, one of which is a <code>Type</code>. Since <code>DecodingError</code> can store types in <code>Type</code>, it might be in at least <code>Type 1</code></p>",
        "id": 434557877,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1713673319
    },
    {
        "content": "<p>yeah the <code>JSONErr</code> is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">JSONErr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Prod</span> <span class=\"n\">JSONPath</span> <span class=\"n\">String</span>\n</code></pre></div>\n<p>and <code>ParseErr</code> is something that I haven't define yet so maybe using explict option might be the better first step.<br>\nI always forget to add this to every project.<br>\nThanks for reminding me!</p>",
        "id": 434557932,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1713673339
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">ParseErr'</span>\n</code></pre></div>\n<p>better</p>",
        "id": 434557950,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1713673378
    }
]