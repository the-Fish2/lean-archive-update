[
    {
        "content": "<p>Hello, I am trying to formalize some basic Neyman-Pearson theory in lean. I came up with the following basic<br>\ndefinitions.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">StatisticalSpace</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span> <span class=\"n\">where</span>\n  <span class=\"n\">DistributionAssumption'</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ProbabilityMeasure</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">DistributionAssumption</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">StatisticalSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ProbabilityMeasure</span> <span class=\"bp\">Ω</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">hS.DistributionAssumption'</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>What  I got stuck at is defining a specific statistical space with exactly two distributions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">SimpleStatisticalSpace</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">StatisticalSpace</span> <span class=\"bp\">Ω</span> <span class=\"n\">where</span>\n  <span class=\"n\">P₀</span> <span class=\"o\">:</span> <span class=\"n\">ProbabilityMeasure</span> <span class=\"bp\">Ω</span>\n  <span class=\"n\">P₁</span> <span class=\"o\">:</span> <span class=\"n\">ProbabilityMeasure</span> <span class=\"bp\">Ω</span>\n  <span class=\"n\">unique</span> <span class=\"o\">:</span> <span class=\"n\">P₀</span> <span class=\"bp\">≠</span> <span class=\"n\">P₁</span>\n  <span class=\"n\">DistributionAssumption'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">P₀</span><span class=\"o\">,</span> <span class=\"n\">P₁</span><span class=\"o\">}</span>\n  <span class=\"n\">DistributionAssumption'_def</span>  <span class=\"o\">:</span> <span class=\"n\">DistributionAssumption'</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">P₀</span><span class=\"o\">,</span> <span class=\"n\">P₁</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm not sure if its possible to prove  <code>DistributionAssumption'_def </code>.  The proof does not have to be a part of<br>\nthe class of course, but I need some way to access <code>P0</code> and <code>P1</code> as <code>DistributionAssumption \\Omega</code>.<br>\nMaybe a class is not the best choice here?</p>\n<p>Something that was adding to my confusion about this is that none of the following report any errors/warnings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">MyClass</span> <span class=\"n\">where</span>\n  <span class=\"n\">MySet</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n  <span class=\"n\">MySet_def</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MyClass'</span> <span class=\"n\">where</span>\n  <span class=\"n\">MySet</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n  <span class=\"n\">MySet_def</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MyClass''</span> <span class=\"n\">where</span>\n  <span class=\"n\">MySet</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n  <span class=\"n\">MySet_def</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rewrite</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p>I assume that a proof term is expected here, but there should still be an error (maybe my lean version is outdated).</p>",
        "id": 418578683,
        "sender_full_name": "Marmare314",
        "timestamp": 1706514012
    }
]