[
    {
        "content": "<p>I have these as assumptions:<br>\nh3: x ∈ B ∨ x ∈ C<br>\nh0: x ∉ B<br>\nMy Goal is:<br>\nx ∈ C<br>\nHow do you recommend to complete the proof?</p>",
        "id": 417026541,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1705787141
    },
    {
        "content": "<p><code>rw? at h3</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">or_iff_right</span> <span class=\"n\">h0</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n</code></pre></div>",
        "id": 417026827,
        "sender_full_name": "Richard Copley",
        "timestamp": 1705787387
    },
    {
        "content": "<p>Thank you it worked. <br>\nWhat do rwa, propext and or_iff_right do here?</p>",
        "id": 417026998,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1705787524
    },
    {
        "content": "<p>Can you check their docstrings and come back if you still have question?</p>",
        "id": 417027098,
        "sender_full_name": "Richard Copley",
        "timestamp": 1705787619
    },
    {
        "content": "<p>The <code>propext</code> is weird. It would be better to just omit it (and don't worry about what it means until you need to).<br>\n<code>rwa</code> is <code>rw</code> followed by <code>assumption</code>.<br>\n<code>or_iff_right</code> is an ordinary theorem that you can look up.</p>\n<p>I just wanted to show you that you could use the library-search <code>rw?</code> to make progress here. A proof that is easier to read (but unnecessarily long) is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">or_iff_right</span> <span class=\"n\">h0</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h3</span>\n</code></pre></div>",
        "id": 417027645,
        "sender_full_name": "Richard Copley",
        "timestamp": 1705788063
    },
    {
        "content": "<p>I wonder why library search doesn't find this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Or.resolve_left</span> <span class=\"n\">h3</span> <span class=\"n\">h0</span>\n</code></pre></div>",
        "id": 417028034,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705788373
    },
    {
        "content": "<p><code>tauto</code> should work too, and I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Or.resolve_left#doc\">docs#Or.resolve_left</a> (that is, <code>exact Or.resolve_left h3 h0</code>, which can also be spelt <code>h3.resolve_left h0</code>)</p>",
        "id": 417028040,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1705788381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20do.20this.20in.20Lean.3F/near/417028034\">said</a>:</p>\n<blockquote>\n<p>I wonder why library search doesn't find this</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Or.resolve_left</span> <span class=\"n\">h3</span> <span class=\"n\">h0</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Funnily enough, <code>std_exact?</code> does</p>",
        "id": 417028343,
        "sender_full_name": "Richard Copley",
        "timestamp": 1705788659
    },
    {
        "content": "<p>One more stupid question, I am sorry:<br>\nIf you have:<br>\nh: x ∈ A<br>\nh4: x ∈ C<br>\nHow do you prove your Goal:<br>\nx ∈ A ∧ x ∈ C</p>",
        "id": 417029559,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1705789703
    },
    {
        "content": "<p><code>exact \\&lt; h, h4 \\&gt;</code></p>",
        "id": 417032352,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705792394
    },
    {
        "content": "<p>or <code>constructor; exact h; exact h4</code></p>",
        "id": 417032364,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705792408
    },
    {
        "content": "<p>Or <code>exact And.intro h h4</code>.</p>",
        "id": 417100431,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1705854445
    },
    {
        "content": "<p>For your original question in this thread, another possibility would have been to break your proof into cases, based on <code>h3 : x ∈ B ∨ x ∈ C</code>.  In the first case you can use proof by contradiction to prove the goal, and in the second you already have the goal as an assumption.</p>",
        "id": 417102516,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1705856196
    }
]