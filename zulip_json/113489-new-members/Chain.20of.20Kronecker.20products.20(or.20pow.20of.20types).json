[
    {
        "content": "<p>I want to define a simple function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Kronecker</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">chain_kronecker_hom</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"n\">U</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">d</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">U</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">kronecker</span> <span class=\"n\">U</span>  <span class=\"o\">(</span><span class=\"n\">chain_kronecker_hom</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, the return type, specifically the <code>(l ^ d)</code> and <code>(m ^ d)</code> part give me an error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HPow</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.38</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"bp\">?</span><span class=\"n\">m.67</span>\n</code></pre></div>\n<p>My guess is that matrix indices are defined very generally so that Lean doesn't know how to synthesize the power of a general type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Mathlib/Data/Matrix/Basic.lean</span>\n<span class=\"kd\">def</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">u'</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n  <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">matrix</span> <span class=\"n\">Matrix</span>\n</code></pre></div>\n<p>Two questions:</p>\n<ol>\n<li>Is the problem due to the matrix entry types?</li>\n<li>Why matrix entries are defined so broadly?</li>\n</ol>",
        "id": 418331660,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706294418
    },
    {
        "content": "<p>Here <code>m</code> and <code>n</code> are <em>types</em>, not natural numbers, so <code>m ^ d</code> isn't defined. Something like <code>Fin d → m</code> is what you would want instead.</p>",
        "id": 418332396,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706294733
    },
    {
        "content": "<p>But are you just trying to work with tensor products? We have those.</p>",
        "id": 418332539,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706294800
    },
    {
        "content": "<p>Got it, it's pretty obvious. Yeah, I think I confused myself <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 418332545,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706294804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Matrix.20entries.20defined.20very.20generally/near/418332539\">said</a>:</p>\n<blockquote>\n<p>But are you just trying to work with tensor products? We have those.</p>\n</blockquote>\n<p>Yeah, I want to define several utility functions to make it more convenient. Maybe I can contribute them to <code>Mathlib.Data.Matrix.Kronecker</code>? (Depends on if other people think they are useful)</p>\n<p>Specifically, there are 2 I am thinking:</p>\n<ol>\n<li>define a chain Kronecker product on a list of matrices.</li>\n<li>define a Kronecker product on 2 Sets of matrices, i.e, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>C</mi><mo>:</mo><mi>S</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo>:</mo><mi>S</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">)</mo><msub><mo>⊗</mo><mi>k</mi></msub><mo stretchy=\"false\">(</mo><mi>B</mi><mo>:</mo><mi>S</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>a</mi><msub><mo>⊗</mo><mi>k</mi></msub><mi>b</mi><mi mathvariant=\"normal\">∣</mi><mi>a</mi><mo>∈</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>b</mi><mo>∈</mo><mi>B</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">(C: Set) := (A: Set) \\otimes_k (B: Set) := \\{a \\otimes_k b | a \\in A, b \\in B\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">}</span></span></span></span>.</li>\n</ol>",
        "id": 418333243,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706295120
    },
    {
        "content": "<p>I know why I was confused: In Mathlib/Data/Matrix/Kronecker.lean, we have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Mathlib/Data/Matrix/Kronecker.lean</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">kronecker</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">kroneckerMap</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">matrix.kronecker</span> <span class=\"n\">Matrix.kronecker</span>\n</code></pre></div>\n<p>In return type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">l \\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>×</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">m \\times p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> are type product, but I thought they are value product. Now my new question is, is there a <code>power</code> operation on types? i.e. , <code>l^d</code>, meaning (l, l, l, ...) for <code>d</code> times. In that way, I can define a chain of Kronecker products with length <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>.</p>",
        "id": 418338921,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706297352
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 418338949,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706297366
    },
    {
        "content": "<p>You can already write (2) as <code>Set.image2 (· ⊗ₖ ·) A B</code>.</p>",
        "id": 418350625,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706302903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Chain.20of.20Kronecker.20products.20.28or.20pow.20of.20types.29/near/418350625\">said</a>:</p>\n<blockquote>\n<p>You can already write (2) as <code>Set.image2 (· ⊗ₖ ·) A B</code>.</p>\n</blockquote>\n<p>Right, I thought I couldn't do (2) and opened another <a href=\"#narrow/stream/113489-new-members/topic/Set.20operation.20with.202.20inputs.20are.20not.20supported\">topic</a> and Kyle Miller helped resolved it.</p>",
        "id": 418350806,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706302971
    },
    {
        "content": "<p>Also, your <code>chain_kronecker_hom</code> should be expressible with <code>Nat.iterate</code></p>",
        "id": 418351218,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706303175
    },
    {
        "content": "<p>something like <code>(U ⊗ₖ ·)^[d] 1</code></p>",
        "id": 418351487,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706303348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Chain.20of.20Kronecker.20products.20.28or.20pow.20of.20types.29/near/418351218\">said</a>:</p>\n<blockquote>\n<p>Also, your <code>chain_kronecker_hom</code> should be expressible with <code>Nat.iterate</code></p>\n</blockquote>\n<p>For the question of <code>power</code> of types, I guess, for that kind of complicated types, we can just leave them out in return type signatures?</p>",
        "id": 418351541,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706303391
    },
    {
        "content": "<p>l^d is <code>Fin d -&gt; l</code>, I think</p>",
        "id": 418351612,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706303415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Chain.20of.20Kronecker.20products.20.28or.20pow.20of.20types.29/near/418351612\">said</a>:</p>\n<blockquote>\n<p>l^d is <code>Fin d -&gt; l</code>, I think</p>\n</blockquote>\n<p>I see. That's what <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> mentioned earlier and I didn't understand it. Thanks!</p>",
        "id": 418351670,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706303450
    },
    {
        "content": "<p>I will piggyback another question here. Do we have ways to coerce <code>Fin a x Fin b</code> to <code>Fin a * b</code>? I find it a bit annoying that the returned Matrix of Kronecker product is of type <code>Fin a x Fin b</code> instead of <code>Fin a * b</code>.</p>",
        "id": 418351838,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706303543
    },
    {
        "content": "<p>I'm wrong about <code>Nat.iterate</code> because the types are changing, my bad.</p>",
        "id": 418352134,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706303721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Chain.20of.20Kronecker.20products.20.28or.20pow.20of.20types.29/near/418351612\">said</a>:</p>\n<blockquote>\n<p>l^d is <code>Fin d -&gt; l</code>, I think</p>\n</blockquote>\n<p>Where can I find the documentation for this?</p>",
        "id": 418352595,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706303964
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 418352623,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706303981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Chain.20of.20Kronecker.20products.20.28or.20pow.20of.20types.29/near/418352623\">said</a>:</p>\n<blockquote>\n<p>What do you mean?</p>\n</blockquote>\n<p>Where is this syntax documented? I want to understand it a bit more...</p>",
        "id": 418352735,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706304016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Chain.20of.20Kronecker.20products.20.28or.20pow.20of.20types.29/near/418352134\">said</a>:</p>\n<blockquote>\n<p>I'm wrong about <code>Nat.iterate</code> because the types are changing, my bad.</p>\n</blockquote>\n<p>I thought <code>kronecker</code> is polymorphic?</p>",
        "id": 418352781,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706304036
    },
    {
        "content": "<p><code>Fin d</code> is the type with <code>d</code> elements. So a function from <code>Fin d</code> to <code>l</code> is an assignment of <code>d</code> elements of <code>l</code> (i.e., a <code>d</code>-tuple in <code>l</code>).</p>",
        "id": 418352824,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706304061
    },
    {
        "content": "<p><code>Fin d → l</code> is just the standard function syntax.</p>",
        "id": 418352845,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706304072
    },
    {
        "content": "<p><code>Matrix.kronecker</code> is polymorphic, but <code>Nat.iterate</code> iterates a function of type <code>α → α</code>.</p>",
        "id": 418352997,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706304152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Chain.20of.20Kronecker.20products.20.28or.20pow.20of.20types.29/near/418352824\">said</a>:</p>\n<blockquote>\n<p><code>Fin d</code> the type with <code>d</code> elements. So a function from <code>Fin d</code> to <code>l</code> is an assignment of <code>d</code> elements of <code>l</code> (i.e., a <code>d</code>-tuple in <code>l</code>).</p>\n</blockquote>\n<p>I must be short-circuited. <code>Fin d → l</code> is a type signature for a function that takes an argument of <code>Fin d</code> and returns a output of <code>l</code>, right? How is it related to <code>l^d</code>?</p>",
        "id": 418353273,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706304315
    },
    {
        "content": "<p>Are we talking about different <code>Fin</code>? This is the <code>Fin</code> definition I see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">natural</span> <span class=\"n\">number</span> <span class=\"bp\">`</span><span class=\"n\">i</span><span class=\"bp\">`</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">constraint</span> <span class=\"n\">that</span> <span class=\"bp\">`</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">`.</span>\n<span class=\"n\">It</span> <span class=\"n\">is</span> <span class=\"n\">the</span> <span class=\"s2\">\"canonical type with `n` elements\"</span><span class=\"bp\">.</span>\n<span class=\"bp\">-/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- If `i : Fin n`, then `i.val : ℕ` is the described number. It can also be</span>\n<span class=\"sd\">  written as `i.1` or just `i` when the target type is known. -/</span>\n  <span class=\"n\">val</span>  <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"sd\">/-- If `i : Fin n`, then `i.2` is a proof that `i.1 &lt; n`. -/</span>\n  <span class=\"n\">isLt</span> <span class=\"o\">:</span> <span class=\"n\">LT.lt</span> <span class=\"n\">val</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 418353508,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706304464
    },
    {
        "content": "<p>A function from <code>Fin d</code> is exactly an ordered <code>d</code>-tuple.</p>",
        "id": 418353820,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706304635
    },
    {
        "content": "<p>Don't you write elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>l</mi><mi>d</mi></msup></mrow><annotation encoding=\"application/x-tex\">l^d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mrow><mi>d</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_0, \\dots, x_{d-1})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 418353885,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706304672
    },
    {
        "content": "<p>How is that different from a function from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>d</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0, \\dots, d-1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>?</p>",
        "id": 418353926,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706304702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Thanks! I was indeed short-circuited :D.</p>",
        "id": 418354142,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706304818
    },
    {
        "content": "<p>We even have tuple notation for <code>Fin d → l</code>, e.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 418355077,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706305287
    },
    {
        "content": "<p>This is a very common short-circuit. Many people get taught that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>l</mi><mi>d</mi></msup></mrow><annotation encoding=\"application/x-tex\">l^d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span></span></span></span> is defined by induction with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>l</mi><mn>1</mn></msup><mo>=</mo><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l^1 = l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>l</mi><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mi>l</mi><mi>d</mi></msup><mo>×</mo><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l^{d+1} = l^d \\times l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9324em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>. But of course this is a joke. Nobody seriously believe that elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>l</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">l^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> look like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">((a, b), c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">((</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 418356598,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706306147
    },
    {
        "content": "<p>Yeah, that's a fair joke. </p>\n<p>I think I was mostly tricked by the type signature of <code>kronecker</code> which is <code>l x m</code> (which is an explicit construction --- an actual tuple). This tricked me into thinking that I will need an actual tuple here instead of a way to describe a tuple.</p>",
        "id": 418357267,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706306527
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 418357468,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706306653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671093\">Yunong Shi</span> <a href=\"#narrow/stream/113489-new-members/topic/Chain.20of.20Kronecker.20products.20.28or.20pow.20of.20types.29/near/418351838\">said</a>:</p>\n<blockquote>\n<p>I will piggyback another question here. Do we have ways to coerce <code>Fin a x Fin b</code> to <code>Fin a * b</code>? I find it a bit annoying that the returned Matrix of Kronecker product is of type <code>Fin a x Fin b</code> instead of <code>Fin a * b</code>.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finProdFinEquiv#doc\">docs#finProdFinEquiv</a></p>",
        "id": 418358544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706307331
    }
]