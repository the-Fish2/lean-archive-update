[
    {
        "content": "<p>Hi! I am  a layman in type theory, got some naive impresion that \"every type is a term but some term is a type\", while in the following code we cannot treat β as a type?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"c1\">-- type expected, got</span>\n<span class=\"c1\">--   (β : α)</span>\n</code></pre></div>",
        "id": 435746015,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1714215206
    },
    {
        "content": "<p>But this work with some inductive family:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">v</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">TermAsType</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">TermAsType</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">TermAsType</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 435746439,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1714215588
    },
    {
        "content": "<p>Any reason for this? why do we need some explicit inductive for treating terms of α as a type?</p>",
        "id": 435746553,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1714215649
    },
    {
        "content": "<p><code>β</code> might not be a type (eg if <code>α</code> is Nat and <code>β</code> is 37). But <code>TermAsType β</code> is a type because <code>TermAsType</code> eats a term and returns a type.</p>",
        "id": 435754417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714221891
    },
    {
        "content": "<p>Yeah intuitively it seems working in this way. I get it that a term is a type only if it’s a term of some <code>type u</code>. Btw I quoted “everything is a term. But some terms are types” from <a href=\"https://xenaproject.wordpress.com/2020/06/20/mathematics-in-type-theory/\">https://xenaproject.wordpress.com/2020/06/20/mathematics-in-type-theory/</a> . Thank you very much Kevin<span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 435757413,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1714224595
    }
]