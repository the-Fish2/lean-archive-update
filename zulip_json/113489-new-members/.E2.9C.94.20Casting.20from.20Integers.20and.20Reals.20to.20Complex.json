[
    {
        "content": "<p>I'm trying to define the complex numbers, and I'm currently pretty lost trying to make notation / type coercion work properly.</p>\n<p>In particular, I would like to make</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>work, but it just seems impossible (it works with 0, 1, and -1 but that's probably because my complex numbers have instances of <code>Zero</code>, <code>One</code> and <code>Neg</code>).</p>\n<p>I already tried to add a <code>Coe ℝ ℂ₁</code> instance, but that doesn't seem sufficient. I also tried adding <code>instance (n : ℕ) : OfNat ℂ₁ n</code>, but that doesn't seem to help much, and I can't figure out how to eliminate <code>ofNat</code> in theorems (e.g. I was trying to prove <code>(OfNat.ofNat n : ℂ₁) = ⟨n, 0⟩</code>, but I can't get Lean to replace <code>ofNat</code> with the definition).</p>",
        "id": 433156324,
        "sender_full_name": "Tainnor",
        "timestamp": 1713120711
    },
    {
        "content": "<p>A coercion from the reals to the complexes won't help because 2 is a <em>numeral</em>, not a real number. You're definitely on the right lines with OfNat but I would have thought that once the complexes are a field then stuff like this should all work out of the box, shouldn't it?</p>",
        "id": 433159572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713123563
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">-- if I'm a field</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- ...then numerals work automatically</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"c1\">-- no error</span>\n</code></pre></div>",
        "id": 433159661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713123638
    },
    {
        "content": "<p><code>example : (2 : ℂ) = ⟨2, 0⟩ := rfl -- works fine</code> so one approach is just to look at what's going on in the file where the complexes are defined. But you would be better off either (a) making a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> or (b) being much clearer about \"but it just seems impossible\" -- a better thing to say there would be \"and I got this error which I don't understand but which other people might: ...\". Of course your claim is false because it's certainly not impossible.</p>",
        "id": 433159771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713123745
    },
    {
        "content": "<p>I'm sorry for being so vague. What I meant with \"it seems impossible\" was \"I tried to make a lot of different things work and nothing would work\", so I got frustrated and I thought that I was missing some fundamental concept. I understand that this doesn't help much. A lot of this is still confusing to me.</p>\n<p>I did take a look at the definition of complex numbers in mathlib, but it's full of things I don't understand, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">ofReal_ofNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">n.AtLeastTwo</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">ofReal'</span> <span class=\"o\">(</span><span class=\"n\">no_index</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>so I was hoping there'd be a simpler way.</p>",
        "id": 433163777,
        "sender_full_name": "Tainnor",
        "timestamp": 1713127677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Casting.20from.20Integers.20and.20Reals.20to.20Complex/near/433159572\">said</a>:</p>\n<blockquote>\n<p>I would have thought that once the complexes are a field then stuff like this should all work out of the box, shouldn't it?</p>\n</blockquote>\n<p>Doesn't seem to work for me. Here's my (hopefully small enough) MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n\n<span class=\"c1\">-- Definition of C</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Complex₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">im</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Complex₁.mk</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ℂ₁\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Complex₁</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Complex₁</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_re</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_im</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">one_re</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">one_im</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">z.re</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">z.im</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">neg_def</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">z.re</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">z.im</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">neg_re</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">neg_im</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">z.im</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">z.re</span> <span class=\"bp\">+</span> <span class=\"n\">w.re</span><span class=\"o\">,</span> <span class=\"n\">z.im</span> <span class=\"bp\">+</span> <span class=\"n\">w.im</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_def</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">z.re</span> <span class=\"bp\">+</span> <span class=\"n\">w.re</span><span class=\"o\">,</span> <span class=\"n\">z.im</span> <span class=\"bp\">+</span> <span class=\"n\">w.im</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_re</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"n\">z.re</span> <span class=\"bp\">+</span> <span class=\"n\">w.re</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_im</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"n\">z.im</span> <span class=\"bp\">+</span> <span class=\"n\">w.im</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span> <span class=\"bp\">-</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span><span class=\"o\">,</span> <span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_def</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span> <span class=\"bp\">-</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span><span class=\"o\">,</span> <span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_re</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span> <span class=\"bp\">-</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_im</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_def</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">z.re</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">z.im</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_re</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"n\">z.re</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_im</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">z.im</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_re_sq_im_sq_nonneg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">sq_nonneg</span> <span class=\"n\">a.re</span><span class=\"o\">,</span> <span class=\"n\">sq_nonneg</span> <span class=\"n\">a.im</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_re_sq_im_sq_pos_of_nz</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">anz</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">a.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">arez</span> <span class=\"o\">:</span> <span class=\"n\">a.re</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">.</span> <span class=\"n\">by_cases</span> <span class=\"n\">aimz</span> <span class=\"o\">:</span> <span class=\"n\">a.im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exfalso</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n      <span class=\"n\">exact</span> <span class=\"n\">anz</span> <span class=\"n\">this</span>\n    <span class=\"bp\">.</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">sq_nonneg</span> <span class=\"n\">a.re</span><span class=\"o\">,</span> <span class=\"n\">sq_pos_of_ne_zero</span> <span class=\"n\">_</span> <span class=\"n\">aimz</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">sq_nonneg</span> <span class=\"n\">a.im</span><span class=\"o\">,</span> <span class=\"n\">sq_pos_of_ne_zero</span> <span class=\"n\">_</span> <span class=\"n\">arez</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- C is field</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">+</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">add_assoc</span><span class=\"o\">)</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"n\">nsmulRec</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">*</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n  <span class=\"n\">zsmul</span> <span class=\"o\">:=</span> <span class=\"n\">zsmulRec</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">.⁻¹</span><span class=\"o\">)</span>\n  <span class=\"n\">exists_pair_ne</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span>\n    <span class=\"n\">intro</span> <span class=\"n\">contra</span>\n    <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">contra</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">contra</span>\n  <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">anz</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">add_re_sq_im_sq_pos_of_nz</span> <span class=\"n\">anz</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n  <span class=\"n\">inv_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">qsmul</span> <span class=\"o\">:=</span> <span class=\"n\">qsmulRec</span> <span class=\"n\">_</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>The \"check\" works fine, but for the last line, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">re</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I'm also trying things like <code>by ext &lt;;&gt; simp</code>, but that just leaves me with goals like <code>2.re = 2</code> and <code>2.im = 0</code>, and I don't know what I'm supposed to do to simplify them further. I must be missing something.</p>",
        "id": 433164397,
        "sender_full_name": "Tainnor",
        "timestamp": 1713128243
    },
    {
        "content": "<p>Ok, I think I fixed it. This appears to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">coe</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">n_inj_c</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">of_nat_c</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">n_inj_c</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">of_nat_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">n_inj_c_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">.</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span>\n    <span class=\"n\">ext</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span>\n      <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">ih</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">ih</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span>\n      <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">im</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">ih</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">ih</span>\n      <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>I think I already tried something very similar before, but I seem to be needing both the <code>of_nat_eq</code> and <code>n_inj_c_eq</code> theorem ( if I remove one of them, the examples don't work) and I think before, I was only ever having one of them at a time. Anyway, thanks for helping.</p>",
        "id": 433165499,
        "sender_full_name": "Tainnor",
        "timestamp": 1713129235
    },
    {
        "content": "<p>The type mismatch error is just saying that whilst the result is true, it's not true <em>by definition</em>.</p>",
        "id": 433165855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713129562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Casting.20from.20Integers.20and.20Reals.20to.20Complex/near/433165855\">said</a>:</p>\n<blockquote>\n<p>The type mismatch error is just saying that whilst the result is true, it's not true <em>by definition</em>.</p>\n</blockquote>\n<p>And that's probably because of the missing <code>OfNat</code> instance?</p>",
        "id": 433165972,
        "sender_full_name": "Tainnor",
        "timestamp": 1713129615
    },
    {
        "content": "<p>sometimes walking away from the keyboard and trying again later just works wonders...</p>",
        "id": 433165998,
        "sender_full_name": "Tainnor",
        "timestamp": 1713129643
    },
    {
        "content": "<p>If I understand what's going on correctly, there's also a little bit of a pitfall in that notations like <code>0</code> and <code>1</code> can be interpreted either as <code>ofNat</code>applications or as coming from the classes <code>Zero</code> and <code>One</code>, right?</p>",
        "id": 433167691,
        "sender_full_name": "Tainnor",
        "timestamp": 1713131243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"685366\">Tainnor</span> <a href=\"#narrow/stream/113489-new-members/topic/Casting.20from.20Integers.20and.20Reals.20to.20Complex/near/433165972\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Casting.20from.20Integers.20and.20Reals.20to.20Complex/near/433165855\">said</a>:</p>\n<blockquote>\n<p>The type mismatch error is just saying that whilst the result is true, it's not true <em>by definition</em>.</p>\n</blockquote>\n<p>And that's probably because of the missing <code>OfNat</code> instance?</p>\n</blockquote>\n<p>Adding more code probably won't change the definition of something. You can't prove all true things with <code>rfl</code>, that's just how it is. For example <code>n + 0 = n</code> is true by <code>rfl</code> on the natural numbers, but <code>0 + n = n</code> isn't, this needs induction, which uses an axiom, so it's not true by definition. My guess is that somewhere a map from the natural numbers is being defined by recursion.</p>",
        "id": 433167889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713131427
    },
    {
        "content": "<p>See <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2024/Part_B/equality.html\">this</a> in my course notes about definitional and other equalities.</p>",
        "id": 433167971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713131522
    },
    {
        "content": "<p>right. I just don't think I understand what is happening when I type <code>(2 : ℂ₁)</code>. It's probably trying to use some <code>OfNat</code> instance, but if I don't provide one, what does it pick?</p>",
        "id": 433168172,
        "sender_full_name": "Tainnor",
        "timestamp": 1713131690
    },
    {
        "content": "<p><code>ℂ₁</code> does have an <code>OfNat</code> instance for all <code>n</code> because it is a <code>Semiring</code> (essentially <code>2</code> is defined as <code>(0 + 1) + 1</code>. See <code>Semiring.natCast_succ</code>). In general, lean can't assume that this term is computable, so <code>rfl</code> won't make progress.<br>\nI'm not sure it's best to define your own instance for <code>OfNat</code>. I think you'd want something like the following to get lean to do what you want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 433168181,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1713131695
    },
    {
        "content": "<p>Yes this looks much better to me. I suspect that users are not supposed to be fiddling with <code>ofNat</code> in this context -- it's your job to make the complexes a field, Lean then handles numerals itself as I showed above.</p>",
        "id": 433168425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713131907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Casting.20from.20Integers.20and.20Reals.20to.20Complex/near/433168425\">said</a>:</p>\n<blockquote>\n<p>Yes this looks much better to me. I suspect that users are not supposed to be fiddling with <code>ofNat</code> in this context -- it's your job to make the complexes a field, Lean then handles numerals itself as I showed above.</p>\n</blockquote>\n<p>The reason I started fiddling with them was because I was trying to unify terms (in other proofs) that looked the same, but actually seem to have different definitions. It's a bit hard (for me) to understand what's going on in such a case.</p>",
        "id": 433168821,
        "sender_full_name": "Tainnor",
        "timestamp": 1713132222
    },
    {
        "content": "<p>Right: I didn't know that the 2=&lt;2,0&gt; thing was not going to be rfl -- but when I discovered it wasn't my first thought to prove it would be induction to prove the general case.</p>",
        "id": 433169805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713132974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560559\">Richard Osborn</span> <a href=\"#narrow/stream/113489-new-members/topic/Casting.20from.20Integers.20and.20Reals.20to.20Complex/near/433168181\">said</a>:</p>\n<blockquote>\n<p><code>ℂ₁</code> does have an <code>OfNat</code> instance for all <code>n</code> because it is a <code>Semiring</code> (essentially <code>2</code> is defined as <code>(0 + 1) + 1</code>. See <code>Semiring.natCast_succ</code>). In general, lean can't assume that this term is computable, so <code>rfl</code> won't make progress.<br>\nI'm not sure it's best to define your own instance for <code>OfNat</code>. I think you'd want something like the following to get lean to do what you want:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">foo</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This appears to work, but even though I tag <code>foo</code> with <code>@[simp]</code>, it's somehow not being picked up, and I now have to add it to a bunch of proofs.</p>\n<p>I'm also still struggling with being able to make other such equalities work, e.g. for negative numbers. I'll try to put a MWE together</p>",
        "id": 433169871,
        "sender_full_name": "Tainnor",
        "timestamp": 1713133036
    },
    {
        "content": "<p>Btw, I didn't know about aesop. I'll try to use it a bunch in the future</p>",
        "id": 433169895,
        "sender_full_name": "Tainnor",
        "timestamp": 1713133075
    },
    {
        "content": "<p>Maybe I should just give up trying to use numeric literals. It seems that just causes a bunch of work trying to keep track whether <code>1</code> and <code>0</code> are <code>ofNat</code> or<code>zero</code>/<code>one</code></p>",
        "id": 433170976,
        "sender_full_name": "Tainnor",
        "timestamp": 1713133947
    },
    {
        "content": "<p>I looked into how <code>Complex</code> is defined, and it defines computable definitions for <code>natCast</code>,  <code>natCast_zero</code>, and <code>natCast_succ</code> before defining the field instance. This will give you the definitional equality you are looking for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"c1\">-- Definition of C</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Complex₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">im</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Complex₁.mk</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ℂ₁\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Complex₁</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Complex₁</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_re</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_im</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">one_re</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">one_im</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">z.re</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">z.im</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">neg_def</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">z.re</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">z.im</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">neg_re</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">neg_im</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">z.im</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">z.re</span> <span class=\"bp\">+</span> <span class=\"n\">w.re</span><span class=\"o\">,</span> <span class=\"n\">z.im</span> <span class=\"bp\">+</span> <span class=\"n\">w.im</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_def</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">z.re</span> <span class=\"bp\">+</span> <span class=\"n\">w.re</span><span class=\"o\">,</span> <span class=\"n\">z.im</span> <span class=\"bp\">+</span> <span class=\"n\">w.im</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_re</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"n\">z.re</span> <span class=\"bp\">+</span> <span class=\"n\">w.re</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_im</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"n\">z.im</span> <span class=\"bp\">+</span> <span class=\"n\">w.im</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span> <span class=\"bp\">-</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span><span class=\"o\">,</span> <span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_def</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span> <span class=\"bp\">-</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span><span class=\"o\">,</span> <span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_re</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span> <span class=\"bp\">-</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_im</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_def</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">z.re</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">z.im</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_re</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"n\">z.re</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_im</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">z.im</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_re_sq_im_sq_nonneg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">sq_nonneg</span> <span class=\"n\">a.re</span><span class=\"o\">,</span> <span class=\"n\">sq_nonneg</span> <span class=\"n\">a.im</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_re_sq_im_sq_pos_of_nz</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">anz</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">a.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">arez</span> <span class=\"o\">:</span> <span class=\"n\">a.re</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">.</span> <span class=\"n\">by_cases</span> <span class=\"n\">aimz</span> <span class=\"o\">:</span> <span class=\"n\">a.im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exfalso</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n      <span class=\"n\">exact</span> <span class=\"n\">anz</span> <span class=\"n\">this</span>\n    <span class=\"bp\">.</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">sq_nonneg</span> <span class=\"n\">a.re</span><span class=\"o\">,</span> <span class=\"n\">sq_pos_of_ne_zero</span> <span class=\"n\">_</span> <span class=\"n\">aimz</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">sq_nonneg</span> <span class=\"n\">a.im</span><span class=\"o\">,</span> <span class=\"n\">sq_pos_of_ne_zero</span> <span class=\"n\">_</span> <span class=\"n\">arez</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- C is field</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">natCast</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n  <span class=\"n\">natCast_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">natCast_succ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">+</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">add_assoc</span><span class=\"o\">)</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"n\">nsmulRec</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">*</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n  <span class=\"n\">zsmul</span> <span class=\"o\">:=</span> <span class=\"n\">zsmulRec</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">.⁻¹</span><span class=\"o\">)</span>\n  <span class=\"n\">exists_pair_ne</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span>\n    <span class=\"n\">intro</span> <span class=\"n\">contra</span>\n    <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">contra</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">contra</span>\n  <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">anz</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">add_re_sq_im_sq_pos_of_nz</span> <span class=\"n\">anz</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n  <span class=\"n\">inv_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">qsmul</span> <span class=\"o\">:=</span> <span class=\"n\">qsmulRec</span> <span class=\"n\">_</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 433172610,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1713135575
    },
    {
        "content": "<p>Wow, thanks! I'll try this out.<br>\nI was struggling with a bunch of things like not being able to prove goals like <code>2 = 2.re</code>, no matter what I tried. I hope your trick will work!</p>",
        "id": 433172803,
        "sender_full_name": "Tainnor",
        "timestamp": 1713135708
    },
    {
        "content": "<p>Yeah, that gives me definitional equality, especially also between <code>Zero.zero</code> and <code>ofNat 0</code> etc. <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 433173118,
        "sender_full_name": "Tainnor",
        "timestamp": 1713135992
    },
    {
        "content": "<p>very nice. After all this work, I was now able to prove that <code>(1+i)/(1-i) = i</code> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 433173630,
        "sender_full_name": "Tainnor",
        "timestamp": 1713136519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"685366\">Tainnor</span> has marked this topic as resolved.</p>",
        "id": 433383675,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713214045
    }
]