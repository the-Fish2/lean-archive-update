[
    {
        "content": "<p>I'm a beginner so forgive the basic question about terminology:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">-- 01 - First Proof by Calculation</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"k\">calc</span>\n<span class=\"w\">        </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n<span class=\"w\">       </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span>\n</code></pre></div>\n<p><strong>Questions:</strong></p>\n<ol>\n<li>Is <code>example</code> the <strong>name</strong> of the theorem we're proving (noting <code>example</code> is a special case)?</li>\n<li>Is the next section  <code>{x y : ℝ}</code> called a <strong>type declaration</strong>?</li>\n<li>Is <code>calc</code> a <strong>strategy</strong>?</li>\n<li>I guess <code>by rw</code> and <code>by num_norm</code> are called <strong>tactics</strong>.</li>\n<li>UPDATE: is the section after <code>:= by</code> called a <strong>justification</strong>?</li>\n</ol>\n<p>I'm creating tutorials as I learn myself, and would like to know what the official naming of these things are.</p>",
        "id": 443760507,
        "sender_full_name": "rzeta0",
        "timestamp": 1718022792
    },
    {
        "content": "<p>Well, <code>example</code> is somewhat unique: if your code were</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 01 - First Proof by Calculation</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">lemma</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"o\">{</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">    </span><span class=\"k\">calc</span>\n<span class=\"w\">        </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n<span class=\"w\">       </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>then we would say that <code> foo</code> is the name of the lemma, because actually it is the name of the term in the type <code>y=7</code> that you are producing (in the context <code>{x y : ℝ} (h1 : y = x + 4) (h2 : x = 3)</code>.</p>",
        "id": 443761231,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718023032
    },
    {
        "content": "<p>For <code>example</code> we are producing an \"unnamed\" term.</p>",
        "id": 443761263,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718023046
    },
    {
        "content": "<p>A type declaration is <code>x: ℝ</code>: it declares that<code>x</code> is a term of type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>.</p>",
        "id": 443761395,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718023084
    },
    {
        "content": "<p>In that example <code>x</code> and <code>y</code> are called \"implicit variables\": the fact that they are implicit comes from them living between curly braces, and it affects the way the lemma <code>foo</code> will be used. So all in all <code>{x y : ℝ}</code> are implicit variables declared to be of type <code>ℝ</code>.</p>",
        "id": 443761860,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718023261
    },
    {
        "content": "<ol start=\"3\">\n<li>: <code>calc</code>is a \"mode\"  (sometimes an \"environment\"): the two main other modes are \"tactic mode\"  and \"term mode\". These are ways to make lean produce terms of the required type. See <a href=\"https://leanprover-community.github.io/extras/calc.html\">here</a>. </li>\n<li>Yes, both <code>rw</code> and <code>num_norm</code> are tactics</li>\n<li>That section is called a proof, normally.</li>\n</ol>",
        "id": 443762227,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718023394
    },
    {
        "content": "<p>thanks Filippo- I will need to read further about \"modes\"</p>\n<p>also - what is the name given to the symbol/syntaxc <code>:=</code> ... is it called a justification marker?</p>",
        "id": 443851728,
        "sender_full_name": "rzeta0",
        "timestamp": 1718049112
    },
    {
        "content": "<ol start=\"4\">\n<li><code>rw</code> and <code>num_norm</code> are called tactics,<code>by</code> is a keyword which starts tactic mode, just like <code>calc</code> is a keyword which starts calc mode.</li>\n<li>everything after <code>:=</code> is called the proof. By default you start out in term mode, <code>by</code> then start the tactic mode, and <code>calc</code> then starts the calc mode.</li>\n</ol>",
        "id": 443855621,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1718050523
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"654733\">@Markus Schmaus</span> - so in the given example :</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"o\">{</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"k\">calc</span>\n</code></pre></div>\n<p>... it seems like <code>by</code> starts tactic mode, but is immediately overridden by <code>calc</code> which starts calc mode. Does this mean by was not necessary?</p>\n<p>if everything after <code>:=</code> is a proof, then are the per-line <code>:=</code> sub-proofs proving or justifying whatever equality/relation is immediately to their left?</p>",
        "id": 443859967,
        "sender_full_name": "rzeta0",
        "timestamp": 1718051985
    },
    {
        "content": "<p><code>calc</code> is both a mode and a tactic, just to confuse you :)</p>",
        "id": 443860569,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718052195
    },
    {
        "content": "<p>And yes, in calc, you have <code>a ~ b := proof that a ~ b</code></p>",
        "id": 443860694,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718052235
    },
    {
        "content": "<p><del>I don't think there is a standard way to directly go from term mode to calc mode, so the <code>by</code> is necessary, but it would be quite easy to make a macro that directly goes to calc mode.</del></p>\n<p><span class=\"user-mention silent\" data-user-id=\"724904\">rzeta0</span> <a href=\"#narrow/stream/113489-new-members/topic/terminology.20for.20parts.20of.20a.20lean.20proof/near/443859967\">said</a>:</p>\n<blockquote>\n<p>if everything after <code>:=</code> is a proof, then are the per-line <code>:=</code> sub-proofs proving or justifying whatever equality/relation is immediately to their left?</p>\n</blockquote>\n<p>Yes, these are proofs for the equality to the left. They are currently all done in tactic mode, but at least the first line could also be directly proven in term mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"o\">{</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"k\">calc</span>\n<span class=\"w\">        </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">h1</span>\n<span class=\"w\">        </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>That's because <code>h1</code> is the proof for <code>y = x + 4</code>, and therefore can directly be used to proof <code>y = x + 4</code> again.</p>",
        "id": 443864445,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1718053639
    },
    {
        "content": "<p>Try</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"o\">{</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"k\">calc</span>\n<span class=\"w\">        </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">h1</span>\n<span class=\"w\">        </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 443864618,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718053709
    },
    {
        "content": "<p>No <code>by</code> necessary</p>",
        "id": 443864671,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718053731
    },
    {
        "content": "<p>I stand corrected. I thought I tried that, but I must have had a typo somewhere.</p>",
        "id": 443864790,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1718053793
    },
    {
        "content": "<p>Ruben, Marcus - so for a beginner like me, one of the challenges is to avoid getting sucked into what is \"possible\" due to the idiosyncrasies of the syntax (think C++) - and maintaining focus on good idiomatic structures.</p>\n<p>So for this example, like so many I have seen in beginner tutorials, should we say that <code>by</code> should always be there at the end of the line that initiates a proof?</p>\n<p>As I say, every example I have seen has a <code>by</code> at the end of the first line.</p>",
        "id": 443867074,
        "sender_full_name": "rzeta0",
        "timestamp": 1718054767
    },
    {
        "content": "<p>I have been a beginner myself not so long ago and in many ways I still am. I would argue that understanding how tactic mode and term mode relate to each other is essential for understanding Lean works, so you have an easier time writing your own proofs.</p>\n<p>Have a look at the following simple proof, which I copied from <a href=\"https://github.com/leanprover/lean4/blob/be6c4894e0a6c542d56a6f4bb1238087267d21a0/src/Init/Data/Nat/Basic.lean#L951\">here</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n<span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">sub_lt_left_of_lt_add'</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">sub_le_sub_right</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">succ_le_of_lt</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"n\">rwa</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel_left</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">succ_sub</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">this</span>\n</code></pre></div>\n<p><code>have</code> introduces an auxiliary hypothesis, which is proven by <code>Nat.sub_le_sub_right (succ_le_of_lt h) n</code> in term mode without <code>by</code>. </p>\n<p>The tradeoff between tactic and term mode is roughly this: In term mode you specify the proof precisely, so Lean can often infer the type of the proof, i.e. the statement it proves. If you have specified the statement, you can use tactic mode to have Lean find the proof semi-automatically. Since theorems have to include the statement, proofs for theorems typically use tactic mode, the same is true for lines in a calc proof.</p>",
        "id": 443882488,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1718062624
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"724904\">rzeta0</span> <a href=\"#narrow/stream/113489-new-members/topic/terminology.20for.20parts.20of.20a.20lean.20proof/near/443867074\">said</a>:</p>\n<blockquote>\n<p>Ruben, Marcus - so for a beginner like me, one of the challenges is to avoid getting sucked into what is \"possible\" due to the idiosyncrasies of the syntax (think C++) - and maintaining focus on good idiomatic structures.</p>\n<p>So for this example, like so many I have seen in beginner tutorials, should we say that <code>by</code> should always be there at the end of the line that initiates a proof?</p>\n<p>As I say, every example I have seen has a <code>by</code> at the end of the first line.</p>\n</blockquote>\n<p>As far as the compiler is concerned, you have quite some freedom where to put <code>by</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>However most proofs I encounter with any sort of complexity are tactic proofs, so putting <code>by</code> at the end of the first line is a very reasonable style rule.</p>",
        "id": 443903292,
        "sender_full_name": "Bbbbbbbbba",
        "timestamp": 1718073932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"724904\">rzeta0</span> <a href=\"#narrow/stream/113489-new-members/topic/terminology.20for.20parts.20of.20a.20lean.20proof/near/443760507\">said</a>:</p>\n<blockquote>\n<p>I'm creating tutorials as I learn myself, and would like to know what the official naming of these things are.</p>\n</blockquote>\n<p>I think that writing tutorials so early in your learning process is a very dangerous thing to do, unless you keep them on your hard drive to make sure nobody else read them.</p>",
        "id": 444017731,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718116381
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 444029740,
        "sender_full_name": "rzeta0",
        "timestamp": 1718119335
    },
    {
        "content": "<p>On the other hand, sometimes tutorials are best written by a newcomer since newcomers are seeing everything with fresh eyes. Paired with someone who knows the system and can edit it to avoid incorrect things, it could be useful to others.</p>\n<p>This never stopped people from writing monad tutorials for Haskell though :-) <a href=\"https://wiki.haskell.org/Monad_tutorials_timeline\">https://wiki.haskell.org/Monad_tutorials_timeline</a> (I think I too wrote a monad tutorial at some point, but it didn't make the list.)</p>",
        "id": 444048137,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718123419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/terminology.20for.20parts.20of.20a.20lean.20proof/near/444048137\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://wiki.haskell.org/Monad_tutorials_timeline\">https://wiki.haskell.org/Monad_tutorials_timeline</a></p>\n</blockquote>\n<p>Maybe, if I read all of them, I will finally understand what a monad is (I have already \"learnt\" about monads circa 6 times and yet I still don't know what a monad is).</p>",
        "id": 444050364,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718123987
    },
    {
        "content": "<p>Given that millions of JavaScript programmers use async/await (do notation) and Promise.then (de-sugared monadic bind) daily without issue, it makes me wonder whether monad tutorials are cursed and should be avoided.</p>",
        "id": 444083602,
        "sender_full_name": "llllvvuu",
        "timestamp": 1718134511
    },
    {
        "content": "<p>I’m sorry my comment was too strong. rzeta0, you should of course feel free to write whatever you want, although warning readers would probably be nicer.</p>",
        "id": 444088132,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718136115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/113489-new-members/topic/terminology.20for.20parts.20of.20a.20lean.20proof/near/444083602\">said</a>:</p>\n<blockquote>\n<p>Given that millions of JavaScript programmers use async/await (do notation) and Promise.then (de-sugared monadic bind) daily without issue, it makes me wonder whether monad tutorials are cursed and should be avoided.</p>\n</blockquote>\n<p>Writing them is still very educational for the author! But I agree with <a href=\"https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/\">https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/</a></p>",
        "id": 445813230,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1718879950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"726649\">Bbbbbbbbba</span> <a href=\"#narrow/stream/113489-new-members/topic/terminology.20for.20parts.20of.20a.20lean.20proof/near/443903292\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"724904\">rzeta0</span> <a href=\"#narrow/stream/113489-new-members/topic/terminology.20for.20parts.20of.20a.20lean.20proof/near/443867074\">said</a>:</p>\n<blockquote>\n<p>Ruben, Marcus - so for a beginner like me, one of the challenges is to avoid getting sucked into what is \"possible\" due to the idiosyncrasies of the syntax (think C++) - and maintaining focus on good idiomatic structures.</p>\n<p>So for this example, like so many I have seen in beginner tutorials, should we say that <code>by</code> should always be there at the end of the line that initiates a proof?</p>\n<p>As I say, every example I have seen has a <code>by</code> at the end of the first line.</p>\n</blockquote>\n<p>As far as the compiler is concerned, you have quite some freedom where to put <code>by</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>However most proofs I encounter with any sort of complexity are tactic proofs, so putting <code>by</code> at the end of the first line is a very reasonable style rule.</p>\n</blockquote>\n<p>Also, the style guide to mathlib (in Lean 4) mandates putting <code>by</code> at the end of first line; this might be why many projects also follow this.</p>",
        "id": 445816671,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718881213
    },
    {
        "content": "<p>is this the style guide you're referring to? </p>\n<p><a href=\"https://leanprover-community.github.io/contribute/style.html\">https://leanprover-community.github.io/contribute/style.html</a></p>",
        "id": 445828498,
        "sender_full_name": "rzeta0",
        "timestamp": 1718885430
    }
]