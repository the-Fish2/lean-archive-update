[
    {
        "content": "<p>Let's define natural numbers plus an addition function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MyNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now I'd like to prove that addition cancels on the right.  Here we go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">plus</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">plus</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">id</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">...</span>\n</code></pre></div>\n<p>The proof state now looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">MyNat</span>\n<span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"n\">plus</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">plus</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">plus</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">MyNat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">plus</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">MyNat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>I'd like to simplify the goal to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">MyNat.succ</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">MyNat.succ</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>which looks more like ih.  However I can't seem to make that step.  I tried <code>dsimp</code>, but it has no effect on the goal.  That surprises me, since this is just a beta-reduction to a term that is definitionally equal.  Why won't <code>dsimp</code> do what I want?  Is there another tactic that will?</p>",
        "id": 419852746,
        "sender_full_name": "Adam Dingle",
        "timestamp": 1707143607
    },
    {
        "content": "<p>Are you saying <code>dsimp [plus]</code>?</p>",
        "id": 419854898,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707144206
    },
    {
        "content": "<p>Aha!  OK, <code>dsimp [plus]</code> did the trick.  Thanks.</p>\n<p>However, now suppose that I want to make the same proof using the built-in Nat type, rather than my own MyNat type.  Here we go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">id</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">...</span>\n</code></pre></div>\n<p>The proof state now looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abcn</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Once again, I'd like to reduce the goal to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>If <code>+</code> becomes <code>Nat.add</code> in the process, that's OK.  Still, I don't see how to do this.  I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Add.add</span><span class=\"o\">]</span>\n<span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add</span><span class=\"o\">]</span>\n<span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but none of them were willing to reduce the <code>+</code> function.  Any ideas?</p>",
        "id": 419858035,
        "sender_full_name": "Adam Dingle",
        "timestamp": 1707145047
    },
    {
        "content": "<p>hmm, I'm not sure; you can write your own lemma and use that (and if the proof is literally <code>rfl</code> then <code>dsimp</code> will be happy with it) but it does seem hard to pierce through the veil of <code>HAdd</code> and <code>Add</code>.</p>",
        "id": 419859360,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707145285
    },
    {
        "content": "<p>Thanks.  Actually I realized there's a built-in lemma that is exactly that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.add_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>So dsimp [Nat.add_succ] does exactly what I want.</p>\n<p>Still, it seems like it would be nice if dsimp could pierce through HAdd and Add without a helper lemma.  If that's somehow possible, I'd be interested to hear about it.</p>",
        "id": 419860982,
        "sender_full_name": "Adam Dingle",
        "timestamp": 1707145716
    },
    {
        "content": "<p><code>dsimp only [Add.add, Nat.add, (· + ·)]</code> worked here (the order shouldn't matter)</p>",
        "id": 419868458,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1707147613
    },
    {
        "content": "<p>Fascinating.  That's a bit of a mouthful, but it's good to know that it is actually possible.  :)</p>",
        "id": 419868822,
        "sender_full_name": "Adam Dingle",
        "timestamp": 1707147710
    },
    {
        "content": "<p><code>dsimp!</code> unfolds definitions automatically</p>",
        "id": 419914125,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707161764
    },
    {
        "content": "<p>That sounds promising, however it doesn't seem to help in the example I just gave.  As Mauricio pointed out, <code>dsimp only [Add.add, Nat.add, (· + ·)]</code> will reduce <code>a + succ n</code> to <code>succ (Nat.add a n)</code>, but <code>dsimp!</code> doesn't affect it at all.</p>",
        "id": 420003433,
        "sender_full_name": "Adam Dingle",
        "timestamp": 1707210715
    }
]