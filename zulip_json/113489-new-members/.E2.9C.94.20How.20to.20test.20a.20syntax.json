[
    {
        "content": "<p>is there anyway to test a syntax? I want to test a comment syntax something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">Project</span>\n\n<span class=\"n\">declare_syntax_cat</span><span class=\"w\"> </span><span class=\"n\">thf_term</span>\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"n\">true</span>\n\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"/*\"</span><span class=\"w\"> </span><span class=\"n\">rawIdent</span><span class=\"w\"> </span><span class=\"s2\">\"*/\"</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">term</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"bp\">/*</span><span class=\"w\"> </span><span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"bp\">*/</span>\n</code></pre></div>\n<p>For now I am using check to make sure the syntax correctly parse but is there any automatic way for it?</p>",
        "id": 444756933,
        "sender_full_name": "kishou yusa",
        "timestamp": 1718387439
    },
    {
        "content": "<p>You could make a command for parsing a term without trying to do anything more with it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"#parse_term \"</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"o\">()</span>\n\n<span class=\"bp\">#</span><span class=\"n\">parse_term</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 444759580,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718388207
    },
    {
        "content": "<p>If that's not what you'd want, could you explain what automatic testing would mean? You could give an example of exactly what you would like to be able to write.</p>",
        "id": 444759610,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718388225
    },
    {
        "content": "<p>Oh I want try to write just some syntax for C like function for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">/*</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"bp\">*/</span>\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">()</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">  </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 444760832,
        "sender_full_name": "kishou yusa",
        "timestamp": 1718388621
    },
    {
        "content": "<p>yeah that's just something I want but can I do it on mutple line?</p>",
        "id": 444760989,
        "sender_full_name": "kishou yusa",
        "timestamp": 1718388682
    },
    {
        "content": "<p>Do you mean multiple lines like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">parse_term</span>\n<span class=\"w\">  </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">      </span><span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 444761312,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718388807
    },
    {
        "content": "<p>yeah something like that maybe I can do it with macro?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">macro</span><span class=\"w\"> </span><span class=\"s2\">\"begin_test\"</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"s2\">\"end_test\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">pure</span><span class=\"o\">()</span>\n</code></pre></div>",
        "id": 444761641,
        "sender_full_name": "kishou yusa",
        "timestamp": 1718388912
    },
    {
        "content": "<p>but now I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">application</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span>\n<span class=\"w\">  </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"o\">()</span>\n<span class=\"n\">argument</span>\n<span class=\"w\">  </span><span class=\"o\">()</span>\n<span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span>\n<span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">`command</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 444761816,
        "sender_full_name": "kishou yusa",
        "timestamp": 1718388967
    },
    {
        "content": "<p>There's no reason to use <code>macro</code> instead of <code>elab</code>, especially since a <code>macro</code> is for syntax transformations, and you're not wanting to transform syntax, but instead discard it.</p>\n<p>Just use your suggested syntax after <code>elab</code> instead of <code>macro</code>.</p>",
        "id": 444761891,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718388993
    },
    {
        "content": "<p>okay thanks here is the final code which work</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"n\">true</span>\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">true</span>\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"begin_test\"</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"s2\">\"end_test\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"o\">()</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"/*\"</span><span class=\"w\"> </span><span class=\"n\">rawIdent</span><span class=\"w\"> </span><span class=\"s2\">\"*/\"</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">term</span>\n\n<span class=\"n\">begin_test</span>\n<span class=\"w\">  </span><span class=\"bp\">/*</span><span class=\"w\"> </span><span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"bp\">*/</span>\n<span class=\"w\">  </span><span class=\"bp\">/*</span><span class=\"w\"> </span><span class=\"n\">hello1</span><span class=\"w\"> </span><span class=\"bp\">*/</span>\n<span class=\"n\">end_test</span>\n</code></pre></div>",
        "id": 444762302,
        "sender_full_name": "kishou yusa",
        "timestamp": 1718389104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"666341\">kishou yusa</span> has marked this topic as resolved.</p>",
        "id": 444762352,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718389122
    },
    {
        "content": "<p>not relate but is there any resource for elab and macro? I don't see many document resources about them</p>",
        "id": 444762458,
        "sender_full_name": "kishou yusa",
        "timestamp": 1718389165
    },
    {
        "content": "<p>The resourcec which I found are: <a href=\"https://leanprover-community.github.io/lt2021/slides/sebastian-lean4-parsers-macros.pdf\">leanprover-community.github.io/lt2021/slides/sebastian-lean4-parsers-macros.pdf</a><br>\n<a href=\"https://leanprover-community.github.io/lean4-metaprogramming-book/main/05_syntax.html\">Syntax - Metaprogramming in Lean 4 (leanprover-community.github.io)</a><br>\nbut I don't think that's enough and the API document for mathlib is lacking many comment</p>",
        "id": 444762685,
        "sender_full_name": "kishou yusa",
        "timestamp": 1718389225
    },
    {
        "content": "<p>I am planning on writing some explanations about it this summer, but my current understanding is that features <em>are</em> missing and the design is incomplete</p>",
        "id": 444762998,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718389337
    },
    {
        "content": "<p>Feel free to ask any specific question and I'll try to answer (in my limited capacity of user of the system) <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 444763018,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718389353
    },
    {
        "content": "<p>One resource is <a href=\"https://leanprover-community.github.io/lean4-metaprogramming-book/\">https://leanprover-community.github.io/lean4-metaprogramming-book/</a></p>\n<p>A project of the Lean FRO is to write a thorough reference manual in the next year or so at least!</p>",
        "id": 444763078,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718389385
    }
]