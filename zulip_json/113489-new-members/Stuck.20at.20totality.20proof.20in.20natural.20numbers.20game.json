[
    {
        "content": "<p>This is what i have proven so far </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">hd</span>\n<span class=\"n\">right</span>\n<span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">zero_le</span>\n<span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">hd</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">he</span><span class=\"w\"> </span><span class=\"n\">hf</span>\n<span class=\"n\">left</span>\n<span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">he</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">ha</span>\n<span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">aa</span><span class=\"w\"> </span><span class=\"n\">haa</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n<span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">le_succ_self</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n<span class=\"n\">use</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">aa</span><span class=\"o\">))</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">]</span>\n<span class=\"n\">symm</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">]</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Now I am stuck proving <br>\nObjects:<br>\n<strong>xd</strong>: ℕ</p>\n<p>Assumptions:<br>\n<strong>hf</strong>: d ≤ x</p>\n<p>Goal:</p>\n<p>x ≤ succ d ∨ succ d ≤ x</p>\n<p>It feels as if I have made zero progress.</p>",
        "id": 443473771,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717856033
    },
    {
        "content": "<p>And what is also hard while I have proven some theorems like le_trans for example I have no idea how to get it into context<br>\nIt is not explained which tactics make an useful application of this theorem possible</p>",
        "id": 443474300,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717856396
    },
    {
        "content": "<p>Oh and that is the level <a href=\"https://adam.math.hhu.de/#/g/leanprover-community/NNG4/world/LessOrEqual/level/8\">https://adam.math.hhu.de/#/g/leanprover-community/NNG4/world/LessOrEqual/level/8</a></p>",
        "id": 443475069,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717856975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"725717\">metakuntyyy</span> <a href=\"#narrow/stream/113489-new-members/topic/Stuck.20at.20totality.20proof.20in.20natural.20numbers.20game/near/443473771\">said</a>:</p>\n<blockquote>\n<p>It feels as if I have made zero progress.</p>\n</blockquote>\n<p>Actually this is good progress as you really just need to know d - x to progress</p>",
        "id": 443475789,
        "sender_full_name": "Bbbbbbbbba",
        "timestamp": 1717857516
    },
    {
        "content": "<p>Yeah, but I don't really understand what that means. I know there should be two cases either d = x or d &lt; x. If d=x then left is correct, but if d&lt;x then the right is correct. I don't know how to apply it though</p>",
        "id": 443475972,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717857680
    },
    {
        "content": "<p>Do I do induction, or split, or use or a rewrite?</p>",
        "id": 443476006,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717857704
    },
    {
        "content": "<p>If d = x then x - d = 0, and if d &lt; x then x - d &gt; 0</p>",
        "id": 443476080,
        "sender_full_name": "Bbbbbbbbba",
        "timestamp": 1717857742
    },
    {
        "content": "<p>And you can figure out which because you have x - d</p>",
        "id": 443476103,
        "sender_full_name": "Bbbbbbbbba",
        "timestamp": 1717857765
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">hd</span>\n<span class=\"n\">right</span>\n<span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">zero_le</span>\n<span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">hd</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">he</span><span class=\"w\"> </span><span class=\"n\">hf</span>\n<span class=\"n\">left</span>\n<span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">he</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">ha</span>\n<span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">aa</span><span class=\"w\"> </span><span class=\"n\">haa</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n<span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">le_succ_self</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n<span class=\"n\">use</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">aa</span><span class=\"o\">))</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">]</span>\n<span class=\"n\">symm</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">]</span>\n<span class=\"n\">rfl</span>\n<span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">hf</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">hhc</span>\n<span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">hhc</span>\n<span class=\"n\">left</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">hhc</span><span class=\"o\">]</span>\n<span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">le_succ_self</span>\n<span class=\"n\">right</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">hhc</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">succ_add</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">add_zero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"o\">)]</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Alright I am left with the following goal:<br>\nObjects:<br>\n<strong>xda</strong>: ℕ</p>\n<p>Assumptions:<br>\n<strong>hhc</strong>: x = d + succ a</p>\n<p>Goal:</p>\n<p>succ d + 0 ≤ succ d + a</p>\n<p>How do I close it now?</p>",
        "id": 443484433,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717862393
    },
    {
        "content": "<p>Nevermind, I've closed it. It was use a</p>",
        "id": 443484589,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717862453
    },
    {
        "content": "<p>That was pretty hard.</p>",
        "id": 443484664,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717862484
    },
    {
        "content": "<p>Well but I have no idea now how to prove the next one. I need to show that <code>succ_le_succ</code>: If succ(x)≤succ(y) then x≤y.<br>\nI have no idea where to start and which theorems to use. </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">zero_le</span>\n</code></pre></div>\n<p>This was my start but then I am completely stuck</p>",
        "id": 443487938,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717863541
    },
    {
        "content": "<p>Don't need induction at all for this one</p>",
        "id": 443490366,
        "sender_full_name": "Bbbbbbbbba",
        "timestamp": 1717864090
    },
    {
        "content": "<p>Remember to prove x≤y you just need to find the value of y-x</p>",
        "id": 443490518,
        "sender_full_name": "Bbbbbbbbba",
        "timestamp": 1717864130
    },
    {
        "content": "<p>Yeah but I still don't understand what that means. Do I unfold the hypothesis. Do I do cases? Do i do use?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">zero_le</span>\n</code></pre></div>\n<p>This would be my ansatz, which leaves me with this goal:<br>\nObjects:<br>\n<strong>ya</strong>: ℕ</p>\n<p>Assumptions:<br>\n<strong>hx</strong>: succ (succ a) ≤ succ y</p>\n<p>Goal:</p>\n<p>succ a ≤ y</p>\n<p>Which again feels like I've made no progress</p>",
        "id": 443492090,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717864494
    },
    {
        "content": "<p>You can do <code>cases hx</code> at the start</p>",
        "id": 443495957,
        "sender_full_name": "Bbbbbbbbba",
        "timestamp": 1717865549
    },
    {
        "content": "<p>ayy, that helps. Thanks, I didn't know that</p>",
        "id": 443496423,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717865656
    },
    {
        "content": "<p>It worked. Thank you very much.</p>",
        "id": 443496758,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717865739
    },
    {
        "content": "<p>Ok I am further in the game. Level 9/10 of the last level.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">hd</span><span class=\"w\"> </span><span class=\"n\">generalizing</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">j</span>\n<span class=\"n\">trivial</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">succ_mul</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">add_left_eq_zero</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I am stuck proving <br>\n<strong>a</strong>: ℕ<br>\n<strong>d</strong>: ℕ<br>\n<strong>c</strong>: ℕ</p>\n<p>Assumptions:<br>\n<strong>ha</strong>: a ≠ 0<br>\n<strong>hd</strong>: ∀ (c : ℕ), a * d = a * c → d = c<br>\n<strong>h</strong>: a * succ d = a * c</p>\n<p>Goal:</p>\n<p>succ d = c<br>\nIn my opinion I should just be able to apply hd at h. But it doesn't work for some reason</p>",
        "id": 443508340,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717871477
    },
    {
        "content": "<p>Because the <code>d</code> in <code>h</code> is the same <code>d</code> in <code>hd</code></p>",
        "id": 443508942,
        "sender_full_name": "Bbbbbbbbba",
        "timestamp": 1717871818
    },
    {
        "content": "<p>So what did I do wrong here?<br>\nI really am not grasping this concept</p>",
        "id": 443508985,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717871865
    },
    {
        "content": "<p>What do I need to do, do I need to shift the succ from the left side to the right side to be able to apply the theorem?</p>",
        "id": 443509139,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717871960
    },
    {
        "content": "<p>This is a tricky one</p>",
        "id": 443509342,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717872046
    },
    {
        "content": "<p><code>a * succ d = a * c</code> definitely doesn't hold if <code>c = 0</code>. So what about you deal with that case first?</p>",
        "id": 443509372,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717872070
    },
    {
        "content": "<p>Alright, so cases c?</p>",
        "id": 443509435,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717872108
    },
    {
        "content": "<p>Thanks, it worked. ;)</p>",
        "id": 443509947,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717872406
    },
    {
        "content": "<p>Final level, final boss, here I come.</p>",
        "id": 443510021,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717872433
    },
    {
        "content": "<p>Alright, I have finished with advanced multiplication world. It mentions a division world yet that one seems not there.</p>",
        "id": 443511304,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717873065
    },
    {
        "content": "<p>Sorry, I've been distracted by other things. There are some worlds which are in a half-finished or even near-finished state but which aren't online</p>",
        "id": 443569266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717918263
    },
    {
        "content": "<p>Ah cool. No worries <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I absolutely enjoyed playing your game, even if I were stuck for an hour or so on a particularly difficult problem. Where do I go from here, are there any more tutorials/games I could play to learn theorem proving?</p>",
        "id": 443585804,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1717932103
    },
    {
        "content": "<p>You should read Mathematics in Lean next, which is at the other end of this link <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> .</p>",
        "id": 443586006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717932310
    },
    {
        "content": "<p>If your goal is just to gain extra familiarity with Theorem proving, I would also recommend the Set Theory Game (It uses the same framework as NNG) - <a href=\"https://adam.math.hhu.de/#/g/djvelleman/stg4\">https://adam.math.hhu.de/#/g/djvelleman/stg4</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 444247271,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1718201639
    }
]