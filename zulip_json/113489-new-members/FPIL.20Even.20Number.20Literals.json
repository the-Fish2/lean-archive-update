[
    {
        "content": "<p>While working through FPIL, I tried to do the first exercise in section 4.2, which tells me to write an OfNat instance for <code>Even</code> (which we had to write in section 4.1). My attempt at this was the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Even</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Even</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">natEven</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Even.zero</span>\n      <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Even.succ</span> <span class=\"o\">(</span><span class=\"n\">natEven</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"n\">natEven</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- Check OfNat Even works</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but the latter fails with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>What obvious thing am I missing?</p>",
        "id": 424831369,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709632231
    },
    {
        "content": "<p>The section hints that I need something from that section so I'm probably doing something wrong, as I don't think I'm using anything from that section, but I could be wrong</p>",
        "id": 424832391,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709632606
    },
    {
        "content": "<p>Hi Josha,</p>\n<p>My implementation of <code>Even</code> looks pretty similar to yours: two hints I might suggest:</p>\n<p>1) The point of needing recursive instance search is to say \"supposing that OfNat is defined on <code>Even n</code>, here's how to define it on <code>Even (n + 2)</code> - in order to state that assumption, you have to make use of an instance implicit in your <code>instance</code>.  (The syntax confounded me for a long while, but, by cribbing off the \"Supposing that \\alpha has an Add instantiation, here's how to Add a <code>Pos \\alpha</code>\" example in 4.2, I was able to random-walk my way to the correct solution.)</p>\n<p>2) Since the <code>instance</code> you define in 1) depends on a recursive instance search, you need to specify a base case for the search to terminate.  As a result, I, at least, have two separate <code>instance</code> declarations for <code>OfNat Even</code>.  (As I'm only a bit ahead of you in fpinlean I have not yet learned enough Lean to know if you can do both in a single <code>instance</code> as you were trying to do.)</p>\n<p>Hope that points you in the right direction,<br>\nNathan</p>",
        "id": 425224713,
        "sender_full_name": "Nathan Taylor",
        "timestamp": 1709785114
    },
    {
        "content": "<p>Hi, could you explain why you would use <code>Even (n+2)</code> here?</p>",
        "id": 425253200,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709800989
    },
    {
        "content": "<p>My particular definition of Even was an inductive datatype similar to Nat, except instead of one discriminant representing one more than another Nat, it represents two more than another Even.  So, Lean needs to resolve an instance of \"an Even two less than <code>Even (n+2)</code>.  (Are you sure that odd numbers are unrepresentable in your construction?)</p>",
        "id": 425332732,
        "sender_full_name": "Nathan Taylor",
        "timestamp": 1709825164
    }
]