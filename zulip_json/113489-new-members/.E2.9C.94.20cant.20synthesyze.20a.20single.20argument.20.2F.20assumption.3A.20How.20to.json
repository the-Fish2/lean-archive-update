[
    {
        "content": "<p>On the line <br>\n<code>have h_same_line : lX = lY := lX.uniqueness lY A B A_on_lX A_on_lY B_on_lX B_on_lY hA_neq_B</code><br>\ni have everything needed in the context, but not a single argument can be replaced by _. I thought this should work?<br>\nFull code (the line above is the 12th last):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Logic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n\n<span class=\"c1\">-- Declare the primitive Types and Relations of axiomatic geometry</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">Line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">lies_on</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Line</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"c1\">--notation for lies_on</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∈ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lies_on</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">50</span>  <span class=\"n\">A</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∉ \"</span> <span class=\"n\">B</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">lies_on</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">Line.toSet</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"n\">Point</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">--notation for `l ∩ g`</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">51</span>  <span class=\"n\">A</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∩ \"</span> <span class=\"n\">B</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Line.toSet</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">Line.toSet</span> <span class=\"n\">B</span>\n<span class=\"c1\">--notation for `l ∪ g`</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">51</span>  <span class=\"n\">A</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∪ \"</span> <span class=\"n\">B</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Line.toSet</span> <span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">Line.toSet</span> <span class=\"n\">B</span>\n\n<span class=\"c1\">--primitive Relation of a Point being *between* to others</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">between</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">50</span>  <span class=\"n\">A</span> <span class=\"s2\">\" ⋆ \"</span> <span class=\"n\">B</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\" ⋆ \"</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"mi\">65</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">between</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span>\n\n<span class=\"c1\">--Hilberts Axioms of Incidence</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">I1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">I2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">I3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">I4</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Line.uniqueness</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Line</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A_mem_l</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)(</span><span class=\"n\">A_mem_g</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B_mem_l</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B_mem_g</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hAB</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"bp\">=</span><span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">I2</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">hAB</span>\n  <span class=\"k\">have</span> <span class=\"n\">AB_mem_l</span> <span class=\"o\">:=</span> <span class=\"n\">And.intro</span> <span class=\"n\">A_mem_l</span> <span class=\"n\">B_mem_l</span>\n  <span class=\"k\">have</span> <span class=\"n\">AB_mem_g</span> <span class=\"o\">:=</span> <span class=\"n\">And.intro</span> <span class=\"n\">A_mem_g</span> <span class=\"n\">B_mem_g</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ExistsUnique.unique</span> <span class=\"n\">h</span> <span class=\"n\">AB_mem_l</span> <span class=\"n\">AB_mem_g</span>\n\n\n\n<span class=\"c\">/-</span><span class=\"cm\">define notion of being `collinear` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">collinear</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">),</span> <span class=\"bp\">∀</span><span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">points</span><span class=\"o\">,</span><span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coll_trans</span> <span class=\"o\">(</span><span class=\"n\">hX</span><span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span><span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"bp\">∩</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"bp\">∩</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA_neq_B</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span><span class=\"o\">):</span> <span class=\"n\">collinear</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">∪</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"k\">match</span> <span class=\"n\">hX</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">lX</span><span class=\"o\">,</span><span class=\"n\">hlX</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">hY</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">lY</span><span class=\"o\">,</span><span class=\"n\">hlY</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">--A is on X and Y so it is on lX and on lY</span>\n    <span class=\"k\">have</span> <span class=\"n\">A_on_X</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Set.mem_of_mem_inter_left</span> <span class=\"n\">hA</span>\n    <span class=\"k\">have</span> <span class=\"n\">A_on_lX</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">lX</span> <span class=\"o\">:=</span> <span class=\"n\">hlX</span> <span class=\"n\">A</span> <span class=\"n\">A_on_X</span>\n    <span class=\"k\">have</span> <span class=\"n\">A_on_Y</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Set.mem_of_mem_inter_right</span> <span class=\"n\">hA</span>\n    <span class=\"k\">have</span> <span class=\"n\">A_on_lY</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">lY</span> <span class=\"o\">:=</span> <span class=\"n\">hlY</span> <span class=\"n\">A</span> <span class=\"n\">A_on_Y</span>\n\n\n    <span class=\"c1\">--B is on X and Y so it is on lX and on lY</span>\n    <span class=\"k\">have</span> <span class=\"n\">B_on_X</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Set.mem_of_mem_inter_left</span> <span class=\"n\">hB</span>\n    <span class=\"k\">have</span> <span class=\"n\">B_on_lX</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">lX</span> <span class=\"o\">:=</span> <span class=\"n\">hlX</span> <span class=\"n\">B</span> <span class=\"n\">B_on_X</span>\n    <span class=\"k\">have</span> <span class=\"n\">B_on_Y</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Set.mem_of_mem_inter_right</span> <span class=\"n\">hB</span>\n    <span class=\"k\">have</span> <span class=\"n\">B_on_lY</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">lY</span> <span class=\"o\">:=</span> <span class=\"n\">hlY</span> <span class=\"n\">B</span> <span class=\"n\">B_on_Y</span>\n\n    <span class=\"c1\">--only one Line goes through A and B, so by uniqueness we have lX = lY</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_same_line</span> <span class=\"o\">:</span> <span class=\"n\">lX</span> <span class=\"bp\">=</span> <span class=\"n\">lY</span> <span class=\"o\">:=</span> <span class=\"n\">lX.uniqueness</span> <span class=\"n\">lY</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">A_on_lX</span> <span class=\"n\">A_on_lY</span> <span class=\"n\">B_on_lX</span> <span class=\"n\">B_on_lY</span> <span class=\"n\">hA_neq_B</span>\n    <span class=\"c1\">--now show all the points are collinear because they are on lX=lY</span>\n    <span class=\"k\">have</span> <span class=\"n\">coll</span><span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">collinear</span>\n      <span class=\"n\">use</span> <span class=\"n\">lX</span>\n      <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">hp</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hp</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span><span class=\"n\">inl</span> <span class=\"n\">hX</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">apply</span> <span class=\"n\">hlX</span> <span class=\"n\">p</span> <span class=\"n\">hX</span>\n      <span class=\"bp\">|</span><span class=\"n\">inr</span> <span class=\"n\">hY</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"n\">p_in_lY</span> <span class=\"o\">:</span><span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">lY</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">hlY</span> <span class=\"n\">p</span> <span class=\"n\">hY</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">h_same_line</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">p_in_lY</span>\n        <span class=\"n\">assumption</span>\n    <span class=\"n\">apply</span> <span class=\"n\">coll</span>\n</code></pre></div>",
        "id": 433605682,
        "sender_full_name": "Moritz R",
        "timestamp": 1713301021
    },
    {
        "content": "<p>Does the situation improve if you use <code>variable</code> instead of <code>axiom</code> everywhere?</p>",
        "id": 433614080,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713304624
    },
    {
        "content": "<p>I cant check, because i then get errors i cant resolve. The Coercion from Line to Set Point e.g. gives <br>\n<code>instance does not provide concrete values for (semi-)out-params\n  Coe ?Line (Set Point)</code> and collinear X doesnt seem to work at all as it gives <br>\n<code>don't know how to synthesize implicit argument\n  @collinear ?m.3632 ?m.3936 ?m.3937 X</code> in coll_trans.<br>\nThese kind of errors continue in the file. If you can take a look, here's the code until the first 2 errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Logic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span><span class=\"c1\">--needed to use notation with local variables</span>\n\n<span class=\"c1\">-- Declare the primitive Types and Relations of axiomatic geometry</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">lies_on</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Line</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"c1\">--notation for lies_on</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∈ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lies_on</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">50</span>  <span class=\"n\">A</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∉ \"</span> <span class=\"n\">B</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">lies_on</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n\n<span class=\"c1\">--coercion from `Line` to `Set`</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Line</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Set</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">}</span>\n\n<span class=\"c1\">--notation for `l ∩ g`</span>\n<span class=\"c1\">--local notation:50  A:50 \" ∩ \" B:50 =&gt; {P:Point | P ∈ A ∧ P ∈ B}</span>\n\n<span class=\"c1\">--primitive Relation of a Point being *between* to others</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">between</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">50</span>  <span class=\"n\">A</span> <span class=\"s2\">\" ⋆ \"</span> <span class=\"n\">B</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\" ⋆ \"</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"mi\">65</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">between</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span>\n\n<span class=\"c1\">--Hilberts Axioms of Incidence</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I4</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">}</span>\n\n\n\n\n\n<span class=\"c\">/-</span><span class=\"cm\">define notion of being `collinear` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">collinear</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">),</span> <span class=\"bp\">∀</span><span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">points</span><span class=\"o\">,</span><span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">coll_trans</span> <span class=\"o\">(</span><span class=\"n\">hX</span><span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span><span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"bp\">∩</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"bp\">∩</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA_neq_B</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span><span class=\"o\">):</span> <span class=\"n\">collinear</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">∪</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"k\">match</span> <span class=\"n\">hX</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">lX</span><span class=\"o\">,</span><span class=\"n\">hlX</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">hY</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">lY</span><span class=\"o\">,</span><span class=\"n\">hlY</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">--A is on X and Y so it is on lX and on lY</span>\n    <span class=\"k\">have</span> <span class=\"n\">A_on_X</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Set.mem_of_mem_inter_left</span> <span class=\"n\">hA</span>\n    <span class=\"k\">have</span> <span class=\"n\">A_on_lX</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">lX</span> <span class=\"o\">:=</span> <span class=\"n\">hlX</span> <span class=\"n\">A</span> <span class=\"n\">A_on_X</span>\n    <span class=\"k\">have</span> <span class=\"n\">A_on_Y</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Set.mem_of_mem_inter_right</span> <span class=\"n\">hA</span>\n    <span class=\"k\">have</span> <span class=\"n\">A_on_lY</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">lY</span> <span class=\"o\">:=</span> <span class=\"n\">hlY</span> <span class=\"n\">A</span> <span class=\"n\">A_on_Y</span>\n\n\n    <span class=\"c1\">--B is on X and Y so it is on lX and on lY</span>\n    <span class=\"k\">have</span> <span class=\"n\">B_on_X</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Set.mem_of_mem_inter_left</span> <span class=\"n\">hB</span>\n    <span class=\"k\">have</span> <span class=\"n\">B_on_lX</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">lX</span> <span class=\"o\">:=</span> <span class=\"n\">hlX</span> <span class=\"n\">B</span> <span class=\"n\">B_on_X</span>\n    <span class=\"k\">have</span> <span class=\"n\">B_on_Y</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Set.mem_of_mem_inter_right</span> <span class=\"n\">hB</span>\n    <span class=\"k\">have</span> <span class=\"n\">B_on_lY</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">lY</span> <span class=\"o\">:=</span> <span class=\"n\">hlY</span> <span class=\"n\">B</span> <span class=\"n\">B_on_Y</span>\n    <span class=\"c1\">--so A,B ∈ lX und A,B ∈ lY</span>\n    <span class=\"k\">have</span> <span class=\"n\">AB_on_lX</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">lX</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">lX</span> <span class=\"o\">:=</span> <span class=\"n\">And.intro</span> <span class=\"n\">A_on_lX</span> <span class=\"n\">B_on_lX</span>\n    <span class=\"k\">have</span> <span class=\"n\">AB_on_lY</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">lY</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">lY</span> <span class=\"o\">:=</span> <span class=\"n\">And.intro</span> <span class=\"n\">A_on_lY</span> <span class=\"n\">B_on_lY</span>\n\n    <span class=\"c1\">--only one Line goes through A and B, so by uniqueness we have lX = lY</span>\n    <span class=\"k\">have</span> <span class=\"n\">hUnique</span><span class=\"o\">:</span> <span class=\"bp\">∃!</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">I2</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">hA_neq_B</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_same_line</span> <span class=\"o\">:</span> <span class=\"n\">lX</span> <span class=\"bp\">=</span> <span class=\"n\">lY</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">ExistsUnique.unique</span> <span class=\"n\">hUnique</span> <span class=\"n\">AB_on_lX</span> <span class=\"n\">AB_on_lY</span>\n    <span class=\"c1\">--now show all the points are collinear because they are on lX=lY</span>\n    <span class=\"k\">have</span> <span class=\"n\">coll</span><span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">collinear</span>\n      <span class=\"n\">use</span> <span class=\"n\">lX</span>\n      <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">hp</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hp</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span><span class=\"n\">inl</span> <span class=\"n\">hX</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">apply</span> <span class=\"n\">hlX</span> <span class=\"n\">p</span> <span class=\"n\">hX</span>\n      <span class=\"bp\">|</span><span class=\"n\">inr</span> <span class=\"n\">hY</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"n\">p_in_lY</span> <span class=\"o\">:</span><span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">lY</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">hlY</span> <span class=\"n\">p</span> <span class=\"n\">hY</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">h_same_line</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">p_in_lY</span>\n        <span class=\"n\">assumption</span>\n    <span class=\"n\">apply</span> <span class=\"n\">coll</span>\n</code></pre></div>",
        "id": 433696066,
        "sender_full_name": "Moritz R",
        "timestamp": 1713340916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/cant.20synthesyze.20a.20single.20argument/near/433614080\">said</a>:</p>\n<blockquote>\n<p>Does the situation improve if you use <code>variable</code> instead of <code>axiom</code> everywhere?</p>\n</blockquote>\n<p>What was the thought there?</p>",
        "id": 433758893,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713361058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"602461\">@Moritz R</span> I'm able to make all the \"data\" arguments be replaced by <code>_</code>s</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h_same_line</span> <span class=\"o\">:</span> <span class=\"n\">lX</span> <span class=\"bp\">=</span> <span class=\"n\">lY</span> <span class=\"o\">:=</span> <span class=\"n\">Line.uniqueness</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">A_on_lX</span> <span class=\"n\">A_on_lY</span> <span class=\"n\">B_on_lX</span> <span class=\"n\">B_on_lY</span> <span class=\"n\">hA_neq_B</span>\n</code></pre></div>",
        "id": 433759439,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713361195
    },
    {
        "content": "<p>Oh, is your question \"why isn't <code>_</code> the same as <code>by assumption</code>?\" The <code>_</code> placeholders don't look into the context.</p>",
        "id": 433759674,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713361249
    },
    {
        "content": "<p>There's some notation for <code>by assumption</code> though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h_same_line</span> <span class=\"o\">:</span> <span class=\"n\">lX</span> <span class=\"bp\">=</span> <span class=\"n\">lY</span> <span class=\"o\">:=</span> <span class=\"n\">lX.uniqueness</span> <span class=\"n\">lY</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n</code></pre></div>",
        "id": 433759881,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713361306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/cant.20synthesyze.20a.20single.20argument/near/433758893\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/cant.20synthesyze.20a.20single.20argument/near/433614080\">said</a>:</p>\n<blockquote>\n<p>Does the situation improve if you use <code>variable</code> instead of <code>axiom</code> everywhere?</p>\n</blockquote>\n<p>What was the thought there?</p>\n</blockquote>\n<p>I am not sure now what I was thinking: I am generally <em>very</em> suspicious about <code>axiom</code> and was probably hoping that Lean was similarly suspicious!</p>",
        "id": 433764096,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713362029
    },
    {
        "content": "<p>using <code>variable</code> was already recommended to me before, but for the reason to be able to plug in a real type for Point etc later which might be desirable. But i couldnt deal with the errors so for now im sticking with <code>axiom</code>.</p>",
        "id": 433813700,
        "sender_full_name": "Moritz R",
        "timestamp": 1713367458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/cant.20synthesyze.20a.20single.20argument/near/433759881\">schrieb</a>:</p>\n<blockquote>\n<p>There's some notation for <code>by assumption</code> though:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h_same_line</span> <span class=\"o\">:</span> <span class=\"n\">lX</span> <span class=\"bp\">=</span> <span class=\"n\">lY</span> <span class=\"o\">:=</span> <span class=\"n\">lX.uniqueness</span> <span class=\"n\">lY</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><code>‹_›</code> is exactly what i wanted! Thanks! <br>\nI didnt realize _ wasnt aware of the context and havent seen <code>‹_›</code> yet or in the docs</p>",
        "id": 433814746,
        "sender_full_name": "Moritz R",
        "timestamp": 1713367579
    },
    {
        "content": "<p><code>‹T›</code> is short for <code>((by assumption) : T)</code></p>",
        "id": 433815566,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713367676
    },
    {
        "content": "<p>Oh, so <code>‹_›</code> is basically <code>(by assumption) : infer_it_for_me_please)</code></p>",
        "id": 433816532,
        "sender_full_name": "Moritz R",
        "timestamp": 1713367783
    },
    {
        "content": "<p>By any chance there isnt something that tries to do that for all the remaining arguments like <code>‹_›*</code> in regex notation, is there?</p>",
        "id": 433816956,
        "sender_full_name": "Moritz R",
        "timestamp": 1713367829
    },
    {
        "content": "<p>There's just <code>f ..</code> for <code>f _ _ _ _</code> with the right number of <code>_</code>'s</p>",
        "id": 433817303,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713367871
    },
    {
        "content": "<p>Isn't that for the <em>maximal</em> number?</p>",
        "id": 433817458,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713367890
    },
    {
        "content": "<p>I take it the maximal number isn't the right number to you?</p>",
        "id": 433817898,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713367974
    },
    {
        "content": "<p>I don't really know, I'm just repeating something I heard like a small language model :)</p>",
        "id": 433818020,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713368017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/cant.20synthesyze.20a.20single.20argument/near/433817303\">said</a>:</p>\n<blockquote>\n<p>There's just <code>f ..</code> for <code>f _ _ _ _</code> with the right number of <code>_</code>'s</p>\n</blockquote>\n<p>First time seeing this! Which notation is more recommended? As far as I've seen, in the graph theory side of mathlib, <code>_ _ _ _</code> is always used.</p>",
        "id": 433818061,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1713368034
    },
    {
        "content": "<p>i would want something along the lines of <code> have h_same_line : lX = lY := lX.uniqueness lY A B ..</code><br>\ninstead of <code>have h_same_line : lX = lY := lX.uniqueness lY A B ‹_› ‹_› ‹_› ‹_› ‹_›</code></p>",
        "id": 433818162,
        "sender_full_name": "Moritz R",
        "timestamp": 1713368051
    },
    {
        "content": "<p>For this case there isnt anything right?</p>",
        "id": 433818402,
        "sender_full_name": "Moritz R",
        "timestamp": 1713368135
    },
    {
        "content": "<p>Correct</p>",
        "id": 433819680,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713368517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"602461\">Moritz R</span> has marked this topic as resolved.</p>",
        "id": 433819753,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713368530
    },
    {
        "content": "<p>It seems possible to make some notation like <code>with_assumptions% lX.uniqueness lY A B</code> and have it fill in the rest of the arguments using assumptions.</p>",
        "id": 433819922,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713368598
    },
    {
        "content": "<p>That sounds great! Please tell me more</p>",
        "id": 433820347,
        "sender_full_name": "Moritz R",
        "timestamp": 1713368741
    },
    {
        "content": "<p>Here's an experiment:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `with_assumptions t` elaborates `t` and then fills in unsolved implicit arguments</span>\n<span class=\"sd\">using `by assumption`, if possible.</span>\n\n<span class=\"sd\">It solves for them in reverse order of appearance. -/</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">withAssumptionsStx</span><span class=\"o\">)</span> <span class=\"s2\">\"with_assumptions \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[</span><span class=\"n\">term_elab</span> <span class=\"n\">withAssumptionsStx</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">withAssumptionsElab</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">with_assumptions</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">withSynthesizeLight</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvars</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.getMVars</span> <span class=\"n\">e</span>\n    <span class=\"n\">for</span> <span class=\"n\">mvar</span> <span class=\"k\">in</span> <span class=\"n\">mvars.reverse</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">mvar.isAssignedOrDelayedAssigned</span> <span class=\"k\">then</span> <span class=\"n\">continue</span>\n      <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">mvar.isReadOnlyOrSyntheticOpaque</span> <span class=\"k\">then</span> <span class=\"n\">continue</span>\n      <span class=\"n\">try</span> <span class=\"n\">mvar.assumption</span> <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n    <span class=\"n\">return</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coll_trans</span> <span class=\"o\">(</span><span class=\"n\">hX</span><span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span><span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"bp\">∩</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"bp\">∩</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA_neq_B</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span><span class=\"o\">):</span> <span class=\"n\">collinear</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">∪</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"k\">match</span> <span class=\"n\">hX</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">lX</span><span class=\"o\">,</span><span class=\"n\">hlX</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">hY</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">lY</span><span class=\"o\">,</span><span class=\"n\">hlY</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">--A is on X and Y so it is on lX and on lY</span>\n    <span class=\"k\">have</span> <span class=\"n\">A_on_X</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Set.mem_of_mem_inter_left</span> <span class=\"n\">hA</span>\n    <span class=\"k\">have</span> <span class=\"n\">A_on_lX</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">lX</span> <span class=\"o\">:=</span> <span class=\"n\">hlX</span> <span class=\"n\">A</span> <span class=\"n\">A_on_X</span>\n    <span class=\"k\">have</span> <span class=\"n\">A_on_Y</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Set.mem_of_mem_inter_right</span> <span class=\"n\">hA</span>\n    <span class=\"k\">have</span> <span class=\"n\">A_on_lY</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">lY</span> <span class=\"o\">:=</span> <span class=\"n\">hlY</span> <span class=\"n\">A</span> <span class=\"n\">A_on_Y</span>\n\n\n    <span class=\"c1\">--B is on X and Y so it is on lX and on lY</span>\n    <span class=\"k\">have</span> <span class=\"n\">B_on_X</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Set.mem_of_mem_inter_left</span> <span class=\"n\">hB</span>\n    <span class=\"k\">have</span> <span class=\"n\">B_on_lX</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">lX</span> <span class=\"o\">:=</span> <span class=\"n\">hlX</span> <span class=\"n\">B</span> <span class=\"n\">B_on_X</span>\n    <span class=\"k\">have</span> <span class=\"n\">B_on_Y</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Set.mem_of_mem_inter_right</span> <span class=\"n\">hB</span>\n    <span class=\"k\">have</span> <span class=\"n\">B_on_lY</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">lY</span> <span class=\"o\">:=</span> <span class=\"n\">hlY</span> <span class=\"n\">B</span> <span class=\"n\">B_on_Y</span>\n\n    <span class=\"c1\">--only one Line goes through A and B, so by uniqueness we have lX = lY</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_same_line</span> <span class=\"o\">:</span> <span class=\"n\">lX</span> <span class=\"bp\">=</span> <span class=\"n\">lY</span> <span class=\"o\">:=</span> <span class=\"n\">with_assumptions</span> <span class=\"n\">lX.uniqueness</span> <span class=\"n\">lY</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">..</span>\n    <span class=\"c1\">--now show all the points are collinear because they are on lX=lY</span>\n    <span class=\"k\">have</span> <span class=\"n\">coll</span><span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">collinear</span>\n      <span class=\"n\">use</span> <span class=\"n\">lX</span>\n      <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">hp</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hp</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span><span class=\"n\">inl</span> <span class=\"n\">hX</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">apply</span> <span class=\"n\">hlX</span> <span class=\"n\">p</span> <span class=\"n\">hX</span>\n      <span class=\"bp\">|</span><span class=\"n\">inr</span> <span class=\"n\">hY</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"n\">p_in_lY</span> <span class=\"o\">:</span><span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">lY</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">hlY</span> <span class=\"n\">p</span> <span class=\"n\">hY</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">h_same_line</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">p_in_lY</span>\n        <span class=\"n\">assumption</span>\n    <span class=\"n\">apply</span> <span class=\"n\">coll</span>\n</code></pre></div>\n</div></div>\n<p>With it, you can write <code>have h_same_line : lX = lY := with_assumptions lX.uniqueness lY A B ..</code></p>",
        "id": 433832850,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713372577
    },
    {
        "content": "<p>Im finally back and can take a look: Wow, this is fantastic! It even works using only <code> have h_same_line : lX = lY := with_assumptions lX.uniqueness ..</code></p>",
        "id": 434092251,
        "sender_full_name": "Moritz R",
        "timestamp": 1713452090
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 434093257,
        "sender_full_name": "Moritz R",
        "timestamp": 1713452167
    }
]