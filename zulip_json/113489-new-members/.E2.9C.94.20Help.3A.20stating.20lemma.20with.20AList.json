[
    {
        "content": "<p>I am having trouble stating a lemma I want to use around the relation of Finset and AList from Mathlib.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">keySet</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">AList</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finset.mk</span> <span class=\"o\">(</span><span class=\"n\">Multiset.ofList</span> <span class=\"n\">a.keys</span><span class=\"o\">)</span> <span class=\"n\">a.nodupKeys</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">AList.insert_set_preservation</span>\n    <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">AList</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">key</span><span class=\"o\">}</span>\n    <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"n\">key</span> <span class=\"o\">(</span><span class=\"n\">keySet</span> <span class=\"n\">map</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">keySet</span> <span class=\"o\">(</span><span class=\"n\">AList.insert</span> <span class=\"n\">key</span> <span class=\"n\">value</span> <span class=\"n\">map</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I tried many different variations to be able to properly state <code>AList.insert_set_preservation</code> but to no avail. The error shown with the above snippet is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>application type mismatch\n  insert key (keySet map)\nargument\n  keySet map\nhas type\n  Finset α : Type\nbut is expected to have type\n  ?m.5054 key : Type ?u.5051\n</code></pre></div>\n<p>But unfortunately I do not understand it. Any pointers as to how to make it type check would be appreciated.</p>",
        "id": 411637146,
        "sender_full_name": "Marcin Wojnarowski",
        "timestamp": 1704666342
    },
    {
        "content": "<p>You're hitting a namespace gotcha here. There's a feature that everything that appears in a declaration with a namespaced name (like <code>AList.insert_set_preservation</code>) is resolved inside the namespace (like <code>AList</code>).</p>\n<p>The <code>insert</code> in the LHS of the equality is resolving to <code>AList.insert</code>. If you write <code>Insert.insert</code> instead, then it resolves to global one.</p>",
        "id": 411641663,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704670155
    },
    {
        "content": "<p>Oh wow. Thanks a lot. Now I notice that ctrl+click on insert indeed leads to AList.insert, I should have noticed that.</p>",
        "id": 411641874,
        "sender_full_name": "Marcin Wojnarowski",
        "timestamp": 1704670332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673052\">Marcin Wojnarowski</span> has marked this topic as resolved.</p>",
        "id": 411641877,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704670334
    },
    {
        "content": "<p>I'm not sure you should blame yourself -- while it's a useful feature, it has edge cases like this that perhaps should lead to a more direct error.</p>\n<p>Lean has a feature where if a name resolves in two different ways then it tries both and sees if can distinguish between them by seeing which elaborates. Maybe the declaration namespace feature should be modified so that this feature could have applied here?</p>",
        "id": 411642311,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704670758
    }
]