[
    {
        "content": "<p>This code gives the error \"failed to synthesize Module (R ⧸ P) (R ⧸ P)\", which goes away if I increase the heartbeat limit substantially.  Is there anything obvious that I'm doing wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">-- set_option synthInstance.maxHeartbeats 1000000</span>\n<span class=\"c1\">-- set_option trace.Meta.synthInstance true in</span>\n<span class=\"c1\">-- set_option trace.profiler true in</span>\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">Ideal.IsMaximal</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Ideal.Quotient.field</span> <span class=\"n\">P</span>\n  <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I can fix this example by swapping the order of the two lines in the proof, but in more complicated situations it would be nice not to have to do that.</p>",
        "id": 416789712,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1705674728
    },
    {
        "content": "<p>To fix it you can do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">-- set_option synthInstance.maxHeartbeats 1000000</span>\n<span class=\"c1\">-- set_option trace.Meta.synthInstance true in</span>\n<span class=\"c1\">-- set_option trace.profiler true in</span>\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">Ideal.IsMaximal</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Ideal.Quotient.field</span> <span class=\"n\">P</span>\n  <span class=\"n\">letI</span> <span class=\"n\">ring</span> <span class=\"o\">:=</span> <span class=\"n\">Semiring.toModule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 416796693,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705676739
    },
    {
        "content": "<p>But of course this shouldn't happen in the first place. We are aware of these kinds of issues, even if this one looks a little different from the usual ones.</p>\n<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> do you recognize a known problem here?</p>",
        "id": 416796945,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705676797
    },
    {
        "content": "<p>Ah, wait</p>",
        "id": 416797016,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705676818
    },
    {
        "content": "<p>It is because of the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">letI</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Ideal.Quotient.field</span> <span class=\"n\">P</span>\n</code></pre></div>",
        "id": 416797084,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705676840
    },
    {
        "content": "<p>If you erase it everything is instantaneous.  The point is that you are defining a new field structure on <code>R ⧸ P</code>, and now Lean has to realize that the ring induced by this field structure is the same as the original one. I think this is the part that takes a lot of time.</p>",
        "id": 416797404,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705676917
    },
    {
        "content": "<p>You may use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsField#doc\">docs#IsField</a> via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.Quotient.maximal_ideal_iff_isField_quotient#doc\">docs#Ideal.Quotient.maximal_ideal_iff_isField_quotient</a>, but it depends on what you want to prove.</p>",
        "id": 416797759,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705677006
    },
    {
        "content": "<p>This arises in a situation where I would like to apply a theorem about modules over fields to say something about more general rings, via passage to quotients by maximal ideals. The theorem that I would like to apply has [Field k] in its hypotheses.</p>",
        "id": 416798596,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1705677284
    },
    {
        "content": "<p>There is something suboptimal with <code>Field</code>. I’ll poke at later today.</p>",
        "id": 416798746,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1705677329
    },
    {
        "content": "<p>Thanks.</p>\n<p>it sounds like Ricardo’s suggestion is that I could rewrite the theorem I’m applying to have [CommRing k] (h : IsField k) as its hypothesis?</p>",
        "id": 416799058,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1705677404
    },
    {
        "content": "<p>Yeah but if we think like that then the conclusion is that we should have two versions of every theorem involving a field (and 2^n versions of every theorem involving n fields), which doesn't sound good...</p>",
        "id": 416799192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705677447
    },
    {
        "content": "<p>It's better to fix the problem than to work around it.</p>",
        "id": 416799233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705677463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"571592\">@Paul Nelson</span> I was suggesting that maybe in your case you can find a workaround using <code>IsField</code>, but of course what you did with <code>Field</code> should 100% work. I think the problem comes from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I.IsMaximal</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Quotient.commRing</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">Quotient.groupWithZero</span> <span class=\"n\">I</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>that is still the Lean3 way of defining things.</p>",
        "id": 416800040,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705677681
    },
    {
        "content": "<p>The point is that the way algebraic structures are handled by Lean changed completely between Lean 3 and Lean 4, and even if in theory we can still follow the Lean 3 style, sometimes things become very slow. Here Lean has troubles in checking (the mathematically obvious fact) that the ring induced the field structure is the ring structure you started with. This is because the field structure is defined in a way that is adapted to the Lean 3 way, and we should change it.</p>\n<p>We become aware of this during the port, and we fixed the most problematic definition, but not all of them.</p>",
        "id": 416800629,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705677844
    },
    {
        "content": "<p>Many thanks for the clarifications</p>",
        "id": 416801226,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1705677994
    },
    {
        "content": "<p>In practice you have to wait a couple of days (maybe a couple of hours) and we will fix the problem. Let me see if I can do something.</p>",
        "id": 416801792,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705678148
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9855\">#9855</a> seems enough</p>",
        "id": 416803539,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705678675
    },
    {
        "content": "<p>I was going to suggest</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I.IsMaximal</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toCommRing</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient.commRing</span> <span class=\"n\">I</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Quotient.groupWithZero</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span>\n    <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Quotient.groupWithZero</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_inv_cancel</span>\n    <span class=\"n\">inv_zero</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Quotient.groupWithZero</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv_zero</span> <span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">ideal.quotient.field</span> <span class=\"n\">Ideal.Quotient.field</span>\n</code></pre></div>\n<p>Is yours better? Yours still has a <code>let</code> in but I'm now confused about how bad they are. Hmm, I timed them both and they're the same.</p>",
        "id": 416821833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705683055
    },
    {
        "content": "<p>I honestly don't know, I just copied how the field instance is defined on <code>AdjointRoot</code> because I remember we spent quite a lot of time on that one</p>",
        "id": 416826581,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705684253
    },
    {
        "content": "<p>Eric's comment on the PR is beyond my pay grade.</p>",
        "id": 416829684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705685024
    }
]