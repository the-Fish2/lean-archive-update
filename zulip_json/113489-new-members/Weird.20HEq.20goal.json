[
    {
        "content": "<p>Hi, I am not sure why the following yield a <code>HEq</code> goal that I can't seem to solve.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Interval</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Int</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">univ.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x.val</span> <span class=\"bp\">∈</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"bp\">Σ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">q</span> <span class=\"n\">i.val</span> <span class=\"n\">i.val.succ</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"n\">x.val</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">x.val</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n    <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"n\">y.val</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">⟩⟩</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">use</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(Just the final <code>sorry</code>, where it has a <code>HEq</code> goal)</p>",
        "id": 435055664,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713901115
    },
    {
        "content": "<p>Does <code>apply proof_irrel_heq</code> work?</p>",
        "id": 435056082,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713901263
    },
    {
        "content": "<p>Ahh yes thanks</p>",
        "id": 435056123,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713901281
    },
    {
        "content": "<p>Why doesn't <code>rw [heq_iff_eq]</code> work then?</p>",
        "id": 435056180,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713901306
    },
    {
        "content": "<p>I have no idea: I found the proof using <code>exact?</code>...</p>",
        "id": 435056267,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713901324
    },
    {
        "content": "<p>what</p>",
        "id": 435056290,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713901334
    },
    {
        "content": "<p><code>exact?</code> produces the correct lemma, plus some non-roundtripping filling.  Luckily, <code>apply</code> comes to the rescue.</p>",
        "id": 435056408,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713901391
    },
    {
        "content": "<p>Ahh okay it works on this example because I minimised it, but in my actual use case it times out<br>\n<code>apply?</code> doesn't find anything useful either.</p>",
        "id": 435056460,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713901415
    },
    {
        "content": "<p>(My example involves <code>Ico 0 q \\x Ico 0 q</code> and a few more conditions)</p>",
        "id": 435056500,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713901431
    },
    {
        "content": "<p>thanks, weird</p>",
        "id": 435056552,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713901443
    },
    {
        "content": "<p>If you use <code>congr! 1</code> instead of <code>congr 1</code>, then it solves that last <code>sorry</code> for you. It knows about <code>proof_irrel_heq</code>.</p>",
        "id": 435060815,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713903034
    },
    {
        "content": "<p>Great thanks</p>",
        "id": 435066203,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713905445
    },
    {
        "content": "<p>In my use case it didn’t find it with exact? Because I forgot to congr first haha</p>",
        "id": 435066250,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713905474
    }
]