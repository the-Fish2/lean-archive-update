[
    {
        "content": "<p>Hi, I'm building set theory using the ZF axioms, and have built the Von Neumann natural numbers (<code>ω₀ : MySet</code>). I would like to be able to use the <code>induction</code> tactic with this, but am running into an issue.  A MWE is below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"n\">suppress_compilation</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">MWE</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">MySet</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Mem</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">MySet</span> <span class=\"n\">MySet</span> <span class=\"n\">where</span>\n  <span class=\"n\">mem</span> <span class=\"o\">:=</span> <span class=\"n\">Mem</span>\n\n<span class=\"c1\">-- empty set</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">EmptyCollection</span> <span class=\"n\">MySet</span> <span class=\"n\">where</span>\n  <span class=\"n\">emptyCollection</span> <span class=\"o\">:=</span> <span class=\"n\">empty</span>\n\n\n<span class=\"c1\">-- ZF3: changed to iff</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">pairing_axiom</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pairing</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">pairing_axiom</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Singleton</span> <span class=\"n\">MySet</span> <span class=\"n\">MySet</span> <span class=\"n\">where</span>\n  <span class=\"n\">singleton</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">pairing</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- ZF4 union: for any set A, there is a set B = ⋃ A (= ⋃ {z : z ∈ A})</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">union_axiom</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">union</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">union_axiom</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Union</span> <span class=\"n\">MySet</span> <span class=\"n\">where</span>\n  <span class=\"n\">union</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">union</span> <span class=\"o\">(</span><span class=\"n\">pairing</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">specification_axiom_scheme</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">specification</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">specification_axiom_scheme</span> <span class=\"n\">A</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">successor</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"†\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">successor</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inductive_set</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">†</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">infinity_axiom</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span>  <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">,</span> <span class=\"n\">inductive_set</span> <span class=\"n\">A</span>\n\n<span class=\"c1\">-- equivalent to {x ∈ A | ∀ B : MySet, inductive_set B → x ∈ B}, where A is an inductive set</span>\n<span class=\"kd\">def</span> <span class=\"n\">naturals</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span> <span class=\"o\">:=</span>\n  <span class=\"n\">specification</span> <span class=\"n\">infinity_axiom.choose</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">,</span> <span class=\"n\">inductive_set</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ω₀\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">naturals</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">induction_on_naturals</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hempty</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hsucc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">ω₀</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">k</span><span class=\"bp\">†</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">ω₀</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>  <span class=\"c1\">-- not yet translated into lean, check it works first</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">ω₀</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">induction_on_naturals</span> <span class=\"c1\">-- error here: failed to infer implicit target, it contains unresolved metavariables ?m.4905 (metavariable of type MySet)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>How can I resolve this issue? Thank you</p>",
        "id": 429425836,
        "sender_full_name": "Dylan Lapeyre",
        "timestamp": 1711377948
    },
    {
        "content": "<p>Try <code>using induction_on_naturals (hn := h)</code>.</p>\n<p>Hmm, although this might fix <code>n</code>…</p>\n<p>Maybe use <code>refine</code> instead of <code>induction</code>.</p>",
        "id": 429450704,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711382657
    },
    {
        "content": "<p><code>refine</code> works, thank you!<br>\nBut is there a way to be able to use the induction tactic? If not this solution is fine</p>",
        "id": 429453512,
        "sender_full_name": "Dylan Lapeyre",
        "timestamp": 1711383217
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">elab_as_elim</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">induction_on_naturals</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">ω₀</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hempty</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∅</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsucc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">ω₀</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">k</span><span class=\"bp\">†</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">ω₀</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">MySet</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">ω₀</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"n\">induction_on_naturals</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 429454471,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711383401
    },
    {
        "content": "<p>Note you now have two more sorries to fill in the <em>statement</em>.</p>",
        "id": 429454806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711383475
    },
    {
        "content": "<p>In the inductive step, I don't have access to the inductive hypotheses (they don't have names), is there a way of adding those in?</p>",
        "id": 429471110,
        "sender_full_name": "Dylan Lapeyre",
        "timestamp": 1711387281
    },
    {
        "content": "<p>Using refine with the new definition works (giving me the correct terms to prove and I can do intro to get the inductive hypotheses)</p>",
        "id": 429478933,
        "sender_full_name": "Dylan Lapeyre",
        "timestamp": 1711389504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"704207\">Dylan Lapeyre</span> <a href=\"#narrow/stream/113489-new-members/topic/Error.20on.20induction.20tactic.3A.20failed.20to.20infer.20implicit.20target/near/429471110\">said</a>:</p>\n<blockquote>\n<p>In the inductive step, I don't have access to the inductive hypotheses (they don't have names), is there a way of adding those in?</p>\n</blockquote>\n<p>For natural induction you can name the hypotheses like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>so hopefully something like that works in your case too.</p>",
        "id": 429488224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711392970
    },
    {
        "content": "<p>In fact, if you use <code>induction_on_naturals</code> defined above, I think you would use <code>hempty</code> and <code>hsucc</code> in place of <code>zero</code> and <code>succ</code>. If they need arguments you can name them as Kevin did above.</p>",
        "id": 429488670,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1711393151
    }
]