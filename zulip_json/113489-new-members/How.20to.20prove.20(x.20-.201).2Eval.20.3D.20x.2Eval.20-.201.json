[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.BoxIntegral.Partition.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Sups</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.FiniteMeasure</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.SuccPred</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"c1\">-- n no of slices</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Fin.coe_sub_one</span>\n<span class=\"c1\">--Fin.coe_sub_one {n : ℕ} (a : Fin (n + 1)) : ↑(a - 1) = if a = 0 then n else ↑a - 1</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">QAQ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">Spe</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">x.val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 424030256,
        "sender_full_name": "Xintao Yu",
        "timestamp": 1709216776
    },
    {
        "content": "<p>I searched for existing theorems in the Mathlib library, and Fin.coe_sub_one is the closest one, but I still don't know how to convert Fin n+1 to Fin n, both rewrite and refine seem to be unusable</p>",
        "id": 424031338,
        "sender_full_name": "Xintao Yu",
        "timestamp": 1709217074
    },
    {
        "content": "<p>First show that there exists some <code>m</code> such that <code>m + 1 = n</code>.</p>",
        "id": 424036122,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709218332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20prove.20.28x.20-.201.29.2Eval.20.3D.20x.2Eval.20-.201/near/424036122\">said</a>:</p>\n<blockquote>\n<p>First show that there exists some <code>m</code> such that <code>m + 1 = n</code>.</p>\n</blockquote>\n<p>Thank you for your reply, actually I've tried this thought before, but maybe because I did not use the \\exist to prove?<br>\n I'll try it tomorrow, and hope to get more guidance from you!</p>",
        "id": 424063380,
        "sender_full_name": "Xintao Yu",
        "timestamp": 1709225415
    },
    {
        "content": "<p>I tried to prove QAQ in a more basic way but was still confused with some details</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.BoxIntegral.Partition.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Sups</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.FiniteMeasure</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.SuccPred</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"c1\">-- n no of slices</span>\n\n\n<span class=\"c1\">--Fin.coe_sub_one {n : ℕ} (a : Fin (n + 1)) : ↑(a - 1) = if a = 0 then n else ↑a - 1</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">QAQ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">Spe</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">x.val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.val_add_eq_ite</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">g₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.coe_neg</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">g₂</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mod_eq_of_lt</span><span class=\"o\">]</span>\n    <span class=\"n\">cases</span> <span class=\"n\">n</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.lt_trans</span> <span class=\"n\">Nat.le.refl</span> <span class=\"n\">Spe</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le.refl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">g₁</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x.val</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.le_add_pred_of_pos</span> <span class=\"n\">n</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 424170210,
        "sender_full_name": "Xintao Yu",
        "timestamp": 1709276568
    },
    {
        "content": "<p>Here is the result :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">QAQ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">Spe</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">x.val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.val_add_eq_ite</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">g₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.coe_neg</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">Spe</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">g₂</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mod_eq_of_lt</span><span class=\"o\">]</span>\n    <span class=\"n\">cases</span> <span class=\"n\">n</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.lt_trans</span> <span class=\"n\">Nat.le.refl</span> <span class=\"n\">Spe</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le.refl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">g₁</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_eq_of_eq_add</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x.val</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">x.val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.sub_add_comm</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">Spe</span><span class=\"o\">)]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x.val</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x.val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sub_add_comm</span> <span class=\"n\">g</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x.val</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Nat.pos_iff_ne_zero.mp</span> <span class=\"n\">g</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.le_add_pred_of_pos</span> <span class=\"n\">n</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 424181611,
        "sender_full_name": "Xintao Yu",
        "timestamp": 1709282267
    },
    {
        "content": "<p>Here is a shorter alternative, if you prefer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">QAQ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">Spe</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">x.val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.coe_sub</span><span class=\"o\">,</span> <span class=\"n\">Fin.val_one'</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">Spe</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.add_sub_assoc</span> <span class=\"n\">Spe.le</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">Nat.mod_eq_sub_mod</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_assoc</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">g</span><span class=\"o\">),</span> <span class=\"n\">Nat.add_sub_cancel_left</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le_sub_of_add_le</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.add_le_add</span> <span class=\"n\">Nat.le.refl</span> <span class=\"n\">g</span>\n</code></pre></div>",
        "id": 424229645,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709297853
    }
]