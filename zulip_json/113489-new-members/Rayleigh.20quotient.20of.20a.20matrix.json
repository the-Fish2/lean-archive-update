[
    {
        "content": "<p>I would like to use the Rayleigh quotient of a matrix in a theorem, I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">E'</span> <span class=\"n\">E'</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">E'</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ContinuousLinearMap.rayleighQuotient</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.toContinuousLinearMap</span> <span class=\"o\">(</span><span class=\"n\">Matrix.toLin'</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>This raises the following error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">ContinuousLinearMap.rayleighQuotient</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.toContinuousLinearMap</span> <span class=\"o\">(</span><span class=\"n\">toLin'</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">LinearMap.toContinuousLinearMap</span> <span class=\"o\">(</span><span class=\"n\">toLin'</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">ContinuousLinearMap</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">DivisionSemiring.toSemiring</span> <span class=\"n\">DivisionSemiring.toSemiring</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n    <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">topologicalSpace</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommGroup.toAddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">addCommGroup</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">topologicalSpace</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommGroup.toAddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">addCommGroup</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"n\">E'</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"n\">E'</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">ContinuousLinearMap</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">DivisionSemiring.toSemiring</span> <span class=\"n\">DivisionSemiring.toSemiring</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n    <span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommGroup.toAddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"n\">NormedAddCommGroup.toAddCommGroup</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n    <span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommGroup.toAddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"n\">NormedAddCommGroup.toAddCommGroup</span><span class=\"o\">)</span>\n    <span class=\"n\">NormedSpace.toModule</span> <span class=\"n\">NormedSpace.toModule</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span>\n</code></pre></div>\n<p>To find the issue I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">T'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">E'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ContinuousLinearMap.rayleighQuotient</span> <span class=\"n\">T</span> <span class=\"c1\">--This works</span>\n<span class=\"k\">#check</span> <span class=\"n\">ContinuousLinearMap.rayleighQuotient</span> <span class=\"n\">T'</span> <span class=\"c1\">--This does not</span>\n</code></pre></div>\n<p>which raises a similar error.  How can this be when both <code>E</code> and <code>E' ‚Üí ‚Ñù</code> fulfill the same assumptions?</p>\n<p>Thanks in advance for any help.</p>",
        "id": 423607007,
        "sender_full_name": "Adrian W√ºthrich",
        "timestamp": 1709040872
    },
    {
        "content": "<p>You want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">ContinuousLinearMap.rayleighQuotient</span> <span class=\"o\">(</span><span class=\"n\">Matrix.toEuclideanCLM</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:=</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 423610044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709041899
    },
    {
        "content": "<p>Your second code block is interesting but a distraction from the problem in your first one</p>",
        "id": 423610091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709041915
    },
    {
        "content": "<p>Your first problem is caused by <code>E' ‚Üí ‚Ñù</code> not being an inner product space, because it has the wrong norm</p>",
        "id": 423610166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709041932
    },
    {
        "content": "<p>Using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.toEuclideanCLM#doc\">docs#Matrix.toEuclideanCLM</a> gives you the L2 norm, which <em>is</em> an inner product space</p>",
        "id": 423610215,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709041951
    },
    {
        "content": "<p>Thanks a lot, it's working now. Just out of curiosity what could be the issue in the second block?</p>",
        "id": 423615420,
        "sender_full_name": "Adrian W√ºthrich",
        "timestamp": 1709043499
    },
    {
        "content": "<p>The issue in the second block is that <code>NormedAddCommGroup (E' ‚Üí ‚Ñù)</code> means \"assume some random normed structure on the type of vectors\", but Mathlib already has an existing norm structure (the sup-norm) that is not apriori equal to this one</p>",
        "id": 423627181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709046303
    },
    {
        "content": "<p>Thank you for clarifying</p>",
        "id": 423667654,
        "sender_full_name": "Adrian W√ºthrich",
        "timestamp": 1709057129
    },
    {
        "content": "<p>I have a question which I think relates to the same issue. I want to get the orthogonal complement of a vector <code>E ‚Üí ‚Ñù</code>, this is what I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)]</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">‚Ñù</span> <span class=\"bp\">‚àô</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">‚Ü¶</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))</span><span class=\"bp\">·óÆ</span>\n</code></pre></div>\n<p>which raises the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"n\">‚Ñù</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">NormedSpace.toModule</span>\n</code></pre></div>\n<p>What I understan is that <code>Submodule.orthogonal</code> implicitly infers <code>InnerProductSpace</code>. In this case it tries to build the inner product space using the sup norm which of course doesn't work. Now when i define the variable <code>[InnerProductSpace ‚Ñù (E ‚Üí ‚Ñù)] </code>, its norm might not agree with the <code>NormedAddCommGroup</code> implicitly infered. I would like lean to use the L2 norm and <code>InnerProductSpace ‚Ñù (EuclideanSpace ‚Ñù (E ‚Üí ‚Ñù))</code> instead. How do I tell lean to do so?</p>",
        "id": 424225964,
        "sender_full_name": "Adrian W√ºthrich",
        "timestamp": 1709296665
    },
    {
        "content": "<p>You want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">‚Ñù</span> <span class=\"bp\">‚àô</span> <span class=\"o\">((</span><span class=\"n\">WithLp.equiv</span> <span class=\"mi\">2</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">‚Ü¶</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))</span><span class=\"bp\">·óÆ</span>\n</code></pre></div>\n<p>You have <code>fun _ ‚Ü¶ 1 : E ‚Üí ‚Ñù</code>, but you want a term of type <code>EuclideanSpace ‚Ñù E</code>, which <code>WithLp.equiv 2 _</code> converts to</p>",
        "id": 424226516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709296847
    },
    {
        "content": "<p>You should never write <code>[InnerProductSpace ‚Ñù (E ‚Üí ‚Ñù)]</code>, because this conflicts with the norm that mathlib already equips functions with</p>",
        "id": 424226655,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709296904
    },
    {
        "content": "<p>Note that <code>[Fintype (E ‚Üí ‚Ñù)]</code> is false unless <code>IsEmpty E</code></p>",
        "id": 424226959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709297006
    },
    {
        "content": "<p>Wow, thank you for the instant response. <code>[Fintype (E ‚Üí ‚Ñù)]</code> is silly , I put that there without thinking trying to fix things.</p>",
        "id": 424227591,
        "sender_full_name": "Adrian W√ºthrich",
        "timestamp": 1709297240
    },
    {
        "content": "<p>Generally speaking, if lean says it can't find an instance for something involving a concrete type (like <code>‚Ñù</code>), adding <code>[...]</code> is the wrong fix</p>",
        "id": 424228466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709297502
    },
    {
        "content": "<p>A better strategy in that case is to try adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">InnerProductSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and see if you can fill the sorry</p>",
        "id": 424228664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709297553
    },
    {
        "content": "<p>(in this case you'd find it impossible, because the inner product induces the wrong norm)</p>",
        "id": 424228739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709297578
    },
    {
        "content": "<p>Got it, i'll try that in the future.</p>",
        "id": 424229633,
        "sender_full_name": "Adrian W√ºthrich",
        "timestamp": 1709297849
    }
]