[
    {
        "content": "<p>Why do functions that call partial functions not have to be partial?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span><span class=\"w\"> </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">x</span>\n\n<span class=\"c1\">-- `bar` does not have to be marked as `partial`</span>\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</code></pre></div>",
        "id": 444707989,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718373887
    },
    {
        "content": "<p>Functions that call <code>unsafe</code> function have to be marked as <code>unsafe</code>. What is the reason for this difference in behaviour between <code>partial</code> and <code>unsafe</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">(kernel) invalid declaration, it uses unsafe declaration 'ptrAddrUnsafe'</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">fibonacci</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Id.run</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mut</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Array.mkEmpty</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">fib.push</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">fib.push</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"n\">dbg_trace</span><span class=\"w\"> </span><span class=\"n\">ptrAddrUnsafe</span><span class=\"w\"> </span><span class=\"n\">fib</span>\n<span class=\"w\">    </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">fib.push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">fib</span>\n</code></pre></div>\n<p>Intuitively, functions that call partial functions should be marked as partial because they cannot be guaranteed to terminate.</p>",
        "id": 444708640,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718374071
    },
    {
        "content": "<p>The name is a bit of a misnomer, it is not a viral marker for partiality (as you have observed). Rather, it is a special variant of <code>opaque</code> for compiling general recursive functions. When you see <code>partial def foo</code>, this means that <code>foo</code> cannot be unfolded to the thing on the other side of the <code>:=</code>.</p>",
        "id": 444792646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718400453
    },
    {
        "content": "<p>Thank you. </p>\n<blockquote>\n<p>this means that <code>foo</code> cannot be unfolded to the thing on the other side of the <code>:=</code>.</p>\n</blockquote>\n<p>What this means?  Definitions marked as <code>partial</code> can be reduced as following: (<code>opaque</code> marked definition can't be reduced)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span><span class=\"w\"> </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">123</span>\n\n<span class=\"sd\">/-- info: 123 -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"n\">foo</span>\n\n<span class=\"sd\">/-- info: 123 -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">#reduce</span><span class=\"w\"> </span><span class=\"n\">foo</span>\n\n<span class=\"n\">opaque</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"hello\"</span>\n\n<span class=\"sd\">/-- info: bar -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">#reduce</span><span class=\"w\"> </span><span class=\"n\">bar</span>\n</code></pre></div>",
        "id": 444865548,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718459780
    },
    {
        "content": "<p>It seems lean ignores <code>partial</code> on definitions that are not recursive. I guess that muddies the mental model a bit...</p>",
        "id": 444895185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718476657
    },
    {
        "content": "<p>It might be better to make an error if you mark a non-recursive function as partial...</p>",
        "id": 444946699,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718518886
    },
    {
        "content": "<p>Maybe there is the need for an unused <code>partial</code> linter.  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 444948611,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718520662
    },
    {
        "content": "<p>Is it difficult to express information about whether a function stops or not at type level, which I hear is possible in the language such as <a href=\"https://koka-lang.github.io/koka/doc/index.html\">koka</a>?</p>",
        "id": 444964720,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718534198
    },
    {
        "content": "<p>I think this is related to algebraic effect... I think algebraic effect enables total/partial check in type theory...</p>",
        "id": 444967070,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718536303
    },
    {
        "content": "<p>Among other theorem proving support systems, F star seems to support algebraic effect; is it difficult to implement in Lean?</p>",
        "id": 444995532,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718557294
    },
    {
        "content": "<p>Having an efficient implementation of algebraic effects requires lots of investment in the compiler and runtime that we are most likely not going to undertake in the near future (potentially never).</p>\n<p>Tracking non termination globally is not an issue, we can make <code>partial</code> viral, it was merely decided not to do this. This does have a nice benefit which is that you can still prove things about functions that call <code>partial</code> functions but are not themselves marked as partial.</p>",
        "id": 444999444,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1718559715
    },
    {
        "content": "<p>Note that partial is also not a primitive of the system, it is a feature that comes from the combination of unsafe, opaque and implemented_by, so even if we were to make partial viral you do still not have a guarantee that your functions terminate, simply because people can imitate partial on their own.</p>",
        "id": 444999546,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1718559770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> <a href=\"#narrow/stream/113489-new-members/topic/functions.20that.20call.20partial.20functions.20not.20have.20to.20be.20partial/near/444708640\">said</a>:</p>\n<blockquote>\n<p>Functions that call <code>unsafe</code> function have to be marked as <code>unsafe</code>.</p>\n</blockquote>\n<p>Note that it's possible to call <code>unsafe</code> functions indirectly using <code>opaque</code>/<code>@[implemented_by]</code> to \"launder\" the fact that it's unsafe. You have to be very careful with doing this though because then the burden is on you to convince yourself that what you're doing is actually safe.</p>\n<p>The <code>unsafe ...</code> term is a way to do this whole thing automatically:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">fibonacci</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Id</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mut</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"bp\">.</span><span class=\"n\">mkEmpty</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"bp\">.</span><span class=\"n\">push</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"bp\">.</span><span class=\"n\">push</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"n\">dbg_trace</span><span class=\"w\"> </span><span class=\"n\">unsafe</span><span class=\"w\"> </span><span class=\"n\">ptrAddrUnsafe</span><span class=\"w\"> </span><span class=\"n\">fib</span>\n<span class=\"w\">    </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"bp\">.</span><span class=\"n\">push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">fib</span>\n</code></pre></div>\n<p>This is more-or-less safe here because <code>dbg_trace unsafe ptrAddrUnsafe fib</code> doesn't functionally affect what <code>fibonacci</code> does.</p>",
        "id": 445005251,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718562959
    },
    {
        "content": "<p>You can even prove things about this <code>fibonacci</code> function. Here's an indirect proof of that claim:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">fibonacci</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Id</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mut</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"bp\">.</span><span class=\"n\">mkEmpty</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"bp\">.</span><span class=\"n\">push</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"bp\">.</span><span class=\"n\">push</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"n\">dbg_trace</span><span class=\"w\"> </span><span class=\"n\">unsafe</span><span class=\"w\"> </span><span class=\"n\">ptrAddrUnsafe</span><span class=\"w\"> </span><span class=\"n\">fib</span>\n<span class=\"w\">    </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"bp\">.</span><span class=\"n\">push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">fib</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">fibonacci'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Id</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mut</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"bp\">.</span><span class=\"n\">mkEmpty</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"bp\">.</span><span class=\"n\">push</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"bp\">.</span><span class=\"n\">push</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"bp\">.</span><span class=\"n\">push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">fib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">fibonacci</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">fibonacci'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 445005435,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718563064
    }
]