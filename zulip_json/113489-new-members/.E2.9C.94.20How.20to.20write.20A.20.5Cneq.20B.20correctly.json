[
    {
        "content": "<p>The following is a proof of false, so my assumptions must be somehow wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">point</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">what_the</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA_neq_B</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span><span class=\"o\">):</span> <span class=\"n\">X</span><span class=\"bp\">≠</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hA_neq_B</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div>\n<p>I want to say that A,B are points and that they are not the same Point. Somehow this is not the way?</p>",
        "id": 433146611,
        "sender_full_name": "Moritz R",
        "timestamp": 1713111829
    },
    {
        "content": "<p>Try <code>#print what_the</code> to find out what you've actually proved.</p>",
        "id": 433146679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713111881
    },
    {
        "content": "<p>Oh, no, I see: because <code>point</code> has no fields, structure eta says that any two points are equal and the proof is <code>rfl</code>.</p>",
        "id": 433146818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713112010
    },
    {
        "content": "<p>What would be the way to postulate a type \"point\" that we know nothing about the correct way? I dont want to construct it or smth</p>",
        "id": 433147207,
        "sender_full_name": "Moritz R",
        "timestamp": 1713112326
    },
    {
        "content": "<p>like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">point</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>?</p>",
        "id": 433147227,
        "sender_full_name": "Moritz R",
        "timestamp": 1713112362
    },
    {
        "content": "<p>parametrize your theorems with a type called point:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 433147282,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1713112428
    },
    {
        "content": "<p>I dont want to add it to every theorem: I do axiomatic geometry as a pet project to learn a bit of lean</p>",
        "id": 433147477,
        "sender_full_name": "Moritz R",
        "timestamp": 1713112579
    },
    {
        "content": "<p>Well you will have to do that but Lean has got you covered, you can instruct it to automatically add the type as a parameter to all things that use it in a section or namespace using the <code>variable {Point : Type}</code> command</p>",
        "id": 433147520,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1713112630
    },
    {
        "content": "<p>Doesnt this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">point</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>do what i want?</p>",
        "id": 433147613,
        "sender_full_name": "Moritz R",
        "timestamp": 1713112686
    },
    {
        "content": "<p>This tells Lean that there exists a concrete type <code>point</code>. It does not allow you to substitute in an actual point type later on. Generally speaking we almost never use the <code>axiom</code> keyword in Lean. I also don't really see the point in doing so given the <code>variable</code> command</p>",
        "id": 433147700,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1713112775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"602461\">Moritz R</span> has marked this topic as resolved.</p>",
        "id": 433147841,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713112877
    }
]