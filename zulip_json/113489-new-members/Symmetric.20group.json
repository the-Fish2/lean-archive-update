[
    {
        "content": "<p>Lately I have tried to figure out how permutations work.</p>\n<p>I have figured out I can use Fin and Equiv.Perm to atleast get stuff working. But some things were just hard. Here is something I've played around with.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Cycle</span><span class=\"bp\">.</span><span class=\"n\">ofList</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">next</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">],[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">],[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]]</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">d</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">]</span>\n\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">[(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">),</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>So I've played around a little bit with it but it seems that the Cycle generator doesn't want to work.<br>\nAlso for some reason I can't index lists.</p>\n<p>The point I want to make is eventually I want to define a function that depends on an upper size n and some value i. It maps some values based on i bijectively to 1 to n. And I want to show that this is actually a permutation.</p>\n<p>Here is an example in prosa. Map 1 to i to n-i+1 to n and map i+1 to n to 1 to n-i.</p>\n<p>What would be the steps to show that this is a permutation. I need to show bijection which means I would likely need to construct the inverse. In our case the inverse is quite easy to construct namel y map 1.. n-j to j+1.. n and map n-j+1..n to 1..j</p>\n<p>However I don't know what the idiomatic lean way of writing this down is. Is it just defining a function and showing that it is an inverse or are you using some tools developed in Equiv.Perm.</p>",
        "id": 445188201,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718645900
    },
    {
        "content": "<p>You probably want to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">next</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where each <code>sorry</code> should be replaced by a proof.</p>",
        "id": 445189424,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718646320
    },
    {
        "content": "<p>For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Cycle</span><span class=\"bp\">.</span><span class=\"n\">ofList</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">next</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>prints <code>1</code>.</p>",
        "id": 445189806,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718646443
    },
    {
        "content": "<p>Thanks for the quick answer.</p>\n<p>Ok hey that works, it evaluates that one correctly but I still fail to get why I need to prove it and what I need to prove.<br>\nYou just used simp[b] and I fail to get what that accomplishes.</p>",
        "id": 445190057,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718646512
    },
    {
        "content": "<p>However it shows the correct result</p>",
        "id": 445190095,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718646534
    },
    {
        "content": "<p>Look at the definition of the function you call. One of the arguments is a <em>proof</em> that there are no duplicates. The last argument is a <em>proof</em> that <code>7</code> is there.</p>",
        "id": 445190358,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718646620
    },
    {
        "content": "<p>As an easy exercise, try to manually edit <code>b</code> so that; (1) the first proposition is false, (2) the second proposition is false, (3) both propositions are false; and observe what is underlined in red.</p>",
        "id": 445190829,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718646771
    },
    {
        "content": "<p>You can also use <code>by decide</code> in place of either proof.</p>",
        "id": 445191021,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718646828
    },
    {
        "content": "<p>Ah got it. Assuming I want to feel pain, what would the manual proof look like? Let's say for a simple case of [1,2] I wanted to evaluate <a href=\"http://b.next\">b.next</a> sorry 1 sorry without using the tactics for learning purposes</p>",
        "id": 445191282,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718646901
    },
    {
        "content": "<p>If you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Cycle</span><span class=\"bp\">.</span><span class=\"n\">ofList</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">nodup_b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">Nodup</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">nodup_b</span>\n<span class=\"bp\">#</span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">nodup_b</span>\n</code></pre></div>\n<p>the last line will give you something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">b'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">Nodup</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"n\">of_eq_true</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">Cycle</span><span class=\"bp\">._</span><span class=\"n\">auxLemma</span><span class=\"bp\">.</span><span class=\"m\">30</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">Nodup</span><span class=\"bp\">._</span><span class=\"n\">auxLemma</span><span class=\"bp\">.</span><span class=\"m\">4</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n<span class=\"w\">        </span><span class=\"o\">(</span><span class=\"n\">congr</span>\n<span class=\"w\">          </span><span class=\"o\">(</span><span class=\"n\">congrArg</span><span class=\"w\"> </span><span class=\"n\">And</span>\n<span class=\"w\">            </span><span class=\"o\">(</span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n<span class=\"w\">              </span><span class=\"o\">(</span><span class=\"n\">congrArg</span><span class=\"w\"> </span><span class=\"n\">Not</span>\n<span class=\"w\">                </span><span class=\"o\">(</span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"n\">Init</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">Lemmas</span><span class=\"bp\">._</span><span class=\"n\">auxLemma</span><span class=\"bp\">.</span><span class=\"m\">19</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">CharZero</span><span class=\"bp\">.</span><span class=\"n\">Defs</span><span class=\"bp\">._</span><span class=\"n\">auxLemma</span><span class=\"bp\">.</span><span class=\"m\">10</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)))</span>\n<span class=\"w\">              </span><span class=\"n\">not_false_eq_true</span><span class=\"o\">))</span>\n<span class=\"w\">          </span><span class=\"o\">(</span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">Nodup</span><span class=\"bp\">._</span><span class=\"n\">auxLemma</span><span class=\"bp\">.</span><span class=\"m\">4</span>\n<span class=\"w\">            </span><span class=\"o\">(</span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n<span class=\"w\">              </span><span class=\"o\">(</span><span class=\"n\">congr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">congrArg</span><span class=\"w\"> </span><span class=\"n\">And</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">congrArg</span><span class=\"w\"> </span><span class=\"n\">Not</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Init</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">Lemmas</span><span class=\"bp\">._</span><span class=\"n\">auxLemma</span><span class=\"bp\">.</span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">not_false_eq_true</span><span class=\"o\">))</span>\n<span class=\"w\">                </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">Nodup</span><span class=\"bp\">._</span><span class=\"n\">auxLemma</span><span class=\"bp\">.</span><span class=\"m\">2</span><span class=\"o\">)</span>\n<span class=\"w\">              </span><span class=\"o\">(</span><span class=\"n\">and_self</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"o\">))))</span>\n<span class=\"w\">        </span><span class=\"o\">(</span><span class=\"n\">and_self</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>which I have no interest in parsing or simplifying.</p>\n<p>However, if you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Cycle</span><span class=\"bp\">.</span><span class=\"n\">ofList</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">nodup_b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">Nodup</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">decide</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">nodup_b</span>\n<span class=\"bp\">#</span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">nodup_b</span>\n</code></pre></div>\n<p>you will obtain the entire proof by computation.</p>\n<p>PS: Do you know the difference between the following commands?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">check</span>\n<span class=\"bp\">#</span><span class=\"n\">print</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span>\n</code></pre></div>\n<p>PPS: I have no idea why <code>decide</code> works on <code>Cycle</code>, which is <code>Quotient</code>. Let's wait for some experts to clarify.</p>",
        "id": 445192065,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718647201
    },
    {
        "content": "<p>Well check gives me the type, print I guess prints something and eval evaluates something. I guess the difference between print and eval might be vm execution but I've never looked into it.</p>\n<p>EDIT: Actually I've tried print vs eval on def c:=3, eval just gives me the final value of 3 while print prints everything. I guess eval just reduces everything to a final value.</p>\n<p><code>#eval b.next (by simp[b]) 1 (by simp[b])</code> works but <code>#print b.next (by simp[b]) 1 (by simp[b])</code> does not.</p>\n<p>I assume decidability is a very powerful tool in checking proofs as far as I have learned. Basically anything that you can \"easily\" reason about, anything that has a simple algorithm a computer can decide.<br>\n<code>example : 10^9 &lt; 2^30 := by decide</code> this works and it's cool that it works. I guess when you can use the decidability you should.</p>\n<p>Anyways back to my previous question: How do I now define parametrised permutations which are dependent on input size n? Do I just define a function and prove bijection, because I don't see how decidability will help me here.</p>",
        "id": 445194766,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718648050
    },
    {
        "content": "<p>You can probably do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">swap_halves_aux</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">omega</span><span class=\"bp\">⟩</span>\n<span class=\"w\">  </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">omega</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">swap_halves_twice</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">swap_halves_aux</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">swap_halves_aux</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">hx</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"n\">simp_all</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">swap_halves_aux</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">swap_halves</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"bp\">⟨</span><span class=\"n\">swap_halves_aux</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">swap_halves_aux</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">swap_halves_twice</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">swap_halves_twice</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n<p>I don't know what the idiomatic way is.</p>",
        "id": 445199071,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718649359
    },
    {
        "content": "<p>Oh wow so I've experimented a bit with it and I got the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">omega</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n<p>works but</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">omega</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n<p>fails. This makes sense but it is so crazy. The fact that once you have subtraction things start to break down and that you have to worry much more about types. The first one works because apparently lean can prove that n+a-i&lt;n because it can use the positive number i-a but the second fails because it can't use any number, as a-i gets calculated first and it can get rounded up to 0, which swallows the subtraction in some way.</p>\n<p>Do I see that correctly?</p>",
        "id": 445203186,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718650723
    },
    {
        "content": "<p>Pretty much</p>",
        "id": 445204280,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718651073
    },
    {
        "content": "<p>Wait, how would I then show for example that <code>#check -1*-1</code> is a natural number. It only shows that the type is an integer. I never really understood how the coercions work. Once you have subtractions you better use Integers and once you have divisions you use Rationals.</p>\n<p>Here is an example<br>\n<code>example (a b : Int ) (h1: a &lt; 0) (h2: b &lt; 0) : ( (a*b):ℕ  ) := by sorry</code><br>\nHow could I show that a*b is a natural number?</p>",
        "id": 445206602,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718651884
    },
    {
        "content": "<p>As of right now this doesn't even compile, surely there is a way to assert that something has a type</p>",
        "id": 445206737,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718651932
    },
    {
        "content": "<p>In informal mathematics, we tend to gloss over the fact that it's not really true that any natural number \"is\" an integer or that a nonnegative integer \"is\" a natural number. Lean forces you to be more explicit and say something like \"there exists a natural number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mtext> seen as an integer</mtext><mo stretchy=\"false\">)</mo><mo>=</mo><mo>−</mo><mn>1</mn><mo>⋅</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">(n \\text{ seen as an integer}) = -1 \\cdot -1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord text\"><span class=\"mord\"> seen as an integer</span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span></p>",
        "id": 445209592,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718652849
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"o\">,(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hc</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">mul_pos_of_neg_of_neg</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"n\">hb</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"bp\">≤</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">le_of_lt</span><span class=\"w\"> </span><span class=\"n\">hc</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">toNat_of_nonneg</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">hd</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Alright I have tried it. Would this suffice as a proof?</p>",
        "id": 445223496,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718657748
    },
    {
        "content": "<p>Looks good!</p>",
        "id": 445223612,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718657787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"725717\">metakuntyyy</span> <a href=\"#narrow/stream/113489-new-members/topic/Symmetric.20group/near/445223496\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"o\">,(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hc</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">mul_pos_of_neg_of_neg</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"n\">hb</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"bp\">≤</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">le_of_lt</span><span class=\"w\"> </span><span class=\"n\">hc</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">toNat_of_nonneg</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">hd</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Alright I have tried it. Would this suffice as a proof?</p>\n</blockquote>\n<p>Yes!</p>\n<p>BTW, if you like terms, your proof is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"bp\">⟨_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">toNat_of_nonneg</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">mul_pos_of_neg_of_neg</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"n\">hb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 445224796,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718658210
    },
    {
        "content": "<p>So let me try to recap and see if I understand correctly.<br>\nIn lean types like the natural numbers and integers are a priori completely different. However in informal mathematics it is true that the natural numbers are a subset of the integers, that's why you can use a natural number where a integer is expected. Lean handles that with implicit coercions. Going in the other direction is impossible. Assuming an integer that is negative I can never show that the negative of this integer is a natural number. The only thing I can show is that the negative of this negative integer is positive, and then invoke a lemma that shows that this positive integer is equal to its projection to the natural number, proving the existence of a natural number equal to the negative of the negative integer.</p>\n<p>As such moving from such types directly is never possible, once something has a type you need a type converting function or a coercion that embeds the smaller in the bigger set/type.</p>\n<p>For example if we define the infinite sum from 0 to infinity of 1/2^k we could show that there exists a natural number (that is 2) which, when coerced to a real number is equal to this infinite sum. There is no way of getting the real converted back to a natural number. You can coerce to the bigger type: Like Nat-&gt;Int-&gt;Rat-&gt; Real, and there are lemmas which make further usage of the bigger type helpful, but going back involves proofs that your number is actually of the subtype. For example 2:Int is positive, therefore (2:Nat)=(2:Int).toNat, which I can use to rewrite some lemmas.</p>\n<p>Therefore one needs to be very mindful of the domain or the type one chooses as one can suddenly find himself in \"type hell\".</p>\n<p>Is this recap good or am I missing something?</p>",
        "id": 445226214,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718658708
    },
    {
        "content": "<p>Sounds like a good summary, yeah</p>",
        "id": 445226948,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718658996
    },
    {
        "content": "<p>Alright cool, now I have a follow up question before I go.<br>\nAssume I am doing an induction proof over natural numbers, where the statement is over the natural numbers, but for that proof I have to go to the rationals. Something like (a*b)&lt;2^c where a,b,c:Nat. But the induction proof involves rationals. Can I formulate the statement over the naturals and then dip into rationals or do I directly have to type convert to rationals.</p>\n<p>Assume I need the statement (a*b)\\leq 2^c+1 eventually, which I'd be able to deduce if lhs and rhs are integers/natural numbers but not rational numbers.</p>\n<p>How would I move forward, I need to dip into rationals to prove the first statement, but I can't use the second statement (Peano2) because I have proven the inequality for rationals. How would I resolve this issue.</p>\n<p>Honestly this might be the most important question I have asked as I might learn more about how lean works from this one question than any other question.</p>\n<p>It is also unfortunate albeit understandable that there are no type conversions. Coming from metamath it was really nice to just be able to use a natural number where an integer was expected. It was also possible to prove that an integer is a natural number by showing it is positive. I might have to wrap my head around it and try to find the most elegant way of popping in and out of types where needed.</p>",
        "id": 445229311,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718659968
    },
    {
        "content": "<p>Seems like if you were doing induction on the naturals, then the thing to do would be to convert/dip into rationals after you had entered the inductive step of the proof.</p>",
        "id": 445231204,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1718660923
    },
    {
        "content": "<p>So something like this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">inductiveineq</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">choose</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">induction'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">le_induction</span>\n<span class=\"w\">  </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">decide</span>\n<span class=\"w\">  </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hah</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">):=</span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">haf</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">choose</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">choose</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(((</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)):</span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(((</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)):</span><span class=\"n\">ℚ</span><span class=\"o\">):=</span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">choose_eq_factorial_div_factorial</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span>\n<span class=\"w\">      </span><span class=\"gr\">sorry</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Note I am trying to prove <br>\n<a href=\"https://us.metamath.org/mpeuni/2ap1caineq.html\">https://us.metamath.org/mpeuni/2ap1caineq.html</a><br>\nthat I have successfully formalized in metamath.</p>",
        "id": 445231497,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718661071
    },
    {
        "content": "<p>Likely a good example of this would be the formula for the sum <code>1^2 + 2^2 + ... + n^2</code> which I remember being in mathlib, but can't find.</p>",
        "id": 445231649,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1718661136
    },
    {
        "content": "<p>That code you posted doesn't compile</p>",
        "id": 445231675,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1718661151
    },
    {
        "content": "<p>Here</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">inductiveineq</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">choose</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">induction'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">le_induction</span>\n<span class=\"w\">  </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">decide</span>\n<span class=\"w\">  </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hah</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">):=</span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">haf</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">choose</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">choose</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(((</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)):</span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(((</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)):</span><span class=\"n\">ℚ</span><span class=\"o\">):=</span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">choose_eq_factorial_div_factorial</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span>\n<span class=\"w\">      </span><span class=\"gr\">sorry</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 445231784,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1718661193
    },
    {
        "content": "<p>Oh sorry, I've forgot to paste a minimal example.</p>",
        "id": 445231864,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718661232
    },
    {
        "content": "<p>But yes, this strategy looks right</p>",
        "id": 445231919,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1718661244
    },
    {
        "content": "<p>Alright so it's fine to dip into the rationals at haf?</p>\n<p>Ah are there any helpful tactics that I can use. As of now I'd just do manual rewrites and following the proof that I have done in metamath. I am certain that this is so inefficient and that there are some powerful tactics like linarith, ring, maybe even field to convert those steps.</p>",
        "id": 445232145,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718661359
    },
    {
        "content": "<p>A useful tactic might be push_cast at some point</p>",
        "id": 445233003,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1718661727
    },
    {
        "content": "<p>Thinking about this a bit harder, though, it should be possible to do this without any division via the use of <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Nat/Choose/Basic.html#Nat.add_choose_mul_factorial_mul_factorial\">Nat.add_choose_mul_factorial_mul_factorial</a>, though I see why that's harder.</p>",
        "id": 445233264,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1718661850
    },
    {
        "content": "<p>Really, what we should have is a lemma like <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Nat/Choose/Basic.html#Nat.choose_eq_factorial_div_factorial\">Nat.choose_eq_factorial_div_factorial</a> but where the cast to rationals has already been applied to the LHS.</p>",
        "id": 445233405,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1718661913
    },
    {
        "content": "<p>Do you know about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=pochhammer#doc\">docs#pochhammer</a> ?</p>",
        "id": 445233764,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718662050
    },
    {
        "content": "<p>In particular, I proved <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.cast_choose_two#doc\">docs#Nat.cast_choose_two</a> a while ago</p>",
        "id": 445233852,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718662072
    },
    {
        "content": "<p>... and I suspect <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.cast_choose_eq_ascPochhammer_div#doc\">docs#Nat.cast_choose_eq_ascPochhammer_div</a> is exactly the lemma you want</p>",
        "id": 445233977,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718662094
    },
    {
        "content": "<p>No, I am using loogle, although that was also kinda hard to learn</p>",
        "id": 445234001,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718662101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Symmetric.20group/near/445233977\">said</a>:</p>\n<blockquote>\n<p>... and I suspect <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.cast_choose_eq_ascPochhammer_div#doc\">docs#Nat.cast_choose_eq_ascPochhammer_div</a> is exactly the lemma you want</p>\n</blockquote>\n<p>Nice, I see <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Nat/Choose/Cast.html#Nat.cast_add_choose\">Nat.cast_add_choose</a> right above it is exactly the lemma I described.</p>",
        "id": 445235115,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1718662453
    },
    {
        "content": "<p>I guess proving results by casting is important after all, am I seeing that correctly? Otherwise you aren't able to use the results for natural numbers</p>",
        "id": 445235524,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718662593
    },
    {
        "content": "<p>Cool, thank you guys for your help. I will try to work on it for a bit and report my progress in a few days.</p>",
        "id": 445235663,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718662655
    },
    {
        "content": "<p><del>Hilariously, I actually think the hypothesis on <code>Nat.cast_choose</code> is unnecessary. If a &gt; b then both sides are zero right?</del></p>",
        "id": 445236340,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1718662890
    },
    {
        "content": "<p>No, the LHS would be zero, but the RHS would still be <code>b! / a!</code></p>",
        "id": 445236627,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718662972
    },
    {
        "content": "<p>Alright cool. Thank you very much. I've made some progress but I will share my attempt once I have exhausted my options. So far I am quite happy with my progress but I fail to instantiate the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_choose</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">≤</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_factorial</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>The second one works but the first one does not. I am completely lost how to instantiate the first one. I want to have a theorem that says 2\\le 3 -&gt; ... but I fail to synthesise the instance.</p>",
        "id": 445672217,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718820679
    },
    {
        "content": "<p>My plan is to rewrite hypotheses and goals and lift them into the rationals.</p>",
        "id": 445672286,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718820710
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_le</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_choose</span><span class=\"w\"> </span><span class=\"n\">ℚ</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_factorial</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">a</span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_choose</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"w\"> </span><span class=\"n\">h1</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Actually this one works but how do I get one with the implication in a \"proofless\" context. It should be possible to partially apply the parameters to Nat.cast_choose</p>",
        "id": 445675328,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718821883
    },
    {
        "content": "<p>Nevermind, I got it. You need to construct a statement that has type 2\\le 3 which means supplying it with a proof.</p>\n<p>This one works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_choose</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_factorial</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exact?</span>\n</code></pre></div>",
        "id": 445682012,
        "sender_full_name": "metakuntyyy",
        "timestamp": 1718824116
    }
]