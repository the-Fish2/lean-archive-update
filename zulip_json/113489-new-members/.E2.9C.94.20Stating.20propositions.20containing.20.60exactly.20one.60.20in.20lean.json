[
    {
        "content": "<p>Hey everyone, </p>\n<p>how do I put such a proposition into Lean: </p>\n<p>\"Let n be a natural number, then there exists exactly one natural number m, such that succ(m) = n\"</p>",
        "id": 421991311,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1708158405
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Logic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 421991664,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708158593
    },
    {
        "content": "<p>But note this is a false statement (I let you figure out why <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 421991756,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708158613
    },
    {
        "content": "<p>Haha, yes I meant all positive natural numbers n! (i.e. n \\neq 0)! Thanks!</p>",
        "id": 421992552,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1708158901
    },
    {
        "content": "<p>And I just came across another problem, if I have the goal <code>x ≤ y ↔ ∃ c, y + a = x + a + c</code>, then using <code>rewrite [Nat.add_right_comm x a c]</code> does not work because <code>unknown identifier 'c'</code>. How can I fix that?</p>",
        "id": 421992729,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1708158971
    },
    {
        "content": "<p>The simple way is to simply not mention <code>c</code> and use <code>simp_rw</code> instead of <code>rewrite</code></p>",
        "id": 421992812,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708159020
    },
    {
        "content": "<p>Hmm, I don't quite get it, I have started like this <code>example (x y a: ℕ) : x ≤ y ↔ x + a ≤ y + a := by nth_rewrite 2 [le_iff_exists_add]</code></p>",
        "id": 421993258,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1708159249
    },
    {
        "content": "<p>And I want to use <code>add_right_cancel</code> later on.</p>",
        "id": 421993353,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1708159297
    },
    {
        "content": "<p>And sorry that I am missing up things now, but where do I find documentation regarding <code>∃!</code>?</p>",
        "id": 421993686,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1708159448
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ExistsUnique#doc\">docs#ExistsUnique</a></p>",
        "id": 421993708,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708159459
    },
    {
        "content": "<p>So I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">ExistsUnique</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but I don't quite know how to make progress. I now have the goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I would like to split the goal into <code>Nat.succ x = n</code> and <code>∀ (y : ℕ), Nat.succ y = n → y = x</code>, but <code>apply And.intro</code> does not work, I somehow have to first deal with the <code>\\exists</code> I guess. So how can I proceed here?</p>",
        "id": 421997066,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1708162324
    },
    {
        "content": "<p>What is the value for <code>x</code> that makes it true? You can use the tactic <code>use</code> with that value</p>",
        "id": 421997310,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708162593
    },
    {
        "content": "<p>And then <code>constructor</code> to split the and into two subgoals</p>",
        "id": 421997337,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708162628
    },
    {
        "content": "<p>Note that the goal is <code>∃ x, (Nat.succ x = n ∧ ∀ (y : ℕ), Nat.succ y = n → y = x)</code>, not <code>(∃ x, Nat.succ x = n) ∧ ∀ (y : ℕ), Nat.succ y = n → y = x</code> (which wouldn't make sense since there wouldn't be any <code>x</code> in context in the second clause)</p>",
        "id": 421997372,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708162660
    },
    {
        "content": "<p>Yeah, I guess that's what Philipp meant by \"first deal with the exists\"</p>",
        "id": 421997673,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708162894
    },
    {
        "content": "<p>So this is what I have now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">ExistsUnique</span><span class=\"o\">]</span>\n  <span class=\"n\">use</span> <span class=\"n\">Nat.pred</span> <span class=\"n\">n</span>\n  <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n  <span class=\"c1\">-- Nat.succ (Nat.pred n) = n</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_pred</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- ∀ (y : ℕ), Nat.succ y = n → y = Nat.pred n</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">hy</span>\n  <span class=\"n\">symm</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"bp\">;</span> <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">]</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Nat.pred_succ</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I am just now super happy with <code>rewrite [Nat.succ_pred]</code> because it splits into two cases </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">h.left</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"n\">case</span> <span class=\"n\">h.left</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>so how could I directly specify that I know <code>h: n ≠ 0</code> ?</p>",
        "id": 421998012,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1708163219
    },
    {
        "content": "<p><code>rewrite [Nat.succ_pred h]</code></p>",
        "id": 421998096,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708163286
    },
    {
        "content": "<p>If you hover with your mouse over <code>Nat.succ_pred</code> it should show you a pop up. At the bottom, you can see the type signature of <code>Nat.succ_pred</code>. One of its explicit arguments will be <code>n \\ne 0</code>.</p>",
        "id": 421998097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708163288
    },
    {
        "content": "<p>You can count which argument it is, and pass <code>h</code> in as that argument.</p>",
        "id": 421998105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708163305
    },
    {
        "content": "<p>Use <code>_</code> to fill in gaps for the other arguments.</p>",
        "id": 421998111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708163317
    },
    {
        "content": "<p>(In this case, it is the first, but I'm explaining the general strategy.)</p>",
        "id": 421998124,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708163330
    },
    {
        "content": "<p>thanks! I will just paste this type signature here for future reference: <code>Nat.succ_pred {a : ℕ} (h : a ≠ 0) : Nat.succ (Nat.pred a) = a</code></p>",
        "id": 421998326,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1708163545
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690867\">Philipp SL Schäfer</span> has marked this topic as resolved.</p>",
        "id": 421998369,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708163594
    },
    {
        "content": "<p>(Note that there are thousands of declarations in mathlib, and hence thousands of type signatures...)</p>",
        "id": 421998404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708163640
    },
    {
        "content": "<p>Tens of thousands! Are we yet at the 100,000 mark for theorems? It wouldn't surprise me</p>",
        "id": 422013827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708178655
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_stats.html\">#stats</a> says we're on 138k theorems</p>",
        "id": 422014001,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708178803
    }
]