[
    {
        "content": "<p>I am currently playing the natural numbers game, \"advanced addition world\", level 1 <a href=\"https://adam.math.hhu.de/#/g/leanprover-community/nng4/world/AdvAddition/level/1\">https://adam.math.hhu.de/#/g/leanprover-community/nng4/world/AdvAddition/level/1</a></p>\n<p>To show is that <code>a + n = b + n</code> implies <code>a = b</code> for natural numbers <code>a b n</code>.  I started the induction, and I arrive at a point where I have assumptions <code>succ (a + d) = succ (b + d)</code> and <code>a + d  = b + d</code>, and I want to show <code>a = b</code>, which I did via the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n<span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>I would just like to apply <code>succ_inj</code> at <code>h</code>, but it doesn't work.  Normally I would think \"Well, <code>a</code> and <code>n</code> are natural numbers, so <code>a + n</code> is a natural number, similarly <code>a + b</code> is a natural number, so I can just apply <code>succ_inj</code>, but I see that doesn't work as-is, since <code>succ_inj</code> doesn't know this.</p>\n<p>How can I solve this problem?</p>\n<p>Give me any suggestios, style guides, how to approach things etc. that you can!  Thanks!</p>",
        "id": 427971071,
        "sender_full_name": "Berber",
        "timestamp": 1710952627
    },
    {
        "content": "<p>You cannot apply succ_inj to h, because it is hypothesis. succ_inj looks like this: <code>MyNat.succ_inj (a b : ℕ) (h : MyNat.succ a = MyNat.succ b) : a = b</code>, i.e. it is an implication with the consequent  <code>a=b</code>.  You can apply it something that matches the consequent and have then the antecdent as the remaining goal. As this looks like <code>h</code> you know that you could close this goal with the right values for a and b. Can you transform the goal to that ? There is another hypothesis in the context.</p>",
        "id": 427992461,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1710959288
    },
    {
        "content": "<p><code>apply succ_inj at h</code> works fine for me after the code block above:</p>\n<p><a href=\"/user_uploads/3121/L5PSFcd3NLym26gSe_Hd1fH0/succinj.png\">succinj.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/L5PSFcd3NLym26gSe_Hd1fH0/succinj.png\" title=\"succinj.png\"><img src=\"/user_uploads/3121/L5PSFcd3NLym26gSe_Hd1fH0/succinj.png\"></a></div><p>Can you clarify \"but it doesn't work\"?</p>",
        "id": 428099955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711018086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"619540\">Johannes Tantow</span> <a href=\"#narrow/stream/113489-new-members/topic/Applying.20.60succ_inj.60.20to.20a.20sum.2C.20natural.20numbers.20game/near/427992461\">said</a>:</p>\n<blockquote>\n<p>You cannot apply succ_inj to h, because it is hypothesis.</p>\n</blockquote>\n<p>I do not understand what you mean here, care to explain?  If <code>h</code> were the hypothesis <code>succ x = succ y</code>, then I would be able to apply <code>succ_inj</code> at <code>h</code>.  Right?</p>\n<p>In any case, now the hypothesis looks a bit different, namely <code>succ (a + d) = succ (b + d)</code>, so I do not know what I can do here.</p>\n<blockquote>\n<p>As this looks like <code>h</code> you know that you could close this goal with the right values for a and b. Can you transform the goal to that ? There is another hypothesis in the context.</p>\n</blockquote>\n<p>I also don't understand this.  I mean, if you are fine with it, you could provide a solution that you could present here?</p>",
        "id": 428102113,
        "sender_full_name": "Berber",
        "timestamp": 1711018871
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Applying.20.60succ_inj.60.20to.20a.20sum.2C.20natural.20numbers.20game/near/428099955\">said</a>:</p>\n<blockquote>\n<p><code>apply succ_inj at h</code> works fine for me after the code block above</p>\n<p>Can you clarify \"but it doesn't work\"?</p>\n</blockquote>\n<p>Fantastic (sarcasm), now it works for me as well.  It seems like I tried it correctly.  I don't know what is different now.  Sometimes, the lean engine in the web interface behaves weirdly, so maybe it was that.  Thanks for trying it out for me!</p>",
        "id": 428102368,
        "sender_full_name": "Berber",
        "timestamp": 1711018967
    },
    {
        "content": "<p>Ok, I realize that I was talking rubbish. I didn't know that apply can be used this way to, but let me clarify my idea. Succ_inj looks fundamentally like : q -&gt; p, where q is like the hypothesis h. You want to apply it forward and change h from q to p. I proposed to apply it backwards. Bring the goal into the state p and then apply succ_inj and close it with h. </p>\n<p>My proof looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">ih</span>\n<span class=\"c1\">--base</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"c1\">--step</span>\n<span class=\"n\">apply</span> <span class=\"n\">ih</span>\n<span class=\"n\">apply</span> <span class=\"n\">succ_inj</span>\n<span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 428110865,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1711022178
    },
    {
        "content": "<p>yeah, <code>apply</code> can be used to argue forwards or backwards. Is that your question?</p>",
        "id": 428196331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711047172
    }
]