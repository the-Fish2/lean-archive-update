[
    {
        "content": "<p>This file \"quotient_module.lean\", I want to run this code......</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">package</span><span class=\"o\">]</span>\n<span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"s2\">\"mathlib\"</span>\n<span class=\"n\">version</span> <span class=\"bp\">=</span> <span class=\"s2\">\"0.1\"</span>\n<span class=\"n\">lean_version</span> <span class=\"bp\">=</span> <span class=\"s2\">\"3.4.1\"</span>\n\n<span class=\"o\">[</span><span class=\"n\">dependencies</span><span class=\"o\">]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">Copyright (c) 2017 Johannes Hölzl. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Author: Johannes Hölzl</span>\n\n<span class=\"cm\">Quotient construction on modules</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">is_submodule</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_submodule</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n<span class=\"kn\">include</span> <span class=\"n\">α</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quotient_rel</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">b₂</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero</span><span class=\"o\">],</span>\n  <span class=\"k\">assume</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">is_submodule.neg</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"n\">b₃</span> <span class=\"n\">hb₁₂</span> <span class=\"n\">hb₂₃</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b₂</span> <span class=\"bp\">-</span> <span class=\"n\">b₃</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">add</span> <span class=\"n\">hb₁₂</span> <span class=\"n\">hb₂₃</span><span class=\"o\">,</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">this</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">quotient_rel</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">quotient_rel_eq</span> <span class=\"o\">{</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">≈</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">b₂</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"sd\">/-- Quotient module. `quotient β s` is the quotient of the module `β` by the submodule `s`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">quotient</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">quotient_rel</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span> <span class=\"n\">Q</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"n\">β</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">quotient.has_zero</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">⟦</span> <span class=\"mi\">0</span> <span class=\"bp\">⟧</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">quotient.has_add</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">quotient.lift_on₂</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">⟦</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">⟧</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">-</span> <span class=\"n\">b₁</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">-</span> <span class=\"n\">b₂</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"n\">quotient.sound</span> <span class=\"bp\">$</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">-</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a₂</span> <span class=\"bp\">-</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">add</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">+</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">quotient.has_neg</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quotient.lift_on</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟦-</span> <span class=\"n\">a</span><span class=\"bp\">⟧</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"n\">quotient.sound</span> <span class=\"bp\">$</span>\n  <span class=\"k\">have</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">neg</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">quotient.add_comm_group</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n  <span class=\"n\">neg</span>  <span class=\"o\">:=</span> <span class=\"n\">has_neg.neg</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span>    <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on₃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">quotient.sound</span> <span class=\"bp\">$</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span>     <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on₂</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">quotient.sound</span> <span class=\"bp\">$</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span>     <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on</span> <span class=\"n\">a</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quotient.sound</span> <span class=\"bp\">$</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span>     <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on</span> <span class=\"n\">a</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quotient.sound</span> <span class=\"bp\">$</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on</span> <span class=\"n\">a</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quotient.sound</span> <span class=\"bp\">$</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">quotient.has_scalar</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">quotient.lift_on</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">⟦</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"bp\">⟧</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">b₂</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"n\">quotient.sound</span> <span class=\"bp\">$</span>\n  <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">is_submodule.smul</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b₂</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">smul_add</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">quotient.module</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">•</span><span class=\"o\">),</span>\n  <span class=\"n\">one_smul</span>     <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on</span> <span class=\"n\">a</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quotient.sound</span> <span class=\"bp\">$</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span>     <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on</span> <span class=\"n\">c</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">quotient.sound</span> <span class=\"bp\">$</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_smul</span><span class=\"o\">],</span>\n  <span class=\"n\">smul_add</span>     <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on₂</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">quotient.sound</span> <span class=\"bp\">$</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">smul_add</span><span class=\"o\">],</span>\n  <span class=\"n\">add_smul</span>     <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on</span> <span class=\"n\">c</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">quotient.sound</span> <span class=\"bp\">$</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_smul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">quotient.inhabited</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_linear_map_quotient_mk</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_linear_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">Q</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">⟦</span><span class=\"n\">b</span><span class=\"bp\">⟧</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quotient.lift</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">is_linear_map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"n\">b.lift_on</span> <span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hf.sub</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq_of_sub_eq_zero</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">quotient.lift_mk</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">is_linear_map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient.lift</span> <span class=\"n\">s</span> <span class=\"n\">hf</span> <span class=\"n\">h</span> <span class=\"bp\">⟦</span><span class=\"n\">b</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_linear_map_quotient_lift</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">is_linear_map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_linear_map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">q</span><span class=\"o\">:</span><span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">quotient.lift_on</span> <span class=\"n\">q</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"k\">assume</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on₂</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"n\">hf.add</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on</span> <span class=\"n\">b</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hf.smul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">quotient.injective_lift</span> <span class=\"o\">[</span><span class=\"n\">is_submodule</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">is_linear_map</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">quotient.lift</span> <span class=\"n\">s</span> <span class=\"n\">hf</span> <span class=\"bp\">$</span> <span class=\"n\">le_of_eq</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on₂</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">quotient.sound</span> <span class=\"bp\">$</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hf.sub</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hs.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">is_submodule</span>\n</code></pre></div>",
        "id": 439425904,
        "sender_full_name": "chenjulang",
        "timestamp": 1716112523
    },
    {
        "content": "<p>Another question, How to translate the lean3-code above into lean4 ?<br>\nI'm stuck in here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basic</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">checkBinderAnnotations</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my_quotient</span>\n\n  <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n          <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">quotient_rel</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n    <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">b₂</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">refl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sub_self</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">forall_const</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"gr\">sorry</span>\n      <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">intros</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">h1</span>\n        <span class=\"c1\">-- have aaa:= Submodule.neg_mem</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">intros</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n        <span class=\"c1\">-- add</span>\n        <span class=\"gr\">sorry</span>\n    <span class=\"o\">}</span>\n\n  <span class=\"k\">#check</span> <span class=\"n\">quotient_rel</span> <span class=\"n\">s</span>\n  <span class=\"c1\">-- def quotient: Type* := quotient (quotient_rel)</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">my_quotient</span>\n</code></pre></div>",
        "id": 439428130,
        "sender_full_name": "chenjulang",
        "timestamp": 1716114731
    },
    {
        "content": "<p>I want this definition \"quotient\" translated into lean4, So that I may understand how it was built  from scratch.</p>",
        "id": 439428310,
        "sender_full_name": "chenjulang",
        "timestamp": 1716114947
    },
    {
        "content": "<p>Is this code from mathlib3? In which case it's been translated already in mathlib4.</p>",
        "id": 439431326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716118079
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/lean-web-editor/\">https://leanprover-community.github.io/lean-web-editor/</a> still exists for running lean 3 code, but usually the answer to \"how do I run some lean3/4 code I found\" is \"open the project that you found it in and install the lean3/4 extension\". A lean file by itself is pretty useless without the version information stored in the rest of the project.</p>",
        "id": 439431672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716118425
    },
    {
        "content": "<p>The information <em>is</em> here, but <code>lean_version = \"3.4.1\"</code> makes me think this is a very old version of mathlib</p>",
        "id": 439431764,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716118504
    },
    {
        "content": "<p>Arguably the information is missing because <code>import linear_algebra.basic</code> would not work with that <code>leanpkg.toml</code>. If this is an old version of mathlib, then you need to know exactly which git commit</p>",
        "id": 439431915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716118662
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/39bab47fb21756b2ca4b6438b8fb1efdf864f0bc/group_theory/quotient_group.lean\">https://github.com/leanprover-community/mathlib/blob/39bab47fb21756b2ca4b6438b8fb1efdf864f0bc/group_theory/quotient_group.lean</a></p>",
        "id": 439435565,
        "sender_full_name": "chenjulang",
        "timestamp": 1716122410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Can.20lean-web.20editor.20change.20version.3F/near/439431326\">said</a>:</p>\n<blockquote>\n<p>Is this code from mathlib3? In which case it's been translated already in mathlib4.</p>\n</blockquote>\n<p>Yes , mathlib3, check this:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/39bab47fb21756b2ca4b6438b8fb1efdf864f0bc/group_theory/quotient_group.lean\">https://github.com/leanprover-community/mathlib/blob/39bab47fb21756b2ca4b6438b8fb1efdf864f0bc/group_theory/quotient_group.lean</a></p>\n<p>Actually, I want to understand why this work, this definition is so simple , and  it seems that \"quotient\" is defined by itself  \"quotient (quotient_rel s)\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">quotient</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">quotient_rel</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>From the beginning , I was trying to find out how is \"QuotientGroup\" defined in Mathlib4 , and I get this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⧸</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.mk''</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>and then this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mk''</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"n\">s₁</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quot.mk</span> <span class=\"n\">s₁.1</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>and then this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add_decl_doc</span> <span class=\"n\">Quot</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">See `Quot`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">add_decl_doc</span> <span class=\"n\">Quot.mk</span>\n</code></pre></div>\n<p>It seems to me that it is not directly defined by \"type theory\" , And i cannot understand it. So I go check the history commits to try to find out its original version definition.</p>",
        "id": 439436092,
        "sender_full_name": "chenjulang",
        "timestamp": 1716122966
    },
    {
        "content": "<p>I don't think that will be a useful approach, because Quot is equally fundamental in lean 3 and 4</p>",
        "id": 439436602,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716123454
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover/lean4/blob/dcccfb73cb247e9478220375ab7de03f7c67e505/src/Init/Prelude.lean#L379\">https://github.com/leanprover/lean4/blob/dcccfb73cb247e9478220375ab7de03f7c67e505/src/Init/Prelude.lean#L379</a> for part of the code</p>",
        "id": 439436713,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716123579
    },
    {
        "content": "<p>I'm guessing calling into <a href=\"https://github.com/leanprover/lean4/blob/239ade80dc6258f68b7ea92e52ef15066f58a791/src/Lean/Elab/BuiltinCommand.lean#L125\">https://github.com/leanprover/lean4/blob/239ade80dc6258f68b7ea92e52ef15066f58a791/src/Lean/Elab/BuiltinCommand.lean#L125</a></p>",
        "id": 439436850,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716123691
    },
    {
        "content": "<p>This also shows it's helpful to explain your actual question :)</p>",
        "id": 439436934,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716123758
    },
    {
        "content": "<p>thanks</p>",
        "id": 439437134,
        "sender_full_name": "chenjulang",
        "timestamp": 1716123966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 439441031,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716127474
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 439446205,
        "sender_full_name": "chenjulang",
        "timestamp": 1716132516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as unresolved.</p>",
        "id": 439446215,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716132536
    },
    {
        "content": "<p>One more question , Can we finish this  sorry , while not using the definition of Mathlib4?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.QuotientGroup</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">checkBinderAnnotations</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my_quotient</span>\n\n  <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s₃</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">γ</span><span class=\"o\">}</span>\n\n  <span class=\"n\">opaque</span> <span class=\"n\">Quot2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">Quotient2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quot2</span> <span class=\"n\">s.r</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">QuotientGroup2_mk''</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Quotient2</span> <span class=\"n\">s₁</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- Quot2 s₁.1</span>\n\n  <span class=\"k\">#check</span> <span class=\"n\">Quotient2</span> <span class=\"c1\">-- {α : Sort u} → Setoid α → Sort u</span>\n  <span class=\"k\">#check</span> <span class=\"n\">Quotient2</span> <span class=\"n\">s₁</span> <span class=\"c1\">-- Sort u_3</span>\n  <span class=\"k\">#check</span> <span class=\"n\">s₁.1</span> <span class=\"c1\">-- α → α → Prop</span>\n  <span class=\"k\">#check</span> <span class=\"n\">Quot2</span> <span class=\"n\">s₁.1</span> <span class=\"c1\">-- Sort u_3</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">my_quotient</span>\n</code></pre></div>",
        "id": 439447835,
        "sender_full_name": "chenjulang",
        "timestamp": 1716134194
    },
    {
        "content": "<p>I think you're getting confused between <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quotient#doc\">docs#Quotient</a> (the quotient by a relation) and <code>QuotientGroup</code> (the quotient by a subgroup) and <code>Submodule.Quotient</code></p>",
        "id": 439448164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716134510
    },
    {
        "content": "<p>yeah</p>",
        "id": 439448224,
        "sender_full_name": "chenjulang",
        "timestamp": 1716134534
    },
    {
        "content": "<p>I wonder if all these stuffs about QuotientGroup can be writen down in one single file. Like the definition , the notion ...</p>",
        "id": 439448294,
        "sender_full_name": "chenjulang",
        "timestamp": 1716134625
    },
    {
        "content": "<p>Are you sure you care about quotient <em>groups</em>? Your example code doesn't mention groups (multiplication, ⁻¹, 1) at all</p>",
        "id": 439448351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716134658
    },
    {
        "content": "<p>Your sorry above is impossible, because you used <code>opaque</code></p>",
        "id": 439448393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716134722
    },
    {
        "content": "<p>em...</p>",
        "id": 439448414,
        "sender_full_name": "chenjulang",
        "timestamp": 1716134746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Can.20lean-web.20editor.20change.20version.3F/near/439448351\">said</a>:</p>\n<blockquote>\n<p>Are you sure you care about quotient <em>groups</em>? Your example code doesn't mention groups (multiplication, ⁻¹, 1) at all</p>\n</blockquote>\n<p>maybe? It seems to me that \"<a href=\"http://QuotientGroup.mk\">QuotientGroup.mk</a>\" leads to \" Quotient .mk''</p>\n<p>This is from Mathlib4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Quotient</span> <span class=\"bp\">.</span><span class=\"n\">mk''</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"n\">s₁</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quot.mk</span> <span class=\"n\">s₁.1</span> <span class=\"n\">a</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">QuotientGroup.mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⧸</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.mk''</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 439448614,
        "sender_full_name": "chenjulang",
        "timestamp": 1716134956
    },
    {
        "content": "<p>And then finally something about groups ? :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">QuotientGroup2_mk</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⧸</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.mk''</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 439449039,
        "sender_full_name": "chenjulang",
        "timestamp": 1716135454
    },
    {
        "content": "<p>I'm not totally understanding what i wrote , But I want to build the quotientgroup notion in this single file, that is my purpose. <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.QuotientGroup</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">checkBinderAnnotations</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my_quotient</span>\n\n  <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s₃</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">γ</span><span class=\"o\">}</span>\n\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">r2</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"n\">opaque</span> <span class=\"n\">Quot2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n\n  <span class=\"k\">#check</span> <span class=\"n\">Quot2</span> <span class=\"n\">r2</span>\n  <span class=\"c1\">-- opaque Quot_mk {α : Sort u} (r : α → α → Prop) (a : α) : Quot2 r2</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">Quotient2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Quot2</span> <span class=\"n\">α</span> <span class=\"n\">s.r</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">QuotientGroup2_mk''</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- : Quotient2 s₁</span>\n  <span class=\"o\">:=</span> <span class=\"n\">Quot2</span> <span class=\"n\">s.1</span>\n\n\n  <span class=\"kd\">def</span> <span class=\"n\">QuotientGroup2_mk</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⧸</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.mk''</span> <span class=\"n\">a</span>\n\n  <span class=\"k\">#check</span> <span class=\"n\">Quotient2</span> <span class=\"c1\">-- {α : Sort u} → Setoid α → Sort u</span>\n  <span class=\"k\">#check</span> <span class=\"n\">Quotient2</span> <span class=\"n\">s₁</span> <span class=\"c1\">-- Sort u_3</span>\n  <span class=\"k\">#check</span> <span class=\"n\">s₁.1</span> <span class=\"c1\">-- α → α → Prop</span>\n  <span class=\"k\">#check</span> <span class=\"n\">Quot2</span> <span class=\"n\">s₁.1</span> <span class=\"c1\">-- Sort u_3</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">my_quotient</span>\n</code></pre></div>",
        "id": 439449166,
        "sender_full_name": "chenjulang",
        "timestamp": 1716135597
    },
    {
        "content": "<p>Maybe this means nonsense~~~</p>",
        "id": 439449279,
        "sender_full_name": "chenjulang",
        "timestamp": 1716135669
    },
    {
        "content": "<p>If you are trying to understand how quotients work, you may find the section of <a href=\"https://lean-lang.org/theorem_proving_in_lean4/axioms_and_computation.html#quotients\">this page</a>  titled quotients useful</p>",
        "id": 439731270,
        "sender_full_name": "Eric Paul",
        "timestamp": 1716267042
    },
    {
        "content": "<p>Thanks</p>",
        "id": 439737070,
        "sender_full_name": "chenjulang",
        "timestamp": 1716271047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 439738379,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716271684
    },
    {
        "content": "<p>Thanks a lot~~~</p>",
        "id": 439738402,
        "sender_full_name": "chenjulang",
        "timestamp": 1716271702
    }
]