[
    {
        "content": "<p>Hi all,</p>\n<p>sorry if this looks like a question that is being asked too early... I was checking how much, or how little, I know about how Lean parsers certain expressions, and I saw that in</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ab</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">a</span>\n</code></pre></div>\n<p>the <code>{α β}</code> is parsed by <code>funImplicitBinder</code>, but I couldn't find the name of the (sub)parser that <code>funBinder</code> uses to parse the <code>(ab : α×β)</code>... hints, please?</p>",
        "id": 447199450,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719403534
    },
    {
        "content": "<p>Here's some more context. I'm writing my (guess for a) parse tree in this format,</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">open</span><span class=\"w\">   </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"w\"> </span><span class=\"n\">Meta</span><span class=\"w\"> </span><span class=\"n\">Term</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">}</span><span class=\"w\">         </span><span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ab</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">BEq</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ab</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">==</span><span class=\"n\">a</span>\n\n<span class=\"c1\">-- #check fun   {α           β          } (ab : α×β) =&gt;   let (a,_) := ab ;            a</span>\n<span class=\"c1\">--        -----  ----------- -----------  ---------- ----     ----------- ------------ ----------</span>\n<span class=\"c1\">--        \"fun\"  binderIdent binderIdent      ?      \"=&gt;\"     letDecl?    optSemicolon termParser</span>\n<span class=\"c1\">--              ------------------------- ----------      ---------------------------------------</span>\n<span class=\"c1\">--              funImplicitBinder         funBinder?      termParser?</span>\n<span class=\"c1\">--              -------------------------</span>\n<span class=\"c1\">--              funBinder</span>\n<span class=\"c1\">--              ---------------------------------------------------------------------------------</span>\n<span class=\"c1\">--              basicFun</span>\n\n<span class=\"c1\">-- Hyperlinks to the parsers:</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">basicFun</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">binderIdent</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">funBinder</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">funImplicitBinder</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">funStrictImplicitBinder</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">letDecl</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">letPatDecl</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">matchAlts</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.«</span><span class=\"k\">fun</span><span class=\"bp\">»</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.«</span><span class=\"k\">let</span><span class=\"bp\">»</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">termParser</span>\n</code></pre></div>",
        "id": 447199855,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719403654
    },
    {
        "content": "<p>...and I'm working on a program that processes the tree in ASCII art and LaTeXes it as a diagram with underbraces that looks like this:</p>",
        "id": 447200847,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719403920
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/5YH5BB5KDMo99I4ZqNc4qSFn/sshot-cropped.png\">sshot-cropped.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5YH5BB5KDMo99I4ZqNc4qSFn/sshot-cropped.png\" title=\"sshot-cropped.png\"><img src=\"/user_uploads/3121/5YH5BB5KDMo99I4ZqNc4qSFn/sshot-cropped.png\"></a></div>",
        "id": 447200998,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719403946
    },
    {
        "content": "<p>I still have lots of doubts about how to complete that parse tree, but most of these doubts are about parsing combinators... and I hope that understanding <code>funBinder</code> will help me with the rest.</p>",
        "id": 447202139,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719404244
    },
    {
        "content": "<p>If you use</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">BEq</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ab</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">==</span><span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>then the names of <del>all</del> most of the parsers are embedded in the output</p>",
        "id": 447210522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719406089
    },
    {
        "content": "<p>Thanks!!!<br>\nNew diagram:</p>",
        "id": 447222697,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719409482
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/cISFI2Lrj2SFiLKeFvMzc8X1/sshot.png\">sshot.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/cISFI2Lrj2SFiLKeFvMzc8X1/sshot.png\" title=\"sshot.png\"><img src=\"/user_uploads/3121/cISFI2Lrj2SFiLKeFvMzc8X1/sshot.png\"></a></div>",
        "id": 447222751,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719409502
    },
    {
        "content": "<p>Is there an easy way to extract the expression inside the <code>raw := ...</code> from a syntax quotation? How? Let's consider this smaller example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">open</span><span class=\"w\">   </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">Quotation</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">mkSyntaxQuotation</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\">  </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"s2\">\"foo\"</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"s2\">\"foo\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">MacroM</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">`term</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 447235417,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719413360
    },
    {
        "content": "<p>You probably want to parse it inside <code>run_cmd do</code></p>",
        "id": 447247614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719416045
    },
    {
        "content": "<p>That is, something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">run_cmd</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">BEq</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ab</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">==</span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"c1\">-- process stx</span>\n<span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"{stx}\"</span>\n</code></pre></div>",
        "id": 447248926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719416298
    },
    {
        "content": "<p>Perfect! Thanks! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <br>\nFor the sake of completeness, here's what I've got...<br>\nIt's just a prototype, but I think it's nice anyway.</p>",
        "id": 447340640,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719437534
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/zNwJX7rUN6kmVGRgCn634rny/sshot.png\">sshot.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/zNwJX7rUN6kmVGRgCn634rny/sshot.png\" title=\"sshot.png\"><img src=\"/user_uploads/3121/zNwJX7rUN6kmVGRgCn634rny/sshot.png\"></a></div>",
        "id": 447340686,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719437564
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Init</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Format</span>\n<span class=\"kn\">open</span><span class=\"w\">   </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">SourceInfo</span><span class=\"w\"> </span><span class=\"n\">Parser</span>\n<span class=\"kn\">open</span><span class=\"w\">   </span><span class=\"n\">Std</span><span class=\"w\"> </span><span class=\"n\">Format</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">pile</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Format</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Format</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\">           </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">item</span><span class=\"o\">]</span><span class=\"w\">       </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">item</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">pile</span><span class=\"w\"> </span><span class=\"n\">rest</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">zpile</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fmts</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Format</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">nest</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">align</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pile</span><span class=\"w\"> </span><span class=\"n\">fmts</span><span class=\"o\">)</span>\n\n<span class=\"kn\">class</span><span class=\"w\">  </span><span class=\"n\">ToPrettier</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">toPrettier</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Format</span>\n<span class=\"kn\">export</span><span class=\"w\"> </span><span class=\"n\">ToPrettier</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">toPrettier</span><span class=\"o\">)</span>\n\n<span class=\"kn\">def</span><span class=\"w\">    </span><span class=\"n\">toPrettier_Nat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Format</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"kn\">def</span><span class=\"w\">    </span><span class=\"n\">toPrettier_Int</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Format</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"kn\">def</span><span class=\"w\">    </span><span class=\"n\">toPrettier_List</span><span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">ToPrettier</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Format</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">zpile</span><span class=\"w\"> </span><span class=\"s2\">\"[]\"</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\">  </span><span class=\"n\">toPrettier</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"o\">)</span>\n<span class=\"kn\">def</span><span class=\"w\">    </span><span class=\"n\">toPrettier_Array</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">ToPrettier</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Format</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">zpile</span><span class=\"w\"> </span><span class=\"s2\">\"#[]\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">toPrettier</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"bp\">.</span><span class=\"n\">toList</span><span class=\"o\">))</span>\n<span class=\"kn\">def</span><span class=\"w\">    </span><span class=\"n\">toPrettier_SourceInfo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Sourceinfo</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Format</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\".sourceinfo\"</span>\n<span class=\"kn\">def</span><span class=\"w\">    </span><span class=\"n\">toPrettier_Name</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Name</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Format</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"w\"> </span><span class=\"bp\">..</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\".anonymous\"</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\">   </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">toPrettier_Name</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"s2\">\" \"</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"n\">i</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\">    </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"name: \"</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">str</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ToPrettier</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\">        </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">toPrettier</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">toPrettier_Nat</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ToPrettier</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\">        </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">toPrettier</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">toPrettier_Int</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ToPrettier</span><span class=\"w\"> </span><span class=\"n\">Name</span><span class=\"w\">       </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">toPrettier</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">toPrettier_Name</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ToPrettier</span><span class=\"w\"> </span><span class=\"n\">SourceInfo</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">toPrettier</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">toPrettier_SourceInfo</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">ToPrettier</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ToPrettier</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">toPrettier</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">toPrettier_List</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">ToPrettier</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ToPrettier</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">toPrettier</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">toPrettier_Array</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">toPrettier_SyntaxNodeKind</span><span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">SyntaxNodeKind</span><span class=\"w\">  </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Format</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">toPrettier_Name</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">toPrettier_SyntaxNodeKinds</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">SyntaxNodeKinds</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Format</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">toPrettier_List</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ToPrettier</span><span class=\"w\"> </span><span class=\"n\">SyntaxNodeKind</span><span class=\"w\">  </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">toPrettier</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">toPrettier_SyntaxNodeKind</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ToPrettier</span><span class=\"w\"> </span><span class=\"n\">SyntaxNodeKinds</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">toPrettier</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">toPrettier_SyntaxNodeKinds</span>\n\n<span class=\"n\">partial</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">toPrettier_Syntax</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Format</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">missing</span><span class=\"w\">          </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\".missing\"</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">atom</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\">       </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\".atom: \"</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">str</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\".ident: \"</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">toPrettier_Name</span><span class=\"w\"> </span><span class=\"n\">name</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">       </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\">     </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">toPrettier_SyntaxNodeKind</span><span class=\"w\"> </span><span class=\"n\">kind</span>\n<span class=\"w\">       </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">sargs</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">toPrettier_Syntax</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"bp\">.</span><span class=\"n\">toList</span><span class=\"o\">)</span>\n<span class=\"w\">       </span><span class=\"n\">zpile</span><span class=\"w\"> </span><span class=\"s2\">\".node\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">sargs</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ToPrettier</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">toPrettier</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">toPrettier_Syntax</span>\n\n<span class=\"n\">partial</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">toPrettier_TSyntax</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">ks</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">SyntaxNodeKinds</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ts</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"n\">ks</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Format</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">zpile</span><span class=\"w\"> </span><span class=\"s2\">\"TSyntax\"</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">toPrettier</span><span class=\"w\"> </span><span class=\"n\">ks</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">toPrettier</span><span class=\"w\"> </span><span class=\"n\">ts</span><span class=\"bp\">.</span><span class=\"n\">raw</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ToPrettier</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"n\">ks</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">toPrettier</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">toPrettier_TSyntax</span>\n\n<span class=\"n\">run_cmd</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">BEq</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ab</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">==</span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"c1\">-- let stx &lt;- `(fun (x : Nat) =&gt; x*x)</span>\n<span class=\"w\">  </span><span class=\"c1\">-- process stx</span>\n<span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"{stx}\"</span>\n<span class=\"w\">  </span><span class=\"c1\">-- Lean.logInfo s!\"{repr stx}\"</span>\n<span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">s!</span><span class=\"s2\">\"{toPrettier stx}\"</span>\n</code></pre></div>",
        "id": 447340792,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719437621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"381195\">Eduardo Ochs</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20parsers.20parses.20the.20.22.28ab.20.3A.20.CE.B1.C3.97.CE.B2.29.22.20in.20a.20.22fun.20.2E.2E.2E.20.3D.3E.20.2E.2E.2E.22.3F/near/447222751\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/3121/cISFI2Lrj2SFiLKeFvMzc8X1/sshot.png\">sshot.png</a></p>\n</blockquote>\n<p>Note that in some sense here you are reinventing the UX of the infoview; it would be possible to have a command that displays syntax in the infoview, and lets you hover over its pieces to see which parser they are (instead of the usual behavior of hovering over an expression and seeing the types of the subexpressions)</p>",
        "id": 447345017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719439727
    },
    {
        "content": "<p><code>trace.Elab.command</code> does similar non interactive output</p>",
        "id": 447384040,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719461917
    }
]