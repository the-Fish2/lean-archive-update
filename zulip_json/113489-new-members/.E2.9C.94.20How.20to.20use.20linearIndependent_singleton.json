[
    {
        "content": "<p>I'm confused about how to use the theorem \"linearIndependent_singleton\". I want to state the obvious fact that the set {1} is linearly independent, but I seem stuck on this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">li_b1</span> <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">linearIndependent_singleton</span>\n</code></pre></div>\n<p>I get unification failures that I don't really understand. How am I supposed to use this?</p>",
        "id": 435512097,
        "sender_full_name": "Tainnor",
        "timestamp": 1714105042
    },
    {
        "content": "<p>What's the error? Other people (reading on their phone) might understand them :-)</p>",
        "id": 435512753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714105652
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">LinearIndependent</span> <span class=\"bp\">?</span><span class=\"n\">R</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">↑</span><span class=\"n\">x</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">LinearIndependent</span> <span class=\"n\">ℝ</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 435512988,
        "sender_full_name": "Tainnor",
        "timestamp": 1714105836
    },
    {
        "content": "<p>Looks like the theorem you want to apply mentions an up-arrow (coercion) right at the end, and in your application you have a <code>1</code> without an up-arrow</p>",
        "id": 435516720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714108807
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=linearIndependent_singleton#doc\">docs#linearIndependent_singleton</a></p>",
        "id": 435516749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714108829
    },
    {
        "content": "<p>Also your <code>Set Nat</code> should be <code>Set F</code></p>",
        "id": 435517468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714109388
    },
    {
        "content": "<p>Does replacing <code>apply</code> with <code>convert</code> help?</p>",
        "id": 435525903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714114793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> LinearIndependent Subsingleton</p>",
        "id": 435526104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714114846
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">LinearIndependent</span> <span class=\"bp\">?</span><span class=\"n\">m.1899635</span> <span class=\"n\">Subsingleton</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Subsingleton</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.1899636</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.1899636</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.1899633</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.1899633</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 435526108,
        "sender_full_name": "loogle",
        "timestamp": 1714114847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> LinearIndependent, Subsingleton</p>",
        "id": 435526140,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714114861
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/LinearIndependent.html#linearIndependent_of_subsingleton\">linearIndependent_of_subsingleton</a></p>",
        "id": 435526142,
        "sender_full_name": "loogle",
        "timestamp": 1714114862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20linearIndependent_singleton/near/435525903\">said</a>:</p>\n<blockquote>\n<p>Does replacing <code>apply</code> with <code>convert</code> help?</p>\n</blockquote>\n<p>No, that just gives me a mess of 9 new goals</p>",
        "id": 435582265,
        "sender_full_name": "Tainnor",
        "timestamp": 1714136666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20linearIndependent_singleton/near/435516720\">said</a>:</p>\n<blockquote>\n<p>Looks like the theorem you want to apply mentions an up-arrow (coercion) right at the end, and in your application you have a <code>1</code> without an up-arrow</p>\n</blockquote>\n<p>I tried writing it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">li_b1</span> <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">linearIndependent_singleton</span>\n</code></pre></div>\n<p>but that gives the same error. I don't understand how this theorem is supposed to be used. Am I doing something crazy?</p>",
        "id": 435582729,
        "sender_full_name": "Tainnor",
        "timestamp": 1714136822
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">li_b1</span> <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">linearIndependent_singleton</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one_ne_zero'</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n  <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 435583332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714137034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20linearIndependent_singleton/near/435583332\">said</a>:</p>\n<blockquote>\n<p>This works:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">li_b1</span> <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">linearIndependent_singleton</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one_ne_zero'</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n  <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes, this works.<br>\nLooking at it, it seems like if I change the definition, it's even easier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">li_b1'</span> <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">linearIndependent_singleton</span> <span class=\"n\">one_ne_zero</span>\n</code></pre></div>\n<p>Not sure which version will be easier to work with, though.</p>",
        "id": 435585729,
        "sender_full_name": "Tainnor",
        "timestamp": 1714137778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"685366\">Tainnor</span> has marked this topic as resolved.</p>",
        "id": 435585884,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714137828
    }
]