[
    {
        "content": "<p>I have the following which works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">BigOperators</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Finset</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Nonempty</span><span class=\"bp\">.</span><span class=\"n\">cons_induction</span>\n<span class=\"w\">  </span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">s</span>\n<span class=\"w\">    </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">a'</span><span class=\"w\"> </span><span class=\"n\">hs</span><span class=\"w\"> </span><span class=\"n\">ih</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">a''</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∑</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">∑</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\">  </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\">  </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">sum_insert</span><span class=\"w\"> </span><span class=\"n\">a'</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">ih</span>\n<span class=\"w\">    </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_pos_left</span><span class=\"w\"> </span><span class=\"n\">a''</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It seems to me that <code>apply Nonempty.cons_induction</code> can be replaced with <code>induction...using</code>. My attempt is</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">Nonempty</span><span class=\"bp\">.</span><span class=\"n\">cons_induction</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But I have a feeling that this is wrong. First, <code>g</code> is not a set so the induction on <code>g</code> doesn't seem to make sense. But putting <code>T</code> there gives the error<br>\n<code>target\n  T\nhas type\n  Finset ℕ : Type\nbut is expected to have type\n  ?m.12030.Nonempty : Prop\n</code><br>\nSecond, I cannot replace the underscore in <code>|  _ a</code> with any letter as it would complain that  it is an invalid alternate name. I don't know what is supposed to be a valid alternate name there.</p>\n<p>In any case, I am probably not understanding how to make use of <code>induction...using</code> in this context. Any help is greatly appreciated.</p>",
        "id": 442546006,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717512120
    },
    {
        "content": "<p>What does <code>induction T using g.cons_induction with</code> do?</p>",
        "id": 442546614,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717512275
    },
    {
        "content": "<p>It says <code>unknown constant 'g.cons_induction'</code></p>",
        "id": 442546858,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717512344
    },
    {
        "content": "<p>That's what I thought as well. I think it's safe to say it's not supported.</p>",
        "id": 442547078,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717512391
    },
    {
        "content": "<p>Try <code>induction T using Nonempty.cons_induction with</code>, just in case</p>",
        "id": 442547116,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717512403
    },
    {
        "content": "<p>That gives the error message I quoted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">target</span>\n<span class=\"w\">  </span><span class=\"n\">T</span>\n<span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span>\n<span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">12030</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 442547309,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717512453
    },
    {
        "content": "<p>I give up <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 442547769,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717512561
    },
    {
        "content": "<p>That's ok. I am just puzzled by what <code>induction...using</code> expects from an induction principle. I don't think I get what it actually does.</p>",
        "id": 442547965,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717512603
    },
    {
        "content": "<p>Your mwe doesn't work for me, the imports don't exist</p>",
        "id": 442591702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717524082
    },
    {
        "content": "<p>That's probably Yaël's fault :)</p>",
        "id": 442591983,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717524152
    },
    {
        "content": "<p><code>induction g using Nonempty.cons_induction</code> works for me</p>",
        "id": 442592012,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717524166
    },
    {
        "content": "<p>Lean doesn't complain about that as I mentioned in the post. But I couldn't figure out how to proceed.</p>",
        "id": 442592199,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717524227
    },
    {
        "content": "<p>I don't understand  what the underscore in <code>|  _ a =&gt; </code> is doing; I couldn't figure out what that hole could stand for.</p>",
        "id": 442592522,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717524321
    },
    {
        "content": "<p>Oh, you need</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">singleton</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"n\">hs</span><span class=\"w\"> </span><span class=\"n\">ih</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 442593485,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717524608
    },
    {
        "content": "<p>Thanks. How did you figure that out? (Or maybe, how should I have figured that out?)</p>",
        "id": 442593654,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717524669
    },
    {
        "content": "<p>Hmm. I wonder why the import of <code>Mathlib.Algebra.BigOperators.Basic</code> worked in my VScode but not on the web lean 4 playground.</p>",
        "id": 442593759,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717524707
    },
    {
        "content": "<p><code>import Mathlib.Algebra.BigOperators.Fin</code> works in both. How did I even end up with <code>.Basic</code>?</p>",
        "id": 442594152,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717524837
    },
    {
        "content": "<p>The file was moved very recently</p>",
        "id": 442594359,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717524896
    },
    {
        "content": "<p>Oh. So it no longer exists?</p>",
        "id": 442594462,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717524926
    },
    {
        "content": "<p>I looked at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.Nonempty.cons_induction#doc\">docs#Finset.Nonempty.cons_induction</a> , which has two explicit arguments - singleton and cons</p>",
        "id": 442594513,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717524941
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13277\">#13277</a></p>",
        "id": 442594585,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717524960
    },
    {
        "content": "<p>Split into <code>Algebra.BigOperators.Group.Finset</code> and <code>Algebra.BigOperators.GroupWithZero.Finset</code></p>",
        "id": 442594763,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717525000
    },
    {
        "content": "<p>So that means the Mathlib in my project is outdated. Now I guess I have to dig up how to update it.</p>",
        "id": 442594779,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717525003
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency#updating-mathlib4\">https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency#updating-mathlib4</a></p>",
        "id": 442594924,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717525046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20Finset.2ENonempty.2Econs_induction.20in.20induction.20using/near/442594513\">said</a>:</p>\n<blockquote>\n<p>I looked at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.Nonempty.cons_induction#doc\">docs#Finset.Nonempty.cons_induction</a> , which has two explicit arguments - singleton and cons</p>\n</blockquote>\n<p><code>induction...using</code> seems a bit magical to me. When it is invoked, does it create as many cases as there are things before the colon in the induction principle?</p>",
        "id": 442595656,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717525255
    },
    {
        "content": "<p>That's as far as my understanding goes as well</p>",
        "id": 442597927,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717525968
    },
    {
        "content": "<p>I only use it, I don't claim to understand it :)</p>",
        "id": 442598023,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717526002
    },
    {
        "content": "<p>Thank you for your help. Maybe I should not try to understand it too much.</p>",
        "id": 442598068,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717526019
    }
]