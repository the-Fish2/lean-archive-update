[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"mi\">6</span>\n<span class=\"bp\">|</span> <span class=\"n\">double</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">half</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">noA_attempt1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  tactic 'cases' failed, nested error:</span>\n<span class=\"cm\">  dependent elimination failed, failed to solve equation</span>\n<span class=\"cm\">    1 = Nat.mul 2 m✝</span>\n<span class=\"cm\">  at case @A.double after processing</span>\n<span class=\"cm\">    _</span>\n<span class=\"cm\">  the dependent pattern matcher can solve the following kinds of equations</span>\n<span class=\"cm\">  - &lt;var&gt; = &lt;term&gt; and &lt;term&gt; = &lt;var&gt;</span>\n<span class=\"cm\">  - &lt;term&gt; = &lt;term&gt; where the terms are definitionally equal</span>\n<span class=\"cm\">  - &lt;constructor&gt; = &lt;constructor&gt;, examples: List.cons x xs = List.cons y ys, and List.cons x xs = List.nil</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">half</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">noA_attempt2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  dependent elimination failed, failed to solve equation</span>\n<span class=\"cm\">    1 = Nat.mul 2 m✝</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">half</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">noA_attempt3</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  index in target's type is not a variable (consider using the `cases` tactic instead)</span>\n<span class=\"cm\">    1</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">double</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">half</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">noA_attempt4</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">at</span> <span class=\"n\">a</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">contradiction</span>\n  <span class=\"bp\">|</span> <span class=\"n\">double</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Dvd.intro</span> <span class=\"n\">_</span> <span class=\"n\">h.symm</span>\n    <span class=\"n\">contradiction</span>\n  <span class=\"bp\">|</span> <span class=\"n\">half</span> <span class=\"n\">a</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">subst</span> <span class=\"n\">h</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    case half</span>\n<span class=\"cm\">    x : ℕ</span>\n<span class=\"cm\">    a : A (2 * 1)</span>\n<span class=\"cm\">    ih : 1 = 2 * 1 → False</span>\n<span class=\"cm\">    ⊢ False</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"c1\">-- Looks like I have to prove A 2 is empty. But in doing that I will need</span>\n    <span class=\"c1\">-- to prove A 1 is empty. Circular dependency...</span>\n</code></pre></div>\n<p>I posted this here because I think there is possibly some tactic or variation of these tactics I am not aware of to solve this.</p>",
        "id": 409312481,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1703135905
    },
    {
        "content": "<p>In this example I can conceive of proving that <code>A n</code> is empty whenever <code>n</code> is not 3 times a power of 2. However this is just an MWE and in the actual use case, it is difficult to generalize the condition like that. I am also interested in knowing whether <code>generalize h : 1 = x at a</code> followed by <code>induction a</code> is indeed the only cases-like tactic that can be used without errors for things like this. As you can see, I kept encountering <code>dependent elimination failed</code> errors with with <code>match</code> and <code>cases</code>.</p>",
        "id": 409312855,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1703136190
    },
    {
        "content": "<p>OK, I realize that this particular MWE most likely requires something mathematical to be done to achieve the proof, which makes this not a particularly good example for what I'm trying to ask. Maybe a better example is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">step1</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"mi\">5</span>\n<span class=\"bp\">|</span> <span class=\"n\">step2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"mi\">8</span>\n<span class=\"bp\">|</span> <span class=\"n\">step3</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">8</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">noB</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 409314153,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1703137165
    },
    {
        "content": "<p>OK, here's a solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">noB</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">at</span> <span class=\"n\">b</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"n\">Or.inl</span> <span class=\"n\">h.symm</span>\n  <span class=\"n\">clear</span> <span class=\"n\">h</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span>\n</code></pre></div>\n<p>Is there a shorter one? And my original question (proving that <code>A 1</code> is empty) still stands.</p>",
        "id": 409314489,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1703137384
    },
    {
        "content": "<p>Another way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">noB2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">False</span>\n<span class=\"bp\">|</span> <span class=\"n\">B.step3</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">noB8</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">noB5</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">False</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">step1</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">noB2</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">noB8</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">8</span> <span class=\"bp\">→</span> <span class=\"n\">False</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">step2</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">noB5</span> <span class=\"n\">b</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't understand why, but if <code>B</code>'s target type is changed from <code>Type</code> to <code>Prop</code>, this solution doesn't work anymore.</p>",
        "id": 409320243,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1703140290
    },
    {
        "content": "<p>My solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"mi\">6</span>\n<span class=\"bp\">|</span> <span class=\"n\">double</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">half</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">noA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span>\n    <span class=\"k\">match</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hk</span>\n    <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hk</span>\n      <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hk</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span>\n      <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"bp\">|</span> <span class=\"n\">double</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hk</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hk</span>\n      <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">half</span> <span class=\"n\">a</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ih</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">pow_succ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">noA</span> <span class=\"bp\">·</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 409325676,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1703142776
    }
]