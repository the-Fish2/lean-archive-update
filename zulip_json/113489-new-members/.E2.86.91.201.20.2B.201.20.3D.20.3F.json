[
    {
        "content": "<p>It seems I cannot add a real 1 to a natural 1 in this state expression:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>which comes from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prod_Icc_succ_top</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_Icc_succ_div</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">CharP.cast_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">zero_add</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prod_Icc_succ_top</span><span class=\"o\">,</span> <span class=\"n\">cast_add</span><span class=\"o\">]</span>     <span class=\"c1\">-- &lt;================</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><code>rw?</code> is no help here, and I have no idea how to search for a rewriting theorem.</p>",
        "id": 434570288,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713687468
    },
    {
        "content": "<p>When I try a constructed lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span>\n</code></pre></div>\n<p>and <code>rw [h]</code> it cannot find <code>1+1</code> of course. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 434570907,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713688000
    },
    {
        "content": "<p>I'm not sure I understand your question, but does this help?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">cast_one</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 434571018,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713688085
    },
    {
        "content": "<p>Now I have <code>↑1 + ↑1</code> but still cannot <code>rw [one_add_one_eq_two]</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">α</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">CommMonoid</span> <span class=\"n\">M</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 434571291,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713688423
    },
    {
        "content": "<p>Same if the <code>cast_one</code> is used in the forward direction...</p>",
        "id": 434571492,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713688609
    },
    {
        "content": "<p>Oh, also associativity is getting in the way - you have (x + 1) + 1 which doesn't contain 1 + 1</p>",
        "id": 434571603,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713688721
    },
    {
        "content": "<p>I don't see <code>(x+1)+1</code> in the state. What should I do?</p>",
        "id": 434571781,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713688896
    },
    {
        "content": "<p>If that is the problem, why not automatically write the parentheses when printing the state?</p>",
        "id": 434571900,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713689013
    },
    {
        "content": "<p>... because that would be a lot of brackets!</p>",
        "id": 434571910,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713689028
    },
    {
        "content": "<p>Well, so is reality. I just think not printing them here was not helpful.</p>",
        "id": 434572007,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713689108
    },
    {
        "content": "<p>Anyway many thanks for all the hints.</p>",
        "id": 434572086,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713689168
    },
    {
        "content": "<p>A tactic like <code>norm_cast</code> should change \\u 1 to 1. I'm on Yael's side regarding brackets -- it's great to have a convention for what a+b+c+d+e means, and once you learn it it's clear that there's no need to put the brackets in. It just tripped you up because you hadn't internalised it yet.</p>",
        "id": 434572211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713689295
    },
    {
        "content": "<p>Maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">cast_one</span><span class=\"o\">,</span> <span class=\"n\">one_add_one_eq_two</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 434572226,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713689324
    },
    {
        "content": "<p>By the way, if you start at 0 instead of 1 (which you can do by just adding 1 to things if necessary) then you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.range#doc\">docs#Finset.range</a> insead of <code>Icc</code> and then you have access to lemmas such as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.prod_range_succ#doc\">docs#Finset.prod_range_succ</a></p>",
        "id": 434572526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713689597
    },
    {
        "content": "<p>I tried that but the goal of the <a href=\"https://github.com/mo271/formal_book\">formal BOOK</a> project is to stay close to the text. I'm also prepared to work on the missing <code>prod_Icc</code> lemmata to Mathlib.</p>",
        "id": 434572752,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713689858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span> I was following the link above and noticed that the links to the chapters in the README don't seem to work (at least the first few; I didn't try all of them).</p>\n<p>Nice project, BTW!</p>",
        "id": 434574233,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713691228
    },
    {
        "content": "<p>A version of the sixth proof of the infinity of the set of prime numbers is also in Mathlib: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Primes.not_summable_one_div#doc\">docs#Nat.Primes.not_summable_one_div</a></p>",
        "id": 434574407,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713691437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"707242\">Ralf Stephan</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.86.91.201.20.2B.201.20.3D.20.3F/near/434572752\">said</a>:</p>\n<blockquote>\n<p>I tried that but the goal of the <a href=\"https://github.com/mo271/formal_book\">formal BOOK</a> project is to stay close to the text. I'm also prepared to work on the missing <code>prod_Icc</code> lemmata to Mathlib.</p>\n</blockquote>\n<p>I don’t want to derail the topic, but I didn’t know this project existed. Have you formalised the topological proof of the infinity of primes already? If not, I did that a couple months ago and I would be happy to PR it (modulo that it needs a lot of golfing)</p>",
        "id": 434580578,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1713697469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span></p>",
        "id": 434580751,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713697676
    },
    {
        "content": "<p>Even having only the statements would be a nice improvement, as with other formalization projects, I guess.</p>",
        "id": 434581134,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713698130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.86.91.201.20.2B.201.20.3D.20.3F/near/434574233\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> I was following the link above and noticed that the links to the chapters in the README don't seem to work (at least the first few; I didn't try all of them).</p>\n<p>Nice project, BTW!</p>\n</blockquote>\n<p>Fixed the links, thanks for the pointer!</p>",
        "id": 434582069,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1713699182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.86.91.201.20.2B.201.20.3D.20.3F/near/434580578\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"707242\">Ralf Stephan</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.86.91.201.20.2B.201.20.3D.20.3F/near/434572752\">said</a>:</p>\n<blockquote>\n<p>I tried that but the goal of the <a href=\"https://github.com/mo271/formal_book\">formal BOOK</a> project is to stay close to the text. I'm also prepared to work on the missing <code>prod_Icc</code> lemmata to Mathlib.</p>\n</blockquote>\n<p>I don’t want to derail the topic, but I didn’t know this project existed. Have you formalised the topological proof of the infinity of primes already? If not, I did that a couple months ago and I would be happy to PR it (modulo that it needs a lot of golfing)</p>\n</blockquote>\n<p>Would be great if you could add the topological proof! All contributions are most welcome!</p>",
        "id": 434582086,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1713699225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"707242\">Ralf Stephan</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.86.91.201.20.2B.201.20.3D.20.3F/near/434581134\">said</a>:</p>\n<blockquote>\n<p>Even having only the statements would be a nice improvement, as with other formalization projects, I guess.</p>\n</blockquote>\n<p>Perhaps it would be a good idea to add a blueprint, I will look into that</p>",
        "id": 434582144,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1713699263
    }
]