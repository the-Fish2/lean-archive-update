[
    {
        "content": "<p>Is there any reason why no complex or real type is an instance of MeasurableDiv\\2? Since Division by zero is defined to be zero I think it should be possible to define this instance.<br>\nI am trying to prove that for every measurable complex function f there is a function g:=f / |f| such that |f|*g=f. Having this instance would make this really easy.</p>",
        "id": 419605710,
        "sender_full_name": "Marmare314",
        "timestamp": 1706964148
    },
    {
        "content": "<p>You can try proving it!</p>",
        "id": 419605819,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706964263
    },
    {
        "content": "<p>Now that I looked at it in the way its stated in MeasurableDiv\\2 I'm not even sure its true. And even less so how I could prove it in lean. It probably would need to be shown explicitly using the definition of measurability right?</p>",
        "id": 419608027,
        "sender_full_name": "Marmare314",
        "timestamp": 1706966297
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 419608496,
        "sender_full_name": "Henrik Rueping",
        "timestamp": 1706966744
    },
    {
        "content": "<p>Ah well, apparently it wasn't that difficult after all</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableDiv₂</span> <span class=\"n\">ℝ</span> <span class=\"n\">where</span>\n  <span class=\"n\">measurable_div</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">div_eq_mul_inv</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Measurable.mul</span> <span class=\"n\">measurable_fst</span> <span class=\"o\">(</span><span class=\"n\">Measurable.comp</span> <span class=\"n\">measurable_inv</span> <span class=\"n\">measurable_snd</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableDiv₂</span> <span class=\"n\">ℂ</span> <span class=\"n\">where</span>\n  <span class=\"n\">measurable_div</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">div_eq_mul_inv</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Measurable.mul</span> <span class=\"n\">measurable_fst</span> <span class=\"o\">(</span><span class=\"n\">Measurable.comp</span> <span class=\"n\">measurable_inv</span> <span class=\"n\">measurable_snd</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 419611884,
        "sender_full_name": "Marmare314",
        "timestamp": 1706969251
    },
    {
        "content": "<p>Does the <code>measurability</code> tactic not do these? <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> are these goals good targets for <code>fun_prop</code>?</p>",
        "id": 419612307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706969615
    },
    {
        "content": "<p>I don't think it does, but I rarely have success with aesop tactics unfortunately.</p>",
        "id": 419613581,
        "sender_full_name": "Marmare314",
        "timestamp": 1706970702
    },
    {
        "content": "<p>With <code>fun_prop</code> the proof would be <code>simp only [div_eq_mul_inv]; fun_prop</code>.</p>\n<p><code>fun_prop</code> can even infer measurability from continuity, see this <a href=\"https://github.com/leanprover-community/mathlib4/blob/40d1ab0e8048e11ed9093e1700e2551a5f5b6c09/Mathlib/Tactic/FunProp/Measurable.lean#L72\">example</a></p>\n<p>However, it is not merged to the master branch yet. <span class=\"user-mention silent\" data-user-id=\"110524\">Scott Morrison</span>  do you know if anyone else is planning on reviewing it or can we merge it?</p>",
        "id": 419613632,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1706970728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"650736\">Marmare314</span> <a href=\"#narrow/stream/113489-new-members/topic/MeasurableDiv.20for.20Complex.20and.20Real.20types/near/419611884\">said</a>:</p>\n<blockquote>\n<p>Ah well, apparently it wasn't that difficult after all [...]</p>\n</blockquote>\n<p>You can actually make it a general <code>MeasurableInv α → MeasurableMul₂ α → MeasurableDiv₂ α</code> instance.</p>",
        "id": 419614361,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706971309
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DivInvMonoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableInv</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableMul₂</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableDiv₂</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">measurable_div</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">div_eq_mul_inv</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">measurability</span>\n</code></pre></div>\n<p>(measurability actually does work after the simp only call)</p>",
        "id": 419625247,
        "sender_full_name": "Marmare314",
        "timestamp": 1706980476
    },
    {
        "content": "<p>I don't know this part of the library but my guess is that this is worth PRing. Does that instance give you the ones you originally wanted (on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>?). Do you have push access rights for non-master branches on GitHub?</p>",
        "id": 419625556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706980787
    },
    {
        "content": "<p>Yes it gives at least ℝ, ℝ≥0, ℝ≥0∞ and ℂ. Only <code>EReal</code> is not an instance of Div.<br>\nNo I don't (my username should be the same as here). Is the process of creating a PR similar to other repositories except that the PR's should be created from a non-master branch?</p>",
        "id": 419625878,
        "sender_full_name": "Marmare314",
        "timestamp": 1706981114
    },
    {
        "content": "<p>More importantly, PRs need to be created from a branch within the main repository rather than a fork</p>",
        "id": 419626390,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706981630
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> can github user <code>marmare314</code> have push access to non-master mathlib branches for a short PR adding this instance?</p>",
        "id": 419627823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706982799
    },
    {
        "content": "<p>Re Ereal: IIRC it was me who made <code>EReal</code> back in the mathlib3 days, and I was very hesitant to put any kind of algebraic structure on it beyond unary <code>Neg</code> because I didn't know what to do with all the infinities, but other people did add these structures (for example it now seems to be a <code>Monoid</code>). But it wouldn't surprise me if it's possible to put an inv on EReal (possibly not involutive) and then make <code>EReal.measurableDiv\\2</code> directly, if you really want it.</p>",
        "id": 419628433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706983235
    },
    {
        "content": "<p>The inv would have to be really bad, though, as it can't even be involutive: of course the inverse of both infinities should be zero, but then what choice do you make for the inverse of zero?</p>",
        "id": 419628811,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706983510
    },
    {
        "content": "<p>In my opinion everything other than the <code>Neg</code> is \"really bad\" on this type, but that doesn't seem to have stopped people defining <code>+</code> and <code>*</code> where it is just as easy to raise objections.</p>",
        "id": 419629670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706984080
    },
    {
        "content": "<p>In fact I find it miraculous that addition and multiplication are associative. We can make inverse involutive by just defining <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mo>±</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">x\\in\\{0,\\pm\\infty\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">±</span><span class=\"mord\">∞</span><span class=\"mclose\">}</span></span></span></span> for example, this is no worse than the other atrocities which are happening on this type (at least that's what it feels like to me -- maybe you have some more conceptual way of thinking about it which explains what's happening here).</p>",
        "id": 419629838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706984192
    },
    {
        "content": "<p>Clearly we should extend it with a negative zero</p>",
        "id": 419630528,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706984730
    },
    {
        "content": "<p>But isn't it quite common to work with functions with codomain EReal? Normally you just have to be careful not to accidentally write inf - inf or similar things. This is probably not very convenient in lean.</p>",
        "id": 419630786,
        "sender_full_name": "Marmare314",
        "timestamp": 1706984878
    },
    {
        "content": "<p>The philosophy in Lean is to allow users to <em>write</em> junk like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty-\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">∞</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span> but not to guarantee that the answer is anything sensible. For example we <em>allow</em> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">1/0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/0</span></span></span></span> as reals, and it's assigned some junk value like 37 (it's not 37 but I wish it were) and then the point is that there are no theorems about <code>a / b</code> when <code>b = 0</code> so if you ever divide by 0 you're stuck.</p>",
        "id": 419631418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706985281
    },
    {
        "content": "<p>I think that if you're doing signed measures then <code>EReal</code> is the perfect place to be, but I've not had enough experience with measure theory in the library to know the ins and outs of what's happening with this type in practice. My guess is that the people who do work with measure theory thought carefully about junk values for + and *, and it looks like they didn't need / for some reason.</p>",
        "id": 419631614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706985437
    },
    {
        "content": "<p>I am currently just confused about the implications of using EReal if the edge cases are just defined to somehow work. It's of course fine, since as with division by zero, there are no lemmas allowing wrong conclusions. But somehow it feels worse for that type.<br>\nI actually don't really need division on EReal. What I am currently doing is just restating and proving some theorems of the first chapter of Rudin in order to get to know a bit of the library. There quite a few theorems are stated with codomain EReal and now I'm not really sure if it's the best thing to do that in lean too.</p>",
        "id": 419632458,
        "sender_full_name": "Marmare314",
        "timestamp": 1706986054
    },
    {
        "content": "<p>On that note: Is there a similar statement to <code>iSup_apply</code> for <code>liminf</code>?</p>",
        "id": 419632636,
        "sender_full_name": "Marmare314",
        "timestamp": 1706986214
    },
    {
        "content": "<p>The best way to ask questions like this is to write a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with a <code>sorry</code>.</p>",
        "id": 419635284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706988487
    },
    {
        "content": "<p>Oh of course:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f_meas</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"n\">Filter.limsup</span> <span class=\"n\">f</span> <span class=\"n\">atTop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">measurable_limsup</span> <span class=\"n\">f_meas</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Also I couldn't find any lemmas for this either</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f_meas</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">-</span> <span class=\"n\">Filter.limsup</span> <span class=\"n\">f</span> <span class=\"n\">atTop</span> <span class=\"bp\">=</span> <span class=\"n\">Filter.limsup</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 419636004,
        "sender_full_name": "Marmare314",
        "timestamp": 1706989154
    },
    {
        "content": "<p>For measure theory, you're probably better off considering functions with range <code>ENNReal</code>. As a historical note, measure theory in Isabelle started using <code>EReal</code>, and then they switched to <code>ENNReal</code> as it is so much better behaved. And Mathlib has been strongly inspired by the Isabelle design.</p>",
        "id": 419636567,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706989581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/MeasurableDiv.20for.20Complex.20and.20Real.20types/near/419627823\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-group-mention silent\" data-user-group-id=\"2494\">maintainers</span> can github user <code>marmare314</code> have push access to non-master mathlib branches for a short PR adding this instance?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"650736\">@Marmare314</span>, please check you github invitations!</p>",
        "id": 419655564,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707007805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/113489-new-members/topic/MeasurableDiv.20for.20Complex.20and.20Real.20types/near/419613632\">said</a>:</p>\n<blockquote>\n<p>With <code>fun_prop</code> the proof would be <code>simp only [div_eq_mul_inv]; fun_prop</code>.</p>\n<p><code>fun_prop</code> can even infer measurability from continuity, see this <a href=\"https://github.com/leanprover-community/mathlib4/blob/40d1ab0e8048e11ed9093e1700e2551a5f5b6c09/Mathlib/Tactic/FunProp/Measurable.lean#L72\">example</a></p>\n<p>However, it is not merged to the master branch yet. <span class=\"user-mention silent\" data-user-id=\"110524\">Scott Morrison</span>  do you know if anyone else is planning on reviewing it or can we merge it?</p>\n</blockquote>\n<p>Merged!</p>",
        "id": 419655598,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707007859
    },
    {
        "content": "<p>I am finding this already exists:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Constructions.BorelSpace.Complex</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DivInvMonoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableInv</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableMul₂</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">MeasurableDiv₂</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableDiv₂</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableDiv₂</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>If you are not seeing this, maybe you are missing an import. Or, something that happened to me just recently is that Lean timed out while looking for the instance. In that case putting the first <code>inferInstance</code>  explicitly helps.</p>",
        "id": 419670355,
        "sender_full_name": "llllvvuu",
        "timestamp": 1707023624
    },
    {
        "content": "<p>Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for the timeout:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableDiv₂</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>Note that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Constructions.BorelSpace.Complex</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableDiv₂</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>does not time out. So, it must have something to do with there being too many instances in scope.</p>",
        "id": 419670519,
        "sender_full_name": "llllvvuu",
        "timestamp": 1707023785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/113489-new-members/topic/MeasurableDiv.20for.20Complex.20and.20Real.20types/near/419670355\">said</a>:</p>\n<blockquote>\n<p>I am finding this already exists:</p>\n</blockquote>\n<p>It seems like it does. Is there any way to see which instance is inferred by lean?</p>",
        "id": 419677232,
        "sender_full_name": "Marmare314",
        "timestamp": 1707031724
    },
    {
        "content": "<p>You can use <code>#synth</code></p>",
        "id": 419677252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707031771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/MeasurableDiv.20for.20Complex.20and.20Real.20types/near/419655564\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"650736\">Marmare314</span>, please check you github invitations!</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 419677330,
        "sender_full_name": "Marmare314",
        "timestamp": 1707031842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/MeasurableDiv.20for.20Complex.20and.20Real.20types/near/419677252\">said</a>:</p>\n<blockquote>\n<p>You can use <code>#synth</code></p>\n</blockquote>\n<p>Very good to know, thanks!</p>\n<p><code>measurableDiv₂_of_mul_inv</code> seems to be defined in the same place as most other instances, but with priority 100. I'm not really sure what that means.</p>",
        "id": 419677598,
        "sender_full_name": "Marmare314",
        "timestamp": 1707032154
    }
]