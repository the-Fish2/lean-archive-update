[
    {
        "content": "<p>Hi all,</p>\n<p>I'm finally starting to understand <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean#L536\">this comment</a> about how run_cmd works...</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"ss\">`run_cmd</span><span class=\"w\"> </span><span class=\"n\">doSeq</span><span class=\"bp\">`</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">executes</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"ss\">`CommandElabM</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"bp\">`.</span>\n<span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">almost</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">same</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"bp\">`#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">CommandElabM</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">doSeq</span><span class=\"bp\">`</span><span class=\"o\">,</span>\n<span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">doesn't</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"n\">diagnostic</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 442408599,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1717462638
    },
    {
        "content": "<p>This snippet has lots of interesting tests and pointers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Command</span>\n<span class=\"kn\">open</span><span class=\"w\">   </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Command</span>\n<span class=\"kn\">open</span><span class=\"w\">   </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">Foo</span>\n<span class=\"n\">run_cmd</span><span class=\"w\">                                  </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getCurrNamespace</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\">  </span><span class=\"n\">CommandElabM</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\">  </span><span class=\"k\">from</span><span class=\"w\">  </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getCurrNamespace</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">CommandElabM</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getCurrNamespace</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">CommandElabM</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getCurrNamespace</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\">                                </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getCurrNamespace</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\">                                   </span><span class=\"n\">logInfo</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\">                                              </span><span class=\"n\">getCurrNamespace</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\">      </span><span class=\"n\">CommandElabM</span><span class=\"w\"> </span><span class=\"n\">Unit</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\">      </span><span class=\"n\">CommandElabM</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">AddMessageContext</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">MessageData</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">MonadLog</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">MonadOptions</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">logInfo</span>\n</code></pre></div>",
        "id": 442408645,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1717462669
    },
    {
        "content": "<p>The code inside the <code>logInfo</code> has access to lots of monads, and <code>(← getCurrNamespace)</code> is just a simple example of what we can do there.</p>",
        "id": 442408767,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1717462707
    },
    {
        "content": "<p>Question: is there a place in which I can find tests for the methods of those classes? For example, I would like to learn how to use the method <code>getOpenDecls</code>, from:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">MonadResolveName</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">getCurrNamespace</span><span class=\"w\">   </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">Name</span>\n<span class=\"w\">  </span><span class=\"n\">getOpenDecls</span><span class=\"w\">       </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">OpenDecl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>right now the only way that I have to learn something like that is by spending many hours reading the sources, to try to create arguments with the right types to test these methods... is there a better way, like a place with tests that can be used as examples?</p>",
        "id": 442408905,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1717462772
    }
]