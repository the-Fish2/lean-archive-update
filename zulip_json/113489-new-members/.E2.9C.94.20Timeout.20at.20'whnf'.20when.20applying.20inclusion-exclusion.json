[
    {
        "content": "<p>Hi there, I'm trying to develop some rook theory, with the goal of proving the Even-Gillis formula for generalized derangements - # 27 from <span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span>'s  <a href=\"https://github.com/leanprover-community/mathlib4/issues/6091\">list</a>. I've managed to prove a form of inclusion-exclusion and I'm applying it to the rook theory case, but getting stuck with an error message \"(deterministic) timeout at 'whnf'\".   </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Board</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Finset</span> <span class=\"o\">((</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">complete_board</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">Board</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">instFintypeProd</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elems</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_rook_placement</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span>  <span class=\"n\">Board</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">r.1</span> <span class=\"bp\">≠</span> <span class=\"n\">s.1</span> <span class=\"bp\">∧</span> <span class=\"n\">r.2</span> <span class=\"bp\">≠</span> <span class=\"n\">s.2</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">decidable_rook</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}:</span> <span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_rook_placement</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">exact</span> <span class=\"n\">decidableDforallFinset</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">all_rook_placements</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Board</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">filter</span> <span class=\"n\">is_rook_placement</span> <span class=\"o\">(</span><span class=\"n\">powerset</span> <span class=\"o\">(</span><span class=\"n\">complete_board</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">all_rook_placements_with_card</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Board</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">card</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inclusion_exclusion</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}(</span><span class=\"n\">U</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>    <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span><span class=\"n\">s</span><span class=\"bp\">∈</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">U</span><span class=\"o\">)):</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>   <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">T</span> <span class=\"k\">in</span> <span class=\"n\">powerset</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℤ</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span><span class=\"n\">s</span><span class=\"bp\">∈</span><span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rook_complement_formula</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">Board</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">DecidablePred</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span> <span class=\"o\">]:</span>\n  <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">T</span> <span class=\"k\">in</span> <span class=\"n\">powerset</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℤ</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">):=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">exact</span> <span class=\"n\">inclusion_exclusion</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>I think it may be stuck trying to infer DecidablePred to apply <code>filter</code>. So I tried adding <code>[∀(b: B), DecidablePred fun (r: Finset B) =&gt; b ∈ r ]</code> - then I get a different error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">inclusion_exclusion</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">B</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">Board</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∉</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decidableDforallFinset</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">T</span> <span class=\"k\">in</span> <span class=\"n\">powerset</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">T.card</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">Board</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"n\">B</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">T</span> <span class=\"k\">in</span> <span class=\"n\">powerset</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">T.card</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"n\">PropLean</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<p>Then as an experiment I changed the goal to match exactly that type, which then <a href=\"https://live.lean-lang.org/#code=import%20Mathlib%0D%0Aopen%20BigOperators%0D%0Aopen%20Classical%0D%0Aopen%20Finset%0D%0A%0D%0Aabbrev%20Board%20(n%3A%20%E2%84%95)%3A%20Type%20%3A%3D%20Finset%20((Fin%20n)%20%C3%97%20(Fin%20n))%0D%0A%0D%0Adef%20complete_board%20(n%3A%20%E2%84%95)%3A%20Board%20n%20%3A%3D%20(instFintypeProd%20(Fin%20n)%20(Fin%20n)).elems%0D%0Adef%20is_rook_placement%20%7Bn%3A%20%E2%84%95%20%7D%20(R%3A%20%20Board%20n)%3A%20Prop%20%3A%3D%20(%E2%88%80r%20%E2%88%88%20R%2C%20%E2%88%80%20s%20%E2%88%88%20R%2C%20r%20%E2%89%A0%20s%20%E2%86%92%20r.1%20%E2%89%A0%20s.1%20%E2%88%A7%20r.2%20%E2%89%A0%20s.2%20)%0D%0A%0D%0Ainstance%20decidable_rook%20%7Bn%3A%20%E2%84%95%7D%3A%20DecidablePred%20(%40is_rook_placement%20n)%20%3A%3D%20by%20%7B%0D%0A%20%20intro%20n%0D%0A%20%20exact%20decidableDforallFinset%0D%0A%7D%0D%0A%0D%0Adef%20all_rook_placements%20(n%3A%20%E2%84%95)%20%3A%20Finset%20(Board%20n)%20%3A%3D%20filter%20is_rook_placement%20(powerset%20(complete_board%20n))%0D%0Adef%20all_rook_placements_with_card%20(n%20k%3A%20%E2%84%95)%20%3A%20Finset%20(Board%20n)%20%3A%3D%20filter%20(fun%20r%20%3D%3E%20card%20r%20%3D%20k)%20(all_rook_placements%20n)%0D%0A%0D%0Atheorem%20inclusion_exclusion%20%7B%CE%B1%20%CE%B2%3A%20Type%7D(U%3A%20Finset%20%CE%B1)%20(S%3A%20Finset%20%CE%B2)%20(P%3A%20%CE%B2%20%E2%86%92%20%CE%B1%20%E2%86%92%20Prop)%20%20%20%20%3A%0D%0A%20%20((card%20(filter%20(fun%20a%20%3D%3E%20%E2%88%80s%E2%88%88S%2C%20%C2%AC%20P%20s%20a)%20U))%3A%20%E2%84%A4)%20%20%20%3D%20%E2%88%91%20T%20in%20powerset%20S%2C%20(-1%3A%E2%84%A4%20)%5E(card%20T)%20*%20card%20(filter%20(fun%20a%20%3D%3E%20%E2%88%80s%E2%88%88T%2C%20P%20s%20a)%20U)%20%3A%3D%20sorry%0D%0A%0D%0A%0D%0A%0D%0Atheorem%20rook_complement_formula%20%7Bn%3A%20%E2%84%95%20%7D%20(B%3A%20Board%20n)%20%5B%E2%88%80(b%3A%20B)%2C%20DecidablePred%20fun%20(r%3A%20Finset%20B)%20%3D%3E%20b%20%E2%88%88%20r%20%5D%20%5B%E2%88%80(T%3A%20(Board%20n))%2C%20DecidablePred%20(fun%20(r%3A%20Board%20n)%20%3D%3E%20%E2%88%80x%20%E2%88%88%20T%2C%20%C2%AC%20(x%20%E2%88%88%20r))%5D%3A%0D%0A%20%E2%86%91(%40filter%20(Board%20n)%20(fun%20a%20%3D%3E%20%E2%88%80%20s%20%E2%88%88%20B%2C%20s%20%E2%88%89%20a)%20(fun%20a%20%3D%3E%20decidableDforallFinset)%0D%0A%20%20%20%20%20%20%20%20%20%20(all_rook_placements_with_card%20n%20n)).card%20%3D%0D%0A%20%20%20%20%E2%88%91%20T%20in%20powerset%20B%2C%0D%0A%20%20%20%20%20%20(-1%3A%E2%84%A4%20)%20%5E%20T.card%20*%20%E2%86%91(filter%20(fun%20a%20%3D%3E%20%E2%88%80%20s%20%E2%88%88%20T%2C%20s%20%E2%88%88%20a)%20(all_rook_placements_with_card%20n%20n)).card%3A%3D%20by%20%7B%0D%0A%20%20%20%20%0D%0A%20%20%20%20exact%20inclusion_exclusion%20(all_rook_placements_with_card%20n%20n)%20B%20(fun%20b%20r%20%3D%3E%20b%20%E2%88%88%20r)%0D%0A%7D\">gives me</a> the confusing error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">inclusion_exclusion</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">B</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">Board</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∉</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decidableDforallFinset</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">T</span> <span class=\"k\">in</span> <span class=\"n\">powerset</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">T.card</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">Board</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∉</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decidableDforallFinset</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">T</span> <span class=\"k\">in</span> <span class=\"n\">powerset</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">T.card</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>where the 'has type' and 'expected to have type' strings are identical. </p>\n<p>In general I've had a lot of issues of this type when trying to prove theorems involving <code>filter</code>. And while I have you here - Is this the best way to formalize inclusion-exclusion and the definition of rook placement? I initially wanted to define these as Fintypes instead of Finsets, but I found it necessary to be able to perform sums over sets of rook placements easily, and the 'filter' function was useful for formulating inclusion-exclusion.</p>",
        "id": 419655303,
        "sender_full_name": "Jair Taylor",
        "timestamp": 1707007518
    },
    {
        "content": "<p>Remove the <code>open Classical</code> and replace it with explicit <code>Decidable</code> instances</p>",
        "id": 419680836,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707035575
    },
    {
        "content": "<p>Thanks, I'll try that! I was hoping <code>open Classical</code> would be a panacea that automatically infers away all my decidability issues, but apparentely it is the opposite...</p>",
        "id": 419721389,
        "sender_full_name": "Jair Taylor",
        "timestamp": 1707072274
    },
    {
        "content": "<p>Yes, it automatically infers away most of them and then descends you into constructivist diamond hell for the remaining few.</p>",
        "id": 419721931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707072733
    },
    {
        "content": "<p>Hmm, well I've removed <code>open Classical</code> and I've tried several things but I'm still rather stuck.  In my <a href=\"https://live.lean-lang.org/#code=import%20Mathlib%0Aopen%20BigOperators%0A%0Aopen%20Finset%0A%0Aabbrev%20Board%20(n%3A%20%E2%84%95)%3A%20Type%20%3A%3D%20Finset%20((Fin%20n)%20%C3%97%20(Fin%20n))%0A%0Adef%20complete_board%20(n%3A%20%E2%84%95)%3A%20Board%20n%20%3A%3D%20(instFintypeProd%20(Fin%20n)%20(Fin%20n)).elems%0Adef%20is_rook_placement%20%7Bn%3A%20%E2%84%95%20%7D%20(R%3A%20%20Board%20n)%3A%20Prop%20%3A%3D%20(%E2%88%80r%20%E2%88%88%20R%2C%20%E2%88%80%20s%20%E2%88%88%20R%2C%20r%20%E2%89%A0%20s%20%E2%86%92%20r.1%20%E2%89%A0%20s.1%20%E2%88%A7%20r.2%20%E2%89%A0%20s.2%20)%0A%0Ainstance%20decidable_rook%20%7Bn%3A%20%E2%84%95%7D%3A%20DecidablePred%20(%40is_rook_placement%20n)%20%3A%3D%20by%20%7B%0A%20%20intro%20n%0A%20%20exact%20decidableDforallFinset%0A%7D%0A%0Adef%20all_rook_placements%20(n%3A%20%E2%84%95)%20%3A%20Finset%20(Board%20n)%20%3A%3D%20filter%20is_rook_placement%20(powerset%20(complete_board%20n))%0Adef%20all_rook_placements_with_card%20(n%20k%3A%20%E2%84%95)%20%3A%20Finset%20(Board%20n)%20%3A%3D%20filter%20(fun%20r%20%3D%3E%20card%20r%20%3D%20k)%20(all_rook_placements%20n)%0A%0Atheorem%20inclusion_exclusion%20%7B%CE%B1%20%CE%B2%3A%20Type%7D%20%5BDecidableEq%20%CE%B1%5D%20%20%5BDecidableEq%20%CE%B2%5D%20%20(U%3A%20Finset%20%CE%B1)%20(S%3A%20Finset%20%CE%B2)%20(P%3A%20%CE%B2%20%E2%86%92%20%CE%B1%20%E2%86%92%20Prop)%20%5B%E2%88%80%20(b%3A%20%CE%B2)%2C%20DecidablePred%20(P%20b)%5D%20%20%20%20%3A%0A%20%20((card%20(filter%20(fun%20a%20%3D%3E%20%E2%88%80s%E2%88%88S%2C%20%C2%AC%20P%20s%20a)%20U))%3A%20%E2%84%A4)%20%20%20%3D%20%E2%88%91%20T%20in%20powerset%20S%2C%20(-1%3A%E2%84%A4%20)%5E(card%20T)%20*%20card%20(filter%20(fun%20a%20%3D%3E%20%E2%88%80s%E2%88%88T%2C%20P%20s%20a)%20U)%20%20%3A%3D%20sorry%0A%0Atheorem%20rook_complement_formula%20%7Bn%3A%20%E2%84%95%20%7D%20(B%3A%20Board%20n)%20%5B%E2%88%80%20(T%3A%20Board%20n)%2C%20DecidablePred%20fun%20(r%3ABoard%20n)%20%3D%3E%20%20%E2%88%80x%20%E2%88%88%20T%2C%20%C2%AC%20(x%20%E2%88%88%20r)%5D%3A%20%E2%86%91(filter%20(fun%20a%20%3D%3E%20%E2%88%80%20s%20%E2%88%88%20B%2C%20%C2%AC(fun%20x%20r%20%3D%3E%20x%20%E2%88%88%20r)%20s%20a)%20(all_rook_placements_with_card%20n%20n)).card%20%3D%0A%20%20%20%20%E2%88%91%20T%20in%20powerset%20B%2C%0A%20%20%20%20%20%20(-1%3A%E2%84%A4%20)%20%5E%20T.card%20*%20%E2%86%91(filter%20(fun%20a%20%3D%3E%20%E2%88%80%20s%20%E2%88%88%20T%2C%20(fun%20x%20r%20%3D%3E%20x%20%E2%88%88%20r)%20s%20a)%20(all_rook_placements_with_card%20n%20n)).card%20%3A%3D%20by%20%7B%0A%20%20%20%20exact%20inclusion_exclusion%20%20(all_rook_placements_with_card%20n%20n)%20B%20(fun%20(x%3A%20(Fin%20n)%20%C3%97%20(Fin%20n)%20)%20(r%3A%20Board%20n%20)%20%20%3D%3E%20x%20%E2%88%88%20r)%0A%20%20%7D%0A%0A%0A\">latest</a> attempt I get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">inclusion_exclusion</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">B</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">Board</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∉</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decidableDforallFinset</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">T</span> <span class=\"k\">in</span> <span class=\"n\">powerset</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">T.card</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">Board</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"n\">B</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">T</span> <span class=\"k\">in</span> <span class=\"n\">powerset</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">T.card</span> <span class=\"bp\">*</span>\n        <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I don't know why it's expecting <code>(fun a =&gt; inst✝ B a)</code> instead of <code>(fun a =&gt; decidableDforallFinset)</code>.</p>",
        "id": 419729464,
        "sender_full_name": "Jair Taylor",
        "timestamp": 1707079408
    },
    {
        "content": "<p>Is there some general advice or guidance on how to correctly infer Decidable instances?</p>",
        "id": 419729722,
        "sender_full_name": "Jair Taylor",
        "timestamp": 1707079639
    },
    {
        "content": "<p>Can you show us what decidability assumptions you added?</p>",
        "id": 419736340,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707084998
    },
    {
        "content": "<p>Oh, I added  <code>[∀ (T: Board n), DecidablePred fun (r:Board n) =&gt;  ∀x ∈ T, ¬ (x ∈ r)]</code>.  See the link <a href=\"https://live.lean-lang.org/#code=import%20Mathlib%0Aopen%20BigOperators%0A%0Aopen%20Finset%0A%0Aabbrev%20Board%20(n%3A%20%E2%84%95)%3A%20Type%20%3A%3D%20Finset%20((Fin%20n)%20%C3%97%20(Fin%20n))%0A%0Adef%20complete_board%20(n%3A%20%E2%84%95)%3A%20Board%20n%20%3A%3D%20(instFintypeProd%20(Fin%20n)%20(Fin%20n)).elems%0Adef%20is_rook_placement%20%7Bn%3A%20%E2%84%95%20%7D%20(R%3A%20%20Board%20n)%3A%20Prop%20%3A%3D%20(%E2%88%80r%20%E2%88%88%20R%2C%20%E2%88%80%20s%20%E2%88%88%20R%2C%20r%20%E2%89%A0%20s%20%E2%86%92%20r.1%20%E2%89%A0%20s.1%20%E2%88%A7%20r.2%20%E2%89%A0%20s.2%20)%0A%0Ainstance%20decidable_rook%20%7Bn%3A%20%E2%84%95%7D%3A%20DecidablePred%20(%40is_rook_placement%20n)%20%3A%3D%20by%20%7B%0A%20%20intro%20n%0A%20%20exact%20decidableDforallFinset%0A%7D%0A%0Adef%20all_rook_placements%20(n%3A%20%E2%84%95)%20%3A%20Finset%20(Board%20n)%20%3A%3D%20filter%20is_rook_placement%20(powerset%20(complete_board%20n))%0Adef%20all_rook_placements_with_card%20(n%20k%3A%20%E2%84%95)%20%3A%20Finset%20(Board%20n)%20%3A%3D%20filter%20(fun%20r%20%3D%3E%20card%20r%20%3D%20k)%20(all_rook_placements%20n)%0A%0Atheorem%20inclusion_exclusion%20%7B%CE%B1%20%CE%B2%3A%20Type%7D%20%5BDecidableEq%20%CE%B1%5D%20%20%5BDecidableEq%20%CE%B2%5D%20%20(U%3A%20Finset%20%CE%B1)%20(S%3A%20Finset%20%CE%B2)%20(P%3A%20%CE%B2%20%E2%86%92%20%CE%B1%20%E2%86%92%20Prop)%20%5B%E2%88%80%20(b%3A%20%CE%B2)%2C%20DecidablePred%20(P%20b)%5D%20%20%20%20%3A%0A%20%20((card%20(filter%20(fun%20a%20%3D%3E%20%E2%88%80s%E2%88%88S%2C%20%C2%AC%20P%20s%20a)%20U))%3A%20%E2%84%A4)%20%20%20%3D%20%E2%88%91%20T%20in%20powerset%20S%2C%20(-1%3A%E2%84%A4%20)%5E(card%20T)%20*%20card%20(filter%20(fun%20a%20%3D%3E%20%E2%88%80s%E2%88%88T%2C%20P%20s%20a)%20U)%20%20%3A%3D%20sorry%0A%0Atheorem%20rook_complement_formula%20%7Bn%3A%20%E2%84%95%20%7D%20(B%3A%20Board%20n)%20%5B%E2%88%80%20(T%3A%20Board%20n)%2C%20DecidablePred%20fun%20(r%3ABoard%20n)%20%3D%3E%20%20%E2%88%80x%20%E2%88%88%20T%2C%20%C2%AC%20(x%20%E2%88%88%20r)%5D%3A%20%E2%86%91(filter%20(fun%20a%20%3D%3E%20%E2%88%80%20s%20%E2%88%88%20B%2C%20%C2%AC(fun%20x%20r%20%3D%3E%20x%20%E2%88%88%20r)%20s%20a)%20(all_rook_placements_with_card%20n%20n)).card%20%3D%0A%20%20%20%20%E2%88%91%20T%20in%20powerset%20B%2C%0A%20%20%20%20%20%20(-1%3A%E2%84%A4%20)%20%5E%20T.card%20*%20%E2%86%91(filter%20(fun%20a%20%3D%3E%20%E2%88%80%20s%20%E2%88%88%20T%2C%20(fun%20x%20r%20%3D%3E%20x%20%E2%88%88%20r)%20s%20a)%20(all_rook_placements_with_card%20n%20n)).card%20%3A%3D%20by%20%7B%0A%20%20%20%20exact%20inclusion_exclusion%20%20(all_rook_placements_with_card%20n%20n)%20B%20(fun%20(x%3A%20(Fin%20n)%20%C3%97%20(Fin%20n)%20)%20(r%3A%20Board%20n%20)%20%20%3D%3E%20x%20%E2%88%88%20r)%0A%20%20%7D%0A%0A%0A\">here</a> Not sure if this is correct, but if I remove this, I get the timeout error again.</p>",
        "id": 419744410,
        "sender_full_name": "Jair Taylor",
        "timestamp": 1707091575
    },
    {
        "content": "<p>Right -- that's the idea. If the theorem statement won't compile because it demands a decidability hypothesis, don't open Classical, just add the hypothesis to the statement. Then in applications the hypothesis might come from an explicit instance which actually exists or from classicality.</p>",
        "id": 419777116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707117717
    },
    {
        "content": "<p>Sure, I understand the idea, but in practice I'm still getting errors after I add the decidability hypotheses.</p>",
        "id": 419782570,
        "sender_full_name": "Jair Taylor",
        "timestamp": 1707120467
    },
    {
        "content": "<p>There is an art to this but my impression is that the community understands how to solve this problem now. Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 419785020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707121442
    },
    {
        "content": "<p>This <code>∀ (T: Board n), DecidablePred fun (r:Board n) =&gt;  ∀x ∈ T, ¬ (x ∈ r)</code> doesn't look like a decidability hypothesis you'd need. This is already decidable, since it's all dealing with finsets over <code>(Fin n) × (Fin n)</code>, which has decidable equality already. I wouldn't be surprised if it conflicts somehow with the pre-existing decidable instances.</p>",
        "id": 419785134,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707121476
    },
    {
        "content": "<p><a href=\"https://live.lean-lang.org/#code=import%20Mathlib%0Aopen%20BigOperators%0A%0Aopen%20Finset%0A%0Aabbrev%20Board%20(n%3A%20%E2%84%95)%3A%20Type%20%3A%3D%20Finset%20((Fin%20n)%20%C3%97%20(Fin%20n))%0A%0Adef%20complete_board%20(n%3A%20%E2%84%95)%3A%20Board%20n%20%3A%3D%20(instFintypeProd%20(Fin%20n)%20(Fin%20n)).elems%0Adef%20is_rook_placement%20%7Bn%3A%20%E2%84%95%20%7D%20(R%3A%20%20Board%20n)%3A%20Prop%20%3A%3D%20(%E2%88%80r%20%E2%88%88%20R%2C%20%E2%88%80%20s%20%E2%88%88%20R%2C%20r%20%E2%89%A0%20s%20%E2%86%92%20r.1%20%E2%89%A0%20s.1%20%E2%88%A7%20r.2%20%E2%89%A0%20s.2%20)%0A%0Ainstance%20decidable_rook%20%7Bn%3A%20%E2%84%95%7D%3A%20DecidablePred%20(%40is_rook_placement%20n)%20%3A%3D%20by%20%7B%0A%20%20intro%20n%0A%20%20exact%20decidableDforallFinset%0A%7D%0A%0Adef%20all_rook_placements%20(n%3A%20%E2%84%95)%20%3A%20Finset%20(Board%20n)%20%3A%3D%20filter%20is_rook_placement%20(powerset%20(complete_board%20n))%0Adef%20all_rook_placements_with_card%20(n%20k%3A%20%E2%84%95)%20%3A%20Finset%20(Board%20n)%20%3A%3D%20filter%20(fun%20r%20%3D%3E%20card%20r%20%3D%20k)%20(all_rook_placements%20n)%0A%0Atheorem%20inclusion_exclusion%20%7B%CE%B1%20%CE%B2%3A%20Type%7D%20%5BDecidableEq%20%CE%B1%5D%20%20%5BDecidableEq%20%CE%B2%5D%20%20(U%3A%20Finset%20%CE%B1)%20(S%3A%20Finset%20%CE%B2)%20(P%3A%20%CE%B2%20%E2%86%92%20%CE%B1%20%E2%86%92%20Prop)%20(h%3A%E2%88%80%20(b%3A%20%CE%B2)%2C%20DecidablePred%20(P%20b))%20%20%20%20%3A%0A%20%20((card%20(filter%20(fun%20a%20%3D%3E%20%E2%88%80s%E2%88%88S%2C%20%C2%AC%20P%20s%20a)%20U))%3A%20%E2%84%A4)%20%20%20%3D%20%E2%88%91%20T%20in%20powerset%20S%2C%20(-1%3A%E2%84%A4%20)%5E(card%20T)%20*%20card%20(filter%20(fun%20a%20%3D%3E%20%E2%88%80s%E2%88%88T%2C%20P%20s%20a)%20U)%20%20%3A%3D%20sorry%0A%0Atheorem%20rook_complement_formula%20%7Bn%3A%20%E2%84%95%20%7D%20(B%3A%20Board%20n)%20%5B%E2%88%80%20(T%3A%20Board%20n)%2C%20DecidablePred%20fun%20(r%3ABoard%20n)%20%3D%3E%20%20%E2%88%80x%20%E2%88%88%20T%2C%20%C2%AC%20(x%20%E2%88%88%20r)%5D%3A%20%20%20%E2%86%91(filter%20(fun%20a%20%3D%3E%20%E2%88%80%20s%20%E2%88%88%20B%2C%20s%20%E2%88%89%20a)%20(all_rook_placements_with_card%20n%20n)).card%20%3D%0A%20%20%20%20%E2%88%91%20T%20in%20powerset%20B%2C%0A%20%20%20%20%20%20(-1%3A%20%E2%84%A4%20)%20%5E%20T.card%20*%20%E2%86%91(filter%20(fun%20a%20%3D%3E%20%E2%88%80%20s%20%E2%88%88%20T%2C%20s%20%E2%88%88%20a)%20(all_rook_placements_with_card%20n%20n)).card%20%3A%3D%20by%20%7B%0A%20%20%20%20%20%20%0A%0A%20%20%20%20have%20h%3A%20%E2%88%80%20(x%3A%20(Fin%20n)%20%C3%97%20(Fin%20n))%2C%20DecidablePred%20(fun%20(r%3A%20Board%20n%20)%20%20%3D%3E%20x%20%E2%88%88%20r)%3A%3D%20by%20%7B%0A%20%20%20%20%20%20exact%20fun%20x%20%3D%3E%20Classical.decPred%20fun%20r%20%3D%3E%20x%20%E2%88%88%20r%0A%20%20%20%20%7D%0A%20%20%20%20exact%20inclusion_exclusion%20%20(all_rook_placements_with_card%20n%20n)%20B%20(fun%20(x%3A%20(Fin%20n)%20%C3%97%20(Fin%20n)%20)%20(r%3A%20Board%20n%20)%20%20%3D%3E%20x%20%E2%88%88%20r)%20h%0A%20%20%7D%0A%0A%0A\">Here</a> I try to explicitly pass in the decidability assumption but I get the strange error of type mismatch where the two strings are identical</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">inclusion_exclusion</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∉</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">T</span> <span class=\"k\">in</span> <span class=\"n\">powerset</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">T.card</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∉</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">T</span> <span class=\"k\">in</span> <span class=\"n\">powerset</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">T.card</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">all_rook_placements_with_card</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>and I don't know what to make of that.</p>",
        "id": 419785266,
        "sender_full_name": "Jair Taylor",
        "timestamp": 1707121535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Timeout.20at.20'whnf'.20when.20applying.20inclusion-exclusion/near/419785134\">said</a>:</p>\n<blockquote>\n<p>This <code>∀ (T: Board n), DecidablePred fun (r:Board n) =&gt;  ∀x ∈ T, ¬ (x ∈ r)</code> doesn't look like a decidability hypothesis you'd need. This is already decidable, since it's all dealing with finsets over <code>(Fin n) × (Fin n)</code>, which has decidable equality already. I wouldn't be surprised if it conflicts somehow with the pre-existing decidable instances.</p>\n</blockquote>\n<p>Right, I thought this should be inferred automatically, but when I remove this I get the timeout error.</p>",
        "id": 419785480,
        "sender_full_name": "Jair Taylor",
        "timestamp": 1707121617
    },
    {
        "content": "<p>Are you sure the timeout error is that it's not being inferred?</p>",
        "id": 419785604,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707121652
    },
    {
        "content": "<p>No, I'm not sure why the timeout error occurs</p>",
        "id": 419785763,
        "sender_full_name": "Jair Taylor",
        "timestamp": 1707121704
    },
    {
        "content": "<p>For the type mismatch error, you could try digging through the <code>set_option pp.all true</code> form. I expect it's this decidable instance you added causing it to not match up.</p>\n<p>You could also try using the <code>convert</code> tactic, which is like <code>exact</code> but tries to either fix up differences itself, or create new goals with the unfixable differences. The latter might be more helpful here, for debugging.</p>",
        "id": 419785899,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707121751
    },
    {
        "content": "<p>OK thanks, I'll try that. I wasn't aware of <code>set_option pp.all true</code>.</p>",
        "id": 419786870,
        "sender_full_name": "Jair Taylor",
        "timestamp": 1707122112
    },
    {
        "content": "<p>There are a lot of other <code>pp</code> options you could use that are less verbose, but at least that one should show the difference.</p>\n<p>Sometimes I just play the hover-over-expressions game in the infoview and hope to spot the difference from the popups.</p>",
        "id": 419787016,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707122164
    },
    {
        "content": "<p>OK, I'll try that too. Thanks!</p>",
        "id": 419789115,
        "sender_full_name": "Jair Taylor",
        "timestamp": 1707122922
    },
    {
        "content": "<p>Ah, I was able to resolve this by using <code>convert</code> instead of <code>exact</code>. Thanks everyone!</p>",
        "id": 420831472,
        "sender_full_name": "Jair Taylor",
        "timestamp": 1707597848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"674925\">Jair Taylor</span> has marked this topic as resolved.</p>",
        "id": 420831483,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707597863
    }
]