[
    {
        "content": "<p>hello, i have a macro to make a function look like its imperative by shaddowing existing variables, similiar to a mutable var</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add_one</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">return</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"incr\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">add_one</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prog</span><span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span><span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">incr</span> <span class=\"n\">a</span>\n  <span class=\"c1\">--should translate to</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">add_one</span> <span class=\"n\">a</span>\n  <span class=\"n\">return</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>this works outside of a IO monad, but why doesnt it with IO ?</p>",
        "id": 423460451,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1708972664
    },
    {
        "content": "<p>Not an expert here, but you might need a variant of your syntax that works as a <code>doElem</code>. In fact, the lean test suite has this snippet</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"inc!\"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">inc</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n  <span class=\"n\">inc</span><span class=\"bp\">!</span> <span class=\"n\">x</span>\n  <span class=\"n\">ret</span><span class=\"bp\">!</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 423492036,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1708985150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> has marked this topic as resolved.</p>",
        "id": 423494651,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708986356
    },
    {
        "content": "<p>seems to work just fine thanks!</p>",
        "id": 423494754,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1708986396
    }
]