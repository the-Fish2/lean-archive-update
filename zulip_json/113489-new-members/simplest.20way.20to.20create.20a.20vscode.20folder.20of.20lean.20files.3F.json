[
    {
        "content": "<p>I'd like to create a folder of lean example files, which will eventually become a set of tutorial examples.</p>\n<p>The example code I previously downloaded, The Mechanics of Proof, has several other things <em>(html folder, lake-manifest.json, lakefle.lean, lean-toolchain, scripts folder, Library folder, etc etc</em>) which to me seem unnecessary for a minimal setup.</p>\n<p>The official guide inside VSCode talks about two options for setting up a Lean project folder - one for general programming, and one for doing maths with maths lib. Even this latter option creates a folder with several files (<em>.git folder, lake-manifest.json, makefile.lean, lean-toolchain...</em>).</p>\n<p><strong>My question is this: what is the absolute minimum structure for a folder of related simple example lean files?</strong></p>\n<p>I was hoping that using the .lean file extension and an <code>import Mathlib.Tactic</code> would be sufficient for VSCode to run the file. </p>\n<p>I have searched the web, but can't find an answer to my question.</p>\n<p>I am pretty sure i don't want \"Lake\" which seems to be something the automatically compiles executables.</p>\n<hr>\n<p><strong>Update</strong>: Minimal setup here also means that if someone takes a copy of the folder (eg from GitHub) they can run the files as intended.</p>\n<p><strong>Comment</strong>: I notice that entering code examples into <a href=\"http://live.lean-lang.org\">http://live.lean-lang.org</a> doesn't require me to set up manifests or json or other files. It just works.</p>",
        "id": 443535201,
        "sender_full_name": "rzeta0",
        "timestamp": 1717890782
    },
    {
        "content": "<p>If you just have a <code>&lt;name&gt;.lean</code> file you can still work with it in vscode as long as the machine has vscode and a compatible versin of Lean installed, so I guess that's the bare minimum.</p>\n<p>That being said, I don't think you actually want a \"minimal setup\". If you want other people to be able to use your work,  you want to include a <code>lean-toolchain</code> file to ensure that your users are using the right version of Lean to run your code. If you want mathlib, then you need a lakefile because you're now importing an external dependency; Lean needs to know what version of mathlib you want, and where to get it.</p>",
        "id": 443537237,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717892975
    },
    {
        "content": "<p>Thanks Chris - can I ask, of lean-toolchain tells vscode which version of lean to get, why can't it also tell which version of mathlib to get? </p>\n<p>To a beginner like me it seems overkill to have two files. A single dependencies.txt file (or other name) would seem simple enough. Is the reason historical?</p>",
        "id": 443539165,
        "sender_full_name": "rzeta0",
        "timestamp": 1717895059
    },
    {
        "content": "<p>also I'm guess the <a href=\"http://live.lean-lang.org\">live.lean-lang.org</a> just uses a standard set of dependencies eg latest lean and the most common libraries like mathlib ?</p>",
        "id": 443539201,
        "sender_full_name": "rzeta0",
        "timestamp": 1717895120
    },
    {
        "content": "<p>am i correct in assuming that:</p>\n<ul>\n<li>lean-toolchain is a file for vscode, telling it how to set up a lean runtime</li>\n<li>lake file is for lean,  telling lean how to import dependencies</li>\n</ul>",
        "id": 443541020,
        "sender_full_name": "rzeta0",
        "timestamp": 1717896949
    },
    {
        "content": "<p>lean-toolchain is for elan, which is Lean's version of nvm/pyenv/rustup/etc. the VSCode extension might use elan, i'm not sure.</p>",
        "id": 443541115,
        "sender_full_name": "llllvvuu",
        "timestamp": 1717897065
    },
    {
        "content": "<p>The lakefile is for <code>lake</code> which is Lean's package/build manager. It contains dependency information and also information about your own lean project.</p>\n<p>I think you're right that the live editor just does a bunch of magic behind the scenes, that's pretty common since the developers of those live environments only want to expose a safe-ish sandbox for people to use.</p>\n<p>I don't know the developers' actual reasons for using two files, aside from lake/elan being different tools. For vcs, ci, anything automated, it makes swapping out or updating the toolchain easier.</p>",
        "id": 443541581,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717897606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"724904\">@rzeta0</span> in the webeditor you can enter something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Webeditor</span>\n<span class=\"bp\">#</span><span class=\"n\">package_versions</span>\n</code></pre></div>\n<p>to see which packages and which versions are used. The instructions for that workaround are in the dropdown menu under \"Tools\". Also, in the preferences, you can select different projects to run, such as \"stable lean\", \"nightly lean\", or \"lean with mathlib\".</p>\n<p>Behind the scenes all these \"projects\" are basically folders of the same steucture as you would get from <code>lake new myProject lib</code>. And this should probably also be your \"minimal setup\" to distribute Lean tutorials in a compatible way.</p>\n<p>And to elaborate on the 2-3 files, I believe the main reason to have a separate toolchain file and a <code>lakefile.lean</code> is that the latter config file is actually parsed using Lean, and therefore the toolchain must be known prior. (New projects will have optionally a <code>lakefile.toml</code> instead, but still having the option to use such a powerful config file can be very useful)</p>",
        "id": 443893577,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718067975
    }
]