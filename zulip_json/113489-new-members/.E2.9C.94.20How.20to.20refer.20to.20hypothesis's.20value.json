[
    {
        "content": "<p>Suppose I've got something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">4</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">Prime</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I now want to say,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Even</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">Prime</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I would like to be able to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">h1</span> <span class=\"bp\">→</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but that's not valid because <code>h1</code> is the hypothesis <em>of type</em> <code>x &gt;= 4</code> and not the actual <em>expression</em> <code>x &gt;= 4</code>. Writing out the full <code>(x &gt;= 4) → (Even x → ¬(Prime x)) </code> works of course but the reason I want this is because h1 and h2 could be very long/complicated and have nasty implicit syntax that I'm worried I won't recreate faithfully. Is there a way to do this?</p>",
        "id": 426587232,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1710435729
    },
    {
        "content": "<p>Ooh I just realized this is just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">type_of</span><span class=\"bp\">%</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">type_of</span><span class=\"bp\">%</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>so I'm all good! :)</p>",
        "id": 426587635,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1710435834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> has marked this topic as resolved.</p>",
        "id": 426587647,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710435838
    }
]