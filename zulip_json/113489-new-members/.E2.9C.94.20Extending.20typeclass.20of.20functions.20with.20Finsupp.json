[
    {
        "content": "<p>I have a type <code>E(α)</code> of functions  <code>α → ℝ</code>, and I would like to consider the subset of finitely supported functions. <br>\nI assume I should extend my typeclass for <code>E(α)</code>, but I'm unsure how. That is what I have done so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The type of finitely supported Katetov maps from `α` -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">FinsuppKatetovMap</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">KatetovMap</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Finsupp</span> <span class=\"n\">α</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>where <code>KatetovMap</code> is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The type of Katetov maps from `α` -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">KatetovMap</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The function `α → ℝ` -/</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n  <span class=\"sd\">/-- Proposition that `toFun` is a Katetov map -/</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">IsKatetovtoFun</span> <span class=\"o\">:</span> <span class=\"n\">IsKatetov</span> <span class=\"n\">toFun</span>\n</code></pre></div>\n<p>and <code>IsKatetov</code> is a structure of <code>Prop</code> type with the requirements for a map to be Katetov. I think it's good so far but I'm unsure as to how to extend the class of katetov maps:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `KatetovMapClass F α` states that `F` is a type of Katetov maps. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">KatetovMapClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span>  <span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_katetov</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsKatetov</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>This feels wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `KatetovMapClass F α` states that `F` is a type of Katetov maps. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">FinsuppKatetovMapClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span>  <span class=\"n\">ℝ</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">KatetovMapClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Finsupp</span> <span class=\"n\">α</span> <span class=\"n\">ℝ</span>\n</code></pre></div>",
        "id": 425256314,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709802196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> has marked this topic as resolved.</p>",
        "id": 425256836,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709802366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> has marked this topic as unresolved.</p>",
        "id": 425258547,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709803048
    },
    {
        "content": "<p>I think what you're running into here is that we have no notion of <code>FinsuppClass</code> in mathlib</p>",
        "id": 425264933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709805060
    },
    {
        "content": "<p>Indeed. So how do I get out of it? Do I just add a field saying that the support is finite? And then maybe some coercions of some kind?</p>",
        "id": 425264986,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709805072
    },
    {
        "content": "<p>(this, by the way, is why there is no <code>FinsuppClass</code>!)</p>",
        "id": 425265250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709805154
    },
    {
        "content": "<p>Unless you plan to build something on top of <code>KatetovMap</code>, there's no real need to define <code>FinsuppKatetovMapClass</code> at all</p>",
        "id": 425265251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709805154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Extending.20typeclass.20of.20functions.20with.20Finsupp/near/425265251\">said</a>:</p>\n<blockquote>\n<p>Unless you plan to build something on top of <code>KatetovMap</code>, there's no real need to define <code>KatetovMapClass</code> at all</p>\n</blockquote>\n<p>I'm not sure what you mean by \"build something on top\".</p>",
        "id": 425265381,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709805196
    },
    {
        "content": "<p>In the sense that <code>RingHom</code> is built \"on top of\" <code>MonoidHom</code></p>",
        "id": 425265620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709805277
    },
    {
        "content": "<p>If you never expect to write <code>extends KatetovMap </code>, then the <code>KatetovMapClass</code> is not of any use</p>",
        "id": 425265702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709805302
    },
    {
        "content": "<p>Ok ok, but then wouldn't what I'm doing count as \"building on top\"?</p>",
        "id": 425265749,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709805315
    },
    {
        "content": "<p>You're building on top of <code>Finsupp</code>, which is perhaps a reason for <code>FinsuppClass</code> to exist; but no one else is doing so, which is why it doesn't exist <em>yet</em>.</p>",
        "id": 425265831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709805348
    },
    {
        "content": "<p>Ah sorry, I misread your code; edited above</p>",
        "id": 425266156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709805452
    },
    {
        "content": "<p><code>FinsuppKatetovMapClass</code> is the one you don't need to define</p>",
        "id": 425266185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709805462
    },
    {
        "content": "<p><code>KatetovMapClass</code> is indeed a good idea in your use-case</p>",
        "id": 425266210,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709805472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Extending.20typeclass.20of.20functions.20with.20Finsupp/near/425266185\">said</a>:</p>\n<blockquote>\n<p><code>FinsuppKatetovMapClass</code> is the one you don't need to define</p>\n</blockquote>\n<p>That makes sense. Well, less work for me. Thank you!</p>",
        "id": 425266336,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709805503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> has marked this topic as resolved.</p>",
        "id": 425266819,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709805666
    },
    {
        "content": "<p>If we did define a <code>FinsuppClass</code> in mathlib, it should probably work for <code>DFinsupp</code> too; though I suspect in practice it wouldn't be very useful.</p>",
        "id": 425267256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709805805
    }
]