[
    {
        "content": "<p>Are the two definitions presented below equivalent?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HasMultiplication</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"*\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HasMultiplication.mul</span>\n<span class=\"kd\">class</span> <span class=\"n\">Magma</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">HasMultiplication</span> <span class=\"n\">M</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Magma</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Magma</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HMul</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">hMul</span> <span class=\"o\">:=</span> <span class=\"n\">Magma.mul</span>\n</code></pre></div>\n<p>What is the more idiomatic definition in the context of Lean 4?</p>",
        "id": 422924981,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1708645971
    },
    {
        "content": "<p>The idiomatic thing to do is use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mul#doc\">docs#Mul</a></p>",
        "id": 422925297,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708646171
    },
    {
        "content": "<p>Or if you really want the word <code>Magma</code>, you can write <code>abbrev Magma := Mul</code>, but generally making new names for things is not idiomatic</p>",
        "id": 422925347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708646217
    },
    {
        "content": "<p>Ah, so instead of …</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Magma</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Magma</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">Magma.mul</span>\n<span class=\"kd\">class</span> <span class=\"n\">Semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Magma</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>… I should simply make it …</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The use of the word <code>Magma</code> would be for pedagogical reasons, but I might have to reconsider that.</p>\n<p>I assumed <code>abbrev</code> would create an alias, but with …</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Magma</span> <span class=\"o\">:=</span> <span class=\"n\">Mul</span>\n<span class=\"kd\">class</span> <span class=\"n\">Semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Magma</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>… I'm getting the error message \"'Magma' is not a structure\".</p>",
        "id": 422927188,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1708647311
    },
    {
        "content": "<p>Arguably this is a bug in <code>extends</code>; <code>abbrev</code> is supposed to be transparent, but I guess <code>extends</code> doesn't try looking through it</p>",
        "id": 422928457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708648182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"683979\">Isak Colboubrani</span> has marked this topic as resolved.</p>",
        "id": 423101310,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708725540
    }
]