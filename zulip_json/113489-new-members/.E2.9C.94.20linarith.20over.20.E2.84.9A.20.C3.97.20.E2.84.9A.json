[
    {
        "content": "<p>I want to prove a simple \"cancel terms\" kind of equality. With <code>linarith</code>, this is trivial over the rationals:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cancel_terms</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>However, I actually want to prove this over pairs of rationals.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cancel_terms</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">×</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"c1\">-- ???</span>\n</code></pre></div>\n<p>And <code>linarith</code> cannot be used over pairs of rationals because they do not implement <code>LinearOrder</code>. However, I don't care about inequality, only equality. Is there a weaker version of linarith that works for types like <code>ℚ × ℚ</code> and could solve this proof trivially? Or is there a way to lift the proof on <code>ℚ</code> onto <code>ℚ × ℚ</code>?</p>",
        "id": 429113693,
        "sender_full_name": "Will Crichton",
        "timestamp": 1711226516
    },
    {
        "content": "<p><code>ring</code>?</p>",
        "id": 429113758,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711226545
    },
    {
        "content": "<p>Tried that, did not work.</p>",
        "id": 429113770,
        "sender_full_name": "Will Crichton",
        "timestamp": 1711226560
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cancel_terms</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">×</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"n\">ring_nf</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 429114045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711226754
    },
    {
        "content": "<p>As does <code>intro h; linear_combination h - b</code></p>",
        "id": 429114108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711226793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> thank you! Follow up: I try to avoid <code>import Mathlib</code> to reduce fresh-start compile times. But it seems this particular <code>ring_nf</code> requires... something?... that's available in the environment due to the bulk import. Is there a way to figure out which fact, and just import the relevant module?</p>",
        "id": 429116902,
        "sender_full_name": "Will Crichton",
        "timestamp": 1711228883
    },
    {
        "content": "<p><code>#minimize_imports</code> will get you close to what you need, but it will often fail you for tactics. So here the answer is <code>Mathlib.Tactic.Ring</code></p>",
        "id": 429117029,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711228983
    },
    {
        "content": "<p>That doesn't seem to be the case. In this program, <code>ring_nf</code> fails to simplify the hypothesis:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cancel_terms</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">×</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"n\">ring_nf</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 429117125,
        "sender_full_name": "Will Crichton",
        "timestamp": 1711229056
    },
    {
        "content": "<p>Have you tried <code>#minimize_imports</code>?</p>",
        "id": 429117158,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711229090
    },
    {
        "content": "<p>Ok yes, that suggested <code>import Mathlib.Analysis.Normed.Field.Basic</code> which worked here. I'll try that in the future -- thanks!</p>",
        "id": 429117215,
        "sender_full_name": "Will Crichton",
        "timestamp": 1711229155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"625391\">Will Crichton</span> has marked this topic as resolved.</p>",
        "id": 429117218,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711229159
    },
    {
        "content": "<p>That feels like a very weird import to need there...</p>",
        "id": 429117301,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711229198
    },
    {
        "content": "<p>The actual import needed is <code>Algebra.Ring.Prod</code>, which contains the instance saying that the product of two rings is a ring.</p>",
        "id": 429125963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711236244
    },
    {
        "content": "<p>Oh, is this one of those cases where we get something like <a href=\"http://Ring.prod\">Ring.prod</a> Q Q get replaced by (<a href=\"http://NormedRing.prod\">NormedRing.prod</a> Q Q).toRing? It would be nice if we could reduce the appearance of those sorts of thing in the library</p>",
        "id": 429225896,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1711298586
    },
    {
        "content": "<p>Maybe instances for very specific types like Prod should have higher priority</p>",
        "id": 429225900,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1711298597
    },
    {
        "content": "<p>There's an open Lean4 issue about fixing the priorities of instances like .toRing</p>",
        "id": 429225980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711298653
    }
]