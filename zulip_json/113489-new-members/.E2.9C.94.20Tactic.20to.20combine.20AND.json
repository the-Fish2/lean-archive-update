[
    {
        "content": "<p>Is there a tactic that combines two hypotheses <code>ha</code> <code>hb</code> into <code>ha \\and hb</code>? (I swear there is)</p>",
        "id": 424990771,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709690101
    },
    {
        "content": "<p>You can construct a term directly with <code>And.intro ha hb</code></p>",
        "id": 424991306,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1709690468
    },
    {
        "content": "<p>Ahh I thought there's a tactic, maybe my memory is wrong</p>",
        "id": 424991340,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709690505
    },
    {
        "content": "<p>If you don't mind, can you also answer this: Is there an option to make <code>¬(P ∧ Q)</code> default to simplify into <code>¬P ∨ ¬Q</code>? I swear there's option for that but idk if I'm misremembering</p>",
        "id": 424991429,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709690549
    },
    {
        "content": "<p><code>push_neg</code>?</p>",
        "id": 424991445,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1709690568
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/PushNeg.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/PushNeg.html</a></p>",
        "id": 424991482,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1709690608
    },
    {
        "content": "<p>It pushes into <code>P → ¬Q</code> (same for <code>contrapose</code>, <code>simp</code> etc)</p>",
        "id": 424991565,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709690650
    },
    {
        "content": "<p>That's what I mean for \"is there an option\"</p>",
        "id": 424991574,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709690660
    },
    {
        "content": "<p>I think it's because the simplification requires exclusion of middle i.e. AoC<br>\nbut I don't care here</p>",
        "id": 424991616,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709690698
    },
    {
        "content": "<p>Ahha, <code>set_option push_neg.use_distrib true</code></p>",
        "id": 424991697,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709690758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> has marked this topic as resolved.</p>",
        "id": 424991713,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709690762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Tactic.20to.20combine.20AND/near/424991616\">said</a>:</p>\n<blockquote>\n<p>I think it's because the simplification requires exclusion of middle i.e. AoC<br>\nbut I don't care here</p>\n</blockquote>\n<p>It's not because of that. It's to make it so that <code>push_neg</code> of <code>¬ ∃ x ∈ s, p</code> becomes <code>∀ x ∈ s, ¬ p</code>.</p>",
        "id": 424995239,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709693194
    },
    {
        "content": "<p><del>Ahha interesting, thanks for the clarification!</del></p>",
        "id": 424995313,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709693235
    },
    {
        "content": "<p>Kyle, I don’t understand your comment. This option has nothing to do with quantifiers.</p>",
        "id": 424995587,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709693413
    },
    {
        "content": "<p>The reason why the default option is this is that disjunctions of negations are not convenient to use compared to a sequence of two implications (the visible one and the one hidden in the definition of negation).</p>",
        "id": 424995746,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709693511
    },
    {
        "content": "<p>Thanks both for the insight anyways, they're both useful observations(?) in practice :)</p>",
        "id": 424996200,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709693744
    },
    {
        "content": "<p>Maybe it has multiple reasons for being the default, but this interaction with how binders are encoded would be especially inconvenient:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">push_neg.use_distrib</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"c1\">-- ∀ (x : ℕ), x ∉ s ∨ ¬p x</span>\n</code></pre></div>",
        "id": 424996621,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709694004
    },
    {
        "content": "<p>Oh, I totally missed the fact that you had a bounded quantifier! It is indeed relevant then.</p>",
        "id": 425106542,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709737127
    }
]