[
    {
        "content": "<p>If I have a function of type similar to <code>Π x &lt; b, α</code>, how can I easily state that an element is in its range?</p>\n<p>For example I want <code>H</code> to be the assumption that there is some <code>i &lt; 7</code> that is sent to <code>0</code>, and the ways I found are silly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">-- stupid</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">Π</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">trivial</span>\n\n<span class=\"c1\">-- stupider</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">Π</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Nonempty</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">×'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 444896819,
        "sender_full_name": "Nir Paz",
        "timestamp": 1718477724
    },
    {
        "content": "<p><code>∃ i &lt; 7, ((h : i &lt; 7) → f i h = 0)</code> isn't stated right, since the implication makes it be trivially true (use <code>i = 7</code> for example).</p>\n<p>You can write <code>(H : ∃ (i : ℕ) (h : i &lt; 7), f i h = 0)</code> for a \"dependent conjunction\". If you don't want the type ascription, you can also write <code>∃ i, ∃ (h : i &lt; 7), f i h = 0</code> by splitting the existential.</p>",
        "id": 444898102,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718478529
    },
    {
        "content": "<p>I think the summary is that the existential is how you write <code>Nonempty (... ×' ...)</code></p>",
        "id": 444898249,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718478613
    },
    {
        "content": "<p>Just found the theorem I was proving in mathlib and they use <code>∃ i h, f i h = 0</code>, thanks!</p>",
        "id": 444898392,
        "sender_full_name": "Nir Paz",
        "timestamp": 1718478699
    }
]