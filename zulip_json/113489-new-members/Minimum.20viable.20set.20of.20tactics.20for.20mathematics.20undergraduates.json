[
    {
        "content": "<p>For educational objectives, I aim to identify a \"minimal viable set\" of Lean and Mathlib tactics designed specifically for undergraduate mathematics students. This set is intended to strike a balance between being straightforward to avoid overwhelming learners, and being comprehensive enough to enable them to prove a broad spectrum of theorems encountered in undergraduate mathematics.</p>\n<p>From an initial review of tactics covered across the following books I observe the following counts of unique tactics:</p>\n<ul>\n<li>Formalizing Mathematics (\"FM\"), covers 47 tactics</li>\n<li>Mathematics in Lean (\"MIL\"), covers 67 tactics</li>\n<li>The Hitchhiker’s Guide to Logical Verification (\"HGLV\"), covers 31 tactics</li>\n</ul>\n<p>In other words:</p>\n<p>|FM| = 47, |MIL| = 67, |HGLV| = 31</p>\n<p>Combining these resources yields a total of 90 unique tactics, with an intersection of 13 tactics common across all texts:</p>\n<p>|FM ∪ MIL ∪ HGLV| = 90<br>\n|FM ∩ MIL ∩ HGLV| = 13</p>\n<p>Further analysis reveals intersections between pairs of texts:</p>\n<p>|FM ∩ MIL| = 36<br>\n|FM ∩ HGLV| = 13<br>\n|MIL ∩ HGLV| = 19</p>\n<p>Given these insights, the 13 tactics covered by all sources form a foundational \"minimal set\":</p>\n<ul>\n<li><code>apply</code></li>\n<li><code>assumption</code></li>\n<li><code>cases</code></li>\n<li><code>exact</code></li>\n<li><code>have</code></li>\n<li><code>induction</code></li>\n<li><code>intro</code></li>\n<li><code>linarith</code></li>\n<li><code>rfl</code></li>\n<li><code>ring</code></li>\n<li><code>rw</code></li>\n<li><code>show</code></li>\n<li><code>simp</code></li>\n</ul>\n<p>This selection poses two key questions for further refinement:</p>\n<ol>\n<li>Are there any \"must have\" tactics not included in this foundational set, considering the target audience of undergraduate mathematics students?</li>\n<li>To optimize the balance between expressivity and simplicity, could any of these tactics be substituted with a more potent alternative that enhances expressivity without increasing the overall count of tactics?</li>\n</ol>",
        "id": 419733946,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1707083088
    },
    {
        "content": "<p><code>aesop, refine, by_cases</code> are missing and I think belong to your list!</p>",
        "id": 419734306,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707083401
    },
    {
        "content": "<p><code>by_contra</code> is also something that corresponds directly to something that most students usually want to use.  And <code>constructor</code> is very useful as well.</p>",
        "id": 419734542,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707083586
    },
    {
        "content": "<p>I personally also use <code>rcases/obtain</code> a lot and find <code>convert</code> often essential, especially for debugging or for quick-and-dirty proofs.</p>",
        "id": 419734796,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707083776
    },
    {
        "content": "<p>Thanks!</p>\n<p>This is the \"mention matrix\" for the suggested tactics:</p>\n<table>\n<thead>\n<tr>\n<th>Tactic</th>\n<th>FM</th>\n<th>MIL</th>\n<th>HGLV</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>aesop</code></td>\n<td>✖</td>\n<td>✖</td>\n<td><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n</tr>\n<tr>\n<td><code>by_cases</code></td>\n<td> <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td>✖</td>\n</tr>\n<tr>\n<td><code>by_contra</code></td>\n<td> <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td>✖</td>\n</tr>\n<tr>\n<td><code>constructor</code></td>\n<td> <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td>✖</td>\n</tr>\n<tr>\n<td><code>convert</code></td>\n<td> <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td>✖</td>\n</tr>\n<tr>\n<td><code>obtain</code></td>\n<td> <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td>✖</td>\n</tr>\n<tr>\n<td><code>rcases</code></td>\n<td> <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td>✖</td>\n</tr>\n<tr>\n<td><code>refine</code>/<code>refine'</code></td>\n<td> <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td>✖</td>\n</tr>\n</tbody>\n</table>\n<p>Key:</p>\n<ul>\n<li>FM: Formalizing Mathematics</li>\n<li>MIL: Mathematics in Lean</li>\n<li>HGLV: The Hitchhiker’s Guide to Logical Verification</li>\n</ul>",
        "id": 419735686,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1707084483
    },
    {
        "content": "<p>The question is not specific enough. What kind of course do you want to run? Do you want to teach Lean or use Lean for teaching? What kind of mathematics do you want?</p>",
        "id": 419738689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707087017
    },
    {
        "content": "<p>Looking at the tactics covered in the tutorial project is probably a better approximation.</p>",
        "id": 419738703,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707087040
    },
    {
        "content": "<p>For teaching, I don't see why you would want to exclude <code>push_neg</code>, <code>contrapose</code> and <code>gcongr</code>.</p>",
        "id": 419836841,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707138948
    },
    {
        "content": "<p>The list of tactics which I wrote my own documentation for, for the students in my class, is <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2024/Part_C/Part_C.html\">here</a>. I should update it to include the tactics Jireh mentions; my main concern was getting documentation down which was more readable for mathematicians than the documentation supplied by Lean/mathlib.</p>",
        "id": 419839700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707139844
    },
    {
        "content": "<p>Remember <code>push_neg</code> and <code>contrapose</code> were written as part of my teaching and later PRed to Mathlib.</p>",
        "id": 419876327,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707149656
    },
    {
        "content": "<p>The case of <code>gcongr</code> is a bit different. Depending on your goals you could argue it is too powerful. That's why <code>rel</code> also exists. Heather explicitly wrote it as a dumb version of <code>gcongr</code> intended for teaching very young students.</p>",
        "id": 419876559,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707149719
    },
    {
        "content": "<p>If you want some very anecdotal evidence, this is a tally of the tactics used in a random file from one of the projects that my students submitted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"mi\">1</span> <span class=\"n\">cases'</span>\n      <span class=\"mi\">1</span> <span class=\"n\">constructor</span>\n      <span class=\"mi\">1</span> <span class=\"k\">let</span>\n      <span class=\"mi\">1</span> <span class=\"n\">nth_rw</span>\n      <span class=\"mi\">1</span> <span class=\"n\">simp_rw</span>\n      <span class=\"mi\">2</span> <span class=\"n\">choose</span>\n      <span class=\"mi\">2</span> <span class=\"n\">induction'</span>\n      <span class=\"mi\">2</span> <span class=\"n\">simp_all</span>\n      <span class=\"mi\">5</span> <span class=\"n\">specialize</span>\n      <span class=\"mi\">6</span> <span class=\"n\">unfold</span>\n     <span class=\"mi\">11</span> <span class=\"n\">intro</span>\n     <span class=\"mi\">12</span> <span class=\"n\">aesop</span>\n     <span class=\"mi\">13</span> <span class=\"n\">apply</span>\n     <span class=\"mi\">18</span> <span class=\"n\">simp</span>\n     <span class=\"mi\">49</span> <span class=\"n\">rw</span>\n     <span class=\"mi\">61</span> <span class=\"n\">exact</span>\n     <span class=\"mi\">90</span> <span class=\"k\">have</span>\n</code></pre></div>",
        "id": 419884985,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707151833
    },
    {
        "content": "<p>I use <code>norm_num</code> and <code>decide</code> a lot for stuff like (0 &lt; 3) in Real. Maybe <code>omega</code> is worth mentioning too.</p>\n<p>For specific domains, <code>measurability</code>, <code>continuity</code>, <code>positivity</code>, will probably be used a lot. Maybe with <code>fun_prop</code> merged some of the practice here will change (<code>aesop</code>-based versions seem to timeout a lot)</p>\n<p>My noob cheese strategy is to spam <code>have</code>/<code>suffices</code> steps with <code>exact?</code>/<code>apply?</code>/<code>simp?</code>/<code>simp_all?</code>/<code>aesop?</code>/<code>rw?</code> and then go back and refactor/golf later.</p>",
        "id": 420494690,
        "sender_full_name": "llllvvuu",
        "timestamp": 1707409612
    },
    {
        "content": "<p>I use <code>cases'</code> instead of <code>cases</code> (probably because a bias coming from Lean3). </p>\n<p>I also use <code>suffices</code>, although you might probably get the same kind of functionality with <code>have</code>). And also <code>calc</code> can be very useful in some fields (but the user experience could be better, since you have to setup the skeleton with the steps first).</p>\n<p>And definitely, <code>use</code> is a must if you want to prove existential statements.</p>\n<p>In many proofs by <code>induction</code> I need to <code>revert</code> something first, to make sure that I have some hypothesis available adapted to the induction step.</p>\n<p>And to prove disjunctions, <code>left</code> and <code>right</code>  are a must for me.</p>",
        "id": 420500431,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1707411235
    },
    {
        "content": "<p>If you use <code>revert</code> with <code>induction</code>, you might find <code>induction generalizing</code> even more convenient</p>",
        "id": 420509678,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707414172
    }
]