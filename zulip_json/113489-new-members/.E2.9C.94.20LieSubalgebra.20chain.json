[
    {
        "content": "<p>I have  <code>A : LieSubalgebra k g</code> where g itself is <code>g : LieSubalgebra k (Module.End V)</code> and would like to create an instance of A seen as a <code>LieSubalgebra k (Module.End V)</code>. I can't seem to find the proper coersion to do this in the documentation. Does it exist or am I doing something wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Lie.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">LieAlgebra</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">LieSubalgebra</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">Module.End</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">LieSubalgebra</span> <span class=\"n\">k</span> <span class=\"n\">g</span><span class=\"o\">):</span> <span class=\"n\">LieSubalgebra</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">Module.End</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 419711906,
        "sender_full_name": "Lucas Whitfield",
        "timestamp": 1707065210
    },
    {
        "content": "<p>You could apply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LieSubalgebra.map#doc\">docs#LieSubalgebra.map</a> to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LieSubalgebra.incl#doc\">docs#LieSubalgebra.incl</a>.<br>\n(The latter is called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subalgebra.val#doc\">docs#Subalgebra.val</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subring.subtype#doc\">docs#Subring.subtype</a> for other substructures; I think val is the most common name and we should use it everywhere.)</p>",
        "id": 419714517,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707067142
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 419715682,
        "sender_full_name": "Lucas Whitfield",
        "timestamp": 1707068011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"685134\">Lucas Whitfield</span> has marked this topic as resolved.</p>",
        "id": 419715683,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707068015
    }
]