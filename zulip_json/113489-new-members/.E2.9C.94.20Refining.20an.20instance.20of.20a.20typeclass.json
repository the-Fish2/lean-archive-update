[
    {
        "content": "<p>Hi. I'm trying to make sense of type classes, but I'm struggling with the way <code>inferInstance</code> works.</p>\n<p>Let's say I have :</p>\n<ul>\n<li>a type <code>Object</code></li>\n<li>a property of certain <code>Object</code>s that i call \"being a filter\"</li>\n<li>a type class <code>Filter</code> on <code>Object</code> s whose only attribute is a proof of being a filter</li>\n<li>an object <code>filter_example</code> that I declared as being an instance by providing a proof</li>\n<li>a function <code>refine: Nat → Object → Object</code></li>\n<li>and a proof that for all <code>n: Nat</code> and <code>obj: Object</code> such that <code>obj</code> is a filter, <code>refine n obj</code> is a filter (<code>theorem refined_filter_isfilter</code>, say)</li>\n</ul>\n<p>How do I make lean accept any <code>refine N fil</code> (where <code>N</code> is a <code>Nat</code> and <code>fil</code> is an instance of <code>Filter</code>) as an instance of <code>Filter</code>? So that <code>refine Nat.zero filter_example</code>, for instance, is automatically recognized as a filter?</p>\n<p>I tried something like this:</p>\n<p><code>instance (N : Nat) (fil: Nat → Nat) [Filter fil] : Filter (refine N fil) := ⟨refined_filter_is_filter N fil⟩</code></p>\n<p>but lean doesn't seem to follow.</p>\n<p>Here is a MWE where I removed all the particular gory details (there's no <code>sorry</code> in the original file):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_filter</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">filter_example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">is_filter</span> <span class=\"n\">filter_example</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Filter</span> <span class=\"o\">(</span><span class=\"n\">filter</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">filter_proof</span><span class=\"o\">:</span> <span class=\"n\">is_filter</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"o\">(</span><span class=\"n\">filter_example</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fil</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">refined_filter_is_filter</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fil</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">fil</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_filter</span> <span class=\"o\">(</span><span class=\"n\">refine</span> <span class=\"n\">N</span> <span class=\"n\">fil</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fil</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Filter</span> <span class=\"n\">fil</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"o\">(</span><span class=\"n\">refine</span> <span class=\"n\">N</span> <span class=\"n\">fil</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">refined_filter_is_filter</span> <span class=\"n\">N</span> <span class=\"n\">fil</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">refined_filter_example</span> <span class=\"o\">:=</span> <span class=\"n\">refine</span> <span class=\"n\">Nat.zero</span> <span class=\"n\">filter_example</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">is_filter</span> <span class=\"n\">refined_filter_example</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">refined_filter_is_filter</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">refined_filter_example</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p><code>test1</code> works as intended, lean finds out that <code>filter_example</code> is a <code>Filter</code> instance, and applies <code>refined_filter_is_filter</code> correctly.</p>\n<p><code>test2</code> doesn't work though; lean 4 tells me that it <code>failed to synthesize instance\n  Filter refined_filter_example</code>, despite having been given the hint that any <code>refine N fil</code> where <code>fil</code> is a filter, is a filter.</p>\n<p>Can someone help me making this work?</p>\n<p>Edit: I tried using implicit arguments like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fil</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Filter</span> <span class=\"n\">fil</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"o\">(</span><span class=\"n\">refine</span> <span class=\"n\">N</span> <span class=\"n\">fil</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">refined_filter_is_filter</span> <span class=\"n\">N</span> <span class=\"n\">fil</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>but it doesn't work either.</p>\n<p>Edit 2. Neither does the following code, where I tried to remove the implicit reference to <code>Filter fil</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fil</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">fil</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"o\">(</span><span class=\"n\">refine</span> <span class=\"n\">N</span> <span class=\"n\">fil</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">@</span><span class=\"n\">refined_filter_is_filter</span> <span class=\"n\">N</span> <span class=\"n\">fil</span> <span class=\"n\">inst</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 418269099,
        "sender_full_name": "LB",
        "timestamp": 1706273416
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">refined_filter_example</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- unfold the definition</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">refined_filter_example</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ⊢ Filter (refine Nat.zero filter_example)</span>\n  <span class=\"c1\">-- now it works</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 418300069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706283583
    },
    {
        "content": "<p>If you want typeclass inference to see through your definition, make it an <code>abbrev</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">refined_filter_example</span> <span class=\"o\">:=</span> <span class=\"n\">refine</span> <span class=\"n\">Nat.zero</span> <span class=\"n\">filter_example</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">is_filter</span> <span class=\"n\">refined_filter_example</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">refined_filter_is_filter</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">refined_filter_example</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>Finally, note that because of a bug in Lean, the type of <code>Filter</code> is <code>Type</code> not <code>Prop</code>, so you shouldn't be using <code>theorem</code> to make terms of type <code>Filter</code>. You have to explicitly tell Lean it's wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Filter</span> <span class=\"o\">(</span><span class=\"n\">filter</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">filter_proof</span><span class=\"o\">:</span> <span class=\"n\">is_filter</span> <span class=\"n\">filter</span>\n</code></pre></div>",
        "id": 418300668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706283750
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=inferInstanceAs#doc\">docs#inferInstanceAs</a> if you're just needing to unfold definition, and you're ok with stating the unfolded form. It would look like <code>inferInstanceAs (Filter (refine Nat.zero filter_example))</code>. You can likely write it as <code>inferInstanceAs (Filter (refine _ _))</code></p>",
        "id": 418300721,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706283767
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> .</p>\n<p>I changed the class definition according to Kevin's warning.</p>\n<p>Your comments (and reading the doc for <code>inferInstanceAs</code>) made it quite clear that the problem comes from the instance mechanism not unfolding definitions in general.</p>\n<p>Kind of underwhelming, actually, because I wanted to add multiple layers of (different) \"refiners\" and expose the resulting filters to the outside. I'll stick to <code>abbrev</code>s for now, and see if it works out. Not sure though about <code>abbrev</code>s of <code>abbrev</code>s.</p>",
        "id": 418312384,
        "sender_full_name": "LB",
        "timestamp": 1706287375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"358432\">LB</span> has marked this topic as resolved.</p>",
        "id": 418313333,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706287684
    }
]