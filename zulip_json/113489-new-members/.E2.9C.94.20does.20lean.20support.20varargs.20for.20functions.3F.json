[
    {
        "content": "<p>Like how in java we have :</p>\n<div class=\"codehilite\" data-code-language=\"Java\"><pre><span></span><code><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">someFunc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"n\">numbers</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>is there an equivalent to that in lean where i can have something like :</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\">  </span><span class=\"n\">someFunc</span><span class=\"o\">(</span><span class=\"n\">lst</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"c1\">-- code here</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">someFunc</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"c1\">-- valid</span>\n</code></pre></div>",
        "id": 446117293,
        "sender_full_name": "Jafar Tanoukhi",
        "timestamp": 1718986821
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.OfArity#doc\">docs#Function.OfArity</a></p>",
        "id": 446117636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718986900
    },
    {
        "content": "<p>The easiest would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">someFunc</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">lst</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"c1\">-- code here</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">someFunc</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">],</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">],</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">],</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]]</span>\n</code></pre></div>\n<p>The syntax for lists in Lean is a lot less onerous than the syntax in Java.</p>",
        "id": 446128894,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718989851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"710010\">Jafar Tanoukhi</span> has marked this topic as resolved.</p>",
        "id": 446147862,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718995739
    }
]