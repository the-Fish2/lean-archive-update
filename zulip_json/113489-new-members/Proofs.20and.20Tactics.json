[
    {
        "content": "<p>By now i have been proving all my assumptions with \"by decide/simp/trivial\", but those cannot prove the following (while being seemingly trivial):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">proof</span><span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">l.concat</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The theorem proving book seems a little scary to me, maybe someone can give me a pointer where to start :)</p>",
        "id": 421474933,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1707925708
    },
    {
        "content": "<p>Do you have an informal idea about how to prove this? Sometimes it can help to sketch out a proof in words and then see how you can translate that into Lean</p>",
        "id": 421484453,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707928288
    },
    {
        "content": "<p>(l.concat x) should return a list of length l.length +1 for any x and any l.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `l.concat a` appends `a` at the *end* of `l`, that is, `l ++ [a]`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">List.concat</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">,</span>       <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">as</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>i can see that concat always appends (cons b nil) to the end of the list, but struggle to formulate this as a proof</p>",
        "id": 421486127,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1707928793
    },
    {
        "content": "<p>Rule of thumb: if you need to reason about a recursive definition, you usually need <code>induction</code></p>\n<p>(In this case, you can also look into the library for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.length_concat#doc\">docs#List.length_concat</a>, which I guessed the name of using the naming convention. If you click \"source\" you can see it's proved by <code>induction</code>.)</p>",
        "id": 421487712,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707929262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> has marked this topic as resolved.</p>",
        "id": 421488639,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707929545
    },
    {
        "content": "<p>thanks, i didnt know that that could be something to search for in the std library, and the source is helpful</p>",
        "id": 421489097,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1707929675
    },
    {
        "content": "<p>Another thing you can do is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">proof</span><span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">l.concat</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>and see which lemmas it needed. (With everything imported, <code>simp</code> succeeds in closing the goal.)</p>",
        "id": 421489620,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707929834
    }
]