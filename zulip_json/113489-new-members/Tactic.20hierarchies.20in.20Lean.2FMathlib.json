[
    {
        "content": "<p>For educational purposes, I am exploring the relationships between various tactics in Lean/Mathlib, particularly looking at situations where certain tactics can be considered as encompassing the functionalities of others. This involves identifying scenarios where one tactic may act as a \"superset\" in terms of its capabilities relative to another tactic.</p>\n<p>A trivial yet possibly far-fetched example to illustrate this point (assuming my understanding of these tactics is correct):</p>\n<p>If a single remaining goal can be successfully <em>closed</em> by employing any tactic from the following list, then it's guaranteed that all tactics listed above it can also close the goal:</p>\n<ul>\n<li><code>aesop</code> (Mathlib)</li>\n<li>…</li>\n<li><code>simp_all</code> (Lean)</li>\n<li>…</li>\n<li><code>simp</code> (Lean)</li>\n<li>…</li>\n<li><code>rfl</code> (Lean)</li>\n</ul>\n<p>Put differently, if a comprehensive tactic like <code>aesop</code>, considered the most encompassing in this hierarchy, fails to resolve a single remaining goal, it's unnecessary to attempt using the tactics that rank lower in this list (to close the goal in one go). (This is based on the understanding that <code>aesop</code> incorporates strategies equivalent to <code>simp_all</code>, among other more sophisticated methods of course.)</p>\n<p>Is this correct?</p>\n<p>Are there other similar tactic hierarchies?</p>",
        "id": 418925388,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1706651056
    },
    {
        "content": "<p>Interesting initiative. Another tactic hierarchy I might think of for this would involve <code>apply</code>/<code>convert</code> and maybe some other tactics, though those tactics take arguments.</p>",
        "id": 418938320,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1706656878
    },
    {
        "content": "<p>A small correction: <code>simp</code> does not \"imply\" <code>rfl</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myZero</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">myZero</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">myZero</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 418941299,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706658494
    },
    {
        "content": "<p>In fact, you can also trick <code>simp_all</code> into not working, when <code>simp</code> does work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.GroupWithZero.Basic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ohNo</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_eq_mul_left_iff</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">or_false</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_all</span>  <span class=\"c1\">-- times out, while `simp` works.</span>\n</code></pre></div>\n<p>Although this seems a little contrived and <code>#lint</code> complains that <code>ohNo</code> is not great as a <code>simp</code> lemma!</p>",
        "id": 418950979,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706664415
    },
    {
        "content": "<p>Thanks!</p>\n<p>It might be more accurate to represent the relationships between these tactics using a tree structure, where each parent node represents a tactic that is more comprehensive or powerful (in the sense outlined above) than its child nodes (descendants).</p>\n<p>In this structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">aesop</span>\n  <span class=\"bp\">├─</span> <span class=\"n\">simp_all</span>\n  <span class=\"bp\">├─</span> <span class=\"n\">trivial</span>\n     <span class=\"bp\">├─</span> <span class=\"n\">apply</span> <span class=\"n\">True.intro</span>\n     <span class=\"bp\">├─</span> <span class=\"n\">apply</span> <span class=\"n\">And.intro</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">trivial</span>\n     <span class=\"bp\">├─</span> <span class=\"n\">assumption</span>\n     <span class=\"bp\">├─</span> <span class=\"n\">contradiction</span>\n     <span class=\"bp\">├─</span> <span class=\"n\">decide</span>\n     <span class=\"bp\">├─</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">├─</span> <span class=\"n\">eq_refl</span>\n     <span class=\"bp\">├─</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Is this representation more accurate, or are there counterexamples that challenge it?</p>",
        "id": 418989441,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1706689964
    },
    {
        "content": "<p>Again, there are some cases that <code>aesop</code> can't do which <code>rfl</code> can</p>",
        "id": 418991477,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706690896
    },
    {
        "content": "<p>While I agree that for pedagogical purposes this is a good place to start, in any \"real-word\" situation, unless a tactic is essentially defined as \"try one tactic first and then do something else\" it is almost never true that one tactic is strictly more powerful than another.</p>",
        "id": 418992371,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706691292
    },
    {
        "content": "<p>I am always a bit surprised when <code>rfl</code> closes a goal that <code>simp</code> cannot.</p>",
        "id": 419025976,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706703006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Tactic.20hierarchies.20in.20Lean.2FMathlib/near/418991477\">said</a>:</p>\n<blockquote>\n<p>Again, there are some cases that <code>aesop</code> can't do which <code>rfl</code> can</p>\n</blockquote>\n<p>This is quite unexpected to me (possibly due to my novice status in this field!). Would anyone be able to illustrate such a case, especially one a student might realistically encounter?\"</p>",
        "id": 419122747,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1706734958
    },
    {
        "content": "<p>Here is a simple example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">irreducible</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>  <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>  <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 419123561,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706735296
    },
    {
        "content": "<p>Here is a small tour over the transparencies:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">noSimp</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">noSimp</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">noSimp</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">noSimp</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">irreducible</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">onlyRfl</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">onlyRfl</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">onlyRfl</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">onlyRfl</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">allWork</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">allWork</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">allWork</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">allWork</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 419124465,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706735753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Thank you! Your examples have been enlightening, and they've guided me towards further reading.</p>\n<p>Based on what I've learned today, here's my revised representation of the \"tactic hierarchy\" introduced above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">aesop</span>\n  <span class=\"bp\">├─</span> <span class=\"n\">trivial</span>\n     <span class=\"bp\">├─</span> <span class=\"n\">apply</span> <span class=\"n\">True.intro</span>\n     <span class=\"bp\">├─</span> <span class=\"n\">apply</span> <span class=\"n\">And.intro</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">trivial</span>\n     <span class=\"bp\">├─</span> <span class=\"n\">assumption</span>\n     <span class=\"bp\">├─</span> <span class=\"n\">contradiction</span>\n     <span class=\"bp\">├─</span> <span class=\"n\">decide</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">simp_all</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"bp\">├─</span> <span class=\"n\">eq_refl</span>\n</code></pre></div>\n<p>Is this structure accurate, or are there still counterexamples that could potentially challenge this arrangement?</p>",
        "id": 419126526,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1706736646
    },
    {
        "content": "<p>I do not think that <code>aesop</code> uses <code>decide</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">Nat.divisors</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">--aesop -- fails to close goal</span>\n  <span class=\"n\">decide</span>  <span class=\"c1\">-- works, as does `trivial`</span>\n</code></pre></div>",
        "id": 419127469,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706737002
    },
    {
        "content": "<p>Maybe I can say here something that I tell my students.</p>\n<p>Having a rough mental picture of a partial ordering of the tactics is certainly very useful and also close to how my intuition works.  However, \"proving theorems\" is undecidable, so no algorithm can consistently close all goals.  And in particular, no algorithm can do everything that all algorithms can do.  So, pushing too far this partial order is not too useful and I would even say it is undesirable: having many <em>different</em> algorithms, means having more theorems they will prove collectively!</p>\n<p>So, having tactics that do not supersede each other is a goal to try to achieve, in my opinion!</p>",
        "id": 419128231,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706737348
    },
    {
        "content": "<p>Here is another example showing that you can \"trick\" even the tactics that are defined in terms of each other from really being \"stronger\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">160</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"mi\">161</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">160</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"mi\">161</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">--trivial -- max recursion</span>\n  <span class=\"c1\">--decide  -- max recursion</span>\n  <span class=\"n\">assumption</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 419138343,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706741646
    },
    {
        "content": "<p>In fact, in this last example, if you reduce the imports to just <code>import Mathlib.Data.Nat.Basic</code>, then <code>trivial</code> works!</p>\n<p>I'll leave you to figure out why this is the case!  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 419139076,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706742003
    },
    {
        "content": "<p>I think it's much better to emphasize what kinds of goals each tactic can close</p>",
        "id": 419140681,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706742733
    }
]