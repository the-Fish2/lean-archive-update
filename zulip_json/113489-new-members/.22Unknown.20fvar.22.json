[
    {
        "content": "<p>What does it mean when I get the error, \"unknown free variable '_fvar.1286'\"?</p>",
        "id": 439274650,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1715971164
    },
    {
        "content": "<p>It means there's a buggy tactic that is forgetting to properly set the local context state.</p>",
        "id": 439274772,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715971207
    },
    {
        "content": "<p>Depends where you get it, but yes that means a tactic is playing loose</p>",
        "id": 439274811,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715971227
    },
    {
        "content": "<p>Often it's a bug along the lines of this: <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Metaprogramming-gotchas#forgetting-to-wrap-the-tactic-in-withmaincontext\">https://github.com/leanprover-community/mathlib4/wiki/Metaprogramming-gotchas#forgetting-to-wrap-the-tactic-in-withmaincontext</a></p>",
        "id": 439274885,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715971267
    },
    {
        "content": "<p>That's concerning because the only tactics I'm using are <code>clear</code> and <code>exact</code> <span aria-label=\"cold sweat\" class=\"emoji emoji-1f630\" role=\"img\" title=\"cold sweat\">:cold_sweat:</span></p>",
        "id": 439274957,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1715971310
    },
    {
        "content": "<p>Could you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 439275033,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715971332
    },
    {
        "content": "<p>On one hand it's concerning, but on the other it should be easy to fix.</p>",
        "id": 439275087,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715971357
    },
    {
        "content": "<p>Yeah. Gimme a bit</p>",
        "id": 439275110,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1715971371
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Mappish</span> <span class=\"o\">(</span><span class=\"n\">dIn</span> <span class=\"n\">dOut</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">dIn</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">dOut</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">dIn</span> <span class=\"n\">dOut</span> <span class=\"n\">dOut₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">dIn</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">dOut</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">dOut₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsGood</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">dOut</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">dOut₂</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"n\">Mappish</span> <span class=\"n\">dIn</span> <span class=\"n\">dOut</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Λ₂</span> <span class=\"o\">:</span> <span class=\"n\">Mappish</span> <span class=\"n\">dIn</span> <span class=\"n\">dOut₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Mappish</span> <span class=\"n\">dOut</span> <span class=\"o\">(</span><span class=\"n\">dOut₂</span><span class=\"o\">)),</span> <span class=\"n\">D.k</span> <span class=\"bp\">=</span> <span class=\"bp\">Λ.</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"bp\">Λ₂.</span><span class=\"n\">k</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MappishOrder</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">dIn</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span>\n    <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">dOut</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"n\">Fintype</span> <span class=\"n\">t</span> <span class=\"bp\">×</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"k\">let</span> <span class=\"n\">fin</span> <span class=\"o\">:=</span> <span class=\"n\">dOut.snd.1</span><span class=\"bp\">;</span> <span class=\"n\">Mappish</span> <span class=\"n\">dIn</span> <span class=\"n\">dOut.fst</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"bp\">Λ₁</span> <span class=\"bp\">Λ₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"bp\">Λ₁.</span><span class=\"n\">fst.fst</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"bp\">Λ₂.</span><span class=\"n\">fst.fst</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">Λ₁.</span><span class=\"n\">fst.snd</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">z</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">Λ₂.</span><span class=\"n\">fst.snd</span><span class=\"bp\">;</span>\n    <span class=\"n\">clear</span> <span class=\"n\">y</span><span class=\"bp\">;</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">IsGood</span> <span class=\"n\">dIn</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"n\">_</span>    <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">Λ₂.</span><span class=\"n\">snd</span> <span class=\"bp\">Λ₁.</span><span class=\"n\">snd</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 439275620,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1715971659
    },
    {
        "content": "<p>obviously looks like crap. kinda hating this. But this error was something I didn't know how to interpret</p>",
        "id": 439275705,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1715971687
    },
    {
        "content": "<p>Could I ask you to try to minimize it to not use Mathlib? I can try too eventually, but it'll speed things up.</p>",
        "id": 439275762,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715971724
    },
    {
        "content": "<p>Is the error on <code>exact</code> or on <code>clear</code>?</p>",
        "id": 439275808,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715971744
    },
    {
        "content": "<p>on exact. And yeah sure</p>",
        "id": 439276120,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1715971891
    },
    {
        "content": "<p>No mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Preorder</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">LE</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Mappish</span> <span class=\"o\">(</span><span class=\"n\">dIn</span> <span class=\"n\">dOut</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">dIn</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">dOut</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">dIn</span> <span class=\"n\">dOut</span> <span class=\"n\">dOut₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">dIn</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">dOut</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">dOut₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsGood</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">dOut</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">dOut₂</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"n\">Mappish</span> <span class=\"n\">dIn</span> <span class=\"n\">dOut</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Λ₂</span> <span class=\"o\">:</span> <span class=\"n\">Mappish</span> <span class=\"n\">dIn</span> <span class=\"n\">dOut₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Mappish</span> <span class=\"n\">dOut</span> <span class=\"o\">(</span><span class=\"n\">dOut₂</span><span class=\"o\">)),</span> <span class=\"n\">D.k</span> <span class=\"bp\">=</span> <span class=\"bp\">Λ.</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"bp\">Λ₂.</span><span class=\"n\">k</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MappishOrder</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">dIn</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span>\n    <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">dOut</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"n\">Fintype</span> <span class=\"n\">t</span> <span class=\"bp\">×</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"k\">let</span> <span class=\"n\">fin</span> <span class=\"o\">:=</span> <span class=\"n\">dOut.snd.1</span><span class=\"bp\">;</span> <span class=\"n\">Mappish</span> <span class=\"n\">dIn</span> <span class=\"n\">dOut.fst</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"bp\">Λ₁</span> <span class=\"bp\">Λ₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"bp\">Λ₁.</span><span class=\"n\">fst.fst</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"bp\">Λ₂.</span><span class=\"n\">fst.fst</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">Λ₁.</span><span class=\"n\">fst.snd</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">z</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">Λ₂.</span><span class=\"n\">fst.snd</span><span class=\"bp\">;</span>\n    <span class=\"n\">clear</span> <span class=\"n\">y</span><span class=\"bp\">;</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">IsGood</span> <span class=\"n\">dIn</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"n\">_</span>    <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">Λ₂.</span><span class=\"n\">snd</span> <span class=\"bp\">Λ₁.</span><span class=\"n\">snd</span>\n</code></pre></div>",
        "id": 439276811,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1715972232
    },
    {
        "content": "<p>Thanks. I don't have a fix yet, but I'm guessing (and it's a big guess) that it's a bug in how <code>clear</code> updates the cache of local instances. I think I'll file an issue.</p>\n<p>The workaround here is to not use <code>clear</code> for an instance.</p>",
        "id": 439277366,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715972486
    },
    {
        "content": "<p>Reported: <a href=\"https://github.com/leanprover/lean4/pull/4203\">lean4#4203</a></p>",
        "id": 439278483,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715972988
    },
    {
        "content": "<p>Neat, Leo fixed it already in <a href=\"https://github.com/leanprover/lean4/pull/4210\">lean4#4210</a></p>",
        "id": 439321416,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716003552
    }
]