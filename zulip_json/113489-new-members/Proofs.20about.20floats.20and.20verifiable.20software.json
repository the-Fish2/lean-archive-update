[
    {
        "content": "<p>Hi all, new to using lean4. I am interested in using it for verification of a simple controller (think mountain car type controller) for research and have a few questions.</p>\n<p>In Dafny, you could add floats and reason about what their values would be (as I have been told), can you do the same in lean4? For example see these two proofs, how would you go about showing them correct?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">zero_add_float</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The second example could just be a rewrite rule <code>rw [zero_add_float]</code>, but is there something builtin for lean that I can use instead of having to define the <code>zero_add_float</code> axiom?</p>\n<p>Another question I had was about the verification of algorithms or data structures, in Adacore Spark you can write the pre and post conditions for any function and verify it meets the requirements. Is there any way I could do something like that in lean4 for functional programming or am I thinking about this the wrong way.</p>",
        "id": 427956048,
        "sender_full_name": "Dylan Le",
        "timestamp": 1710948586
    },
    {
        "content": "<p>Is the axiom even true? :)</p>",
        "id": 427958252,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710949186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Proofs.20about.20floats.20and.20verifiable.20software/near/427958252\">said</a>:</p>\n<blockquote>\n<p>Is the axiom even true? :)</p>\n</blockquote>\n<p>I was actually thinking about this yesterday. I am unfamiliar with how float works in lean4, but I assume <code>inf + 0.0 = inf</code> and <code>-inf + 0.0 = -inf</code> and all other cases should be correct?</p>\n<p>Unless you are talking about roundoff issues, where I give <code>x</code> a value that has no precise floating point representation... That I am unsure if it makes sense.</p>",
        "id": 427958738,
        "sender_full_name": "Dylan Le",
        "timestamp": 1710949312
    },
    {
        "content": "<p>The main thing I recall from a class that covered (idealized) floats is that anything that claims equality of floats is probably wrong, but maybe you found the exception</p>",
        "id": 427959073,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710949414
    },
    {
        "content": "<p>In general I am not looking at the equality of floats, that I understand can be perilous. Usually I am interested in questions like will <code>x + y &gt;= z</code> always hold given some floating point values. But for these examples I feel like there is nothing wrong.</p>",
        "id": 427959578,
        "sender_full_name": "Dylan Le",
        "timestamp": 1710949547
    },
    {
        "content": "<p>The main reason I am interested in floats in this case is that readings from a sensor will have some floating point representation. I want to be able to reason about floats to stick to that domain.</p>",
        "id": 427960796,
        "sender_full_name": "Dylan Le",
        "timestamp": 1710949859
    },
    {
        "content": "<p>You may be interested in interval arithmetic. Check out <a href=\"http://[](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Verified.20software.20floating.20point/near/419936247)\">this thread</a>!</p>",
        "id": 427997794,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1710961362
    },
    {
        "content": "<p>Alternatively, if you want to write proofs about functions on idealized real numbers, and then perform computations on floating point numbers, there are a number of approaches discussed on Zulip here. For example, <a href=\"#narrow/stream/113489-new-members/topic/Trivial.20calculations.20with.20Reals.3F/near/382196823\">this one</a>, or <a href=\"#narrow/stream/113488-general/topic/Real.20to.20float.20translation/near/354760321\">this one</a>. </p>\n<p><span class=\"user-mention\" data-user-id=\"576850\">@John Velkey ⚛️</span> and <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> have used polymorphic types for this, so a function with real-typed arguments can be used for proofs, and the same function with float-typed arguments can be used in computations.</p>",
        "id": 427999591,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1710962095
    },
    {
        "content": "<p>But I have this question - why won't Lean let me use equality here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span> <span class=\"c1\">-- false</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span> <span class=\"c1\">-- true (my favorite example of floating-point arithmetic)</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"c1\">-- false</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"c1\">-- false</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"c1\">-- failed to synthesize, Decidable (1.0 + 1.0 = 2.0)</span>\n</code></pre></div>",
        "id": 427999835,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1710962200
    },
    {
        "content": "<p>Because <code>(NaN == NaN) == false</code> in <code>C</code> therefore having instance of decidable equality on <code>Float</code> would be inconsistent.</p>",
        "id": 428000180,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1710962361
    },
    {
        "content": "<p>I think there is also the issue that <code>+0.0 = -0.0</code> but <code>1.0/(+0.0) != 1.0/(-0.0)</code> which breaks function extensionality.</p>",
        "id": 428000895,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1710962589
    },
    {
        "content": "<p>Lean uses <code>BEq</code> for the native floating-point equality:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"c1\">-- true</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"c1\">-- false</span>\n</code></pre></div>",
        "id": 428002164,
        "sender_full_name": "Richard Copley",
        "timestamp": 1710963077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/113489-new-members/topic/Proofs.20about.20floats.20and.20verifiable.20software/near/428002164\">said</a>:</p>\n<blockquote>\n<p>Lean uses <code>BEq</code> for the native floating-point equality:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"c1\">-- true</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"c1\">-- false</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Would you be able to use this then for  proving the first example?</p>",
        "id": 428012326,
        "sender_full_name": "Dylan Le",
        "timestamp": 1710967283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424214\">Tyler Josephson ⚛️</span> <a href=\"#narrow/stream/113489-new-members/topic/Proofs.20about.20floats.20and.20verifiable.20software/near/427997794\">said</a>:</p>\n<blockquote>\n<p>You may be interested in interval arithmetic. Check out <a href=\"http://[](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Verified.20software.20floating.20point/near/419936247)\">this thread</a>!</p>\n</blockquote>\n<p>I don't believe this link is working it looks empty.</p>",
        "id": 428013268,
        "sender_full_name": "Dylan Le",
        "timestamp": 1710967719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/113489-new-members/topic/Proofs.20about.20floats.20and.20verifiable.20software/near/428000180\">said</a>:</p>\n<blockquote>\n<p>Because <code>(NaN == NaN) == false</code> in <code>C</code> therefore having instance of decidable equality on <code>Float</code> would be inconsistent.</p>\n</blockquote>\n<p>So is there any subset of reasoning for floats given certain constraints? For example only positive floating point representation of numbers is allowed. I agree the \"axiom\" I put forth will have some problems with NaN and signs.</p>",
        "id": 428013461,
        "sender_full_name": "Dylan Le",
        "timestamp": 1710967815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"702427\">Dylan Le</span> <a href=\"#narrow/stream/113489-new-members/topic/Proofs.20about.20floats.20and.20verifiable.20software/near/428012326\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/113489-new-members/topic/Proofs.20about.20floats.20and.20verifiable.20software/near/428002164\">said</a>:</p>\n<blockquote>\n<p>Lean uses <code>BEq</code> for the native floating-point equality:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"c1\">-- true</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"c1\">-- false</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Would you be able to use this then for  proving the first example?</p>\n</blockquote>\n<p>You can prove that they're BEq.beq:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">native_decide</span>\n</code></pre></div>",
        "id": 428013654,
        "sender_full_name": "Richard Copley",
        "timestamp": 1710967918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/113489-new-members/topic/Proofs.20about.20floats.20and.20verifiable.20software/near/428013654\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"702427\">Dylan Le</span> <a href=\"#narrow/stream/113489-new-members/topic/Proofs.20about.20floats.20and.20verifiable.20software/near/428012326\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/113489-new-members/topic/Proofs.20about.20floats.20and.20verifiable.20software/near/428002164\">said</a>:</p>\n<blockquote>\n<p>Lean uses <code>BEq</code> for the native floating-point equality:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"c1\">-- true</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"c1\">-- false</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Would you be able to use this then for  proving the first example?</p>\n</blockquote>\n<p>You can prove that they're BEq.beq:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">native_decide</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>If I am understanding this correctly, it is calling under the hood evaluating <code>1.0 + 1.0 == 2.0</code> in lean? Is that correct? Any way to do this manually without using native_decide, out of curiosity?</p>",
        "id": 428014382,
        "sender_full_name": "Dylan Le",
        "timestamp": 1710968241
    },
    {
        "content": "<p>I guess so. In C++, one might even say. I'm not sure of the details.<br>\nTry these:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">show_term</span> <span class=\"n\">native_decide</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">xxx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">native_decide</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">xxx</span>\n</code></pre></div>",
        "id": 428014695,
        "sender_full_name": "Richard Copley",
        "timestamp": 1710968387
    },
    {
        "content": "<p>Using show_term</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"o\">(</span><span class=\"n\">Lean.ofReduceBool</span> <span class=\"n\">_example._nativeDecide_1</span> <span class=\"n\">true</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Here's the message, trying to understand it but looks like just trying to decide true = true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">xxx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"n\">of_decide_eq_true</span> <span class=\"o\">(</span><span class=\"n\">Lean.ofReduceBool</span> <span class=\"n\">xxx._nativeDecide_1</span> <span class=\"n\">true</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Same here.</p>",
        "id": 428016284,
        "sender_full_name": "Dylan Le",
        "timestamp": 1710969049
    },
    {
        "content": "<p>Which I guess is pretty makes sense by what my example is trying to show <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 428017004,
        "sender_full_name": "Dylan Le",
        "timestamp": 1710969364
    },
    {
        "content": "<p>I don't know. One can have a look around:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">whatsnew</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">xxx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">native_decide</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">xxx</span> <span class=\"c1\">-- of_decide_eq_true (Lean.ofReduceBool xxx._nativeDecide_1 true (Eq.refl true))</span>\n<span class=\"k\">#print</span> <span class=\"n\">xxx._nativeDecide_1</span> <span class=\"c1\">-- Bool := decide ((1.0 + 1.0 == 2.0) = true)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">xxx._nativeDecide_1</span> <span class=\"c1\">-- true</span>\n<span class=\"k\">#check</span> <span class=\"n\">decide</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"c1\">-- Prop</span>\n<span class=\"k\">#eval</span> <span class=\"n\">decide</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"c1\">-- true</span>\n<span class=\"k\">#check</span> <span class=\"n\">Lean.ofReduceBool</span> <span class=\"c1\">-- ∀ (a b : Bool), Lean.reduceBool a = b → a = b</span>\n<span class=\"k\">#check</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"c1\">-- of_decide_eq_true {p : Prop} [inst : Decidable p] (a : decide p = true) : p</span>\n</code></pre></div>\n<p>It seems to boil down to the fact that <code>xxx._nativeDecide_1</code> evaluates to <code>(true : Bool)</code> which is true by magic (meaning that I don't know how to dig any deeper).</p>",
        "id": 428018243,
        "sender_full_name": "Richard Copley",
        "timestamp": 1710969967
    },
    {
        "content": "<p>native_decide basically says 'I trust whatever the virtual machine says'; the eval xxx._native_decide_1 is pretty much exactly what it's doing</p>",
        "id": 428039715,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1710982144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/113489-new-members/topic/Proofs.20about.20floats.20and.20verifiable.20software/near/428000180\">said</a>:</p>\n<blockquote>\n<p>Because <code>(NaN == NaN) == false</code> in <code>C</code> therefore having instance of decidable equality on <code>Float</code> would be inconsistent.</p>\n</blockquote>\n<p>This isn't strictly true; what it really means is that it is not possible to have a <code>LawfulBEq</code> instance, nor to have <code>x == y &lt;-&gt; x = y</code>, but <code>x = y</code> \"true equality\" is decidable for IEEE floats, it's just a bit disappointing: All NaNs are equal, -0 and +0 are not equal, otherwise it matches <code>==</code></p>",
        "id": 428042976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710984739
    },
    {
        "content": "<p>I think it is sensible for lean not to provide a <code>DecidableEq Float</code> instance though because then it will open up the possibility of mistakenly using <code>x = y</code> instead of <code>x == y</code> or vice versa</p>",
        "id": 428043099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710984825
    },
    {
        "content": "<p>Here's a proof that the zeroes are not equal using <code>native_decide</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"bp\">-</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">native_decide</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 428043546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710985092
    }
]