[
    {
        "content": "<p>I want to proof b ⊓ c ≤ (a ⊔ b) ⊓ (a ⊔ c), where a,b,c are from Lattice α.<br>\nI try to do this with basic assumptions like <code>le_sup_left</code>. I know that this has to work somehow but I only see a way with cases (i.e. a is smallest, b is smallest and c is smallest, I also don't know how I could split into these cases).</p>",
        "id": 445177891,
        "sender_full_name": "Simon Kirchner",
        "timestamp": 1718642708
    },
    {
        "content": "<p>I don't know how you want to prove that one of them is smallest. However, for a case split in general, you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">by_cases</span><span class=\"w\"> </span><span class=\"n\">hname</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">condition</span>\n<span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">proof_for_yes</span>\n<span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">proof_for_not</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">hname</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">  </span><span class=\"n\">proof_for_yes</span>\n<span class=\"k\">else</span>\n<span class=\"w\">  </span><span class=\"n\">proof_for_not</span>\n</code></pre></div>\n<p>where <code>hname</code> can be used in both branches to access given [dis]satisfactipn of given condition.</p>",
        "id": 445185235,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718644894
    },
    {
        "content": "<p>Simon, the theorem you are missing is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=inf_le_inf#doc\">docs#inf_le_inf</a></p>",
        "id": 445215574,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718654888
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> and <span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> for your answers. It looks like that I got into a part of my proof where I can not easily fall back to the basic lemmas I was using.<br>\nAnyway thanks for your help and especially thank you <span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> for the explaination on case spliting.</p>",
        "id": 445406232,
        "sender_full_name": "Simon Kirchner",
        "timestamp": 1718728176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"712621\">Simon Kirchner</span> has marked this topic as resolved.</p>",
        "id": 445406251,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718728182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"712621\">@Simon Kirchner</span> Zulip tip: when you ask questions here, an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is best since then people can give very precise answers. For example, this could be an mwe for your original question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Lattice</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">⊓</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⊔</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⊓</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⊔</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(If you're in the middle of a proof, I'll mention that <code>extract_goal</code> is a mathlib tactic that can be useful for extracting a goal as an <code>example</code>, useful for both writing helper lemmas and for asking questions with an mwe in hand.)</p>",
        "id": 445412317,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718729691
    },
    {
        "content": "<p>I know you don't need it anymore, but I found this other proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Lattice</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">⊓</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⊔</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⊓</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⊔</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">le_trans</span><span class=\"w\"> </span><span class=\"bp\">?_</span><span class=\"w\"> </span><span class=\"n\">sup_inf_le</span>\n<span class=\"w\">  </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">le_sup_right</span>\n</code></pre></div>",
        "id": 445413918,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718730148
    },
    {
        "content": "<p>That can be written using just the proof term <code>le_trans le_sup_right sup_inf_le</code>, but the <code>refine</code> is how I logically thought about it.</p>",
        "id": 445414098,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718730210
    }
]