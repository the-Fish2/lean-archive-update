[
    {
        "content": "<p>I'd like to introduce a small representation for the complex numbers. I have a working first version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CauSeq.Completion</span>\n<span class=\"kn\">open</span> <span class=\"n\">CauSeq</span>\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">abv</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsAbsoluteValue</span> <span class=\"n\">abv</span><span class=\"o\">]</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Cauchy</span> <span class=\"n\">abv</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"n\">r</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">seq</span> <span class=\"o\">:=</span> <span class=\"n\">r.unquot</span>\n    <span class=\"n\">repr</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"mi\">100</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">CauSeq.Completion</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Real</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">ℝ</span> <span class=\"n\">where</span> <span class=\"n\">reprPrec</span> <span class=\"n\">r</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">repr</span> <span class=\"n\">r.cauchy</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- 1</span>\n<span class=\"kd\">end</span> <span class=\"n\">Real</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Complex</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">instance</span> <span class=\"n\">repr</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">Complex</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"n\">f</span> <span class=\"n\">_p</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">Std.Format.bracket</span> <span class=\"s2\">\"⟨\"</span> <span class=\"bp\">·</span> <span class=\"s2\">\"⟩\"</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"o\">(</span><span class=\"n\">Std.Format.joinSep</span> <span class=\"bp\">·</span> <span class=\"s2\">\", \"</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n        <span class=\"o\">([</span><span class=\"n\">f.re</span><span class=\"o\">,</span> <span class=\"n\">f.im</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_root_.repr</span> <span class=\"n\">i</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">complex.has_repr</span> <span class=\"n\">Complex.repr</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(⟨</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">334534855</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"c1\">-- ⟨(66906971 : Rat)/200000000, 0⟩</span>\n<span class=\"kd\">end</span> <span class=\"n\">Complex</span>\n</code></pre></div>\n<p>Why am I redefining the Real and Cauchy representations? <br>\nI do not want my representation to show me stuff like <code>Real.ofCauchy (sorry /- 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ... -/)</code>, when I just have <code>(1 : ℝ)</code>. </p>\n<p>Why do I need short representations?<br>\nI am putting complex numbers in matrices, which sometimes grow beyond 4x4. </p>\n<p>What I am trying to do (but I lack enough knowledge) is to cast the rational number (from <code>seq 100</code>) into a Float so the final <code>#eval</code> will print <code>⟨0.334534855, 0⟩</code> instead.</p>\n<p>Is this possible? Frankly, I get kind of lost in all the cast theorems, and float is not part of Mathlib so I am having trouble finding stuff.</p>",
        "id": 432902649,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1712928049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"691918\">Javernus</span> <a href=\"#narrow/stream/113489-new-members/topic/Representing.20Rational.20as.20Float.20.28for.20Complex.20representation.29/near/432902649\">said</a>:</p>\n<blockquote>\n<p>Why am I redefining the Real and Cauchy representations? <br>\nI do not want my representation to show me stuff like <code>Real.ofCauchy (sorry /- 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ... -/)</code>, when I just have <code>(1 : ℝ)</code>. </p>\n</blockquote>\n<p>This strategy is incorrect though; my cauchy sequence could be the number 1, repeated 101 times, followed by infinitely many zeros. This number is equal to 0, but your code prints it as 1</p>",
        "id": 433028459,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712997577
    },
    {
        "content": "<p>I guess that could be the case indeed, but I am not looking for a 100% accurate strategy, only one that can net me some insights into the values I am using while using complex numbers (when I know that my complex numbers aren't a long Cauchy sequence). </p>\n<p>I guess I posed my intentions wrong, reading back my first sentence. I suppose my complex number representation could still work, though, apart from the other alterations. Do you think it is worth it to create a PR to introduce the <code>⟨1, 0⟩</code> (or rather <code>⟨Real.ofCauchy (sorry /- 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ... -/), Real.ofCauchy (sorry /- 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ... -/)⟩</code>) representation? To me, it feels odd not being able to <code>#eval</code> any complex numbers and this would solve it.</p>\n<p>I would still, for my own codebase and for testing, like a way to turn real or rational numbers into a float, if possible. Any pointers for that would still be much appreciated.</p>",
        "id": 433164751,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1713128523
    },
    {
        "content": "<p>I think a PR using the long repr is fine; though I'd recommend using <code>x + y*I</code> as the repr</p>",
        "id": 434004904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713432375
    },
    {
        "content": "<p>It's not possible to turn real numbers into a Float, but it's possible with rational numbers</p>",
        "id": 434005008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713432411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Rat -&gt; Float</p>",
        "id": 434005048,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713432421
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 434005053,
        "sender_full_name": "loogle",
        "timestamp": 1713432422
    },
    {
        "content": "<p>Thanks for helping out, Eric. I guess there's no Rat -&gt; Float, but that's okay. </p>\n<p>I'll make a PR soon to implement the imaginary number representation (with the Cauchy sequence inside). I'll edit it to show as <code>x + y*I</code> without any brackets. Is there anything else I should consider when making a PR? It will be my first contribution.</p>",
        "id": 434012828,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1713435046
    },
    {
        "content": "<p>A function for Rat -&gt; Float is added in <a href=\"https://github.com/leanprover/std4/pull/750\">std4#750</a></p>",
        "id": 434250959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713480830
    },
    {
        "content": "<p>I have updated my code (for the imaginary number representation) to be cleaner and will be requesting access to the repository so I can put this in a PR. Thanks for the help!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">instance</span> <span class=\"n\">repr</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">Complex</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"n\">f</span> <span class=\"n\">_p</span> <span class=\"o\">:=</span> <span class=\"n\">_root_.repr</span> <span class=\"n\">f.re</span> <span class=\"bp\">++</span> <span class=\"s2\">\" + \"</span> <span class=\"bp\">++</span> <span class=\"n\">_root_.repr</span> <span class=\"n\">f.im</span> <span class=\"bp\">++</span> <span class=\"s2\">\"*I\"</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">complex.has_repr</span> <span class=\"n\">Complex.repr</span>\n</code></pre></div>",
        "id": 435334588,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1714032388
    },
    {
        "content": "<p>I think in this case you might have to do something with the<code>_p</code> argument, to ensure that parentheses are added if necessary</p>",
        "id": 435339256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714034006
    },
    {
        "content": "<p>I believe I solved that now. My PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/12427\">#12427</a>.</p>",
        "id": 435354209,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1714039267
    }
]