[
    {
        "content": "<p>Im trying to build an recursive inductive that builds up a list of things, and dependent on that list the inductive structure is restricted<br>\nhere a minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Induct</span> <span class=\"o\">(</span><span class=\"n\">ls</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Use</span><span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">ls.contains</span> <span class=\"n\">s</span><span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span>  <span class=\"n\">Induct</span> <span class=\"n\">ls</span>\n<span class=\"bp\">|</span> <span class=\"n\">Add</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Induct</span> <span class=\"o\">(</span><span class=\"n\">ls.concat</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Induct</span> <span class=\"n\">ls</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">t1</span> <span class=\"o\">:=</span> <span class=\"n\">Induct.Add</span> <span class=\"s2\">\"hello\"</span> <span class=\"o\">(</span><span class=\"n\">Induct.Use</span> <span class=\"s2\">\"hello\"</span><span class=\"o\">)</span> <span class=\"c1\">-- supposed to work</span>\n<span class=\"kd\">def</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">Induct.Add</span> <span class=\"s2\">\"not hello\"</span> <span class=\"o\">(</span><span class=\"n\">Induct.Use</span> <span class=\"s2\">\"hello\"</span><span class=\"o\">)</span> <span class=\"c1\">-- supposed to not to work since by decide cannot reduce to true</span>\n</code></pre></div>\n<p>i tried parameterizing over the List' ls' and caliing 'Induct (ls.concat s)' in the recursion to build up the list.<br>\nIs there a way to accomplish this thing?<br>\nthanks!</p>",
        "id": 422409535,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1708433166
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Induct</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Use</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ls.contains</span> <span class=\"n\">s</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span>  <span class=\"n\">Induct</span> <span class=\"n\">ls</span>\n<span class=\"bp\">|</span> <span class=\"n\">Add</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Induct</span> <span class=\"o\">(</span><span class=\"n\">ls.concat</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Induct</span> <span class=\"n\">ls</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">t1</span> <span class=\"o\">:=</span> <span class=\"n\">Induct.Add</span> <span class=\"o\">(</span><span class=\"n\">ls</span> <span class=\"o\">:=</span> <span class=\"o\">[])</span> <span class=\"s2\">\"hello\"</span> <span class=\"o\">(</span><span class=\"n\">Induct.Use</span> <span class=\"s2\">\"hello\"</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">def</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">Induct.Add</span> <span class=\"o\">(</span><span class=\"n\">ls</span> <span class=\"o\">:=</span> <span class=\"o\">[])</span> <span class=\"s2\">\"not hello\"</span> <span class=\"o\">(</span><span class=\"n\">Induct.Use</span> <span class=\"s2\">\"hello\"</span><span class=\"o\">)</span> <span class=\"c1\">-- error</span>\n</code></pre></div>",
        "id": 422419455,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1708436433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> has marked this topic as resolved.</p>",
        "id": 422423918,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708437796
    }
]