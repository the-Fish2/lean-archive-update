[
    {
        "content": "<p>hello, i am confused to why lean is able to derive one MonadLift automatically, but does not try to infer the second one (even though it can be inferred). I tried to kept my example minimal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Free</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Free</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">):</span> <span class=\"n\">MonadLift</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Free</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">e1</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">e2</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">MonadLift</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Sig</span> <span class=\"n\">where</span>\n  <span class=\"n\">sig</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Sig</span> <span class=\"n\">where</span>\n  <span class=\"n\">sig</span> <span class=\"o\">:=</span> <span class=\"n\">e2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span><span class=\"o\">:</span> <span class=\"n\">Free</span> <span class=\"o\">(</span><span class=\"n\">s.sig</span><span class=\"o\">)</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">test_e2</span><span class=\"o\">:</span> <span class=\"n\">e2</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">test_e2</span> <span class=\"c1\">-- lifts just fine</span>\n  <span class=\"k\">let</span> <span class=\"n\">test_e1</span><span class=\"o\">:</span> <span class=\"n\">e1</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">let</span> <span class=\"n\">lifter</span><span class=\"o\">:</span> <span class=\"n\">MonadLift</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">test_e1</span> <span class=\"c1\">-- does not infer the Lift instance automatically</span>\n\n  <span class=\"n\">return</span>\n</code></pre></div>",
        "id": 426924499,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1710625808
    }
]