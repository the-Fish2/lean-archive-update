[
    {
        "content": "<p>In a proof I've gotten to a point that looks like this (where <code>a, b : Nat</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ih1</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Now, this looks super easy: all I have to do is add <code>b</code> to both sides of <code>ih1</code>, then factor it into the expression on the left.  I could look up the names of several lemmas to perform rewrite steps that will get me there.  But that seems like a bother.  Is there some tactic that can just finish off the job for me?</p>",
        "id": 420882604,
        "sender_full_name": "Adam Dingle",
        "timestamp": 1707650778
    },
    {
        "content": "<p>I am new here. I could complete the proof with an extra assumption <code>b ≤ a</code>.  Also not sure what to import first.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">addb'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih1</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ineq'</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n<span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span>\n<span class=\"n\">ring_nf</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span>\n<span class=\"n\">tauto</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ih1</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"k\">have</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"n\">c</span>\n<span class=\"n\">tauto</span>\n<span class=\"n\">apply</span> <span class=\"n\">Nat.eq_add_of_sub_eq</span> <span class=\"n\">at</span> <span class=\"n\">ih</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n<span class=\"n\">tauto</span>\n<span class=\"n\">exact</span> <span class=\"n\">ineq'</span>\n</code></pre></div>",
        "id": 420892762,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1707660639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"682831\">@Yagub Aliyev</span> you're right that the proof needs <code>b ≤ a</code>, but it looks like you proved a slightly different goal which replaces <code>(a - b) % b</code> with <code>(a - b) / b</code>.</p>",
        "id": 420911106,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707675855
    },
    {
        "content": "<p>Here is a proof of the original goal assuming <code>b ≤ a</code>. In fact, <code>ih1</code> is not needed.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Int.sub_emod_self</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Int.sub_emod</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Int.sub_ediv_self</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Int.sub_ediv_of_dvd</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Int.dvd_refl</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">hb</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hba</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zify</span> <span class=\"o\">[</span><span class=\"n\">hba</span><span class=\"o\">]</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Int.sub_ediv_self</span> <span class=\"n\">_</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">Int.ediv_add_emod</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 420911152,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707675912
    },
    {
        "content": "<p>Note that <code>slim_check</code> finds counterexamples to the original claim (e.g. <code>a = 0, b = 1</code>).</p>",
        "id": 420911381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707676100
    },
    {
        "content": "<p>To answer your question about tactics for easy algebra, <code>ring</code>, <code>linarith</code>, and <code>polyrith</code> often help, but they don't work well with natural subtraction or integer division, since those are not very algebraically well-behaved operations. If you have evidence that those operations are well-behaved in your instance (for natural subtraction <code>b ≤ a</code> and for integer division <code>b ∣ a</code>), then you can use <code>zify</code> or <code>qify</code> to convert the goal into one about integer subtraction or rational division instead. And lastly there's <code>omega</code>, which is like <code>linarith</code> for natural numbers. It doesn't solve this goal because it doesn't understand <code>%</code>.</p>",
        "id": 420913173,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707677665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500038\">Timo Carlin-Burns</span> <a href=\"#narrow/stream/113489-new-members/topic/Can.20some.20tactic.20take.20care.20of.20this.20easy.20algebra.3F/near/420911106\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"682831\">Yagub Aliyev</span> you're right that the proof needs <code>b ≤ a</code>, but it looks like you proved a slightly different goal which replaces <code>(a - b) % b</code> with <code>(a - b) / b</code>.</p>\n</blockquote>\n<p>Yes, Thank you. I misread the question.</p>",
        "id": 420956399,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1707716941
    },
    {
        "content": "<p>Thanks to everyone for the super helpful responses.</p>\n<p>You're all right that <code>b ≤ a</code> is necessary to prove my claim.  I didn't mention it because I failed to take into account that subtraction is not well-behaved over Nat, i.e. it's not always true that a - b + b = a.  For that reason the condition <code>b ≤ a</code> is necessary.</p>\n<p>The situation I originally described arose when I was trying to prove \"b * (a / b) + a % b = a\" as an exercise.  (I know that it's a library theorem anyway.)  I used induction over a.  In the inductive case it's indeed true that <code>b ≤ a</code>, so that condition is available.</p>\n<p>Thanks for mentioning slim_check, qify, polyrith and omega.  I wasn't aware of any of them since I think they're not mentioned in the Lean tutorials such as \"Theorem Proving in Lean\" and \"Mathematics in Lean\".  I'll add them to my tactic vocabulary.  For working with ℕ or ℤ, omega seems very powerful and useful.</p>\n<p>Given h1 : b ≤ a, I've now realized that it's easy to get from ih1 to my goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">zify</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ih1</span>\n <span class=\"n\">zify</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 421416051,
        "sender_full_name": "Adam Dingle",
        "timestamp": 1707906840
    },
    {
        "content": "<p>Nice! Here's a way to save one more line (<code>⊢</code> means the goal)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">zify</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ih1</span> <span class=\"bp\">⊢</span>\n <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 421498997,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707932713
    },
    {
        "content": "<p>Aha - I wasn't aware of that syntax.  Great, thanks!</p>",
        "id": 421512554,
        "sender_full_name": "Adam Dingle",
        "timestamp": 1707937416
    }
]