[
    {
        "content": "<p>Hello. I'd like to use the 'unfold' tactic, only on the second occurance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">Tree.sizeOf</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">leaf</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">l</span> <span class=\"n\">_</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">l.sizeOf</span> <span class=\"bp\">+</span> <span class=\"n\">r.sizeOf</span>\n</code></pre></div>\n<p>Later I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">left.sizeOf</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t.sizeOf</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>If I use \"unfold Tree.sizeOf\" it unfolds it both on the left and the right, but I only need it on the right.</p>\n<p>Thanks!</p>",
        "id": 422187176,
        "sender_full_name": "Yiftach S",
        "timestamp": 1708333002
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> to make your code more readable -- you can edit your post)</p>",
        "id": 422188251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708333307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Partial.20unfolding/near/422188251\">said</a>:</p>\n<blockquote>\n<p>(<a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> to make your code more readable -- you can edit your post)</p>\n</blockquote>\n<p>Thanks, done</p>",
        "id": 422188491,
        "sender_full_name": "Yiftach S",
        "timestamp": 1708333377
    },
    {
        "content": "<p>There might be more elegant ways to do it but I would explicitly write equation lemmas for sizeOf and use <code>nth_rewrite</code> to do this (ie use rewrite rather than <code>unfold</code>)</p>",
        "id": 422188618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708333426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Partial.20unfolding/near/422188618\">said</a>:</p>\n<blockquote>\n<p>There might be more elegant ways to do it but I would explicitly write equation lemmas for sizeOf and use <code>nth_rewrite</code> to do this</p>\n</blockquote>\n<p>I don't quite understand. What lemmas should I use? And how do I get nth_rewrite to become known? Thanks</p>",
        "id": 422189386,
        "sender_full_name": "Yiftach S",
        "timestamp": 1708333653
    },
    {
        "content": "<p>Is this what you are looking for?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">left</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">left.sizeOf</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t.sizeOf</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"n\">Tree.sizeOf</span> <span class=\"n\">left</span> <span class=\"bp\">=&gt;</span>\n     <span class=\"n\">unfold</span> <span class=\"n\">Tree.sizeOf</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422192863,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708334902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Partial.20unfolding/near/422192863\">said</a>:</p>\n<blockquote>\n<p>Is this what you are looking for?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">left</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">left.sizeOf</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t.sizeOf</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"n\">Tree.sizeOf</span> <span class=\"n\">left</span> <span class=\"bp\">=&gt;</span>\n     <span class=\"n\">unfold</span> <span class=\"n\">Tree.sizeOf</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks, that seems to do the trick! After:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">left</span> <span class=\"n\">key</span> <span class=\"n\">right</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- used to prove termination</span>\n    <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">left.sizeOf</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t.sizeOf</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"n\">Tree.sizeOf</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unfold</span> <span class=\"n\">Tree.sizeOf</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ht</span><span class=\"o\">]</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The goal becomes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Tree.sizeOf</span> <span class=\"n\">left</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">Tree.sizeOf</span> <span class=\"n\">left</span> <span class=\"bp\">+</span> <span class=\"n\">Tree.sizeOf</span> <span class=\"n\">right</span>\n</code></pre></div>\n<p>Which should be trivial. How do I go about finding the right tactics to complete the proof?</p>",
        "id": 422195051,
        "sender_full_name": "Yiftach S",
        "timestamp": 1708335523
    },
    {
        "content": "<p><code>omega</code> and <code>linarith</code> will both do this, but they require a mathlib import, although <code>omega</code> just migrated to somewhere higher (<code>std</code>?) yesterday.</p>",
        "id": 422200838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708337526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Partial.20unfolding/near/422200838\">said</a>:</p>\n<blockquote>\n<p><code>omega</code> and <code>linarith</code> will both do this, but they require a mathlib import, although <code>omega</code> just migrated to somewhere higher (<code>std</code>?) yesterday.</p>\n</blockquote>\n<p>linarith worked like a charm! Thanks</p>",
        "id": 422203989,
        "sender_full_name": "Yiftach S",
        "timestamp": 1708338559
    },
    {
        "content": "<p>Kevin, omega has always be in std, it migrated to core but you won’t see it before the next release.</p>",
        "id": 422269551,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708359752
    }
]