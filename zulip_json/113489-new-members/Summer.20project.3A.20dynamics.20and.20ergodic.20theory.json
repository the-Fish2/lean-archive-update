[
    {
        "content": "<p>One of my summer students is interested in formalizing further definitions and theorems in dynamics and ergodic theory not yet in mathlib (it would be nice to reach the Birkhoff Ergodic Theorem, for example). </p>\n<p>Is this reasonable?  How do I tell if someone else is working on this?</p>",
        "id": 437354708,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1715038991
    },
    {
        "content": "<p>It is on my todo list but I would love to see it done by someone else. I'll write more details tomorrow.</p>",
        "id": 437380932,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715059440
    },
    {
        "content": "<p>I am also interested in seeing more dynamics in Mathlib, but I haven’t really interacted with this at all yet so Yury will be more helpful.</p>",
        "id": 437422790,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1715077509
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"436369\">@Marcello Seri</span>  <span class=\"user-mention\" data-user-id=\"613177\">@Oliver Butterley</span> <span class=\"user-mention\" data-user-id=\"630496\">@Marco Lenci</span> are doing exactly the Birkhoff Ergodic theorem</p>",
        "id": 437488076,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1715098964
    },
    {
        "content": "<p>Let's see what they say then.  We can work toward other goals, e.g. entropy or topological dynamics.</p>",
        "id": 437488946,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1715099282
    },
    {
        "content": "<p>Thanks Yoh for connecting us. </p>\n<p>Marcello and Marco started a while ago under the guidance of Sebastien Gouezel in a Lean workshop. I joined them more recently. Progress to date is in this <a href=\"https://github.com/mseri/BET\">repo</a>. We have some bursts of progress and then there are long periods of time when we have too many other commitments to devote time to it. </p>\n<p>Personally I have no interest in being possessive of this or anything else. I'm just keen to use what energy and time I have spare in order to add a bit. Extending the dynamics content is my focus. We should coordinate!</p>",
        "id": 437491263,
        "sender_full_name": "Oliver Butterley",
        "timestamp": 1715100190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"513919\">@Damien Thomine</span> also worked on topological entropy but I don’t know the current status of this project.</p>",
        "id": 437491344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715100218
    },
    {
        "content": "<p>I just don't want to duplicate effort, so let's coordinate.  For now I'm getting the student going. </p>\n<p>By the way, in which part of the form do I post technical questions/discussions?</p>",
        "id": 437531639,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1715116252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"382902\">@Yoh Tanimoto</span> thanks!</p>",
        "id": 437531726,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1715116286
    },
    {
        "content": "<p>Note that we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.tendsto_birkhoffAverage_orthogonalProjection#doc\">docs#ContinuousLinearMap.tendsto_birkhoffAverage_orthogonalProjection</a></p>",
        "id": 437577964,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715145255
    },
    {
        "content": "<p>BTW, I suggest that you start contributing parts of your project to Mathlib early, so that it doesn't rot before it gets merged.</p>",
        "id": 437578008,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715145302
    },
    {
        "content": "<p>It would be nice if your student wants to join our effort, is quite well on the way and while indeed we can commit to it only at certain times, the ci is checking periodically compatibility and (at least I) can commit to review PRs</p>",
        "id": 437597600,
        "sender_full_name": "Marcello Seri",
        "timestamp": 1715154870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span> and I have just opened a <a href=\"https://github.com/mseri/BET/pull/21\">PR</a> golfing a few proofs in <code>Topological.lean</code> and fixing a few typos in <code>Birkhoff.lean</code>.</p>",
        "id": 437721881,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1715198871
    },
    {
        "content": "<p>Thanks</p>",
        "id": 437725056,
        "sender_full_name": "Marcello Seri",
        "timestamp": 1715200282
    },
    {
        "content": "<p>We keep some more work on branches, like <a href=\"https://github.com/mseri/BET/tree/wip\">https://github.com/mseri/BET/tree/wip</a></p>",
        "id": 437725202,
        "sender_full_name": "Marcello Seri",
        "timestamp": 1715200335
    },
    {
        "content": "<p>Another reminder to start opening mathlib PRs with helper lemmas from your project. Even if the project is not ready yet, you probably have quite a few useful helper lemmas.</p>",
        "id": 437775419,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715236216
    },
    {
        "content": "<p>Yep, keeping the code tidy and promptly opening mathlib PRs with any useful parts is a sensible plan. But my son is a few months old, this semester I had to prepare and teach a new course, etc and so sensible plans don't always get implemented! <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span>  </p>\n<p>Concerning topological dynamics, I later noticed that some of what we looked at is already  in mathlib but there are a few bits that we had done which could be added. <span class=\"user-mention\" data-user-id=\"556875\">@Pietro Monticone</span> and <span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span> , maybe we could could chat about this and get this done? </p>\n<p>However there is a huge amount of topological dynamics which is currently not in mathlib! No shortage of things to do for everyone who wants!</p>\n<p>As Yury mentioned, the mean ergodic theorem is in mathlib. The most advanced version we have of the pointwise ergodic theorem (birkhoff) is in our wip branch.</p>",
        "id": 437791249,
        "sender_full_name": "Oliver Butterley",
        "timestamp": 1715246374
    },
    {
        "content": "<p>Congratulations about the son!</p>",
        "id": 437814127,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715259153
    },
    {
        "content": "<p>We have almost finished golfing all the proofs in <code>Topolical.lean</code>.</p>\n<p>In this <a href=\"https://github.com/pitmonticone/BET/blob/c7b21f19541cd4d6bd040b9f47b6b608aef15c24/BET/Topological.lean#L287C1-L306C28\">example</a> we don't really understand why we get the following linter warning: </p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">unused variable `h`</span>\n<span class=\"go\">note: this linter can be disabled with `set_option linter.unusedVariables false`</span>\n</code></pre></div>\n<p>We've reproduced the same warning with the following MWE: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">q</span>\n</code></pre></div>\n<p>Can anybody explain, please?</p>",
        "id": 437900415,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1715296014
    },
    {
        "content": "<p>Well, you're not using the <code>h</code></p>",
        "id": 437900883,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715296318
    },
    {
        "content": "<p>in the sense that you can remove both <code>(h : ¬ Q) </code> and <code>contrapose! h</code>from the proof and it is still a correct proof</p>",
        "id": 437901283,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1715296582
    },
    {
        "content": "<p>Yes, sorry. The MWE was probably too simple compared to the real case. </p>\n<p>The point is that we're not sure how to avoid using <code>minimality</code> as the argument of the <code>contrapose!</code> in the original example below. It's true that <code>minimality</code> is not used after the <code>contrapose!</code>, but we have to specify it in order to contrapose it. Maybe there's some alternative tactic we may adopt, but we don't know any in this case. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An example of a continuous dynamics on a compact space in which the recurrent set is all</span>\n<span class=\"sd\">the space, but the dynamics is not minimal -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">IsMinimal</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">unitInterval</span> <span class=\"bp\">→</span> <span class=\"n\">unitInterval</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span>\n  <span class=\"k\">have</span> <span class=\"n\">minimality</span> <span class=\"o\">:=</span> <span class=\"n\">H.minimal</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">minimality</span>\n  <span class=\"c1\">-- `push_neg` pushes negations as deep as possible into the conclusion of a hypothesis</span>\n  <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">unitInterval</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">unitInterval</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n  <span class=\"c1\">-- we need this helper twice below</span>\n  <span class=\"k\">have</span> <span class=\"n\">dist_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">unitInterval</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">dist_pos.mpr</span>\n    <span class=\"n\">apply</span> <span class=\"n\">unitInterval.coe_ne_zero.mp</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- 1 ≠ 0</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">div_pos</span> <span class=\"n\">dist_pos</span>\n    <span class=\"n\">linarith</span> <span class=\"c1\">-- 0 &lt; 2</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">n</span>\n    <span class=\"c1\">-- `simp` is necessary to go from `¬id^[n] 1 ∈ ball 0 (dist 1 0 / 2)`</span>\n    <span class=\"c1\">-- to `0 ≤ dist 1 0`</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">dist_pos</span>\n</code></pre></div>",
        "id": 437901517,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1715296779
    },
    {
        "content": "<p>We'll download your code and read it.  My goal would have been the pointwise ergodic theorem for L^1 functions on probability-preserving spaces.  If that's done the next goal would be measure-theoretic and topological entropy and maybe the variational theorem.</p>",
        "id": 437902361,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1715297424
    },
    {
        "content": "<p>Draft turned into <a href=\"https://github.com/mseri/BET/pull/21\">PR</a>.</p>",
        "id": 437903004,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1715297945
    },
    {
        "content": "<p>maybe you can add the definitions of <code>IsMinimal</code> and <code>H.minimal</code>?</p>",
        "id": 437903849,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1715298657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"382902\">Yoh Tanimoto</span> <a href=\"#narrow/stream/113489-new-members/topic/Summer.20project.3A.20dynamics.20and.20ergodic.20theory/near/437903849\">said</a>:</p>\n<blockquote>\n<p>maybe you can add the definitions of <code>IsMinimal</code> and <code>H.minimal</code>?</p>\n</blockquote>\n<p>Sure: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A dynamical system (α,f) is minimal if α is a minimal subset. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">IsMinimal</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">IsMinimalSubset</span> <span class=\"n\">f</span> <span class=\"n\">univ</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The minimal subsets are the closed invariant subsets in which all orbits are dense. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">IsMinimalSubset</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">closed</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">invariant</span> <span class=\"o\">:</span> <span class=\"n\">IsInvariant</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">minimal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 438001418,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1715355073
    },
    {
        "content": "<p>For invariance isn't the right definition that if x\\in U then f(x)\\in U?  This implies that all powers of f have the same property, so the two definitions are equivalent, and in that case why make ourselves check the stronger condition.</p>",
        "id": 438006699,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1715357022
    },
    {
        "content": "<p>Instead maybe make the equivalence a lemma</p>",
        "id": 438006835,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1715357056
    },
    {
        "content": "<p>Thanks Patrick for paging me. First a few comments :</p>\n<ul>\n<li>I didn't write anything about measured dynamics (so no interference with the project on Birkhoff's theorem)</li>\n<li>I had written a few things about general topological dynamics, but it was just bits and pieces, and in Lean3. Most of it I did not port it to Lean4, and do not intend to. I would still have some advice if you're interested.</li>\n<li>The only part I did port was on invariant subsets. I'll put it on BET ASAP so that there is no duplicate work.</li>\n<li>I have a current project about topological entropy à la Bowen. It's pretty advanced, so better not to go in this direction.</li>\n</ul>",
        "id": 438015155,
        "sender_full_name": "Damien Thomine",
        "timestamp": 1715360303
    },
    {
        "content": "<p>For general topological dynamics: a reference I found quite useful is</p>\n<p><em>Topological and symbolic dynamics</em> - Petr Kurka</p>\n<p>Frames everything in terms of relations on X x X, which is a very clean way to work.</p>",
        "id": 438015539,
        "sender_full_name": "Damien Thomine",
        "timestamp": 1715360435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"716077\">@Lior Silberman</span> : agree on the definition of invariance. The cleanest I found is <span class=\"tex-error\">$$U \\sub f ^{-1}' U$$</span>. No need to introduce points. In addition, the tactic <em>simp</em> tends to write subsets in normal form with preimages when possible; if you do the same, that means that <em>simp</em> works for you instead of against you. And it can be very annoying to work against <em>simp</em>.</p>",
        "id": 438016257,
        "sender_full_name": "Damien Thomine",
        "timestamp": 1715360709
    },
    {
        "content": "<p>@Marcello Seri @Oliver Butterley My current work on topological entropy is getting a bit extensive. Would it be possible to put it on BET so that we can exchange on it before putting it on MathLib? I've already got some more-or-less finalized stuff, but some review / external advice would be very welcome.</p>",
        "id": 438017249,
        "sender_full_name": "Damien Thomine",
        "timestamp": 1715361158
    },
    {
        "content": "<p>Finally, the current state of my work on topological entropy is :</p>\n<ul>\n<li>Definition of topological entropy à la Bowen using covers : done.</li>\n<li>Definition of topological entropy à la Bowen using nets : done.</li>\n<li>Equivalence of the two definitions : done.</li>\n<li>Behaviour of entropy for common systems (subsystems, unions, products, conjugacies...) : in progress.</li>\n<li>Entropy of a full shift : would be the next step.</li>\n</ul>\n<p>Many non-obvious design decisions, which means some significant additional work on other structures.</p>",
        "id": 438018494,
        "sender_full_name": "Damien Thomine",
        "timestamp": 1715361608
    },
    {
        "content": "<p>Hello, <span class=\"user-mention\" data-user-id=\"513919\">@Damien Thomine</span>! It's been way too long since we have met in person! I hope all's well with you.</p>\n<p>Concerning minimal sets, etc. I realised fairly recently that there is some stuff in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Dynamics/Minimal.html\">Dynamics/Minimal</a> and so we should try to match with that and no duplicate. I have some extra pieces, for existence the proof of the existence of minimal sets using Zorn's lemma, etc but I still have them in a <a href=\"https://github.com/oliver-butterley/birkhoff/blob/wip-exist-minimal/BET/Topological.lean\">branch of a fork of BET</a>.</p>\n<p>I know, this is ridiculous of me, I should have merged everything properly a few months ago so that it was easier for everyone to see what is what. However that was just the moment my partner returned to work after maternity leave and our son didn't start in the nursery until a few months later. So I had a few months of playing, not sleeping and failing to do sensible organization of code! </p>\n<p><span class=\"user-mention\" data-user-id=\"556875\">@Pietro Monticone</span> and <span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span>, you guys are efficient! Sorry if my lack of organization at the moment has been an inconvenience. Let me figure out a way to put all of your stuff together. But then we probably need to find what we need to modify to fit with what's already in mathlib.</p>\n<p>I like Damien's suggestion, we can keep the repo as more or less good and complete, in preparation for moving to mathlib but be a bit more relaxed about our standards. From this week onwards I finally have time to work again and I'm happy to use time on this.</p>",
        "id": 438022835,
        "sender_full_name": "Oliver Butterley",
        "timestamp": 1715363313
    },
    {
        "content": "<p>Don’t worry, Oliver. No problem at all for us!</p>",
        "id": 438023396,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1715363597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"556875\">Pietro Monticone</span><br>\nI don't know what to do with this <code>¬</code> of a structured <code>Prop</code>, but can you do something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IsMinimalSubset</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">IsClosed</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">IsInvariant</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">IsMinimalSubset</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IsMinimalSubset</span><span class=\"o\">]</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 438083700,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1715408244
    },
    {
        "content": "<p>See also <code>@[mk_iff]</code></p>",
        "id": 438118061,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715443227
    },
    {
        "content": "<p>maybe there is a shorter code but I think this way you can avoid <code>minimality</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">sP</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">sQ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span><span class=\"bp\">!</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">and_not_self_iff</span> <span class=\"n\">Q</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">And.intro</span> <span class=\"n\">this.sQ</span> <span class=\"n\">_</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">--need to prove ¬ Q</span>\n</code></pre></div>",
        "id": 438172173,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1715506461
    },
    {
        "content": "<p>Thank you everyone for your suggestions! </p>\n<p>We have just solved the \"unused variable <code>minimality</code>\" problem as follows: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An example of a continuous dynamics on a compact space in which the recurrent set is all</span>\n<span class=\"sd\">the space, but the dynamics is not minimal -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">IsMinimal</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">unitInterval</span> <span class=\"bp\">→</span> <span class=\"n\">unitInterval</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span>\n  <span class=\"k\">have</span> <span class=\"n\">minimality</span> <span class=\"o\">:=</span> <span class=\"n\">H.minimal</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">unitInterval</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">unitInterval</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">revert</span> <span class=\"n\">minimality</span><span class=\"bp\">;</span> <span class=\"n\">contrapose</span><span class=\"bp\">!;</span> <span class=\"n\">intro</span> <span class=\"n\">_</span>\n  <span class=\"c1\">-- we need this helper twice below</span>\n  <span class=\"k\">have</span> <span class=\"n\">dist_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">unitInterval</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n    <span class=\"n\">dist_pos.mpr</span> <span class=\"o\">(</span><span class=\"n\">unitInterval.coe_ne_zero.mp</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">))</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">div_pos</span> <span class=\"n\">dist_pos</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"c1\">-- `simp` is necessary to go from `¬id^[n] 1 ∈ ball 0 (dist 1 0 / 2)`</span>\n  <span class=\"c1\">-- to `0 ≤ dist 1 0`</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">iterate_id</span><span class=\"o\">,</span> <span class=\"n\">id_eq</span><span class=\"o\">,</span> <span class=\"n\">mem_ball</span><span class=\"o\">,</span> <span class=\"n\">not_lt</span><span class=\"o\">,</span> <span class=\"n\">half_le_self_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">dist_pos</span>\n</code></pre></div>\n<p>Pushed in the same <a href=\"https://github.com/mseri/BET/pull/21\">PR</a>.</p>",
        "id": 438637539,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1715713987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span> <span class=\"user-mention\" data-user-id=\"556875\">@Pietro Monticone</span>  Thanks again for the PR. </p>\n<p>Did you think more about the minimal set stuff when you were going through it? Now all  the minimal stuff is isolated into a separate file and in another PR some extra things about existence and different equivalent definitions added.</p>",
        "id": 439610790,
        "sender_full_name": "Oliver Butterley",
        "timestamp": 1716223188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"513919\">Damien Thomine</span> <a href=\"#narrow/stream/113489-new-members/topic/Summer.20project.3A.20dynamics.20and.20ergodic.20theory/near/438015539\">said</a>:</p>\n<blockquote>\n<p>For general topological dynamics: a reference I found quite useful is</p>\n<p><em>Topological and symbolic dynamics</em> - Petr Kurka</p>\n<p>Frames everything in terms of relations on X x X, which is a very clean way to work.</p>\n</blockquote>\n<p>Thanks for the reference suggestion. I didn't previously have a favourite for these topics and I like that the electronic version is <a href=\"https://smf.emath.fr/index.php/publications/dynamique-topologique-et-symbolique\">freely downloadable</a>.</p>",
        "id": 439611837,
        "sender_full_name": "Oliver Butterley",
        "timestamp": 1716223544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"613177\">Oliver Butterley</span> <a href=\"#narrow/stream/113489-new-members/topic/Summer.20project.3A.20dynamics.20and.20ergodic.20theory/near/439610790\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"638899\">Lorenzo Luccioli</span> <span class=\"user-mention silent\" data-user-id=\"556875\">Pietro Monticone</span>  Thanks again for the PR. </p>\n<p>Did you think more about the minimal set stuff when you were going through it? Now all  the minimal stuff is isolated into a separate file and in another PR some extra things about existence and different equivalent definitions added.</p>\n</blockquote>\n<p>Hi Oliver, you're welcome. We'll take a look at the new content in the next few days paying closer attention to <code>Minimal.lean</code>.</p>",
        "id": 439612489,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1716223776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"613177\">Oliver Butterley</span> <a href=\"#narrow/stream/113489-new-members/topic/Summer.20project.3A.20dynamics.20and.20ergodic.20theory/near/439611837\">said</a>:</p>\n<blockquote>\n<p>Thanks for the reference suggestion. I didn't previously have a favourite for these topics and I like that the electronic version is <a href=\"https://smf.emath.fr/index.php/publications/dynamique-topologique-et-symbolique\">freely downloadable</a>.</p>\n</blockquote>\n<p>Although the content related to minimal sets in that book is overly minimal : <span aria-label=\"joking\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"joking\">:joking:</span></p>",
        "id": 439612906,
        "sender_full_name": "Oliver Butterley",
        "timestamp": 1716223911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"556875\">Pietro Monticone</span> <a href=\"#narrow/stream/113489-new-members/topic/Summer.20project.3A.20dynamics.20and.20ergodic.20theory/near/439612489\">said</a>:</p>\n<blockquote>\n<p>Hi Oliver, you're welcome. We'll take a look at the new content in the next few days paying closer attention to <code>Minimal.lean</code>.</p>\n</blockquote>\n<p>Would it be useful to chat about it sometime? </p>\n<p>It appears there are a few \"design\" decision to make on this topic which aren't immediately clear. How about, we both take a look both at what we have and what exists in mathlib already (linked in our file), then we can have a chat an hopefully see a clear route to proceed?</p>",
        "id": 439613409,
        "sender_full_name": "Oliver Butterley",
        "timestamp": 1716224058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"613177\">Oliver Butterley</span> <a href=\"#narrow/stream/113489-new-members/topic/Summer.20project.3A.20dynamics.20and.20ergodic.20theory/near/439613409\">said</a>:</p>\n<blockquote>\n<p>Would it be useful to chat about it sometime? </p>\n<p>It appears there are a few \"design\" decision to make on this topic which aren't immediately clear. How about, we both take a look both at what we have and what exists in mathlib already (linked in our file), then we can have a chat an hopefully see a clear route to proceed?</p>\n</blockquote>\n<p>We're both going to be quite busy in the following weeks (we can probably find the time to simplify some proofs, but not much more)... How about taking a look at all this in Pisa next month?</p>",
        "id": 439699861,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1716247927
    },
    {
        "content": "<p>Great! Let's discuss when we see each other in Pisa. Looking forward to it!</p>",
        "id": 439740251,
        "sender_full_name": "Oliver Butterley",
        "timestamp": 1716272719
    },
    {
        "content": "<p>We have just opened a <a href=\"https://github.com/mseri/BET/pull/41\">PR</a> golfing a few proofs in <code>Minimal.lean</code>.</p>",
        "id": 440192442,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1716415568
    },
    {
        "content": "<p>Hi all, I've a sorry-free version (except for a silly lemma) of the same statements in <code>Birkhoff.lean</code> of <span class=\"user-mention\" data-user-id=\"436369\">@Marcello Seri</span>'s repo. This is a different file because I already had some lemmas from an attempt I had at proving Birkhoff some months ago, and the approach is a bit more succinct. This week I bought myself a fast computer so I'm motivated to write more things in Lean (it was not quite a good experience in the laptop). I'm planning to finish the proof this weekend if possible.</p>\n<p><a href=\"https://github.com/lucasvreis/BirkhoffErgodicThm/blob/main/BirkhoffErgodicThm.lean\">https://github.com/lucasvreis/BirkhoffErgodicThm/blob/main/BirkhoffErgodicThm.lean</a></p>",
        "id": 440440242,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1716527700
    },
    {
        "content": "<p>In case anyone wants to golf the silly lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">abs_le_bound</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">abs</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">abs</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⊔</span><span class=\"w\"> </span><span class=\"n\">abs</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 440440613,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1716528032
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">abs_le_bound</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"n\">b</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">⊔</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"n\">c</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp_rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">abs_eq_max_neg</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">max_le_iff</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 440446082,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1716531854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571941\">Lucas Viana Reis</span> <a href=\"#narrow/stream/113489-new-members/topic/Summer.20project.3A.20dynamics.20and.20ergodic.20theory/near/440440242\">said</a>:</p>\n<blockquote>\n<p>This week I bought myself a fast computer so I'm motivated to write more things in Lean (it was not quite a good experience in the laptop). I'm planning to finish the proof this weekend if possible.</p>\n</blockquote>\n<p>I guess it doesn't concern you anymore, but just so you know you can use Lean on gitpod for free, and the large workspace works pretty well, and since you are working on free software you can ask them to up you to 250h/month of free time (default is 50)</p>",
        "id": 440495220,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1716552028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"695266\">Mitchell Lee</span> <a href=\"#narrow/stream/113489-new-members/topic/Summer.20project.3A.20dynamics.20and.20ergodic.20theory/near/440446082\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">abs_le_bound</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"n\">b</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">⊔</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"n\">c</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp_rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">abs_eq_max_neg</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">max_le_iff</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">aesop</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Cool! I had forgotten about <code>aesop</code></p>",
        "id": 440507247,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1716556593
    },
    {
        "content": "<p>This is nice to know, but for 50 hours they are asking for a LinkedIn acount <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 440508307,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1716556934
    },
    {
        "content": "<p>Really? They didn't back when I started using it</p>",
        "id": 440508524,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716557003
    },
    {
        "content": "<p>Probably people figured out how to mine bitcoin using it or something</p>",
        "id": 440508611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716557032
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/haNNtDuGLo7li49WIITKFv5T/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/haNNtDuGLo7li49WIITKFv5T/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/haNNtDuGLo7li49WIITKFv5T/image.png\"></a></div><p>Actually they show you this, but if you \"continue with 10h\" then you also get 50 <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 440509995,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1716557487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571941\">Lucas Viana Reis</span> <a href=\"#narrow/stream/113489-new-members/topic/Summer.20project.3A.20dynamics.20and.20ergodic.20theory/near/440440242\">said</a>:</p>\n<blockquote>\n<p>Hi all, I've a sorry-free version (except for a silly lemma) of the same statements in <code>Birkhoff.lean</code> of <span class=\"user-mention silent\" data-user-id=\"436369\">Marcello Seri</span>'s repo. This is a different file because I already had some lemmas from an attempt I had at proving Birkhoff some months ago, and the approach is a bit more succinct. This week I bought myself a fast computer so I'm motivated to write more things in Lean (it was not quite a good experience in the laptop). I'm planning to finish the proof this weekend if possible.</p>\n<p><a href=\"https://github.com/lucasvreis/BirkhoffErgodicThm/blob/main/BirkhoffErgodicThm.lean\">https://github.com/lucasvreis/BirkhoffErgodicThm/blob/main/BirkhoffErgodicThm.lean</a></p>\n</blockquote>\n<p>There is now 1 \"straightforward\" sorry left in the main proof and three in <code>BirkhoffSumPR</code> that should help with the first sorry (show that the birkhoff average of sum of functions is the sum of averages, and also for neg). I may only touch it next weekend, but if anyone wants to complete those and PR it please feel welcome.</p>",
        "id": 440788196,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1716793389
    },
    {
        "content": "<p>Also the proof is probably miles away from being mathlib-ready, contributions in this direction are also very welcome</p>",
        "id": 440788447,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1716793500
    },
    {
        "content": "<p>I couldn't resist and made it sorry free, at the expense of specializing the auxiliary lemmas to \\R <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 440904462,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1716835906
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 440906734,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1716837082
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/kee27ensnbSfmbceSngophy2/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/kee27ensnbSfmbceSngophy2/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/kee27ensnbSfmbceSngophy2/image.png\"></a></div>",
        "id": 440908080,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1716837745
    },
    {
        "content": "<p>Since the ergodic theorem is already well in hand, we'll work on metric (Kolmogorov--Sinai) entropy.</p>",
        "id": 441362513,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717036257
    },
    {
        "content": "<p>There are also a lot of things related to Birkhoff that I think would be nice to have, like the maximal ergodic theorem, the corollary for continuous functions on metric spaces and even the ergodic decomposition and Kingman's.</p>",
        "id": 441472281,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1717079998
    },
    {
        "content": "<p>I assume the maximal ergodic theorem is a stage in the proof of the pointwise theorem?</p>",
        "id": 441475021,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717080736
    },
    {
        "content": "<p>The most efficient proofs of the pointwise theorem (such as the one in Katok-Hasselblatt) go through a maximal argument, but less precise (and easier) than the maximal ergodic theorem.</p>",
        "id": 441475697,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1717080916
    },
    {
        "content": "<p>I was following the proof in \"Conformal Fractals\" from Przytycki and Urbański, it only uses a very special case of the maximal theorem.</p>",
        "id": 441475732,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1717080928
    },
    {
        "content": "<p>I'm also not claiming the proof that has been written is the one that should go to mathlib, it was mostly a weekend project for me (but afaik, previous formalizations also used this shorter proof). I think it would be nicer to have it either as a corollary of Kingman's or as a corollary of the maximal theorem and Banach principle, since in the end we would have more useful statements.</p>",
        "id": 441478749,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1717081641
    },
    {
        "content": "<p>By Banach principle,  I mean the Birkhoff proof in here:<br>\n<a href=\"https://joelshapiro.org/Pubvit/Downloads/joel_aeconv_howto.pdf\">https://joelshapiro.org/Pubvit/Downloads/joel_aeconv_howto.pdf</a></p>\n<p>The advantage is that this sort of result is also useful for many other things.</p>",
        "id": 441480404,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1717082005
    },
    {
        "content": "<p>The notion we need here is weak L^p spaces.</p>",
        "id": 441481012,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717082125
    },
    {
        "content": "<p>We shouldn't have it as a consequence of Kingman, because most proofs of Kingman use Birkhoff :-)</p>",
        "id": 441483519,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1717082672
    },
    {
        "content": "<p>In Krerley and Viana's book they have a somewhat combinatorial proof of Kingman without Birkhoff (originally by Avila I think)</p>",
        "id": 441483895,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1717082748
    },
    {
        "content": "<p>and I think it's about the same length as a proof of Birkhoff using the maximal theorem</p>",
        "id": 441484099,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1717082783
    },
    {
        "content": "<p><a href=\"https://www.cmat.edu.uy/~lessa/tesis/Avila.pdf\">https://www.cmat.edu.uy/~lessa/tesis/Avila.pdf</a></p>",
        "id": 441484865,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1717082932
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 441487156,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1717083388
    },
    {
        "content": "<p>If I remember correctly, the proof by Avila-Bochi has essentially the same flavor as a classical proof of Kingman due to Steele, but Steele's proof is quite simpler because it uses Birkhoff to discard the case where you have to wait too long before reaching the limit. Steele's proof (less than 2 pages) is here: <a href=\"http://www.numdam.org/item/AIHPB_1989__25_1_93_0.pdf\">http://www.numdam.org/item/AIHPB_1989__25_1_93_0.pdf</a>.</p>",
        "id": 441489908,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1717083977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"571941\">@Lucas Viana Reis</span> , it looks like your proof of Birkhoff is essentially ready (I mean, it looks both complete and clean!). Are you planning to PR it to Mathlib? It would be amazing to have Birkhoff in Mathlib.</p>",
        "id": 445890903,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1718900181
    },
    {
        "content": "<p>If you need help on the process to contribute, just tell it here, I'm sure many people would be most happy to help you.</p>",
        "id": 445891071,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1718900225
    },
    {
        "content": "<p>Thanks for the kind words <span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span> :)<br>\nI'm willing to do it, but I never contributed to mathlib (other than the mathport) so I would have to learn how the process works. I think I will have some spare time in the beginning of July to create a topic in the <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> channel for this. I'm also preparing for my first international travel, I'll be at the ICTP school in Trieste this summer.</p>",
        "id": 445988671,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1718937539
    },
    {
        "content": "<p>Great, just tell us when you need help. And ICTP is a great place (it was also my first international conference, 25 years ago :-)</p>",
        "id": 446009259,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1718948634
    }
]