[
    {
        "content": "<p>I am trying to prove a simple theorem about unitary matrices preserve the norm of (normalized) vectors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.UnitaryGroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">norm_vec</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">u_op</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):=</span> <span class=\"n\">Matrix.unitaryGroup</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_norm_vec_iff</span> <span class=\"o\">{</span><span class=\"n\">ψ</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">}:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">norm_vec</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">unitary_preserve_vectors</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span><span class=\"o\">:</span> <span class=\"n\">u_op</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">norm_vec</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">U.1</span> <span class=\"bp\">*</span> <span class=\"n\">s.1</span> <span class=\"bp\">∈</span> <span class=\"n\">norm_vec</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">d</span> <span class=\"n\">U</span> <span class=\"n\">s</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_norm_vec_iff</span><span class=\"o\">]</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"o\">):=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">conjTranspose_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I got the error of <code>calc</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"k\">calc</span><span class=\"bp\">'</span> <span class=\"n\">step</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">Trans</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Trans</span> <span class=\"n\">Eq</span> <span class=\"n\">Eq</span> <span class=\"bp\">?</span><span class=\"n\">m.378685</span>\n</code></pre></div>\n<p>Every term in the <code>calc</code> looks correct. What is the problem?</p>",
        "id": 417542934,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706050263
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 417543008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706050304
    },
    {
        "content": "<p>Right now I have <code>expected token</code> on <code>ᴴ</code> -- are you missing an import or an <code>open</code> or something? I don't know my way around this part of the library.</p>",
        "id": 417543211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706050416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/.60calc.60.20failed.20to.20synthesize.20simple.20equalities/near/417543211\">said</a>:</p>\n<blockquote>\n<p>Right now I have <code>expected token</code> on <code>ᴴ</code> -- are you missing an import?</p>\n</blockquote>\n<p>Sorry, it was a pasting error (<code>q</code> was not defined), I just updated all the <code>q</code> to <code>s</code>, please use the new code.</p>",
        "id": 417543308,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706050454
    },
    {
        "content": "<p>I think the issue is that Lean doesn't know what the small H is (because either something is not imported or something is not opened)</p>",
        "id": 417543373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706050501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/.60calc.60.20failed.20to.20synthesize.20simple.20equalities/near/417543211\">said</a>:</p>\n<blockquote>\n<p>Right now I have <code>expected token</code> on <code>ᴴ</code> -- are you missing an import or an <code>open</code> or something? I don't know my way around this part of the library.</p>\n</blockquote>\n<p>And yes, I didn't <code>open scoped Matrix</code>. Just added it.</p>",
        "id": 417543381,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706050505
    },
    {
        "content": "<p>If you click on the <code>Eq</code>s in the <code>Trans Eq Eq ?m.176844</code> error, you will see that one is them is equality of two 1x1 complex matrices and the other is equality of two ??s, and Lean doesn't know what the ?? is because it turns out it's confused by lots of things right now. If you add the next line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>then you'll see the errors which are actually confusing Lean (in short: I don't think it can guess what your up-arrows stand for, you are probably going to have to give their types explicitly)</p>",
        "id": 417544267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706050918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/.60calc.60.20failed.20to.20synthesize.20simple.20equalities/near/417544267\">said</a>:</p>\n<blockquote>\n<p>If you click on the <code>Eq</code>s in the <code>Trans Eq Eq ?m.176844</code> error, you will see that one is them is equality of two 1x1 complex matrices and the other is equality of two ??s, and Lean doesn't know what the ?? is because it turns out it's confused by lots of things right now. If you add the next line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>then you'll see the errors which are actually confusing Lean (in short: I don't think it can guess what your up-arrows stand for, you are probably going to have to give their types explicitly)</p>\n</blockquote>\n<p>Yeah, thanks! It's the up-arrows causing all the trouble. I just copied them from the Lean info window.</p>",
        "id": 417545074,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706051322
    },
    {
        "content": "<p>yeah, unfortunately life isn't so easy: the prettyprinter is printing up-arrows so as not to hurt your brain, but it doesn't always round-trip because lean can't guess where you're coercing to (for example if (0 : Nat) then <code>\\u 0</code> could be Int, Rat, Real, Complex, p-adic numbers, quaternions, any ring, any additive abelian group...</p>",
        "id": 417546172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706051899
    },
    {
        "content": "<p>A further question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.UnitaryGroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">norm_vec</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">u_op</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):=</span> <span class=\"n\">Matrix.unitaryGroup</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_norm_vec_iff</span> <span class=\"o\">{</span><span class=\"n\">ψ</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">}:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">norm_vec</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">unitary_preserve_vectors</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span><span class=\"o\">:</span> <span class=\"n\">u_op</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">norm_vec</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">U.1</span> <span class=\"bp\">*</span> <span class=\"n\">s.1</span> <span class=\"bp\">∈</span> <span class=\"n\">norm_vec</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">d</span> <span class=\"n\">U</span> <span class=\"n\">s</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_norm_vec_iff</span><span class=\"o\">]</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">U.1</span> <span class=\"bp\">*</span> <span class=\"n\">s.1</span><span class=\"o\">)</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">U.1</span> <span class=\"bp\">*</span> <span class=\"n\">s.1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.1</span><span class=\"o\">)</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">U.1</span><span class=\"o\">)</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">U.1</span> <span class=\"bp\">*</span> <span class=\"n\">s.1</span><span class=\"o\">):=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.1</span><span class=\"o\">)</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">U.1</span><span class=\"o\">)</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">U.1</span> <span class=\"bp\">*</span> <span class=\"n\">s.1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Matrix.mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.1</span><span class=\"o\">)</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">U.1</span><span class=\"o\">)</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">U.1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">s.1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Matrix.mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.1</span><span class=\"o\">)</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">s.1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"bp\">```</span>\n\n<span class=\"n\">On</span> <span class=\"n\">the</span> <span class=\"n\">last</span> <span class=\"n\">line</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">I</span> <span class=\"n\">write</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">s.1</span><span class=\"o\">)</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">s.1</span><span class=\"bp\">`</span> <span class=\"n\">or</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">s.1</span><span class=\"o\">)</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">s.1</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">Lean</span> <span class=\"n\">will</span> <span class=\"n\">complain</span> <span class=\"n\">about</span><span class=\"o\">:</span>\n\n<span class=\"bp\">```</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HMul</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"bp\">?</span><span class=\"n\">m.604480</span>\n<span class=\"bp\">```</span>\n\n<span class=\"n\">What</span> <span class=\"n\">is</span> <span class=\"n\">the</span> <span class=\"n\">new</span> <span class=\"n\">problem</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 417547242,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706052430
    },
    {
        "content": "<p>Lean thinks that 1 is a natural number, while it should be a matrix</p>",
        "id": 417547420,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706052521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/.60calc.60.20failed.20to.20synthesize.20simple.20equalities/near/417547420\">said</a>:</p>\n<blockquote>\n<p>Lean thinks that 1 is a natural number, while it should be a matrix</p>\n</blockquote>\n<p>I tried <code>(1 : Matrix (Fin 1) (Fin 1) ℂ) </code> and it still complains..</p>",
        "id": 417547471,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706052551
    },
    {
        "content": "<p>Should it be a d*d matrix?</p>",
        "id": 417547590,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706052607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/.60calc.60.20failed.20to.20synthesize.20simple.20equalities/near/417547590\">said</a>:</p>\n<blockquote>\n<p>Should it be a d*d matrix?</p>\n</blockquote>\n<p>You are right, Thanks!</p>",
        "id": 417547643,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706052649
    },
    {
        "content": "<p>There are so many 1s :-)</p>",
        "id": 417608280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706089563
    }
]