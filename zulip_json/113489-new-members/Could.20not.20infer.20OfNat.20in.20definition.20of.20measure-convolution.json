[
    {
        "content": "<p>I'm trying to define the convolution of measures through Measure.ofMeasurable, but I'm getting a 'failed to synthesise instance' error in my Set.indicator function; what am I doing wrong? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Fourier.FourierTransform</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.MeasureSpaceDef</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Function.Indicator</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">ComplexConjugate</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">convolution</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BorelSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Measure.ofMeasurable</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∫</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Set.indicator</span> <span class=\"bp\">∅</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">∂</span><span class=\"n\">ν</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 410408124,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1703840716
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 410409448,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1703841634
    },
    {
        "content": "<p>Lean doesn't know what type the <code>1</code> should be. What is that type?</p>",
        "id": 410411344,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703842925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Could.20not.20infer.20OfNat.20in.20definition.20of.20measure-convolution/near/410411344\">said</a>:</p>\n<blockquote>\n<p>Lean doesn't know what type the <code>1</code> should be. What is that type?</p>\n</blockquote>\n<p>(extended) real numbers, it’s supposed to give a measure… I’m using the definition based on push forward of group action now, I think that is slightly more useful for what I’m doing!</p>",
        "id": 410413739,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1703844207
    },
    {
        "content": "<p>Are you sure you want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EReal#doc\">docs#EReal</a> and not <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENNReal#doc\">docs#ENNReal</a> ?</p>",
        "id": 410413919,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703844330
    },
    {
        "content": "<p>Did you mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">convolution</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BorelSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Measure.ofMeasurable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∫</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Set.indicator</span> <span class=\"bp\">∅</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">∂</span><span class=\"n\">ν</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>? Though that still doesn't work</p>",
        "id": 410414633,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703844746
    },
    {
        "content": "<p>Yes, ENNReal</p>",
        "id": 410415522,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1703845283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Could.20not.20infer.20OfNat.20in.20definition.20of.20measure-convolution/near/410414633\">said</a>:</p>\n<blockquote>\n<p>Did you mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">convolution</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BorelSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Measure.ofMeasurable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∫</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Set.indicator</span> <span class=\"bp\">∅</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">∂</span><span class=\"n\">ν</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>? Though that still doesn't work</p>\n</blockquote>\n<p>Yes, that placement of brackets is correct indeed, I’ll change it and see if I can figure out what is going wrong</p>",
        "id": 410415668,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1703845341
    },
    {
        "content": "<p>Another problem in your code: <code>Measure.ofMeasurable</code> takes a first argument with type <code>(s : Set α) → MeasurableSet s → ENNReal</code>, but you are using Bochner integrals: they work in a NormedAddCommGroup and ENNReal isn't one. You should use the Lebesgue integral instead, which is ENNReal valued.</p>",
        "id": 410415966,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1703845533
    },
    {
        "content": "<p>A better start:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">convolution</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BorelSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Measure</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Measure.ofMeasurable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"bp\">↦</span> <span class=\"bp\">∫⁻</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∫⁻</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">s.indicator</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">∂</span><span class=\"n\">ν</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 410416118,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1703845620
    },
    {
        "content": "<p>Hmm, that is a bit problematic indeed. I was planning to add convolution of probability measures, so would you suggest first defining convolution of measures in maximum generality (push-forward of the group action) and later-on specialising to NormedAddCommGroup's or using the Bochner integral definition and focusing only on NormedAddCommGroup's?</p>",
        "id": 410419147,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1703847149
    },
    {
        "content": "<p>I don't get what the problem is. You want to define a measure, with values in ENNReal, hence in the code I wrote we use the Lebesgue measure, which takes values in ENNReal. Why do you want to use the Bochner integral?</p>",
        "id": 410419829,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1703847612
    },
    {
        "content": "<p>I'm sorry, my message was a bit vague/confused as I was still wrapping my head around this. Your definition works perfectly fine! I'll try to work out the basic API for convolution of measures; this can then hopefully be used to show that the charFun of the sum of two independent random variables is the product of their charFun's</p>",
        "id": 410420327,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1703847856
    },
    {
        "content": "<p>I'm finding that I need to improve my familiarity with Lean a bit more, I'll probably have to focus on that first for now. I'll get back at defining convolutions when I have a bit more lean-tricks up my sleeve, if someone hasn't added them by then (e.g. for the CLT project)</p>",
        "id": 410438261,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1703860460
    },
    {
        "content": "<p>I would have thought it would be simpler to use as a definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n                              <span class=\"o\">[</span><span class=\"n\">BorelSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Measure.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">G</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1</span> <span class=\"bp\">*</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Measure.prod</span> <span class=\"n\">μ</span> <span class=\"n\">ν</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 410445636,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703865100
    },
    {
        "content": "<p>You are right, that definition is certainly nicer to work with and probably the one we should add to Mathlib and the CLT project; I tried getting the other approach to work today, but I find explicitly working with Lebesgue integrals and series a bit unwieldy in Lean. This may be due to my severe lack of experience with those in Lean. I'll try to write something up for this definition if I have time for this. If someone else wants to add convolutions of measures and basic API, please go ahead!</p>",
        "id": 410446321,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1703865592
    },
    {
        "content": "<p>Incidentally this definition works just fine for monoids with a measurable multiplication structure.  I can't think of an immediate application of this (convolution on the natural numbers or the nonnegative reals, perhaps?), but I thought I'd mention it before anyone gets too deep in building the API in case this extension becomes useful in the future.</p>",
        "id": 410451867,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703868647
    },
    {
        "content": "<p>My work on measure-convolution has been laying around for a bit on <a href=\"https://github.com/leanprover-community/mathlib4/pull/9372\">#9372</a>, I guess the next step would be to show that the integral and <code>Measure.map</code> definitions agree. For the latter I tried working it out, but I had some issues that I could not resolve quickly. I've commented it out for now (this is <a href=\"https://github.com/leanprover-community/mathlib4/pull/9372\">#9372</a>), I'm happy to receive feedback in the meantime (I can also remove it and make a follow-up PR later!)</p>\n<p>I'll make a new Zulip thread for the <code>sorry</code>'s that I couldn't fill in yet</p>",
        "id": 413180550,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1705419146
    }
]