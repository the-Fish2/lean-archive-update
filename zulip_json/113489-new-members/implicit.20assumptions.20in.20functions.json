[
    {
        "content": "<p>Hello<br>\nI Have the following Option like inductive, signifiing the existance of an value for an String</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">W</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Wrap</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">W</span> <span class=\"n\">a</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">Empty</span><span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"n\">a</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">wrap</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">W</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">Wrap</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_empty</span><span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Wrap</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Empty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">unwrap</span> <span class=\"o\">(</span><span class=\"n\">wrapped</span><span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"n\">is_empty</span> <span class=\"n\">wrapped</span><span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">wrapped</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">W.Wrap</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">v</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test_empty</span><span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"n\">Unit</span> <span class=\"s2\">\"bob\"</span> <span class=\"o\">:=</span> <span class=\"n\">W.Empty</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">un_test</span> <span class=\"o\">:=</span> <span class=\"n\">unwrap</span> <span class=\"o\">(</span><span class=\"n\">wrap</span> <span class=\"mi\">4</span> <span class=\"s2\">\"bob\"</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">def</span> <span class=\"n\">un_empty_test</span> <span class=\"o\">:=</span> <span class=\"n\">unwrap</span> <span class=\"n\">test_empty</span> <span class=\"c1\">-- cannot unwrap empty</span>\n</code></pre></div>\n<p>unwrapping a \"W a s\" value requires a proof that is not empty to safely do so.<br>\ni now want to define a function similar to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">UnwrapT</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>   <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">W</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>that maps a String to the Type of functions that can unwrap a \"W a s\". I also want to encode in \"UnwrapT\"  that the assumption (!is_empty) holds for the values being unwrapped, but dont know how.</p>\n<p>also is there a nicer way to express my is_empty predicate?</p>",
        "id": 418267729,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1706272843
    }
]