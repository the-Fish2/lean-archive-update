[
    {
        "content": "<p>So I noticed that <code>List.findIdx?_of_eq_some</code> returned proof of a match statement. It looks close to what I need, but I'm not sure whether it really is as I'm not sure how to think about interacting with a term like this.</p>\n<p>My Proof state is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"k\">match</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">LE.le</span> <span class=\"n\">l.idxs</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">a_1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.l</span><span class=\"o\">[</span><span class=\"n\">a_1</span><span class=\"o\">]</span> <span class=\"bp\">==</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">l.l</span><span class=\"o\">[(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">LE.le</span> <span class=\"n\">l.idxs</span><span class=\"o\">)[</span><span class=\"n\">i</span><span class=\"o\">]]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>I could create a more minimal example, but I'm not sure if this even a helpful direction to explore in the first place.</p>",
        "id": 421077170,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1707755670
    },
    {
        "content": "<p>This goal looks provable from <code>h</code>. There's a handy tactic for this sort of situation called <code>split</code>. <code>split at h</code> should get you pretty close.</p>",
        "id": 421082671,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707757196
    },
    {
        "content": "<p>:) thanks. That looks promising!</p>",
        "id": 421083706,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1707757467
    },
    {
        "content": "<p>What <code>split</code> does under the hood is case analysis on the discriminant of the <code>match</code> (the value being inspected). You could do that manually too. If the discriminant was just a variable, it would be easy: just <code>cases</code>, but here since it's a more complicated expression you would need to use <code>cases h2 : List.get? (Finset.sort LE.le l.idxs) i</code>. That would give you hypotheses like <code>h2 : List.get? (Finset.sort LE.le l.idxs) i = some x</code> which you could use with <code>simp [h2] at h</code></p>",
        "id": 421087089,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707758441
    },
    {
        "content": "<p>I didn't realize you could do that with cases, though I suppose that makes sense if I stare at it before a bit. It would be like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">LE.le</span> <span class=\"n\">l.idxs</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n<span class=\"n\">cases</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 421088934,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1707758967
    },
    {
        "content": "<p>Yeah although I think <code>cases</code> on <code>h2</code> there would cause Lean to forget how h2 was defined, losing your desired equation. <code>generalize</code> is more appropriate</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">generalize</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">LE.le</span> <span class=\"n\">l.idxs</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">discr</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">cases</span> <span class=\"n\">discr</span>\n</code></pre></div>",
        "id": 421090551,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707759399
    },
    {
        "content": "<p>I see what you mean</p>",
        "id": 421091314,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1707759608
    }
]