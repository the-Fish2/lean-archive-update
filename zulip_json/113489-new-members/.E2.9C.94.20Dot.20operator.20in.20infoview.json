[
    {
        "content": "<p>When types are displayed in the VSCode infoview, then function applications are presented in expanded form. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">),</span> <span class=\"n\">el</span><span class=\"bp\">✝</span> <span class=\"bp\">∈</span> <span class=\"n\">aux</span> <span class=\"n\">f</span> <span class=\"n\">els</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">Prod.nth</span> <span class=\"n\">p</span> <span class=\"n\">dim</span> <span class=\"bp\">≤</span> <span class=\"n\">Prod.nth</span> <span class=\"o\">(</span><span class=\"n\">Box.lo</span> <span class=\"o\">(</span><span class=\"n\">Element.box</span> <span class=\"n\">el</span><span class=\"bp\">✝</span><span class=\"o\">))</span> <span class=\"n\">dim</span>\n</code></pre></div>\n<p>However, I would prefer the types be displayed using the dot operator, which would make the types more readable (for me at least). So this would become:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">),</span> <span class=\"n\">el</span><span class=\"bp\">✝</span> <span class=\"bp\">∈</span> <span class=\"n\">aux</span> <span class=\"n\">f</span> <span class=\"n\">els</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p.nth</span> <span class=\"n\">dim</span> <span class=\"bp\">≤</span> <span class=\"n\">el</span><span class=\"bp\">✝.</span><span class=\"n\">box.lo.nth</span> <span class=\"n\">dim</span>\n</code></pre></div>\n<p>Is there a configuration setting that would enable this?</p>",
        "id": 437889108,
        "sender_full_name": "Will Crichton",
        "timestamp": 1715289865
    },
    {
        "content": "<p>This should be the case in Lean 4.8.0-rc1 (though there's a bug where dot notation inhibits some user notations, but the fix for that will be in 4.8.0-rc2)</p>",
        "id": 437889678,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715290165
    },
    {
        "content": "<p>In the meantime, if you're using mathlib, you can use the <code>@[pp_dot]</code> attribute on definitions that you want to use dot notation, though this will be removed soon in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12609\">#12609</a></p>",
        "id": 437889870,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715290241
    },
    {
        "content": "<p>Ok great, I will just update to the latest Lean. Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>.</p>",
        "id": 437891913,
        "sender_full_name": "Will Crichton",
        "timestamp": 1715291260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"625391\">Will Crichton</span> has marked this topic as resolved.</p>",
        "id": 437891918,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715291263
    },
    {
        "content": "<p>Afaik <code>@[pp_dot]</code> is now enabled by default? Sometimes it still doesn't quite work properly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"n\">X</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">toBar</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">foo</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">toBar</span><span class=\"w\"> </span><span class=\"c1\">-- prints `Foo.toBar foo` instead of `foo.toBar`</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">pp_dot</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">toBar'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">foo</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">toBar'</span><span class=\"w\"> </span><span class=\"c1\">-- prints `foo.toBar'` but warns that @[pp_dot] is deprecated</span>\n</code></pre></div>",
        "id": 443824562,
        "sender_full_name": "David Ang",
        "timestamp": 1718040909
    },
    {
        "content": "<p>Sorry, maybe this is more appropriate in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> or another stream...</p>",
        "id": 443824944,
        "sender_full_name": "David Ang",
        "timestamp": 1718041019
    },
    {
        "content": "<p>There's a question whether dot notation would be proper here. The <code>Foo.toBar</code> function doesn't take an argument that's literally <code>Foo.Bar</code>. Here's the comment deep inside the pretty printer for why there's this restriction, in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.PrettyPrinter.Delaborator.generalizedFieldInfo#doc\">docs#Lean.PrettyPrinter.Delaborator.generalizedFieldInfo</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">-- We require an exact match for the base name.</span>\n<span class=\"w\">        </span><span class=\"c1\">-- While `Lean.Elab.Term.resolveLValLoop` is able to unfold the type and iterate, we do not attempt to exploit this feature.</span>\n<span class=\"w\">        </span><span class=\"c1\">-- (To get it right, we would need to check that each relevant namespace does not contain a declaration named `field`.)</span>\n</code></pre></div>\n<p>The issue is that it would need to mirror the elaborator logic around how definitions are unfolded when resolving dot notation, which is not so straightforward.</p>",
        "id": 443827628,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718041548
    },
    {
        "content": "<p>The <code>@[pp_dot]</code> attribute doesn't make sure what it's doing is safe. Now what's going on is that the delaborator itself is able to make use of dot notation, and it can reason about types to make sure it's valid.</p>",
        "id": 443828786,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718041711
    }
]