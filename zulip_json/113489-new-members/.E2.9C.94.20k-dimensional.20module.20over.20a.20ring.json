[
    {
        "content": "<p>If I have a <code>Ring t</code>, what's the right way to 'build' a k-dimensional module over that ring?<br>\nUltimately my goal is write something like<br>\n<code>def multiarg_function_is_affine [Ring t] {k : Nat} (f : (Fin k → t) → t) : Prop :=\n     sorry</code><br>\nwhere the definition will look something like<br>\n<code> := ∃ (a : AffineMap k (t^k) t),\n     ∀ (vals : Fin k → t)  : f vals = a ↑vals </code></p>",
        "id": 418519564,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706462343
    },
    {
        "content": "<p>Here <code>(Fin k → t)</code> is basically the same as <code>Vector k t</code> I guess. The <code>t^k</code> and <code>↑vals</code> are the parts where I'm not sure what the real notation would be.</p>",
        "id": 418519592,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706462387
    },
    {
        "content": "<p>By <code>t^k</code>, I mean that I want to build a type <code>M</code> with <code>[AddCommGroup M] [Module t M] [AddTorsor M t]</code>, I think? And have it have rank <code>k</code>.</p>",
        "id": 418519730,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706462492
    },
    {
        "content": "<p>And then the <code>↑vals</code> would be some canonical injection from <code>Fin k → t</code> to <code>M</code> that would be \"use this list of coefficients to write it in the canonical basis\"</p>",
        "id": 418519768,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706462523
    },
    {
        "content": "<p>On mobile now, but you can use <code>Module.free</code> to assume your module is free, and <code>FiniteDimensional.finrank</code> for the rank</p>",
        "id": 418520018,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706462729
    },
    {
        "content": "<p>You can also fix a basis if you prefer</p>",
        "id": 418520029,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706462740
    },
    {
        "content": "<p>Right, so I found both of those, but those seem more like ways to characterize a module -- they're Prop's, right? I don't actually really know how to _make_ the module. I'm guessing there's some way I could give it <code>Fin k</code> as a basis type or something, but I don't know how, and I thought there might be some existing things to characterize the resulting module better if I go through the 'preferred' API</p>",
        "id": 418520126,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706462813
    },
    {
        "content": "<p>It might be best if I just \"define\" my affine functions as obeying <br>\n<a href=\"/user_uploads/3121/MmAgU8aXWTZ0Dez3U_j5J4XG/image.png\">image.png</a><br>\nand then add a theorem stating that this is equivalent to there existing an equal AffineMap<br>\n(actually that image isn't quite it, it should be <code>f(...) - f(...) = c  -&gt;   f(...) - f(...) = c</code>. This image was copied from a definition for F2.)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/MmAgU8aXWTZ0Dez3U_j5J4XG/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/MmAgU8aXWTZ0Dez3U_j5J4XG/image.png\"></a></div>",
        "id": 418520175,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706462855
    },
    {
        "content": "<p>You are fine with <code>Fin k -&gt; t</code>, or you can use <code>\\iota -&gt; t</code> with <code>Finite \\iota</code> and <code>Nat.card \\iota = k</code> if you like.</p>",
        "id": 418520250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706462895
    },
    {
        "content": "<p>Alright -- but how do I actually construct a module using <code>Fin k -&gt; t</code>?</p>",
        "id": 418665300,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706543108
    },
    {
        "content": "<p>the typeclass instance should be inferred automatically:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">37</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 418666299,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706543394
    },
    {
        "content": "<p>Ah, thanks. I didn't realize that. Chasing it around a bit, I was having some other 'secret' autoImplicit mistakes where my index type <code>\\iota</code> was being defined as a <code>Prop</code> instead of a <code>Type*</code> and that was messing things up. All good now. Thanks</p>",
        "id": 418667511,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706543735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> has marked this topic as resolved.</p>",
        "id": 418667522,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706543740
    }
]