[
    {
        "content": "<p>same as the title, I was looking at Json serializer and it use lazy</p>\n<div class=\"codehilite\" data-code-language=\"Idris\"><pre><span></span><code><span class=\"kr\">public</span><span class=\"w\"> </span><span class=\"kr\">export</span>\n<span class=\"nf\">orElse</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"kt\">Either</span><span class=\"w\"> </span>a<span class=\"w\"> </span>b<span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Lazy</span><span class=\"w\"> </span><span class=\"ow\">(</span><span class=\"kt\">Either</span><span class=\"w\"> </span>a<span class=\"w\"> </span>b<span class=\"ow\">)</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Either</span><span class=\"w\"> </span>a<span class=\"w\"> </span>b\norElse<span class=\"w\"> </span>r<span class=\"ow\">@(</span><span class=\"kt\">Right</span><span class=\"w\"> </span><span class=\"kr\">_</span><span class=\"ow\">)</span><span class=\"w\"> </span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span>r\norElse<span class=\"w\"> </span><span class=\"kr\">_</span><span class=\"w\">           </span>v<span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span>v\n\n<span class=\"kr\">public</span><span class=\"w\"> </span><span class=\"kr\">export</span>\n<span class=\"ow\">(&lt;|&gt;)</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span>v<span class=\"w\"> </span>a<span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span>v<span class=\"w\"> </span>a<span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span>v<span class=\"w\"> </span>a\nf<span class=\"w\"> </span><span class=\"ow\">&lt;|&gt;</span><span class=\"w\"> </span>g<span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"ow\">\\</span>vv<span class=\"w\"> </span><span class=\"ow\">=&gt;</span><span class=\"w\"> </span>f<span class=\"w\"> </span>vv<span class=\"w\"> </span>`orElse`<span class=\"w\"> </span>g<span class=\"w\"> </span>vv\n</code></pre></div>\n<p>is there something similar in lean?</p>",
        "id": 433194937,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1713153284
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Thunk#doc\">docs#Thunk</a></p>",
        "id": 433194975,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713153326
    },
    {
        "content": "<p>Ah thanks!!</p>",
        "id": 433194981,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1713153335
    },
    {
        "content": "<p>Though that's if you want to save the result. If you just want a one-shot lazy value, you may as well use <code>Unit -&gt; a</code></p>",
        "id": 433195048,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713153364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/is.20there.20a.20way.20to.20do.20lazy.20computation.20in.20lean/near/433195048\">said</a>:</p>\n<blockquote>\n<p>Though that's if you want to save the result. If you just want a one-shot lazy value, you may as well use <code>Unit -&gt; a</code></p>\n</blockquote>\n<p>ok so it's  similar to ocaml, got it</p>",
        "id": 433195109,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1713153406
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HOrElse.hOrElse#doc\">docs#HOrElse.hOrElse</a> uses that</p>",
        "id": 433195111,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713153408
    },
    {
        "content": "<p>this is giving me error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HOrElse.hOrElse</span> <span class=\"o\">(</span><span class=\"n\">Either</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Thunk.pure</span> <span class=\"o\">(</span><span class=\"n\">Either</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>It seems right to me but the compiler doesn't</p>",
        "id": 433196720,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1713154545
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">HOrElse.hOrElse</span> <span class=\"o\">(</span><span class=\"n\">Either</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Thunk.pure</span> <span class=\"o\">(</span><span class=\"n\">Either</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">))</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Thunk.pure</span> <span class=\"o\">(</span><span class=\"n\">Either</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Thunk</span> <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Unit</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">?</span><span class=\"n\">m.1635</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.1632</span>\n</code></pre></div>",
        "id": 433196777,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1713154577
    },
    {
        "content": "<p>created an either type and implemented hOrElse</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">hOrElse</span>\n  <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Either</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Thunk</span> <span class=\"o\">(</span><span class=\"n\">Either</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">)}</span>\n  <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Either</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">e‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Either.Right</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Either.Right</span> <span class=\"n\">r</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span>\n</code></pre></div>\n<p>but I am getting an error where <code>a</code> has to be a type but is <code>Either a b</code> isn't Either a type if I have defined it as an inductive type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Either</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Left</span>  <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Either</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Right</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Either</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span>\n</code></pre></div>",
        "id": 433204804,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1713160304
    },
    {
        "content": "<p>Either is builtin, it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sum#doc\">docs#Sum</a></p>",
        "id": 433219943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713166115
    },
    {
        "content": "<p>Oh ok, sorry. Thanks for the help <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 433220054,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1713166157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar ü¶Ä (he/him)</span> <a href=\"#narrow/stream/113489-new-members/topic/is.20there.20a.20way.20to.20do.20lazy.20computation.20in.20lean/near/433204804\">said</a>:</p>\n<blockquote>\n<p>I am getting an error where <code>a</code> has to be a type but is <code>Either a b</code> isn't Either a type</p>\n</blockquote>\n<p>The error doesn't say \"<code>Either</code> isn't a type\", it says \"<code>a</code> isn't a type\".</p>",
        "id": 433220147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713166193
    },
    {
        "content": "<p><code>Nat</code> is a type and <code>37</code> is a <code>Nat</code> but <code>37</code> is not a type</p>",
        "id": 433220288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713166227
    },
    {
        "content": "<p>Though give the orElse semantics you want, you might  want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Except#doc\">docs#Except</a> instead of Sum</p>",
        "id": 433220615,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713166335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar ü¶Ä (he/him)</span> <a href=\"#narrow/stream/113489-new-members/topic/is.20there.20a.20way.20to.20do.20lazy.20computation.20in.20lean/near/433196720\">said</a>:</p>\n<blockquote>\n<p>this is giving me error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HOrElse.hOrElse</span> <span class=\"o\">(</span><span class=\"n\">Either</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Thunk.pure</span> <span class=\"o\">(</span><span class=\"n\">Either</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>It seems right to me but the compiler doesn't</p>\n</blockquote>\n<p>Here's a hint: move your mouse over <code>HOrElse.hOrElse</code>. What's its type? Is it actually a typeclass?</p>",
        "id": 433376666,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713211524
    }
]