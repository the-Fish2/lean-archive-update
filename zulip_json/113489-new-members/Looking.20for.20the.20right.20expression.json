[
    {
        "content": "<p>If I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">TPoint</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">τ</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">τ</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>then I can write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nw</span> <span class=\"o\">:</span> <span class=\"n\">TPoint</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"k\">#eval</span> <span class=\"n\">nw</span>\n</code></pre></div>\n<p>My question is what expression should I <code>#eval</code> to get the <code>TPoint Int</code> with coordinates <code>-1</code> and <code>1</code>? I've tried several combinations and none worked. Among them, <code>#eval TPoint.mk Int (-1) 1</code>.</p>",
        "id": 434529199,
        "sender_full_name": "Leandro Caniglia",
        "timestamp": 1713642696
    },
    {
        "content": "<p>Here's an option:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">TPoint</span> <span class=\"n\">Int</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 434529346,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713642831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Looking.20for.20the.20right.20expression/near/434529346\">said</a>:</p>\n<blockquote>\n<p><code>#eval {x := -1, y := 1 : TPoint Int}</code></p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 434529449,
        "sender_full_name": "Leandro Caniglia",
        "timestamp": 1713642928
    },
    {
        "content": "<p>My follow up question would be whether we have some form of <code>mk</code> for <code>TPoint Int</code>.</p>",
        "id": 434529680,
        "sender_full_name": "Leandro Caniglia",
        "timestamp": 1713643150
    },
    {
        "content": "<p>You should be able to write <code>(TPoint.mk (-1) 1 : TPoint Int)</code>. Or, you could probably do <code>@TPoint.mk Int (-1) 1</code></p>",
        "id": 434532195,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713645594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Looking.20for.20the.20right.20expression/near/434532195\">said</a>:</p>\n<blockquote>\n<p><code>TPoint.mk (-1) 1 : TPoint Int</code></p>\n</blockquote>\n<p>I see. Those are the expressions I was trying to find. Thanks again.</p>",
        "id": 434532977,
        "sender_full_name": "Leandro Caniglia",
        "timestamp": 1713646373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  Are the parameters to a structure (so in this case  <code>τ : Type</code>) always implicit values in the constructor? It looks like this compiles fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">TPoint</span> <span class=\"o\">{</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">τ</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">τ</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>Is there a difference in this case?</p>\n<hr>\n<p><span class=\"user-mention\" data-user-id=\"705962\">@Leandro Caniglia</span>  As an aside, the following works for me too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">TPoint.mk</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 434741868,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1713790548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"664276\">Treq</span> <a href=\"#narrow/stream/113489-new-members/topic/Looking.20for.20the.20right.20expression/near/434741868\">said</a>:</p>\n<blockquote>\n<p><code>#eval TPoint.mk (-1 : Int) 1</code></p>\n</blockquote>\n<p>Interestingly, <code>#eval TPoint.mk (-1) 1</code> also works. It looks like there is some sort of type inference in place and we don't  need to specify it. However, <code>#eval TPoint.mk 1 1</code> would infer <code>τ </code> to be <code>Nat</code>, which might not be the desired type.</p>\n<p>What I don't understand is why <code>#eval TPoint.mk Int 1 1</code> doesn't work. I find it quite confusing.</p>",
        "id": 434843331,
        "sender_full_name": "Leandro Caniglia",
        "timestamp": 1713818962
    },
    {
        "content": "<p>Do you understand implicit vs explicit arguments? Take a look at <code>#check TPoint.mk</code> (or hover over <code>TPoint.mk</code>) to see which arguments are explicit and which are explicit.</p>",
        "id": 434843594,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713819050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"664276\">@Treq</span> Parameters are always implicit for each of the projections, so making it implicit makes no difference there, but generally <code>structure TPoint {τ : Type} where</code> is not a good idea because then you can almost never write <code>TPoint</code> by itself for the type. You need to write <code>@TPoint Int</code> or <code>TPoint (τ := Int)</code> .</p>",
        "id": 434843973,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713819182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Looking.20for.20the.20right.20expression/near/434843594\">said</a>:</p>\n<blockquote>\n<p>Do you understand implicit vs explicit arguments?</p>\n</blockquote>\n<p>Not yet. However, after you suggestion I tried <code>#eval TPoint.mk (τ := Int) 3 4</code> and I got the intended <code>TPoint Int</code>. I guess this will get clearer as I progress in the book.</p>",
        "id": 434845369,
        "sender_full_name": "Leandro Caniglia",
        "timestamp": 1713819697
    },
    {
        "content": "<p>Curly brace arguments (implicit arguments) are not passed to functions explicitly, and they're meant to be inferred from the other arguments, or from the return type itself. In functions, most commonly they're used for type parameters.</p>",
        "id": 434845794,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713819836
    },
    {
        "content": "<p>I suppose the final detail to add here is that implicit arguments can be given explicitly by either using <code>@</code> before a function call or passing it as a named parameter. Hense <code>@TPoint.mk ℤ</code> or <code>TPoint.mk (τ := ℤ)</code></p>",
        "id": 434985135,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1713878863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"664276\">Mark Fischer</span> <a href=\"#narrow/stream/113489-new-members/topic/Looking.20for.20the.20right.20expression/near/434985135\">said</a>:</p>\n<blockquote>\n<p>Hence <code>@TPoint.mk ℤ</code> or <code>TPoint.mk (τ := ℤ)</code></p>\n</blockquote>\n<p>This is a useful clarification to my question. Thanks.</p>",
        "id": 435032878,
        "sender_full_name": "Leandro Caniglia",
        "timestamp": 1713892887
    }
]