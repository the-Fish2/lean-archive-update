[
    {
        "content": "<p>I want to understand how <code>deriving Fintype</code> creates <code>elems</code> and <code>complete</code>.</p>\n<p>How can I find that code?</p>\n<p>More generally, for any class, how can I find the code that defines what happens when we <code>deriving</code> that class?</p>",
        "id": 445637431,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1718810478
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.elabDeriving#doc\">docs#Lean.Elab.elabDeriving</a> is a good plan to start pulling</p>",
        "id": 445638275,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718810757
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 445638535,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1718810813
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/DeriveFintype.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/DeriveFintype.lean</a></p>",
        "id": 445657936,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718815716
    },
    {
        "content": "<p>It uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.ofEquiv#doc\">docs#Fintype.ofEquiv</a> with the <code>proxy_equiv%</code> elaborator (see the imports).</p>",
        "id": 445658380,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718815830
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/DeriveFintype.lean#L91-L102\">This</a> is the main code. The next function is just to make an efficient <code>Fintype</code> instance with a known-at-compile-time list of all elements for \"enum\" <code>inductive</code> types (types whose constructors all have no arguments).</p>",
        "id": 445658841,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718815943
    }
]