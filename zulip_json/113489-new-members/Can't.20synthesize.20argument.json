[
    {
        "content": "<p>I have a proof with a few assumptions (as variables) that are used in all the lemmas, and I can't get to a point where I don't have to explicitely write them every time I use something I proved. I thought something like this would work (so for example I wouldn't have to add <code>h</code> as an argument everywhere I use <code>t</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">t</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>but it doesn't. Even if I replace the last line with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">t</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">P</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>it fails, with the funny looking context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">P</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Why doesn't this work? And is there a better way to add some variables as hypotheses throughtout a section and not have to ever pass them as arguments explicitly?</p>",
        "id": 439375150,
        "sender_full_name": "Nir Paz",
        "timestamp": 1716057912
    },
    {
        "content": "<p>The issue is that it can't infer the proof of <code>P a</code> using only unification. If you change it like so, you can pass <code>h</code> in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">t</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 439375711,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716058472
    },
    {
        "content": "<p>This is likely not a good idea, but you can configure the <code>h</code> argument to have a tactic it tries to run to fill itself in.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 439375751,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716058533
    },
    {
        "content": "<p>(For both of these, make sure to check out the type of <code>t</code> to see what's going on.)</p>",
        "id": 439375755,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716058544
    },
    {
        "content": "<p>I didn't know about running tactics like this, that's really cool! It seems to not work in more complicated cases when it's not the last argument to a theorem.</p>\n<p>I might post the full code on another stream, but basically I do some constructions on a linear order that satisfies a condition <code>h</code>, so I make variables for a type, a linear order on it, and the assumption <code>h</code> about it. If I make <code>h</code> is explicit, I have to write it every time I use a previous construction when defining the next one (defining it with a tactic like this doesn't work because there are other arguments) which ends up being dozens of times. And defining it implicitly just doesn't work.</p>",
        "id": 439379612,
        "sender_full_name": "Nir Paz",
        "timestamp": 1716062632
    }
]