[
    {
        "content": "<p>Below is a proof of the statement that <code>Finset.map f List.toFinset = List.toFinset (List.map f</code>. But I'm curious whether this result, which to my understanding of category theory applied to type theory is a fact about toFinset being a natural transformation from List to Finset, can be proved automatically by functoriality/natural transformation reasons?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">list_map_toFinset</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">Finset.map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">List.toFinset</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">List.toFinset</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list_map_toFinset</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 410240173,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1703738105
    },
    {
        "content": "<p>I don't think so. Such proofs can often be handled by (a variant of) <code>aesop</code>. But they still require proofs, and especially for concrete instances of natural transformations there is not really some magic that golfs away the proofs.</p>",
        "id": 410249229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703743944
    },
    {
        "content": "<p>Thanks for the aesop suggestion. I guess my question was really whether toFinset was defined as a natural transformation in lean or not. So that the work can be done once in Mathlib and used elsewhere. I guess the answer is no. By the way I am not really understanding why <a href=\"http://Finset.map\">Finset.map</a> requires the map of types to be injective.</p>",
        "id": 410249654,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1703744275
    },
    {
        "content": "<p>That's for computability reasons. There is also <code>Finset.image</code>.</p>",
        "id": 410252748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703746522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"662620\">Andy Jiang</span> has marked this topic as resolved.</p>",
        "id": 410329753,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703789206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Proof.20by.20functoriality.3F/near/410252748\">said</a>:</p>\n<blockquote>\n<p>That's for computability reasons. There is also <code>Finset.image</code>.</p>\n</blockquote>\n<p>Is it possible to elaborate on this. So it's not possible to prove that Finset.image and <a href=\"http://Finset.map\">Finset.map</a> have the same outputs for instance?</p>",
        "id": 410329822,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1703789257
    },
    {
        "content": "<p>It is, but <code>Finset.image</code> only works when you know how to deduplicate elements in the codomain.</p>",
        "id": 410329926,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703789328
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.image#doc\">docs#Finset.image</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.map#doc\">docs#Finset.map</a> have different assumptions</p>",
        "id": 410329937,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703789341
    },
    {
        "content": "<p>.. and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.map_eq_image#doc\">docs#Finset.map_eq_image</a> combines the assumptions (DecidableEq and ↪)</p>",
        "id": 410330100,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703789439
    },
    {
        "content": "<p>Ah I see thanks.</p>",
        "id": 410342680,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1703798023
    }
]