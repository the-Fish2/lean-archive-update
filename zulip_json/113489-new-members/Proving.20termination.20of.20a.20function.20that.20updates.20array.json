[
    {
        "content": "<p>I have the following functions.. Lean requires a proof of termination for <code>set_elements</code> and failed to synthesize one.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">set_elements</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">index</span> <span class=\"bp\">&lt;</span> <span class=\"n\">arr.size</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">arr.size</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">index</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"n\">set_elements</span> <span class=\"o\">(</span><span class=\"n\">arr.set</span><span class=\"bp\">!</span> <span class=\"n\">idx</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">arr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set_one</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">set_elements</span> <span class=\"n\">arr</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>So I am using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arr.size</span> <span class=\"bp\">-</span> <span class=\"n\">index</span>\n</code></pre></div>\n<p>However, as the arr is changed in every recursive call, this is not enough.<br>\nSo, I proved the following and try to use this property to argue for the termination:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">array_size_same_after_set</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">arr.size</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">arr.set</span> <span class=\"n\">index</span> <span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"n\">arr.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Array.set</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Fin.val</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">List.set</span>\n  <span class=\"n\">split</span>\n  <span class=\"n\">case</span> <span class=\"n\">h_1</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp_all</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Array.size</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">heq1</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">heq2</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">heq2</span><span class=\"o\">]</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">List.length</span>\n    <span class=\"n\">split</span>\n    <span class=\"n\">case</span> <span class=\"n\">h_1</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span>\n    <span class=\"n\">case</span> <span class=\"n\">h_2</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span>\n  <span class=\"n\">case</span> <span class=\"n\">h_2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Array.size</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">heq1</span><span class=\"bp\">;</span> <span class=\"n\">rename_i</span> <span class=\"n\">heq2</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">heq2</span><span class=\"o\">]</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">List.length</span>\n    <span class=\"n\">split</span>\n    <span class=\"n\">case</span> <span class=\"n\">h_1</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span>\n    <span class=\"n\">case</span> <span class=\"n\">h_2</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span>\n\n  <span class=\"n\">case</span> <span class=\"n\">h_3</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Array.size</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>here is my attempt to use the property of array_size_same_after_set.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">decreasing_by</span>\n  <span class=\"k\">let</span> <span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">arr.size</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">index</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">size_unchanged</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">arr.set</span> <span class=\"n\">idx</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"n\">arr.size</span> <span class=\"o\">:=</span> <span class=\"n\">array_size_same_after_set</span> <span class=\"n\">arr</span> <span class=\"n\">idx</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>However, I do not understand how to proceed to complete the termination proof.</p>",
        "id": 419873604,
        "sender_full_name": "Muqsit Azeem",
        "timestamp": 1707148961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  Array.size (Array.set _ _ _) = _</p>",
        "id": 419888594,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707152925
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Array/Basic.html#Array.size_set\">Array.size_set</a></p>",
        "id": 419888598,
        "sender_full_name": "loogle",
        "timestamp": 1707152927
    },
    {
        "content": "<p>Your code uses <code>Array.set!</code>, but your lemma is about <code>Array.set</code>. Maybe that is the issue? Why not use <code>Array.set</code>?</p>",
        "id": 419888997,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707153039
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set_elements</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">index</span> <span class=\"bp\">&lt;</span> <span class=\"n\">arr.size</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">arr.size</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">index</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"n\">set_elements</span> <span class=\"o\">(</span><span class=\"n\">arr.set</span> <span class=\"n\">idx</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">arr</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">arr.size</span> <span class=\"bp\">-</span> <span class=\"n\">index</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"n\">omega</span>\n</code></pre></div>\n<p>It does not work with <code>Array.set!</code>, because the API for <code>Array.set!</code> is unfortunately incomplete.<br>\nNote that <code>simp_wf</code> happens to apply <code>Array.size_set</code> already (although I think that’s not actually desirable and would prefer to have to write <code>simp</code> separately).<br>\nIn a future version of lean, <code>omega</code> will be part of the default termination check and this might all work out of the box.</p>",
        "id": 419889435,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707153188
    },
    {
        "content": "<p>Thank you, <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> ! It works.</p>",
        "id": 419911706,
        "sender_full_name": "Muqsit Azeem",
        "timestamp": 1707161016
    }
]