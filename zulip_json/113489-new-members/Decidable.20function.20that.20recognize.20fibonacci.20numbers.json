[
    {
        "content": "<p>I want to create decidable function that recognize if a number is part of the fibonacci sequence or not, and I want to prove the function is correct. So far this is what I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Fib.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isFib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Nat.fib</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">isFibDecidable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iter</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n  <span class=\"n\">where</span>\n    <span class=\"n\">iter</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n      <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n        <span class=\"n\">true</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n        <span class=\"n\">false</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">iter</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isFibDecidableCorrect</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">isFibDecidable</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">↔</span> <span class=\"n\">isFib</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<ul>\n<li>1) How to provide a termination proof for <code>isFibDecidable</code> if I remove the <code>partial</code> keyword? </li>\n<li>2) I'm not sure where to begin the proof for <code>isFibDecidableCorrect</code> since I need to deal with a recursive function and <code>if/then/else</code> statement.</li>\n</ul>",
        "id": 422784254,
        "sender_full_name": "Marcelo Fornet",
        "timestamp": 1708596492
    },
    {
        "content": "<p>You might find it easier to skip the bool function and jump straight to showing <code>DecidablePred isFib</code></p>",
        "id": 422792591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708599669
    },
    {
        "content": "<p>Where you use .isFalse and .isTrue instead of false and true</p>",
        "id": 422792683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708599709
    },
    {
        "content": "<p>Just for the sake of testing I got to this point</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isFibIsDecidable</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"n\">isFib</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Decidable.isTrue</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Decidable.isTrue</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I guess that if a prove the following lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">isNotFib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">Nat.fib</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.fib</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">isFib</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>then I can loop through all values of k until either I found a value such that it is fib, or that it triggers the lemma <code>isNotFib</code>.</p>\n<p>The main question now is how can I loop (or do recursion) inside the theorem <code>isFibIsDecidable</code></p>",
        "id": 422801941,
        "sender_full_name": "Marcelo Fornet",
        "timestamp": 1708603344
    },
    {
        "content": "<p>It should be a <code>def</code> not a <code>theorem</code>; and you can write it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isFibIsDecidable</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"n\">isFib</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Decidable.isTrue</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Decidable.isTrue</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>  <span class=\"c1\">-- use `isFibIsDecidable n` or similar as necessary</span>\n</code></pre></div>",
        "id": 422806553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708605088
    },
    {
        "content": "<p>Which is to say; you can recurse in exactly the same way you did in <code>isFibDecidable </code>, you're just replacing <code>Bool</code> with <code>Decidable (isFib n)</code></p>",
        "id": 422806677,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708605127
    },
    {
        "content": "<p>The chapter on <a href=\"https://lean-lang.org/theorem_proving_in_lean4/induction_and_recursion.html\">induction_and_recursion</a> in theorem proving in lean should be helpfull here too.</p>",
        "id": 422808409,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1708605765
    },
    {
        "content": "<p>one approach you could take is to prove <code>∀ n, ∃ k, Nat.fib k ≥ n</code> and use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.find#doc\">docs#Nat.find</a> to find the least such value of <code>k</code> for a given <code>n</code>, and then check whether or not <code>fib k</code> equals <code>n</code></p>",
        "id": 422867279,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708622721
    }
]