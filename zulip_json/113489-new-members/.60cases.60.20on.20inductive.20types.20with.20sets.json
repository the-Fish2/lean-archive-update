[
    {
        "content": "<p>I'm working on formalising some type systems in Lean. I can't figure out how to perform inversion on typing rules, it seems dependent elimination fails on any inductive type involving sets. I've included a minimal example of this difficulty - is there any way I can do this?</p>\n<p>Thank you in advance for any assistance.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Ind</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Ind</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Ind</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Ind</span> <span class=\"o\">{</span><span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span>\n  <span class=\"n\">cases</span> <span class=\"n\">i</span> <span class=\"c1\">-- dependent elimination failed, failed to solve equation</span>\n</code></pre></div>",
        "id": 420660487,
        "sender_full_name": "James Reynolds",
        "timestamp": 1707488062
    },
    {
        "content": "<p>Do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">mk_iff</span><span class=\"kd\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Ind</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Ind</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 420688535,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707496409
    },
    {
        "content": "<p>And now <code>rw [ind_iff]</code></p>",
        "id": 420688562,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707496418
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/Behaviour.20of.20.60cases.60.20depends.20on.20type.20constructor.20args'.20order/near/400733695\">This Zulip thread</a> may provide more of an explanation of why <code>cases</code> fails here. If we follow the advice there and redefine <code>Ind</code> to avoid function applications in index position, then <code>cases</code> works again:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Ind</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Ind</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Ind</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Ind</span> <span class=\"o\">{</span><span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span>\n  <span class=\"n\">cases</span> <span class=\"n\">i</span> <span class=\"c1\">-- success!</span>\n</code></pre></div>",
        "id": 420831736,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707598096
    },
    {
        "content": "<p>Thanks for all of the suggestions. Are there any other useful guidelines for writing definitions so that they work well with the rest of Lean?</p>",
        "id": 420990377,
        "sender_full_name": "James Reynolds",
        "timestamp": 1707731863
    }
]