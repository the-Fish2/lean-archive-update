[
    {
        "content": "<p><a href=\"/user_uploads/3121/7-7pak5ndj6bNDrYzfQ4b3XH/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7-7pak5ndj6bNDrYzfQ4b3XH/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/7-7pak5ndj6bNDrYzfQ4b3XH/image.png\"></a></div>",
        "id": 409561631,
        "sender_full_name": "chenjulang",
        "timestamp": 1703242089
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intros</span> <span class=\"n\">inj_1</span> <span class=\"n\">inj_2</span> <span class=\"n\">inj_3</span> <span class=\"n\">inj_4</span> <span class=\"n\">inj_5</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">id_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">inj_5</span>\n\n        <span class=\"c1\">-- refine' Equiv.noConfusion inj_5 _ ---??? 不知道对inj_5做了什么</span>\n        <span class=\"c1\">-- intros inj_6 inj_7</span>\n        <span class=\"c1\">-- exact inj_6</span>\n        <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 409561659,
        "sender_full_name": "chenjulang",
        "timestamp": 1703242106
    },
    {
        "content": "<p>These two lines are obviously the same , Right? They have the same \"toFun\", but icannot find a way to complete it... <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">inj_5</span><span class=\"o\">:</span> <span class=\"n\">ofBijective</span> <span class=\"n\">inj_1</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Bijective</span> <span class=\"n\">inj_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ofBijective</span> <span class=\"n\">inj_2</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Bijective</span> <span class=\"n\">inj_2</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">inj_1</span> <span class=\"bp\">=</span> <span class=\"n\">inj_2</span>\n</code></pre></div>",
        "id": 409561899,
        "sender_full_name": "chenjulang",
        "timestamp": 1703242209
    },
    {
        "content": "<p>Check the whole file here:<br>\npart 1/2</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.Determinant</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Sign</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Perm</span>\n\n\n<span class=\"c1\">-- set_option trace.Meta.synthInstance true</span>\n<span class=\"c1\">-- set_option maxHeartbeats 400000 -- 原来要很多时间的</span>\n\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">z</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Equiv</span> <span class=\"n\">Equiv.Perm</span> <span class=\"n\">Finset</span> <span class=\"n\">Function</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Matrix</span> <span class=\"c1\">--目的是避免模糊定义mul_apply</span>\n\n  <span class=\"kn\">open</span> <span class=\"n\">Matrix</span> <span class=\"n\">BigOperators</span>\n\n  <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n  <span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"ε \"</span> <span class=\"n\">σ</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">sign</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.unusedVariables</span> <span class=\"n\">false</span>\n\n<span class=\"c1\">-- -- -----/行列式</span>\n\n<span class=\"c1\">-- -- 原来有toFun的结构，直接写名词的话，它要用toFun来替换，</span>\n<span class=\"c1\">-- -- 所以detRowAlternating2具体类型应该是和这个相同(↑detRowAlternating2).toFun : (?m.32939 → ?m.32939 → ?m.32941) → ?m.32941</span>\n<span class=\"c1\">-- -- 因此detRowAlternating2 M的类型就是R</span>\n<span class=\"c1\">--   def detRowAlternating2</span>\n<span class=\"c1\">--   : AlternatingMap R (n → R) R n  --- 最后这个参数n属于补充说明,实际形式上只需传三个参数即可</span>\n<span class=\"c1\">--   :=</span>\n<span class=\"c1\">--   -- have h1:= (</span>\n<span class=\"c1\">--   --   (MultilinearMap.mkPiAlgebra R n R).compLinearMap</span>\n<span class=\"c1\">--   --     LinearMap.proj</span>\n<span class=\"c1\">--   -- )</span>\n<span class=\"c1\">--   -- have h1fun:= h1.toFun</span>\n<span class=\"c1\">--   MultilinearMap.alternatization ( -- ???</span>\n<span class=\"c1\">--     (MultilinearMap.mkPiAlgebra R n R).compLinearMap</span>\n<span class=\"c1\">--       LinearMap.proj</span>\n<span class=\"c1\">--   )</span>\n\n<span class=\"c1\">-- -- 问题：v是什么？</span>\n<span class=\"c1\">-- -- MultilinearMap R (fun x（x就是n） ↦ n → R) R 也就是(n → n → R) → R</span>\n<span class=\"c1\">--   abbrev det2 (M : Matrix n n R): R :=</span>\n<span class=\"c1\">--     -- have h1 := detRowAlternating2 M</span>\n<span class=\"c1\">--     detRowAlternating2 M -- 这里为什么类型是R，因为detRowAlternating2相当于detRowAlternating2.toFun</span>\n<span class=\"c1\">--     -- 也就是(?m.33147 → ?m.33147 → ?m.33149) → ?m.33149</span>\n<span class=\"c1\">--   -- #check detRowAlternating2.toFun -- 所以上面M不是参数，而是被作用了，detRowAlternating2是一个映射作用到M上了</span>\n\n\n<span class=\"c1\">--   --  前置知识</span>\n\n<span class=\"c1\">--   -- Perm 的使用</span>\n<span class=\"c1\">--   -- 以下是一些关于 Perm n 的示例，其中 n 取不同的值：</span>\n<span class=\"c1\">--   -- 当 n = 1 时，Perm 1 表示长度为 1 的置换，即 [0]。</span>\n<span class=\"c1\">--   -- 当 n = 2 时，Perm 2 表示长度为 2 的置换，共有两种情况：[0, 1] 和 [1, 0]。</span>\n<span class=\"c1\">--   -- 当 n = 3 时，Perm 3 表示长度为 3 的置换，共有六种情况：[0, 1, 2]、[0, 2, 1]、[1, 0, 2]、[1, 2, 0]、[2, 0, 1] 和 [2, 1, 0]。</span>\n<span class=\"c1\">-- -- #eval Finset.val (Finset.univ : Finset (Fin 4))</span>\n<span class=\"c1\">-- def printPerms (n : ℕ) : List (List ℕ) :=</span>\n<span class=\"c1\">--   List.map List.reverse (List.permutations (List.range n))</span>\n<span class=\"c1\">-- #eval printPerms 4</span>\n\n\n\n  <span class=\"c1\">-- 正式开始：</span>\n\n  <span class=\"c1\">-- def example_function : n → n :=</span>\n  <span class=\"c1\">-- λ x =&gt; x</span>\n  <span class=\"c1\">-- @[nolint unusedArguments]</span>\n  <span class=\"c1\">-- set_option linter.unusedVariables false in</span>\n  <span class=\"kd\">lemma</span> <span class=\"n\">hhh1</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"bp\">∑</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n        <span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n          <span class=\"n\">ε</span> <span class=\"n\">σ</span>\n          <span class=\"bp\">*</span>\n          <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n            <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n      <span class=\"bp\">=</span>\n      <span class=\"bp\">∑</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">Bijective</span><span class=\"o\">,</span> <span class=\"c1\">-- (@univ (n → n) _) 表示一个集合，包含了 n 到 n 函数类型的所有可能的函数</span>\n        <span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n          <span class=\"n\">ε</span> <span class=\"n\">σ</span>\n          <span class=\"bp\">*</span>\n          <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n             <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n      <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Eq.symm</span>\n      <span class=\"n\">apply</span> <span class=\"n\">sum_subset</span> <span class=\"c1\">--s₁ ⊆ s₂， x ∈ s₂, x ∉ s₁的情况为0，则可以直接去掉</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n        <span class=\"n\">exact</span> <span class=\"n\">mem_univ</span> <span class=\"n\">h1</span>\n      <span class=\"n\">intros</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span> <span class=\"n\">h5</span>\n      <span class=\"n\">apply</span> <span class=\"n\">det_mul_aux</span> <span class=\"c1\">-- ???这个先不理解，后面专门出一个视频来教如何读证明并且分解证明成策略模式。一个先连乘，再连加的东西，结果是0，关键是非双射导致的，有点意思</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_filter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h5</span> <span class=\"c1\">-- 就是filter的定义呗，是属于某个集合里面的，而且满足条件1</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_univ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h5</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">true_and_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h5</span>\n      <span class=\"n\">set</span> <span class=\"n\">h6</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">h3</span> <span class=\"n\">x</span> <span class=\"c1\">-- 写这个h6,h7是为了补充说明，其实这里h6就是和h3同一个映射，写法不一样而已</span>\n      <span class=\"k\">have</span> <span class=\"n\">h7</span><span class=\"o\">:</span> <span class=\"n\">h6</span><span class=\"bp\">=</span><span class=\"n\">h3</span>\n      <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h5</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">hhh2</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span>\n    <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">Bijective</span><span class=\"o\">,</span>\n      <span class=\"bp\">∑</span>\n        <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n          <span class=\"o\">(</span>\n            <span class=\"n\">ε</span> <span class=\"n\">σ</span>\n            <span class=\"bp\">*</span>\n            <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n          <span class=\"o\">)</span>\n      <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n          <span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n              <span class=\"n\">ε</span> <span class=\"n\">σ</span>\n              <span class=\"bp\">*</span>\n              <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n                <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n      <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_comm</span><span class=\"o\">]</span> <span class=\"c1\">-- 这两步sum_comm相当于没变，只改成了x,y</span>\n      <span class=\"n\">refine'</span> <span class=\"n\">sum_bij</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- ???这个需要问一下gpt找到数学世界里的对应定理名称。不一样的定义域s、t，不同的函数f、g，求和相同，需要什么条件呢。5个条件</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">ih1</span> <span class=\"n\">ih2</span> <span class=\"c1\">-- 这里ih1潜台词是随机的ih1</span>\n        <span class=\"k\">have</span> <span class=\"n\">ih3</span><span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mem_filter.mp</span> <span class=\"n\">ih2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n        <span class=\"k\">have</span> <span class=\"n\">ih4</span><span class=\"o\">:=</span> <span class=\"n\">ofBijective</span> <span class=\"n\">ih1</span> <span class=\"n\">ih3</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Perm</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">ih4</span> <span class=\"c1\">-- 如果这里定义错了，下面满盘皆输</span>\n      <span class=\"c1\">-- 注意不能像以下这样定义</span>\n      <span class=\"c1\">-- intros ih1 ih2</span>\n      <span class=\"c1\">--   have ih3:= Equiv.refl n</span>\n      <span class=\"c1\">--   simp only [Perm]</span>\n      <span class=\"c1\">--   exact ih3</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h1</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h2</span> <span class=\"c1\">--原来这里会用到refine1的证明</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_univ</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">h_1</span> <span class=\"n\">h_2</span>\n        <span class=\"k\">have</span> <span class=\"n\">h_3</span><span class=\"o\">:=</span> <span class=\"n\">mem_filter.1</span> <span class=\"n\">h_2</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">h_4</span><span class=\"o\">,</span><span class=\"n\">h_5</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h_3</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">id_eq</span><span class=\"o\">]</span>\n        <span class=\"n\">set</span> <span class=\"n\">h_6</span> <span class=\"o\">:=</span> <span class=\"n\">ofBijective</span> <span class=\"n\">h_1</span> <span class=\"n\">h_5</span> <span class=\"c1\">-- h_1和h_6相等吗？，由ofBijective的toFun定义知道就是h_1</span>\n        <span class=\"k\">have</span> <span class=\"n\">h1_equal_h6</span> <span class=\"o\">:</span> <span class=\"n\">h_1</span><span class=\"bp\">=</span><span class=\"n\">h_6</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n        <span class=\"n\">rfl</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">inj_1</span> <span class=\"n\">inj_2</span> <span class=\"n\">inj_3</span> <span class=\"n\">inj_4</span> <span class=\"n\">inj_5</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">id_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">inj_5</span> <span class=\"c1\">-- 看起来很明显，但就是完成不了</span>\n        <span class=\"gr\">sorry</span>\n        <span class=\"c1\">-- refine' Equiv.noConfusion inj_5 _ ---??? 不知道对inj_5做了什么</span>\n        <span class=\"c1\">-- intros inj_6 inj_7</span>\n        <span class=\"c1\">-- exact inj_6</span>\n        <span class=\"n\">done</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">x</span>\n        <span class=\"n\">refine'</span> <span class=\"n\">Exists.intro</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"c1\">-- 存在，给出例子，然后代入第二个参数中，比如这里就是把a全部替换成了b</span>\n        <span class=\"c1\">-- 如果第二个参数中不用直接替换的，比如下面这行，就直接证明第二个参数代表的命题即可</span>\n        <span class=\"n\">refine'</span> <span class=\"n\">Exists.intro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- 比如这里ha在第二个参数中没有需要替换的，直接证明第二个命题即可</span>\n        <span class=\"bp\">·</span> <span class=\"n\">refine'</span> <span class=\"n\">mem_filter.mpr</span> <span class=\"n\">_</span>\n          <span class=\"n\">constructor</span>\n          <span class=\"bp\">·</span> <span class=\"n\">refine'</span> <span class=\"n\">mem_univ</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span>\n          <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Equiv.bijective</span> <span class=\"n\">b</span>\n        <span class=\"bp\">·</span> <span class=\"n\">refine'</span> <span class=\"n\">coe_fn_injective</span> <span class=\"n\">_</span> <span class=\"c1\">--在外层套了一个不变的映射</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">id_eq</span><span class=\"o\">]</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">FunLike.coe_fn_eq</span><span class=\"o\">]</span>\n          <span class=\"n\">refine'</span> <span class=\"n\">Equiv.ext</span> <span class=\"n\">_</span>\n          <span class=\"n\">intros</span> <span class=\"n\">x2</span>\n          <span class=\"c1\">-- ↑(ofBijective ↑b (_ : Bijective ↑b))前面这个和↑b作用效果一样吗?查一下ofBijective的toFun := f定义就知道，就是f本身</span>\n          <span class=\"c1\">-- 下面是进一步的探究，不看了</span>\n          <span class=\"c1\">-- have equalTest: (ofBijective ↑b (_ : Bijective ↑b)) = b</span>\n            <span class=\"c1\">-- := by</span>\n            <span class=\"c1\">-- refine ((fun {α β} {e₁ e₂} ↦ Equiv.coe_inj.mp) rfl).symm</span>\n          <span class=\"n\">rfl</span>\n        <span class=\"n\">done</span>\n      <span class=\"n\">done</span>\n\n<span class=\"c1\">--</span>\n\n    <span class=\"kd\">def</span> <span class=\"n\">hhh3_h4</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h5</span><span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">((</span><span class=\"n\">h5</span> <span class=\"bp\">*</span> <span class=\"n\">h1</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"c1\">-- perm n之间的乘法是什么结果呢？还是perm n</span>\n      <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">≃</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod_comp</span><span class=\"o\">]</span> <span class=\"c1\">-- 两个函数的连乘的结果一样的相关证明（感性理解：置换后反正都要遍历的对吧，连乘应该都一样的哦）</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Equiv.Perm.coe_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">apply_inv_self</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n\n    <span class=\"kd\">def</span> <span class=\"n\">h6</span>  <span class=\"o\">(</span><span class=\"n\">h5</span><span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"n\">h1</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"bp\">*</span> <span class=\"n\">h1</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"n\">h5</span> <span class=\"c1\">-- 转置的符号相关的定理</span>\n      <span class=\"o\">:=</span>\n      <span class=\"k\">calc</span>\n        <span class=\"n\">ε</span> <span class=\"n\">h1</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"bp\">*</span> <span class=\"n\">h1</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"bp\">*</span> <span class=\"n\">h1</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">h1</span><span class=\"o\">)</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">sign_mul</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"bp\">*</span> <span class=\"n\">h1</span><span class=\"bp\">⁻¹</span><span class=\"o\">)]</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">_root_.map_mul</span><span class=\"o\">]</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_inv</span><span class=\"o\">]</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.units_inv_eq_self</span><span class=\"o\">]</span> <span class=\"c1\">-- 1或-1的倒数还是自己</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Units.val_mul</span><span class=\"o\">]</span> <span class=\"c1\">--明明一看就知道相等的。。。</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.cast_mul</span><span class=\"o\">]</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"n\">h5</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inv_mul_cancel_right</span><span class=\"o\">]</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">hhh3</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"n\">τ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n      <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">σ</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">refine'</span> <span class=\"n\">sum_congr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">--定义域一样，定义域内f和g的映射值一样，则两个求和结果一样</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n        <span class=\"n\">refine'</span> <span class=\"n\">Fintype.sum_equiv</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">--两个不同函数求和的结果一样的相关证明</span>\n        <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Equiv.mulRight</span> <span class=\"n\">h1</span><span class=\"bp\">⁻¹</span> <span class=\"c1\">-- 这是一步需要后面依赖的证明，所以不能随意证明，通常都是第一步这样</span>\n        <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">h5</span> <span class=\"c1\">--其实infoview里面的 ?1:?2 这样的写法，?1就是一个随机的属于?2的对象或元素</span>\n          <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Equiv.coe_mulRight</span><span class=\"o\">]</span>\n          <span class=\"n\">simp_rw</span> <span class=\"o\">[(</span><span class=\"n\">h6</span> <span class=\"n\">h5</span> <span class=\"n\">h1</span><span class=\"o\">)]</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"n\">hhh3_h4</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">h5</span> <span class=\"n\">h1</span><span class=\"o\">)]</span>\n      <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 409563074,
        "sender_full_name": "chenjulang",
        "timestamp": 1703242790
    },
    {
        "content": "<p>part 2/2:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">lemma</span> <span class=\"n\">MainGoal_1</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"n\">σ</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">det_apply'</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prod_univ_sum</span><span class=\"o\">]</span> <span class=\"c1\">-- 与\"先连加，再连乘，等于，先连乘，再连加\"相关的定理</span>\n    <span class=\"c1\">-- ???Fintype.piFinset是什么东西</span>\n    <span class=\"c1\">-- 如何理解Fintype.piFinset t</span>\n    <span class=\"c1\">-- 假设 t 是一个从集合 {1, 2} 到有限集合的映射，其中 t(1) = {a, b}，t(2) = {x, y}。</span>\n        <span class=\"c1\">-- 那么 Fintype.piFinset t 就表示集合 {(a, x), (a, y), (b, x), (b, y)}，即这两个集合的笛卡尔积。</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_sum</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Fintype.piFinset_univ</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">done</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">MainGoal_2</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"n\">σ</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">Bijective</span><span class=\"o\">,</span><span class=\"bp\">∑</span> <span class=\"n\">σ</span><span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"n\">σ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hhh1</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">MainGoal_3</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">Bijective</span><span class=\"o\">,</span><span class=\"bp\">∑</span> <span class=\"n\">σ</span><span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"n\">σ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span><span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hhh2</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">MainGoal_4</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span><span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_left_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prod_mul_distrib</span><span class=\"o\">]</span> <span class=\"c1\">--  1个连乘变成2个连乘相关的定理</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">done</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">MainGoal_5</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">σ</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hhh3</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">-- /////////////////////////////////////////////////////////////////////////////////////////////////////</span>\n\n      <span class=\"kd\">def</span> <span class=\"n\">MainGoal_6_1_1_1</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n        <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">det_apply'</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n      <span class=\"kd\">def</span> <span class=\"n\">MainGoal_6_1_1_2</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span>\n      <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- 这明明就是一个交换律能完成的，偏要congr一下拆开。。。</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">refine'</span> <span class=\"n\">sum_congr</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n        <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">univ</span><span class=\"o\">)</span>\n        <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">h212x</span> <span class=\"n\">h212a</span>\n          <span class=\"k\">have</span> <span class=\"n\">h2_1_2_1</span>\n            <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h212x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">h212x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h212x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">h212x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span>\n            <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"c1\">--竟然直接搞定了</span>\n          <span class=\"k\">have</span> <span class=\"n\">h2_1_2_2</span> <span class=\"o\">:=</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h212x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">h212x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span>\n          <span class=\"k\">have</span> <span class=\"n\">h2_1_2_3</span> <span class=\"o\">:=</span> <span class=\"n\">h2_1_2_1.trans</span> <span class=\"n\">h2_1_2_2</span>\n          <span class=\"n\">exact</span> <span class=\"n\">h2_1_2_3</span>\n\n      <span class=\"kd\">def</span> <span class=\"n\">MainGoal_6_1_1_3</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):=</span> <span class=\"o\">(</span><span class=\"n\">MainGoal_6_1_1_1</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">MainGoal_6_1_1_2</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"c1\">-- .trans就是等号传递</span>\n\n\n    <span class=\"kd\">def</span> <span class=\"n\">MainGoal_6_1_1</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">det</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">MainGoal_6_1_1_3</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n\n      <span class=\"kd\">def</span> <span class=\"n\">h2_2_1</span><span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):=</span> <span class=\"n\">det_apply'</span> <span class=\"n\">N</span>\n\n      <span class=\"kd\">def</span> <span class=\"n\">h2_2_2</span><span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):</span>  <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span>\n      <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- 又是一个内部交换就好了</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">refine'</span> <span class=\"n\">sum_congr</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n          <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">univ</span>\n          <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">h222x</span> <span class=\"n\">h222a</span>\n            <span class=\"k\">have</span> <span class=\"n\">h2_2_2_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h222x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">h222x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h222x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">h222x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span>\n              <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n              <span class=\"n\">rfl</span>\n            <span class=\"k\">have</span> <span class=\"n\">h2_2_2_2</span><span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"o\">((</span><span class=\"n\">ε</span> <span class=\"n\">h222x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">h222x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">))</span>\n            <span class=\"k\">have</span> <span class=\"n\">h2_2_2_3</span><span class=\"o\">:=</span> <span class=\"n\">h2_2_2_1.trans</span> <span class=\"n\">h2_2_2_2</span>\n            <span class=\"n\">exact</span> <span class=\"n\">h2_2_2_3</span>\n\n    <span class=\"kd\">def</span> <span class=\"n\">h2_2_3</span><span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):=</span> <span class=\"o\">(</span><span class=\"n\">h2_2_1</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">h2_2_2</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n    <span class=\"kd\">def</span> <span class=\"n\">MainGoal_6_1_2</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">det</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h2_2_3</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">MainGoal_6_1</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">det</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">det</span> <span class=\"n\">N</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">temp1</span><span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">MainGoal_6_1_1</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">temp2</span><span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">MainGoal_6_1_2</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">HMul.hMul</span> <span class=\"n\">temp1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">temp2</span><span class=\"o\">)</span> <span class=\"c1\">-- congr就是相同函数，相同参数，结果一样的意思；congrArg也是类似的意思</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h1.trans</span> <span class=\"n\">mul_sum</span>\n\n\n  <span class=\"c1\">--</span>\n\n    <span class=\"kd\">def</span> <span class=\"n\">h3_3</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3_1</span><span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3_2</span><span class=\"o\">:</span> <span class=\"n\">h3_1</span> <span class=\"bp\">∈</span> <span class=\"n\">univ</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">h3_1</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h3_1</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">h3_1</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h3_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"c1\">-- 又是一个内部交换的东西，太简单了吧。。。</span>\n      <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">h3_3_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">h3_1</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h3_1</span><span class=\"o\">))</span>\n      <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">h3_1</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h3_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">have</span> <span class=\"n\">h3_3_1_1</span> <span class=\"o\">:=</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">h3_1</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h3_1</span><span class=\"o\">))</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h3_3_1_1</span>\n      <span class=\"k\">have</span> <span class=\"n\">h3_3_2</span><span class=\"o\">:=</span> <span class=\"n\">h3_3_1.trans</span> <span class=\"n\">mul_sum</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h3_3_2</span>\n\n\n    <span class=\"kd\">def</span> <span class=\"n\">h3_4</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3_1</span><span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3_2</span><span class=\"o\">:</span> <span class=\"n\">h3_1</span> <span class=\"bp\">∈</span> <span class=\"n\">univ</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">h3_1</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h3_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x_1</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">h3_1</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">ε</span> <span class=\"n\">h3_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x_1</span><span class=\"o\">)))</span> <span class=\"c1\">-- 又是交换就可以了。。。</span>\n      <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">refine'</span> <span class=\"n\">sum_congr</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">univ</span><span class=\"o\">)</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">h34x_1</span> <span class=\"n\">h34a</span>\n        <span class=\"k\">have</span> <span class=\"n\">h3_4_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">h3_1</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h3_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">h34x_1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h34x_1</span><span class=\"o\">))</span>\n        <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">h34x_1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">∏</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">h3_1</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">ε</span> <span class=\"n\">h3_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h34x_1</span><span class=\"o\">)))</span>\n          <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">mul_left_comm</span> <span class=\"o\">((</span><span class=\"bp\">∏</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">h3_1</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h3_1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">h34x_1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h34x_1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n                <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"n\">HMul.hMul</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">h34x_1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n                  <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">h3_1</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h3_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h34x_1</span><span class=\"o\">))))</span>\n        <span class=\"k\">have</span> <span class=\"n\">h3_4_2</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">h34x_1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">∏</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">h3_1</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">ε</span> <span class=\"n\">h3_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h34x_1</span><span class=\"o\">)))</span>\n        <span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">h3_1</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">h34x_1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">ε</span> <span class=\"n\">h3_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h34x_1</span><span class=\"o\">)))</span>\n          <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_left_comm</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">h34x_1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">h3_1</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"n\">x_2</span><span class=\"o\">)</span>\n              <span class=\"o\">((</span><span class=\"n\">ε</span> <span class=\"n\">h3_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h34x_1</span><span class=\"o\">)))</span>\n        <span class=\"k\">have</span> <span class=\"n\">h3_4_3</span><span class=\"o\">:=</span> <span class=\"n\">h3_4_1.trans</span> <span class=\"n\">h3_4_2</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h3_4_3</span>\n\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">MainGoal_6_2</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"bp\">*</span>\n  <span class=\"o\">((</span><span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"n\">x_2</span><span class=\"o\">)</span>\n  <span class=\"bp\">*</span>\n  <span class=\"o\">((</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">ε</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x_1</span><span class=\"o\">)))</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">MainGoal_6_1</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">sum_congr</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">univ</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">h3_1</span> <span class=\"n\">h3_2</span>\n      <span class=\"k\">have</span> <span class=\"n\">h3_5</span><span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h3_3</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">h3_1</span> <span class=\"n\">h3_2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">h3_4</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">h3_1</span> <span class=\"n\">h3_2</span><span class=\"o\">)</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h3_5</span>\n\n  <span class=\"c1\">--</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">MainGoal_6_3</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):=</span> <span class=\"o\">(</span><span class=\"n\">MainGoal_6_1</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">MainGoal_6_2</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">MainGoal_6</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"bp\">*</span>\n      <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">σ</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"n\">τ</span><span class=\"o\">)</span>\n      <span class=\"bp\">*</span>\n      <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"n\">det</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">det</span> <span class=\"n\">N</span> <span class=\"c1\">--todo</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:=</span> <span class=\"n\">MainGoal_6_3</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h4</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span> <span class=\"c1\">-- 去掉两边套在最外的，恰好是相同的函数</span>\n    <span class=\"n\">funext</span> <span class=\"n\">xx1</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">funext</span> <span class=\"n\">xx2</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_right_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">done</span>\n\n\n  <span class=\"c1\">-- @[simp]</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">MainGoal</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">det</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">det</span> <span class=\"n\">N</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span><span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">det</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">det</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n      <span class=\"k\">calc</span>\n          <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n          <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"n\">σ</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n            <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">exact</span> <span class=\"n\">MainGoal_1</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">p</span>\n                <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">Bijective</span><span class=\"o\">,</span>\n                  <span class=\"bp\">∑</span> <span class=\"n\">σ</span>\n                    <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n                      <span class=\"n\">ε</span> <span class=\"n\">σ</span>\n                      <span class=\"bp\">*</span>\n                      <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n            <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">exact</span> <span class=\"n\">MainGoal_2</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span><span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n            <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">exact</span> <span class=\"n\">MainGoal_3</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">σ</span>\n                <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n                  <span class=\"bp\">∑</span> <span class=\"n\">τ</span>\n                    <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n                      <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n                      <span class=\"bp\">*</span>\n                      <span class=\"n\">ε</span> <span class=\"n\">τ</span>\n                      <span class=\"bp\">*</span>\n                      <span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n            <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">exact</span> <span class=\"n\">MainGoal_4</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">σ</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n            <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">exact</span> <span class=\"n\">MainGoal_5</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">det</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">det</span> <span class=\"n\">N</span>\n            <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"c1\">-- simp only [det_apply', Finset.mul_sum, mul_comm, mul_left_comm, mul_assoc] --这里无法分步，所以直接分析print来写成下面这样子：</span>\n            <span class=\"n\">exact</span> <span class=\"n\">MainGoal_6</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n    <span class=\"n\">done</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">Matrix</span>\n</code></pre></div>",
        "id": 409563162,
        "sender_full_name": "chenjulang",
        "timestamp": 1703242810
    },
    {
        "content": "<p>I suspect that you are making a meal of this, but here is a proof of your <code>sorry</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">id_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">inj_5</span> <span class=\"c1\">-- 看起来很明显，但就是完成不了</span>\n        <span class=\"c1\">-- new part</span>\n        <span class=\"n\">ext</span> <span class=\"n\">x</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ofBijective_apply</span> <span class=\"n\">inj_1</span><span class=\"o\">,</span> <span class=\"n\">inj_5</span><span class=\"o\">,</span> <span class=\"n\">ofBijective_apply</span> <span class=\"n\">inj_2</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I found <code>ofBijective_apply</code> by right clicking on <code>ofBijective</code> and jumping to the definition, noticing that it had <code>@[simps apply]</code> in front of it, and then I knew what this meant (i.e. \"automatically generate an <code>_apply</code> lemma\") and then using this lemma. It seemed easier to argue \"using elements\" (two functions are equal if they agree on all inputs) and this is an extensionality lemma so I used the <code>ext</code> tactic.</p>",
        "id": 409567267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703244708
    },
    {
        "content": "<p>Here is some clean-up of that part of the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">refine'</span> <span class=\"n\">sum_bij</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- ???这个需要问一下gpt找到数学世界里的对应定理名称。不一样的定义域s、t，不同的函数f、g，求和相同，需要什么条件呢。5个条件</span>\n      <span class=\"bp\">·</span> <span class=\"c1\">-- your goal is not a proof here! So you should use as few tactics as possible.</span>\n        <span class=\"c1\">-- You used some tactics in your proof and this was why you had to use all</span>\n        <span class=\"c1\">-- of this `simp only [id_eq]` stuff.</span>\n        <span class=\"c1\">-- In fact you should just put the next line in place of the underscore</span>\n        <span class=\"c1\">-- in the previous line. Don't use tactic mode to create functions, only proofs</span>\n        <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">ih1</span> <span class=\"n\">ih2</span> <span class=\"bp\">↦</span> <span class=\"n\">ofBijective</span> <span class=\"n\">ih1</span> <span class=\"o\">(</span><span class=\"n\">mem_filter.mp</span> <span class=\"n\">ih2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_univ</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">h_1</span> <span class=\"n\">h_2</span>\n        <span class=\"n\">rfl</span> <span class=\"c1\">-- the two sides are definitionally equal</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">inj_1</span> <span class=\"n\">inj_2</span> <span class=\"n\">inj_3</span> <span class=\"n\">inj_4</span> <span class=\"n\">inj_5</span>\n        <span class=\"n\">ext</span> <span class=\"n\">x</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ofBijective_apply</span> <span class=\"n\">inj_1</span><span class=\"o\">,</span> <span class=\"n\">inj_5</span><span class=\"o\">,</span> <span class=\"n\">ofBijective_apply</span> <span class=\"n\">inj_2</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">x</span>\n        <span class=\"n\">use</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n        <span class=\"bp\">·</span> <span class=\"n\">refine'</span> <span class=\"n\">coe_fn_injective</span> <span class=\"n\">_</span> <span class=\"c1\">--在外层套了一个不变的映射</span>\n          <span class=\"n\">ext</span>\n          <span class=\"n\">rfl</span>\n        <span class=\"bp\">·</span> <span class=\"n\">refine'</span> <span class=\"n\">mem_filter.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Equiv.bijective</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n          <span class=\"n\">refine'</span> <span class=\"n\">mem_univ</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 409568481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703245316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  It helps a lot. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 409580738,
        "sender_full_name": "chenjulang",
        "timestamp": 1703250662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 409580785,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703250680
    },
    {
        "content": "<p>There are  really a lot of underlying lemmas there <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 409580951,
        "sender_full_name": "chenjulang",
        "timestamp": 1703250757
    }
]