[
    {
        "content": "<p>Hi all! In 2022 I published <a href=\"http://anggtwu.net/math-b.html#2022-md\">this article</a> about a diagrammatic language for statements and proofs in Category Theory, and I left its formalization in a proof assistant as \"future work\"... now I am trying to work on the translation of my diagrams to Lean, but I don't know how to convert my Lean code to LaTeX to publish my notes... which tools do you recommend?</p>",
        "id": 435813260,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1714274423
    },
    {
        "content": "<p>Let me try to explain a bit more. My diagrams look like this,</p>",
        "id": 435813295,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1714274477
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Kk8keqCTvtjvoev3ZqDRGFF9/sshot.png\">sshot.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Kk8keqCTvtjvoev3ZqDRGFF9/sshot.png\" title=\"sshot.png\"><img src=\"/user_uploads/3121/Kk8keqCTvtjvoev3ZqDRGFF9/sshot.png\"></a></div>",
        "id": 435813313,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1714274510
    },
    {
        "content": "<p>and to produce them I use heavy LaTeX trickery, including a preprocessor that understands 2D diagrams in ascii art embedded in comments and converts them to DiagXY code - for example, the source for the diagram above is <a href=\"http://anggtwu.net/LATEX/2022on-the-missing.tex.html#omitting-types\">here</a>.</p>",
        "id": 435813559,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1714274806
    },
    {
        "content": "<p>I sort of know how people can write Markdown code with embedded chunks of Lean code - like <a href=\"https://github.com/leanprover/theorem_proving_in_lean4/blob/master/structures_and_records.md?plain=1\">this</a>...</p>",
        "id": 435814107,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1714275429
    },
    {
        "content": "<p>...but how can I write LaTeX code with <em>non</em>-embedded Lean code, in which each chunk of Lean code is in an external file instead of being embedded?</p>",
        "id": 435814204,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1714275563
    },
    {
        "content": "<p>I hope that this question makes sense! Thanks in advance...</p>",
        "id": 435814306,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1714275676
    },
    {
        "content": "<p>How about treating Lean files as the main source files and writing latex in the comments like <a href=\"https://github.com/avigad/mathematics_in_lean_source\">https://github.com/avigad/mathematics_in_lean_source</a></p>",
        "id": 435827430,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1714281344
    },
    {
        "content": "<p>Or just add some links or anchors in the latex files and use some scripts/preprocessors to embed them when necessary?</p>",
        "id": 435828613,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1714281646
    },
    {
        "content": "<p>Thanks!</p>\n<p>I'm trying another approach... minted uses pygments, and I've just discovered that I can call pygments directly like this,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">pygmentize</span> <span class=\"bp\">-</span><span class=\"n\">O</span> <span class=\"n\">full</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">luatree1.lean.full.tex</span> <span class=\"n\">luatree1.lean</span>\n<span class=\"n\">lualatex</span>              <span class=\"n\">luatree1.lean.full.tex</span>\n</code></pre></div>",
        "id": 435836811,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1714284857
    },
    {
        "content": "<p>or like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span> <span class=\"n\">Extract</span> <span class=\"n\">the</span> <span class=\"n\">defs</span>\n<span class=\"n\">cat</span> <span class=\"n\">luatree1.lean.full.tex</span> <span class=\"bp\">|</span> <span class=\"n\">gawk</span> <span class=\"bp\">'</span>\n  <span class=\"bp\">/</span><span class=\"n\">makeatletter</span><span class=\"bp\">/</span> <span class=\"o\">{</span> <span class=\"n\">out</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n  <span class=\"n\">out</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span>       <span class=\"o\">{</span> <span class=\"n\">print</span> <span class=\"o\">}</span>\n  <span class=\"bp\">/</span><span class=\"n\">makeatother</span><span class=\"bp\">/</span>  <span class=\"o\">{</span> <span class=\"n\">out</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n<span class=\"bp\">'</span> <span class=\"bp\">|</span> <span class=\"n\">tee</span> <span class=\"n\">luatree1.lean.defs.tex</span>\n\n<span class=\"bp\">#</span> <span class=\"n\">Generate</span> <span class=\"n\">just</span> <span class=\"n\">a</span> <span class=\"n\">Verbatim</span> <span class=\"n\">block</span>\n<span class=\"n\">pygmentize</span>         <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">luatree1.lean.mini.tex</span> <span class=\"n\">luatree1.lean</span>\n\n<span class=\"bp\">#</span> <span class=\"n\">Incomplete</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 435836834,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1714284890
    },
    {
        "content": "<p>Note that lean4 support is not present in pygments' most recent release, though will be in the next one</p>",
        "id": 435867238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714303642
    }
]