[
    {
        "content": "<p>Having messed around with NNG and the first few chapters of mathematics in lean, I naively forked mathlib and started messing around with Separation.lean to see if could hack out some results from <a href=\"https://arxiv.org/abs/2312.08328\">https://arxiv.org/abs/2312.08328</a> since I don't think mathlib has any separation axioms between T1 and T2.</p>\n<p>Now, I quickly discovered I first need to go back to class and learn more about structures, classes, etc. from the textbook. No big surprise there. :-)</p>\n<p>But once I learn how to construct the proofs I want, where should I go to coordinate with the community to make sure I'm writing a contribution that will get merged (or learn how to write an independent \"library\" compatible with mathlib, should these results be too niche)?</p>",
        "id": 433367918,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1713208773
    },
    {
        "content": "<p>Separation axioms between T1 and T2 seems like a fairly niche area (I wasn't aware there were any that people studied!)</p>\n<p>However, if this is for pi-base, it might be interesting enough to include. I would suggest not worrying too much about how you'd integrate your contributions into the main library and put all your results in a new <code>Mathlib/New</code> folder and checking in periodically. That way (1) you don't have to mess with making an independent library (2) all the results are in one place and you can get input about where things should go (3) it's easier to get a sense of where you're going with the library and (4) if it doesn't end up being part of mathlib, all your results are in one place and it'll be easy to make an independent library.</p>",
        "id": 433370295,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713209541
    },
    {
        "content": "<p>By the way, while I can't speak for all maintainers, I would welcome more topological counterexamples in the Counterexamples folder. There could be some more organization in there as well.</p>",
        "id": 433370759,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713209706
    },
    {
        "content": "<p>There are a handful of counterexamples inside the library itself, if I remember correctly, and they might move into that folder.</p>",
        "id": 433370867,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713209751
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"673728\">@Josha Dekker</span></p>",
        "id": 433371485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1713209926
    },
    {
        "content": "<p>So TBH I didn't study them myself until a year ago, when there was some conversation on math.stackexchange where we eventually untangled eight different intermediate properties that had been introduced in various places throughout the literature.</p>\n<p>As you suggested, my goal there was to flesh out the pi-Base, and since these results ended up being more straightforward than my usual research, I thought it was the right place to start exploring how eventual integration of the results we track at <a href=\"http://topology.pi-base.org\">topology.pi-base.org</a> with mathlib might look.</p>",
        "id": 433371700,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1713209999
    },
    {
        "content": "<p>I could imagine that there's a Counterexamples/PiBase folder with each space defined and key properties proved for each. The space might be defined inside mathlib itself, but the folder could have, for example, <code>abbrev S000001 := Bool</code> (I <em>think</em> <code>Bool</code> comes with the discrete topology). Then, for instances, there could be declarations like <code>example : T2Space Bool := inferInstance</code> to ensure that the instance exists.</p>",
        "id": 433371763,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713210006
    },
    {
        "content": "<p>Oh, if having a piBase corner of mathlib where we keep things wired up is something the mathlib community would be okay with, I think that's an interesting way to connect the projects.</p>",
        "id": 433372664,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1713210271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"469672\">@James Dabbs</span></p>",
        "id": 433372785,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1713210322
    },
    {
        "content": "<p>(Maybe Archive/PiBase is better, since these aren't strictly counterexamples.)</p>\n<p>I'm not sure that this is would be the permanent home for a PiBase project, but I think this is a great way to incubate a project, since you'll get mathlib reviewers looking at everything, and the \"trade\" is that formalizing PiBase database entries would naturally lead to improvements of the topology library.</p>",
        "id": 433373207,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713210441
    },
    {
        "content": "<p>Though maybe stick with topological properties that are 'standard', leaving niche ones to your fork?</p>",
        "id": 433373414,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713210508
    },
    {
        "content": "<p>So I thought of tracking the progress of PiBase automatically in Mathlib and even have a repo for this, but the code is written in Julia, and I found I didn’t know enough metaprogramming to set it up in Lean fully (which I think is important), so I sidelined the project until I know more metaprogramming. Unfortunately my own research is taking up the part of my spare time that I would’ve used on Lean, so this is kind of frozen by now. Please feel free to start afresh or get inspiration from my repo if you want to start, I won’t be able to return to this for a while I’m afraid. For what it’s worth, I’m in the progress of PR’ing k-Lindelöf spaces</p>",
        "id": 433377606,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713211820
    },
    {
        "content": "<p>Of course a more official integration would be much better, so I think you have a better view on how to approach this, Steven!</p>",
        "id": 433378070,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713211988
    },
    {
        "content": "<p>This is my repo: <a href=\"https://github.com/JADekker/PiBaseTracking\">https://github.com/JADekker/PiBaseTracking</a></p>",
        "id": 433378174,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713212038
    },
    {
        "content": "<p>It is basically automatic conversion from PiBase files to a Mathlib-style, but it was very much WIP and low level</p>",
        "id": 433378363,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713212095
    },
    {
        "content": "<p>This is cool stuff <span class=\"user-mention\" data-user-id=\"673728\">@Josha Dekker</span>. Yeah, for the sake of maintainability, writing everything in Lean itself and/or Typescript (which pi-Base runs on) would be best for a community-maintained project. I like the idea of automating things as much as possible...</p>",
        "id": 433393998,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1713217930
    },
    {
        "content": "<p>I'm giving a talk called \"why formalise mathematics\" today and one idea I was going to mention was LLM+Lean database maybe = high level chatbot giving formally verified answers to eg questions in topology of the form \"does X and Y imply Z?\". Projects like this would be very helpful for that. </p>\n<p>Of course we should really be doing counterexamples in condensed sets :-)</p>",
        "id": 433447387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713247442
    },
    {
        "content": "<p>But Kevin, if such a tool exists, how will I score my easy layups on math.SE answering questions by linking to the relevant pi-Base search? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n<p>From a research infrastructure perspective, I really like this idea that if we find a workflow that connects databases of formally expressed examples and results into the lean ecosystem somehow, then tooling built for lean can get access to this corpus of informally proved mathematics as well.</p>",
        "id": 433470505,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1713256713
    },
    {
        "content": "<p>You should talk to <span class=\"user-mention\" data-user-id=\"439334\">@Jure Taslak</span> about this idea. He works on such interaction for the HOG database.</p>",
        "id": 434541354,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1713655305
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"468051\">@Steven Clontz</span>, as Patrick mentioned, we build a Lean library for interacting with the <a href=\"https://houseofgraphs.org/\">House of Graphs</a> database. The project is on <a href=\"https://github.com/katjabercic/Lean-HoG\">github</a>.</p>\n<p>The idea of the project was two-fold, the first to be able to use the examples from the database in Lean, with verified values of their invariants and the second to double-check the values of the invariants in the database.<br>\nWe build some metaprogramming scaffolding in Lean to facilitate this interaction, while also using a bit of python in the background for the actual interaction with the base (as Lean currently doesn't have HTTP capabilities as far as I'm aware).</p>\n<p>If this sounds like something you're looking to do for pi-Base perhaps we should talk more.</p>",
        "id": 435005955,
        "sender_full_name": "Jure Taslak",
        "timestamp": 1713884676
    },
    {
        "content": "<p>Oh, I recognize the owner of that repo! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-mention\" data-user-id=\"427067\">@Katja Berčič</span> </p>\n<p>I think, perhaps, the goal is a little different, but maybe it's worth syncing up about at some point. In particular, HoG stores an internal representation of each of its objects. On the contrary, pi-Base only knows the asserted properties of each space, and the asserted theorems that show when properties imply others. I'm thinking that we <em>should</em> start storing formal representations of these things, and that this will probably be accomplished as Lean code, with a healthy amount of <code>sorry</code>s to fill in the spaces where things have yet to be formalized.</p>",
        "id": 435082047,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1713914394
    },
    {
        "content": "<p>took a swing at <a href=\"https://github.com/leanprover-community/mathlib4/pull/12387\">https://github.com/leanprover-community/mathlib4/pull/12387</a> to explore how this might look</p>",
        "id": 435095970,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1713925505
    },
    {
        "content": "<p>Looks good, thanks! I generated Mathlib code for many definitions and theorems for pibase, I could remove the ones that are missing and send the remainder to you, if you like?</p>",
        "id": 435128142,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713943823
    },
    {
        "content": "<p>I left some small suggestions by the way!</p>",
        "id": 435134544,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713946253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/113489-new-members/topic/general.20topology.20in.20mathlib/near/435128142\">said</a>:</p>\n<blockquote>\n<p>Looks good, thanks! I generated Mathlib code for many definitions and theorems for pibase, I could remove the ones that are missing and send the remainder to you, if you like?</p>\n</blockquote>\n<p>Are these in your repo? I wouldn't mind a tour of what you've built there sometime, if you want to sync up on Zoom. There's a group talking about pi-Base on Friday if you want to join in (main topic is building a pi-Base for topos theory, but having things play nice with Lean/mathlib in the future is something I want to be mindful of)</p>",
        "id": 435219667,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1713972844
    },
    {
        "content": "<p>Details of that call are in the <a href=\"https://code4math.org\">https://code4math.org</a> Zulip: <a href=\"https://code4math.zulipchat.com/#narrow/stream/416467-pi-base/topic/pi-base.2C.20but.20toposes\">https://code4math.zulipchat.com/#narrow/stream/416467-pi-base/topic/pi-base.2C.20but.20toposes</a></p>",
        "id": 435219803,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1713972894
    },
    {
        "content": "<p>We also have a pi-Base community call on May 2 which doesn't have anything on the agenda yet, if you want to talk about pi-Base/mathlib stuff: <a href=\"https://github.com/orgs/pi-base/discussions/627\">https://github.com/orgs/pi-base/discussions/627</a></p>",
        "id": 435220170,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1713973009
    },
    {
        "content": "<p>Thank you for your kind invites! Yes, these files are in my repo, I’ll provide a bit context and where to find it tomorrow! (I didn’t document anything accurately I think, so I’ll make sure it is clear)</p>",
        "id": 435267457,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713990620
    },
    {
        "content": "<p>okay so I've figured out how to quantify over all compact Hausdorff spaces, and now I need to construct a specific one (the disjoint union of two converging sequences). Before I figure out how to construct this myself, is there any chance it is already in mathlib, or (more likely?) I can grab a copy of a converging sequence and a two-point discrete space and take their product?</p>",
        "id": 435272095,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1713992531
    },
    {
        "content": "<p>oh I guess I could just use a subset of the reals <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> any hints on examples of such constructions is appreciated for thew newbie <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 435275583,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1713994121
    },
    {
        "content": "<p>How about <code>OnePoint ℕ ⊕ OnePoint ℕ</code>?</p>",
        "id": 435277701,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713995222
    },
    {
        "content": "<p>You'll probably have a little bit of work to do to massage things into exactly the form you want, but I would expect the lemmas you prove to be potentially usable elsewhere.</p>",
        "id": 435277943,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713995344
    },
    {
        "content": "<p>Let me start by saying that <a href=\"https://github.com/JADekker/PiBaseTracking/tree/master/PiBaseProject\">this</a> project was/is very much work in progress. My goal was to automatically check what definitions/theorems from Pi-Base had already been formalised in Mathlib, to provide a nice to-do list for people interested in learning Lean. </p>\n<p>As a proof-of-concept, I wrote some code that automatically tried to find the associated Mathlib name <code>lean_checklist_properties/properties_in_lean.lean</code> for each property in pi-base. It then runs #check on each name, to see if it has already been declared. This is performed by <code>scripts_for_progress/properties_to_cleaned.jl</code>, which reads in the contents of <code>properties</code>. Of course, there are obviously quite some false negatives here, of which I tried to remove some manually by hard-coding them in said Julia file. </p>\n<p>Then, I translated each theorem in pi-base to a theorem in Lean format, which happens in two stages: <code>theorems_to_cleaned.jl</code> cleans up the theorem statements a bit, <code>theorems_to_lean.jl</code> then converts these to Lean statements, splitting them over a few files to avoid that the file becomes too slow. It then simply tries to prove every example by <code>exact?</code>, where any problem (missing definition/exact? failing) indicates that the theorem may not yet be in Mathlib. Of course, sometimes Lean would need a bit more help, so again expect some false negatives here. The translated theorems are in the <code>lean_checklist_other</code>folder. </p>\n<p>Where my approach is different from what I've seen on your repo is that I didn't place new <code>def</code>s or <code>theorem</code>s, but instead use <code>#check</code> and <code>example … := by exact?</code>. Together with the fact that I rewrote everything in terms of Mathlib names, this may make my files a bit unwieldy for your purposes, but feel free to use whatever you find in the repo! </p>\n<p>I figured that a proper workflow should be fully dependent on Lean (rather than auxiliary Julia files) or the lean-formatting should be done at the pi-base side for long-run durability, so I decided to learn more functional programming and meta-programming in Lean to properly try to set this up, but a combination of steep learning curve and scarce time have prevented me from accomplishing this. </p>\n<p>If you are planning to include Lean declarations in pi-base, I think that is a better route, so I think that I will shift my attention to other projects. (Either way, it will take quite a while before I’m at the meta-programming skill level to continue properly on this project).</p>",
        "id": 435423115,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714061461
    },
    {
        "content": "<p>All in all, I really want to stress that what I've done is not rocket science/complete in any way, so please approach the problem in the way that you see fit. I'm more than happy to jump on a Zoom call sometime, although we should coordinate a bit: I'm based in Amsterdam (Netherlands).</p>",
        "id": 435423513,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714061599
    },
    {
        "content": "<p>I'm also more than happy to contribute if time allows! However, I unfortunately won't be able to join for both Zoom-meetings that you mentioned.</p>",
        "id": 435424218,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714061849
    },
    {
        "content": "<p>Also, see <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421135807\">here</a> for the Lean code <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> used for the Matrix Cookbook. (That thread might also be of independent interest).</p>",
        "id": 435424609,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714061990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/general.20topology.20in.20mathlib/near/435277943\">said</a>:</p>\n<blockquote>\n<p>You'll probably have a little bit of work to do to massage things into exactly the form you want, but I would expect the lemmas you prove to be potentially usable elsewhere.</p>\n</blockquote>\n<p>Thanks - I took a swing and missed in my latest PR commit to figure out how to define <code>πBase.S20</code> [<a href=\"https://topology.pi-base.org/spaces/S000020\">link</a>] to be <code>OnePoint ℕ</code>, then use it in a theorem to show that <a href=\"https://topology.pi-base.org/theorems/T000425\">all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>k</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">k_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-Hausdorff spaces are US (T425)</a>. Hand-holding is accepted if you have the hand to offer, but I also plan to dig around mathlib myself a bit more to puzzle out what I'm doing wrong.</p>\n<p>I don't know what the review workflow is for mathlib (I see lots of open PRs!), but I look forward to figuring out one way or another how to best leverage the formalized results we model in pi-Base to grow mathlib's general topology content.</p>",
        "id": 435465554,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714078182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"468051\">@Steven Clontz</span> which PR?</p>",
        "id": 435466334,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714078493
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12387\">#12387</a></p>",
        "id": 435468107,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714079216
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"673728\">@Josha Dekker</span> for those details. I co-organized a workshop on math research cyberinfrastructure at the American Institute of Mathematics a few months ago, and pi-Base's founder <span class=\"user-mention\" data-user-id=\"469672\">@James Dabbs</span> hacked out a somewhat similar proof of concept to point things on our side from pi-Base to mathlib: <a href=\"https://github.com/pi-base/data/pull/478\">https://github.com/pi-base/data/pull/478</a> Demo: <a href=\"https://aim.topology.pages.dev/properties/P000001\">https://aim.topology.pages.dev/properties/P000001</a> (He has a days-old kiddo and has more important things than help me with this project at the moment.</p>\n<p>As you say, I think adding lean identifiers to what we track at pi-Base is something we're interested and would help with wiring everything together. I'm too new to mathlib to know how interested this community would be in back-referencing pi-Base. But I agree that there's a lot of fun work to be done in Lean that would be well-motivated by the right connection between the pi-Base and mathlib.</p>\n<p>Your project seems like it will, at the very least, be helpful for me to learn where pi-Base concepts are already modeled in mathlib. So thank you! And let's stay in touch. (If you'd like to become involved in pi-Base directly, I can suggest moving our community meetings to American mornings so more European folks can join in.)</p>",
        "id": 435468218,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714079269
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12387\">#12387</a> is from a fork <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 435468731,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714079517
    },
    {
        "content": "<p>I don't have write permissions for mathlib, or I'd be happy to make a branch on the core repo and make a new PR (assuming that's the preferred workflow)</p>",
        "id": 435468926,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714079621
    },
    {
        "content": "<p>For now it is. Give me a minute.</p>",
        "id": 435468966,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714079641
    },
    {
        "content": "<p>&lt;- guy who didn't read <a href=\"https://github.com/leanprover-community/mathlib4?tab=readme-ov-file#contributing\">https://github.com/leanprover-community/mathlib4?tab=readme-ov-file#contributing</a> obvs</p>",
        "id": 435469198,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714079735
    },
    {
        "content": "<p>Invite sent: <a href=\"https://github.com/leanprover-community/mathlib4/invitations\">https://github.com/leanprover-community/mathlib4/invitations</a></p>",
        "id": 435469212,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714079741
    },
    {
        "content": "<p>I need to be done with Lean for the day, but I'll come back and take a look at this tomorrow.</p>",
        "id": 435469292,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714079768
    },
    {
        "content": "<p>It's not clear to me that mathlib is the right place for this pi-base tracking; I think it makes more sense to work on this in a separate repo (which could certainly live under leanprover-community if desired, or under the pi-base org!)</p>",
        "id": 435536043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714118676
    },
    {
        "content": "<p>So I'm having fun hacking away at <a href=\"https://github.com/leanprover-community/mathlib4/pull/12436\">https://github.com/leanprover-community/mathlib4/pull/12436</a> but I think it's becoming clear that I might benefit from working on something that I could contribute to mathlib proper, and put my eyes on more Lean written by experienced folks that's been merged to mathlib. Any clues on where I might dig in?</p>",
        "id": 435681862,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714182556
    },
    {
        "content": "<p>Hm, on the topic of separation axioms, I see there's no non-Hausdorff completely normal property in mathlib. Would untangling those details be useful?</p>",
        "id": 435683211,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714183769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"468051\">Steven Clontz</span> <a href=\"#narrow/stream/113489-new-members/topic/general.20topology.20in.20mathlib/near/435681862\">said</a>:</p>\n<blockquote>\n<p>So I'm having fun hacking away at <a href=\"https://github.com/leanprover-community/mathlib4/pull/12436\">https://github.com/leanprover-community/mathlib4/pull/12436</a> but I think it's becoming clear that I might benefit from working on something that I could contribute to mathlib proper, and put my eyes on more Lean written by experienced folks that's been merged to mathlib. Any clues on where I might dig in?</p>\n</blockquote>\n<p>What I did when I started a few months back was first identify pi-base stuff that was missing for which a similar concept had been formalized, and start writing api for that. For example: compact spaces had been done, so I formalized Lindelöf spaces. Now these have been merged, I’m PR’ing k-Lindelöf spaces in two PR’s. By this approach, you can benefit from learning the style used in existent files!</p>",
        "id": 435708335,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714197586
    },
    {
        "content": "<p>These are <a href=\"https://github.com/leanprover-community/mathlib4/pull/11800\">#11800</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/12087\">#12087</a> by the way!</p>",
        "id": 435708745,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714197664
    },
    {
        "content": "<p>Cool. I did end up opening <a href=\"https://github.com/leanprover-community/mathlib4/pull/12458\">https://github.com/leanprover-community/mathlib4/pull/12458</a> to disintangle the <a href=\"https://topology.pi-base.org/properties/P8\">T5</a> and <a href=\"https://topology.pi-base.org/properties/P14\">completely normal</a> properties. Could definitely use feedback as I know my proofs could be improved.</p>",
        "id": 435785548,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714247831
    },
    {
        "content": "<p>You are more likely to get feedback once you get <a href=\"https://github.com/leanprover-community/mathlib4/pull/12458\">#12458</a> onto the <a href=\"https://bit.ly/3cKk3ld\">#queue</a>, which means turning the red x which is currently on your PR into a green tick. At the bottom of the PR it says \"some checks were not successful\", and there seem to be two  issues:</p>\n<p>1) it seems that one of your proofs is unnecessarily verbose and a computer spotted this.<br>\n2) The file <code>Counterexamples/SorgenfreyLine.lean</code> no longer compiles and it's your job to fix this.</p>\n<p>(I figured this out by clicking on various red x's around that part of the PR on the github page)</p>\n<p>Feel free to ask questions if you can't get the green tick on the PR. If you manage to spot it on the queue then you've done what is necessary.</p>",
        "id": 435786448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714248736
    },
    {
        "content": "<p>One tip is to put <code>#lint</code> at the bottom of the file you are working on (and delete it once you are done).</p>",
        "id": 435786738,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1714249083
    },
    {
        "content": "<p>Thanks - I marked it as ready to view before I allowed CI to complete. I'll use those hints to get everything in order.</p>",
        "id": 435795717,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714258733
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib4/pull/12458\">#12458</a> is now ready for review and I see it in <a href=\"https://bit.ly/3cKk3ld\">#queue</a>. I appreciate any other necessary pointers for my first contribution (and greatly appreciate all the feedback I've already received).</p>",
        "id": 436185255,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714448022
    }
]