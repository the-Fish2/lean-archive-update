[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">pParens</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"nf\">pParens</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">&lt;$</span><span class=\"w\"> </span><span class=\"n\">pSym</span><span class=\"w\"> </span><span class=\"err\">’</span><span class=\"p\">(</span><span class=\"err\">’</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"err\">∗</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"err\">∗</span><span class=\"n\">pSym</span><span class=\"w\"> </span><span class=\"err\">’</span><span class=\"p\">)</span><span class=\"err\">’</span>\n</code></pre></div>\n<p>and I have solved the respective pieces in lean, I'll put the code snippets that are in haskell first and then write the ones I converted in lean, let me know if I went wrong somewhere</p>\n<p>firstly what is the Parser type :</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">newtype</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">P</span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"p\">[(</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"p\">,[</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">])])</span>\n\n<span class=\"nf\">pSym</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Eq</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">⇒</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">s</span>\n<span class=\"nf\">pSym</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">P</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">λinp</span><span class=\"w\"> </span><span class=\"err\">→</span>\n<span class=\"kr\">case</span><span class=\"w\"> </span><span class=\"n\">inp</span><span class=\"w\"> </span><span class=\"kr\">of</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">ss</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"err\">≡</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"p\">[(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"n\">ss</span><span class=\"w\"> </span><span class=\"p\">)]</span>\n<span class=\"w\">  </span><span class=\"n\">otherwise</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"p\">])</span>\n\n<span class=\"nf\">pReturn</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">P</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">λinp</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"p\">[(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"n\">inp</span><span class=\"p\">)])</span>\n\n<span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"err\">∗</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"kt\">P</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"err\">∗</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"kt\">P</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">P</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">λinp</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"n\">ss</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"n\">ss</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">←</span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"n\">inp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"n\">ss</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">←</span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"n\">ss</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"p\">(</span><span class=\"o\">&lt;$&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"p\">(</span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"o\">&lt;$&gt;</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">pReturn</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"err\">∗</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">p</span>\n\n<span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"o\">&lt;$</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">const</span><span class=\"w\"> </span><span class=\"o\">&lt;$&gt;</span><span class=\"w\"> </span><span class=\"n\">pReturn</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"err\">∗</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">p</span>\n<span class=\"nf\">p</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"err\">∗</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">const</span><span class=\"w\"> </span><span class=\"o\">&lt;$&gt;</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"err\">∗</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">q</span>\n<span class=\"nf\">p</span><span class=\"w\"> </span><span class=\"err\">∗</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">&lt;$</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"err\">∗</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">q</span>\n</code></pre></div>\n<p>That's it. (let me know if I have missed something)</p>\n<p>Now my lean version has some extras</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">ParserType</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">s</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Parser</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ParserType</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Parser</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pSym</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Parser.P</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">inp</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">inp</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">::</span> <span class=\"n\">ss</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"o\">[(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ss</span><span class=\"o\">)]</span> <span class=\"k\">else</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[])</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">const</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pReturn</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.P</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">inp</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">inp</span><span class=\"o\">)])</span>\n\n<span class=\"c1\">-- | &lt;$&gt;</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"o\">(</span><span class=\"n\">Parser</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">Parser.P</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span>\n    <span class=\"n\">Parser.P</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">λ</span> <span class=\"n\">inp</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">p</span> <span class=\"n\">inp</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">ss</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">ss</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Seq</span> <span class=\"o\">(</span><span class=\"n\">Parser</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">seq</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">p₁</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">p₁</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">Parser.P</span> <span class=\"n\">p₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p₁</span>\n    <span class=\"k\">let</span> <span class=\"n\">p₂</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">p₂</span> <span class=\"o\">()</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">Parser.P</span> <span class=\"n\">p₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p₂</span>\n    <span class=\"n\">Parser.P</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">λ</span> <span class=\"n\">inp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p₁</span> <span class=\"n\">inp</span>\n          <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">ss₁</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">p₂</span> <span class=\"n\">ss₁</span><span class=\"o\">))</span>\n          <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">lst</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lst.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">ss₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">v₁</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">ss₂</span><span class=\"o\">)))</span>\n          <span class=\"bp\">|&gt;.</span><span class=\"n\">head</span><span class=\"bp\">!</span>\n\n<span class=\"c1\">-- | &lt;*&gt; / applicative operator Vthat composes 2 parsers into one</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Applicative</span> <span class=\"o\">(</span><span class=\"n\">Parser</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">p</span>  <span class=\"o\">:=</span> <span class=\"n\">Parser.P</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">λ</span> <span class=\"n\">inp</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">inp</span><span class=\"o\">)]</span>\n  <span class=\"n\">seqLeft</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">p₁</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">p₁</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">Parser.P</span> <span class=\"n\">p₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p₁</span>\n    <span class=\"k\">let</span> <span class=\"n\">p₂</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">p₂</span> <span class=\"o\">()</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">Parser.P</span> <span class=\"n\">p₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p₂</span>\n    <span class=\"n\">Parser.P</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">λ</span> <span class=\"n\">inp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p₂</span> <span class=\"n\">inp</span>\n      <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ss₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p₁</span> <span class=\"n\">ss₂</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">head</span><span class=\"bp\">!</span>\n\n  <span class=\"n\">seqRight</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">p₁</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">p₁</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">Parser.P</span> <span class=\"n\">p₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p₁</span>\n    <span class=\"k\">let</span> <span class=\"n\">p₂</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">p₂</span> <span class=\"o\">()</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">Parser.P</span> <span class=\"n\">p₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p₂</span>\n    <span class=\"n\">Parser.P</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">λ</span> <span class=\"n\">inp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p₁</span> <span class=\"n\">inp</span>\n      <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ss₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p₂</span> <span class=\"n\">ss₂</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">head</span><span class=\"bp\">!</span>\n\n  <span class=\"n\">seq</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">p₁</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">p₁</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">Parser.P</span> <span class=\"n\">p₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p₁</span>\n    <span class=\"k\">let</span> <span class=\"n\">p₂</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">p₂</span> <span class=\"o\">()</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">Parser.P</span> <span class=\"n\">p₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p₂</span>\n    <span class=\"n\">Parser.P</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">λ</span> <span class=\"n\">inp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p₁</span> <span class=\"n\">inp</span>\n          <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">ss₁</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">p₂</span> <span class=\"n\">ss₁</span><span class=\"o\">))</span>\n          <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">lst</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lst.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">ss₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">v₁</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">ss₂</span><span class=\"o\">)))</span>\n          <span class=\"bp\">|&gt;.</span><span class=\"n\">head</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">leftMap</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">s</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">const</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">pReturn</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">p</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">7</span> <span class=\"s2\">\" &lt;$ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">leftMap</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">5</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">5</span> <span class=\"s2\">\" &lt;* \"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"mi\">6</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Parser.seqLeft</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">5</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">5</span> <span class=\"s2\">\" *&gt; \"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"mi\">6</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Parser.seqLeft</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>The reason I am asking this is I am unable to fix the function I mentioned initially. Thanks for reading this</p>",
        "id": 432964543,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1712948152
    },
    {
        "content": "<p>was able to fix it myself, I just needed to generalize pSym</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pSatisfy</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Parser</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Parser.P</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">λ</span> <span class=\"n\">inp</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">inp</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">)]</span> <span class=\"k\">else</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pSym</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Token</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pSatisfy</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 433175286,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1713138348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar 🦀 (he/him)</span> has marked this topic as resolved.</p>",
        "id": 433175293,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713138359
    }
]