[
    {
        "content": "<p>Are there any book chapters, lectures, code examples, or other resources that cover the construction of the real numbers from scratch using Cauchy sequences with rational numbers in Lean (preferably Lean 4, though Lean 3 is acceptable)? Ideally, I am seeking a resource that relies solely on the Lean 4 core, without any other dependencies.</p>\n<p>I am aware of the construction in Mathlib, but it is very general (for valid reasons) and likely not minimal in terms of lines of code. I am looking for a minimal and self-contained implementation that follows the \"shortest formalized route\" to the real numbers while being instructive for undergraduate students.</p>",
        "id": 442736505,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1717579691
    },
    {
        "content": "<p>I would like to add that a heavily <code>sorry</code>-filled, self-contained implementation of the real numbers would also suffice if available. I have searched, but all I can find is the Mathlib implementation.</p>",
        "id": 442906852,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1717625054
    },
    {
        "content": "<p>I have compiled a list of all known implementations of the real numbers in Lean.</p>\n<p>Does this list appear to be complete for publicly available implementations of the real numbers in Lean?</p>\n<p>I had expected, or perhaps hoped, to find a \"from scratch\" implementation as part of the Xena project (Imperial), but after searching the Xena project blog, I couldn't find any evidence of such an implementation. It is possible that the real numbers were already included in Mathlib when the Xena project/Imperial undergraduate formalization effort began.</p>\n<p>Current implementation in mathlib (Lean 4, credits: Mario Carneiro, Floris van Doorn):</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/Real/Basic.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/Real/Basic.lean</a></p>\n<p>Lean 3 implementation from 2017 (\"construct reals as complete, linear ordered field\", credit: Johannes Hölzl):</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/commit/7882677de6cdb4f0044726054e16a535407256c0\">https://github.com/leanprover-community/mathlib/commit/7882677de6cdb4f0044726054e16a535407256c0</a></p>\n<p>Lean 3 implementation from 2018 (\"feat(data/real): reals from first principles\", credit: Mario Carneiro):</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/commit/04cac9587e1d32479935a0cf132b140b28bbac2b\">https://github.com/leanprover-community/mathlib/commit/04cac9587e1d32479935a0cf132b140b28bbac2b</a></p>\n<p>Does this look correct?</p>",
        "id": 443327145,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1717776816
    },
    {
        "content": "<p>Nope, you're missing the Eudoxus reals, implemented twice (search through Zulip)</p>",
        "id": 443327359,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717776919
    },
    {
        "content": "<p>Oh yes Imperial students did Eudoxus twice, and there may be more implementations. Yes Isak you're right, when I got interested in lean Johannes Hoelzl had just finished making the real numbers in mathlib. My first PR to mathlib was the complex numbers :-)</p>",
        "id": 443327913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717777142
    },
    {
        "content": "<p>Thanks for the clarification <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> and <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>!</p>\n<p>I located the Eudoxus reals implementation by Xiang Li on GitHub. However, based on the Zulip archive, it appears that the other Eudoxus implementation by an Imperial student was never publicly released.</p>\n<p>From my investigation, it seems there is only one publicly accessible Lean 4 implementation of the real numbers, which is the one in mathlib attributed to Mario Carneiro and Floris van Doorn. Is this statement accurate?</p>\n<p>Links of relevance:</p>\n<p>Eudoxus reals (Lean 3, credit: Xiang Li)<br>\n<a href=\"https://github.com/Lix0120/eudoxus\">https://github.com/Lix0120/eudoxus</a></p>\n<p>Axiomatization of the real numbers: linear ordered field (credit: Alex J Best)<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/3292\">https://github.com/leanprover-community/mathlib/pull/3292</a></p>",
        "id": 443441859,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1717835108
    },
    {
        "content": "<p>I don't know of any other Lean 4 developments of the real numbers, although <span class=\"user-mention\" data-user-id=\"683979\">@Isak Colboubrani</span> has got it on their radar I believe...</p>",
        "id": 443467054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717852299
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/113489-new-members/topic/building.20reals.20with.20quasi-morphisms\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/building.20reals.20with.20quasi-morphisms</a> for yet another implementation of Eudoxus reals.</p>",
        "id": 443517132,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717877342
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>! Are you referring to the code in <a href=\"#narrow/stream/113489-new-members/topic/building.20reals.20with.20quasi-morphisms/near/256852903\">this message</a>, or is there additional code outside of that thread that I should be aware of?</p>\n<p>I attempted to port it to Lean 4. Does it look like a correct translation? Please let me know if anything appears odd or non-idiomatic: I'm eager to learn!</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">-- Lean 4 port of https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/building.20reals.20with.20quasi-morphisms/near/256852903</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">QuasiMorphism</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℤ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">ℤ</span>\n<span class=\"w\">  </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℤ</span>\n<span class=\"w\">  </span><span class=\"n\">mapMul'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">abs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">bound</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CoeFun</span><span class=\"w\"> </span><span class=\"n\">QuasiMorphism</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ℤ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">coe</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">toFun</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">mapMul</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">QuasiMorphism</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">abs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">mapMul'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">QuasiMorphismSetoid</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Setoid</span><span class=\"w\"> </span><span class=\"n\">QuasiMorphism</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"n\">iseqv</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"gr\">sorry</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">EuxodusReal</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Quotient</span><span class=\"w\"> </span><span class=\"n\">QuasiMorphismSetoid</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">QuasiMorphism</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">⟦</span><span class=\"n\">q</span><span class=\"bp\">⟧</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">EuxodusReal</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 443582203,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1717929405
    },
    {
        "content": "<p>I don't know, you need to ask Yannis.</p>",
        "id": 443594753,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717939420
    },
    {
        "content": "<p>You might want to take a look at <a href=\"https://rand.cs.uchicago.edu/vqc/Real.html\">this</a>, although it is explained in Coq.</p>",
        "id": 443595043,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1717939632
    },
    {
        "content": "<p>Is there one using binary expansions and the order topology?</p>",
        "id": 443607126,
        "sender_full_name": "E. Dean Young",
        "timestamp": 1717947003
    }
]