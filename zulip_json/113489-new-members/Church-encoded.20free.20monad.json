[
    {
        "content": "<p>I have a question regarding the free monad, or more precisely regarding a \"Church-encoded version\" of the free monad.</p>\n<p>I'm interested in an efficient pause monad, <em>i.e.</em> a monad that can suspend computations. It lead me here</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/10236953/the-pause-monad\">https://stackoverflow.com/questions/10236953/the-pause-monad</a></li>\n</ul>\n<p>where the accepted answer references three great blog posts, though you need to change the background to be able to read them.</p>",
        "id": 439610810,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1716223194
    },
    {
        "content": "<p>But first, thanks to</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/78274957/how-to-define-free-monads-and-cofree-comonads-in-lean4/78275159#78275159\">https://stackoverflow.com/questions/78274957/how-to-define-free-monads-and-cofree-comonads-in-lean4/78275159#78275159</a> (which I found originally in <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20define.20free.20monad.20and.20cofree.20comonad.3F\">this Lean 4 Zulip thread</a>)</li>\n</ul>\n<p>I managed to write a working <code>Pause</code> monad which looks like this.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>free version</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">! # Defining `Free` -/</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Free</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">pure</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Free</span> <span class=\"n\">F</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">free</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Free</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Free</span> <span class=\"n\">F</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Free</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">bind</span> <span class=\"o\">:</span> <span class=\"n\">Free</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Free</span> <span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Free</span> <span class=\"n\">F</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">free</span> <span class=\"n\">β</span> <span class=\"n\">fc</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">free</span> <span class=\"n\">β</span> <span class=\"n\">fc</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">c</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">bind</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instMonad</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Free</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">Free.pure</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">Free.bind</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instMonadLift</span> <span class=\"o\">:</span> <span class=\"n\">MonadLift</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">Free</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">monadLift</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">free</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"bp\">.</span><span class=\"n\">pure</span>\n\n\n\n<span class=\"c\">/-</span><span class=\"cm\">! ## Now I can write `Pause` -/</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Pause.Op</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mutate</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Op</span> <span class=\"n\">σ</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">yield</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Op</span> <span class=\"n\">σ</span> <span class=\"n\">α</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Pause</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Free</span> <span class=\"o\">(</span><span class=\"n\">Pause.Op</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Pause</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mutate</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Pause</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">Pause.Op.mutate</span> <span class=\"n\">f</span> <span class=\"n\">next</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">yield</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Pause</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">Pause.Op.yield</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">done</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Pause</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">code</span> <span class=\"o\">:</span> <span class=\"n\">Pause</span> <span class=\"n\">σ</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">×</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Pause</span> <span class=\"n\">σ</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">code</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"o\">()</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">free</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mutate</span> <span class=\"n\">f</span> <span class=\"n\">next</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">code</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"n\">next</span>\n    <span class=\"n\">step</span> <span class=\"n\">code</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">state</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">free</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">yield</span> <span class=\"n\">next</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"n\">next</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Pause</span> <span class=\"n\">Nat</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">mutate</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">()</span>\n  <span class=\"n\">yield</span> <span class=\"o\">()</span>\n  <span class=\"n\">mutate</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">()</span>\n  <span class=\"n\">yield</span> <span class=\"o\">()</span>\n  <span class=\"n\">mutate</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">()</span>\n  <span class=\"n\">yield</span> <span class=\"o\">()</span>\n  <span class=\"n\">done</span> <span class=\"o\">()</span>\n\n<span class=\"sd\">/-- info:</span>\n<span class=\"sd\">-&gt; 1</span>\n<span class=\"sd\">-&gt; 2</span>\n<span class=\"sd\">-&gt; 3</span>\n<span class=\"sd\">done 3</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n  <span class=\"k\">#eval</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">nxt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">test.step</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"-&gt; {s}\"</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">nxt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nxt.step</span> <span class=\"n\">s</span> <span class=\"k\">then</span>\n        <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"-&gt; {s}\"</span>\n        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">nxt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nxt.step</span> <span class=\"n\">s</span> <span class=\"k\">then</span>\n          <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"-&gt; {s}\"</span>\n          <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nxt.step</span> <span class=\"n\">s</span> <span class=\"k\">then</span>\n            <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"done {s}\"</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Pause</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Free</span>\n</code></pre></div>\n</div></div>",
        "id": 439610920,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1716223224
    },
    {
        "content": "<p>I was afraid because <code>Free</code> is <code>u + 1</code> since it quantifies on <code>β</code> which is a <code>Type u</code>, but it works.</p>\n<p>That's great, but if I understand <a href=\"https://stackoverflow.com/questions/10236953/the-pause-monad\">the first link I provided</a> it yields code that's asymptotically slower than necessary.</p>\n<p>So I went for the Yoneda/Rec encoding discussed in <a href=\"http://comonad.com/reader/2011/free-monads-for-less-2\">the second blog post reference</a> (beware the aggressive background), which goes like this unless I messed something up.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Church-encoded</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">! # Defining `Fre` through `Yoneda` and `Rec` -/</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Yoneda</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">β</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Yoneda</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">drop</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Yoneda</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">y</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instMonad</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Yoneda</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">k</span> <span class=\"n\">a</span>\n  <span class=\"n\">bind</span> <span class=\"n\">y</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.drop</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Yoneda</span>\n\n\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Rec</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Fre</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- `∀ {β : Type u}, (α → β) → (M β → β) → β`</span>\n  <span class=\"n\">Yoneda</span> <span class=\"o\">(</span><span class=\"n\">Rec</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Fre</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instMonad</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Fre</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">_k'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"n\">a</span>\n  <span class=\"n\">bind</span> <span class=\"n\">self</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">k'</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">self</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"n\">k</span> <span class=\"n\">k'</span><span class=\"o\">)</span> <span class=\"n\">k'</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instMonadLift</span> <span class=\"o\">[</span><span class=\"n\">Functor</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadLift</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">Fre</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">monadLift</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">k'</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">k</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">k'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lift</span> <span class=\"o\">[</span><span class=\"n\">Functor</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Fre</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">monadLift</span>\n\n\n\n<span class=\"c\">/-</span><span class=\"cm\">! ## Now I can define `Pause` -/</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Pause.Op</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mutate</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Op</span> <span class=\"n\">σ</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">yield</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Op</span> <span class=\"n\">σ</span> <span class=\"n\">α</span>\n\n<span class=\"sd\">/-- Needed to use `Fre.lift` directly. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Pause.Op.instFunctor</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"o\">(</span><span class=\"n\">Op</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span> <span class=\"n\">f</span>\n    <span class=\"bp\">|</span> <span class=\"n\">mutate</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mutate</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">yield</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">yield</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Pause</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Fre</span> <span class=\"o\">(</span><span class=\"n\">Pause.Op</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Pause</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mutate</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Pause</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Op.mutate</span> <span class=\"n\">f</span> <span class=\"n\">next</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">Fre.lift</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">yield</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Pause</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">conv</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Op.yield</span> <span class=\"o\">(</span><span class=\"n\">conv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">tail</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">done</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Pause</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Fre.instMonad.pure</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instMonad</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Pause</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Pause</span>\n  <span class=\"n\">exact</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">code</span> <span class=\"o\">:</span> <span class=\"n\">Pause</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">×</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Pause</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- code (fun _ =&gt; (state, none))</span>\n  <span class=\"c1\">--   fun</span>\n  <span class=\"c1\">--   | .mutate f (state, res?) =&gt; sorry</span>\n  <span class=\"c1\">--   | .yield res =&gt; sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Pause</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Fre</span>\n</code></pre></div>\n</div></div>",
        "id": 439611000,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1716223251
    },
    {
        "content": "<p>But now I don't see how I can write the <code>Fre.Pause.step</code> function. My understanding is that I need to get <code>code</code> to produce the result I want, meaning the (hidden) <code>β : Type u</code> in <code>Fre</code>'s definition must be <code>σ × Option (Pause σ α)</code> or something similar.</p>\n<p>But that can't work since <code>β : Type u</code> and <code>σ × Option (Pause σ α) : Type (u + 1)</code>.</p>",
        "id": 439611048,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1716223268
    },
    {
        "content": "<p>At this point I assume I discovered something well-known about type constructors like <code>Fre</code> in constructive languages and/or languages with non-cumulative type universes. Probably that if allowed this would bring untyped lambda-calculus or something.</p>\n<p>Is it the case, or did I mess something up?</p>\n<p>If it's the former, is there a way around it? Like using <code>Free</code> but doing something tricky with <code>SeqLeft</code>/<code>SeqRight</code>?</p>\n<p>If it's the latter, I would appreciate if anyone had time to elaborate.</p>",
        "id": 439611070,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1716223280
    }
]