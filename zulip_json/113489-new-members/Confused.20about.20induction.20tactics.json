[
    {
        "content": "<p>There is a Lean 4 tactic <code>induction</code> and then Mathlib4 has two additional ones: <code>induction'</code> and <code>induction''</code>. For the Mathlib ones, when I went to the mathlib4 docs and revealed \"Equations\", I got the message \"One or more equations did not get rendered due to their size.\" So I couldn't quite read more about them. How do all these induction tactics differ?</p>",
        "id": 441253711,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716993138
    },
    {
        "content": "<p>You can always look at the source</p>",
        "id": 441253979,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716993233
    },
    {
        "content": "<p>The main difference between them is the syntax</p>",
        "id": 441253997,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716993241
    },
    {
        "content": "<p>So they're equally powerful?</p>",
        "id": 441254119,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716993270
    },
    {
        "content": "<p>I took a look at the source code for <code>induction''</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> S -/</span><span class=\"w\"> </span><span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">induction''</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s2\">\"induction''\"</span><span class=\"w\"> </span><span class=\"n\">casesTarget</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">fixingClause</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"n\">generalizingClause</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s2\">\" with\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ppSpace</span><span class=\"w\"> </span><span class=\"n\">colGt</span><span class=\"w\"> </span><span class=\"n\">withPattern</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">tactic</span>\n</code></pre></div>\n<p>It looks a bit cryptic to me. Do I need to learn metaprogramming in Lean 4 to figure out what this means?</p>",
        "id": 441254679,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716993432
    },
    {
        "content": "<p>I've never heard of <code>induction''</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 441255884,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716993818
    },
    {
        "content": "<p>I don't know if there's any real documentation on the differences. <code>induction'</code> basically matches the syntax from lean 3, to make it easier to port existing code. I guess the main notable difference is that you can do <code>induction' x with a b c d e</code> to name things introduced in each of the new subgoals, and <code>induction</code> has a different syntax for that</p>",
        "id": 441256330,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716993956
    },
    {
        "content": "<p>Let me be more specific then. The following is from <em>Mathematics in Lean 4</em>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">Prime</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">BigOperators</span><span class=\"bp\">.</span><span class=\"n\">Order</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">Linarith</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">exists_prime_factor</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">Prime</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">∣</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">by_cases</span><span class=\"w\"> </span><span class=\"n\">np</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">Prime</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">np</span>\n<span class=\"w\">  </span><span class=\"n\">induction'</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">strong_induction_on</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">ih</span>\n</code></pre></div>\n<p>If one opts for <code>induction</code> instead of <code>induction'</code>, how should the last line be modified? When I removed <code>'</code>, Lean complained about <code>n</code> after <code>with</code>, saying \"unknown tactic\". So I suppose that's where the syntax differs since <code>induction</code> expects tactics after <code>with</code>. But is there a way to get things names with <code>induction</code>?</p>",
        "id": 441257342,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716994308
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">strong_induction_on</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">ih</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">?_</span>\n</code></pre></div>",
        "id": 441258894,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1716994796
    },
    {
        "content": "<p>It would be nice if there were a code action to fill in the case names and arguments, but I think you just have to look at the signature of <code>Nat.strong_induction_on</code>.</p>\n<p>If the arguments for the cases are implicit you're out of luck (as far as I know), and in Mathlib they often are. See <code>Finset.induction</code>, for example. It's not usable with <code>induction</code>.</p>",
        "id": 441259509,
        "sender_full_name": "Richard Copley",
        "timestamp": 1716994934
    },
    {
        "content": "<p>Would you say that just use <code>induction'</code> whenever one is using Mathlib?</p>",
        "id": 441259747,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716994999
    },
    {
        "content": "<p>I think there is a code action</p>\n<p>Edit: There is a quick fix for <code>induction n</code>, but it disappears with <code>using</code> :(</p>",
        "id": 441260120,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1716995103
    },
    {
        "content": "<p>Pardon my ignorance. What is a \"code action\"?</p>",
        "id": 441260214,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716995127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"397075\">Kevin Cheung</span> <a href=\"#narrow/stream/113489-new-members/topic/Confused.20about.20induction.20tactics/near/441259747\">said</a>:</p>\n<blockquote>\n<p>Would you say that just use <code>induction'</code> whenever one is using Mathlib?</p>\n</blockquote>\n<p>Some would say that. I prefer to use <code>induction</code> when possible.</p>",
        "id": 441260237,
        "sender_full_name": "Richard Copley",
        "timestamp": 1716995133
    },
    {
        "content": "<p>In the solution by Sébastien, what exactly is <code>h n ih =&gt; ?_</code> doing?</p>",
        "id": 441260414,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716995173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/113489-new-members/topic/Confused.20about.20induction.20tactics/near/441259509\">said</a>:</p>\n<blockquote>\n<p>If the arguments for the cases are implicit you're out of luck (as far as I know), and in Mathlib they often are. See <code>Finset.induction</code>, for example. It's not usable with <code>induction</code>.</p>\n</blockquote>\n<p>That's not correct, you just need to resort to the <code>@</code> version. A quick grep gives me for instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">Associated</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommMonoid</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">~ᵤ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">∏</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">~ᵤ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">∏</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">prod_empty</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">hjs</span><span class=\"w\"> </span><span class=\"n\">IH</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">classical</span>\n<span class=\"w\">    </span><span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 441260575,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1716995224
    },
    {
        "content": "<p>Right ... perhaps I should have guessed that. It only occurred to me to try <code>{}</code> syntax for implicit arguments (as in <code>(fun {x} y =&gt; x * y : {x : ℕ} → (y : ℕ) → ℕ)</code>).</p>\n<p><span class=\"user-mention silent\" data-user-id=\"397075\">Kevin Cheung</span> <a href=\"#narrow/stream/113489-new-members/topic/Confused.20about.20induction.20tactics/near/441260414\">said</a>:</p>\n<blockquote>\n<p>In the solution by Sébastien, what exactly is <code>h n ih =&gt; ?_</code> doing?</p>\n</blockquote>\n<p>It supplies the argument <code>fun n ih =&gt; ?_</code> for the parameter <code>h</code> of <code>Nat.strong_induction_on</code>. I think Sébastien meant the <code>?_</code> placeholder informally; it's the place where you type your proof tactic block (usually starting on the next line, if it's multiline).</p>",
        "id": 441262597,
        "sender_full_name": "Richard Copley",
        "timestamp": 1716995840
    },
    {
        "content": "<p>Ah! It is starting to make sense. Thank you.</p>",
        "id": 441262791,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716995897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"397075\">Kevin Cheung</span> <a href=\"#narrow/stream/113489-new-members/topic/Confused.20about.20induction.20tactics/near/441259747\">said</a>:</p>\n<blockquote>\n<p>Would you say that just use <code>induction'</code> whenever one is using Mathlib?</p>\n</blockquote>\n<p>No, there's currently no policy that would point in that direction</p>",
        "id": 441271598,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716998554
    },
    {
        "content": "<p>I would suggest the opposite: avoid any primed tactics, they might disappear one day, they were only there to help the port along and the port is now done.</p>",
        "id": 441271792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716998628
    },
    {
        "content": "<p>If that's the case, would we see an update to <em>Mathematics in Lean</em> in the near future? It uses <code>induction'</code> a lot.</p>",
        "id": 441272068,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716998710
    },
    {
        "content": "<p>Maybe \"a lot\" is an exaggeration. It prefers it.</p>",
        "id": 441272187,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716998755
    },
    {
        "content": "<p>Note that MIL was an early adopter of Lean 4, which would explain the primed tactics there; I don't know if they plan on changing to unprimed. As you can see above there's a learning curve involved with the unprimed versions because you have to learn how to write 2d proofs (but that learning curve is definitely worth embarking on!). This is particularly problematic in the natural number game, where I uses <code>cases'</code> and don't really know how to switch to <code>cases</code>.</p>",
        "id": 441272810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716998944
    },
    {
        "content": "<p>Interesting situation.</p>",
        "id": 441272913,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1716998984
    },
    {
        "content": "<p>Believe me, the port was a very interesting situation :-) In a parallel universe we're still doing it. It was an extraordinary achievement to get it done so quickly, but we still have a bunch of technical debt, e.g. the primed tactics.</p>",
        "id": 441273122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716999045
    },
    {
        "content": "<p>I’m pretty sure we will end up getting rid of <code>induction'</code> in MIL. But indeed it would have been difficult initially.</p>",
        "id": 441362063,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717036072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Confused.20about.20induction.20tactics/near/441255884\">said</a>:</p>\n<blockquote>\n<p>I've never heard of <code>induction''</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>I'm pretty sure it's for what was the <code>induction'</code> tactic in Lean 3, but we never ported it?</p>",
        "id": 441406857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717057171
    },
    {
        "content": "<p>I am not familiar with the term \"2d proof\". What does this mean in the context of Lean?</p>",
        "id": 441456101,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717075437
    },
    {
        "content": "<p>I think it refers to the </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">case</span><span class=\"bp\">...</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">case</span><span class=\"bp\">...</span>\n</code></pre></div>\n<p>syntax</p>",
        "id": 441457021,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717075727
    },
    {
        "content": "<p>I see.</p>",
        "id": 441457090,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717075751
    },
    {
        "content": "<p>This doesn't seem to look worse than what <code>induction'</code> gives.</p>",
        "id": 441457176,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717075785
    },
    {
        "content": "<p>I don't think so - it's just different if you have experience in lean 3</p>",
        "id": 441457368,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717075840
    },
    {
        "content": "<p>I have zero experience in Lean 3. So I wasn't even aware of the primed tactics being ported from Lean 3. I was just starting from scratch with MIL.</p>",
        "id": 441457484,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1717075882
    },
    {
        "content": "<p>Yeah. More precisely, in NNG I name the inductive hypotheses immediately and just get two goals, but I don't know how to do this with <code>induction</code>.</p>",
        "id": 441459961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717076667
    }
]