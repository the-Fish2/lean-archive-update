[
    {
        "content": "<p>I'm finding that whenever I want to prove anything using constants that I've defined earlier, I end up needing to manually unfold them. It's not a big deal though it makes me wonder if there are tactics that just do the rote work for me.</p>\n<p>Here's an example I'm trying to clean up a bit.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">declSize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">declSize.fst</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">box_idxs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">declSize.snd.val</span>\n  <span class=\"k\">let</span> <span class=\"n\">offset</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">root</span> <span class=\"bp\">*</span> <span class=\"n\">root</span> <span class=\"bp\">*</span> <span class=\"n\">size</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">root</span>\n  <span class=\"k\">let</span> <span class=\"n\">mbed</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↪</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">i</span> <span class=\"bp\">↦</span>\n      <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">/</span> <span class=\"n\">root</span>\n      <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">%</span> <span class=\"n\">root</span>\n      <span class=\"n\">offset</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n    <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">eq</span>\n      <span class=\"c1\">-- Unfold all relevant constants in eq</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">root</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">eq</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">size</span> <span class=\"n\">at</span> <span class=\"n\">eq</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">declSize</span> <span class=\"n\">at</span> <span class=\"n\">eq</span>\n      <span class=\"c1\">----------------------</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">eq</span>\n      <span class=\"n\">omega</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">mbed</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">size</span>\n</code></pre></div>",
        "id": 425925507,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1710168592
    },
    {
        "content": "<p>If you use <code>abbrev</code> instead of <code>def</code> for your constants, does that give you what you want?</p>",
        "id": 425934559,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1710170799
    },
    {
        "content": "<p>Can’t you do it in one step as <code>simp only [root, size, declSize] at eq</code>?</p>",
        "id": 425935684,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710171110
    },
    {
        "content": "<p>You can also use the simp configuration to unfold lets, but of course there is no configuration option to unfold all global definitions since this would be a disaster (in your case it would unfold the definition of subtypes and of powers for instance).</p>",
        "id": 425936521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710171347
    },
    {
        "content": "<p><code>abbrev</code> is such a useful thing that is hardly mentioned in the few books that I have read so far. Thanks for mentioning it.</p>",
        "id": 426311602,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1710328054
    },
    {
        "content": "<p>In my case, most of the time I don't need Lean to unfold the definitions, so abbrev feels aggressive. Though notably, none of my definitions are likely to bloat term/slow compilation much, so it's probably more just my learning journey.</p>",
        "id": 426337107,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1710335658
    }
]