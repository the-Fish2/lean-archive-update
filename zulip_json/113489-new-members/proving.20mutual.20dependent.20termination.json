[
    {
        "content": "<p>Hello, Im trying to write a Free Monad (hope its the correct term) that captures a certain sequence of effects. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Eff</span><span class=\"o\">:</span>  <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span>  <span class=\"n\">Eff</span> <span class=\"n\">Unit</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Do</span> <span class=\"o\">:</span>  <span class=\"n\">Eff</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">M</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">M</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Return</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">M</span> <span class=\"n\">a</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">M.bind</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">M.Do</span> <span class=\"n\">eff</span> <span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"n\">next'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M.Do</span> <span class=\"n\">eff</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">next'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">M.Return</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">next'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">next'</span> <span class=\"n\">v</span>\n<span class=\"c1\">-- cannot defer termination</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">Eff.fn</span><span class=\"o\">:</span> <span class=\"n\">Eff</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Eff.A</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">M.fn</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">M.Return</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">M.Do</span> <span class=\"n\">eff</span> <span class=\"n\">next</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">M.fn</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"n\">eff.fn</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- cannot defer termination</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the inductive M represents the Sequence structure while Eff is a inductive listing all my effects. When not using mutual, Lean can figure out termination by itself, but how can I do it with Mutual? I could stuff M and Eff into one big inductive but the code gets kinda messy</p>",
        "id": 422138355,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1708298882
    },
    {
        "content": "<p>This sort of code relies heavily on structural recursion: it's much easier to write such functions using recursors than it is to find a well-behaved measure to do well-founded recursion over. The issue is that Lean doesn't know how to check for structural recursion over mutual inductive types. In your case, it means that it tries to do well-founded recursion over your functions, but fails because of this.</p>",
        "id": 422210821,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1708341045
    },
    {
        "content": "<p>im hearing the term \"recursors\" for the first time, i noticed that lean fails to check structural recursion for mutual inductive types (probalby because its hard?)<br>\nonly solution i came up with is combining both inductives into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>  <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Do_A</span> <span class=\"o\">:</span>  <span class=\"n\">M</span> <span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">M</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">M</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">Do_B</span> <span class=\"o\">:</span>  <span class=\"n\">M</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">M</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">M</span> <span class=\"n\">a</span>\n<span class=\"c1\">-- possibly many effects</span>\n<span class=\"bp\">|</span> <span class=\"n\">Return</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">M</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>which should be equivalent but more messy, ill look up recursors</p>",
        "id": 422212379,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1708341653
    }
]