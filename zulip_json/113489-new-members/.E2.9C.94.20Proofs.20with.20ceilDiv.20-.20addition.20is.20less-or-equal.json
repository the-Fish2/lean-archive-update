[
    {
        "content": "<p>Hello everybody. I am currently tackling the last lemma needed for the <a href=\"https://github.com/bernborgess/lean-cutting-planes/blob/main/LeanCuttingPlanes%2FRules%2FDivision.lean\">Division Theorem</a>. This consists of proving that Naturals when added and then taken the ceilDiv will be less or equal than the ceilDiv of each term. So far I have been trying to prove a simpler version \"add_ceilDiv\" below with just 2 terms, and annotated my paper proof below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">Tuple</span><span class=\"bp\">.</span><span class=\"n\">Reflection</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">Notation</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">Floor</span><span class=\"bp\">.</span><span class=\"n\">Div</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">b</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">FinVec</span><span class=\"w\"> </span><span class=\"n\">BigOperators</span>\n\n<span class=\"c1\">-- A simple lemma to illustrate the theorem</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">add_ceilDiv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"c\">/-</span><span class=\"cm\"> My paper proof</span>\n<span class=\"cm\">  ⊢ (a + b) ⌈/⌉ c ≤ a ⌈/⌉ c + b ⌈/⌉ c</span>\n\n<span class=\"cm\">  obtain ⟨da,ma,hmac,hdmac⟩ := divMod a c</span>\n<span class=\"cm\">  -- Where hmac : 0 ≤ ma ∧ ma &lt; c</span>\n<span class=\"cm\">  --  and  hdmac : a = da * c + ma</span>\n\n<span class=\"cm\">  obtain ⟨db,mb,hmbc,hdmbc⟩ := divMod b c</span>\n<span class=\"cm\">  -- Where hmbc : 0 ≤ mb ∧ mb &lt; c</span>\n<span class=\"cm\">  --  and  hdmbc : b = db * c + mb</span>\n\n<span class=\"cm\">  rw [hdmac,hdmbc]</span>\n\n<span class=\"cm\">  -- ⊢ (da * c + ma + (db * c + mb)) ⌈/⌉ c ≤ (da * c + ma) ⌈/⌉ c + (db * c + mb) ⌈/⌉ c</span>\n<span class=\"cm\">  ring...</span>\n<span class=\"cm\">  -- ⊢ ((da + db) * c + ma + mb) ⌈/⌉ c ≤ (da * c + ma) ⌈/⌉ c + (db * c + mb) ⌈/⌉ c</span>\n\n<span class=\"cm\">  -- some lemma \"factor_out_ceildiv\" : ∀x y z, (a * c + b) ⌈/⌉ c = a + b ⌈/⌉ c</span>\n\n<span class=\"cm\">  -- ⊢ da + db + (ma + mb) ⌈/⌉ c ≤ da + ma ⌈/⌉ c + db + mb ⌈/⌉ c</span>\n\n<span class=\"cm\">  apply Nat.add_le_add_left (k := da + db)</span>\n\n<span class=\"cm\">  -- ⊢ (ma + mb) ⌈/⌉ c ≤ ma ⌈/⌉ c + mb ⌈/⌉ c</span>\n\n<span class=\"cm\">  by_cases hma0 : ma = 0</span>\n<span class=\"cm\">  . ⊢ mb ⌈/⌉ c ≤ mb ⌈/⌉ c</span>\n<span class=\"cm\">    exact Nat.le_refl</span>\n\n<span class=\"cm\">  by_cases hmb0 : mb = 0</span>\n<span class=\"cm\">  . ⊢ ma ⌈/⌉ c ≤ ma ⌈/⌉ c</span>\n<span class=\"cm\">    exact Nat.le_refl</span>\n\n<span class=\"cm\">  -- hma0 : ma &gt; 0</span>\n<span class=\"cm\">  -- hmb0 : mb &gt; 0</span>\n<span class=\"cm\">  -- ⊢ (ma + mb) ⌈/⌉ c ≤ ma ⌈/⌉ c + mb ⌈/⌉ c</span>\n\n<span class=\"cm\">  -- some lemma \"ceildiv_lt\" : ∀x y, (x &lt; y) ∧ (0 &lt; x) → x ⌈/⌉ y = 1</span>\n\n<span class=\"cm\">  have hmac1 : ma ⌈/⌉ c = 1 := apply ceildiv_lt hmac.right hma0</span>\n<span class=\"cm\">  have hmbc1 : mb ⌈/⌉ c = 1 := apply ceildiv_lt hmbc.right hmb0</span>\n\n<span class=\"cm\">  simp_rw [hmac1, hmbc1]</span>\n<span class=\"cm\">  -- ⊢ (ma + mb) ⌈/⌉ c ≤ 2</span>\n\n<span class=\"cm\">  -- some lemma \"add_lt_2\" : ∀x y z, (x &lt; z) ∧ (y &lt; z) → (x + y) &lt; 2 * z</span>\n\n<span class=\"cm\">  have hmamb_lt_2c : ma + mb &lt; 2 * c := apply add_lt_2 hmac.right hmbc.right</span>\n\n<span class=\"cm\">  exact Nat.le_of_succ_le hmamb_lt_2c</span>\n<span class=\"cm\">  -/</span>\n\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"n\">done</span>\n\n<span class=\"c1\">-- The general case for summations</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">sum_ceildiv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"bp\">∑</span><span class=\"n\">i</span><span class=\"o\">,(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"n\">done</span>\n</code></pre></div>\n<p>The problem I am getting is using existing theorems for the steps, what I am not finding for Nats. For example, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Field/Basic.html#add_div\">#add_div</a> needs <code>DivisionSemiring</code>, what Nat is not. Other theorems that would help implement the paper proof need <code>Semifield</code> <code>Field</code>, <code>CommRing</code>... . Any suggestions on how going about it? Thanks in advance!</p>",
        "id": 442270474,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717425025
    },
    {
        "content": "<p>It's tricky because some equivalent results are just false for Nats. For example, for the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=add_div#doc\">docs#add_div</a> example you cited,</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">one_pos</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">one_lt_two</span>\n</code></pre></div>",
        "id": 442281605,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1717427483
    },
    {
        "content": "<p>I see that regular <code>/</code> will act like <code>floorDiv</code> on a Nat. The property of <code>ceilDiv</code> that bases the theorem is that there will be some \"slack` if you divide each term that will not appear if you just divide the whole sum, right?</p>",
        "id": 442285253,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717428232
    },
    {
        "content": "<p>Which is actually in the library:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≥</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_div_le_add_div</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\"> </span><span class=\"n\">done</span>\n</code></pre></div>",
        "id": 442289430,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717429107
    },
    {
        "content": "<p>Looking at these, we can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Nat/ModEq.html#Nat.add_div_of_dvd_right\">#Nat.add_div_of_dvd_right</a> to achieve <code>factor_out_ceildiv</code>, if only the operator were <code>/</code></p>",
        "id": 442290608,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717429364
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">Tuple</span><span class=\"bp\">.</span><span class=\"n\">Reflection</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">Notation</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">Floor</span><span class=\"bp\">.</span><span class=\"n\">Div</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">b</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">FinVec</span><span class=\"w\"> </span><span class=\"n\">BigOperators</span>\n\n<span class=\"c1\">-- A simple lemma to illustrate the theorem</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">add_ceilDiv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"c1\">-- deal with c=0 separately</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">hc</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_or_pos</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 0 &lt; c case</span>\n<span class=\"w\">  </span><span class=\"c1\">-- First use the \"Galois connection\"</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">ceilDiv_le_iff_le_smul</span><span class=\"w\"> </span><span class=\"n\">hc</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"c1\">-- now use a standard fact</span>\n<span class=\"w\">  </span><span class=\"n\">gcongr</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">le_smul_ceilDiv</span><span class=\"w\"> </span><span class=\"n\">hc</span>\n</code></pre></div>",
        "id": 442358524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717445370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"671510\">@Bernardo Borges</span> you're making the same mistakes as I was making when I was learning how to use Lean. You're launching into a proof just based on hand calculations without looking at the tools already available. Your very long proof can I'm sure be turned into a Lean proof, but when I looked at your question my first thought was \"I've never seen <code>⌈/⌉</code> before\" and my second was \"Ok so what theorems about <code>⌈/⌉</code> do we already have in the library\". I jumped to definition and tried to figure out the content of what was there, but fortunately the file is short and it didn't take long to isolate <code>ceilDiv_le_iff_le_smul</code> as the key first move, because it turns a <code>⌈/⌉</code> into a <code>•</code> which can then instantly be turned into a <code>*</code>. Then the goal becomes <code>a + b ≤ c * (a ⌈/⌉ c) + c * (b ⌈/⌉ c)</code> which is easy from <code>le_smul_ceilDiv</code>.</p>",
        "id": 442359539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717445598
    },
    {
        "content": "<p>Similarly for the general case, I wouldn't embark on it immediately, I would instead spend some time trying to figure out the right induction principle which will give you <code>sum_ceildiv</code> immediately from <code>add_ceildiv</code>.</p>",
        "id": 442361533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717445878
    },
    {
        "content": "<p>I guess you were saying \"it's a pity that all these lemmas which I found all over the library don't apply to ceildiv\" whereas my approach was \"let's look at the mathlib file containing all the lemmas about ceildiv\"</p>",
        "id": 442363088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717446101
    },
    {
        "content": "<p>To get from <code>add</code> to <code>sum</code> I would first prove a result about summing over a general <code>Finset</code> because I would imagine that this is the key missing step. You then get the result you want by using <code>Finset.univ</code> in <code>Fin n</code></p>",
        "id": 442364013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717446259
    },
    {
        "content": "<p>Interesting, another thing I am always trying to wrap my head around is how to relate a finset with the FinVec I have been using... It didn't click for me yet how to translate between them. I'm afraid it might just be the definition of the structure, but looking at the documentation I didn't understand the API or how it should be done</p>",
        "id": 442364482,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717446386
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FinVec#doc\">docs#FinVec</a></p>",
        "id": 442364766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717446471
    },
    {
        "content": "<p>For example, I just learned the notation for vectors because I saw it in <a href=\"https://github.com/leanprover-community/mathlib4/blob/1df4e15538fec1e71aefa8945f53388127fa90ee/test/vec_notation.lean\">vec_notation.lean</a>, not in the docs</p>",
        "id": 442364845,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717446485
    },
    {
        "content": "<p>I don't know what FinVec is</p>",
        "id": 442364882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717446494
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fin/Tuple/Reflection.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fin/Tuple/Reflection.html</a> - not sure what they're good for either</p>",
        "id": 442364982,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717446524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Proofs.20with.20ceilDiv.20-.20addition.20is.20less-or-equal/near/442364882\">said</a>:</p>\n<blockquote>\n<p>I don't know what FinVec is</p>\n</blockquote>\n<p>In the file I just linked, its the <code>Fin n -&gt; Nat</code> defined as <code>![1,2,3]</code> (Not necessarily a Nat)</p>",
        "id": 442365023,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717446536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Proofs.20with.20ceilDiv.20-.20addition.20is.20less-or-equal/near/442364982\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fin/Tuple/Reflection.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fin/Tuple/Reflection.html</a> - not sure what they're good for either</p>\n</blockquote>\n<p>Well, I didn't find a way to define a finset that would let me keep the order of the elements, like a list, and also perform the BigOperator summation on it</p>",
        "id": 442365381,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717446636
    },
    {
        "content": "<p>Ok so it's just a function Fin n -&gt; whatever. But the key thing about sum_ceildiv is that it's got a sum over all the elements of a finite type in, and what I'm saying is that there's an intermediate stage where you sum over finitely many elements of an arbitrary type.</p>",
        "id": 442365581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717446704
    },
    {
        "content": "<p>You don't need any API for the functions from Fin n for this</p>",
        "id": 442365721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717446742
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">Tuple</span><span class=\"bp\">.</span><span class=\"n\">Reflection</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">Notation</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">Floor</span><span class=\"bp\">.</span><span class=\"n\">Div</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">b</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">FinVec</span><span class=\"w\"> </span><span class=\"n\">BigOperators</span>\n\n<span class=\"c1\">-- A simple lemma to illustrate the theorem</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">add_ceilDiv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"n\">done</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Finset</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">sum_ceildiv</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"bp\">∑</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">classical</span>\n<span class=\"w\">  </span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">cons_induction_on</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">h₁</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">h₂</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"n\">ih</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">sum_cons</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">sum_cons</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"c1\">-- apply the above</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">sum_ceildiv'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"bp\">∑</span><span class=\"n\">i</span><span class=\"o\">,(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">sum_ceildiv</span><span class=\"w\"> </span><span class=\"bp\">..</span>\n</code></pre></div>",
        "id": 442366168,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717446888
    },
    {
        "content": "<p>Amazing! I've wondered that this should be possible, just never made the jump into <code>Finset</code> instead. Is there a body of examples/theorems on finsets that is not in mathlib? Even so, I'll surely be reading about them, it looks much more powerful</p>",
        "id": 442366901,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717447113
    },
    {
        "content": "<p>I see how this opens the proof, but looks like the required goal is slightly different than the lemma, as the division is 'outside' the sum</p>",
        "id": 442369268,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717447763
    },
    {
        "content": "<p>You need to use the inductive hypothesis <code>ih</code> to get over the line.</p>",
        "id": 442372767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717448759
    },
    {
        "content": "<p>Yes I'm thinking about the last step</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">Tuple</span><span class=\"bp\">.</span><span class=\"n\">Reflection</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">Notation</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">Floor</span><span class=\"bp\">.</span><span class=\"n\">Div</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">FinVec</span><span class=\"w\"> </span><span class=\"n\">BigOperators</span>\n\n<span class=\"c1\">-- @kbuzzard</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_ceildiv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"c1\">-- deal with c=0 separately</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">hc</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_or_pos</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 0 &lt; c case</span>\n<span class=\"w\">  </span><span class=\"c1\">-- First use the \"Galois connection\"</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">ceilDiv_le_iff_le_smul</span><span class=\"w\"> </span><span class=\"n\">hc</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"c1\">-- now use a standard fact</span>\n<span class=\"w\">  </span><span class=\"n\">gcongr</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">le_smul_ceilDiv</span><span class=\"w\"> </span><span class=\"n\">hc</span>\n<span class=\"w\">  </span><span class=\"n\">done</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Finset</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">ceildiv_sum_finset</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"bp\">∑</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">classical</span>\n<span class=\"w\">  </span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">cons_induction_on</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">h₁</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">h₂</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"n\">ih</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">sum_cons</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">sum_cons</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"c1\">-- ih                                     :        (∑ i ∈ s, as i) ⌈/⌉ c ≤               ∑ i ∈ s, as i  ⌈/⌉ c</span>\n<span class=\"w\">    </span><span class=\"c1\">-- Nat.add_ceildiv (as a) (∑x ∈ s,as x) c : (as a + ∑ x ∈ s, as x) ⌈/⌉ c ≤ as a ⌈/⌉ c + (∑ x ∈ s, as x) ⌈/⌉ c</span>\n<span class=\"w\">    </span><span class=\"c1\">-- ⊢                                        (as a + ∑ x ∈ s, as x) ⌈/⌉ c ≤ as a ⌈/⌉ c +  ∑ x ∈ s, as x  ⌈/⌉ c</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">    </span><span class=\"n\">done</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">ceildiv_sum_le_sum_ceildiv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"bp\">∑</span><span class=\"n\">i</span><span class=\"o\">,(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">ceildiv_sum_finset</span><span class=\"w\"> </span><span class=\"bp\">..</span>\n<span class=\"w\">  </span><span class=\"n\">done</span>\n</code></pre></div>",
        "id": 442377052,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717450161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Proofs.20with.20ceilDiv.20-.20addition.20is.20less-or-equal/near/442364982\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fin/Tuple/Reflection.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fin/Tuple/Reflection.html</a> - not sure what they're good for either</p>\n</blockquote>\n<p>These definitions shouldn't be used except for constructing proof terms. At some point I'll write a simproc to leverage them...</p>",
        "id": 442382428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717452096
    },
    {
        "content": "<p>The names are perhaps suboptimal</p>",
        "id": 442382575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717452149
    },
    {
        "content": "<p>Did you figure it out in the end, <span class=\"user-mention\" data-user-id=\"671510\">@Bernardo Borges</span> ? Otherwise I can give more hints</p>",
        "id": 442464711,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717487538
    },
    {
        "content": "<p>Not yet... I'm trying to understand how they will match (le_trans? rw? simp? apply?)</p>",
        "id": 442502187,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717498944
    },
    {
        "content": "<p>My suggestion: after</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">sum_cons</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">sum_cons</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>write</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_ceildiv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">c</span>\n</code></pre></div>\n<p>(this is what you tried to use in your comment above). </p>\n<p>Now you have a hypothesis that <code>(∑ i ∈ cons a s ha, as i) ⌈/⌉ c</code> is less than or equal to something, and your goal is that this same expression is less than or equal to something else. Can you use this?</p>",
        "id": 442514296,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717502912
    },
    {
        "content": "<p>Perfectly! Now I could just abstract away the expressions and think in terms of Nats!</p>",
        "id": 442540675,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717510655
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/pbW_vKylF_c7L9QPooicEoCl/0615cb34-30d0-4e3c-a876-8261a30ceb26.jpg\">0615cb34-30d0-4e3c-a876-8261a30ceb26.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pbW_vKylF_c7L9QPooicEoCl/0615cb34-30d0-4e3c-a876-8261a30ceb26.jpg\" title=\"0615cb34-30d0-4e3c-a876-8261a30ceb26.jpg\"><img src=\"/user_uploads/3121/pbW_vKylF_c7L9QPooicEoCl/0615cb34-30d0-4e3c-a876-8261a30ceb26.jpg\"></a></div>",
        "id": 442540730,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717510675
    },
    {
        "content": "<p>With this abstracion, it was just a matter of <code>exact?</code> as seen <a href=\"https://lean.math.hhu.de/#code=import%20Mathlib%0A%0Aexample%0A%20%20(a%20b%20c%20d%20%3A%20%E2%84%95)%0A%20%20(ih%20%3A%20a%20%E2%89%A4%20b)%0A%20%20(h%20%3A%20c%20%E2%89%A4%20d%20%2B%20a)%0A%20%20%3A%20c%20%E2%89%A4%20d%20%2B%20b%20%3A%3D%20by%0A%20%20exact%20le_add_of_le_add_left%20h%20ih%0A%20%20done\">here</a></p>",
        "id": 442540899,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717510712
    },
    {
        "content": "<p>I could just close the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Finset</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">ceildiv_sum_finset</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"bp\">∑</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">classical</span>\n<span class=\"w\">  </span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">cons_induction_on</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">h₁</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">h₂</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"n\">ih</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">sum_cons</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">sum_cons</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_ceildiv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">    </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">le_add_of_le_add_left</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">ih</span>\n<span class=\"w\">    </span><span class=\"n\">done</span>\n</code></pre></div>\n<p>Thank you very much for the huge help!</p>",
        "id": 442541087,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717510771
    },
    {
        "content": "<p>Oh heh, that's even better. I did</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">add_ceilDiv</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n<span class=\"w\">    </span><span class=\"n\">gcongr</span>\n</code></pre></div>",
        "id": 442542093,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717511057
    },
    {
        "content": "<p>Very nice! One last thing, I just renamed these theorems that you and kevin helped state, so that they follow the pattern in mathlib, namely:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">-- @kbuzzard</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_ceildiv_le_add_ceildiv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">-- @Ruben-VandeVelde</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">ceildiv_le_ceildiv</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"bp\">∑</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Do you think they should be added to mathlib? Maybe under ceilDiv or under Finset?</p>",
        "id": 442543637,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717511463
    },
    {
        "content": "<p>I would personally call them <code>Nat.add_ceildiv_le</code> and <code>Nat.sum_ceilDiv_le</code>. And yes please PR them!</p>",
        "id": 442544067,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717511564
    },
    {
        "content": "<p>Ok! Should I fork mathlib4 or may I have access to create a branch?</p>",
        "id": 442544265,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717511624
    },
    {
        "content": "<p>You should ask here: <a href=\"#narrow/stream/287929-mathlib4/topic/github.20permission\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/github.20permission</a></p>",
        "id": 442544845,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717511786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671510\">Bernardo Borges</span> has marked this topic as resolved.</p>",
        "id": 442546346,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717512208
    },
    {
        "content": "<p>By the way, here's a sketch if you want to work on your original approach for educational purposes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">Tuple</span><span class=\"bp\">.</span><span class=\"n\">Reflection</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">Notation</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">Floor</span><span class=\"bp\">.</span><span class=\"n\">Div</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">FinVec</span><span class=\"w\"> </span><span class=\"n\">BigOperators</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">factor_out_ceildiv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp_rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CeilDiv</span><span class=\"bp\">.</span><span class=\"n\">ceilDiv</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_assoc</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">omega</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)]</span>\n<span class=\"w\">  </span><span class=\"n\">simpa</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_comm</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_mul_div_right</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">h</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">ceildiv_lt</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hy</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">div_mod_unique</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"n\">hy</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"w\"> </span><span class=\"bp\">⟨?_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">?_⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"m\">1</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_comm</span><span class=\"w\"> </span><span class=\"n\">hx</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">omega</span>\n\n<span class=\"c1\">-- A simple lemma to illustrate the theorem</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">add_ceilDiv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">rcases</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_or_pos</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">hc</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">da</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hmac</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">mod_lt</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">hc</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hdmac</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">da</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">div_add_mod'</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">c</span>\n\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mb</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hmbc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">mb</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">mod_lt</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">hc</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hdmbc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">mb</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">div_add_mod'</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span>\n\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">hdmac</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">hdmbc</span><span class=\"o\">]</span>\n\n<span class=\"w\">  </span><span class=\"n\">ring_nf</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">mul_comm</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_mul</span><span class=\"w\"> </span><span class=\"n\">da</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_assoc</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">repeat</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">factor_out_ceildiv</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">hc</span><span class=\"o\">]</span>\n\n<span class=\"w\">  </span><span class=\"n\">suffices</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ma</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">mb</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">mb</span><span class=\"w\"> </span><span class=\"bp\">⌈/⌉</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">omega</span>\n\n<span class=\"w\">  </span><span class=\"n\">rcases</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_or_pos</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hma0</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">hma0</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">hma0</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">rcases</span><span class=\"w\"> </span><span class=\"n\">mb</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_or_pos</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hmb0</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">hmb0</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">hmb0</span><span class=\"o\">]</span>\n\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">ceildiv_lt</span><span class=\"w\"> </span><span class=\"n\">hma0</span><span class=\"w\"> </span><span class=\"n\">hmac</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ceildiv_lt</span><span class=\"w\"> </span><span class=\"n\">hmb0</span><span class=\"w\"> </span><span class=\"n\">hmbc</span><span class=\"o\">]</span>\n\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hmamb_lt_2c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">mb</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">omega</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CeilDiv</span><span class=\"bp\">.</span><span class=\"n\">ceilDiv</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">div_lt_iff_lt_mul</span><span class=\"w\"> </span><span class=\"n\">hc</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 442579919,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1717520611
    },
    {
        "content": "<p>Ah cool, its good to see how <code>omega</code> or <code>ring_nf</code> could be applied here. I didn't use these yet</p>",
        "id": 442633331,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717536933
    }
]