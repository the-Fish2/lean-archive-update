[
    {
        "content": "<p>About question C05S03</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Order</span>\n<span class=\"kn\">import</span> <span class=\"n\">MIL.Common</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">C05S03</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">two_le</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span>\n    <span class=\"n\">repeat'</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.succ_le_succ</span>\n    <span class=\"n\">apply</span> <span class=\"n\">zero_le</span>\n</code></pre></div>\n<p>why after the first contradiction tactic, the variable name is changed from <code>m</code> to <code>nt</code>, and why directly say<code>cases nt</code> after the contradiction doesnt work, has to do `case succ m =&gt;' to change variable name?</p>",
        "id": 431569079,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1712336449
    },
    {
        "content": "<p>firstly that's <code>n✝</code>. I usually pronounce it <code>n dagger</code>.</p>",
        "id": 431607476,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1712352725
    },
    {
        "content": "<p>That <code>n✝</code> is introduced by the cases tactic, not contradiction. It is a variable whose name is hidden to you. You need to explicitly name it in order to use it.</p>",
        "id": 431607587,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1712352798
    },
    {
        "content": "<p>When you call <code>case succ m =&gt; ...</code> the <code>n✝</code> gets renamed to <code>m</code></p>",
        "id": 431607618,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1712352820
    },
    {
        "content": "<p>lean 4 tactics often hide newly and automatically introduced hypothesis or definition names unless explicitly asked to name them. This keeps the list of usable names uncluttered</p>",
        "id": 431607721,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1712352870
    },
    {
        "content": "<p>thank you, that clears all my questions</p>",
        "id": 431647993,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1712386765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"620519\">Yufei Liu</span> has marked this topic as resolved.</p>",
        "id": 431647999,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712386777
    }
]