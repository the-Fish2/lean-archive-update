[
    {
        "content": "<p>How do I do this? For context, the goal is showing that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ab</span> <span class=\"bp\">\\</span><span class=\"n\">leq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>And I've already shown </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">\\</span><span class=\"n\">leq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 418448909,
        "sender_full_name": "Lukas Krause",
        "timestamp": 1706392163
    },
    {
        "content": "<p>How about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=le_div_iff%27#doc\">docs#le_div_iff'</a> ?</p>",
        "id": 418449449,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706392758
    },
    {
        "content": "<p>If you don't mind hitting stuff with tactics, this also works: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">κ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">κ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nlinarith</span>\n</code></pre></div>\n<p>I made some assumptions as to where a and b come from since you did not specify</p>",
        "id": 418449773,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1706393086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20multiply.20both.20sides.20of.20an.20inequality.20by.20a.20positive/near/418449449\">said</a>:</p>\n<blockquote>\n<p>How about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=le_div_iff%27#doc\">docs#le_div_iff'</a> ?</p>\n</blockquote>\n<p>Doesn't seem to work. Getting this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"bp\">?</span><span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"bp\">?</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">b</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">case</span> <span class=\"n\">left</span>\n<span class=\"n\">abcde</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>Which is bizarre because to me they look like they are the same form.</p>\n<p><span class=\"user-mention\" data-user-id=\"466290\">@Luigi Massacci</span> I'll try that; my bad for not giving more context, a b and c are real numbers. Though ideally I'd like to figure it out without just hitting it with a tactic.</p>",
        "id": 418456432,
        "sender_full_name": "Lukas Krause",
        "timestamp": 1706400061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"687103\">Lukas Krause</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20multiply.20both.20sides.20of.20an.20inequality.20by.20a.20positive/near/418456432\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20multiply.20both.20sides.20of.20an.20inequality.20by.20a.20positive/near/418449449\">said</a>:</p>\n<blockquote>\n<p>How about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=le_div_iff%27#doc\">docs#le_div_iff'</a> ?</p>\n</blockquote>\n<p>Doesn't seem to work. Getting this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"bp\">?</span><span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"bp\">?</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">b</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">case</span> <span class=\"n\">left</span>\n<span class=\"n\">abcde</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>Which is bizarre because to me they look like they are the same form.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> I'll try that; my bad for not giving more context, a b and c are real numbers. Though ideally I'd like to figure it out without just hitting it with a tactic.</p>\n</blockquote>\n<p>Ok, I took a look at the solutions and it looks like I need to first check that the denominator is positive via norm_num, and then I need to use rw instead of apply. I understand the first part, but the second I'm a bit confused by. Why can't I do apply, and then check that the conditions are satisfied? Why do I have to do rw?</p>",
        "id": 418459212,
        "sender_full_name": "Lukas Krause",
        "timestamp": 1706402654
    },
    {
        "content": "<p>Well then <code>nlinarith</code> will work with reals no problem. The lemma Jireh gave you is what you need though. Just notice that it is an iff. statement, and you need the implications. You can access each direction by writing .mp/.mpr (resp .1 or .2)</p>",
        "id": 418481856,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1706428444
    },
    {
        "content": "<p>You don’t have to do rw, this will do what you want for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">κ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">κ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">le_div_iff'</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n</code></pre></div>",
        "id": 418526091,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1706468042
    }
]