[
    {
        "content": "<p>what does <code>class</code> attribute?</p>",
        "id": 445581181,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718801129
    },
    {
        "content": "<p>What do you mean, more specific?</p>\n<p>'Theorem Proving in Lean 4'  has a chapter about 'type classes'.</p>\n<p><a href=\"https://lean-lang.org/theorem_proving_in_lean4/type_classes.html\">https://lean-lang.org/theorem_proving_in_lean4/type_classes.html</a></p>",
        "id": 445583163,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1718801772
    },
    {
        "content": "<p>not class command, class <strong>attribute</strong></p>",
        "id": 445583240,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718801795
    },
    {
        "content": "<p>Ah, there is indeed a class attribute:<br>\nEDIT Lean 3: <a href=\"https://leanprover.github.io/reference/other_commands.html#attributes\">https://leanprover.github.io/reference/other_commands.html#attributes</a> </p>\n<p>so now I'm also curious about what it does. :-)</p>",
        "id": 445584901,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1718802226
    },
    {
        "content": "<p>The Lean manual  you find is for Lean 3...? Lean 4 manual is here: <a href=\"https://lean-lang.org/lean4/doc/\">https://lean-lang.org/lean4/doc/</a></p>",
        "id": 445585236,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718802300
    },
    {
        "content": "<p>It's explained in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C07_Hierarchies.html#basics\">MIL Section 7.1</a>.</p>",
        "id": 445585262,
        "sender_full_name": "Richard Copley",
        "timestamp": 1718802310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span> <br>\nThank you but I do not understand what <code>@[class]</code> does.</p>\n<p>For example, both bare structure and <code>class</code> tagged one can have instance: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">class</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kd\">structure</span><span class=\"w\"> </span><span class=\"n\">One</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">One</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"kd\">structure</span><span class=\"w\"> </span><span class=\"n\">Two</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Two</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 445586069,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718802524
    },
    {
        "content": "<p>both bare structure and <code>class</code> tagged one cannot resolve type class instance.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">class</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kd\">structure</span><span class=\"w\"> </span><span class=\"n\">One</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span><span class=\"w\"> </span><span class=\"n\">instOneNat</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">One</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"kd\">structure</span><span class=\"w\"> </span><span class=\"n\">Two</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span><span class=\"w\"> </span><span class=\"n\">instTwoNat</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Two</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"n\">Three</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">three</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span><span class=\"w\"> </span><span class=\"n\">instThreeNat</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Three</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">three</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check_failure</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">One.one</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check_failure</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Two.two</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Three.three</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 445586702,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718802725
    },
    {
        "content": "<p>so what is the difference between bare <code>structure</code> and <code>@[class] structure</code>?</p>",
        "id": 445586825,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718802769
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">One</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"c1\">-- OK</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Two</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"c1\">--                ~~~~~</span>\n<span class=\"w\">  </span><span class=\"c1\">-- invalid binder annotation, type is not a class instance</span>\n<span class=\"w\">  </span><span class=\"c1\">--   Two T</span>\n</code></pre></div>",
        "id": 445586945,
        "sender_full_name": "Richard Copley",
        "timestamp": 1718802821
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">One</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">Two</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n</code></pre></div>\n<p>only classes participate in typeclass search</p>",
        "id": 445587332,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718802958
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span>  and <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> !!!</p>",
        "id": 445587534,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718803023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 445589145,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718803428
    }
]