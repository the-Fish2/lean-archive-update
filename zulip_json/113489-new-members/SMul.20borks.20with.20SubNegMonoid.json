[
    {
        "content": "<p>I'm back at pushing through Linear Algebra Done Right, after getting a bit discouraged before the holiday.</p>\n<p>Right now, I want vectors that subtract, but I've discovered that if I do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">SubNegMonoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">v</span>\n</code></pre></div>\n<p>I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HSMul</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span> <span class=\"bp\">?</span><span class=\"n\">m.120</span>\n</code></pre></div>\n<p>But this works just fine without the assertion <code>[SubNegMonoid V]</code> -- is there a different typeclass I should be using for an additive commutative monoid with negation and subtraction?</p>",
        "id": 420333071,
        "sender_full_name": "Arien Malec",
        "timestamp": 1707336338
    },
    {
        "content": "<p>(In addition to that, is there any documentation for the tower of algebraic typeclasses in Mathlib?)</p>",
        "id": 420333196,
        "sender_full_name": "Arien Malec",
        "timestamp": 1707336373
    },
    {
        "content": "<p>Ah, scratch that, I've discovered <code>SubtractionCommMonoid</code> -- was looking for <code>SubCommMonoid</code> on the analogy of <code>SubNegMonoid</code></p>",
        "id": 420333415,
        "sender_full_name": "Arien Malec",
        "timestamp": 1707336460
    },
    {
        "content": "<p>You had two additive structures on your V, I think</p>",
        "id": 420334253,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707336780
    },
    {
        "content": "<p>If you're trying to say \"let V be an R-vector space\" then it's just <code>variable (V : Type*) [AddCommGroup V] [Module ℝ V]</code></p>",
        "id": 420336564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707337586
    },
    {
        "content": "<p>I need the vectors to subtract.</p>",
        "id": 420351356,
        "sender_full_name": "Arien Malec",
        "timestamp": 1707343625
    },
    {
        "content": "<p><code>AddCommGroup V</code> implies you can do subtraction.</p>",
        "id": 420352656,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707344215
    },
    {
        "content": "<p>But not negation?</p>",
        "id": 420352706,
        "sender_full_name": "Arien Malec",
        "timestamp": 1707344242
    },
    {
        "content": "<p>You should be able to, yes.</p>",
        "id": 420352742,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707344267
    },
    {
        "content": "<p>Yes, you can also negate</p>",
        "id": 420352749,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707344269
    },
    {
        "content": "<p>Arien, try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SubtractionCommMonoid</span> <span class=\"n\">V</span>\n</code></pre></div>\n<p>This will tell you that <code>AddCommGroup</code> has an instance of <code>SubtractionCommMonoid</code></p>",
        "id": 420352876,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707344324
    },
    {
        "content": "<p><code>variable (V: Type*) [AddCommGroup V] [Module ℝ V]</code> is the translation of \"let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> be an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> vector space\"</p>",
        "id": 420352877,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707344325
    },
    {
        "content": "<p>Yeesh, I must have gone wrong somewhere else then.</p>",
        "id": 420352880,
        "sender_full_name": "Arien Malec",
        "timestamp": 1707344327
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">-</span><span class=\"n\">v</span>\n</code></pre></div>\n<p><code>failed to synthesize instance Neg V</code></p>",
        "id": 420352977,
        "sender_full_name": "Arien Malec",
        "timestamp": 1707344375
    },
    {
        "content": "<p>Monoid ≠ Group</p>",
        "id": 420352996,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707344387
    },
    {
        "content": "<p>Lightbulb goes on.</p>",
        "id": 420353064,
        "sender_full_name": "Arien Malec",
        "timestamp": 1707344407
    },
    {
        "content": "<p>(Aside: you should write <code>V : Type*</code>, not <code>V : Type _</code> because of performance reasons; likely this is minor, but it's worth getting into that habit.)</p>",
        "id": 420353237,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707344482
    },
    {
        "content": "<p>Ah, I thought <code>Type*</code> was a Lean3ism.</p>",
        "id": 420353282,
        "sender_full_name": "Arien Malec",
        "timestamp": 1707344509
    },
    {
        "content": "<p>Originally it was, but then we found out there were issues, and so we added <code>Type*</code> back in. Basically, <code>Type _</code> creates a metavariable for the universe level whereas <code>Type*</code> creates an fresh universe level as an implicit variable. The problem with the former is that Lean sometimes has to solve universe constraints that arise because of the metavariables, and that takes time. However, most of the time we just want all our universes to be arbitrary, so we actually want the <code>Type*</code> behavior. It is rare that this is not the case, at least in most of the library (exceptions probably includ things involving <code>Cardinal</code> or <code>Category</code>).</p>",
        "id": 420354365,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707345018
    }
]