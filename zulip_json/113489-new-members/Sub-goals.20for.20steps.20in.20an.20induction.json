[
    {
        "content": "<p>Can anyone think of a way to turn a goal for the following inductive proposition into a collection of sub-goals for each step in the induction?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- If `R` is a relation between inhabitants of a type and lists of that type, `ConsWise R l` is a</span>\n<span class=\"sd\">proposition that `R` holds between all elements in the list `l` and their respective \"initial</span>\n<span class=\"sd\">sections\". -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ConsWise</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">ConsWise</span> <span class=\"n\">R</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">ConsWise</span> <span class=\"n\">R</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">ConsWise</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">GreaterThanSum</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">↦</span> <span class=\"n\">List.sum</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">somePowersOfTwo</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">16</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ConsWise</span> <span class=\"n\">GreaterThanSum</span> <span class=\"n\">somePowersOfTwo</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ConsWise.cons</span>\n  <span class=\"bp\">·</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">GreaterThanSum</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_num</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">ConsWise.cons</span>\n    <span class=\"bp\">·</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">GreaterThanSum</span><span class=\"o\">]</span>\n      <span class=\"n\">norm_num</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">ConsWise.cons</span>\n      <span class=\"bp\">·</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">GreaterThanSum</span><span class=\"o\">]</span>\n        <span class=\"n\">norm_num</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">ConsWise.cons</span>\n        <span class=\"bp\">·</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">GreaterThanSum</span><span class=\"o\">]</span>\n          <span class=\"n\">norm_num</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">ConsWise.cons</span>\n          <span class=\"bp\">·</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">GreaterThanSum</span><span class=\"o\">]</span>\n            <span class=\"n\">norm_num</span>\n          <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">ConsWise.nil</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>I've been looking into writing a tactic for it, but it's a looking to be hairy and I thought I'd reach out to see if anyone out there had any shortcuts.</p>",
        "id": 418678602,
        "sender_full_name": "N Gelwan",
        "timestamp": 1706546909
    },
    {
        "content": "<p>In your case, the example can be proved with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ConsWise</span> <span class=\"n\">GreaterThanSum</span> <span class=\"n\">somePowersOfTwo</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">repeat</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ConsWise.cons</span>\n    <span class=\"bp\">·</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">GreaterThanSum</span><span class=\"o\">]</span>\n      <span class=\"n\">norm_num</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ConsWise.nil</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 418682192,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706547991
    },
    {
        "content": "<p>Ah, I had no idea that you can drop the cases down out of the tree. Very cool. Thanks <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>.</p>",
        "id": 418682383,
        "sender_full_name": "N Gelwan",
        "timestamp": 1706548062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665242\">N Gelwan</span> has marked this topic as resolved.</p>",
        "id": 418682508,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706548101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665242\">N Gelwan</span> has marked this topic as unresolved.</p>",
        "id": 418684165,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706548653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665242\">N Gelwan</span> has marked this topic as resolved.</p>",
        "id": 418684304,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706548686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665242\">N Gelwan</span> has marked this topic as unresolved.</p>",
        "id": 418684809,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706548871
    },
    {
        "content": "<p>Sorry for the spam. Working through something.</p>\n<p>Yeah, I actually need a more general case, in which the tactic for each step in the induction is not <em>the same</em>.<br>\nLet's see if I can work up an MWE.</p>",
        "id": 418684973,
        "sender_full_name": "N Gelwan",
        "timestamp": 1706548924
    },
    {
        "content": "<p>Probably a more structured approach would be to define lemmas that take care of each small step and then use <code>simp</code> to take care of combining them together.</p>",
        "id": 418685342,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706549049
    },
    {
        "content": "<p>That's a great idea. I'm going to test it out.</p>",
        "id": 418685390,
        "sender_full_name": "N Gelwan",
        "timestamp": 1706549069
    }
]