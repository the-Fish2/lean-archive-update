[
    {
        "content": "<p>When I was formalizing this exercise in Lean, I got stuck for some seemingly unformalized theorem in Mathlib.</p>\n<p><span class=\"tex-error\">Let $p$ be a prime number. Find the number of generators of the cyclic group $Z_{p^r}$ , where $r$ is an integer ≥ 1.</span></p>\n<p>I might need theorem like this:<br>\n<a href=\"/user_uploads/3121/sgaWzn7xMDGhg9KVAGBzA2uR/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/sgaWzn7xMDGhg9KVAGBzA2uR/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/sgaWzn7xMDGhg9KVAGBzA2uR/image.png\"></a></div><p>Or more universal theorem:<br>\n<a href=\"/user_uploads/3121/QBoL_2rs6lSMsvqQvCNDGeEC/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/QBoL_2rs6lSMsvqQvCNDGeEC/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/QBoL_2rs6lSMsvqQvCNDGeEC/image.png\"></a></div><p>For now, I got Lean code as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.ZPowers</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">))(</span><span class=\"n\">generators</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">generators</span><span class=\"o\">,</span> <span class=\"n\">AddSubgroup.zmultiples</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">):</span>\n  <span class=\"n\">generators.card</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Before handling the problem of counting, I need to convert the problem to count the elements that is relatively prime with $p^r$, which need the theorems above. I wonder if there have been similar theorems in Mathlib(since I haven't found any in cyclic group or ZMod).</p>",
        "id": 425752860,
        "sender_full_name": "Yicheng Tao",
        "timestamp": 1710056472
    },
    {
        "content": "<p>This is basically <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.totient_prime_pow#doc\">docs#Nat.totient_prime_pow</a>, at least assuming you know the general statement that a cyclic group of order <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> has exactly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> generators.</p>",
        "id": 425756726,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710060685
    },
    {
        "content": "<p>(BTW, you can use double dollars <code>$$...$$</code> to get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding=\"application/x-tex\">\\LaTeX</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8988em;vertical-align:-0.2155em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">L</span><span class=\"mspace\" style=\"margin-right:-0.36em;\"></span><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6833em;\"><span style=\"top:-2.905em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord\"><span class=\"mord textrm mtight sizing reset-size6 size3\">A</span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.15em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">T</span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4678em;\"><span style=\"top:-2.7845em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord textrm\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2155em;\"><span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.125em;\"></span><span class=\"mord textrm\">X</span></span></span></span></span></span> rendered in Zulip.)</p>",
        "id": 425756816,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710060754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20there.20a.20theorem.20about.20cyclic.20group.3F/near/425756726\">发言道</a>：</p>\n<blockquote>\n<p>This is basically <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.totient_prime_pow#doc\">docs#Nat.totient_prime_pow</a>, at least assuming you know the general statement that a cyclic group of order <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> has exactly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> generators.</p>\n</blockquote>\n<p>Thanks! We have just found <code>Nat.totient</code>. Counting is no problem now,  we only need to complete the first step.</p>",
        "id": 425758003,
        "sender_full_name": "Yicheng Tao",
        "timestamp": 1710061910
    },
    {
        "content": "<p>Cyclic groups are in <code>Mathlib.GroupTheory.SpecificGroups.Cyclic</code>. If you look for <code>totient</code> in that file we see quite a lof of results.</p>",
        "id": 425759292,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710063259
    },
    {
        "content": "<p>The statement looks false to me. It has a natural subtraction in which is sometimes a code smell. What happens if r=0?</p>",
        "id": 425760059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710064114
    },
    {
        "content": "<p>Also, <code>generators</code> could be the empty set...</p>",
        "id": 425760597,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710064710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ZMod, \"totient\"</p>",
        "id": 425761112,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710065184
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Nat/Totient.html#ZMod.card_units_eq_totient\">ZMod.card_units_eq_totient</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/Finite/Basic.html#ZMod.pow_totient\">ZMod.pow_totient</a></p>",
        "id": 425761120,
        "sender_full_name": "loogle",
        "timestamp": 1710065186
    },
    {
        "content": "<p>the first one looks very promising</p>",
        "id": 425761129,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710065198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20there.20a.20theorem.20about.20cyclic.20group.3F/near/425760059\">发言道</a>：</p>\n<blockquote>\n<p>The statement looks false to me. It has a natural subtraction in which is sometimes a code smell. What happens if r=0?</p>\n</blockquote>\n<p>The statement says r is equal or greater than 1, which also means <code>generators</code> is not empty. I don't know if it's obvious to Lean.</p>\n<p>Sorry for dropping this hypothesis in the displayed code.</p>",
        "id": 425763368,
        "sender_full_name": "Yicheng Tao",
        "timestamp": 1710067599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20there.20a.20theorem.20about.20cyclic.20group.3F/near/425761129\">发言道</a>：</p>\n<blockquote>\n<p>the first one looks very promising</p>\n</blockquote>\n<p>I think there is still a problem about the equivalence between <code>generators</code> and <code>(ZMod n)ˣ</code>.</p>",
        "id": 425763572,
        "sender_full_name": "Yicheng Tao",
        "timestamp": 1710067830
    },
    {
        "content": "<p>I don't think the way you've phrased <code>generators</code> as any set whose elements have some property is going to work. If your example applies to a particular set, it also applies to all subsets of that set, so they can hardly all have the same cardinality</p>",
        "id": 425764687,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710068888
    },
    {
        "content": "<p>Do you mean to say something about the set of <em>all</em> elements with that property?</p>",
        "id": 425764706,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710068912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20there.20a.20theorem.20about.20cyclic.20group.3F/near/425764687\">发言道</a>：</p>\n<blockquote>\n<p>I don't think the way you've phrased <code>generators</code> as any set whose elements have some property is going to work. If your example applies to a particular set, it also applies to all subsets of that set, so they can hardly all have the same cardinality</p>\n</blockquote>\n<p>I agree with you. Actually I'm trying to fix that problem now by using set notation and <code>Set.ncard</code>.</p>",
        "id": 425765088,
        "sender_full_name": "Yicheng Tao",
        "timestamp": 1710069244
    },
    {
        "content": "<p>Updated code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.ZPowers</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Totient</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">generators</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">AddSubgroup.zmultiples</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">):</span>\n  <span class=\"n\">Set.ncard</span> <span class=\"o\">(</span><span class=\"n\">generators</span> <span class=\"n\">p</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Set.ncard</span> <span class=\"o\">(</span><span class=\"n\">generators</span> <span class=\"n\">p</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.totient</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.totient_prime_pow</span> <span class=\"n\">h₀</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h₁</span>\n</code></pre></div>",
        "id": 425765226,
        "sender_full_name": "Yicheng Tao",
        "timestamp": 1710069367
    },
    {
        "content": "<p>I wonder if I can use the theorem <code>ZMod.card_units_eq_totient</code>. But that means I need to prove <code>Set.ncard (generators p r) = Fintype.card (ZMod (p ^ r))ˣ </code>.</p>",
        "id": 425765412,
        "sender_full_name": "Yicheng Tao",
        "timestamp": 1710069592
    },
    {
        "content": "<p>Okay, that's getting closer, but you've hit a peculiarity of type theory: we don't write \"the subgroup is the entire group\" but \"the subgroup is the entire subgroup when seen as a subgroup of itself\" (quite a mouthful, huh). The latter is written as \\top, so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">generators</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">AddSubgroup.zmultiples</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 425765519,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710069700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20there.20a.20theorem.20about.20cyclic.20group.3F/near/425765519\">发言道</a>：</p>\n<blockquote>\n<p>Okay, that's getting closer, but you've hit a peculiarity of type theory: we don't write \"the subgroup is the entire group\" but \"the subgroup is the entire subgroup when seen as a subgroup of itself\" (quite a mouthful, huh). The latter is written as \\top, so:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">generators</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">AddSubgroup.zmultiples</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks for correction.</p>",
        "id": 425765784,
        "sender_full_name": "Yicheng Tao",
        "timestamp": 1710069929
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"646276\">Yicheng Tao</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20there.20a.20theorem.20about.20cyclic.20group.3F/near/425763368\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20there.20a.20theorem.20about.20cyclic.20group.3F/near/425760059\">发言道</a>：</p>\n<blockquote>\n<p>The statement looks false to me. It has a natural subtraction in which is sometimes a code smell. What happens if r=0?</p>\n</blockquote>\n<p>The statement says r is equal or greater than 1</p>\n</blockquote>\n<p>Aah yes, sorry for the noise! The natural subtraction is still a code smell though, why not use s=r-1 instead of r? Then you don't need a natural subtraction or the bound on the variable so it's slightly cleaner (you'll have to do this in the proof anyway in some sense)</p>",
        "id": 425766830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710071060
    },
    {
        "content": "<p>We finally come up with a solution as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.ZPowers</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Totient</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">p.Prime</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">generators</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">AddSubgroup.zmultiples</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">):</span>\n  <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">generators</span> <span class=\"n\">p</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">trivialmap</span> <span class=\"o\">:</span> <span class=\"n\">generators</span> <span class=\"n\">p</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">Nat.Coprime</span> <span class=\"o\">(</span><span class=\"n\">ZMod.val</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">r</span><span class=\"o\">)}</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">v</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n      <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">generators</span><span class=\"o\">,</span> <span class=\"n\">AddSubgroup.eq_top_iff'</span><span class=\"o\">,</span> <span class=\"n\">AddSubgroup.mem_zmultiples_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"mi\">1</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.coprime_iff_gcd_eq_one</span><span class=\"o\">]</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hk</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">v.val</span><span class=\"o\">):</span><span class=\"n\">ℤ</span><span class=\"o\">)</span>   <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hk</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ZMod.int_cast_eq_int_cast_iff_dvd_sub</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">v.val</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">r</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">hk</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">hk</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hb</span>\n        <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">v.val</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">b</span>\n          <span class=\"n\">simp</span>\n          <span class=\"n\">linarith</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">h'</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span>\n\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat.gcd</span> <span class=\"o\">(</span><span class=\"n\">ZMod.val</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ZMod.val</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"k\">have</span> <span class=\"n\">aux1</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.gcd</span> <span class=\"o\">(</span><span class=\"n\">ZMod.val</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">ZMod.val</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">apply</span> <span class=\"n\">Int.ofNat_dvd.mpr</span>\n            <span class=\"n\">exact</span> <span class=\"n\">Nat.gcd_dvd_left</span> <span class=\"o\">(</span><span class=\"n\">ZMod.val</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n          <span class=\"k\">have</span> <span class=\"n\">aux2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat.gcd</span> <span class=\"o\">(</span><span class=\"n\">ZMod.val</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">apply</span> <span class=\"n\">Int.ofNat_dvd.mpr</span>\n            <span class=\"n\">exact</span> <span class=\"n\">Nat.gcd_dvd_right</span> <span class=\"o\">(</span><span class=\"n\">ZMod.val</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n          <span class=\"n\">apply</span> <span class=\"n\">Int.dvd_sub</span>\n          <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Int.dvd_trans</span> <span class=\"n\">aux1</span>\n            <span class=\"n\">apply</span> <span class=\"n\">Int.dvd_mul_left</span>\n          <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Int.dvd_trans</span> <span class=\"n\">aux2</span>\n            <span class=\"n\">apply</span> <span class=\"n\">Int.dvd_mul_left</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.ofNat_dvd</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n        <span class=\"n\">assumption</span>\n    <span class=\"o\">}</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">trivialinverse</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span>  <span class=\"n\">Nat.Coprime</span> <span class=\"o\">(</span><span class=\"n\">ZMod.val</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">r</span><span class=\"o\">)}</span> <span class=\"bp\">→</span> <span class=\"n\">generators</span> <span class=\"n\">p</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">v</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n      <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">generators</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">AddSubgroup.eq_top_iff'</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n        <span class=\"n\">intro</span> <span class=\"n\">x</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">AddSubgroup.mem_zmultiples_iff</span><span class=\"o\">]</span>\n        <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">x.val</span> <span class=\"bp\">*</span> <span class=\"n\">Nat.gcdA</span> <span class=\"n\">v.val</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">r</span><span class=\"o\">))</span>\n        <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.gcd_eq_gcd_ab</span> <span class=\"n\">v.val</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n        <span class=\"n\">simp</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.gcdA</span> <span class=\"o\">(</span><span class=\"n\">ZMod.val</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">v</span>  <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.Coprime.gcd_eq_one</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">):</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">]</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this.symm</span><span class=\"o\">]</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ZMod.nat_cast_val</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_add</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_mul</span><span class=\"o\">,</span>\n            <span class=\"n\">ZMod.int_cast_cast</span><span class=\"o\">,</span> <span class=\"n\">ZMod.cast_id'</span><span class=\"o\">,</span> <span class=\"n\">id_eq</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_pow</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_ofNat</span><span class=\"o\">]</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ZMod.nat_cast_self</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)]</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n        <span class=\"n\">simp</span>\n    <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"n\">generators</span> <span class=\"n\">p</span> <span class=\"n\">r</span> <span class=\"bp\">≃</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">Nat.Coprime</span> <span class=\"o\">(</span><span class=\"n\">ZMod.val</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">r</span><span class=\"o\">)}</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">trivialmap</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">trivialinverse</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">a</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">trivialmap</span><span class=\"o\">,</span> <span class=\"n\">trivialinverse</span><span class=\"o\">]</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">a</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">trivialmap</span><span class=\"o\">,</span> <span class=\"n\">trivialinverse</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">generators</span> <span class=\"n\">p</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.totient</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">generators</span> <span class=\"n\">p</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">Nat.Coprime</span> <span class=\"o\">(</span><span class=\"n\">ZMod.val</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">r</span><span class=\"o\">)}</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card_congr</span> <span class=\"n\">iso</span><span class=\"o\">)</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card_congr</span> <span class=\"n\">ZMod.unitsEquivCoprime.symm</span><span class=\"o\">)</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.totient</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ZMod.card_units_eq_totient</span> <span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.totient_prime_pow</span> <span class=\"n\">h₀.out</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h₁</span>\n</code></pre></div>\n<p>Is there anything we can do to improve? Maybe simpler ideas?</p>",
        "id": 425844140,
        "sender_full_name": "Yicheng Tao",
        "timestamp": 1710138871
    },
    {
        "content": "<p>You can make the proof lighter by proving an equivalence: n generates iff p does not divide n.</p>",
        "id": 425849223,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710142095
    },
    {
        "content": "<p>This <a href=\"https://github.com/leanprover-community/mathlib4/tree/j-loreaux%2Fgenerator\">branch#j-loreaux/generator</a> is very old now, but it contains a refactor where I introduce the type of generators of a group (which may be empty when the group is not cyclic). But I ran into some headaches with <code>to_additive</code> which made me abandon it.</p>",
        "id": 425991383,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710184134
    }
]