[
    {
        "content": "<p>I am currently trying to finalize a simple proof and it seems that type coersion is getting. in my way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">wn</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n<span class=\"n\">n</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">heq</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">✝</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">n</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">w</span>\n</code></pre></div>\n<p>Does anyone have an idea how to close this goal?</p>",
        "id": 425674243,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1709978942
    },
    {
        "content": "<p>my idea is that if your goal has inaccessible variables then you already made a mistake earlier. But does <code>symm</code> then <code>assumption_mod_cast</code> work?</p>",
        "id": 425676118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709980894
    },
    {
        "content": "<p>Thank you for pointing these two tactics out.</p>",
        "id": 425676212,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1709981011
    },
    {
        "content": "<p>symm works, but assumption_mod_cast does not.</p>",
        "id": 425676219,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1709981029
    },
    {
        "content": "<p>I am making some progress, so will try for a bit.</p>",
        "id": 425676226,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1709981039
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.BitVec.Lemmas</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">BitVec</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ofInt_negSucc</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">BitVec.ofInt</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">~~~.</span><span class=\"n\">ofNat</span> <span class=\"n\">w</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">BitVec.ofInt</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">BitVec.toNat_injective</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.toNat</span><span class=\"o\">,</span> <span class=\"n\">toNat_ofNatLt</span><span class=\"o\">,</span> <span class=\"n\">toNat_not</span><span class=\"o\">,</span> <span class=\"n\">toNat_ofNat</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rename_i</span> <span class=\"n\">x</span> <span class=\"n\">nnn</span> <span class=\"n\">nn</span>\n    <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">Int.negSucc_emod</span><span class=\"o\">]</span>\n    <span class=\"n\">symm</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.cast_eq_cast_iff_Nat</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_sub</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_sub</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nn</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">xxxxx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">pow_pos</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span> <span class=\"n\">w</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.pos_pow_of_pos</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_all</span>\n    <span class=\"k\">have</span> <span class=\"n\">sss</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sss</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mod_lt</span><span class=\"o\">]</span>\n\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">nonneg</span> <span class=\"o\">:</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">w</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">pow_eq_zero_iff'</span><span class=\"o\">,</span> <span class=\"n\">OfNat.ofNat_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">false_and</span><span class=\"o\">,</span>\n        <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">Int.emod_nonneg</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ofNat_pos</span><span class=\"o\">,</span> <span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">pow_pos</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">pow_eq_zero_iff'</span><span class=\"o\">,</span> <span class=\"n\">OfNat.ofNat_ne_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">false_and</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">Int.negSucc_not_nonneg</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 425676279,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1709981083
    },
    {
        "content": "<p>Almost there. There are likely a lot of opportunities to clean up.</p>",
        "id": 425676315,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1709981124
    },
    {
        "content": "<p>Oh that's a shame about <code>assumption_mod_cast</code>, the job of that tactic is to do exactly what you want (\"the goal is the same as an assumption, modulo cast issues)</p>",
        "id": 425677014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709981869
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 425677486,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1709982273
    },
    {
        "content": "<p>I got the proof go through, but its not beautiful. Such a pity, indeed.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.BitVec.Lemmas</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">BitVec</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ofInt_negSucc</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">BitVec.ofInt</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">~~~.</span><span class=\"n\">ofNat</span> <span class=\"n\">w</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">BitVec.ofInt</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">BitVec.toNat_injective</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.toNat</span><span class=\"o\">,</span> <span class=\"n\">toNat_ofNatLt</span><span class=\"o\">,</span> <span class=\"n\">toNat_not</span><span class=\"o\">,</span> <span class=\"n\">toNat_ofNat</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">Int.negSucc_emod</span><span class=\"o\">]</span>\n    <span class=\"n\">symm</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.cast_eq_cast_iff_Nat</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_sub</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_sub</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">ofNat_pos</span><span class=\"o\">,</span> <span class=\"n\">pow_pos</span><span class=\"o\">,</span> <span class=\"n\">cast_pow</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_ofNat</span><span class=\"o\">,</span> <span class=\"n\">cast_one</span><span class=\"o\">,</span>\n      <span class=\"n\">Int.ofNat_emod</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">omega</span>\n    <span class=\"n\">omega</span>\n\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">nonneg</span> <span class=\"o\">:</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">w</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">pow_eq_zero_iff'</span><span class=\"o\">,</span> <span class=\"n\">OfNat.ofNat_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">false_and</span><span class=\"o\">,</span>\n        <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">Int.emod_nonneg</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ofNat_pos</span><span class=\"o\">,</span> <span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">pow_pos</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">pow_eq_zero_iff'</span><span class=\"o\">,</span> <span class=\"n\">OfNat.ofNat_ne_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">false_and</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">Int.negSucc_not_nonneg</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 425677658,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1709982430
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"122318\">Tobias Grosser</span> has marked this topic as resolved.</p>",
        "id": 425680622,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709985369
    }
]