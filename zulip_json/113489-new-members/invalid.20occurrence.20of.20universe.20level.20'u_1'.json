[
    {
        "content": "<p>Hi I got  an error like <code>invalid occurrence of universe level 'u_1'</code> in the following code snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Functor.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Types</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Yoneda</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Pullbacks</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.CommSq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Diagonal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.FiniteLimits</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.HasLimits</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.IsLimit</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Types</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Yoneda</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Presheaf</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Preserves.Limits</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n<span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Category</span> <span class=\"n\">Functor</span> <span class=\"n\">Limits</span> <span class=\"n\">IsLimit</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasFiniteLimits</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">pullback.diagonal</span> <span class=\"o\">(</span><span class=\"n\">yoneda.map</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\"> the diagonal morphism Y -&gt; Y ×Z Y</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">pullback.diagonal</span> <span class=\"n\">g</span>\n<span class=\"k\">#check</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">yoneda.map</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">test_d</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">yoneda.map</span> <span class=\"n\">g</span><span class=\"o\">))</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The detailed error is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"kd\">universe</span> <span class=\"n\">level</span> <span class=\"bp\">'</span><span class=\"n\">u_1'</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">test_d'</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">occur</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"n\">declaration</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">nor</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">explicit</span> <span class=\"kd\">universe</span> <span class=\"n\">level</span> <span class=\"n\">provided</span> <span class=\"kd\">by</span> <span class=\"n\">the</span> <span class=\"n\">user</span><span class=\"o\">,</span> <span class=\"n\">occurring</span> <span class=\"n\">at</span> <span class=\"n\">expression</span>\n  <span class=\"n\">hasFiniteLimits_of_hasLimitsOfSize.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span>\n    <span class=\"o\">(</span><span class=\"n\">CategoryTheory.Functor.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Opposite.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n<span class=\"n\">at</span> <span class=\"n\">declaration</span> <span class=\"n\">body</span>\n  <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">let_fun</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">yoneda.obj</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">pullback.diagonalObj</span> <span class=\"o\">(</span><span class=\"n\">yoneda.map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">yoneda.map</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">sorryAx</span> <span class=\"n\">True</span>\n</code></pre></div>\n<p>It seems there is some extra universe argument but I am not clear why</p>",
        "id": 437497392,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715102490
    },
    {
        "content": "<p>I found similar error in <a href=\"#narrow/stream/270676-lean4/topic/.60mkAppM.60.20fails.20with.20multiple.20universe.20metavariables\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.60mkAppM.60.20fails.20with.20multiple.20universe.20metavariables</a> but after quickly reading it I  still have no direction on how to fix it. <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>",
        "id": 437497712,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715102632
    },
    {
        "content": "<p>On the most recent mathlib, I'm not seeing this error.</p>\n<p>Could you set <code>set_option pp.universes true</code> to see a more detailed error?</p>",
        "id": 437500113,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715103654
    },
    {
        "content": "<p>Sure! It seems reported by the HasFiniteLimits instance synthesized for the category <code>CategoryTheory.Functor.{v, v, u, v + 1} (Opposite.{u + 1} C) (Type v)</code></p>",
        "id": 437501206,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715104067
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/zL1WjcwoUleXQLHvCfN0aAS4/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/zL1WjcwoUleXQLHvCfN0aAS4/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/zL1WjcwoUleXQLHvCfN0aAS4/image.png\"></a></div>",
        "id": 437501307,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715104091
    },
    {
        "content": "<p>my local copy for mathlib seems to be <code>db651742f2</code> at tag <code>v4.8.0-rc1</code></p>",
        "id": 437501403,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715104131
    },
    {
        "content": "<p>As a temporary fix (if updating does not work), you may try to insert </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasFiniteLimits</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">hasFiniteLimits_of_hasLimitsOfSize.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 437501523,
        "sender_full_name": "Joël Riou",
        "timestamp": 1715104185
    },
    {
        "content": "<p>I see the error in my v4.8.0-rc1 mathlib too. If you set <code>set_option pp.all true</code>, you can see the universe level metavariables that are inside the expression, like <code>@CategoryTheory.Limits.functorCategoryHasLimitsOfSize.{?u.6523, v, v, u, v, v + 1}</code></p>",
        "id": 437502652,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715104660
    },
    {
        "content": "<p>If you see an <code>invalid occurrence of universe level 'u_1'</code> error (with a numeric suffix like that) it usually indicates that the body of the lemma has a universe level metavariable.</p>",
        "id": 437502952,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715104774
    },
    {
        "content": "<p>The problem is with the instance <code>hasFiniteLimits_of_hasLimitsOfSize C</code>. It is a good lemma, but it should be made an instance only for universes that can be deduced from the category <code>C</code> (or for <code>{0, 0}</code>).</p>",
        "id": 437503254,
        "sender_full_name": "Joël Riou",
        "timestamp": 1715104869
    },
    {
        "content": "<p>Thank you Kyle and Joël for the kindly help and detailed explanation <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span>  I updated to the latest commit of master branch. It's taking some time for compilation now</p>",
        "id": 437503889,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715105089
    },
    {
        "content": "<p>Update to master not working  for me but <code>instance : HasFiniteLimits (Cᵒᵖ ⥤ Type v) := hasFiniteLimits_of_hasLimitsOfSize.{0, 0} _</code> works<span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> To late in my timezone I will continue it tomorrow</p>",
        "id": 437505558,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715105726
    },
    {
        "content": "<p>Here's another way to fix this, using a local instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test_d</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hasFiniteLimits_of_hasLimitsOfSize.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">yoneda.map</span> <span class=\"n\">g</span><span class=\"o\">))</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 437506288,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715106023
    },
    {
        "content": "<p>This is fixed in PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/12797\">#12797</a>.</p>",
        "id": 437964473,
        "sender_full_name": "Joël Riou",
        "timestamp": 1715339080
    },
    {
        "content": "<p>Hi Joël  it's awesome<span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> Is it now in the master branch? My local env checking out 945d7cf3cf seems still requiring the temp fix <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 438016152,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715360665
    },
    {
        "content": "<p>The fix on master was done a few hours ago: you need to update...</p>",
        "id": 438018327,
        "sender_full_name": "Joël Riou",
        "timestamp": 1715361557
    },
    {
        "content": "<p>Yeah after update it works!<span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 438022549,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715363171
    }
]