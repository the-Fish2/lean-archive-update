[
    {
        "content": "<p>I'm trying to define a function <code>max</code> that takes a function <code>f</code> (mapping from type <code>α</code> to a numeric value), and returns the least upper bound of applying <code>f</code> to all elements in its domain. Essentially, this is a max quantifier.</p>\n<p>Here's my naive attempt, which doesn't compile and is a very simplified version of what I'm aiming for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">max</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">β.Nonempty</span> <span class=\"k\">then</span> <span class=\"n\">Finset.sup</span> <span class=\"n\">β</span> <span class=\"n\">f</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"mi\">1000000</span>\n<span class=\"c1\">-- output:</span>\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">--  OrderBot ℤ</span>\n</code></pre></div>\n<p>Is there a similar function available in Mathlib or the standard library?  If not, how can I implement something like this?</p>",
        "id": 427584049,
        "sender_full_name": "Vlad",
        "timestamp": 1710799964
    },
    {
        "content": "<p><code>Finset.sup'</code>?</p>",
        "id": 427584233,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710800031
    },
    {
        "content": "<p>Unfortunately, replacing Finset.sup with Finset.sup' doesn't work.<br>\nChanging <code>f: α → Int</code> to <code>f: β → Int</code>doesn't help either.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">sup'</span> <span class=\"n\">β</span> <span class=\"n\">f</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">β.Nonempty</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 427584605,
        "sender_full_name": "Vlad",
        "timestamp": 1710800175
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">def</span> <span class=\"n\">max</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">β.Nonempty</span> <span class=\"k\">then</span> <span class=\"n\">Finset.sup'</span> <span class=\"n\">β</span> <span class=\"n\">h</span> <span class=\"n\">f</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"mi\">1000000</span>\n</code></pre></div>",
        "id": 427584832,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710800287
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> ! BTW, Is there an instance of <code>OrderBot Z</code> that can be used instead of the integer constant?</p>",
        "id": 427585288,
        "sender_full_name": "Vlad",
        "timestamp": 1710800553
    },
    {
        "content": "<p>\\Z doesn't have an element that's smaller than all other elements. Is that what you're asking?</p>",
        "id": 427586192,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710801034
    },
    {
        "content": "<p>Or are you looking for WithBot \\Z?</p>",
        "id": 427586258,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710801066
    },
    {
        "content": "<p>I was thinking about an instance of minus infinity for Z.</p>",
        "id": 427586386,
        "sender_full_name": "Vlad",
        "timestamp": 1710801133
    },
    {
        "content": "<p>In my <code>max</code> function I'm using a constant <code>-1000000</code>, but the intent is to return a minus infinity if the domain of <code>f</code> is empty.</p>",
        "id": 427586535,
        "sender_full_name": "Vlad",
        "timestamp": 1710801218
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">-\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span></span></span></span> is not a member of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>, so this isn't possible</p>",
        "id": 427589949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710802611
    },
    {
        "content": "<p>If you want to take <code>ℤ</code> with a negative infinity adjoined, you can use <code>WithBot ℤ</code> instead, and then <code>Finset.sup</code> will work</p>",
        "id": 427590065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710802660
    },
    {
        "content": "<p>That works perfectly. Thank you!</p>",
        "id": 427590525,
        "sender_full_name": "Vlad",
        "timestamp": 1710802862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"696014\">Vlad</span> has marked this topic as resolved.</p>",
        "id": 427590534,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710802866
    }
]