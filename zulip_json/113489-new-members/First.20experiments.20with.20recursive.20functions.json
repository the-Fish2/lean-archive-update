[
    {
        "content": "<p>My first recursive functions were so familiar and direct (addition, Fibonacci), no explicit <code>termination_by</code>hints were necessary.  Now I'm having problems when the function structure gets more complicated.  Even as little as wrapping the function parameter in a structure foils me.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"c\">/-</span><span class=\"cm\">Obvious termination :: Iterate down a list, discarding terms, until we hit the empty string -/</span>\n  <span class=\"kd\">def</span> <span class=\"n\">recurse_to_empty1</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span>  <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">lst</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span>  <span class=\"o\">::</span> <span class=\"n\">tl</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">recurse_to_empty1</span> <span class=\"n\">tl</span>\n    <span class=\"n\">termination_by</span>  <span class=\"n\">sizeOf</span> <span class=\"n\">lst</span>  <span class=\"c1\">-- termination is automatically determined, but can be made explicit</span>\n\n  <span class=\"k\">#eval</span> <span class=\"n\">recurse_to_empty1</span> <span class=\"o\">[</span> <span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"s2\">\"b\"</span><span class=\"o\">,</span> <span class=\"s2\">\"c\"</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span>\n   <span class=\"c1\">-- [] -- as proven, the evaluation terminates</span>\n\n <span class=\"c1\">-- Now wrap the solitary parameter in a structure</span>\n  <span class=\"kd\">structure</span> <span class=\"n\">wrapper</span> <span class=\"n\">where</span> <span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span>\n  <span class=\"kd\">def</span>  <span class=\"n\">wrappedLst</span> <span class=\"o\">:</span> <span class=\"n\">wrapper</span>  <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">lst</span> <span class=\"o\">:=</span> <span class=\"o\">[</span> <span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"s2\">\"b\"</span><span class=\"o\">,</span> <span class=\"s2\">\"c\"</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n   <span class=\"sd\">/-- Unclear termination :: The same recursion as before, but now the input parameter is wrapped in a structure -/</span>\n   <span class=\"kd\">def</span> <span class=\"n\">recurse_to_empty2</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">wrapper</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span>  <span class=\"o\">:=</span>\n   <span class=\"k\">match</span>  <span class=\"n\">w.lst</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">[]</span>  <span class=\"bp\">=&gt;</span>  <span class=\"o\">[]</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span>  <span class=\"o\">::</span> <span class=\"n\">tl</span>  <span class=\"bp\">=&gt;</span>  <span class=\"n\">recurse_to_empty2</span>  <span class=\"o\">{</span> <span class=\"n\">lst</span> <span class=\"o\">:=</span> <span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">wrapper</span><span class=\"o\">}</span>\n       <span class=\"n\">termination_by</span> <span class=\"gr\">sorry</span>  <span class=\"c1\">-- variants attempted, w, w.lst, sizeOf w, sizeOf w.lst, List.length w.lst</span>\n\n   <span class=\"k\">#eval</span> <span class=\"n\">recurse_to_empty2</span> <span class=\"n\">wrappedLst</span>\n   <span class=\"c1\">-- []  -- nevertheless, it does terminate</span>\n</code></pre></div>\n<p>Can anyone help?</p>",
        "id": 431513653,
        "sender_full_name": "Madir Mabbott",
        "timestamp": 1712320137
    },
    {
        "content": "<p>Here's what the termination goal for your <code>recurse_to_empty2</code> looks like if you use <code>termination_by w.lst.length</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">wrapper</span>\n<span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List.length</span> <span class=\"n\">tl</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">w.lst</span>\n</code></pre></div>\n<p>Of course, this is not provable. Essentially, there is a missing hypothesis like <code>w.lst = head✝ :: tl</code>. Unfortunately, it seems that Lean does not \"remember\" this fact.</p>\n<p>Here's one way to fix this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">recurse_to_empty3</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">wrapper</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">w</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">lst</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">lst</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">tl</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">recurse_to_empty3</span> <span class=\"o\">{</span> <span class=\"n\">lst</span> <span class=\"o\">:=</span> <span class=\"n\">tl</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Or, a bit cleaner:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">recurse_to_empty4</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">wrapper</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">w</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨[]⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">recurse_to_empty4</span> <span class=\"o\">⟨</span><span class=\"n\">tl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Sorry if this isn't the most satisfactory answer.</p>",
        "id": 431729464,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1712463186
    },
    {
        "content": "<p>Many thanks. I will study this closely.</p>",
        "id": 431762017,
        "sender_full_name": "Madir Mabbott",
        "timestamp": 1712490224
    },
    {
        "content": "<p>Note that you <em>can</em> make Lean remember what <code>w</code> has matched against (by adding the <code>h :</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">recurse_to_empty2</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">wrapper</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">w.lst</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>  <span class=\"bp\">=&gt;</span>  <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>  <span class=\"o\">::</span> <span class=\"n\">tl</span>  <span class=\"bp\">=&gt;</span>  <span class=\"n\">recurse_to_empty2</span>  <span class=\"o\">{</span> <span class=\"n\">lst</span> <span class=\"o\">:=</span> <span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">wrapper</span><span class=\"o\">}</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">w.lst.length</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 431764472,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1712491512
    }
]