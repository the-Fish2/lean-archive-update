[
    {
        "content": "<p>I'm stuck on proving <code>zero_add</code> for <code>MyPolynomial Int</code>.  I'm guessing it's because I defined <code>MyPolynomial.add</code> with reference to <code>a.sr</code>, but I don't know how to fix it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MySemiring</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">zero_add</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">zero</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">mul_one</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">one_mul</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">one</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">mul_add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"n\">add_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyIntSemiring</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">MySemiring</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">HAdd.hAdd</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">HMul.hMul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">⟩</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">MyPolynomial</span> <span class=\"n\">where</span>\n  <span class=\"n\">sr</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">MySemiring</span> <span class=\"n\">α</span>\n  <span class=\"n\">coeffs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zipWithFill</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">zipWithFill</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">as</span> <span class=\"n\">bs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">zipWithFill</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">as</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">zipWithFill</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"o\">[]</span> <span class=\"n\">bs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">MyPolynomial.add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">MyPolynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MyPolynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span> <span class=\"n\">a.sr</span><span class=\"o\">,</span> <span class=\"n\">zipWithFill</span> <span class=\"n\">a.sr.add</span> <span class=\"n\">a.sr.zero</span> <span class=\"n\">a.coeffs</span> <span class=\"n\">b.coeffs</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_int_polynomial_add_zero</span> <span class=\"o\">(</span><span class=\"n\">pa</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">MyPolynomial</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">MyPolynomial.add</span> <span class=\"n\">pa</span> <span class=\"o\">{</span> <span class=\"n\">sr</span> <span class=\"o\">:=</span> <span class=\"n\">MyIntSemiring</span><span class=\"o\">,</span> <span class=\"n\">coeffs</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">pa</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">MyPolynomial.add</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">zipWithFill</span> <span class=\"n\">pa.sr.add</span> <span class=\"n\">pa.sr.zero</span> <span class=\"n\">pa.coeffs</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">pa.coeffs</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">induction</span> <span class=\"n\">pa.coeffs</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">zipWithFill</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pa.sr.add_zero</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_int_polynomial_zero_add</span> <span class=\"o\">(</span><span class=\"n\">pb</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">MyPolynomial</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">MyPolynomial.add</span> <span class=\"o\">{</span> <span class=\"n\">sr</span> <span class=\"o\">:=</span> <span class=\"n\">MyIntSemiring</span><span class=\"o\">,</span> <span class=\"n\">coeffs</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"n\">pb</span> <span class=\"bp\">=</span> <span class=\"n\">pb</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">MyPolynomial.add</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">α : Type</span>\n<span class=\"cm\">pb : MyPolynomial</span>\n<span class=\"cm\">⊢ { sr := MyIntSemiring, coeffs := zipWithFill MyIntSemiring.add MyIntSemiring.zero [] pb.coeffs } = pb</span>\n<span class=\"cm\">-/</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 434898933,
        "sender_full_name": "Iocta",
        "timestamp": 1713845218
    },
    {
        "content": "<p>(bump)</p>",
        "id": 435054251,
        "sender_full_name": "Iocta",
        "timestamp": 1713900596
    },
    {
        "content": "<p>It seems like what you need is a proof that <code>zipWithFill _ _ [] x</code> = x, perhaps extract that as an intermediate lemma?</p>",
        "id": 435071894,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1713908294
    },
    {
        "content": "<p>Also side note: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial#doc\">docs#Polynomial</a> is defined with the semiring instance as one of the arguments to the structure definition, so it is a bit odd looking here to see it as a field of the structure itself</p>",
        "id": 435072016,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1713908377
    },
    {
        "content": "<p>This doesn't seem like it's gonna work: I won't be able to unify <code>MyIntSemiring</code> with <code>MySemiring</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zipWithFill_empty</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero_f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">zipWithFill</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"o\">[]</span> <span class=\"n\">bs</span> <span class=\"bp\">=</span> <span class=\"n\">bs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">bs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">zipWithFill</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_f</span> <span class=\"n\">head</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_int_polynomial_zero_add</span> <span class=\"o\">(</span><span class=\"n\">pb</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">MyPolynomial</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">MyPolynomial.add</span> <span class=\"o\">{</span> <span class=\"n\">sr</span> <span class=\"o\">:=</span> <span class=\"n\">MyIntSemiring</span><span class=\"o\">,</span> <span class=\"n\">coeffs</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"n\">pb</span> <span class=\"bp\">=</span> <span class=\"n\">pb</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">MyPolynomial.add</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zipWithFill_empty</span> <span class=\"n\">MyIntSemiring.add</span> <span class=\"n\">MyIntSemiring.zero</span> <span class=\"n\">MyIntSemiring.zero_add</span> <span class=\"n\">pb.coeffs</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">pbsr</span><span class=\"o\">,</span> <span class=\"n\">pbcoeffs</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">pb</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    α : Type</span>\n<span class=\"cm\">    pb : MyPolynomial</span>\n<span class=\"cm\">    pbsr : MySemiring</span>\n<span class=\"cm\">    pbcoeffs : List ℤ</span>\n<span class=\"cm\">    ⊢ { sr := MyIntSemiring, coeffs := { sr := pbsr, coeffs := pbcoeffs }.coeffs } = { sr := pbsr, coeffs := pbcoeffs }</span>\n<span class=\"cm\">    -/</span>\n</code></pre></div>",
        "id": 435074725,
        "sender_full_name": "Iocta",
        "timestamp": 1713909767
    },
    {
        "content": "<p>I think the issue may be the semiring instance argument thing. What guarantee is there that the semiring instance of pb is MyIntSemiring?</p>",
        "id": 435075219,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1713910062
    },
    {
        "content": "<p>Spoilers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MySemiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">zero_add</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">zero</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">mul_one</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">one_mul</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">one</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">mul_add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"n\">add_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">MyIntSemiring</span> <span class=\"o\">:</span> <span class=\"n\">MySemiring</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">HAdd.hAdd</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">HMul.hMul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MyPolynomial</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MySemiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">coeffs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zipWithFill</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">zipWithFill</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">as</span> <span class=\"n\">bs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">zipWithFill</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">as</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">zipWithFill</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"o\">[]</span> <span class=\"n\">bs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">MyPolynomial.add</span> <span class=\"o\">[</span><span class=\"n\">sr</span> <span class=\"o\">:</span> <span class=\"n\">MySemiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">MyPolynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MyPolynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span> <span class=\"n\">zipWithFill</span> <span class=\"n\">sr.add</span> <span class=\"n\">sr.zero</span> <span class=\"n\">a.coeffs</span> <span class=\"n\">b.coeffs</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_int_polynomial_add_zero</span> <span class=\"o\">(</span><span class=\"n\">pa</span> <span class=\"o\">:</span> <span class=\"n\">MyPolynomial</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">MyPolynomial.add</span> <span class=\"n\">pa</span> <span class=\"o\">{</span> <span class=\"n\">coeffs</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">pa</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">MyPolynomial.add</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">zipWithFill</span> <span class=\"n\">MySemiring.add</span> <span class=\"n\">MySemiring.zero</span> <span class=\"n\">pa.coeffs</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">pa.coeffs</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">induction</span> <span class=\"n\">pa.coeffs</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">zipWithFill</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MySemiring.add_zero</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zipWithFill_empty</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero_f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">zipWithFill</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"o\">[]</span> <span class=\"n\">bs</span> <span class=\"bp\">=</span> <span class=\"n\">bs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">bs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">zipWithFill</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_f</span> <span class=\"n\">head</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_int_polynomial_zero_add</span> <span class=\"o\">(</span><span class=\"n\">pb</span> <span class=\"o\">:</span> <span class=\"n\">MyPolynomial</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">MyPolynomial.add</span> <span class=\"o\">{</span> <span class=\"n\">coeffs</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"n\">pb</span> <span class=\"bp\">=</span> <span class=\"n\">pb</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">MyPolynomial.add</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zipWithFill_empty</span> <span class=\"n\">MyIntSemiring.add</span> <span class=\"n\">MyIntSemiring.zero</span> <span class=\"n\">MyIntSemiring.zero_add</span> <span class=\"n\">pb.coeffs</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 435075684,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1713910361
    },
    {
        "content": "<p>Yes, this \"bundled Semiring\" construction is mathematically nonsense; it forces you to ask the question \"when I add <code>p</code> and <code>q</code>, do I use <code>p</code>s addition or <code>q</code>s addition?\" which shouldn't be possible to ask in the first place</p>",
        "id": 435075711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713910382
    },
    {
        "content": "<p>Incidentally <span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> , I see that you are defining a type for <code>Polynomial</code> based off of lists. I need something similar for one of my projects. Perhaps there is a potential for some synergy here - is there a particular goal you have for creating this List-based polynomial type?</p>",
        "id": 435309867,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714019061
    },
    {
        "content": "<p>I'm doing exercises inspired by a <a href=\"https://github.com/DSLsofMath/DSLsofMath\">course</a>, I don't have any plans to build anything with them.</p>",
        "id": 435313662,
        "sender_full_name": "Iocta",
        "timestamp": 1714022064
    }
]