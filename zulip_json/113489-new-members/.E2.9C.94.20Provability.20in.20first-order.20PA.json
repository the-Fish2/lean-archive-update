[
    {
        "content": "<p>Is there a way to assert that a statement can be proved within PA?</p>",
        "id": 443665606,
        "sender_full_name": "Bbbbbbbbba",
        "timestamp": 1717983354
    },
    {
        "content": "<p>I'm assuming you mean proof assistant. And sure there are multiple ways. I guess most generally speaking thanks to <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> we know that Lean is equivalent to some ZF set theory with a few extensions so if you can prove your thing there you can do it in Lean as well.</p>\n<p>If you wish to assert this within Lean then there are two ways that come to mind. The obvious one: Just prove it. And the slightly less obvious one: If you are working with a decidable problem implement a verified decision procedure for it.</p>",
        "id": 443692190,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718001046
    },
    {
        "content": "<p>Oh, sorry, I meant the Peano Axioms</p>",
        "id": 443692355,
        "sender_full_name": "Bbbbbbbbba",
        "timestamp": 1718001124
    },
    {
        "content": "<p>I see, in that case sure you can do that as well. You can formalize the peano axioms in lean and then try to do propositions exclusively with them.</p>",
        "id": 443692658,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718001284
    },
    {
        "content": "<p>The worry is that Lean's type system already could represent some things not formalizable within PA (e.g. in Lean I can easily write <code>ℕ → ℕ</code>, but PA cannot formalize an arbitrary function)</p>",
        "id": 443693864,
        "sender_full_name": "Bbbbbbbbba",
        "timestamp": 1718001871
    },
    {
        "content": "<p>Ideally I could do <code>#print axioms</code> to see whether a proof is entirely in PA. However, a clearly non-PA principle like <code>Ordinal.induction</code> only depends on axioms <code>[Quot.sound, propext, Classical.choice]</code>, and I don't know if I could get rid of any of these without interfering with using first-order logic</p>",
        "id": 443696128,
        "sender_full_name": "Bbbbbbbbba",
        "timestamp": 1718002809
    },
    {
        "content": "<p>I guess my real problem was first-order logic, not PA per se</p>",
        "id": 443696233,
        "sender_full_name": "Bbbbbbbbba",
        "timestamp": 1718002849
    },
    {
        "content": "<p>Lean's foundation is stronger than PA and the foundations don't show up in the list of axioms, those are axioms in addition to the base type theory. You can get sort of a rough approximation of PA by restricting yourself to nat (see <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/418399515\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/418399515</a>).</p>\n<p>With some metaprogramming you could check whether a given theorem relies on anything other than Nat, the constructors, and the recursor with a Prop motive, but that's sort of ad-hoc.</p>",
        "id": 443697865,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1718003526
    },
    {
        "content": "<p>You can formalize the metatheory of a first order logic within Lean and define PA as a theory of the FOL. The <a href=\"https://github.com/iehality/lean4-logic\">lean4-logic</a> project formalizes several metatheories like first order logic and modal logic, and for example there are <a href=\"https://github.com/iehality/lean4-logic/blob/afcc406b621a8cf5f80d1825078b702b1d3a2d28/Logic/FirstOrder/Arith/Theory.lean#L69\">definition of PA</a> and even the <a href=\"https://github.com/iehality/lean4-logic/blob/afcc406b621a8cf5f80d1825078b702b1d3a2d28/Logic/FirstOrder/Incompleteness/FirstIncompleteness.lean#L70\">first incompleteness result</a>.</p>",
        "id": 443737601,
        "sender_full_name": "pandaman",
        "timestamp": 1718015523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"726649\">Bbbbbbbbba</span> has marked this topic as resolved.</p>",
        "id": 443900750,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718072173
    }
]