[
    {
        "content": "<p>I'm trying to write a little embedded DSL that expands into monadic Lean4 code to help me play around with designs for a new language. I would like the code in the DSL blocks to be able to read from (and modify) mutable variables declared in the outer scope. I think I'm pretty close to a working solution, but I'm getting some error messages that I don't understand. What am I doing wrong here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"c1\">-- Syntax --</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">statement</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">literal</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">literal</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"s2\">\":=\"</span> <span class=\"n\">literal</span> <span class=\"o\">:</span> <span class=\"n\">statement</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"assembly {\"</span> <span class=\"n\">statement</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"c1\">-- Semantics --</span>\n\n<span class=\"c1\">-- This seems extremely suspect...</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Syntax</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">literal</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- Is the quoting here correct?</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">statement</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">literal</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"s2\">\"←\"</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">assembly</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">statement</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Test Case --</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  the `assembly` block below should expand into the following:</span>\n<span class=\"cm\">    x ← pure 10</span>\n\n<span class=\"cm\">  currently gives the following error:</span>\n<span class=\"cm\">    function expected at</span>\n<span class=\"cm\">      x</span>\n<span class=\"cm\">    term has type</span>\n<span class=\"cm\">      Nat</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">assembly</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span> <span class=\"o\">}</span>\n  <span class=\"n\">return</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 430252304,
        "sender_full_name": "dxo",
        "timestamp": 1711717018
    },
    {
        "content": "<p>I believe I've made a little bit of progress, or at least have managed to uncover an even more confusing error... Does anyone have any insight?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"c1\">-- Syntax --</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">statement</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">literal</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">literal</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"s2\">\":=\"</span> <span class=\"n\">literal</span> <span class=\"o\">:</span> <span class=\"n\">statement</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"assembly {\"</span> <span class=\"n\">statement</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span>\n\n<span class=\"c1\">-- Semantics --</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">literal</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">statement</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">literal</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">literal</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span> <span class=\"bp\">|</span> <span class=\"n\">assembly</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">statement</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">statement</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Test Case --</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  the `assembly` block below should expand into the following:</span>\n<span class=\"cm\">    x ← pure 10</span>\n\n<span class=\"cm\">  Currently gives the following error:</span>\n\n<span class=\"cm\">  ▶ 43:14-44:21: error:</span>\n<span class=\"cm\">  non-exhaustive 'match' (syntax)</span>\n\n<span class=\"cm\">  ▶ 43:14-44:21: error:</span>\n<span class=\"cm\">  application type mismatch</span>\n<span class=\"cm\">    Syntax.matchesIdent __discr✝</span>\n<span class=\"cm\">  argument</span>\n<span class=\"cm\">    __discr✝</span>\n<span class=\"cm\">  has type</span>\n<span class=\"cm\">    ?m.7189 __discr✝¹ (TSyntax `term) : Type</span>\n<span class=\"cm\">  but is expected to have type</span>\n<span class=\"cm\">    Syntax : Type</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">assembly</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span> <span class=\"o\">}</span>\n  <span class=\"n\">return</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 430287592,
        "sender_full_name": "dxo",
        "timestamp": 1711732145
    }
]