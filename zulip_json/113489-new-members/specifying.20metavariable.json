[
    {
        "content": "<p>In the below <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I'm not sure how to supply the metavariable <code>s</code> on line 15 so I can avoid the cludge on lines 21-22:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Topology</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">IsGδ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">IsOpen</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"bp\">.</span><span class=\"n\">Countable</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⋂₀</span><span class=\"w\"> </span><span class=\"n\">T</span>\n\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">PerfectlyNormalSpace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">closed_gdelta</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">⦃</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">⦄,</span><span class=\"w\"> </span><span class=\"n\">IsClosed</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">IsGδ</span><span class=\"w\"> </span><span class=\"n\">h</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PerfectlyNormalSpace</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsGδ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">PerfectlyNormalSpace</span><span class=\"bp\">.</span><span class=\"n\">closed_gdelta</span><span class=\"w\"> </span><span class=\"n\">isClosed_closure</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PerfectlyNormalSpace</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">),</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">IsOpen</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"bp\">.</span><span class=\"n\">Countable</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⋂₀</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">PerfectlyNormalSpace</span><span class=\"bp\">.</span><span class=\"n\">closed_gdelta</span><span class=\"w\"> </span><span class=\"n\">isClosed_closure</span>\n<span class=\"w\">  </span><span class=\"c1\">-- typeclass instance problem is stuck, it is often due to metavariables</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PerfectlyNormalSpace</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">),</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">IsOpen</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"bp\">.</span><span class=\"n\">Countable</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⋂₀</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsGδ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">PerfectlyNormalSpace</span><span class=\"bp\">.</span><span class=\"n\">closed_gdelta</span><span class=\"w\"> </span><span class=\"n\">isClosed_closure</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">  </span><span class=\"c1\">-- works but gross</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 443155310,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1717705850
    },
    {
        "content": "<p>Do you like/is <code>obtain ⟨a, b⟩ := PerfectlyNormalSpace.closed_gdelta (h := closure s) isClosed_closure </code> what you want/good enough?</p>",
        "id": 443156263,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717706161
    },
    {
        "content": "<p>That works!</p>",
        "id": 443156890,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1717706355
    },
    {
        "content": "<p>It is not always the case, but it is very unlikely that providing all non-typeclass arguments leaves Lean in a state where it is still not able to synthesize the appropriate instances.  This means that very often, you can un-stuck typeclass synthesis by providing non-typeclass arguments.</p>",
        "id": 443157256,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717706461
    },
    {
        "content": "<p>(Besides, in situations such as the code above, calling out the implicit argument to be passed results in more readable code.)</p>",
        "id": 443157474,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717706529
    },
    {
        "content": "<p>I definitely agree about readability. I was trying variations on  <code>PerfectlyNormalSpace.closed_gdelta closure s isClosed_closure</code>. I didn't expect that the literal <code>h</code> would be important.</p>",
        "id": 443160742,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1717707648
    },
    {
        "content": "<p>The name of the variables became relevant in Lean 4 precisely due to this (awesome) feature of being able to \"call out\" implicit arguments.  It is a little weird and probably means that there may be a little more thought involved in assigning names to hypotheses, but it is a really great feature, in terms of readability and maintainability of code.</p>",
        "id": 443161408,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717707875
    },
    {
        "content": "<p>Note the root cause of your trouble here is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isClosed_closure#doc\">docs#isClosed_closure</a> does not have an explicit argument.</p>",
        "id": 443161655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717707970
    },
    {
        "content": "<p>(I think that's a good thing)</p>",
        "id": 443161927,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717708074
    },
    {
        "content": "<p>Unfortunately the golfing addiction pushes people to ignore the rational rules that tell when arguments can be implicit (see <a href=\"#narrow/stream/287929-mathlib4/topic/arguments.20for.20.60subset_union_left.60.20etc\">here</a> for a recent example).</p>",
        "id": 443162195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717708193
    },
    {
        "content": "<p>What is a good thing?</p>",
        "id": 443162256,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717708205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/specifying.20metavariable/near/443162256\">said</a>:</p>\n<blockquote>\n<p>What is a good thing?</p>\n</blockquote>\n<p>That <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isClosed_closure#doc\">docs#isClosed_closure</a> does not take an explicit argument since it is not a rewriting lemma and will mostly be used with dot notation where the extra explicit argument would be a bore most of the time.</p>",
        "id": 443162626,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717708361
    },
    {
        "content": "<p>Are you sure you are looking at the right lemma? Which dot notation are you talking about?</p>",
        "id": 443163654,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717708800
    },
    {
        "content": "<p>I mean it will be used in dot notation from <em>other</em> lemmas, like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsClosed.union#doc\">docs#IsClosed.union</a></p>",
        "id": 443163839,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717708869
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 443163954,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1717708922
    },
    {
        "content": "<p>I see. So it is indeed all about golfing.</p>",
        "id": 443164558,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717709181
    },
    {
        "content": "<p>I don't think using dot notation is specific to golfing?</p>",
        "id": 443164802,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717709285
    },
    {
        "content": "<p>... nor is reducing bracket-induced annoyance</p>",
        "id": 443164847,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717709305
    },
    {
        "content": "<p>I’m specifically referring to brackets avoidance. Dot notation is often great for readability.</p>",
        "id": 443165257,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717709501
    }
]