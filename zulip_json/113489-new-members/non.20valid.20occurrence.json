[
    {
        "content": "<p>what does </p>\n<blockquote>\n<p>(kernel) arg <a href=\"https://github.com/leanprover-community/mathlib4/pull/7\">#7</a> of 'TypeExp.type_op' contains a non valid occurrence of the datatypes being declared</p>\n</blockquote>\n<p>mean if the constructor in question only has 5 arguments?</p>",
        "id": 428402240,
        "sender_full_name": "Quinn",
        "timestamp": 1711138074
    },
    {
        "content": "<p>I don't know without seeing any code. Mind providing a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 428403765,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711138778
    },
    {
        "content": "<p>i don't think I understand this enough to provide a <em>minimal</em> working example! <a href=\"https://live.lean-lang.org/#code=variable%20%5BDecidable%20Asset%5D%20%7BAsset%20%3A%20Type%7D%0Avariable%20%5BDecidable%20Party%5D%20%7BParty%20%3A%20Type%7D%0A%0Ainductive%20Var%20%3A%20Type%20%3A%3D%0A%7C%20V1%0A%7C%20VS%20(v%20%3A%20Var)%0A%0Ainductive%20ObsLabel%20%3A%20Type%20%3A%3D%0A%7C%20LabelReal%20(o%20%3A%20String)%0A%7C%20LabelBool%20(o%20%3A%20String)%0A%0Ainductive%20Op%20%3A%20Type%20%3A%3D%0A%7C%20Add%0A%7C%20Sub%0A%7C%20Mult%0A%7C%20Div%0A%7C%20And%0A%7C%20Or%0A%7C%20Less%0A%7C%20Leq%0A%7C%20Eq%0A%7C%20Not%0A%7C%20Neg%0A%7C%20BLiteral%20(b%20%3A%20Bool)%0A%7C%20RLiteral%20(r%20%3A%20Int)%0A%7C%20Cond%0A%0Ainductive%20Exp%20%3A%20Type%20%3A%3D%0A%7C%20OpE%20(op%3A%20Op)%20(args%20%3A%20List%20Exp)%20%3A%20Exp%0A%7C%20Obs%20(l%20%3A%20ObsLabel)%20(i%20%3A%20Int)%20%3A%20Exp%0A%7C%20VarE%20(v%20%3A%20Var)%20%3A%20Exp%0A%7C%20Acc%20(f%20%3A%20Exp)%20(d%20%3A%20Nat)%20(e%20%3A%20Exp)%20%3A%20Exp%0A%0Ainductive%20Contract%20%3A%20Type%20%3A%3D%0A%7C%20Zero%20%3A%20Contract%0A%7C%20Let%20%3A%20Exp%20-%3E%20Contract%20-%3E%20Contract%0A%7C%20Transfer%20%3A%20Party%20-%3E%20Party%20-%3E%20Asset%20-%3E%20Contract%0A%7C%20Scale%20%3A%20Exp%20-%3E%20Contract%20-%3E%20Contract%0A%7C%20Both%20%3A%20Contract%20-%3E%20Contract%20-%3E%20Contract%0A%7C%20If%20%3A%20Exp%20-%3E%20Contract%20-%3E%20Contract%20-%3E%20Contract%0A%0Ainductive%20Ty%20%3A%20Type%20%3A%3D%0A%20%20%7C%20REAL%0A%20%20%7C%20BOOL%0A%0Ainductive%20TypeOp%20%3A%20Op%20-%3E%20List%20Ty%20-%3E%20Ty%20-%3E%20Prop%20%3A%3D%0A%20%20%7C%20type_blit%20b%20%3A%20TypeOp%20(Op.BLiteral%20b)%20%5B%5D%20BOOL%0A%20%20%7C%20type_rlit%20r%20%3A%20TypeOp%20(Op.RLiteral%20r)%20%5B%5D%20REAL%0A%20%20%7C%20type_neg%20%3A%20TypeOp%20Op.Neg%20%5BREAL%5D%20REAL%0A%20%20%7C%20type_not%20%3A%20TypeOp%20Op.Not%20%5BBOOL%5D%20BOOL%0A%20%20%7C%20type_cond%20t%20%3A%20TypeOp%20Op.Cond%20%5BBOOL%2Ct%2Ct%5D%20t%0A%20%20%7C%20type_add%20%3A%20TypeOp%20Op.Add%20%5BREAL%2CREAL%5D%20REAL%0A%20%20%7C%20type_sub%20%3A%20TypeOp%20Op.Sub%20%5BREAL%2CREAL%5D%20REAL%0A%20%20%7C%20type_mult%20%3A%20TypeOp%20Op.Mult%20%5BREAL%2CREAL%5D%20REAL%0A%20%20%7C%20type_div%20%3A%20TypeOp%20Op.Div%20%5BREAL%2CREAL%5D%20REAL%0A%20%20%7C%20type_and%20%3A%20TypeOp%20Op.And%20%5BBOOL%2CBOOL%5D%20BOOL%0A%20%20%7C%20type_or%20%3A%20TypeOp%20Op.Or%20%5BBOOL%2CBOOL%5D%20BOOL%0A%20%20%7C%20type_less%20%3A%20TypeOp%20Op.Less%20%5BREAL%2CREAL%5D%20BOOL%0A%20%20%7C%20type_leq%20%3A%20TypeOp%20Op.Leq%20%5BREAL%2CREAL%5D%20BOOL%0A%20%20%7C%20type_eq%20%3A%20TypeOp%20Op.Eq%20%5BREAL%2CREAL%5D%20BOOL%0Anotation%20%22%7C-Op%22%20e%20%22%3A%22%20t%20%22%3D%3E%22%20r%20%3D%3E%20TypeOp%20e%20t%20r%0A%0Ainductive%20TypeObs%20%3A%20ObsLabel%20-%3E%20Ty%20-%3E%20Prop%20%3A%3D%0A%20%20%7C%20type_obs_bool%20b%20%3A%20TypeObs%20(ObsLabel.LabelBool%20b)%20BOOL%0A%20%20%7C%20type_obs_real%20r%20%3A%20TypeObs%20(ObsLabel.LabelReal%20r)%20REAL%0Anotation%20%22%7C-O%22%20e%20%22%3A%22%20t%20%3D%3E%20TypeObs%20e%20t%0A%0Adef%20TyEnv%20%3A%3D%20List%20Ty%0A%0Ainductive%20TypeVar%20%3A%20TyEnv%20-%3E%20Var%20-%3E%20Ty%20-%3E%20Prop%20%3A%3D%0A%20%20%7C%20type_var_1%20t%20g%20%3A%20TypeVar%20(t%3A%3Ag)%20Var.V1%20t%0A%20%20%7C%20type_var_S%20g%20v%20t%20t'%20%3A%20TypeVar%20g%20v%20t%20-%3E%20TypeVar%20(t'%3A%3Ag)%20(Var.VS%20v)%20t%0Anotation%20g%20%22%7C-X%22%20v%20%22%3A%22%20t%20%3D%3E%20TypeVar%20g%20v%20t%0A%0Adef%20List.all2%20%7BA%20B%7D%20(P%20%3A%20A%20-%3E%20B%20-%3E%20Prop)%20%3A%20List%20A%20-%3E%20List%20B%20-%3E%20Prop%0A%20%20%7C%20%5B%5D%2C%20%5B%5D%20%3D%3E%20True%0A%20%20%7C%20a%3A%3Aas%2C%20b%3A%3Abs%20%3D%3E%20P%20a%20b%20%2F%5C%20List.all2%20P%20as%20bs%0A%20%20%7C%20_%2C%20_%20%3D%3E%20False%0A%0Ainductive%20TypeExp%20%3A%20TyEnv%20-%3E%20Exp%20-%3E%20Ty%20-%3E%20Prop%20%3A%3D%0A%20%20%7C%20type_op%20g%20op%20es%20ts%20(t%20%3A%20Ty)%20%3A%20(%7C-Op%20op%20%3A%20ts%20%3D%3E%20t)%20-%3E%20List.all2%20(TypeExp%20g)%20es%20ts%20-%3E%20TypeExp%20g%20(Exp.OpE%20op%20es)%20t%0A%20%20%7C%20type_obs%20(t%20%3A%20Ty)%20g%20o%20z%20%3A%20(%7C-O%20o%20%3A%20t)%20-%3E%20TypeExp%20g%20(Exp.Obs%20o%20z)%20t%0A%20%20%7C%20type_var%20t%20g%20v%20%3A%20(g%20%7C-X%20v%20%3A%20t)%20-%3E%20TypeExp%20g%20(Exp.VarE%20v)%20t%0A%20%20%7C%20type_acc%20n%20t%20g%20e1%20e2%20%3A%20((t%3A%3Ag)%20%7C-X%20Var.V1%20%3A%20t)%20-%3E%20TypeExp%20g%20e1%20t%20-%3E%20TypeExp%20g%20e2%20t%20-%3E%20TypeExp%20g%20(Exp.Acc%20e1%20n%20e2)%20t%0\">but here's the code</a>)</p>",
        "id": 428404149,
        "sender_full_name": "Quinn",
        "timestamp": 1711138938
    },
    {
        "content": "<p>\"minimal\" is an aspiration, any working example after deleting irrelevant stuff is good</p>",
        "id": 428404271,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711139002
    },
    {
        "content": "<p>rather, this: <a href=\"https://live.lean-lang.org/#code=variable%20%5BDecidable%20Asset%5D%20%7BAsset%20%3A%20Type%7D%0Avariable%20%5BDecidable%20Party%5D%20%7BParty%20%3A%20Type%7D%0A%0Ainductive%20Var%20%3A%20Type%20%3A%3D%0A%7C%20V1%0A%7C%20VS%20(v%20%3A%20Var)%0A%0Ainductive%20ObsLabel%20%3A%20Type%20%3A%3D%0A%7C%20LabelReal%20(o%20%3A%20String)%0A%7C%20LabelBool%20(o%20%3A%20String)%0A%0Ainductive%20Op%20%3A%20Type%20%3A%3D%0A%7C%20Add%0A%7C%20Sub%0A%7C%20Mult%0A%7C%20Div%0A%7C%20And%0A%7C%20Or%0A%7C%20Less%0A%7C%20Leq%0A%7C%20Eq%0A%7C%20Not%0A%7C%20Neg%0A%7C%20BLiteral%20(b%20%3A%20Bool)%0A%7C%20RLiteral%20(r%20%3A%20Int)%0A%7C%20Cond%0A%0Ainductive%20Exp%20%3A%20Type%20%3A%3D%0A%7C%20OpE%20(op%3A%20Op)%20(args%20%3A%20List%20Exp)%20%3A%20Exp%0A%7C%20Obs%20(l%20%3A%20ObsLabel)%20(i%20%3A%20Int)%20%3A%20Exp%0A%7C%20VarE%20(v%20%3A%20Var)%20%3A%20Exp%0A%7C%20Acc%20(f%20%3A%20Exp)%20(d%20%3A%20Nat)%20(e%20%3A%20Exp)%20%3A%20Exp%0A%0Ainductive%20Contract%20%3A%20Type%20%3A%3D%0A%7C%20Zero%20%3A%20Contract%0A%7C%20Let%20%3A%20Exp%20-%3E%20Contract%20-%3E%20Contract%0A%7C%20Transfer%20%3A%20Party%20-%3E%20Party%20-%3E%20Asset%20-%3E%20Contract%0A%7C%20Scale%20%3A%20Exp%20-%3E%20Contract%20-%3E%20Contract%0A%7C%20Both%20%3A%20Contract%20-%3E%20Contract%20-%3E%20Contract%0A%7C%20If%20%3A%20Exp%20-%3E%20Contract%20-%3E%20Contract%20-%3E%20Contract%0A%0Ainductive%20Ty%20%3A%20Type%20%3A%3D%0A%20%20%7C%20REAL%0A%20%20%7C%20BOOL%0A%0Ainductive%20TypeOp%20%3A%20Op%20-%3E%20List%20Ty%20-%3E%20Ty%20-%3E%20Prop%20%3A%3D%0A%20%20%7C%20type_blit%20b%20%3A%20TypeOp%20(Op.BLiteral%20b)%20%5B%5D%20BOOL%0A%20%20%7C%20type_rlit%20r%20%3A%20TypeOp%20(Op.RLiteral%20r)%20%5B%5D%20REAL%0A%20%20%7C%20type_neg%20%3A%20TypeOp%20Op.Neg%20%5BREAL%5D%20REAL%0A%20%20%7C%20type_not%20%3A%20TypeOp%20Op.Not%20%5BBOOL%5D%20BOOL%0A%20%20%7C%20type_cond%20t%20%3A%20TypeOp%20Op.Cond%20%5BBOOL%2Ct%2Ct%5D%20t%0A%20%20%7C%20type_add%20%3A%20TypeOp%20Op.Add%20%5BREAL%2CREAL%5D%20REAL%0A%20%20%7C%20type_sub%20%3A%20TypeOp%20Op.Sub%20%5BREAL%2CREAL%5D%20REAL%0A%20%20%7C%20type_mult%20%3A%20TypeOp%20Op.Mult%20%5BREAL%2CREAL%5D%20REAL%0A%20%20%7C%20type_div%20%3A%20TypeOp%20Op.Div%20%5BREAL%2CREAL%5D%20REAL%0A%20%20%7C%20type_and%20%3A%20TypeOp%20Op.And%20%5BBOOL%2CBOOL%5D%20BOOL%0A%20%20%7C%20type_or%20%3A%20TypeOp%20Op.Or%20%5BBOOL%2CBOOL%5D%20BOOL%0A%20%20%7C%20type_less%20%3A%20TypeOp%20Op.Less%20%5BREAL%2CREAL%5D%20BOOL%0A%20%20%7C%20type_leq%20%3A%20TypeOp%20Op.Leq%20%5BREAL%2CREAL%5D%20BOOL%0A%20%20%7C%20type_eq%20%3A%20TypeOp%20Op.Eq%20%5BREAL%2CREAL%5D%20BOOL%0Anotation%20%22%7C-Op%22%20e%20%22%3A%22%20t%20%22%3D%3E%22%20r%20%3D%3E%20TypeOp%20e%20t%20r%0A%0Ainductive%20TypeObs%20%3A%20ObsLabel%20-%3E%20Ty%20-%3E%20Prop%20%3A%3D%0A%20%20%7C%20type_obs_bool%20b%20%3A%20TypeObs%20(ObsLabel.LabelBool%20b)%20BOOL%0A%20%20%7C%20type_obs_real%20r%20%3A%20TypeObs%20(ObsLabel.LabelReal%20r)%20REAL%0Anotation%20%22%7C-O%22%20e%20%22%3A%22%20t%20%3D%3E%20TypeObs%20e%20t%0A%0Adef%20TyEnv%20%3A%3D%20List%20Ty%0A%0Ainductive%20TypeVar%20%3A%20TyEnv%20-%3E%20Var%20-%3E%20Ty%20-%3E%20Prop%20%3A%3D%0A%20%20%7C%20type_var_1%20t%20g%20%3A%20TypeVar%20(t%3A%3Ag)%20Var.V1%20t%0A%20%20%7C%20type_var_S%20g%20v%20t%20t'%20%3A%20TypeVar%20g%20v%20t%20-%3E%20TypeVar%20(t'%3A%3Ag)%20(Var.VS%20v)%20t%0Anotation%20g%20%22%7C-X%22%20v%20%22%3A%22%20t%20%3D%3E%20TypeVar%20g%20v%20t%0A%0Adef%20List.all2%20%7BA%20B%7D%20(P%20%3A%20A%20-%3E%20B%20-%3E%20Prop)%20%3A%20List%20A%20-%3E%20List%20B%20-%3E%20Prop%0A%20%20%7C%20%5B%5D%2C%20%5B%5D%20%3D%3E%20True%0A%20%20%7C%20a%3A%3Aas%2C%20b%3A%3Abs%20%3D%3E%20P%20a%20b%20%2F%5C%20List.all2%20P%20as%20bs%0A%20%20%7C%20_%2C%20_%20%3D%3E%20False%0A%0Ainductive%20TypeExp%20%3A%20TyEnv%20-%3E%20Exp%20-%3E%20Ty%20-%3E%20Prop%20%3A%3D%0A%20%20%7C%20type_op%20g%20op%20es%20ts%20(t%20%3A%20Ty)%20%3A%20(%7C-Op%20op%20%3A%20ts%20%3D%3E%20t)%20-%3E%20List.all2%20(TypeExp%20g)%20es%20ts%20-%3E%20TypeExp%20g%20(Exp.OpE%20op%20es)%20t%0A%20%20%7C%20type_obs%20(t%20%3A%20Ty)%20g%20o%20z%20%3A%20(%7C-O%20o%20%3A%20t)%20-%3E%20TypeExp%20g%20(Exp.Obs%20o%20z)%20t%0A%20%20%7C%20type_var%20t%20g%20v%20%3A%20(g%20%7C-X%20v%20%3A%20t)%20-%3E%20TypeExp%20g%20(Exp.VarE%20v)%20t%0A%20%20%7C%20type_acc%20n%20t%20g%20e1%20e2%20%3A%20((t%3A%3Ag)%20%7C-X%20Var.V1%20%3A%20t)%20-%3E%20TypeExp%20g%20e1%20t%20-%3E%20TypeExp%20g%20e2%20t%20-%3E%20TypeExp%20g%20(Exp.Acc%20e1%20n%20e2)%20t%0A\">https://live.lean-lang.org/#code=variable%20%5BDecidable%20Asset%5D%20%7BAsset%20%3A%20Type%7D%0Avariable%20%5BDecidable%20Party%5D%20%7BParty%20%3A%20Type%7D%0A%0Ainductive%20Var%20%3A%20Type%20%3A%3D%0A%7C%20V1%0A%7C%20VS%20(v%20%3A%20Var)%0A%0Ainductive%20ObsLabel%20%3A%20Type%20%3A%3D%0A%7C%20LabelReal%20(o%20%3A%20String)%0A%7C%20LabelBool%20(o%20%3A%20String)%0A%0Ainductive%20Op%20%3A%20Type%20%3A%3D%0A%7C%20Add%0A%7C%20Sub%0A%7C%20Mult%0A%7C%20Div%0A%7C%20And%0A%7C%20Or%0A%7C%20Less%0A%7C%20Leq%0A%7C%20Eq%0A%7C%20Not%0A%7C%20Neg%0A%7C%20BLiteral%20(b%20%3A%20Bool)%0A%7C%20RLiteral%20(r%20%3A%20Int)%0A%7C%20Cond%0A%0Ainductive%20Exp%20%3A%20Type%20%3A%3D%0A%7C%20OpE%20(op%3A%20Op)%20(args%20%3A%20List%20Exp)%20%3A%20Exp%0A%7C%20Obs%20(l%20%3A%20ObsLabel)%20(i%20%3A%20Int)%20%3A%20Exp%0A%7C%20VarE%20(v%20%3A%20Var)%20%3A%20Exp%0A%7C%20Acc%20(f%20%3A%20Exp)%20(d%20%3A%20Nat)%20(e%20%3A%20Exp)%20%3A%20Exp%0A%0Ainductive%20Contract%20%3A%20Type%20%3A%3D%0A%7C%20Zero%20%3A%20Contract%0A%7C%20Let%20%3A%20Exp%20-%3E%20Contract%20-%3E%20Contract%0A%7C%20Transfer%20%3A%20Party%20-%3E%20Party%20-%3E%20Asset%20-%3E%20Contract%0A%7C%20Scale%20%3A%20Exp%20-%3E%20Contract%20-%3E%20Contract%0A%7C%20Both%20%3A%20Contract%20-%3E%20Contract%20-%3E%20Contract%0A%7C%20If%20%3A%20Exp%20-%3E%20Contract%20-%3E%20Contract%20-%3E%20Contract%0A%0Ainductive%20Ty%20%3A%20Type%20%3A%3D%0A%20%20%7C%20REAL%0A%20%20%7C%20BOOL%0A%0Ainductive%20TypeOp%20%3A%20Op%20-%3E%20List%20Ty%20-%3E%20Ty%20-%3E%20Prop%20%3A%3D%0A%20%20%7C%20type_blit%20b%20%3A%20TypeOp%20(Op.BLiteral%20b)%20%5B%5D%20BOOL%0A%20%20%7C%20type_rlit%20r%20%3A%20TypeOp%20(Op.RLiteral%20r)%20%5B%5D%20REAL%0A%20%20%7C%20type_neg%20%3A%20TypeOp%20Op.Neg%20%5BREAL%5D%20REAL%0A%20%20%7C%20type_not%20%3A%20TypeOp%20Op.Not%20%5BBOOL%5D%20BOOL%0A%20%20%7C%20type_cond%20t%20%3A%20TypeOp%20Op.Cond%20%5BBOOL%2Ct%2Ct%5D%20t%0A%20%20%7C%20type_add%20%3A%20TypeOp%20Op.Add%20%5BREAL%2CREAL%5D%20REAL%0A%20%20%7C%20type_sub%20%3A%20TypeOp%20Op.Sub%20%5BREAL%2CREAL%5D%20REAL%0A%20%20%7C%20type_mult%20%3A%20TypeOp%20Op.Mult%20%5BREAL%2CREAL%5D%20REAL%0A%20%20%7C%20type_div%20%3A%20TypeOp%20Op.Div%20%5BREAL%2CREAL%5D%20REAL%0A%20%20%7C%20type_and%20%3A%20TypeOp%20Op.And%20%5BBOOL%2CBOOL%5D%20BOOL%0A%20%20%7C%20type_or%20%3A%20TypeOp%20Op.Or%20%5BBOOL%2CBOOL%5D%20BOOL%0A%20%20%7C%20type_less%20%3A%20TypeOp%20Op.Less%20%5BREAL%2CREAL%5D%20BOOL%0A%20%20%7C%20type_leq%20%3A%20TypeOp%20Op.Leq%20%5BREAL%2CREAL%5D%20BOOL%0A%20%20%7C%20type_eq%20%3A%20TypeOp%20Op.Eq%20%5BREAL%2CREAL%5D%20BOOL%0Anotation%20%22%7C-Op%22%20e%20%22%3A%22%20t%20%22%3D%3E%22%20r%20%3D%3E%20TypeOp%20e%20t%20r%0A%0Ainductive%20TypeObs%20%3A%20ObsLabel%20-%3E%20Ty%20-%3E%20Prop%20%3A%3D%0A%20%20%7C%20type_obs_bool%20b%20%3A%20TypeObs%20(ObsLabel.LabelBool%20b)%20BOOL%0A%20%20%7C%20type_obs_real%20r%20%3A%20TypeObs%20(ObsLabel.LabelReal%20r)%20REAL%0Anotation%20%22%7C-O%22%20e%20%22%3A%22%20t%20%3D%3E%20TypeObs%20e%20t%0A%0Adef%20TyEnv%20%3A%3D%20List%20Ty%0A%0Ainductive%20TypeVar%20%3A%20TyEnv%20-%3E%20Var%20-%3E%20Ty%20-%3E%20Prop%20%3A%3D%0A%20%20%7C%20type_var_1%20t%20g%20%3A%20TypeVar%20(t%3A%3Ag)%20Var.V1%20t%0A%20%20%7C%20type_var_S%20g%20v%20t%20t'%20%3A%20TypeVar%20g%20v%20t%20-%3E%20TypeVar%20(t'%3A%3Ag)%20(Var.VS%20v)%20t%0Anotation%20g%20%22%7C-X%22%20v%20%22%3A%22%20t%20%3D%3E%20TypeVar%20g%20v%20t%0A%0Adef%20List.all2%20%7BA%20B%7D%20(P%20%3A%20A%20-%3E%20B%20-%3E%20Prop)%20%3A%20List%20A%20-%3E%20List%20B%20-%3E%20Prop%0A%20%20%7C%20%5B%5D%2C%20%5B%5D%20%3D%3E%20True%0A%20%20%7C%20a%3A%3Aas%2C%20b%3A%3Abs%20%3D%3E%20P%20a%20b%20%2F%5C%20List.all2%20P%20as%20bs%0A%20%20%7C%20_%2C%20_%20%3D%3E%20False%0A%0Ainductive%20TypeExp%20%3A%20TyEnv%20-%3E%20Exp%20-%3E%20Ty%20-%3E%20Prop%20%3A%3D%0A%20%20%7C%20type_op%20g%20op%20es%20ts%20(t%20%3A%20Ty)%20%3A%20(%7C-Op%20op%20%3A%20ts%20%3D%3E%20t)%20-%3E%20List.all2%20(TypeExp%20g)%20es%20ts%20-%3E%20TypeExp%20g%20(Exp.OpE%20op%20es)%20t%0A%20%20%7C%20type_obs%20(t%20%3A%20Ty)%20g%20o%20z%20%3A%20(%7C-O%20o%20%3A%20t)%20-%3E%20TypeExp%20g%20(Exp.Obs%20o%20z)%20t%0A%20%20%7C%20type_var%20t%20g%20v%20%3A%20(g%20%7C-X%20v%20%3A%20t)%20-%3E%20TypeExp%20g%20(Exp.VarE%20v)%20t%0A%20%20%7C%20type_acc%20n%20t%20g%20e1%20e2%20%3A%20((t%3A%3Ag)%20%7C-X%20Var.V1%20%3A%20t)%20-%3E%20TypeExp%20g%20e1%20t%20-%3E%20TypeExp%20g%20e2%20t%20-%3E%20TypeExp%20g%20(Exp.Acc%20e1%20n%20e2)%20t%0A</a></p>",
        "id": 428404274,
        "sender_full_name": "Quinn",
        "timestamp": 1711139004
    },
    {
        "content": "<p>Zulip hint: <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 428404305,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711139019
    },
    {
        "content": "<p>Code blocks with backticks also give a link to the live editor, and even better you can see the code right here</p>",
        "id": 428404339,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711139041
    },
    {
        "content": "<p>didn't know that about the link to the live editor!</p>",
        "id": 428404399,
        "sender_full_name": "Quinn",
        "timestamp": 1711139052
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">Asset</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Asset</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">Party</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Party</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Var</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">V1</span>\n<span class=\"bp\">|</span> <span class=\"n\">VS</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Var</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ObsLabel</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">LabelReal</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">LabelBool</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Op</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">Add</span>\n<span class=\"bp\">|</span> <span class=\"n\">Sub</span>\n<span class=\"bp\">|</span> <span class=\"n\">Mult</span>\n<span class=\"bp\">|</span> <span class=\"n\">Div</span>\n<span class=\"bp\">|</span> <span class=\"n\">And</span>\n<span class=\"bp\">|</span> <span class=\"n\">Or</span>\n<span class=\"bp\">|</span> <span class=\"n\">Less</span>\n<span class=\"bp\">|</span> <span class=\"n\">Leq</span>\n<span class=\"bp\">|</span> <span class=\"n\">Eq</span>\n<span class=\"bp\">|</span> <span class=\"n\">Not</span>\n<span class=\"bp\">|</span> <span class=\"n\">Neg</span>\n<span class=\"bp\">|</span> <span class=\"n\">BLiteral</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">RLiteral</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Cond</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Exp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">OpE</span> <span class=\"o\">(</span><span class=\"n\">op</span><span class=\"o\">:</span> <span class=\"n\">Op</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">Obs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ObsLabel</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">VarE</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Var</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">Acc</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Contract</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">Zero</span> <span class=\"o\">:</span> <span class=\"n\">Contract</span>\n<span class=\"bp\">|</span> <span class=\"n\">Let</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Contract</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Contract</span>\n<span class=\"bp\">|</span> <span class=\"n\">Transfer</span> <span class=\"o\">:</span> <span class=\"n\">Party</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Party</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Asset</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Contract</span>\n<span class=\"bp\">|</span> <span class=\"n\">Scale</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Contract</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Contract</span>\n<span class=\"bp\">|</span> <span class=\"n\">Both</span> <span class=\"o\">:</span> <span class=\"n\">Contract</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Contract</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Contract</span>\n<span class=\"bp\">|</span> <span class=\"n\">If</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Contract</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Contract</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Contract</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">REAL</span>\n  <span class=\"bp\">|</span> <span class=\"n\">BOOL</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">TypeOp</span> <span class=\"o\">:</span> <span class=\"n\">Op</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_blit</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">TypeOp</span> <span class=\"o\">(</span><span class=\"n\">Op.BLiteral</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"n\">BOOL</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_rlit</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">TypeOp</span> <span class=\"o\">(</span><span class=\"n\">Op.RLiteral</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"n\">REAL</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_neg</span> <span class=\"o\">:</span> <span class=\"n\">TypeOp</span> <span class=\"n\">Op.Neg</span> <span class=\"o\">[</span><span class=\"n\">REAL</span><span class=\"o\">]</span> <span class=\"n\">REAL</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_not</span> <span class=\"o\">:</span> <span class=\"n\">TypeOp</span> <span class=\"n\">Op.Not</span> <span class=\"o\">[</span><span class=\"n\">BOOL</span><span class=\"o\">]</span> <span class=\"n\">BOOL</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_cond</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">TypeOp</span> <span class=\"n\">Op.Cond</span> <span class=\"o\">[</span><span class=\"n\">BOOL</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_add</span> <span class=\"o\">:</span> <span class=\"n\">TypeOp</span> <span class=\"n\">Op.Add</span> <span class=\"o\">[</span><span class=\"n\">REAL</span><span class=\"o\">,</span><span class=\"n\">REAL</span><span class=\"o\">]</span> <span class=\"n\">REAL</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_sub</span> <span class=\"o\">:</span> <span class=\"n\">TypeOp</span> <span class=\"n\">Op.Sub</span> <span class=\"o\">[</span><span class=\"n\">REAL</span><span class=\"o\">,</span><span class=\"n\">REAL</span><span class=\"o\">]</span> <span class=\"n\">REAL</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_mult</span> <span class=\"o\">:</span> <span class=\"n\">TypeOp</span> <span class=\"n\">Op.Mult</span> <span class=\"o\">[</span><span class=\"n\">REAL</span><span class=\"o\">,</span><span class=\"n\">REAL</span><span class=\"o\">]</span> <span class=\"n\">REAL</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_div</span> <span class=\"o\">:</span> <span class=\"n\">TypeOp</span> <span class=\"n\">Op.Div</span> <span class=\"o\">[</span><span class=\"n\">REAL</span><span class=\"o\">,</span><span class=\"n\">REAL</span><span class=\"o\">]</span> <span class=\"n\">REAL</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_and</span> <span class=\"o\">:</span> <span class=\"n\">TypeOp</span> <span class=\"n\">Op.And</span> <span class=\"o\">[</span><span class=\"n\">BOOL</span><span class=\"o\">,</span><span class=\"n\">BOOL</span><span class=\"o\">]</span> <span class=\"n\">BOOL</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_or</span> <span class=\"o\">:</span> <span class=\"n\">TypeOp</span> <span class=\"n\">Op.Or</span> <span class=\"o\">[</span><span class=\"n\">BOOL</span><span class=\"o\">,</span><span class=\"n\">BOOL</span><span class=\"o\">]</span> <span class=\"n\">BOOL</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_less</span> <span class=\"o\">:</span> <span class=\"n\">TypeOp</span> <span class=\"n\">Op.Less</span> <span class=\"o\">[</span><span class=\"n\">REAL</span><span class=\"o\">,</span><span class=\"n\">REAL</span><span class=\"o\">]</span> <span class=\"n\">BOOL</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_leq</span> <span class=\"o\">:</span> <span class=\"n\">TypeOp</span> <span class=\"n\">Op.Leq</span> <span class=\"o\">[</span><span class=\"n\">REAL</span><span class=\"o\">,</span><span class=\"n\">REAL</span><span class=\"o\">]</span> <span class=\"n\">BOOL</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_eq</span> <span class=\"o\">:</span> <span class=\"n\">TypeOp</span> <span class=\"n\">Op.Eq</span> <span class=\"o\">[</span><span class=\"n\">REAL</span><span class=\"o\">,</span><span class=\"n\">REAL</span><span class=\"o\">]</span> <span class=\"n\">BOOL</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"|-Op\"</span> <span class=\"n\">e</span> <span class=\"s2\">\":\"</span> <span class=\"n\">t</span> <span class=\"s2\">\"=&gt;\"</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TypeOp</span> <span class=\"n\">e</span> <span class=\"n\">t</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">TypeObs</span> <span class=\"o\">:</span> <span class=\"n\">ObsLabel</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_obs_bool</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">TypeObs</span> <span class=\"o\">(</span><span class=\"n\">ObsLabel.LabelBool</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">BOOL</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_obs_real</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">TypeObs</span> <span class=\"o\">(</span><span class=\"n\">ObsLabel.LabelReal</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">REAL</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"|-O\"</span> <span class=\"n\">e</span> <span class=\"s2\">\":\"</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TypeObs</span> <span class=\"n\">e</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TyEnv</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">TypeVar</span> <span class=\"o\">:</span> <span class=\"n\">TyEnv</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Var</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_var_1</span> <span class=\"n\">t</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">TypeVar</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">::</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">Var.V1</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_var_S</span> <span class=\"n\">g</span> <span class=\"n\">v</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">TypeVar</span> <span class=\"n\">g</span> <span class=\"n\">v</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">TypeVar</span> <span class=\"o\">(</span><span class=\"n\">t'</span><span class=\"o\">::</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Var.VS</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n<span class=\"kd\">notation</span> <span class=\"n\">g</span> <span class=\"s2\">\"|-X\"</span> <span class=\"n\">v</span> <span class=\"s2\">\":\"</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TypeVar</span> <span class=\"n\">g</span> <span class=\"n\">v</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.all2</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">/\\</span> <span class=\"n\">List.all2</span> <span class=\"n\">P</span> <span class=\"n\">as</span> <span class=\"n\">bs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">TypeExp</span> <span class=\"o\">:</span> <span class=\"n\">TyEnv</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_op</span> <span class=\"n\">g</span> <span class=\"n\">op</span> <span class=\"n\">es</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">|-</span><span class=\"n\">Op</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">ts</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List.all2</span> <span class=\"o\">(</span><span class=\"n\">TypeExp</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">es</span> <span class=\"n\">ts</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">TypeExp</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Exp.OpE</span> <span class=\"n\">op</span> <span class=\"n\">es</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_obs</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"n\">o</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">|-</span><span class=\"n\">O</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">TypeExp</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Exp.Obs</span> <span class=\"n\">o</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_var</span> <span class=\"n\">t</span> <span class=\"n\">g</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">|-</span><span class=\"n\">X</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">TypeExp</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Exp.VarE</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_acc</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">g</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">t</span><span class=\"o\">::</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">|-</span><span class=\"n\">X</span> <span class=\"n\">Var.V1</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">TypeExp</span> <span class=\"n\">g</span> <span class=\"n\">e1</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">TypeExp</span> <span class=\"n\">g</span> <span class=\"n\">e2</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">TypeExp</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Exp.Acc</span> <span class=\"n\">e1</span> <span class=\"n\">n</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 428404417,
        "sender_full_name": "Quinn",
        "timestamp": 1711139064
    },
    {
        "content": "<p>i'm not sure what's irrelevant, cuz it's cumulative</p>",
        "id": 428404438,
        "sender_full_name": "Quinn",
        "timestamp": 1711139077
    },
    {
        "content": "<p>(check out the two icons in the upper right corner of the code block. \"Lean 4 Playground\" goes to the online editor)</p>",
        "id": 428404450,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711139081
    },
    {
        "content": "<p>it's <code>TypeExp</code> that has the bug, which uses everything that came before.</p>",
        "id": 428404463,
        "sender_full_name": "Quinn",
        "timestamp": 1711139089
    },
    {
        "content": "<p><code>arg #7 of 'TypeExp.type_op'</code> in the error is referring to the hypothesis <code>List.all2 (TypeExp g) es ts</code></p>",
        "id": 428404789,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711139258
    },
    {
        "content": "<p>oh. I find that confusing</p>",
        "id": 428404844,
        "sender_full_name": "Quinn",
        "timestamp": 1711139281
    },
    {
        "content": "<p>nvm. I thought about it more---- premises after the <code>:</code> are equivalent to arguments, in inductive constructors.</p>",
        "id": 428404944,
        "sender_full_name": "Quinn",
        "timestamp": 1711139310
    },
    {
        "content": "<p>Thank you</p>",
        "id": 428405367,
        "sender_full_name": "Quinn",
        "timestamp": 1711139506
    },
    {
        "content": "<p>i'm noticing i'm allowed to treat a partially applied type as the function that gets passed into all2. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">List.all2</span> <span class=\"o\">(</span><span class=\"n\">TypeVar</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Var.V1</span><span class=\"o\">,</span> <span class=\"n\">Var.VS</span> <span class=\"n\">Var.V1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ty.REAL</span><span class=\"o\">,</span> <span class=\"n\">Ty.REAL</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(valid Prop), but maybe it doesn't want me to do so in an input to a constructor</p>",
        "id": 428405494,
        "sender_full_name": "Quinn",
        "timestamp": 1711139565
    },
    {
        "content": "<p>Yes, constructors are limited in the kinds of positions you can have the type under definition appearing</p>",
        "id": 428405764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711139713
    },
    {
        "content": "<p>Here is a possible alternative</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">TypeExp</span> <span class=\"o\">:</span> <span class=\"n\">TyEnv</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_op</span> <span class=\"n\">g</span> <span class=\"n\">op</span> <span class=\"n\">es</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">|-</span><span class=\"n\">Op</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">ts</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">List.zip</span> <span class=\"n\">es</span> <span class=\"n\">ts</span><span class=\"o\">,</span> <span class=\"n\">TypeExp</span> <span class=\"n\">g</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">TypeExp</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Exp.OpE</span> <span class=\"n\">op</span> <span class=\"n\">es</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_obs</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"n\">o</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">|-</span><span class=\"n\">O</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">TypeExp</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Exp.Obs</span> <span class=\"n\">o</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_var</span> <span class=\"n\">t</span> <span class=\"n\">g</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">|-</span><span class=\"n\">X</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">TypeExp</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Exp.VarE</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type_acc</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">g</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">t</span><span class=\"o\">::</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">|-</span><span class=\"n\">X</span> <span class=\"n\">Var.V1</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">TypeExp</span> <span class=\"n\">g</span> <span class=\"n\">e1</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">TypeExp</span> <span class=\"n\">g</span> <span class=\"n\">e2</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">TypeExp</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Exp.Acc</span> <span class=\"n\">e1</span> <span class=\"n\">n</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 428405813,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711139745
    },
    {
        "content": "<p>if you use <code>zip</code> you will want to say the lengths are equal on the side</p>",
        "id": 428405893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711139775
    },
    {
        "content": "<p>but this will indeed work as an alternative</p>",
        "id": 428405919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711139790
    },
    {
        "content": "<blockquote>\n<p>Yes, constructors are limited in the kinds of positions you can have the type under definition appearing</p>\n</blockquote>\n<p>is this different from coq? I remember about strictly positive occurrences but i didn't think that meant I can't have a conjunction</p>",
        "id": 428405980,
        "sender_full_name": "Quinn",
        "timestamp": 1711139821
    },
    {
        "content": "<p>the fundamental rules are not different, but Coq is <em>significantly</em> more aggressive about recursing into definitions and other inductives to justify that the use of the type under definition is positive</p>",
        "id": 428406071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711139873
    },
    {
        "content": "<p>I see! So can I mark my <code>List.all2</code> function as \"unfold this at the slightest provocation\"?</p>",
        "id": 428406219,
        "sender_full_name": "Quinn",
        "timestamp": 1711139934
    },
    {
        "content": "<p>with lean it's a much more syntactic check: it has to be at the end of a <code>forall</code> expression (as in Timo's code) and cannot be as an argument to other functions</p>",
        "id": 428406244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711139949
    },
    {
        "content": "<p>that won't work here because you can't unfold <code>all2</code> in this position</p>",
        "id": 428406257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711139963
    },
    {
        "content": "<p>You can define this as a mutual inductive type, this is the closest thing to what lean would do with your definition if it was smart enough</p>",
        "id": 428406327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711140000
    },
    {
        "content": "<p>That makes sense!</p>",
        "id": 428406398,
        "sender_full_name": "Quinn",
        "timestamp": 1711140019
    },
    {
        "content": "<p>BTW your variable declarations are backwards:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">Asset</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Asset</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">Party</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Party</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 428406710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711140176
    },
    {
        "content": "<p>side question: what's going on wiht <code>forall item \\in xs</code> for list xs? I'm not familiar with that, and neither is my lean4 session. I had to do <code>forall p, p \\in List.zip es ts -&gt; TypeExp g p.1 p.2</code> instead</p>",
        "id": 428407145,
        "sender_full_name": "Quinn",
        "timestamp": 1711140387
    },
    {
        "content": "<p>it's syntax sugar for exactly what you wrote. I believe it was moved from <code>Std</code> to <code>Init</code> in a recent version of Lean, so you might need to <code>import Std</code> to get the notation</p>",
        "id": 428407386,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711140507
    },
    {
        "content": "<blockquote>\n<p>variable [Decidable Asset] {Asset : Type}</p>\n</blockquote>\n<p>what's the correct way?</p>",
        "id": 428407417,
        "sender_full_name": "Quinn",
        "timestamp": 1711140530
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Asset</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">Asset</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 428407458,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711140550
    },
    {
        "content": "<p>Huh. flipping it that way gives me </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Messages</span> <span class=\"n\">here</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">35</span><span class=\"o\">:</span>\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Decidable</span> <span class=\"n\">Asset</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Asset</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 428407618,
        "sender_full_name": "Quinn",
        "timestamp": 1711140625
    },
    {
        "content": "<p>that's because types can't be <code>Decidable</code></p>",
        "id": 428407646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711140644
    },
    {
        "content": "<p>maybe you meant <code>DecidableEq</code>?</p>",
        "id": 428407660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711140654
    },
    {
        "content": "<p>ah--- yeah that's what I wanted</p>",
        "id": 428407692,
        "sender_full_name": "Quinn",
        "timestamp": 1711140666
    },
    {
        "content": "<p>in your version you were referencing <code>Asset</code> before declaring it and so it was getting inserted as an auto-implicit variable of type <code>Prop</code>. Then you additionally declared a second variable <code>Asset : Type</code></p>",
        "id": 428407699,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711140670
    },
    {
        "content": "<p>I really only need equality to be decidable</p>",
        "id": 428407722,
        "sender_full_name": "Quinn",
        "timestamp": 1711140684
    },
    {
        "content": "<p>oh that's confusing! so there can be shadowed implicits</p>",
        "id": 428407759,
        "sender_full_name": "Quinn",
        "timestamp": 1711140704
    },
    {
        "content": "<p>I often add <code>set_option autoImplicit false</code> to the top of my files to avoid these accidents</p>",
        "id": 428407853,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711140734
    },
    {
        "content": "<p>this is great. thanks everyone! getting up to speed fast</p>",
        "id": 428408164,
        "sender_full_name": "Quinn",
        "timestamp": 1711140902
    },
    {
        "content": "<p>or in the lakefile</p>",
        "id": 428408172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711140904
    }
]