[
    {
        "content": "<p>Admittedly not the most important question, but suppose I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">stuff</span><span class=\"o\">]</span>\n<span class=\"bp\">·</span>   <span class=\"c1\">-- actual main stuff</span>\n\n<span class=\"c1\">-- 2 bullet points of silly checks, solvable by something like:</span>\n<span class=\"bp\">·</span>  <span class=\"n\">tac₁</span> <span class=\"bp\">;</span>  <span class=\"n\">tac₂</span>\n<span class=\"bp\">·</span>  <span class=\"n\">tac₁</span> <span class=\"bp\">;</span>  <span class=\"n\">tac₂</span>\n</code></pre></div>\n<p>is this actually preferable to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">stuff</span><span class=\"o\">]</span>\n<span class=\"n\">any_goals</span> <span class=\"o\">(</span><span class=\"n\">tac₁</span> <span class=\"bp\">;</span>  <span class=\"n\">tac₂</span><span class=\"o\">)</span>\n<span class=\"c1\">-- actual main stuff</span>\n</code></pre></div>\n<p>? <br>\nAlso, what is the preference vs <code>&lt;;&gt;</code> and <code>all_goals</code> (and I guess <code>&lt;;&gt; try ( )</code> vs <code>any_goals</code>)?</p>",
        "id": 437160562,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1714940567
    },
    {
        "content": "<p>The style is to write in a way where if any assumptions about what goals <code>stuff</code> produces changes, then you can read the tactic script and figure out what the intended proof structure was and repair it.</p>",
        "id": 437160728,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714940737
    },
    {
        "content": "<p><code>any_goals</code> isn't good because it's not saying \"this should close the goal\"</p>\n<p>It's also questionable because it's not clear whether it should apply to goals that were already there before <code>rw</code></p>",
        "id": 437160825,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714940817
    },
    {
        "content": "<p><code>rw [stuff] &lt;;&gt; try · tac₁ ;  tac₂</code> (or <code>rw [stuff] &lt;;&gt; try tac₁; tac₂; done</code>) is fairly robust</p>",
        "id": 437160877,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714940852
    },
    {
        "content": "<p>Or there's trying to make sure the case names are good and doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">stuff</span><span class=\"o\">]</span>\n<span class=\"n\">case</span> <span class=\"n\">name1</span> <span class=\"bp\">|</span> <span class=\"n\">name2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tac₁</span><span class=\"bp\">;</span> <span class=\"n\">tac₂</span>\n<span class=\"bp\">...</span> <span class=\"n\">main</span> <span class=\"n\">stuff</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 437160970,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714940949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Styling.3A.20tactic.20combinators.20vs.20.28few.29.20bullet.20points/near/437160877\">said</a>:</p>\n<blockquote>\n<p><code>rw [stuff] &lt;;&gt; try · tac₁ ;  tac₂</code> (or <code>rw [stuff] &lt;;&gt; try tac₁; tac₂; done</code>) is fairly robust</p>\n</blockquote>\n<p>Ahh, the point about giving information that the goal should be closed is quite convincing, and I like the option with <code>done</code>. Thank you!</p>",
        "id": 437160985,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1714940978
    },
    {
        "content": "<p>There's also using the version of <code>case</code> in std where you can specify the types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">stuff</span><span class=\"o\">]</span>\n<span class=\"n\">case</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tac₁</span><span class=\"bp\">;</span> <span class=\"n\">tac₂</span>\n<span class=\"bp\">...</span> <span class=\"n\">main</span> <span class=\"n\">stuff</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 437161037,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714941008
    },
    {
        "content": "<p>I wish rw would put the side goals first, so that you can return to the main stuff later. Or even better, explicit syntax for it as discussed in <a href=\"#narrow/stream/287929-mathlib4/topic/linting.20against.20.22multi-goal.20proofs.22/near/434777231\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/linting.20against.20.22multi-goal.20proofs.22/near/434777231</a> with more <a href=\"#narrow/stream/287929-mathlib4/topic/.60on_sides.60.20tactic/near/434803235\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.60on_sides.60.20tactic/near/434803235</a></p>",
        "id": 437205726,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714979174
    }
]