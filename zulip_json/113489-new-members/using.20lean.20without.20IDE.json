[
    {
        "content": "<p>Hi, is it in principle possible to use lean without using one of the supported editors? My preference would be to create a proof in a text file, then run some commandline process to check if the proof is valid - I have a strong dislike of IDEs.</p>",
        "id": 434344757,
        "sender_full_name": "Hugo van der Sanden",
        "timestamp": 1713527075
    },
    {
        "content": "<p>You can use <code>lake build Path.To.Your.File</code> to build <code>Path/To/Your/File.lean</code> (after doing <code>lake new</code> to set up a project)</p>",
        "id": 434345381,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713527311
    },
    {
        "content": "<p>But there is a lot of information that is crucial to use Lean that is not present outside an IDE</p>",
        "id": 434345428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713527328
    },
    {
        "content": "<p>If your objection is to using VS Code, both Emacs and neovim are well-supported.</p>\n<p>(Edit: To be clear, I just mentioned Emacs and neovim because I think few people classify those as IDEs and maybe Lean documentation doesn't emphasize they're options too. You can certainly build an IDE-like environment on Emacs, but you can also dial it down as much as you like. I don't like IDEs either.)</p>",
        "id": 434345499,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1713527360
    },
    {
        "content": "<p>Thanks both; I'll have to see how far I get then. (I have never had an experience with any IDE that wasn't a bad one.)</p>",
        "id": 434345753,
        "sender_full_name": "Hugo van der Sanden",
        "timestamp": 1713527482
    },
    {
        "content": "<p>You may dislike IDEs, but you may dislike the experience of programming in Lean without synchronous access to the language server even harder</p>\n<p>I used to dislike IDEs, but Lean motivated me to adopt VS Code. And now I use VS Code to program in all languages that I use</p>\n<p>IMO, the live infoview is a <em>big plus</em> of the whole Lean experience</p>",
        "id": 434348012,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1713528343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"711279\">Hugo van der Sanden</span> <a href=\"#narrow/stream/113489-new-members/topic/using.20lean.20without.20IDE/near/434345753\">said</a>:</p>\n<blockquote>\n<p>I have never had an experience with any IDE that wasn't a bad one.</p>\n</blockquote>\n<p>1) You can type-check and/or compile Lean code from the command line. Though afaik, you won't see output for commands like <code>#check</code> or <code>#eval</code> without a process interacting with the language protocol. If you just want to check if a proof is valid though, you can do so with a simple text editor and a terminal.</p>\n<p>2) I've been finding that even though theorem proving in lean is done with a programming language, it isn't all that much like programming. If you're using Lean to develop proofs, I'd argue live access to proof state and type inference is invaluable in a way it simply isn't when writing programs. I think it has to do with the idea that everything you care about in a proof is statically available while a lot of what you care about in a program is available when the code is running. Theorem-provers can blur that line,  sure, but I think you'll be surprised.</p>\n<p>3) If you want to read a program in lean, you just read the code. If you want to read a math proof, you often step through the lines while looking at how the proof state changes. A lot of the logic isn't explicit in the text you read, it's in the context being carried forward. If you see a line that says something like \"Simplify the goal using these 3 theorems,\" you're probably considerably less interested in the instruction than what the resulting Goal looks like. In a sense this should change how you think about Lean while writing proofs. </p>\n<p>Good luck! :)</p>",
        "id": 434375402,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1713537160
    }
]