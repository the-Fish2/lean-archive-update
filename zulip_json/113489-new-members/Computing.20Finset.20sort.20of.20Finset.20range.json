[
    {
        "content": "<p>Hi, I would like to prove the result that Finset sort of Finset range is List.range. But I'm unsure how to start</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">finset_sorted_range</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≤</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">List.range</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Like do I have to use the mergesort definition. Or is there some theorem in Mathlib that two lists are the same if they are both sorted, nodup and have the same Finset?</p>",
        "id": 410343546,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1703798690
    },
    {
        "content": "<p>Weirdly enough, the lemma for <code>Finset.sort</code> is missing, but we do have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.mergeSort_eq_self#doc\">docs#List.mergeSort_eq_self</a></p>",
        "id": 410343825,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703798890
    },
    {
        "content": "<p>so am I stuck having to prove it from the definitions of mergesort?</p>",
        "id": 410344578,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1703799492
    },
    {
        "content": "<p>it's a bit confusing to me that there's no characterizations proven for Finset sort? How is it used in other places? do they prove things using mergesort definition?</p>",
        "id": 410344653,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1703799578
    },
    {
        "content": "<p>Maybe this helps break it down:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">List.Perm</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.eq_of_perm_of_sorted</span> <span class=\"n\">h</span> <span class=\"n\">hs</span> <span class=\"n\">ht</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">List.sorted_cons</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uu</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">List.Sorted</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">])</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">List.Sorted</span> <span class=\"n\">r</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Finset.sort_insert</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.sort</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.sort</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Finset.cons_eq_insert</span><span class=\"o\">]</span>\n  <span class=\"n\">swap</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span>\n  <span class=\"n\">apply</span> <span class=\"n\">bar</span>\n  <span class=\"n\">swap</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sort_sorted</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">swap</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hb</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">hb</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sort_sorted</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort_perm_toList</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">Finset.toList_cons</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.Perm.trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">List.perm_append_singleton</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.perm_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort_perm_toList</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finset_sorted_range</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≤</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">List.range</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Finset.range_succ</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.range_succ</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sort_insert</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">le_of_lt</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 410346731,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703801103
    },
    {
        "content": "<p>Also apparently missing: the reverse of a sorted list is sorted in the other direction</p>",
        "id": 410347389,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703801618
    },
    {
        "content": "<p>Ah thank you! right I forgot that List.eq_of_perm_of_sorted allows proofs to reduce to showing perm--which then can be done with Finset.sort_perm_toList. Will try to finish the proof from here and reply with the full code after.</p>",
        "id": 410355522,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1703805333
    },
    {
        "content": "<p>Below is a completed file</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTrans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAntisymm</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTotal</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">List.Perm</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"n\">r</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.eq_of_perm_of_sorted</span> <span class=\"n\">h</span> <span class=\"n\">hs</span> <span class=\"n\">ht</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list_pairwise_join_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}:</span>\n    <span class=\"o\">(</span><span class=\"n\">l1</span><span class=\"bp\">++</span><span class=\"n\">l2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Pairwise</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">l1.Pairwise</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">l2.Pairwise</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">l2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">l1</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.Pairwise</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">list_pairwise_join_iff</span> <span class=\"n\">α</span> <span class=\"n\">r</span> <span class=\"n\">xs</span> <span class=\"n\">l2</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"c1\">--pure tautology from here</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n    <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"o\">,</span><span class=\"n\">h3</span><span class=\"o\">,</span><span class=\"n\">h4</span><span class=\"o\">⟩</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h1</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h2</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h3</span>\n    <span class=\"n\">intro</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h5</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h5</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h5a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h5a</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">l2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h1</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h5b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">l2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h4</span> <span class=\"n\">h5b</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"n\">intro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">g1</span><span class=\"o\">,</span><span class=\"n\">g2</span><span class=\"o\">⟩,</span><span class=\"n\">g3</span><span class=\"o\">,</span><span class=\"n\">g4</span><span class=\"o\">⟩</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"n\">intro</span> <span class=\"n\">u</span>\n    <span class=\"n\">intro</span> <span class=\"n\">g5</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g5</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">g6a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">g1</span> <span class=\"n\">u</span> <span class=\"n\">g6a</span><span class=\"bp\">;</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">g6b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">g4</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">refl</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">g6b</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"n\">exact</span> <span class=\"n\">g2</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"n\">exact</span> <span class=\"n\">g3</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">l2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g4</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">List.Sorted</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">])</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">List.Sorted</span> <span class=\"n\">r</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">List.Sorted</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list_pairwise_join_iff</span><span class=\"o\">]</span>\n  <span class=\"c1\">--tautology + a ∈ [a] from here on</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">h3</span><span class=\"o\">⟩</span>\n  <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n  <span class=\"n\">intro</span> <span class=\"n\">u</span> <span class=\"n\">h4</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span> <span class=\"o\">(</span><span class=\"n\">List.mem_singleton.mpr</span> <span class=\"o\">(</span><span class=\"n\">refl</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">g1</span><span class=\"o\">,</span><span class=\"n\">g2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n  <span class=\"n\">exact</span> <span class=\"n\">g2</span>\n  <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.Pairwise</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">g3</span> <span class=\"n\">g4</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_singleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">g4</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">g4</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">g1</span> <span class=\"n\">u</span> <span class=\"n\">g3</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Finset.sort_insert</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTrans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAntisymm</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTotal</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.sort</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Finset.cons_eq_insert</span><span class=\"o\">]</span>\n  <span class=\"n\">swap</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span>\n  <span class=\"n\">apply</span> <span class=\"n\">bar</span> <span class=\"n\">r</span>\n  <span class=\"n\">swap</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sort_sorted</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">swap</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hb</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">hb</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sort_sorted</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort_perm_toList</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">Finset.toList_cons</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.Perm.trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">List.perm_append_singleton</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.perm_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort_perm_toList</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finset_sorted_range</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≤</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">List.range</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Finset.range_succ</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.range_succ</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sort_insert</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">le_of_lt</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 410424683,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1703850914
    },
    {
        "content": "<p>I've also collected a bunch of for me useful List 'theorems' below. If people are interested I can try to improve it to make it includ-able in Mathlib? But I really don't know what the requirements are<br>\ncont'd from above</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">filter_sorted</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTrans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAntisymm</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTotal</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">List.Sorted</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">List.filter</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">List.filter</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">filter_sorted</span> <span class=\"n\">r</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">List.Sorted.of_cons</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n    <span class=\"k\">have</span> <span class=\"n\">hb2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">List.mem_of_mem_filter</span> <span class=\"n\">hb</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.Sorted</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"n\">b</span> <span class=\"n\">hb2</span>\n    <span class=\"n\">exact</span> <span class=\"n\">filter_sorted</span> <span class=\"n\">r</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">List.Sorted.of_cons</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">filter_nodup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">List.Nodup</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">List.Nodup</span> <span class=\"o\">(</span><span class=\"n\">List.filter</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">List.filter</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">filter_nodup</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">List.Nodup.of_cons</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h2</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">List.mem_of_mem_filter</span> <span class=\"n\">h2</span>\n    <span class=\"n\">tauto</span>\n    <span class=\"n\">exact</span> <span class=\"n\">filter_nodup</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">List.Nodup.of_cons</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list_filter_to_finset</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">):</span>\n    <span class=\"n\">List.toFinset</span> <span class=\"o\">(</span><span class=\"n\">List.filter</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.toFinset</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.toFinset_cons</span><span class=\"o\">]</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">List.filter</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.filter_insert</span><span class=\"o\">]</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">list_filter_to_finset</span> <span class=\"n\">xs</span> <span class=\"n\">f</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list_filter_to_finset</span> <span class=\"n\">xs</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finset_filter_sort_commute</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTrans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAntisymm</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTotal</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Finset.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">List.filter</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Finset.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">List.filter</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">filter_sorted</span> <span class=\"n\">r</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Finset.sort_sorted</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.eq_of_perm_of_sorted</span> <span class=\"n\">_</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.perm_of_nodup_nodup_toFinset_eq</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Finset.sort_nodup</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Finset.filter</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">filter_nodup</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Finset.sort_nodup</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sort_toFinset</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list_filter_to_finset</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list_truncate_tail</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">l.length</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">Nat.zero</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">list_truncate_tail</span> <span class=\"n\">xs</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.length</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">omega</span>\n    <span class=\"o\">⟩))</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list_truncate_tail_zero</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">list_truncate_tail</span> <span class=\"n\">l</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list_truncate_tail</span><span class=\"o\">]</span>\n      <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list_truncate_tail_length</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">l.length</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">list_truncate_tail</span> <span class=\"n\">l</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list_truncate_tail</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list_truncate_tail</span><span class=\"o\">]</span>\n    <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">Nat.zero</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">exact</span> <span class=\"n\">list_truncate_tail_length</span> <span class=\"n\">xs</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.succ_lt_succ_iff.mp</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">list_truncate_head</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">l.length</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">Nat.zero</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span>\n    <span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">list_truncate_head</span> <span class=\"n\">xs</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.length</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Nat.succ_lt_succ_iff.mp</span> <span class=\"n\">h</span>\n    <span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list_filter_eval_false</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">List.filter</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[]:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span><span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.filter</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Bool.decide_false</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">list_filter_eval_false</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x_1</span> <span class=\"n\">h_1</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">tauto</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">h_2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list_filter_eval_true</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">:</span><span class=\"n\">List.filter</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span><span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.filter</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Bool.decide_true</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">list_filter_eval_true</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x_1</span> <span class=\"n\">h_1</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">tauto</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">h_2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list_get_mem</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">l.length</span><span class=\"o\">)):</span> <span class=\"n\">l.get</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span><span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">i.isLt</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">Nat.zero</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">list_get_mem</span> <span class=\"n\">α</span> <span class=\"n\">xs</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.length</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span><span class=\"n\">omega</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sorted_list_le_entry_lemma</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">IsRefl</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTrans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has</span> <span class=\"o\">:</span> <span class=\"n\">IsAntisymm</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTotal</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)(</span><span class=\"n\">g2</span> <span class=\"o\">:</span> <span class=\"n\">List.Nodup</span> <span class=\"n\">l</span><span class=\"o\">):</span>\n    <span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">List.get</span> <span class=\"n\">l</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩))</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">list_truncate_tail</span> <span class=\"n\">l</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_add_of_pos_left</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span><span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unfold</span> <span class=\"n\">list_truncate_tail</span><span class=\"bp\">;</span><span class=\"n\">simp</span>\n  <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">list_truncate_tail</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list_truncate_tail_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.filter</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Decidable.decide</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">hr.refl</span> <span class=\"n\">x</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Bool.decide_true</span>\n      <span class=\"n\">exact</span> <span class=\"n\">l</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">x_1</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.sorted_cons</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">g</span>\n      <span class=\"k\">let</span> <span class=\"n\">g1</span><span class=\"o\">:=</span> <span class=\"n\">g.left</span>\n      <span class=\"n\">apply</span> <span class=\"n\">list_filter_eval_false</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x_2</span> <span class=\"n\">h_2</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h3</span>\n      <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:=</span> <span class=\"n\">has.antisymm</span> <span class=\"n\">x_2</span> <span class=\"n\">x</span> <span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"n\">x_2</span> <span class=\"n\">h_2</span><span class=\"o\">)</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">g2</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h4</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_2</span>\n      <span class=\"n\">tauto</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n\n<span class=\"c1\">--note that if you put l[i] in the definition here it will not pattern match</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">sorted_list_le_entry</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">IsRefl</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTrans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has</span><span class=\"o\">:</span><span class=\"n\">IsAntisymm</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTotal</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">l.length</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)(</span><span class=\"n\">g2</span> <span class=\"o\">:</span> <span class=\"n\">List.Nodup</span> <span class=\"n\">l</span><span class=\"o\">):</span>\n    <span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">.</span> <span class=\"o\">(</span><span class=\"n\">l.get</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">l</span> <span class=\"bp\">=</span>\n      <span class=\"n\">list_truncate_tail</span> <span class=\"n\">l</span> <span class=\"o\">(⟨</span><span class=\"n\">i.val</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">i.isLt</span><span class=\"bp\">;</span><span class=\"n\">exact</span> <span class=\"n\">Nat.add_lt_add_right</span> <span class=\"n\">h</span> <span class=\"mi\">1</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span><span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span><span class=\"n\">unfold</span> <span class=\"n\">list_truncate_tail</span><span class=\"bp\">;</span><span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">ts</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">Nat.zero</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">apply</span> <span class=\"n\">sorted_list_le_entry_lemma</span>\n        <span class=\"n\">exact</span> <span class=\"n\">g</span>\n        <span class=\"n\">exact</span> <span class=\"n\">g2</span>\n      <span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.filter</span><span class=\"o\">]</span>\n        <span class=\"k\">let</span> <span class=\"n\">nindex</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">ts.length</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.length</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span><span class=\"n\">omega</span><span class=\"o\">⟩</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">ts</span><span class=\"o\">[</span><span class=\"n\">nindex</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.Sorted</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">g</span>\n          <span class=\"n\">apply</span> <span class=\"n\">g.left</span>\n          <span class=\"n\">apply</span> <span class=\"n\">list_get_mem</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Bool.decide_true</span><span class=\"o\">]</span>\n        <span class=\"n\">simp</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list_truncate_tail</span><span class=\"o\">]</span>\n        <span class=\"n\">swap</span>\n        <span class=\"n\">exact</span> <span class=\"n\">this</span>\n        <span class=\"n\">apply</span> <span class=\"n\">sorted_list_le_entry</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.sorted_cons</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">g</span>\n        <span class=\"n\">exact</span> <span class=\"n\">g.right</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.nodup_cons</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">g2</span>\n        <span class=\"n\">exact</span> <span class=\"n\">g2.right</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list_sort_characterization</span><span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTrans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAntisymm</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTotal</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">List.Nodup</span> <span class=\"n\">l</span><span class=\"o\">):</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">l.length</span><span class=\"o\">)),</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">.</span> <span class=\"o\">(</span><span class=\"n\">List.get</span> <span class=\"n\">l</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sorted_list_le_entry</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">list_truncate_tail_length</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list_whose_finset_is_singleton</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">lst.toFinset</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">lst</span> <span class=\"bp\">=</span> <span class=\"n\">List.replicate</span> <span class=\"n\">lst.length</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">lst</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_toFinset</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">this</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n      <span class=\"n\">exact</span> <span class=\"n\">this</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">ys.toFinset</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Finset.subset_insert</span> <span class=\"n\">y</span> <span class=\"n\">ys.toFinset</span>\n    <span class=\"k\">have</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">ys</span> <span class=\"bp\">=</span> <span class=\"n\">List.replicate</span> <span class=\"n\">ys.length</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">list_whose_finset_is_singleton</span> <span class=\"n\">ys</span> <span class=\"n\">x</span> <span class=\"n\">h₂</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list_map_toFinset</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">Finset.map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">List.toFinset</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">List.toFinset</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list_map_toFinset</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sort_monotone_map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTrans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAntisymm</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTotal</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTrans</span> <span class=\"n\">β</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAntisymm</span> <span class=\"n\">β</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTotal</span> <span class=\"n\">β</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">preserve_lt</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">Finset.sort</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Finset.map</span> <span class=\"n\">f</span> <span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">List.map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">lst</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">fst</span>\n  <span class=\"k\">have</span> <span class=\"n\">lst_sorted</span> <span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"n\">r</span> <span class=\"n\">lst</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sort_sorted</span> <span class=\"n\">r</span> <span class=\"n\">fst</span>\n  <span class=\"k\">have</span> <span class=\"n\">RHS_sorted</span> <span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">f</span> <span class=\"n\">lst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">List.pairwise_map.mpr</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">List.Sorted</span> <span class=\"n\">at</span> <span class=\"n\">lst_sorted</span>\n    <span class=\"n\">exact</span> <span class=\"n\">List.Pairwise.imp</span> <span class=\"n\">preserve_lt</span> <span class=\"n\">lst_sorted</span>\n  <span class=\"k\">have</span> <span class=\"n\">LHS_nodup</span> <span class=\"o\">:</span> <span class=\"n\">List.Nodup</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Finset.map</span> <span class=\"n\">f</span> <span class=\"n\">fst</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sort_nodup</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Finset.map</span> <span class=\"n\">f</span> <span class=\"n\">fst</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">RHS_nodup</span> <span class=\"o\">:</span> <span class=\"n\">List.Nodup</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">fst</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">List.Nodup.map</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Function.Embedding.injective</span> <span class=\"n\">f</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Finset.sort_nodup</span> <span class=\"n\">r</span> <span class=\"n\">fst</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Finset.map</span> <span class=\"n\">f</span> <span class=\"n\">fst</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">fst</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">list_map_toFinset</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n  <span class=\"k\">have</span> <span class=\"n\">LHS_sorted</span> <span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Finset.map</span> <span class=\"n\">f</span> <span class=\"n\">fst</span><span class=\"o\">))</span> <span class=\"o\">:=</span>  <span class=\"n\">Finset.sort_sorted</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Finset.map</span> <span class=\"n\">f</span> <span class=\"n\">fst</span><span class=\"o\">)</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.toFinset_eq_iff_perm_dedup</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.Nodup.dedup</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.Nodup.dedup</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">exact</span> <span class=\"n\">List.eq_of_perm_of_sorted</span> <span class=\"n\">h₂</span> <span class=\"n\">LHS_sorted</span> <span class=\"n\">RHS_sorted</span>\n  <span class=\"n\">tauto</span>\n  <span class=\"n\">tauto</span>\n</code></pre></div>",
        "id": 410424794,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1703851017
    },
    {
        "content": "<p>Skimming quickly, those seem useful if they don't exist yet. The proofs need a bit of work to be a little less verbose and more maintainable, but you could already create a pull request on mathlib. You'd need push access if you don't have it yet</p>",
        "id": 410434206,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703857636
    },
    {
        "content": "<p>OK thanks I'll try to simplify the proofs a little and try to do a pull request</p>",
        "id": 410468327,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1703877297
    }
]