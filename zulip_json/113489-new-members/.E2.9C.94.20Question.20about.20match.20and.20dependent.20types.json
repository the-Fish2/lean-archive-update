[
    {
        "content": "<p>I'm new to dependent types and lean in particular. When trying to encode some invariants in dependent arguments, the following situation (minimized) came up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.a</span> <span class=\"o\">}</span>\n  <span class=\"k\">match</span> <span class=\"n\">b.a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">A.a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b.x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">b.a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">A.a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b.x</span>     <span class=\"bp\">■</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>    <span class=\"n\">A.a</span>  <span class=\"n\">has</span> <span class=\"n\">type</span>    <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>    <span class=\"n\">A</span> <span class=\"n\">b.x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>The first examples <code>match</code> typechecks, but the second examples <code>match</code> fails with the given message. How can I convince the typechecker, that <code>b.x</code> must be <code>0</code> in this case?</p>",
        "id": 437005304,
        "sender_full_name": "femtobit",
        "timestamp": 1714813050
    },
    {
        "content": "<p>I think you are getting bitten by an autoImplicit <code>x</code></p>",
        "id": 437007264,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714815080
    },
    {
        "content": "<p>In the definition of <code>structure  B</code></p>",
        "id": 437007277,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714815102
    },
    {
        "content": "<p>No I don't think so, Shreyas</p>",
        "id": 437007384,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714815207
    },
    {
        "content": "<p>oh wow. Can confirm I was wrong. Sorry</p>",
        "id": 437007453,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714815266
    },
    {
        "content": "<p>It's interesting to consider where exactly matching fails. I would suppose that as long as you don't ask Lean to specifically solve for <code>b.x</code> as well, the match on <code>b.a</code> just does not propagate back.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">b.a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">A.a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails with your error message</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">b.a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails with your error message</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">b.a</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟩</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">tactic 'cases' failed, nested error:</span>\n<span class=\"cm\">dependent elimination failed, failed to solve equation</span>\n<span class=\"cm\">  b.1 = 0</span>\n<span class=\"cm\">at case A.a</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails since b.a is not inspected</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨⟩⟩</span> <span class=\"c1\">-- works fine (since we specifically ask to match b.x?)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">A.a</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- same</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">b.a.recOn</span> <span class=\"n\">rfl</span> <span class=\"c1\">--using just what the inductive/structure declaration…</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">b.recOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">a.recOn</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"c1\">-- generates, also works</span>\n</code></pre></div>",
        "id": 437016579,
        "sender_full_name": "Tom Kranz",
        "timestamp": 1714824372
    },
    {
        "content": "<p>Oh, the same pattern can be seen with <code>Type</code>s as targets, but the last two won't work because it seems like recursors are not auto-generated (anymore?)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">b.a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">A.a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b.x</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">b.a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b.x</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">b.a</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟩</span> <span class=\"c1\">-- fail</span>\n  <span class=\"n\">exact</span> <span class=\"n\">b.x</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"c1\">-- at this point Lean doesn't know that x is always 0, but also doesn't care</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨⟩⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">b.x</span> <span class=\"c1\">-- success</span>\n<span class=\"c\">/-</span><span class=\"cm\"> but x introduced by the match above got eliminated by the match on b.a,</span>\n<span class=\"cm\">as would b have if not captured by `h`. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">A.a</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b.x</span> <span class=\"c1\">-- success</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">b.a.recOn</span> <span class=\"n\">b.x</span> <span class=\"c1\">-- fail due to technical reasons</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">b.recOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">a.recOn</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- …</span>\n</code></pre></div>",
        "id": 437016803,
        "sender_full_name": "Tom Kranz",
        "timestamp": 1714824569
    },
    {
        "content": "<p>Can we prove the theorem <code>B.a_eq</code> below? I guess not.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">B.x_eq</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">A.recOn</span> <span class=\"n\">b.a</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">B.a_eq</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.x_eq</span> <span class=\"bp\">▸</span> <span class=\"n\">b.a</span> <span class=\"bp\">=</span> <span class=\"n\">A.a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">A.recOn</span> <span class=\"n\">b.a</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 437018031,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714825760
    },
    {
        "content": "<p>This what you're looking for?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">B.a_eq</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.x_eq</span> <span class=\"bp\">▸</span> <span class=\"n\">b.a</span> <span class=\"bp\">=</span> <span class=\"n\">A.a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">b.recOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">a.recOn</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">B.a_eq'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.x_eq</span> <span class=\"bp\">▸</span> <span class=\"n\">b.a</span> <span class=\"bp\">=</span> <span class=\"n\">A.a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨⟩⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 437019602,
        "sender_full_name": "Tom Kranz",
        "timestamp": 1714827127
    },
    {
        "content": "<p>Thanks. But I wonder why this proof didn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">B.a_eq</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.x_eq</span> <span class=\"bp\">▸</span> <span class=\"n\">b.a</span> <span class=\"bp\">=</span> <span class=\"n\">A.a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">A.recOn</span> <span class=\"n\">b.a</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 437021171,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714828425
    },
    {
        "content": "<p>I think it was because of the term <code>b</code> in the expression <code>b.x_eq</code>. I should learn more about type theory when I have time.</p>",
        "id": 437021871,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714828960
    },
    {
        "content": "<p>Thank you Tom for the detailed analysis. I have to admit that many details are way beyond my current understanding of lean. But now I have a vague idea, that by choosing a matched type more broadly, it is possible to include more information that can be used by the type checker.</p>",
        "id": 437023505,
        "sender_full_name": "femtobit",
        "timestamp": 1714830399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"715536\">femtobit</span> has marked this topic as resolved.</p>",
        "id": 437023522,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714830421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Question.20about.20match.20and.20dependent.20types/near/437021171\">said</a>:</p>\n<blockquote>\n<p>Thanks. But I wonder why this proof didn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">B.a_eq</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.x_eq</span> <span class=\"bp\">▸</span> <span class=\"n\">b.a</span> <span class=\"bp\">=</span> <span class=\"n\">A.a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">A.recOn</span> <span class=\"n\">b.a</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n</blockquote>\n<p>I just needed to specify the <code>motive</code> argument.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">B.a_eq</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.x_eq</span> <span class=\"bp\">▸</span> <span class=\"n\">b.a</span> <span class=\"bp\">=</span> <span class=\"n\">A.a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">A.recOn</span> <span class=\"n\">b.a</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">B.x_eq</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"bp\">▸</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">A.a</span><span class=\"o\">)</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 437026463,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714833344
    }
]