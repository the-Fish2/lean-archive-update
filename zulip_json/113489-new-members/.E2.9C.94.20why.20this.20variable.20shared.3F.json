[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"hey!\"</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">shared RC hey!</span>\n<span class=\"cm\">#[1, 2, 3]</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#eval</span> <span class=\"n\">main</span>\n</code></pre></div>",
        "id": 437545410,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1715122501
    },
    {
        "content": "<p>I think value of <code>a</code> is not shared... Am I misunderstanding the functionality of <code>dbgTraceIfShared</code>?</p>",
        "id": 437545555,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1715122582
    },
    {
        "content": "<p>If you change it to the following, it's no longer shared:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"hey!\"</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">#[1, 2, 3]</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#eval</span> <span class=\"n\">main'</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>What's going on is that <code>#[1,2,3]</code> can be lifted out of <code>main</code> to be a global constant. There's no need to construct it from scratch from within <code>main</code>.</p>",
        "id": 437562938,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715134883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I made <code>a</code> a global variable, yet <code>a</code> is said to be shared. Where on earth is it shared?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">shared RC hey!</span>\n<span class=\"cm\">#[1, 2, 3]</span>\n\n<span class=\"cm\">-/</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"hey!\"</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 437816453,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1715260137
    },
    {
        "content": "<p>I would like to understand more about \"functional but in-place\" paradigm</p>",
        "id": 437817706,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1715260721
    },
    {
        "content": "<p>A global variable is always shared (and thus never freed) as it can be read an arbitrary number of times during a program's runtime</p>",
        "id": 437820049,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715261692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Thank you.</p>\n<p>I misunderstood <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>'s message. Does this mean that anything can be lifted to a global variable is shared in the same way as a global variable?</p>",
        "id": 437833549,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1715266635
    },
    {
        "content": "<p>yes</p>",
        "id": 437835463,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715267282
    },
    {
        "content": "<p>I tried the example in functional programming in lean (see <a href=\"https://lean-lang.org/functional_programming_in_lean/programs-proofs/insertion-sort.html#is-this-really-insertion-sort\">https://lean-lang.org/functional_programming_in_lean/programs-proofs/insertion-sort.html#is-this-really-insertion-sort</a>)</p>\n<p>but this is also shared!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">insertSorted</span> <span class=\"o\">[</span><span class=\"n\">Ord</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">arr.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arr</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">i'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">arr.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.lt_of_succ_lt</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span>\n    <span class=\"k\">match</span> <span class=\"n\">Ord.compare</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i'</span><span class=\"o\">]</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">gt</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">insertSorted</span>\n        <span class=\"o\">((</span><span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"array to swap\"</span> <span class=\"n\">arr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">swap</span> <span class=\"o\">⟨</span><span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">⟩</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"o\">⟨</span><span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dbgTraceIfShared</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]⟩</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">shared RC array to swap</span>\n<span class=\"cm\">#[1, 2, 3]</span>\n\n<span class=\"cm\">-/</span>\n<span class=\"k\">#eval</span> <span class=\"n\">insertSorted</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 437837678,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1715268112
    },
    {
        "content": "<h4>another issue</h4>\n<p>fp-lean says (see <a href=\"https://lean-lang.org/functional_programming_in_lean/programs-proofs/insertion-sort.html#is-this-really-insertion-sort\">https://lean-lang.org/functional_programming_in_lean/programs-proofs/insertion-sort.html#is-this-really-insertion-sort</a>)</p>\n<p>\"Adding calls to <code>dbgTraceIfShared</code> at each point where mutation is desired causes the provided message to be printed to <code>stderr</code> when the value in question has more than one reference.\" </p>\n<p>but <code>dbgTraceIfShared</code> doesn't seem to print to <code>stderr</code></p>",
        "id": 437837947,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1715268207
    },
    {
        "content": "<p>The language server captures output to stderr and stdout as diagnostics</p>",
        "id": 437838095,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715268250
    },
    {
        "content": "<p>I am confused; I thought that output to stderr meant that it was an error.</p>",
        "id": 437838297,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1715268341
    },
    {
        "content": "<blockquote>\n<p>I tried the example in functional programming in lean</p>\n</blockquote>\n<p>I have re-read fp-lean again and I may have misread it.</p>",
        "id": 437839477,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1715268756
    },
    {
        "content": "<p>I will read the relevant section of fp-lean again. Thanks</p>",
        "id": 437839576,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1715268792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 437839587,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715268797
    },
    {
        "content": "<blockquote>\n<p>but this is also shared!</p>\n</blockquote>\n<p>Yes, but it should only be printed once even if more swaps are necessary. So it is \"almost linear\". In the end, whether a new array is created or a global array is copied once on each run of the program should not make a difference for performance</p>",
        "id": 437842943,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715270084
    }
]