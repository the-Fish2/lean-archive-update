[
    {
        "content": "<p>Hi, this one is a really dumb question, but it's giving me surprising difficulty. <br>\nI have this as the current state of a proof: </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"n\">F</span>\n<span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">F</span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">ZeroSubmod</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">AddHom</span><span class=\"w\"> </span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">ZeroSubmod</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">SelfSubmod</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">•</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</code></pre></div>\n<p>with helper definitions </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">ZeroSubmod</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ModuleCat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">carrier</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">PUnit</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">SelfSubmod</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ModuleCat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">carrier</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">F</span>\n</code></pre></div>\n<p>All I need to close out this goal is the identity<code>0 x = 0</code>, that is to say that applying the zero morphism to any element yields the 0-element of the ring F. This feels like it should be really trivial, but the usual rw and dsimp are not making progress, and I am having some trouble finding the relevant theorem in the jungle of documentation. How do I do this then?</p>",
        "id": 444270856,
        "sender_full_name": "VayusElytra",
        "timestamp": 1718207600
    },
    {
        "content": "<p>I would need a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> to verify, but maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.zero_apply#doc\">docs#Pi.zero_apply</a></p>",
        "id": 444271400,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718207740
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 444274089,
        "sender_full_name": "VayusElytra",
        "timestamp": 1718208432
    },
    {
        "content": "<p>Usually <code>0 x</code> is defeq to <code>0</code>, so <code>exact (mul_zero m).symm</code> solves the \"relevant part\".</p>",
        "id": 444294127,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1718214020
    },
    {
        "content": "<p>You are right that this works, thank you very much! I am really confused then why dsimp doesn't simplify 0 x to 0 in that relevant part, and why feeding.<br>\nAre there any other ways to refer to 0 objects in Lean? I find it confusing to have 0's everywhere in my code, that are misinterpreted as natural numbers or that aren't the exact 0 I am thinking of a quarter of the time. I've been working with modules for a week and I'm still not sure how to actually properly, unambiguously write down the additive unit</p>",
        "id": 444297617,
        "sender_full_name": "VayusElytra",
        "timestamp": 1718215160
    }
]