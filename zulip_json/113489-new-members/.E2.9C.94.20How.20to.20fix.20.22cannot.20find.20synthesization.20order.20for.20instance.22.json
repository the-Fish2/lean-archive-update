[
    {
        "content": "<p>I'm trying to prove that under some mild conditions, if <code>R</code> has characteristic zero, and <code>A</code> is an algebra over <code>R</code>, then so does <code>A</code>. Currently I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Algebra.charZero</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharZero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">NoZeroSMulDivisors</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">CharZero</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">cast_injective</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_natCast</span><span class=\"o\">,</span> <span class=\"n\">map_natCast</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span>\n    <span class=\"n\">apply</span> <span class=\"n\">NoZeroSMulDivisors.algebraMap_injective</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">exact</span> <span class=\"n\">CharZero.cast_injective</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>but it fails with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"n\">synthesization</span> <span class=\"n\">order</span> <span class=\"n\">for</span> <span class=\"kd\">instance</span> <span class=\"n\">charZero</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"bp\">âˆ€</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">Nontrivial</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">CharZero</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">NoZeroSMulDivisors</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">],</span> <span class=\"n\">CharZero</span> <span class=\"n\">A</span>\n<span class=\"n\">all</span> <span class=\"n\">remaining</span> <span class=\"n\">arguments</span> <span class=\"k\">have</span> <span class=\"n\">metavariables</span><span class=\"o\">:</span>\n  <span class=\"n\">CommRing</span> <span class=\"bp\">?</span><span class=\"n\">R</span>\n  <span class=\"bp\">@</span><span class=\"n\">CharZero</span> <span class=\"bp\">?</span><span class=\"n\">R</span> <span class=\"n\">AddGroupWithOne.toAddMonoidWithOne</span>\n  <span class=\"bp\">@</span><span class=\"n\">Algebra</span> <span class=\"bp\">?</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">CommRing.toCommSemiring</span> <span class=\"n\">Ring.toSemiring</span>\n  <span class=\"bp\">@</span><span class=\"n\">NoZeroSMulDivisors</span> <span class=\"bp\">?</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">MulZeroClass.toZero</span> <span class=\"n\">MulZeroClass.toZero</span> <span class=\"n\">toSMul</span>\n</code></pre></div>\n<p>how can I fix this?</p>",
        "id": 439953935,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1716350950
    },
    {
        "content": "<p>I think I figured out the problem - because <code>R</code> doesn't appear in <code>CharZero A</code>, it doesn't know for which <code>R</code> it should search for all of these instances. Is there a way to get around this?</p>",
        "id": 439955849,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1716352484
    },
    {
        "content": "<p>What you can do is change it from an <code>instance</code> to a <code>def</code> and locally instantiate it with, for example, <code>have := Algebra.charZero R A</code> (or maybe <code>have := Algebra.charZero R</code>)</p>",
        "id": 439956286,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716352894
    },
    {
        "content": "<p>Alright, thanks. I now see it already exists, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=charZero_of_injective_algebraMap#doc\">docs#charZero_of_injective_algebraMap</a></p>",
        "id": 439956406,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1716353016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690858\">Daniel Weber</span> has marked this topic as resolved.</p>",
        "id": 439956415,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716353026
    }
]