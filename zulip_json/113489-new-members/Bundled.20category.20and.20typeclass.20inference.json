[
    {
        "content": "<p>Hi I am curious in the following code related to bundled category and typeclass inference:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">.</span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">.</span><span class=\"n\">ConcreteCategory</span><span class=\"bp\">.</span><span class=\"n\">Bundled</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">.</span><span class=\"n\">NatIso</span>\n\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">section</span>\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">autoImplicit</span><span class=\"w\"> </span><span class=\"n\">false</span>\n<span class=\"kn\">universe</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">u</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span><span class=\"w\"> </span><span class=\"n\">Functor</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bundled</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">})</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Œ±</span><span class=\"w\"> </span><span class=\"c1\">-- ‚ÜëC : Type u</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"c1\">-- C.str : Category.{v, u} ‚ÜëC</span>\n\n<span class=\"c1\">-- The following three defs failed without this line</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">str</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">id_functor</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">ùü≠</span><span class=\"w\"> </span><span class=\"n\">D</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">id_natiso</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"bp\">‚•§</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">ùüô</span><span class=\"w\"> </span><span class=\"n\">F</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">id_functor'</span><span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bundled</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">})</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">ùü≠</span><span class=\"w\"> </span><span class=\"n\">E</span>\n</code></pre></div>",
        "id": 443782291,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1718029198
    },
    {
        "content": "<p>Here <code>C</code>, <code>D</code> and <code>E</code> are bundled categories and <code>F</code> is a \"bundled\" functor between them. I found that if the line <code>instance : Category C := C.str</code>  removed, then all the three defs failed. But how this line helps sythesizing/finding the categories that are in fact fields, especially in the case <code>F</code> and <code>E</code>?</p>",
        "id": 443782822,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1718029357
    },
    {
        "content": "<p>The mysterious part to me is that the line only gives an instance for <code>C</code>, whereas after it all instances for <code>D</code> and <code>E</code> can be found.</p>",
        "id": 443789343,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1718031239
    },
    {
        "content": "<p>The declaration <code>instance : Category C := ...</code> applies to any <code>C : Bundled Category</code>: this is the way definitions work in Lean.<br>\nOn the contrary, inside a definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bundled</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">letI</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">str</span>\n<span class=\"w\">  </span><span class=\"c1\">-- here, only `C` is equipped with a category structure</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 443800909,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1718033942
    },
    {
        "content": "<p>Ah indeed it‚Äôs the case. I get it now.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">id_functor</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">letI</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">str</span>\n<span class=\"w\">  </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"mi\">ùü≠</span><span class=\"w\"> </span><span class=\"n\">D</span>\n</code></pre></div>\n<p>does also work</p>",
        "id": 443803931,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1718034809
    },
    {
        "content": "<p>From <a href=\"#narrow/stream/270676-lean4/topic/Structure.20fields.20as.20instances.3F\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Structure.20fields.20as.20instances.3F</a> I see that <code>attribute [instance] Bundled.str</code> also works</p>",
        "id": 443804364,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1718034931
    }
]