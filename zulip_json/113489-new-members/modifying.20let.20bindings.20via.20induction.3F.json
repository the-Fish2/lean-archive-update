[
    {
        "content": "<p>In this example, <code>induction'</code> modifies the goal, but not the binding for <code>y</code>.  Is there a way to get it to modify both, or some other way to \"remember\" in the subsequent case analysis that <code>y</code> is <code>Sum.inl a</code> in the first case and <code>Sum.inr b</code> in the second?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"n\">x</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 413018533,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1705347032
    },
    {
        "content": "<p>Maybe <code>induction' h : ..</code></p>",
        "id": 413018979,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705347259
    },
    {
        "content": "<p>perfect, thanks</p>",
        "id": 413019028,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1705347287
    },
    {
        "content": "<p><code>revert y</code> before the <code>induction'</code> also does something that might be close to what you want.</p>",
        "id": 413019119,
        "sender_full_name": "Richard Copley",
        "timestamp": 1705347342
    },
    {
        "content": "<p>Though in that case you might use <code>generalising y</code> instead</p>",
        "id": 413019282,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705347427
    },
    {
        "content": "<p>OK I'll try those in a second.  Maybe a related meta-question: is there some place where tactics like <code>induction'</code> are documented?  I had tried <code>#help tactic</code> and looked briefly at Mathlib/Tactic/Cases.lean (and saw it in parts of MIL, but didn’t recall seeing the trick mentioned here). Or maybe the correct approach is to learn to read the self-documentation provided here by the source in Cases.lean?</p>",
        "id": 413019345,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1705347470
    },
    {
        "content": "<p>We used to have an overview like that for lean 3, but we haven't gotten around to rewriting it for lean 4, unfortunately</p>",
        "id": 413020509,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705348171
    },
    {
        "content": "<p>All tactics are documented \"unofficially\" here <a href=\"https://github.com/haruhisa-enomoto/mathlib4-all-tactics/blob/main/all-tactics.md\">https://github.com/haruhisa-enomoto/mathlib4-all-tactics/blob/main/all-tactics.md</a> but if you're a beginner and just want to know 25 or so common tactics then I just updated my course to use Lean 4 and my docs for tactics are here <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2024/Part_C/Part_C.html\">https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2024/Part_C/Part_C.html</a></p>",
        "id": 413031520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705354307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/modifying.20let.20bindings.20via.20induction.3F/near/413031520\">said</a>:</p>\n<blockquote>\n<p>All tactics are documented \"unofficially\" here <a href=\"https://github.com/haruhisa-enomoto/mathlib4-all-tactics/blob/main/all-tactics.md\">https://github.com/haruhisa-enomoto/mathlib4-all-tactics/blob/main/all-tactics.md</a> but if you're a beginner and just want to know 25 or so common tactics then I just updated my course to use Lean 4 and my docs for tactics are here <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2024/Part_C/Part_C.html\">https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2024/Part_C/Part_C.html</a></p>\n</blockquote>\n<p>First time seeing either of these pages! They should definitely be featured more prominently / made official on the documentation site. I've been going back to the mathlib3 docs for tactic reference, wondering what could've changed in the mathlib4 version...</p>",
        "id": 413070216,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1705373977
    }
]