[
    {
        "content": "<p>Sorry if I post in the wrong stream...</p>\n<p>I try to unfold an instance of <code>Add</code> to be able to use an hypothesis in an <code>if then else</code>. When I unfold the immediate <code>add</code>, it works; but when I unfold the implicit <code>add</code>, it doesn't work. This is an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">FooNat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">FooNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bor</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">FooNat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">FooNat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">FooNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FooNat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">m</span> <span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bar</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">bor</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bar</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bor</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bar</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bor</span> <span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"n\">bor</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">bar</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"n\">bar</span> <span class=\"mi\">4</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">FooNat</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">bor</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bor</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">add</span> <span class=\"c1\">-- this works</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">bor</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">bor</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">add</span> <span class=\"c1\">-- this doesn't work</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>What should I do to reduce <code>bor m + bor n</code> using hypothesis <code>h : m &lt; n</code>?</p>\n<p>Toolchain is <code>leanprover/lean4:stable</code> (Lean 4.4.0).</p>",
        "id": 410489480,
        "sender_full_name": "LB",
        "timestamp": 1703893096
    },
    {
        "content": "<p>You need to unfold <code>HAdd.hAdd</code> and <code>Add.add</code> too</p>",
        "id": 410491748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703894880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  Thank you for your answer.</p>\n<p><code>unfold HAdd.hAdd</code> does something and morphs my goal to <code>instHAdd.1 (bor m) (bor n) = bar 3</code></p>\n<p>Chaining this with <code>unfold Add.add</code> does nothing more: <code>tactic 'unfold' failed to unfold 'Add.add' at instHAdd.1 (bor m) (bor n) = bar 3</code></p>",
        "id": 410493234,
        "sender_full_name": "LB",
        "timestamp": 1703895699
    },
    {
        "content": "<p>you can replace the line with your comment like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Add.add</span><span class=\"o\">,</span> <span class=\"n\">HAdd.hAdd</span><span class=\"o\">,</span> <span class=\"n\">add</span><span class=\"o\">]</span> <span class=\"c1\">-- this doesn't work --&gt; now it does</span>\n</code></pre></div>",
        "id": 410493341,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703895743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"443984\">@Newell Jensen</span>  Thank you. That worked!</p>",
        "id": 410493585,
        "sender_full_name": "LB",
        "timestamp": 1703895872
    },
    {
        "content": "<p>You can make life easier for yourself by adding a lemma <code>a+b = add a b</code> with proof <code>rfl</code></p>",
        "id": 410518641,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703919091
    }
]