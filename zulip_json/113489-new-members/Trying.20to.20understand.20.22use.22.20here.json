[
    {
        "content": "<p>Why does <code>use</code> manage to solve the goal in the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩</span>\n  <span class=\"n\">use</span> <span class=\"n\">hq</span>\n</code></pre></div>",
        "id": 422633568,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1708526812
    },
    {
        "content": "<p><code>use</code> tries to close the resulting goals with the following tactics</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">use_discharger</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">exists_prop.mpr</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">use_discharger</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">use_discharger</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">And.intro</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">use_discharger</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">use_discharger</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">use_discharger</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">use_discharger</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">True.intro</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(and maybe more.)</p>\n<p>The relevant one is that it tries <code>assumption</code>.</p>",
        "id": 422634556,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708527094
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib4/blob/8b2dfa4e358ef9969cc5f519810315b205710e24/Mathlib/Tactic/Use.lean#L135-L137\">https://github.com/leanprover-community/mathlib4/blob/8b2dfa4e358ef9969cc5f519810315b205710e24/Mathlib/Tactic/Use.lean#L135-L137</a> for the actual code that takes care of the <code>use_discharger</code>.</p>",
        "id": 422634747,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708527138
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 422634934,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1708527196
    },
    {
        "content": "<p>Btw, for the same reason, this is also a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩</span>\n  <span class=\"n\">use</span>\n</code></pre></div>\n<p>I doubt that this style is encouraged, though.</p>",
        "id": 422637764,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708527908
    },
    {
        "content": "<p>That somehow didn't work for me. It complained about unexpected end of input.</p>",
        "id": 422646143,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1708530044
    },
    {
        "content": "<p>Oops, you are right!  I had missed that the error was referring to the <code>use</code> tactic!  <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 422647936,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708530513
    }
]