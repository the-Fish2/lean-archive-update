[
    {
        "content": "<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> be a commutative ring, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-algebra, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> an ideal of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>.  I am trying to regard <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> as an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-submodule of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> using <code>Submodule.comap</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.LocalRing</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">Submodule.comap</span> <span class=\"o\">(</span><span class=\"n\">σ₁₂</span> <span class=\"o\">:=</span> <span class=\"n\">algebraMap</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AlgHom.id</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">I</span>\n</code></pre></div>\n<p>Lean server told me that it </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">SemilinearMapClass</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">B</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>I have also tried <code>LinearMap.id (R := A) (M := B)</code> and <code>RingHom.id B</code> for <code>AlgHom.id A B</code>, while none of them succeeded to give the instance <code>SemilinearMapClass</code>. Could anyone give me some ideas?  Did I give any wrong arguments, or should I try some other functions?</p>",
        "id": 428128852,
        "sender_full_name": "Lei Bichang",
        "timestamp": 1711027812
    },
    {
        "content": "<p>Why are you using <code>AlgHom.id</code>?</p>",
        "id": 428129256,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711027922
    },
    {
        "content": "<p>I found <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Ideals.20of.20an.20algebra.20are.20submodules\">this post</a> concerning the same question, but it seems that it wasn't solved...</p>",
        "id": 428129395,
        "sender_full_name": "Lei Bichang",
        "timestamp": 1711027962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Pull.20back.20a.20submodule.20along.20a.20ring.20hom/near/428129256\">said</a>:</p>\n<blockquote>\n<p>Why are you using <code>AlgHom.id</code>?</p>\n</blockquote>\n<p>Just my desperate trial :(</p>",
        "id": 428129685,
        "sender_full_name": "Lei Bichang",
        "timestamp": 1711028038
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.LocalRing</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">I.restrictScalars</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 428129823,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711028065
    },
    {
        "content": "<p>I'm not very good at ring theory, but I believe this is what you want</p>",
        "id": 428129920,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711028090
    },
    {
        "content": "<p>Btw, unless you care about semilinear maps, you will always set <code>σ₁₂ := RingHom.id</code></p>",
        "id": 428130403,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711028211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Pull.20back.20a.20submodule.20along.20a.20ring.20hom/near/428129823\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.LocalRing</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">I.restrictScalars</span> <span class=\"n\">_</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you very much! I think it is.</p>",
        "id": 428130423,
        "sender_full_name": "Lei Bichang",
        "timestamp": 1711028214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631682\">Fmoc</span> has marked this topic as resolved.</p>",
        "id": 428130448,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711028220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Pull.20back.20a.20submodule.20along.20a.20ring.20hom/near/428130403\">said</a>:</p>\n<blockquote>\n<p>Btw, unless you care about semilinear maps, you will always set <code>σ₁₂ := RingHom.id</code></p>\n</blockquote>\n<p>I have tried <code>RingHom.id</code>,  but it didn't work either.</p>",
        "id": 428132088,
        "sender_full_name": "Lei Bichang",
        "timestamp": 1711028681
    },
    {
        "content": "<p>Oh actually I see what you were trying to do.</p>",
        "id": 428133409,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711029034
    },
    {
        "content": "<p>The reason this doesn't work is quite technical. <code>σ₁₂</code> is an <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OutParam#doc\">docs#OutParam</a> in the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SemilinearMapClass#doc\">docs#SemilinearMapClass</a> (and the other arguments too, except <code>F</code>), which means that it has to be inferrable from <code>F</code> alone.</p>",
        "id": 428133872,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711029152
    },
    {
        "content": "<p>Here you were setting <code>F := A →ₗ[A] B</code> (or <code>A →ᵃ[A] B</code>), and... actually I'm not sure why we don't have a <code>SemilinearMapClass (A →ₗ[A] B) (algebraMap A B) A B</code> instance.</p>",
        "id": 428135052,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711029470
    },
    {
        "content": "<p>It doesn't strike me as a great idea because there are so many moving parts and because there's probably a diamond lurking, but I can't find the issue right off. Maybe <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> will be able to explain.</p>",
        "id": 428135267,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711029523
    },
    {
        "content": "<p>I see. So perhaps I should use another <code>f  : F</code> which carries the data of <code>σ₁₂</code> or even more information?</p>",
        "id": 428136504,
        "sender_full_name": "Lei Bichang",
        "timestamp": 1711029827
    },
    {
        "content": "<p>You can try writing the <code>SemilinearMapClass (A →ₗ[A] B) (algebraMap A B) A B</code> instance and see what breaks</p>",
        "id": 428137670,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711030106
    },
    {
        "content": "<p>Adding your instance to the environment didn't help, and lean server reports the same problem as before.</p>",
        "id": 428166039,
        "sender_full_name": "Lei Bichang",
        "timestamp": 1711037339
    },
    {
        "content": "<p>but anyway, <code>restrictScalars</code> works fine, and thank you for your suggestions! <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span></p>",
        "id": 428166775,
        "sender_full_name": "Lei Bichang",
        "timestamp": 1711037540
    }
]