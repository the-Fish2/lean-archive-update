[
    {
        "content": "<p>I'm curious whether there's a direct way to resolve the type mismatch in the first example below.  The error message is not helpful, because the \"expected\" and \"found\" types are identical (or at least have identical textual descriptions).</p>\n<p>A practical workaround is to absorb the match statement into a definition, like in the second example, which makes me wonder whether it's an anti-pattern to use \"match\" in theorem statements in the first place.  Is that the case?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm1</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">⊕</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">thm1</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"c1\">-- type mismatch</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">⊕</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm2</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">⊕</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">fn</span> <span class=\"n\">I</span> <span class=\"n\">i</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">thm2</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 413157160,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1705412813
    },
    {
        "content": "<p>I guess one can work around this using <code>rw</code>, at least when the match statement appears on at most one side of the equation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">thm1</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">i</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>But it'd be convenient to be able to apply the theorem directly in more complicated settings</p>",
        "id": 413159413,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1705413538
    },
    {
        "content": "<p>The problem is that for both <code>match</code> statements, the laborator creates a custom match function (<code>thm1.match_1</code> and <code>_example.match_1</code>), and they are not definitionaly equal (at least not at normal reduction setting):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm1</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">⊕</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.match</span> <span class=\"n\">false</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- exact thm1 (Fin n) i -- type mismatch</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">thm1.match_1</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">test.match_1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- rfl fails</span>\n  <span class=\"n\">ext</span> <span class=\"n\">n</span>\n  <span class=\"c1\">-- rfl fails</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">thm1.match_1</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">test.match_1</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 413161637,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1705414181
    },
    {
        "content": "<p>But the take away is that, yes, probably an anti-pattern to have such match statements and hope they will be equal to others.</p>",
        "id": 413162002,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1705414290
    }
]