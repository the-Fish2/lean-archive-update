[
    {
        "content": "<p>Hi, I was just wondering if there is code in the library defining the trivial K module for some ring K. I looked through it but did not find anything useful. </p>\n<p>I was curious to try to implement it on my own, too. </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">ZeroMod</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ZeroMod</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"c1\">--Lean thinks this is the natural number 0, not the 0 in K</span>\n</code></pre></div>\n<p>This feels like the natural way to start, but  I've been running into all kinds of problems with it. The Set structure seems like the wrong way to go about it?</p>\n<p>I also thought of doing it like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">TrivialModule</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">Mod</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ModuleCat</span><span class=\"w\"> </span><span class=\"n\">K</span>\n<span class=\"w\">  </span><span class=\"n\">ZeroElt</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Mod</span>\n<span class=\"w\">  </span><span class=\"n\">triv</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Mod</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">ZeroElt</span>\n</code></pre></div>\n<p>So instead of defining one specific module as the zero module, defining it as a structure. But then I would need to prove afterwards that the usual 0 module actually is an instance of this class, which puts me back at square one. </p>\n<p>This really feels like something I should be able to figure out on my own... thank you for your patience, as always.</p>",
        "id": 442611701,
        "sender_full_name": "VayusElytra",
        "timestamp": 1717530216
    },
    {
        "content": "<p>I think you just want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Unit#doc\">docs#Unit</a> ?</p>",
        "id": 442622874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717534003
    },
    {
        "content": "<p>Though <code>(⊥ : Submodule K K)</code> would also work</p>",
        "id": 442623023,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717534051
    },
    {
        "content": "<p>Ahh thank you! That does work!</p>",
        "id": 443160331,
        "sender_full_name": "VayusElytra",
        "timestamp": 1717707523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"715864\">VayusElytra</span> has marked this topic as resolved.</p>",
        "id": 443160357,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717707532
    }
]