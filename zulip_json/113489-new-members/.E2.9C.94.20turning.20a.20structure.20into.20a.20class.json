[
    {
        "content": "<p>i would like to write a class for a Delone set within some EMetricSpace...<br>\ni currently have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Infsep</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ENNReal</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">EMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">packing_radius</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">ENNReal</span> <span class=\"o\">:=</span>\n  <span class=\"n\">β.einfsep</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">covering_radius</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">ENNReal</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">ENNReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"bp\">∈</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">EMetric.ball</span> <span class=\"n\">y</span> <span class=\"n\">d</span><span class=\"o\">)),</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">DeloneSet</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">EMetricSpace</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">uniformly_discrete</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">packing_radius</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">relatively_dense</span> <span class=\"o\">:</span> <span class=\"n\">covering_radius</span> <span class=\"n\">β</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>i would like <code>DeloneSet</code> to be a class rather than a structure, as it seems to me that there is no obvious way that there are multiple ways to make a set of a metric space into a Delone set...<br>\nhowever, when i replace <code>structure</code> with <code>class</code>, it gives an error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>cannot find synthesization order for instance @DeloneSet.toEMetricSpace with type\n  {α : Type} → (β : Set α) → [self : DeloneSet α β] → EMetricSpace α\nall remaining arguments have metavariables:\n  DeloneSet α ?β\n</code></pre></div>",
        "id": 420799721,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707571343
    },
    {
        "content": "<p>Yes, what you're doing is a very bad idea because if you have two different Delone sets on a same type <code>α</code> they put two different metrics on <code>α</code>. This is <em>roughly</em> what the error message is saying.</p>",
        "id": 420800286,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707571856
    },
    {
        "content": "<p>I think a much better solution is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">mk_iff</span><span class=\"kd\">]</span> <span class=\"c1\">-- generates `deloneSet_iff`</span>\n<span class=\"kd\">structure</span> <span class=\"n\">DeloneSet</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">EMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">uniformly_discrete</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">packing_radius</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">relatively_dense</span> <span class=\"o\">:</span> <span class=\"n\">covering_radius</span> <span class=\"n\">β</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 420800327,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707571910
    },
    {
        "content": "<p>but the set is a parameter to the class, so that shouldn't make a difference though?</p>",
        "id": 420800380,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707571927
    },
    {
        "content": "<p>Sure it does?</p>",
        "id": 420800391,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707571943
    },
    {
        "content": "<p>the metric doesn't depend on the set?</p>",
        "id": 420800464,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707572042
    },
    {
        "content": "<p>If you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">DeloneSet</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">EMetricSpace</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">uniformly_discrete</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">packing_radius</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">relatively_dense</span> <span class=\"o\">:</span> <span class=\"n\">covering_radius</span> <span class=\"n\">β</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>then it does!</p>",
        "id": 420800513,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572062
    },
    {
        "content": "<p>With your definition, a Delone set is the data of:</p>\n<ul>\n<li>an <code>EMetricSpace</code> structure on <code>α</code></li>\n<li>a proof that <code>0 &lt; packing_radius β</code></li>\n<li>a proof that <code>covering_radius β &lt; ∞</code></li>\n</ul>",
        "id": 420800588,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572138
    },
    {
        "content": "<p>yes?</p>",
        "id": 420800650,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707572167
    },
    {
        "content": "<p>So you agree that with your setup each Delone set carries its own <code>EMetricSpace</code> structure on <code>α</code>?</p>",
        "id": 420800721,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572241
    },
    {
        "content": "<p>yes?</p>",
        "id": 420800730,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707572252
    },
    {
        "content": "<p>So two different Delone sets can equip <code>α</code> with different <code>EMetricSpace</code> structures?</p>",
        "id": 420800752,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572275
    },
    {
        "content": "<p>yes?</p>",
        "id": 420800797,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707572289
    },
    {
        "content": "<p>i don't see how this is a problem</p>",
        "id": 420800833,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707572324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> <a href=\"#narrow/stream/113489-new-members/topic/turning.20a.20structure.20into.20a.20class/near/420800464\">said</a>:</p>\n<blockquote>\n<p>the metric doesn't depend on the set?</p>\n</blockquote>\n<p>So this claim is false?</p>",
        "id": 420800836,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572335
    },
    {
        "content": "<p>what i meant by that is that the metric is independent of what set you choose</p>",
        "id": 420800941,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707572409
    },
    {
        "content": "<p>you can use any combination of metric and set</p>",
        "id": 420800952,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707572422
    },
    {
        "content": "<p>Yes, so this is a terrible idea. Let me explain.</p>",
        "id": 420800966,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572441
    },
    {
        "content": "<p>Imagine you're Lean and you've been told to look for <code>EMetricSpace SomeSpace</code>. You know a bunch of facts, like <code>MetricSpace α → EMetricSpace α</code>, or <code>EMetricSpace ℝ</code>. You are going to try to apply each of these facts in turn. Eventually, you try to apply the fact that <code>DeloneSet α B → EMetricSpace α</code>. Try applying it. What are you to find? <code>DeloneSet SomeSpace ?B</code>. Great, you have no idea what <code>?B</code> is supposed to be.</p>",
        "id": 420801117,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572570
    },
    {
        "content": "<p>And now you're stuck and you hate your users.</p>",
        "id": 420801149,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572593
    },
    {
        "content": "<p>but don't you get a similar problem with things like <code>Module A B</code>, if you'd like to infer <code>Monoid A</code>?</p>",
        "id": 420801245,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707572668
    },
    {
        "content": "<p>Exactly, that's why <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module#doc\">docs#Module</a> is defined the way it is.</p>",
        "id": 420801259,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572688
    },
    {
        "content": "<p>i don't see how that defenition doesn't get into this problem? could you explain?</p>",
        "id": 420801308,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707572758
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">DistribMulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p>is fine, because a goal of the form <code>Module R M</code> says \"Given that you know <code>R</code> is a <code>Semiring</code>, <code>M</code> is an <code>AddCommMonoid</code>, find the fact that <code>M</code> is a <code>R</code>-module\"</p>",
        "id": 420801354,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572781
    },
    {
        "content": "<p>With our definition, there's no <code>Module R M → AddCommMonoid M</code> instance</p>",
        "id": 420801372,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572807
    },
    {
        "content": "<p>oh, so the difference is that is a parameter rather than ... inheritance?</p>",
        "id": 420801387,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707572827
    },
    {
        "content": "<p>The <code>AddCommMonoid M</code> instance is always provided separately, by a separate typeclass search</p>",
        "id": 420801389,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572831
    },
    {
        "content": "<p>Yes!</p>",
        "id": 420801397,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572835
    },
    {
        "content": "<p>You can't do inheritance with underspecified variables. In that case, you <strong>have to</strong> use parameters.</p>",
        "id": 420801423,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572867
    },
    {
        "content": "<p>ok, so then making it a class while adding it as a parameter should work?</p>",
        "id": 420801488,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707572910
    },
    {
        "content": "<p>If you mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">DeloneSet</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">EMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">uniformly_discrete</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">packing_radius</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">relatively_dense</span> <span class=\"o\">:</span> <span class=\"n\">covering_radius</span> <span class=\"n\">β</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>then yes</p>",
        "id": 420801511,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572945
    },
    {
        "content": "<p>Although you will want to call it <code>IsDeloneSet</code> because it doesn't contain data anymore</p>",
        "id": 420801530,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/turning.20a.20structure.20into.20a.20class/near/420800327\">said</a>:</p>\n<blockquote>\n<p>I think a much better solution is</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">mk_iff</span><span class=\"kd\">]</span> <span class=\"c1\">-- generates `deloneSet_iff`</span>\n<span class=\"kd\">structure</span> <span class=\"n\">DeloneSet</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">EMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">uniformly_discrete</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">packing_radius</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">relatively_dense</span> <span class=\"o\">:</span> <span class=\"n\">covering_radius</span> <span class=\"n\">β</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>is there a reason you first suggested not making it a class, but rather a structure?</p>",
        "id": 420801705,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707573105
    },
    {
        "content": "<p>Yes, but I might be wrong. I suspect you don't want to have <code>DeloneSet</code> as a property floating around, but rather as an assumption you pass explicitly.</p>",
        "id": 420801845,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707573208
    },
    {
        "content": "<p>i'll keep it in mind if i don't like it later, thanks!</p>",
        "id": 420802198,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707573518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> has marked this topic as resolved.</p>",
        "id": 420802200,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707573521
    }
]