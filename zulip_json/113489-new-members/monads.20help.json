[
    {
        "content": "<p>i try to describe a dependent type that only lives inside a monadic application similar to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">depType</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fn</span><span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">Nat</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">read</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">depType</span> <span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- should implicetly depend on state</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>but depType should be only accessible from within the monad and depend on the reader state. Is that even possible?</p>",
        "id": 424757027,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709590353
    },
    {
        "content": "<p>the <code>Reader</code> monad doesn't have state (the input is read-only)... there are other monads (like the <code>State</code> monad) that do</p>",
        "id": 424781651,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709604762
    },
    {
        "content": "<p>hmm i want the state to be read only (correct me if state is not the correct term without mutability)<br>\nmaybe this helps to clarify</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- I want to run this in a Reader monad such that depType uses the reader State instead of SomeNat</span>\n<span class=\"kd\">def</span> <span class=\"n\">use_wantedType</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">depType</span> <span class=\"n\">some_Nat</span><span class=\"o\">):</span> <span class=\"n\">ReaderM</span> <span class=\"n\">Nat</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">read</span>\n  <span class=\"k\">let</span> <span class=\"n\">wantedType</span> <span class=\"o\">:=</span> <span class=\"n\">depType</span> <span class=\"n\">state</span>\n  <span class=\"c1\">-- i want this v: wantedType</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 424835265,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709633539
    },
    {
        "content": "<p>it would be a function like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">wantedType</span><span class=\"o\">:</span> <span class=\"n\">ReaderM</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">read</span>\n  <span class=\"n\">return</span> <span class=\"n\">depType</span> <span class=\"n\">state</span>\n</code></pre></div>\n<p>which seems impossible. But maybe  im missing something</p>",
        "id": 424837068,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709634195
    },
    {
        "content": "<p>You may need to just write it as a dependent function instead of using <code>ReaderM</code> sugar</p>",
        "id": 424876956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709647694
    },
    {
        "content": "<p>but you haven't really given a complete <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> here, only fragments which don't really fit together into a program. How are you going to create an element of <code>depType state</code>? What do you want to do with the result?</p>",
        "id": 424877187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709647763
    },
    {
        "content": "<p>What is <code>some_Nat</code> here, and how does it relate to the value in the reader monad? The problem is that you have two values being passed into the function and your \"I want this\" is implicitly asserting that they are the same but there is no reason for them to be</p>",
        "id": 424877513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709647860
    },
    {
        "content": "<p>okay here a more complete example of what im currently doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Loc</span>\n<span class=\"bp\">|</span> <span class=\"n\">alice</span> <span class=\"bp\">|</span> <span class=\"n\">bob</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n<span class=\"kn\">open</span> <span class=\"n\">Loc</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">GVal</span> <span class=\"o\">(</span><span class=\"n\">owner</span> <span class=\"n\">endpoint</span><span class=\"o\">:</span> <span class=\"n\">Loc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>   <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Wrap</span><span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">owner</span> <span class=\"bp\">=</span> <span class=\"n\">endpoint</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">GVal</span> <span class=\"n\">owner</span> <span class=\"n\">endpoint</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">Empty</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">owner</span> <span class=\"bp\">≠</span> <span class=\"n\">endpoint</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">GVal</span> <span class=\"n\">owner</span> <span class=\"n\">endpoint</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- creates a GVal at loc using IO</span>\n<span class=\"kd\">def</span> <span class=\"n\">create_val</span> <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"n\">ep</span><span class=\"o\">:</span> <span class=\"n\">Loc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comp</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">GVal</span> <span class=\"n\">loc</span> <span class=\"n\">ep</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:(</span> <span class=\"n\">loc</span> <span class=\"bp\">=</span> <span class=\"n\">ep</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">GVal.Wrap</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">comp</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span>  <span class=\"n\">GVal.Empty</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">send_val</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"n\">ep</span><span class=\"o\">:</span> <span class=\"n\">Loc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">GVal</span> <span class=\"n\">l1</span> <span class=\"n\">ep</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">GVal</span> <span class=\"n\">l2</span> <span class=\"n\">ep</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- Wraps an α if ep = l2, otherwise .Empty</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">someProg</span> <span class=\"o\">(</span><span class=\"n\">ep</span><span class=\"o\">:</span> <span class=\"n\">Loc</span><span class=\"o\">):</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">create_val</span> <span class=\"n\">Loc.alice</span> <span class=\"n\">ep</span> <span class=\"mi\">2</span>\n  <span class=\"k\">let</span> <span class=\"n\">v2</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">send_val</span> <span class=\"n\">alice</span> <span class=\"n\">bob</span> <span class=\"n\">ep</span> <span class=\"n\">v</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 424884013,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709649700
    },
    {
        "content": "<p>my problem is that inside someProg the (ep:Loc) should be passed along implicetely. But when i do with a Reader it seems like i have to erase the endpoint from GVal and loose the proof that (owner = endpoint) implies a .Wrap</p>",
        "id": 424885166,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709650006
    }
]