[
    {
        "content": "<p>Hi everyone,  how can I discharge the two admits in the theorem <code>int_to_nat_injective</code>? I am looking for a tactics that remembers the state , i.e., in the first case it should be <code>Ha : n % 2 == 0 = false</code> and in the second case it should be <code>Ha : n % 2 == 0 = true</code>.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">cantor</span>\n\n\n  <span class=\"kd\">def</span> <span class=\"n\">nat_to_int</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n\n  <span class=\"kd\">def</span> <span class=\"n\">int_to_nat</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n\n  <span class=\"k\">#eval</span> <span class=\"n\">nat_to_int</span> <span class=\"o\">(</span><span class=\"n\">int_to_nat</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">700</span><span class=\"o\">))</span>\n  <span class=\"k\">#eval</span> <span class=\"n\">int_to_nat</span> <span class=\"o\">(</span><span class=\"n\">nat_to_int</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">theorem</span> <span class=\"n\">nat_to_int_injective</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">),</span>\n    <span class=\"n\">nat_to_int</span> <span class=\"o\">(</span><span class=\"n\">int_to_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat_to_int</span><span class=\"o\">,</span> <span class=\"n\">int_to_nat</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">int_to_nat</span><span class=\"o\">,</span> <span class=\"n\">nat_to_int</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">Ha</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Ha</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">Hb</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">Int.negSucc</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Hb</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">omega</span>\n\n\n\n\n  <span class=\"kd\">theorem</span> <span class=\"n\">int_to_nat_injective</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span>\n    <span class=\"n\">int_to_nat</span> <span class=\"o\">(</span><span class=\"n\">nat_to_int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">int_to_nat</span><span class=\"o\">,</span> <span class=\"n\">nat_to_int</span><span class=\"o\">]</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">.</span> <span class=\"k\">have</span> <span class=\"n\">Ha</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">Int.negSucc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ha</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> I know that n is odd here -/</span>\n      <span class=\"gr\">admit</span>\n    <span class=\"bp\">.</span> <span class=\"k\">have</span> <span class=\"n\">Ha</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ha</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> I know n is even here -/</span>\n      <span class=\"gr\">admit</span>\n</code></pre></div>",
        "id": 431395638,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1712262177
    },
    {
        "content": "<p>In your case analysis, you can name the hypothesis: <code>rcases h: n % 2 == 0 with _ | _; simp</code> . Is that what you need?</p>",
        "id": 431396882,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1712262693
    },
    {
        "content": "<p>Thank you! That's what I need.</p>",
        "id": 431397047,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1712262757
    },
    {
        "content": "<p>I have another question.  How to tell the Lean type checker that termination argument is (a + b)?  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">gcd_proof</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">ar</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">b</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rcases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">br</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">a</span>\n      <span class=\"bp\">.</span> <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">_</span> <span class=\"k\">else</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n        <span class=\"bp\">.</span> <span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n          <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">gcd_proof</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n        <span class=\"bp\">.</span> <span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n          <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">gcd_proof</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n\n<span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">gcd_proof</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">gcd_proof</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">gcd_proof</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 431479678,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1712307397
    },
    {
        "content": "<p><code>termination_by a b =&gt; a + b</code></p>",
        "id": 431481106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712307907
    },
    {
        "content": "<p>Thanks! Now that you are here, how can I replace the <code>sorry</code> part in <code>have hd : a + (b % a) &lt; a + b  := by sorry</code> by a proof (omega is not able to solve it)?</p>",
        "id": 431481408,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1712308014
    },
    {
        "content": "<p><code>Nat.mod_lt b a</code> and then <code>omega</code> should do the trick</p>",
        "id": 431481729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712308094
    }
]