[
    {
        "content": "<p>Hey folks, I'm a math twitch streamer who got interested in thinking about Lean because of a fellow streamer's project to formalize some IMO questions. I'm working my way through the ADAM tutorials, and just recently downloaded the project to my machine to do some practice problems</p>",
        "id": 435645023,
        "sender_full_name": "enstucky",
        "timestamp": 1714159044
    },
    {
        "content": "<p>May I start with a simple frustration I'm having right now? <br>\nBoth sides of the constructor tactic in the following code throw an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kd\">universe</span> <span class=\"n\">U</span>\n\n<span class=\"sd\">/-------------</span>\n<span class=\"sd\">Problem 3.17:</span>\n<span class=\"sd\">Let G be a group and H = {x⁻¹ : x∈G}. Show G=H as sets.</span>\n<span class=\"sd\">--------------/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Problem0317</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hyp</span><span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">=</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"bp\">=</span><span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">constructor</span>\n <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">xH</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hyp.mp</span> <span class=\"n\">at</span> <span class=\"n\">xH</span>\n    <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- Failed to find x ∈ H as the type of a parameter of h ∈ H → ∃ g, h = ↑g⁻¹</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">xG</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hyp</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- function expected at hyp [but] term has type h ∈ H ↔ ∃ g, h = ↑g⁻¹</span>\n</code></pre></div>\n<p>There's almost certainly a better way to set up the problem, which I'd also be interested in hearing about.<br>\nBut primarily, I'm confused about how to get the hypothesis as written to do anything useful.</p>",
        "id": 435646403,
        "sender_full_name": "enstucky",
        "timestamp": 1714159616
    },
    {
        "content": "<p><code>universe U</code> possibly doesn't mean what you think it does (in particular its not the same <code>U</code> as in your <code>Set U</code>), you probably won't  need explicit <code>universe</code> statements at all</p>",
        "id": 435646664,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1714159716
    },
    {
        "content": "<p>I think the answer here is that <code>universe U</code> doesn't mean what you think</p>",
        "id": 435646674,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714159719
    },
    {
        "content": "<p>Fair enough; I just copied that from some working code XD<br>\nUnfortunately, when I remove it, the problem persists.</p>",
        "id": 435646905,
        "sender_full_name": "enstucky",
        "timestamp": 1714159818
    },
    {
        "content": "<p>Also <code>G : Set U</code> and then <code>[Group G]</code> is not really optimal, you are making a subset of <code>U</code> into a group by reinterpreting it as its own type. I'd go with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"sd\">/-------------</span>\n<span class=\"sd\">Problem 3.17:</span>\n<span class=\"sd\">Let G be a group and H = {x⁻¹ : x∈G}. Show G=H as sets.</span>\n<span class=\"sd\">--------------/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Problem0317</span>  <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"bp\">=</span> <span class=\"n\">Set.univ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>for a statement</p>",
        "id": 435647018,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1714159870
    },
    {
        "content": "<p>This is probably the statement you want.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Problem0317</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)}</span> <span class=\"bp\">=</span> <span class=\"n\">Set.univ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>",
        "id": 435647028,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714159872
    },
    {
        "content": "<p>Where did you get this code from btw? <span class=\"user-mention\" data-user-id=\"713400\">@enstucky</span></p>",
        "id": 435647052,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1714159885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  I'm writing it myself. The universe statement came from... either MIL or some random code snippet in Mathlib; I don't remember.<br>\nI'll see what I can do with that <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> , although I'm still concerned about how I should be thinking about using biimplications if this example doesn't work.</p>",
        "id": 435647766,
        "sender_full_name": "enstucky",
        "timestamp": 1714160162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/enstucky.20says.3A.20howdy.20folks.20.3A.29/near/435646664\">said</a>:</p>\n<blockquote>\n<p><code>universe U</code> possibly doesn't mean what you think it does (in particular its not the same <code>U</code> as in your <code>Set U</code>), you probably won't  need explicit <code>universe</code> statements at all</p>\n</blockquote>\n<p>If you add <code>set_option autoImplicit false</code> then Lean will tell you this automatically</p>",
        "id": 435649264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714160939
    },
    {
        "content": "<p>(you can also turn it off globally in your project by editing the <code>leanOptions</code> in the lakefile)</p>",
        "id": 435649350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714160985
    },
    {
        "content": "<p>And I missed your first message Alex: I had some technical trouble with G:Type earlier, but I think that this idea of \"hypothesis : H is equal to the thing we want\" is what I was missing. Thank you ^_^</p>",
        "id": 435649526,
        "sender_full_name": "enstucky",
        "timestamp": 1714161052
    }
]