[
    {
        "content": "<blockquote>\n<p>The triangle in [<code>h1 ▸ h2</code>] is a macro built on top of <code>Eq.subst</code> and <code>Eq.symm</code>, and you can enter it by typing <code>\\t</code>.<br>\nFor more information: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/quantifiers_and_equality.html#equality\">Equality</a></p>\n</blockquote>\n<p>My question is where exactly is this macro defined?</p>",
        "id": 423266612,
        "sender_full_name": "Somo S.",
        "timestamp": 1708870404
    },
    {
        "content": "<p>when i \"goto definition\" (alt click on the ▸)  it just navigates me to the <code>inductive</code> definition of <code>Eq</code> instead of the actual macro definition</p>",
        "id": 423267171,
        "sender_full_name": "Somo S.",
        "timestamp": 1708870974
    },
    {
        "content": "<p>Maybe in c++ somewhere</p>",
        "id": 423269546,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708873344
    },
    {
        "content": "<p>The elaborator for this notation is defined <a href=\"https://github.com/leanprover/lean4/blob/9e5e0e23b2ec5032670b04f80220d1f51f8f19be/src/Lean/Elab/BuiltinNotation.lean#L344\">here</a>.</p>",
        "id": 423271800,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1708875592
    },
    {
        "content": "<p>thanks I think this is what I'm looking for.</p>",
        "id": 423275162,
        "sender_full_name": "Somo S.",
        "timestamp": 1708878739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> has marked this topic as resolved.</p>",
        "id": 423275177,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708878757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432410\">Arthur Adjedj</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Substitution.20macro.20definition/near/423271800\">said</a>:</p>\n<blockquote>\n<p>The elaborator for this notation is defined <a href=\"https://github.com/leanprover/lean4/blob/9e5e0e23b2ec5032670b04f80220d1f51f8f19be/src/Lean/Elab/BuiltinNotation.lean#L344\">here</a>.</p>\n</blockquote>\n<p>Also I see that the syntax/parser is defined <a href=\"https://github.com/leanprover/lean4/blob/9e5e0e23b2ec5032670b04f80220d1f51f8f19be/src/Lean/Parser/Term.lean#L764\">here</a></p>",
        "id": 423279143,
        "sender_full_name": "Somo S.",
        "timestamp": 1708882644
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> I'm not sure there's any notation defined in the C++. That could be true in Lean 3, but not in Lean 4, and especially for a notation like this that's not necessary for core functionality.)</p>",
        "id": 423285342,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708888752
    },
    {
        "content": "<p>I've wondered why \"go to definition\" for this goes to <code>Eq</code> rather than to something about the subst notation.</p>\n<p><code>Eq</code> makes <em>some</em> sense because one of the way it works is that it uses <code>Eq.rec</code> to do the rewrite, and that's defined as part of the definition of <code>Eq</code>. I've seen this bug before in other notation too.</p>",
        "id": 423286065,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708889380
    }
]