[
    {
        "content": "<p>Hello, I want to pattern match on disjunctions like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">which</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">∨</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">which</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>However, I get this error message:<br>\n    tactic 'cases' failed, nested error:<br>\n    tactic 'induction' failed, recursor 'Or.casesOn' can only eliminate into Prop<br>\n    β α : Prop<br>\n    motive : α ∨ β → Sort ?u.5392<br>\n    h_1 : (h : α) → motive ⋯<br>\n    h_2 : (h : β) → motive ⋯<br>\n    which✝ : α ∨ β<br>\n    ⊢ motive which✝ after processing</p>\n<p>Unfortunately, I have been unable to understand that error message. I narrowed down the problem to the code below, which works as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Either</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>  <span class=\"c1\">-- The only difference is Either α β : Type, whereas Or α β : Prop. I cannot think of a reason why this matters</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Either</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"n\">Either</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">which</span> <span class=\"o\">:</span> <span class=\"n\">Either</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">which</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Either.inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Either.inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>The docstring for Or explicitly states that it should be possible to pattern match with the match keyword:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">`Or a b`, or `a ∨ b`, is the disjunction of propositions. There are two</span>\n<span class=\"sd\">constructors for `Or`, called `Or.inl : a → a ∨ b` and `Or.inr : b → a ∨ b`,</span>\n<span class=\"sd\">and you can use `match` or `cases` to destruct an `Or` assumption into the</span>\n<span class=\"sd\">two cases.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Or</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- `Or.inl` is \"left injection\" into an `Or`. If `h : a` then `Or.inl h : a ∨ b`. -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Or</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"sd\">/-- `Or.inr` is \"right injection\" into an `Or`. If `h : b` then `Or.inr h : a ∨ b`. -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Or</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 425944525,
        "sender_full_name": "Raunak Chhatwal",
        "timestamp": 1710173432
    },
    {
        "content": "<p>Do you want <code>true</code> or <code>false</code> for a proof of <code>True ∨ True</code>?</p>",
        "id": 425946463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710173954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Pattern.20matching.20on.20Or/near/425946463\">said</a>:</p>\n<blockquote>\n<p>Do you want <code>true</code> or <code>false</code> for a proof of <code>True ∨ True</code>?</p>\n</blockquote>\n<p>A more practical example would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_even</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">Odd</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">is_even</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>The actual problem I'm currently working on would probably be too cumbersome to describe here.</p>",
        "id": 425947790,
        "sender_full_name": "Raunak Chhatwal",
        "timestamp": 1710174318
    },
    {
        "content": "<p>Sure, but the question doesn't really make sense in general, which hints that <code>match</code> isn't the right answer to it</p>",
        "id": 425948465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710174519
    },
    {
        "content": "<p>(this is pretty much what the error message says; \"can only eliminate into Prop\" means \"can't produce data because how would I choose?\")</p>",
        "id": 425948582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710174553
    },
    {
        "content": "<p>Can you please elaborate on why it doesn't make sense to pattern match on Or? Regarding \"can't produce data because how would I choose?\", I would think the match block is chosen based on the constructor of the input.</p>",
        "id": 425949613,
        "sender_full_name": "Raunak Chhatwal",
        "timestamp": 1710174828
    },
    {
        "content": "<p>The existence of a function <code>f : True ∨ True -&gt; Bool</code> such that <code>f (.inl trivial) = false</code> and <code>f (.inr trivial) = true</code> is a contradiction because of proof irrelevance</p>",
        "id": 425966369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710175480
    },
    {
        "content": "<p>At first glance I would not think this is a contradiction as the constructors of (.inl trivial) and (.inr trivial) differ even though the constructors' argument does not differ. Regardless, this compiles and it is essentially the same thing except Either a b : Type whereas a \\or b : Prop:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Either</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Either</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"n\">Either</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">which</span> <span class=\"o\">:</span> <span class=\"n\">Either</span> <span class=\"n\">True</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">which</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Either.inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Either.inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 425968396,
        "sender_full_name": "Raunak Chhatwal",
        "timestamp": 1710176114
    },
    {
        "content": "<p>Note that your Either is built in as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sum#doc\">docs#Sum</a>.</p>",
        "id": 425989758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710183594
    },
    {
        "content": "<p>It is precisely the fact that one is <code>Prop</code> and the other is <code>Type</code> that causes the issue</p>",
        "id": 425989834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710183605
    },
    {
        "content": "<p>Here's a proof that such a function cannot exist:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">example</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∨</span> <span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hfl</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hfr</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 425990100,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710183703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"681344\">Raunak Chhatwal</span> has marked this topic as resolved.</p>",
        "id": 426005493,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710189870
    },
    {
        "content": "<p>Thank you for the proof and proof irrelevance makes a lot of sense.</p>",
        "id": 426005701,
        "sender_full_name": "Raunak Chhatwal",
        "timestamp": 1710189968
    }
]