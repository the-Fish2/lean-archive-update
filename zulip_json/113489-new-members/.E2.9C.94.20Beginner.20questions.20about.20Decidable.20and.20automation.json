[
    {
        "content": "<p>Hi! I'm a Lean beginner and have modest experience with Coq.</p>\n<ol>\n<li>I have a goal like this.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x1</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"n\">s1</span> <span class=\"n\">x1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">v1</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">s2</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">v1</span>\n</code></pre></div>\n<p>I want to do case analysis on x=x1 (which I have derived DecidableEq for; they are just strings) and get two goals, where H3 is some v = some v1 in one, and s1 x1 = some v1 in the other. In Coq this is done by destructing a value of the type <a href=\"https://www.cs.princeton.edu/courses/archive/fall07/cos595/stdlib/html/Coq.Bool.Sumbool.html\">sumbool</a>.<br>\nI figure the Lean equivalent is Decidable, but I can't figure out how to use it for this.</p>\n<p>I read about dite and tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x1</span> <span class=\"k\">then</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"k\">else</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but in the then and else branches, the premise I want doesn't appear.</p>\n<ol start=\"2\">\n<li>In Coq I'm used to using tactics like auto, intuition, etc. to finish goals. Is there a Lean equivalent in the standard library? I see there are third-party packages like aesop, duper, lean-auto, etc. but I'm a bit hesitant to dive into them at this point. I'm just looking for something which applies simple tactics like assumption, constructor, simp, rfl and fails if those don't work.</li>\n</ol>\n<p>Thanks!</p>",
        "id": 434008646,
        "sender_full_name": "discuss9128",
        "timestamp": 1713433632
    },
    {
        "content": "<p>Not sure about your main question, but <code>if p then...</code> is <code>ite</code>, you probably want <code>if h : p then...</code> for <code>dite</code></p>",
        "id": 434020370,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713437930
    },
    {
        "content": "<p>I think what you want to do is <code>split at H3</code>.</p>",
        "id": 434020667,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1713438029
    },
    {
        "content": "<p>Thanks! When I disable notation, the type of H3 is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">Eq</span> <span class=\"n\">x</span> <span class=\"n\">x1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">x1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">v1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How does split know to work on the ite?</p>",
        "id": 434053335,
        "sender_full_name": "discuss9128",
        "timestamp": 1713448646
    },
    {
        "content": "<p>It will create two branches if it can't immediately decide whether the condition is true or false.</p>",
        "id": 434057148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713449528
    },
    {
        "content": "<p>For posterity, I did eventually find the answers to my questions:</p>\n<ol>\n<li>For general case analysis on decidable propositions, use <a href=\"https://lean-lang.org/theorem_proving_in_lean4/inductive_types.html#:~:text=n%20%3A%3D%20by%0A%20%20cases-,Decidable.em,-(m%20%3D%20n)\">Decidable.em</a></li>\n<li>Define a <a href=\"https://lean-lang.org/theorem_proving_in_lean4/tactics.html#extensible-tactics\">custom</a> tactic; <a href=\"https://lean-lang.org/theorem_proving_in_lean4/tactics.html#using-the-simplifier\">adding lemmas</a> to simp can also go a long way</li>\n</ol>",
        "id": 434991181,
        "sender_full_name": "discuss9128",
        "timestamp": 1713880539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"710998\">discuss9128</span> has marked this topic as resolved.</p>",
        "id": 434991198,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713880545
    },
    {
        "content": "<p>Late to the party, but just wanted to note that especially the tactic <code>trivial</code> makes it very easy to extend it:</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Tactics.html#Lean.Parser.Tactic.tacticTrivial\">https://leanprover-community.github.io/mathlib4_docs/Init/Tactics.html#Lean.Parser.Tactic.tacticTrivial</a></p>\n<p>For example, adding these lines on top of your file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">tauto</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">aesop</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>will result in <code>trivial</code> to test all these tactics. But it's a finishing tactic, it won't give you partial results.</p>",
        "id": 435479097,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1714085424
    }
]