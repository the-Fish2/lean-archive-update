[
    {
        "content": "<p>Hey there ! I am attempting to implemenent and play with many-sorted logic in Lean, and I am confronted with a little problem when implementing terms in lean. Here is a explanation of the syntax of many-sorted logic: <a href=\"https://plato.stanford.edu/entries/logic-many-sorted/#FormLang\">https://plato.stanford.edu/entries/logic-many-sorted/#FormLang</a></p>\n<p>Basically I have implemented my signature as a structure containing all the informations I need, and now I want to make a strongly typed version of terms, such that it is not possible to write terms that are not compatible with the signature I have.</p>\n<p>I would like lean to perform the type checking for me, allowing me to write a given term <code>f(x, y)</code> only if <code>x</code> and <code>y</code> are terms of the correct sort based on the signature.</p>\n<p>How would one come up with something like this, and for reference here is a skeleton implementation I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Signature</span> <span class=\"n\">where</span>\n  <span class=\"n\">sorts</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span>\n\n  <span class=\"n\">predSyms</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span>\n  <span class=\"n\">predRanks</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">predSyms</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">sorts</span><span class=\"o\">}</span>\n\n  <span class=\"n\">funSyms</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span>\n  <span class=\"n\">funRanks</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">funSyms</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">sorts</span><span class=\"o\">}</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">sorts</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Signature.Sort</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Signature</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S.sorts</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">Signature.Funs</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Signature</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S.funSyms</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">Signature.Preds</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Signature</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S.predSyms</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Signature</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">Signature.Funs.ty</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">S.Funs</span><span class=\"o\">):</span> <span class=\"n\">S.Sort</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">S.Sort</span> <span class=\"o\">:=</span> <span class=\"n\">S.funRanks</span> <span class=\"n\">f</span>\n<span class=\"kd\">def</span> <span class=\"n\">Signature.Funs.ret</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">S.Funs</span><span class=\"o\">):</span> <span class=\"n\">S.Sort</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f.ty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">Signature.Funs.args</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">S.Funs</span><span class=\"o\">):</span> <span class=\"n\">Array</span> <span class=\"n\">S.Sort</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f.ty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">Signature.Const</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">S.Funs</span> <span class=\"bp\">//</span> <span class=\"n\">c.args.size</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Signature.Preds.args</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">S.Preds</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">S.predRanks</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Term</span><span class=\"o\">:</span> <span class=\"n\">S.Sort</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">S.Funs</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"c\">/-</span><span class=\"cm\"> my args here-/</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">f.ret</span>\n</code></pre></div>",
        "id": 428281610,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1711096348
    },
    {
        "content": "<p>Here is my somewhat wacky first attempt using mutually inductive types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Signature</span> <span class=\"n\">where</span>\n  <span class=\"n\">sorts</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span>\n\n  <span class=\"n\">predSyms</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span>\n  <span class=\"n\">predRanks</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">predSyms</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">sorts</span><span class=\"o\">}</span>\n\n  <span class=\"n\">funSyms</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span>\n  <span class=\"n\">funRanks</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">funSyms</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">sorts</span><span class=\"o\">}</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">sorts</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Signature.Sort</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Signature</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S.sorts</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">Signature.Funs</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Signature</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S.funSyms</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">Signature.Preds</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Signature</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S.predSyms</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Signature</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">Signature.Funs.ty</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">S.Funs</span><span class=\"o\">):</span> <span class=\"n\">S.Sort</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">S.Sort</span> <span class=\"o\">:=</span> <span class=\"n\">S.funRanks</span> <span class=\"n\">f</span>\n<span class=\"kd\">def</span> <span class=\"n\">Signature.Funs.ret</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">S.Funs</span><span class=\"o\">):</span> <span class=\"n\">S.Sort</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f.ty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">Signature.Funs.args</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">S.Funs</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"n\">S.Sort</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f.ty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">Signature.Const</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">S.Funs</span> <span class=\"bp\">//</span> <span class=\"n\">c.args.length</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Signature.Preds.args</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">S.Preds</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">S.predRanks</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">TermList</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">S.Sort</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Empty</span>\n<span class=\"bp\">|</span> <span class=\"n\">Cons</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">TermList</span> <span class=\"n\">S'</span> <span class=\"bp\">→</span> <span class=\"n\">TermList</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"o\">::</span> <span class=\"n\">S'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Term</span><span class=\"o\">:</span> <span class=\"n\">S.Sort</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">S.Funs</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">TermList</span> <span class=\"n\">f.args</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">f.ret</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 428283078,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1711096962
    },
    {
        "content": "<p>But I am getting an error saying that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kd\">inductive</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"kd\">parameters</span> <span class=\"n\">mismatch</span> <span class=\"k\">in</span> <span class=\"n\">mutually</span> <span class=\"kd\">inductive</span> <span class=\"n\">datatypes</span>\n</code></pre></div>",
        "id": 428283222,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1711097009
    },
    {
        "content": "<p>Moving the <code>List S.Sort</code> after the colon so it's an index instead of a parameter seems to resolve the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">TermList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">S.Sort</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Empty</span> <span class=\"o\">:</span> <span class=\"n\">TermList</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">Cons</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">TermList</span> <span class=\"n\">S'</span> <span class=\"bp\">→</span> <span class=\"n\">TermList</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"o\">::</span> <span class=\"n\">S'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 428286235,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711098131
    },
    {
        "content": "<p>See <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/inductive_types.html#inductive-families\">https://leanprover.github.io/theorem_proving_in_lean4/inductive_types.html#inductive-families</a> on the differences between indices and parameters.</p>",
        "id": 428286443,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711098202
    },
    {
        "content": "<p>Oh yeah sorry !<br>\nIndeed my termlist is a indexed family, I should have thought about that</p>",
        "id": 428286946,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1711098371
    },
    {
        "content": "<p>Thanks !</p>",
        "id": 428286955,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1711098374
    },
    {
        "content": "<p>Thank you very much, I can now work with all this, here is a little example I did just to check everything works as I wanted it to:</p>",
        "id": 428287745,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1711098685
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">Example</span>\n  <span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n  <span class=\"kd\">def</span> <span class=\"n\">exSig</span><span class=\"o\">:</span> <span class=\"n\">Signature</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">sorts</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"s2\">\"base\"</span><span class=\"o\">],</span>\n    <span class=\"n\">predSyms</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>\n    <span class=\"n\">predRanks</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"o\">[],</span>\n    <span class=\"n\">funSyms</span> <span class=\"o\">:=</span> <span class=\"o\">[</span>\n      <span class=\"s2\">\"f\"</span><span class=\"o\">,</span>\n      <span class=\"s2\">\"a\"</span><span class=\"o\">,</span>\n      <span class=\"s2\">\"b\"</span>\n    <span class=\"o\">]</span>\n    <span class=\"n\">funRanks</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span> <span class=\"o\">⟨</span><span class=\"s2\">\"base\"</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span> <span class=\"k\">if</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"s2\">\"f\"</span> <span class=\"k\">then</span>\n      <span class=\"o\">[</span>\n        <span class=\"o\">⟨</span><span class=\"s2\">\"base\"</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n        <span class=\"o\">⟨</span><span class=\"s2\">\"base\"</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n      <span class=\"o\">]</span>\n    <span class=\"k\">else</span>\n      <span class=\"o\">[]</span>\n    <span class=\"o\">⟩</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">bSort</span><span class=\"o\">:</span> <span class=\"n\">exSig.Sort</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"s2\">\"base\"</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">STerm</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Term</span> <span class=\"n\">exSig</span>\n  <span class=\"kd\">def</span> <span class=\"n\">STerm.mk</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Term.mk</span> <span class=\"n\">exSig</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">STerm</span> <span class=\"n\">bSort</span> <span class=\"o\">:=</span> <span class=\"n\">STerm.mk</span> <span class=\"o\">⟨</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">TermList.Empty</span>\n  <span class=\"o\">})</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">STerm</span> <span class=\"n\">bSort</span> <span class=\"o\">:=</span> <span class=\"n\">STerm.mk</span> <span class=\"o\">⟨</span><span class=\"s2\">\"b\"</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">TermList.Empty</span>\n  <span class=\"o\">})</span>\n\n  <span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">STerm</span> <span class=\"n\">bSort</span> <span class=\"o\">:=</span> <span class=\"n\">STerm.mk</span> <span class=\"o\">⟨</span><span class=\"s2\">\"f\"</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span> <span class=\"o\">(</span>\n    <span class=\"bp\">.</span><span class=\"n\">Cons</span> <span class=\"n\">a</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">Cons</span> <span class=\"n\">b</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">Empty</span>\n  <span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Example</span>\n</code></pre></div>",
        "id": 428287759,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1711098691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"658705\">Thomas Vigouroux</span> has marked this topic as resolved.</p>",
        "id": 428288004,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711098771
    },
    {
        "content": "<p>I think it would be worthwhile to see how first order logic is formalized in mathlib.</p>",
        "id": 428338589,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711116836
    }
]