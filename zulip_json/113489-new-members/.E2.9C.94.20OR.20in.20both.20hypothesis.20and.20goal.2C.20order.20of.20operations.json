[
    {
        "content": "<p>I’ve been working through this example problem from The Mechanics of Proof whose goal state looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>This feels like it should be easy to complete.  Split h2 at the OR and solve one side.  However, I am tripping over myself and I think it has to do with what I should split into cases first.  </p>\n<p>While I’d like to figure this out myself, I’d appreciate a hint.  Will I need <code>obtain</code> and <code>left</code> (or <code>right</code>), and if so, how do I determine the order?</p>",
        "id": 412747681,
        "sender_full_name": "Dan Grigsby",
        "timestamp": 1705182228
    },
    {
        "content": "<p>First you can use <code>obtain</code> to split into two subgoals, and then in each of those subgoals you'll need to decide whether the goal is true because the left part is, or the right part</p>",
        "id": 412750009,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705183379
    },
    {
        "content": "<p>You could also rewrite <code>h2</code> using lemmas that transform <code>x - a = 0</code> into <code>x = a</code>, and then you don't need to do any case splitting.</p>",
        "id": 412752278,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705185231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> that was the nudge I needed.  Thank you.  (Is it weird I feel self-conscious that <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  can see how slowly I am progressing  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>?)</p>",
        "id": 412755663,
        "sender_full_name": "Dan Grigsby",
        "timestamp": 1705188272
    },
    {
        "content": "<p>Lean is hard to learn! Keep asking questions!</p>",
        "id": 412757213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705189646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"488951\">Dan Grigsby</span> has marked this topic as resolved.</p>",
        "id": 412759263,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705191193
    },
    {
        "content": "<p>Thank you, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  for the encouragement, and /especially/ for the Natural Numbers Game, which is a fantastic way to start to learn Lean.</p>",
        "id": 412759877,
        "sender_full_name": "Dan Grigsby",
        "timestamp": 1705191494
    },
    {
        "content": "<p>I had some difficulty with this one as well, and not because I didn't realize I had to do both <code>left</code> and <code>right</code> as part of the proof, but just because the way to express the solution has a minor quirk that I wasn't aware of. The issue was just that I'm not aware of the difference between using calc and not for certain things. So, for example, the following was not working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n      <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">h1</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">l</span> <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span>\n  <span class=\"n\">left</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">addarith</span> <span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- at this point, there's only 1 goal left stated in the `Lean Infoview` in VS Code</span>\n  <span class=\"n\">right</span> <span class=\"c1\">-- everything starting here doesn't work...</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">addarith</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>It would stop working the moment I tried to use <code>right</code>. It's not clear why exactly... The following did work though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n      <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">h1</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">l</span> <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">addarith</span> <span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">addarith</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I'm still not quite sure why one is not equivalent to the other... Maybe it'll be explained somewhere later in the text? Like when is it appropriate to not use <code>calc</code> for some of these and just state <code>addarith [xyz]</code>, for example? Or was I using <code>calc</code> incorrectly in the first case? The one difference between my use here and other instances is the lack of a step that would look like: <code>_ = 1</code> for example...</p>\n<p>cc: <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span></p>",
        "id": 431592563,
        "sender_full_name": "Jonatas Miguel",
        "timestamp": 1712346028
    },
    {
        "content": "<p>I think there may be an issue if you have just one line of <code>calc</code></p>",
        "id": 431593964,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712346713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20OR.20in.20both.20hypothesis.20and.20goal.2C.20order.20of.20operations/near/431593964\">said</a>:</p>\n<blockquote>\n<p>I think there may be an issue if you have just one line of <code>calc</code></p>\n</blockquote>\n<p>See for example the thread starting at <a href=\"#narrow/stream/113489-new-members/topic/Inequalities.20in.20.22calc.22/near/411429508\">this message</a>.</p>\n<p>By the way, another way of doing an \"or implies or\"-like thing is as follows:<br>\n<code>refine Or.imp ?_ ?_ (eq_zero_or_eq_zero_of_mul_eq_zero h1)</code></p>",
        "id": 431595312,
        "sender_full_name": "Richard Copley",
        "timestamp": 1712347261
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">h1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span>\n</code></pre></div>",
        "id": 431595625,
        "sender_full_name": "Richard Copley",
        "timestamp": 1712347396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20OR.20in.20both.20hypothesis.20and.20goal.2C.20order.20of.20operations/near/431595312\">said</a>:</p>\n<blockquote>\n<p>See for example the thread starting at <a href=\"#narrow/stream/113489-new-members/topic/Inequalities.20in.20.22calc.22/near/411429508\">this message</a>.</p>\n</blockquote>\n<p>Yeah, I agree with a lot of what's being said in that thread. Having some way of knowing that <code>calc</code> requires at least two lines to be valid (within VS Code, or documented in comments in the code associated to <code>calc</code>, or part of the tactic signature, etc...), and knowing that simply writing out a tactic on its own like <code>addarith [l]</code> would have sufficed to help me get past this confusion.</p>",
        "id": 431699650,
        "sender_full_name": "Jonatas Miguel",
        "timestamp": 1712431742
    }
]