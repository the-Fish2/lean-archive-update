[
    {
        "content": "<p>Does anyone have a minimal example of using <code>leancrawler</code>?   </p>\n<p>I followed <a href=\"https://leanprover-community.github.io/install/project.html#creating-a-lean-project\">these instructions</a> to setup a new project and then I created <code>Test.lean</code> as described.</p>\n<p>I installed <code>leancrawler</code> and ran it against <code>Test.lean</code> which does produce a <code>crawl.lean</code> file.  But when I try <code>lean --run crawl.lean</code> I get a wall of errors.  I'm doing everything in the terminal on Mac OS.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">crawl.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">MyProject'</span>\n<span class=\"n\">You</span> <span class=\"n\">might</span> <span class=\"n\">need</span> <span class=\"n\">to</span> <span class=\"kn\">open</span> <span class=\"bp\">'/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">mike</span><span class=\"bp\">/</span><span class=\"n\">ae</span><span class=\"bp\">/</span><span class=\"n\">alignment</span><span class=\"bp\">/</span><span class=\"n\">provably</span><span class=\"bp\">-</span><span class=\"n\">safe</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">my_project'</span> <span class=\"n\">as</span> <span class=\"n\">a</span> <span class=\"n\">workspace</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">editor</span>\n<span class=\"n\">crawl.lean</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kn\">namespace</span> <span class=\"bp\">'</span><span class=\"n\">tactic'</span>\n<span class=\"n\">crawl.lean</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">45</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unexpected</span> <span class=\"n\">token</span> <span class=\"sc\">'('</span><span class=\"bp\">;</span> <span class=\"n\">expected</span> <span class=\"n\">command</span>\n<span class=\"n\">crawl.lean</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unexpected</span> <span class=\"n\">token</span> <span class=\"sc\">','</span><span class=\"bp\">;</span> <span class=\"n\">expected</span> <span class=\"sc\">'↦'</span><span class=\"o\">,</span> <span class=\"bp\">'=&gt;'</span>\n<span class=\"n\">crawl.lean</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unexpected</span> <span class=\"n\">token</span> <span class=\"bp\">'</span><span class=\"kn\">attribute</span><span class=\"bp\">';</span> <span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"n\">binder_predicate'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">elab'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">elab_rules'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infix</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infixl</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infixr</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">instance</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">macro'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">macro_rules'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">notation</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">postfix</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">prefix</span><span class=\"bp\">'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"n\">syntax'</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 427948624,
        "sender_full_name": "Mike Vaiana",
        "timestamp": 1710946826
    },
    {
        "content": "<p>Leancrawler is a tool for lean 3, and it looks like you are trying to run with/on a lean 4 project</p>",
        "id": 427951291,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1710947477
    },
    {
        "content": "<p>Oh ok, thanks.  The README says  \"Lean 3.26 or later\" but they probably just mean the minor version.  Is there any tool that can be used map out dependencies in Lean4?</p>",
        "id": 427951837,
        "sender_full_name": "Mike Vaiana",
        "timestamp": 1710947583
    },
    {
        "content": "<p>I’ll add a deprecation banner right now, sorry about the confusion.</p>",
        "id": 427954239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710948150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> No problem!  Thanks for the reply.  Do you know if anyone has any plans to do something like this for Lean4?</p>",
        "id": 427954641,
        "sender_full_name": "Mike Vaiana",
        "timestamp": 1710948244
    },
    {
        "content": "<p>I’m sure I saw messages about such tools. Maybe <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> knows?</p>",
        "id": 427955310,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710948399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"702462\">@Mike Vaiana</span>, could you say what you are trying to do?</p>\n<p>I'm not sure there is a drop-in replacement for leancrawler. Mostly in Lean 4 this sort of stuff is so much easier, that often people just write one off metaprograms for their task.</p>",
        "id": 428051668,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710991516
    }
]