[
    {
        "content": "<p>With the following code, <code>ext v</code> introduces two goals, one with <code>v : V₁</code>, the other with <code>v : V₂</code>.  Is there a simple way to get it to introduce just one goal, with <code>v : (V₁ × V₂)</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">V₁</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">V₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">V₂</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"bp\">×</span> <span class=\"n\">V₂</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">v</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 412498786,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1705048519
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c1\">-- ext picks</span>\n  <span class=\"c1\">-- refine LinearMap.prod_ext ?hl ?hr</span>\n  <span class=\"n\">refine</span> <span class=\"n\">LinearMap.ext</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n</code></pre></div>",
        "id": 412499903,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705048995
    },
    {
        "content": "<p>thanks</p>",
        "id": 412502108,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1705049959
    },
    {
        "content": "<p>The canonical way is <code>ext1 v</code></p>",
        "id": 412577544,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705076650
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/525\">std4#525</a> adjusts the docstrings of these tactics so that you can find <code>ext1</code> from <code>ext</code></p>",
        "id": 412580662,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705077500
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">V₁</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">V₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">V₂</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"bp\">×</span> <span class=\"n\">V₂</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext1</span> <span class=\"n\">v</span> <span class=\"c1\">-- tactic 'introN' failed, insufficient number of binders</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 412585202,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1705079049
    },
    {
        "content": "<p>Huh, I should have tested it. Maybe you need multiple <code>ext1</code>s. There's also <code>ext v : 2</code> I believe for limiting the iterations (to two in this example). I'm on my phone, so haven't tested these.</p>",
        "id": 412586365,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705079442
    },
    {
        "content": "<p><code>ext v : 2</code> behaves like <code>ext v</code> here (and <code>ext v : 1</code> gives an error)</p>",
        "id": 412587066,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1705079698
    },
    {
        "content": "<p>It's not about iterations</p>",
        "id": 412592160,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705081696
    },
    {
        "content": "<p>It's prod_ext being an ext lemma</p>",
        "id": 412592207,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705081720
    },
    {
        "content": "<p>How do you mean? Isn't the point that in iteration one <code>ext</code> applies <code>LinearMap.ext</code> and then in iteration two it applies <code>prod_ext</code>?</p>",
        "id": 412592374,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705081792
    },
    {
        "content": "<p>No, prod_ext applies in the first iteration</p>",
        "id": 412592630,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705081888
    },
    {
        "content": "<p>Oh, you mean <code>LinearMap.prod_ext</code>, not <code>Prod.ext</code></p>",
        "id": 412592779,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705081937
    },
    {
        "content": "<p>This seems like a bad <code>@[ext]</code> lemma... I would have never expected the very first step of <code>ext</code> with a linear map to create two goals.</p>",
        "id": 412592958,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705081998
    },
    {
        "content": "<p>Perhaps so, yeah</p>",
        "id": 412603028,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705085859
    },
    {
        "content": "<p>It's a very useful ext lemma for when equating terms of the form <code>(A ⊗ B) × C →ₗ D</code></p>",
        "id": 412695201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705140559
    },
    {
        "content": "<p>As without it you can't apply the tensor product ext</p>",
        "id": 412695224,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705140589
    },
    {
        "content": "<p>Perhaps we should have <code>ext (simple := true)</code> or something that bypasses these more unusual ext lemmas</p>",
        "id": 412695310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705140644
    },
    {
        "content": "<p>It makes sense as an ext lemma, but a reason I worry about this as an <code>@[ext]</code> lemma is that it conditionally applies different ext lemmas depending on the domain. My own expectation is that <code>ext</code> sees that it's a linear map and then applies the standard linear map ext lemma.</p>\n<p>Extending your idea <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, maybe there should be \"ext sets\" kind of like simp sets, or maybe specialized <code>ext</code> lemmas for different circumstances. It seems to me that <code>LinearMap.prod_ext</code> lives in a categorical world, where you \"evaluate\" by pre-composing with other morphisms, and in particular you wouldn't necessarily apply the pointwise ext lemma. Or maybe you would as a last resort, since you're precomposing with an arbitrary linear map from the ground field.</p>",
        "id": 412733693,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705172426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/controlling.20how.20ext.20introduces.20variables/near/412499903\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c1\">-- ext picks</span>\n  <span class=\"c1\">-- refine LinearMap.prod_ext ?hl ?hr</span>\n  <span class=\"n\">refine</span> <span class=\"n\">LinearMap.ext</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Is there a way to get Lean to report which ext lemma is being used by <code>ext</code>?</p>",
        "id": 412915742,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1705310761
    },
    {
        "content": "<p><code>show_term ext</code></p>",
        "id": 412918503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705311678
    },
    {
        "content": "<p>oh wow, that looks super useful (more broadly).  thanks</p>",
        "id": 412919177,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1705311890
    }
]