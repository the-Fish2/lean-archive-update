[
    {
        "content": "<p>There was a question recently about proving the equality of two functions that sum over a list:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">recSum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">recSum</span> <span class=\"n\">as</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">doSum</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">l</span> <span class=\"k\">do</span>\n    <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"n\">acc</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n  <span class=\"n\">return</span> <span class=\"n\">acc</span>\n</code></pre></div>\n<p>I thought that could be an interesting exercise so I tried writing a proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">recSum</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">doSum</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">doSum</span> <span class=\"n\">Id.run</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tail</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Eq.refl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">unfold</span> <span class=\"n\">recSum</span>\n    <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>at this point the goal state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">tail</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"n\">recSum</span> <span class=\"n\">tail</span> <span class=\"bp\">=</span> <span class=\"n\">forIn</span> <span class=\"n\">tail</span> <span class=\"mi\">0</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ForInStep.yield</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"bp\">+</span> <span class=\"n\">forIn</span> <span class=\"n\">tail</span> <span class=\"mi\">0</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ForInStep.yield</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">forIn</span> <span class=\"n\">tail</span> <span class=\"n\">hd</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ForInStep.yield</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm pretty lost. I guess I would want to somehow move the <code>hd</code> into the <code>0</code> (accumulator) on the left hand side? Like going a forIn step backwards?</p>",
        "id": 412019244,
        "sender_full_name": "Philipp",
        "timestamp": 1704837591
    }
]