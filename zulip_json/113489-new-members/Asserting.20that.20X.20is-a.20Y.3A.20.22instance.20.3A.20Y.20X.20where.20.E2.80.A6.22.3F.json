[
    {
        "content": "<ol>\n<li>The following asserts that <code>Int</code> (ℤ, +) forms an <code>AdditiveGroup</code>. Is there a more succinct way to phrase it?</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AdditiveGroup</span> <span class=\"n\">Int</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_assoc</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">Int.zero</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">Int.zero_add</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_zero</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">Int.neg</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_left_neg</span>\n  <span class=\"n\">add_right_neg</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_right_neg</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>I'm trying to assert that <code>Int</code> forms an <code>Ring</code>, but I'm struggling with the last two fields. What am I missing?</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AdditiveCommutativeGroup</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">Monoid</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">Int</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_assoc</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">Int.zero_add</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_zero</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">Int.neg</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_left_neg</span>\n  <span class=\"n\">add_right_neg</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_right_neg</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_comm</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">Int.mul</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">Int.mul_assoc</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">Int.one_mul</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">Int.mul_one</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"bp\">???</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"bp\">???</span>\n</code></pre></div>\n<ol start=\"3\">\n<li>Is <code>instance : Y X where …</code> the idiomatic way to assert/demonstrate that <code>X</code> fulfils the interface of <code>Y</code> (X is-a Y)? Could it alternatively be stated as an <code>example</code>?</li>\n</ol>",
        "id": 423920367,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1709162249
    },
    {
        "content": "<ol start=\"2\">\n<li>The <code>???</code>s are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.mul_add#doc\">docs#Int.mul_add</a> etc</li>\n</ol>",
        "id": 423921641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709162995
    },
    {
        "content": "<ol start=\"3\">\n<li><code>instance : Y X</code> means that this construction is the <em>canonical</em> way that <code>X</code> is a <code>Y</code>.</li>\n</ol>",
        "id": 423921745,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709163037
    },
    {
        "content": "<ol>\n<li>Strictly this asserts \"there is an additive group structure on <code>ℤ</code>, and if you look at how I build it you can see I use <code>Int.add</code>\"; you didn't at any point write a statement that said the group operator was <code>Int.add</code>.</li>\n</ol>",
        "id": 423921928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709163142
    },
    {
        "content": "<p>Eric is just pointing out that phrases such as \"the integers are a ring\", whilst commonly used in mathematics and which sound like true/false statements, are in fact missing information; in lean you have to say \"this choice of addition and multiplication make the integers into a ring\" (and in lean you also have to say which choice of negation, 0 and 1 you use, although a posteriori they are unique)</p>",
        "id": 423980522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709199238
    },
    {
        "content": "<p>Arguably the missing information is present if you say \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Z</mi><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>−</mo><mo separator=\"true\">,</mo><mo>+</mo><mo separator=\"true\">,</mo><mo>×</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(ℤ, 0, 1, -, +, \\times)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord amsrm\">Z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">+</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">×</span><span class=\"mclose\">)</span></span></span></span> is a ring\", which is effectively what Isak did above. What I was trying to convey is that while this language <em>is</em> precise, it is not the phrasing that mathlib uses; we say \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Z</mi></mrow><annotation encoding=\"application/x-tex\">ℤ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord amsrm\">Z</span></span></span></span> has a ring structure, I'm going to define it in terms of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>−</mo><mo separator=\"true\">,</mo><mo>+</mo><mo separator=\"true\">,</mo><mo>×</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0, 1, -, +, \\times)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">+</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">×</span><span class=\"mclose\">)</span></span></span></span>\".</p>",
        "id": 423982227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709199835
    },
    {
        "content": "<p>In this specific case, you <em>could</em> introduce instances for each one of the data fields, since they are typeclasses in their own right.</p>",
        "id": 423984274,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709200559
    },
    {
        "content": "<p>Thanks!</p>\n<p>Ah, I had searched for <code>Int.mul_add</code> and <code>Int.add_mul</code> in Lean core and Mathlib, but it had not occurred to me that they could live in the standard library <code>std4</code> (<code>Std.Data.Int.Init.Lemmas</code>).</p>\n<p>Do I understand it correctly that …</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">Int</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_assoc</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">…</span>\n</code></pre></div>\n<p>… is a one-time setup that tells Lean that the given construction is the canonical way that <code>Int</code> is a <code>Ring</code>.</p>\n<p>And once that setup is done I can simply do …</p>\n<p><code>instance : Ring Int := by infer_instance</code></p>\n<p>… in the rest of my code to assert that <code>Int</code> is a <code>Ring</code> (given the canonical construction)?</p>\n<p>Would it possible to express the same thing in an <code>example</code> instead like …</p>\n<p><code>example … &lt;int-is-a-ring&gt; … := by infer_instance</code></p>\n<p>… ?</p>",
        "id": 424098555,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1709237137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"683979\">Isak Colboubrani</span> <a href=\"#narrow/stream/113489-new-members/topic/Asserting.20that.20X.20is-a.20Y.3A.20.22instance.20.3A.20Y.20X.20where.20.E2.80.A6.22.3F/near/424098555\">said</a>:</p>\n<blockquote>\n<p>Ah, I had searched for <code>Int.mul_add</code> and <code>Int.add_mul</code> in Lean core and Mathlib, but it had not occurred to me that they could live in the standard library <code>std4</code> (<code>Std.Data.Int.Init.Lemmas</code>).</p>\n</blockquote>\n<p>Do you mean you searched by hand? <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span> You should use <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">the docs</a>.</p>",
        "id": 424099734,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709237533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Search as in <code>git grep mul_add</code>! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 424101854,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1709238354
    }
]