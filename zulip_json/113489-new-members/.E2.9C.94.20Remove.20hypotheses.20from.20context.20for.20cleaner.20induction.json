[
    {
        "content": "<p>Hi everyone! I was wondering if there is a way to clean up the context (i.e. remove some hypotheses from context) of a proof such that when using the <code>induction'</code> tactic, the inductive hypothesis is not too complicated. Here's a simple example (although not a minimal working example).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">local_nondec_check</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">local_hyp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">m_leq_k</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">exists_add_of_le</span> <span class=\"n\">m_leq_k</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">k_eq_m_plus_c</span> <span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">k_eq_m_plus_c</span><span class=\"o\">]</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">c</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">induction'</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">ih</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.one_eq_succ_zero</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">local_hyp</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Hovering just before the <code>sorry</code> in the last line shows that the induction hypothesis is <code>k = m + Nat.succ c → f m ≤ f (m + Nat.succ c)</code>, whereas I would like the induction hypothesis to be just <code>f m ≤ f (m + Nat.succ c)</code>.<br>\nI think this is because we have another hypothesis in the context at the time that involves <code>c</code>, namely <code>k_eq_m_plus_c : k = m + Nat.succ (Nat.succ c)</code>, but that hypotheses is no longer necessary, since I've already used it up for the rewrite.</p>\n<p>Is there a way to drop that hypothesis from the current context so that the induction hypothesis is simplified? My current work around is to create another version of this lemma that proves <code>f m \\leq f (m + c)</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">local_nondec_check'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">local_hyp</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">c</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">induction'</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">induction_hyp</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.one_eq_succ_zero</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">local_hyp</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">ineq_to_chain</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_succ</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">c</span><span class=\"o\">)]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">local_hyp</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Nat.le_trans</span> <span class=\"n\">induction_hyp</span> <span class=\"n\">ineq_to_chain</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">local_nondec_check</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">local_hyp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">m_leq_k</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">exists_add_of_le</span> <span class=\"n\">m_leq_k</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">k_eq_m_plus_c</span> <span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">k_eq_m_plus_c</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">local_nondec_check'</span> <span class=\"n\">f</span> <span class=\"n\">local_hyp</span> <span class=\"n\">m</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 422477906,
        "sender_full_name": "Sayantan Khan",
        "timestamp": 1708453980
    },
    {
        "content": "<p>Yes, you can use the tactic <code>clear h</code> where <code>h</code> is your hypothesis</p>",
        "id": 422480164,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708454818
    },
    {
        "content": "<p>If it complains that something else depends on <code>h</code>, you can instead use <code>clear! h</code> which will recursively all things depending on <code>h</code></p>",
        "id": 422480233,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708454850
    },
    {
        "content": "<p>That worked great. Thanks a lot!</p>",
        "id": 422486060,
        "sender_full_name": "Sayantan Khan",
        "timestamp": 1708456719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"660916\">Sayantan Khan</span> has marked this topic as resolved.</p>",
        "id": 422486140,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708456758
    }
]