[
    {
        "content": "<p>I am having trouble to understand what exactly the cause of this message is. Here is a minimal working example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">myLemma</span><span class=\"o\">(</span><span class=\"n\">mon</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">2</span> <span class=\"o\">}</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span>\n<span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">2</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">case1</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">mon</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩)</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"k\">have</span> <span class=\"n\">first</span><span class=\"o\">:</span><span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">mon</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">}):=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,⟨(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span><span class=\"n\">case1</span><span class=\"o\">⟩⟩</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I got:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Exists.intro</span> <span class=\"bp\">?</span><span class=\"n\">m.7349306</span> <span class=\"n\">case1</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">case1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">¬</span><span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">mon</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">¬</span><span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">mon</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>but is seems as if the present and the expected types are exactly the same.</p>",
        "id": 419602442,
        "sender_full_name": "Henrik Rueping",
        "timestamp": 1706961138
    },
    {
        "content": "<p>ah that seems related:<br>\n<a href=\"https://leanprover-community.github.io/archive/stream/270676-lean4/topic/type.20mismatch.20with.20identical.20types.20on.20named.20pattern.20match.html\">https://leanprover-community.github.io/archive/stream/270676-lean4/topic/type.20mismatch.20with.20identical.20types.20on.20named.20pattern.20match.html</a></p>",
        "id": 419603041,
        "sender_full_name": "Henrik Rueping",
        "timestamp": 1706961685
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 419604557,
        "sender_full_name": "Richard Copley",
        "timestamp": 1706963050
    },
    {
        "content": "<p>\"printed exactly the same\" doesn't mean \"exactly the same\" -- if you <code>set_option pp.all true</code> then probably they won't be exactly the same any more (because then Lean prints out all the secret stuff too). If you're in a position where you have <code>h</code> which looks the same as the goal but <code>exact h</code> doesn't work and you get an error like the above, then <code>convert h</code> will tell you exactly which parts don't match up. Also, what Richard said.</p>",
        "id": 419608061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706966350
    }
]