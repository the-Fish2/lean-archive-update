[
    {
        "content": "<p>I am trying to prove something similar to this (the polynomial is multivariate and more complex):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I found Polynomial.IsEisensteinAt.irreducible, but In order to use I need the formula to be of the type <code>Polynomial</code>. How do I achive this? Also can you apply this irreducible lemma to MvPolynomial?</p>",
        "id": 429193229,
        "sender_full_name": "Wouter Smeenk",
        "timestamp": 1711282318
    },
    {
        "content": "<p>What you wrote is not technically a <code>Polynomial</code>: this is how your example could be proved using actual <code>Polynomial</code>s</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"bp\">·</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 429193680,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711282666
    },
    {
        "content": "<p><code>MvPolynomial</code> requires a bit of extra setup, so providing a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would help.</p>",
        "id": 429193793,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711282693
    },
    {
        "content": "<p>Oke thanks for that example/proof. But what if <code>2 - x + x ^ 2 ≠ 0</code> appears in the goal. How would you go about converting Polynomial in order to prove it?</p>",
        "id": 429194144,
        "sender_full_name": "Wouter Smeenk",
        "timestamp": 1711282857
    },
    {
        "content": "<p>I may be misunderstanding, but the <code>Polynomial</code> <code>(2 - X + X ^ 2 : ℤ[X])</code> being non-zero does not imply that your expression <code>2 - x + x ^ 2</code> is non-zero.</p>",
        "id": 429194612,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711283129
    },
    {
        "content": "<p>(I am pointing out something very silly: the polynomial <code>X</code> is non-zero, but <code>x</code> does vanish...)</p>",
        "id": 429194854,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711283182
    },
    {
        "content": "<p>I think that providing a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> will help disambiguate your question.</p>",
        "id": 429194966,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711283211
    },
    {
        "content": "<p>Btw, the proposal of having a tactic to convert a \"polynomial expression\" into an actual <code>Polynomial</code> arose already, but I think that no one ended up writing the tactic.</p>",
        "id": 429195801,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711283404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Polynomial/near/429194854\">said</a>:</p>\n<blockquote>\n<p>(I am pointing out something very silly: the polynomial <code>X</code> is non-zero, but <code>x</code> does vanish...)</p>\n</blockquote>\n<p>Damiano, you misunderstood Wouter's goal</p>",
        "id": 429196362,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711283598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Polynomial/near/429194612\">said</a>:</p>\n<blockquote>\n<p>I may be misunderstanding, but the <code>Polynomial</code> <code>(2 - X + X ^ 2 : ℤ[X])</code> being non-zero does not imply that your expression <code>2 - x + x ^ 2</code> is non-zero.</p>\n</blockquote>\n<p>I guess I don't really understand why this is not true. I also do not really understand what you mean by 'but <code>x</code> does vanish.</p>",
        "id": 429196378,
        "sender_full_name": "Wouter Smeenk",
        "timestamp": 1711283609
    },
    {
        "content": "<p><code>2 - X + X ^ 2</code> being irreducible over <code>ℤ</code> implies that <code>2 - x + x ^ 2 ≠ 0</code> for all <code>x : ℤ</code></p>",
        "id": 429196417,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711283643
    },
    {
        "content": "<p>What Damiano is saying is that if <code>P</code> is a polynomial, then <code>P ≠ 0</code> does not imply that <code>P(x) ≠ 0</code> for all <code>x</code>, this still depends on <code>x</code>.</p>",
        "id": 429196615,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711283755
    },
    {
        "content": "<p>Yes, but that's not what Wouter asked for <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 429196702,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711283771
    },
    {
        "content": "<p>Wouter wants to prove that the polynomial is irreducible, hence has no integer root</p>",
        "id": 429196714,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711283793
    },
    {
        "content": "<p>Anyway, the polynomial is <em>not</em> an Eisenstein polynomial.</p>",
        "id": 429196744,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711283827
    },
    {
        "content": "<p>In the Lean code there is <code>2 - x + x ^ 2 ≠ 0</code>, where <code>(x : ℤ)</code>, this is why we are asking for a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 429196759,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711283846
    },
    {
        "content": "<p>It is still irreducible, because its discriminant <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">-7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">7</span></span></span></span> is not a square in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>.</p>",
        "id": 429196884,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711283884
    },
    {
        "content": "<p>One could just reduce mod 3 in this case.</p>",
        "id": 429196949,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711283956
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ZMod</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">aux</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 429197087,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711284099
    },
    {
        "content": "<p>Oh very nice!</p>",
        "id": 429199086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711285025
    },
    {
        "content": "<p>It is a bit hard to provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. I guess my original example was not that good. But this trick with ZMod 3 helps. Thanks!</p>",
        "id": 429205621,
        "sender_full_name": "Wouter Smeenk",
        "timestamp": 1711288164
    }
]