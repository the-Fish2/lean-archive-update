[
    {
        "content": "<p>i was wondering, if in cases a tactic cannot close a proof like for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"s2\">\"a\"</span> <span class=\"bp\">==</span> <span class=\"s2\">\"b\"</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>\n<p>if you could supply a custom String for error output instead of \"failed to reduce to 'true'\" that might be more helpful to a user (like\"a\" is not equal to \"b\")</p>",
        "id": 422433922,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1708440819
    },
    {
        "content": "<p>You could write your own tactic which did this, sure. You're unlikely to convince the core Lean developers to change the error messages.</p>",
        "id": 422434348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708440909
    },
    {
        "content": "<p>Probably the tactic should print the context like <code>rfl</code> does</p>",
        "id": 422434402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708440919
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"s2\">\"a\"</span> <span class=\"bp\">==</span> <span class=\"s2\">\"b\"</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rfl'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">equality</span> <span class=\"n\">lhs</span>\n  <span class=\"s2\">\"a\"</span> <span class=\"bp\">==</span> <span class=\"s2\">\"b\"</span>\n<span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">rhs</span>\n  <span class=\"n\">true</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"s2\">\"a\"</span> <span class=\"bp\">==</span> <span class=\"s2\">\"b\"</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 422434573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708440955
    },
    {
        "content": "<p>I think that last line should probably appear after the <code>decide</code> error message too</p>",
        "id": 422434673,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708440967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/custom.20messages.20for.20tactic.20failure/near/422434348\">said</a>:</p>\n<blockquote>\n<p>You're unlikely to convince the core Lean developers to change the error messages.</p>\n</blockquote>\n<p>I’m not sure. Improving error messages is the first item of the Lean FRO roadmap for its first year. What is unlikely is to convince them to spend a lot of time reviewing bad pull-requests about this.</p>",
        "id": 422436197,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708441354
    },
    {
        "content": "<p>Thanks for pointing out the message could be improved! I went and made a PR to try to address this: <a href=\"https://github.com/leanprover/lean4/pull/3422\">lean4#3422</a></p>",
        "id": 422488486,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708457649
    },
    {
        "content": "<p>With this change, the error message would look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"s2\">\"a\"</span> <span class=\"bp\">==</span> <span class=\"s2\">\"b\"</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">tactic 'decide' proved that the proposition</span>\n<span class=\"cm\">  (\"a\" == \"b\") = true</span>\n<span class=\"cm\">is false</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 422488610,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708457717
    },
    {
        "content": "<p>I was under the impression that there was some central mechanism for printing the <code>⊢</code> part of the error message; if that's not the case, does every tactic have to remember to print its goal state now?</p>",
        "id": 422489467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708458106
    },
    {
        "content": "<p>my original intent of this post was to supply a custom error message  as a String to the tactic, not a general problem with the decide tactic error message itself.<br>\nwhere is  the String</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">tactic 'decide' proved that the proposition</span>\n<span class=\"cm\">  (\"a\" == \"b\") = true</span>\n<span class=\"cm\">is false</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>being set?<br>\n<span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> that seems like an nice  improvement to me!</p>",
        "id": 422490413,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1708458517
    },
    {
        "content": "<p>It's an error that <code>decide</code> generates (in the PR, look for the <code>throwError</code> lines).</p>",
        "id": 422490490,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708458559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I think the central mechanism is that you put your cursor right before the tactic. In this case, I decided to insert the proposition since it helps with legibility of the error message.</p>",
        "id": 422490764,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708458677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"684702\">@Simon Daniel</span> You might be interested in the LSpec link in the PR comment. There's a separate version of Decidable in LSpec (<code>Testable</code>) that's for synthesizing a reason if possible, falling back on Decidable if not. You could make a version of <code>decide</code> that synthesizes a <code>Testable</code> instance on failure to try to come up with a reason for the user.</p>",
        "id": 422491095,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708458821
    },
    {
        "content": "<p>For your example in this thread, this is the instance that would apply: <a href=\"https://github.com/lurk-lab/LSpec/blob/1d3536f96e964bd57405f18c41c2adbaf4f257e0/LSpec/Instances.lean#L15\">https://github.com/lurk-lab/LSpec/blob/1d3536f96e964bd57405f18c41c2adbaf4f257e0/LSpec/Instances.lean#L15</a></p>",
        "id": 422491236,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708458879
    },
    {
        "content": "<p>It would be nice if there were some UI mechanism to distinguish \"this tactic failed\" from \"this tactic concluded your goal is unprovable</p>",
        "id": 422492722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708459502
    },
    {
        "content": "<p>Yeah, though here I'd say the failure is inconclusive, since there might be a <code>False</code> hypothesis in the local context that <code>decide</code> isn't looking at.</p>",
        "id": 422492944,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708459596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/custom.20messages.20for.20tactic.20failure/near/422490764\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> I think the central mechanism is that you put your cursor right before the tactic. In this case, I decided to insert the proposition since it helps with legibility of the error message.</p>\n</blockquote>\n<p>I see a big flaw in this argument: it doesn't work when the tactic runs on multiple goals, and this is the use case where I read the error messages most closely.</p>",
        "id": 422494599,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708460377
    },
    {
        "content": "<p>Does it not? Aren't all the goals shown?</p>",
        "id": 422494788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708460470
    }
]