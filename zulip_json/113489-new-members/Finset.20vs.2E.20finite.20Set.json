[
    {
        "content": "<p>Assuming I am working exclusively with finite sets in some finite universe (e.g. the lattice of subsets of {1, ..., n} representing the Hypercube graph), should I be using using <code>Finset (Fin n)</code> or <code>(s : Set (Fin n)) [Finite s]</code>?</p>\n<p>I started working with the former, but am getting the impression that <code>Finset</code> is for more \"base level\" arguments. For example, I cannot use set notation (without always coercing to <code>Finset</code>) and <code>Set</code> generally seems to be more developed. On the other hand I am going to use double counting, which is build on Finset (though coercing to Finset here should be less of  notational hassle than the alternative). The proof of the Sensitivity Conjecture in mathlib uses a fourth option with <code>Fin n → Bool</code> and defining adjacency from a functional perspective, but I wanted to use symmetric differences since it seems to be the easiest notion for <code>simp</code> to take advantage of.</p>",
        "id": 427393153,
        "sender_full_name": "Christoph Spiegel",
        "timestamp": 1710751929
    },
    {
        "content": "<p>Definitely use <code>Finset</code></p>",
        "id": 427393495,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710752001
    },
    {
        "content": "<p>If you have more precise questions, I am happy to answer</p>",
        "id": 427393665,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710752031
    },
    {
        "content": "<p>Thanks! Is there any way to get back <code>Set</code> notation while exclusively working with <code>Finset</code> of a <code>Fintype</code>? Some setting that means I can use <code>{· ∣ · }</code> and <code>· ∆ · </code> instead of <code>Finset.filter</code>, <code>Finset.univ</code> and <code>symmDiff</code>? </p>\n<p>Also, what are the \"correct\" Finset analogues to <code>Set.Pairwise</code> and <code>Set.offDiag</code>?</p>",
        "id": 427400419,
        "sender_full_name": "Christoph Spiegel",
        "timestamp": 1710753317
    },
    {
        "content": "<p><code>∆</code> already exists, although <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> recently made it very undiscoverable</p>",
        "id": 427400595,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710753349
    },
    {
        "content": "<p>You need to <code>open scoped symmDiff</code> to get it</p>",
        "id": 427400779,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710753383
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Pairwise#doc\">docs#Set.Pairwise</a> doesn't need a finset analog since all it uses is the membership relation. If <code>s : Finset α</code>, simply do <code>(s : Set α).Pairwise</code></p>",
        "id": 427401121,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710753442
    },
    {
        "content": "<p>We don't yet have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sep#doc\">docs#Sep</a> notation for finset. <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> and I talked about it, but I'm not sure where it's at right now</p>",
        "id": 427401406,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710753494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Finset.20vs.2E.20finite.20Set/near/427400779\">said</a>:</p>\n<blockquote>\n<p>You need to <code>open scoped symmDiff</code> to get it</p>\n</blockquote>\n<p>You're right, I wasn't working with Finset of Fintype, that's why it was complaining, not bc of the <code>Finset</code>.</p>",
        "id": 427401655,
        "sender_full_name": "Christoph Spiegel",
        "timestamp": 1710753540
    },
    {
        "content": "<p>A common trap is that you need <code>[DecidableEq α]</code> as soon as you want to use lattice operations on <code>Finset α</code></p>",
        "id": 427401869,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710753587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Finset.20vs.2E.20finite.20Set/near/427401869\">said</a>:</p>\n<blockquote>\n<p>A common trap is that you need <code>[DecidableEq α]</code> as soon as you want to use lattice operations on <code>Finset α</code></p>\n</blockquote>\n<p>I think that I have sorted out, using <code>abbrev vertex (n : ℕ) := Finset (Fin n)</code> should inherit the decidability from <code>Fintype</code> and <code>Finset</code></p>",
        "id": 427402286,
        "sender_full_name": "Christoph Spiegel",
        "timestamp": 1710753662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Finset.20vs.2E.20finite.20Set/near/427401121\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Pairwise#doc\">docs#Set.Pairwise</a> doesn't need a finset analog since all it uses is the membership relation. If <code>s : Finset α</code>, simply do <code>(s : Set α).Pairwise</code></p>\n</blockquote>\n<p>Would it make sense to still define <code>Finset.Pairwise</code> and simply have it coerce to <code>Set</code>in the background? Explicitly casting to <code>Set</code> seems superfluous and doesn't produce readable proofs?</p>",
        "id": 427402685,
        "sender_full_name": "Christoph Spiegel",
        "timestamp": 1710753732
    },
    {
        "content": "<p>Yeah, we could just have <code>abbrev Finset.pairwise (s : Finset α) := (s : Set α).Pairwise</code></p>",
        "id": 427403118,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710753812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Finset.20vs.2E.20finite.20Set/near/427401406\">said</a>:</p>\n<blockquote>\n<p>We don't yet have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sep#doc\">docs#Sep</a> notation for finset. <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> and I talked about it, but I'm not sure where it's at right now</p>\n</blockquote>\n<p>Sounds like a good idea to me. I'm not that fluent yet in the fundamentals of Lean, but if there's something that I can do for that, let me know.</p>",
        "id": 427403234,
        "sender_full_name": "Christoph Spiegel",
        "timestamp": 1710753833
    },
    {
        "content": "<p>The issue is that we would want <code>{x ∈ s | p x}</code> to be syntactically <code>s.filter p</code> (or <code>s.filter fun x ↦ p x</code>, whatever), not <code>Sep.sep p s</code>.</p>",
        "id": 427403796,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710753938
    },
    {
        "content": "<p>Or maybe we could give up <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.filter#doc\">docs#Finset.filter</a> entirely, since it's simply <code>sep</code>?</p>",
        "id": 427403935,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710753965
    },
    {
        "content": "<p>I guess while I have your attention another question only partially related to Finset vs Set: how would you obtain \"two distinct vertices in a Finset of vertices that minize hamming distance\"? Is <code>Function.argmin</code>the right place? (And seems like this kind of argument might be well suited for a custom tactic?)</p>",
        "id": 427404124,
        "sender_full_name": "Christoph Spiegel",
        "timestamp": 1710753997
    },
    {
        "content": "<p>Kyle, is your fancy sep notation hardcoded for <code>Set</code>, or is it generic over <code>Sep</code> instances?</p>",
        "id": 427404376,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710754040
    },
    {
        "content": "<p>I would do <code>obtain ⟨(x, y), hxy, hxymin⟩ := (s ×ˢ s).exists_min_image (fun (x, y) ↦ hammingDist x y) (hs.prod hs); rw [mem_product] at hxy</code> where <code>hs : s.Nonempty</code></p>",
        "id": 427404879,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710754131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Finset.20vs.2E.20finite.20Set/near/427404879\">said</a>:</p>\n<blockquote>\n<p>I would do <code>obtain ⟨(x, y), hxy, hxymin⟩ := (s ×ˢ s).exists_min_image (fun (x, y) ↦ hammingDist x y) (hs.prod hs); rw [mem_product] at hxy</code> where <code>hs : s.Nonempty</code></p>\n</blockquote>\n<p>Thanks, <code>exists_min_image</code> I hadn't found yet!</p>",
        "id": 427405658,
        "sender_full_name": "Christoph Spiegel",
        "timestamp": 1710754278
    }
]