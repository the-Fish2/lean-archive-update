[
    {
        "content": "<p>Hi, for <a href=\"https://github.com/leanprover-community/mathlib4/pull/12404\">#12404</a> I'm trying to rework my proof of the following to allow for weaker hypotheses, but I'm not very good (= plain bad) with uniformities... does anyone have a suggestion how to proceed here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">Uniformity</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">TotallyBounded.isSeparable2</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">UniformSpace</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">IsCountablyGenerated</span> <span class=\"o\">(</span><span class=\"bp\">ùì§</span> <span class=\"n\">Œ±</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">TotallyBounded</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">TopologicalSpace.IsSeparable</span> <span class=\"n\">s</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">TopologicalSpace.IsSeparable</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">isCountablyGenerated_iff_exists_antitone_basis.mp</span> <span class=\"n\">i</span>\n  <span class=\"n\">choose</span><span class=\"bp\">!</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">hfb</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"n\">use</span> <span class=\"bp\">‚ãÉ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnu</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùì§</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span>\n    <span class=\"n\">exact</span> <span class=\"n\">HasAntitoneBasis.mem</span> <span class=\"n\">hx</span> <span class=\"n\">n</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hf</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">hnu</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">hfb</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hfb</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">hnu</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">apply</span> <span class=\"n\">Set.countable_iUnion</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Set.Finite.countable</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">UniformSpace.mem_closure_iff_ball</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">V</span> <span class=\"n\">hV</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 435344817,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714035886
    },
    {
        "content": "<p>Original version was </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">TotallyBounded.isSeparable4</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">TotallyBounded</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">TopologicalSpace.IsSeparable</span> <span class=\"n\">s</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.totallyBounded_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">choose</span><span class=\"bp\">!</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">hfb</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">Nat.one_div_pos_of_nat</span><span class=\"o\">)</span>\n  <span class=\"n\">use</span> <span class=\"bp\">‚ãÉ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">apply</span> <span class=\"n\">Set.countable_iUnion</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">countable</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.mem_closure_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">Œµ</span> <span class=\"n\">hŒµ</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">exists_nat_one_div_lt</span> <span class=\"n\">hŒµ</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">b</span> <span class=\"bp\">‚àà</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">Set.mem_iUnion.mp</span> <span class=\"o\">(</span><span class=\"n\">hfb</span> <span class=\"n\">n</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_iUnion</span><span class=\"o\">,</span> <span class=\"n\">Metric.mem_ball</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hi</span>\n      <span class=\"n\">use</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi.1</span>\n      <span class=\"n\">apply</span> <span class=\"n\">lt_trans</span> <span class=\"n\">hi.2</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inv_eq_one_div</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hn</span>\n    <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 435344904,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714035922
    },
    {
        "content": "<p>do you know about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformSpace.metrizableSpace#doc\">docs#UniformSpace.metrizableSpace</a> ?</p>",
        "id": 435434294,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1714065550
    },
    {
        "content": "<p>This is actually something I've been wondering: Because of this theorem, is it ever correct to add a lemma about ``countably generated'' uniform spaces to mathlib? Or should one always just use Pseudo-metric spaces in such a case.</p>",
        "id": 435434840,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1714065740
    },
    {
        "content": "<p>Another question is whether this theorem should be an instance now that Lean allows loops in typeclass inference</p>",
        "id": 435435043,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1714065831
    },
    {
        "content": "<p>No, I'm afraid I've missed that one as I was looking for something with pseudoMetrizableSpace to patch my argument.. I'll give it a try right away</p>",
        "id": 435436653,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714066472
    },
    {
        "content": "<p>there is also a version for pseudo metrizability immediately prior to the theorem I linked</p>",
        "id": 435437142,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1714066676
    },
    {
        "content": "<p>Yes, I recall what went wrong there for me when I tried the pseudo-metrizable version earlier today: Lean doesn't know that the two induced topological spaces agree</p>",
        "id": 435437267,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714066717
    },
    {
        "content": "<p>This is the problem (I'm sticking with pseudo metrizability so I don't need to assume it is a T0 space)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">Uniformity</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">TotallyBounded.isSeparable6</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">UniformSpace</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">IsCountablyGenerated</span> <span class=\"o\">(</span><span class=\"bp\">ùì§</span> <span class=\"n\">Œ±</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">TotallyBounded</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">TopologicalSpace.IsSeparable</span> <span class=\"n\">s</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">UniformSpace.pseudoMetrizableSpace</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Metric.totallyBounded_iff.mp</span> <span class=\"n\">h</span> <span class=\"c1\">-- Lean doesn't know the spaces agree, so this line raises an error</span>\n  <span class=\"n\">choose</span><span class=\"bp\">!</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">hfb</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">Nat.one_div_pos_of_nat</span><span class=\"o\">)</span>\n  <span class=\"n\">use</span> <span class=\"bp\">‚ãÉ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">apply</span> <span class=\"n\">Set.countable_iUnion</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">countable</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.mem_closure_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">Œµ</span> <span class=\"n\">hŒµ</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">exists_nat_one_div_lt</span> <span class=\"n\">hŒµ</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">b</span> <span class=\"bp\">‚àà</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">Set.mem_iUnion.mp</span> <span class=\"o\">(</span><span class=\"n\">hfb</span> <span class=\"n\">n</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_iUnion</span><span class=\"o\">,</span> <span class=\"n\">Metric.mem_ball</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hi</span>\n      <span class=\"n\">use</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi.1</span>\n      <span class=\"n\">apply</span> <span class=\"n\">lt_trans</span> <span class=\"n\">hi.2</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inv_eq_one_div</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hn</span>\n    <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 435437514,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714066817
    },
    {
        "content": "<p>Probably this is very easy to resolve, but I'm probably doing something stupid here...</p>",
        "id": 435437824,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714066961
    },
    {
        "content": "<p>You say \"lean doesn't know the spaces agree\", but you haven't even introduced a metric. Your first <code>have</code> just says that the space is metrizable</p>",
        "id": 435439508,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1714067534
    },
    {
        "content": "<p>Try </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">UniformSpace.pseudoMetricSpace</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span>\n<span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Metric.totallyBounded_iff.mp</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 435439677,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1714067595
    },
    {
        "content": "<p>Oh, I see! Thanks, I‚Äôll try it after dinner!</p>",
        "id": 435439748,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714067624
    },
    {
        "content": "<p>Thanks, that worked (I forgot about <code>letI</code>)!</p>",
        "id": 435445773,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714069943
    },
    {
        "content": "<p>Casual reminder than the <code>I</code> in <code>letI</code> changed meaning from Lean 3 to Lean 4 (from \"instance\" to \"inline\") and you can also use <code>let</code> and have it picked up by the typeclass system</p>",
        "id": 435794572,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1714257441
    },
    {
        "content": "<p>Also, I think it would really help beginners (and not only them, I‚Äôve lost some time recently due to this‚Ä¶) if we could have a warning when using <code>have</code> on data and suggest using <code>let</code>/<code>set</code> instead.</p>",
        "id": 435794680,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1714257584
    },
    {
        "content": "<p>That's a good idea, but I'll point out that it wouldn't have helped here. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformSpace.pseudoMetrizableSpace#doc\">docs#UniformSpace.pseudoMetrizableSpace</a> <em>is</em> <code>Prop</code>-valued. The fix required switching to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformSpace.pseudoMetricSpace#doc\">docs#UniformSpace.pseudoMetricSpace</a></p>",
        "id": 435795101,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1714258072
    },
    {
        "content": "<p>There is a PR with the <code>have/let</code> linter: <a href=\"https://github.com/leanprover-community/mathlib4/pull/12190\">#12190</a>.</p>",
        "id": 435795730,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714258744
    }
]