[
    {
        "content": "<p>im not sure how to write a functions that maps something to a monad (or other Typeclass)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"c1\">--also needs [Monad r] of result?</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Option</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">multiMonad</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">Unit</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- in IO</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- in Option</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>i could do something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Monad</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>but here i would need to create a new Monad instance</p>",
        "id": 425268490,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709806166
    },
    {
        "content": "<p>You can use a dependent product, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sigma#doc\">docs#Sigma</a>, as a return type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Monad</span> <span class=\"n\">m</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">IO</span><span class=\"o\">,</span> <span class=\"n\">inferInstance</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">Option</span><span class=\"o\">,</span> <span class=\"n\">inferInstance</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- this line is a bit of a hack</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Sigma.snd</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">multiMonad</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"c1\">-- in IO</span>\n    <span class=\"n\">return</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"c1\">-- in Option</span>\n    <span class=\"n\">return</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 425275307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709808270
    },
    {
        "content": "<p>inferInstance is pretty cool, good to know<br>\nis it hacky because attribute is a bad style? havent seen that yet. But i have access to the typeclass anyway like that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">multiMonad</span>  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>   <span class=\"c1\">-- less hacky?</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 425278424,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709809291
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monad#doc\">docs#Monad</a></p>",
        "id": 425279802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709809758
    },
    {
        "content": "<p><code>Monad</code> is a type, so you're probably better off with <code>let</code> rather than <code>have</code> (we use <code>have</code> for proofs, so it forgets the term).</p>",
        "id": 425279874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709809790
    },
    {
        "content": "<p>It's hacky because globally it doesn't make sense as an instance. Your spelling is indeed better practice</p>",
        "id": 425302500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709818157
    },
    {
        "content": "<p><code>have</code> vs <code>let</code> is irrelevant here; the \"it forgets\" only applies within the definition, it's not forgotten forever</p>",
        "id": 425302605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709818199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> has marked this topic as resolved.</p>",
        "id": 425307149,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709819713
    },
    {
        "content": "<p>Here's perhaps a better answer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"c1\">--also needs [Monad r] of result?</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Option</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Monad</span> <span class=\"n\">IO</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Monad</span> <span class=\"n\">Option</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">multiMonad</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">Unit</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- in IO</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- in Option</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 425399287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709847386
    }
]