[
    {
        "content": "<p>I am attempting to resolve some sorries in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7102\">this PR</a>, see <a href=\"https://live.lean-lang.org/#code=import%20Mathlib.Combinatorics.SimpleGraph.Connectivity%0D%0Aimport%20Mathlib.Algebra.BigOperators.Basic%0D%0A%0D%0Aopen%20Finset%20Function%0D%0Aopen%20scoped%20BigOperators%0D%0A%0D%0Anamespace%20SimpleGraph%0D%0Avariable%20%7B%CE%B1%20%CE%B2%20%3A%20Type*%7D%20%5BFintype%20%CE%B1%5D%20%5BFintype%20%CE%B2%5D%20%5BDecidableEq%20%CE%B1%5D%20%5BDecidableEq%20%CE%B2%5D%20%7BG%20%3A%20SimpleGraph%20%CE%B1%7D%0D%0A%20%20%7Ba%20b%20%3A%20%CE%B1%7D%20%7Bp%20%3A%20G.Walk%20a%20b%7D%0D%0A%0D%0Anamespace%20Walk%0D%0A%0D%0Alemma%20support_tail%20%7Bp%20%3A%20G.Walk%20v%20v%7D%20(hp%20%3A%20%C2%ACp.Nil)%20%3A%0D%0A%20%20%20%20(p.tail%20hp).support%20%3D%20p.support.tail%20%3A%3D%20by%0D%0A%20%20rw%20%5B%E2%86%90%20cons_support_tail%20p%20hp%2C%20List.tail_cons%5D%0D%0A%0D%0Alemma%20Nil_iff_eq_nil%20%3A%20%E2%88%80%20%7Bp%20%3A%20G.Walk%20v%20v%7D%2C%20p.Nil%20%E2%86%94%20p%20%3D%20nil%0D%0A%20%20%7C%20.nil%20%7C%20.cons%20_%20_%20%3D%3E%20by%20simp%0D%0A%0D%0Alemma%20Nil.eq_nil%20%7Bp%20%3A%20G.Walk%20v%20v%7D%20(hp%20%3A%20p.Nil)%20%3A%20p%20%3D%20Walk.nil%20%3A%3D%20Nil_iff_eq_nil.1%20hp%0D%0A%0D%0Alemma%20IsCircuit.not_Nil%20%7Bp%20%3A%20G.Walk%20v%20v%7D%20(hp%20%3A%20IsCircuit%20p)%20%3A%20%C2%AC%20p.Nil%20%3A%3D%20(hp.ne_nil%20%C2%B7.eq_nil)%0D%0A%0D%0A%2F--%20A%20hamiltonian%20path%20is%20a%20walk%20%60p%60%20that%20visits%20every%20vertex%20exactly%20once.%20Note%20that%20while%0D%0Athis%20definition%20doesn't%20contain%20that%20%60p%60%20is%20a%20path%2C%20%60p.isPath%60%20gives%20that.%20-%2F%0D%0Adef%20IsHamiltonian%20(p%20%3A%20G.Walk%20a%20b)%20%3A%20Prop%20%3A%3D%20%E2%88%80%20a%2C%20p.support.count%20a%20%3D%201%0D%0A%0D%0Astructure%20IsHamiltonianCycle%20(p%20%3A%20G.Walk%20a%20a)%20extends%20p.IsCycle%20%3A%20Prop%20%3A%3D%0D%0A%20%20isHamiltonian_tail%20%3A%20(p.tail%20toIsCycle.not_Nil).IsHamiltonian%0D%0A%0D%0Avariable%20%7Bp%20%3A%20G.Walk%20a%20a%7D%0D%0A%0D%0Alemma%20IsHamiltonianCycle.isCycle%20(hp%20%3A%20p.IsHamiltonianCycle)%20%3A%20p.IsCycle%20%3A%3D%0D%0A%20%20hp.toIsCycle%0D%0A%0D%0Alemma%20IsHamiltonianCycle.map%20%7BH%20%3A%20SimpleGraph%20%CE%B2%7D%20(f%20%3A%20G%20%E2%86%92g%20H)%20(hf%20%3A%20Bijective%20f)%0D%0A%20%20%20%20(hp%20%3A%20p.IsHamiltonianCycle)%20%3A%20(p.map%20f).IsHamiltonianCycle%20where%0D%0A%20%20toIsCycle%20%3A%3D%20by%0D%0A%20%20%20%20rw%20%5Bmap_isCycle_iff_of_injective%5D%0D%0A%20%20%20%20exact%20isCycle%20hp%0D%0A%20%20%20%20exact%20Bijective.injective%20hf%0D%0A%20%20isHamiltonian_tail%20%3A%3D%20by%0D%0A%20%20%20%20simp%20%5BIsHamiltonian%2C%20support_tail%2C%20hf.surjective.forall%2C%20List.count_tail%2C%20hf.injective%5D%0D%0A%20%20%20%20intro%20x%0D%0A%20%20%20%20split%0D%0A%20%20%20%20%C2%B7%20sorry%0D%0A%20%20%20%20%C2%B7%20sorry\">#mwe</a> </p>\n<p>The progress I have made has been quite slow (and time consuming), so I would love some feedback on whether the approach I have taken could actually end up in closing the proof. Specifically, I am curious whether the two cases that have appeared are solvable in Lean.</p>",
        "id": 440636675,
        "sender_full_name": "Lode Vermeulen",
        "timestamp": 1716643888
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">isHamiltonian_tail</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">IsHamiltonian</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">support_tail</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hf</span><span class=\"bp\">.</span><span class=\"n\">surjective</span><span class=\"bp\">.</span><span class=\"k\">forall</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">count_tail</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hf</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">    </span><span class=\"n\">rcases</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">ne_nil</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">support_cons</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">head_cons</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hf</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"bp\">.</span><span class=\"n\">eq_iff</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">count_cons</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">add_tsub_cancel_right</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">isHamiltonian_tail</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 440639158,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716646150
    },
    {
        "content": "<p>This is like magic to me. Could you explain how <code>rcases</code> in combination with that pattern constructs two walks <code>nil</code> and <code>cons</code>. And how does this solve the goal, mathematically?</p>",
        "id": 440647299,
        "sender_full_name": "Lode Vermeulen",
        "timestamp": 1716653544
    },
    {
        "content": "<p>This is an expanded version of the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">isHamiltonian_tail</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">IsHamiltonian</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">support_tail</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hf</span><span class=\"bp\">.</span><span class=\"n\">surjective</span><span class=\"bp\">.</span><span class=\"k\">forall</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">count_tail</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hf</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">    </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">nil</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">      </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">ne_nil</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">      </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">hf</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"bp\">.</span><span class=\"n\">eq_iff</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">count_cons</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsHamiltonian</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">isHamiltonian_tail</span>\n<span class=\"w\">      </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</code></pre></div>\n<p>If you look at the definition of <code>Walk</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">Walk</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">nil</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Walk</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"n\">u</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">Adj</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Walk</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Walk</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"n\">w</span>\n</code></pre></div>\n<p>You will see that it has two constructors, and <code>p : G.Walk a a</code> must be one of it.<br>\n<code>cases</code> (or <code>rcases</code>) is a tactic that allows you to split this into <code>p = nil</code> or <code>p = cons y p'</code>.<br>\nThe first case cannot happen because of <code>IsCircuit.ne_nil</code>, and the latter is more or less by definition. A key is <code>hf.injective.eq_iff</code> that rewrites <code>if f x = f a then _ else _</code> to <code>if x = a then _ else _</code> but doing this long winded via <code>split</code> should work as well.</p>",
        "id": 440654908,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716661453
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 440655637,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716662295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, wrong topic?</p>",
        "id": 440656211,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716662925
    },
    {
        "content": "<p>Yes, I don’t know what happened, sorry about the noise.</p>",
        "id": 440657888,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716664660
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>!</p>",
        "id": 440803898,
        "sender_full_name": "Lode Vermeulen",
        "timestamp": 1716798975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690587\">Lode Vermeulen</span> has marked this topic as resolved.</p>",
        "id": 440803923,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716798985
    }
]