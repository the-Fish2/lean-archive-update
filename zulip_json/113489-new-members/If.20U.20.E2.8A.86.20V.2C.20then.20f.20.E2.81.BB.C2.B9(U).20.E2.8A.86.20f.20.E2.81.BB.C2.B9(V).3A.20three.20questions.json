[
    {
        "content": "<p>Here's a simple theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">hx</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"n\">hx</span>\n</code></pre></div>\n<p>A few questions:</p>\n<ol>\n<li>\n<p>Is this in mathlib?</p>\n</li>\n<li>\n<p>If I try to simplify the proof to <code>fun _ ↦ h</code>, I get the message </p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>Why doesn't this work?</p>\n<ol start=\"3\">\n<li>If I try to prove the theorem using <code>by exact?</code>, it suggests <code>by exact fun ⦃a⦄ ↦ h</code>. This doesn't work for the same reason as <code>fun _ ↦ h</code> doesn't. Is <code>exact?</code> supposed to be able to suggest an incorrect proof?</li>\n</ol>",
        "id": 425000314,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1709696622
    },
    {
        "content": "<p>Hi for 1. I searched <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Image.html#Set.preimage_mono\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Image.html#Set.preimage_mono</a> with loogle <a href=\"https://loogle.lean-lang.org/?q=%7C-+_+%E2%81%BB%C2%B9%27+_+%E2%8A%86+_+%E2%81%BB%C2%B9%27+_\">https://loogle.lean-lang.org/?q=%7C-+_+%E2%81%BB%C2%B9%27+_+%E2%8A%86+_+%E2%81%BB%C2%B9%27+_</a></p>",
        "id": 425003807,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709698890
    },
    {
        "content": "<p>Thanks. I wasn't finding it because I was searching for theorems with the words \"preimage\" and \"subset\" in the name.</p>",
        "id": 425005300,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1709699883
    },
    {
        "content": "<p>Might be wrong, but for 1 note that  <code>U ⊆ V := ∀ ⦃a⦄, a ∈ U → a ∈ V</code>,  which is not the same as  <code>a ∈ U → a ∈ V</code> (for some fixed a). Of course if it works \"forall\" it works for some  instantiating the quantifier, but term mode is dumb and can't infer what to substitute on its own. By comparison, if you go to tactic mode and do the equivalent: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>it works just fine</p>",
        "id": 425124093,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709741440
    },
    {
        "content": "<p>You could also do one of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 425133957,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1709744000
    },
    {
        "content": "<p>I see. Thanks for the answers. Any insight on the third question? It seems like it might actually be a bug.</p>",
        "id": 425187936,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1709763256
    },
    {
        "content": "<p>Yeah, I'd think that's a bug as well</p>",
        "id": 425193622,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709765910
    },
    {
        "content": "<p>I think this was reported a while ago. In general it's best to run <code>exact</code> after you can't do <code>intro</code> any more because it might not get binders right (typeclasses also mess it up if they're right of the colon)</p>",
        "id": 425242977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709796792
    }
]