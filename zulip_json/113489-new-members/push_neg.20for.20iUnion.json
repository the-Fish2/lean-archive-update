[
    {
        "content": "<p>Hello,</p>\n<p>I am proving the Schröder-Bernstein Theorem in MIL and feeling excited about it. But I ran into a problem and didn't know why it didn't work or an alternative solution.</p>\n<p>I am doing this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sb_right_inv</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">sbSet</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">invFun</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">g</span> <span class=\"bp\">''</span> <span class=\"n\">univ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n</code></pre></div>\n<p>And the monitor showing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n    <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n    <span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">β</span>\n    <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n    <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n    <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n    <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">sbSet</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n    <span class=\"bp\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">g</span> <span class=\"bp\">''</span> <span class=\"n\">univ</span>\n</code></pre></div>\n<p>Some definitions are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sbAux</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">univ</span> <span class=\"bp\">\\</span> <span class=\"n\">g</span> <span class=\"bp\">''</span> <span class=\"n\">univ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">sbAux</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sbSet</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⋃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">sbAux</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sbFun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">sbSet</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">invFun</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I am wondering why <code>push_neg</code> doesn't work here and what's the optimal solution to push the negative signe in this case.</p>\n<p>Thanks for your helping!</p>",
        "id": 409579809,
        "sender_full_name": "Tian Hsia",
        "timestamp": 1703250295
    },
    {
        "content": "<p><code>push_neg</code> does not unfold definitions, so you need to unfold <code>sbSet</code>, and probably use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.mem_iUnion#doc\">docs#Set.mem_iUnion</a> too.</p>",
        "id": 409591979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703255633
    },
    {
        "content": "<p>I just had a look and notice that the book gives a beginning of this proof that avoids this issue. Why did you discard it?</p>",
        "id": 409592181,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703255724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/push_neg.20for.20iUnion/near/409592181\">said</a>:</p>\n<blockquote>\n<p>I just had a look and notice that the book gives a beginning of this proof that avoids this issue. Why did you discard it?</p>\n</blockquote>\n<p>I wrote my proof on paper first and wanted to copy it. I understand the proof given by the book and it's definitely more elegant in lean.</p>\n<p>Thank you for your help, I thought that negative signs before set operations were common so there should be some quick way to push it.</p>",
        "id": 409593345,
        "sender_full_name": "Tian Hsia",
        "timestamp": 1703256295
    }
]