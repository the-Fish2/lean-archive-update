[
    {
        "content": "<p>What implementations are there for finite probability spaces?</p>\n<p>I'm looking for an implementation where:</p>\n<ol>\n<li>The event/condition variables of a distribution are part of its type. For example, a conditional distribution $P(Color \\mid Species)$ would have a type like <code>Distribution Color Species</code></li>\n<li>Computing joint/product/marginal/conditional distributions verifies that the input distributions are compatible, and the result distribution has the correct type. For example, something like</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">probability_of_color_conditioned_on_species</span> <span class=\"o\">:</span> <span class=\"n\">Distribution</span> <span class=\"n\">Color</span> <span class=\"n\">Species</span>\n<span class=\"n\">probability_of_species</span> <span class=\"o\">:</span> <span class=\"n\">Distribution</span> <span class=\"n\">Species</span> <span class=\"n\">unit</span>\n\n<span class=\"n\">probability_of_color_and_species</span> <span class=\"o\">:</span> <span class=\"n\">Distribution</span> <span class=\"o\">(</span><span class=\"n\">Color</span> <span class=\"bp\">\\</span><span class=\"n\">times</span> <span class=\"n\">Species</span><span class=\"o\">)</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">probability_of_color_conditioned_on_species</span> <span class=\"bp\">*</span> <span class=\"n\">probability_of_species</span>\n</code></pre></div>\n<ol>\n<li>The functions are computible, so that I could use it with real data. Hopefully, given a non-computible implementation, I would be able to modify it to be computible myself.</li>\n</ol>\n<p>So far I'm aware of <span class=\"user-mention\" data-user-id=\"690858\">@Daniel Weber</span>'s implementation <a href=\"https://github.com/Command-Master/lean-bourgain/blob/a11ef7f7a781556f8bbcef19ba1a2c5ac7e71abc/Pseudorandom/PMF.lean#L21-L22\">here</a>. I'm wondering what else exists.</p>\n<p>Context: I needed to manipulate discrete distributions in python in the past. I built a library for this. It tracked event and condition variables, and enforced compatibility when combining distributions. But none of that tracking/enforcement was at the type level, because python makes that impossible AFAIK. Since then I've been itching to make/see a library like that, with type-level tracking/enforcement of event/condition variables.</p>",
        "id": 439812512,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1716296712
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> isn't computable, so if you want to make the functions computable you have to restrict the possible probabilities</p>",
        "id": 439813714,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1716297084
    },
    {
        "content": "<blockquote>\n<p>R isn't computable</p>\n</blockquote>\n<p>Yea, I ran into that on my first crack at this last week. I got around it so far by using <code>NNRat</code>.</p>",
        "id": 439814038,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1716297172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"690858\">@Daniel Weber</span> Does your implementation deal with conditional distributions? I see <code>instMulFinPMF</code> takes product distributions, but haven't found conditionals yet.</p>",
        "id": 439814402,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1716297267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"655293\">Michael Fishman</span> <a href=\"#narrow/stream/113489-new-members/topic/Finite.20probability.20spaces.20implementations/near/439814402\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"690858\">Daniel Weber</span> Does your implementation deal with conditional distributions? I see <code>instMulFinPMF</code> takes product distributions, but haven't found conditionals yet.</p>\n</blockquote>\n<p>No, it doesn't</p>",
        "id": 439815095,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1716297465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"655293\">Michael Fishman</span> <a href=\"#narrow/stream/113489-new-members/topic/Finite.20probability.20spaces.20implementations/near/439814038\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>R isn't computable</p>\n</blockquote>\n<p>Yea, I ran into that on my first crack at this last week. I got around it so far by using <code>NNRat</code>.</p>\n</blockquote>\n<p>Perhaps it's better to just use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearOrderedField#doc\">docs#LinearOrderedField</a> (or maybe just <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearOrderedRing#doc\">docs#LinearOrderedRing</a> is enough) and let the user worry about computability</p>",
        "id": 439815320,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1716297524
    },
    {
        "content": "<p>I like that idea!</p>",
        "id": 439817352,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1716298073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"690858\">@Daniel Weber</span> Why did you use Real numbers, and add a condition that they are $&gt;= 0$, instead of using NNReal?</p>",
        "id": 445614950,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1718809437
    },
    {
        "content": "<p>I needed to subtract probabilities for statistical distance, and it was really inconvenient with NNReal. In retrospect it might've been better to just use <code>dist</code>, I'm not sure</p>",
        "id": 445617231,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1718809546
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 445617740,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1718809566
    }
]