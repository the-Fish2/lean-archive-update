[
    {
        "content": "<p>Is it possible to define an instance of a type class for a dependent type?  I'm aware of the conversation \"<a href=\"#narrow/stream/113489-new-members/topic/Type.20classes.20and.20dependent.20types\">Type classes and dependent types</a>\" but couldn't infer my answer from that.</p>\n<p>To be concrete, suppose I'm trying to define a ToList type class that says I can generate a list of the elements of the type, and I'm trying to define an instance of ToList for Fin k.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">Range</span>\n\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">ToList</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">toList</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kn\">instance</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ToList</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">toList</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">finRange</span><span class=\"w\"> </span><span class=\"n\">k</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">toList</span>\n</code></pre></div>\n<p>The definition of xs fails with the error message \"invalid field 'toList', the environment does not contain 'Fin.toList': x has type Fin 10\".</p>",
        "id": 447551119,
        "sender_full_name": "Mark R. Tuttle",
        "timestamp": 1719512972
    },
    {
        "content": "<p>Functions of type classes do not get attached to the namespace of types they are implemented for, you will have to use <code>ToList.toList foo</code> or you can use the <code>export</code> command to get the <code>toList</code> out of the <code>ToList</code> namespace.</p>\n<p>No there is no inherent limitation of typeclasses that keeeps them away from dependent types, it works fine and is used all the time.</p>",
        "id": 447551595,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719513106
    },
    {
        "content": "<p>I see, as in Add.add in the <a href=\"https://lean-lang.org/theorem_proving_in_lean4/type_classes.html\">Type Classes</a> chapter:  </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">Add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</code></pre></div>\n<p>Thanks.</p>",
        "id": 447553746,
        "sender_full_name": "Mark R. Tuttle",
        "timestamp": 1719513677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"717546\">Mark R. Tuttle</span> has marked this topic as resolved.</p>",
        "id": 447553830,
        "sender_full_name": "Notification Bot",
        "timestamp": 1719513702
    }
]