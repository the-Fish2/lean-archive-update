[
    {
        "content": "<p>How do I use <code>∧</code> and <code>∨</code> to shorten this if-else part of a definition?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">isRowReduced_row</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">then</span>\n        <span class=\"o\">(</span><span class=\"n\">isRowReduced_col</span> <span class=\"o\">(</span><span class=\"n\">cl.get</span> <span class=\"o\">⟨(((</span><span class=\"n\">isRowReduced_row</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"mi\">0</span><span class=\"o\">),((</span><span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">Nat.zero_lt_succ</span> <span class=\"n\">as.length</span><span class=\"o\">⟩)</span> <span class=\"bp\">▸</span> <span class=\"n\">indLastOne_lt_rowLength</span> <span class=\"n\">a</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span><span class=\"o\">)⟩))</span> <span class=\"bp\">∨</span>\n          <span class=\"n\">isRowReducedAux</span> <span class=\"n\">as</span> <span class=\"n\">cl</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">i.castSucc</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h0'</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p><code>(isRowReduced_row a).1</code> is of type <code>Bool</code></p>",
        "id": 438973295,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715850445
    },
    {
        "content": "<p>If you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> you might get an answer, but I'm not sure what the goal is — why do you want it shorter?</p>",
        "id": 439055504,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715875862
    },
    {
        "content": "<p>No particular reason, I'm just seeing if I can get rid of the <code>else false</code><br>\nHere's an mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basis</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">rowListofMat</span> <span class=\"o\">:=</span> <span class=\"n\">List.map</span> <span class=\"n\">List.ofFn</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rowListLength_eq_numRow</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rowListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rowListofMat_elt_length_eq_numCol</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">rowListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rowLengthEq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">j</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">colListofMat</span> <span class=\"o\">:=</span> <span class=\"n\">List.map</span> <span class=\"n\">List.ofFn</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"n\">M.transpose</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">colListLength_eq_numCol</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">colListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">row_allZerosBeforeFirstOne</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.isPrefixOf</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"o\">(</span><span class=\"n\">row.indexOf</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">row</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isRowReduced_row</span> <span class=\"o\">(</span><span class=\"n\">ri</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"bp\">×</span><span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">ri.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">==</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span><span class=\"n\">none</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"n\">ri.indexOf</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">ri.length</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span><span class=\"n\">none</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">if</span> <span class=\"n\">row_allZerosBeforeFirstOne</span> <span class=\"n\">ri</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span><span class=\"n\">ri.indexOf</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span><span class=\"n\">none</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isRowReduced_col</span> <span class=\"o\">(</span><span class=\"n\">cj</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">List.all</span> <span class=\"o\">(</span><span class=\"n\">List.erase</span> <span class=\"n\">cj</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">==</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">indFirstOne_lt_rowLength</span> <span class=\"o\">(</span><span class=\"n\">rl</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">isRowReduced_row</span> <span class=\"n\">rl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">rl.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">==</span><span class=\"mi\">0</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(((</span><span class=\"n\">isRowReduced_row</span> <span class=\"n\">rl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">rl.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">isRowReduced_row</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">isRowReduced_row</span> <span class=\"n\">rl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">==</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">isRowReduced_row</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">h1</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span>\n  <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">rl.indexOf</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">rl.length</span>\n    <span class=\"n\">apply</span> <span class=\"n\">List.indexOf_lt_length.mpr</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">lt_or_gt_of_ne</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">indlt</span><span class=\"bp\">|</span><span class=\"n\">indgt</span>\n    <span class=\"n\">exact</span> <span class=\"n\">List.indexOf_lt_length.mp</span> <span class=\"n\">indlt</span>\n    <span class=\"k\">have</span> <span class=\"n\">l1</span> <span class=\"o\">:=</span> <span class=\"n\">rl.indexOf_le_length</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:=</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">nl1</span> <span class=\"o\">:=</span> <span class=\"n\">not_le_of_gt</span> <span class=\"n\">indgt</span>\n    <span class=\"n\">contradiction</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">isRowReduced_row</span> <span class=\"n\">rl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">==</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">isRowReduced_row</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">h2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list_allZero</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">l.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">==</span><span class=\"mi\">0</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isRowReducedAux</span> <span class=\"o\">(</span><span class=\"n\">rl</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Rat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">cl</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Rat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">rl.get</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">cl.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">rl</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">as.get</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">as</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">as.mem_iff_get</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">i</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">as.get</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">i.castSucc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">i</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mem_iff_get</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">((</span><span class=\"n\">List.subset_cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n      <span class=\"k\">have</span> <span class=\"n\">l1</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Fin.castSucc</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"n\">l2</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">l1</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">l2</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">l2</span>\n    <span class=\"k\">if</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">list_allZero</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">isRowReducedAux</span> <span class=\"n\">as</span> <span class=\"n\">cl</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">i.castSucc</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h0'</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">if</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">isRowReduced_row</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">then</span>\n       <span class=\"o\">(</span><span class=\"n\">isRowReduced_col</span> <span class=\"o\">(</span><span class=\"n\">cl.get</span> <span class=\"o\">⟨(((</span><span class=\"n\">isRowReduced_row</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"mi\">0</span><span class=\"o\">),((</span><span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">Nat.zero_lt_succ</span> <span class=\"n\">as.length</span><span class=\"o\">⟩)</span> <span class=\"bp\">▸</span> <span class=\"n\">indFirstOne_lt_rowLength</span> <span class=\"n\">a</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span><span class=\"o\">)⟩))</span> <span class=\"bp\">∨</span>\n          <span class=\"n\">isRowReducedAux</span> <span class=\"n\">as</span> <span class=\"n\">cl</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">i.castSucc</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">h0'</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 439150864,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715922419
    },
    {
        "content": "<p>If you're asking \"is <code>if...then</code> without <code>else</code> valid syntax\" then the answer is \"no\". If not, then what are you asking?</p>",
        "id": 439182834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715937077
    },
    {
        "content": "<p>For example, <code>if P then True else if ¬Q then False else R</code> can be shortened to <code>P ∨ (Q ∧ R) </code>. Can something like that be done here?</p>",
        "id": 439184459,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715937731
    },
    {
        "content": "<p>Yes, you can do <code>∃ h2 : (isRowReduced_row a).1, (isRowReduced_col (cl.get ⟨(((isRowReduced_row a).2).getD 0),((h ⟨0,Nat.zero_lt_succ as.length⟩) ▸ indFirstOne_lt_rowLength a h2 h1)⟩)) ∨\n          isRowReducedAux as cl (by intro i; have := h (i.castSucc); rw [← (h0' i)] at this; exact this)</code></p>",
        "id": 439184794,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715937848
    },
    {
        "content": "<p>More clearly, <code>if h : P then Q h else False</code> is equivalent to <code>∃ h : P, Q h</code></p>",
        "id": 439184929,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715937898
    },
    {
        "content": "<p>Ohh okay, that's what I wanted. Thanks a lot!</p>",
        "id": 439185042,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715937937
    }
]