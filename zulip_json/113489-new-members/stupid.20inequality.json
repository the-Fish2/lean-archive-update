[
    {
        "content": "<p>What's the tactic that kills stuff like this? (If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>c</mi><mo>&lt;</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">1 \\le c &lt; 1/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/2</span></span></span></span> then false.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">extracted_1</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">this_4</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- simp fails</span>\n<span class=\"c1\">-- linarith fails</span>\n<span class=\"c1\">-- exact? fails</span>\n<span class=\"c1\">-- apply? junk</span>\n<span class=\"c1\">-- rw? junk</span>\n</code></pre></div>\n<p>I shouldn't have to look up some <code>lt_of_le_of_lt</code> kind of thing, right?... Thanks!</p>",
        "id": 420106257,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707243178
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 420106494,
        "sender_full_name": "David Renshaw",
        "timestamp": 1707243264
    },
    {
        "content": "<p>I wonder if linarith preprocessing ought to automatically do that kind of thing</p>",
        "id": 420106556,
        "sender_full_name": "David Renshaw",
        "timestamp": 1707243282
    },
    {
        "content": "<p>(Apparently <code>linarith</code> currently does not know what do with <code>2⁻¹</code>.)</p>",
        "id": 420106740,
        "sender_full_name": "David Renshaw",
        "timestamp": 1707243359
    }
]