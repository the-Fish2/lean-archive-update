[
    {
        "content": "<p>I'm working my way thru FPIL, and am stuck on Even Number Literals exercise in section 4.2.  Is there an answer I can review by myself, or if not, can someone give me hint/answer?</p>\n<p>I've worked through the  Lean game which was fun.<br>\nI'm retired now, and toying with idea of getting my thesis into Lean4, as it is 100+ pages of ugly group theory calculation.<br>\nI'm also interested in learning functional programming, having coded a career in the old procedural way.<br>\nAny suggestions if about best way to learn (FPIL then TPIL, or vise-versa) appreciated.</p>",
        "id": 429114041,
        "sender_full_name": "Matthew Fisher",
        "timestamp": 1711226751
    },
    {
        "content": "<p>Were you able to define an <code>Even</code> datatype from the previous section's exercises?</p>",
        "id": 429126043,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711236358
    },
    {
        "content": "<p>the way I would solve it is to define two <code>OfNat</code> instances, one for <code>OfNat Even Nat.zero</code> and the other for <code>OfNat Even (n + 2)</code></p>",
        "id": 429126196,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711236498
    },
    {
        "content": "<p>the idea is that once you've defined the base case, the instance for <code>n + 2</code> can depend on typeclass requirements for <code>n</code></p>",
        "id": 429126334,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711236641
    },
    {
        "content": "<p>you basically want to say \"zero can be parsed as an Even, and n + 2 can be parsed as an Even if n can be parsed as an Even\"</p>",
        "id": 429126553,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711236804
    },
    {
        "content": "<p>let me know if you need more help here</p>",
        "id": 429126640,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711236875
    },
    {
        "content": "<p>(On a side note, the exercise says \"For the base instance, it is necessary to write <code>OfNat Even Nat.zero</code> instead of <code>OfNat Even 0</code>\" but that doesn't seem to be true...?)</p>",
        "id": 429126790,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711237063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/Are.20there.20answers.20for.20excercises.20in.20FPIL.3F/near/429126790\">said</a>:</p>\n<blockquote>\n<p>(On a side note, the exercise says \"For the base instance, it is necessary to write <code>OfNat Even Nat.zero</code> instead of <code>OfNat Even 0</code>\" but that doesn't seem to be true...?)</p>\n</blockquote>\n<p>(Yeah that seems wrong. I am pretty sure <code>Nat.zero</code> and <code>0</code> are currently indistinguishable by the typeclass infrastructure. In fact, I was recently playing around with removing the special casing that makes them so. Maybe this was written before that special casing was added.)</p>",
        "id": 429132935,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711241974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"703864\">@Matthew Fisher</span> Our solutions are here! </p>\n<p><a href=\"https://github.com/lean-ja/fp-lean-ja/tree/main/functional-programming-lean/solutions/Solutions\">https://github.com/lean-ja/fp-lean-ja/tree/main/functional-programming-lean/solutions/Solutions</a></p>",
        "id": 429142763,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711249299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"703864\">Matthew Fisher</span> has marked this topic as resolved.</p>",
        "id": 429152326,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711255474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"703864\">Matthew Fisher</span> has marked this topic as unresolved.</p>",
        "id": 429152343,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711255492
    },
    {
        "content": "<p>@Matt Diamond: I did define a datatype for Even, but it was a simple structure that had one Nat which stored n/2. </p>\n<p>I was struggling trying to figure out how to include some +2 kind of induction inside  an \"instance\".  @Asei Inoue: Thanks for the pointer to solutions.  From there I now see I needed to use the machinery built into type classes to solve the problem, rather than some code inside the instance. As the text hinted, \"This recursive search process means that type classes offer significantly more power than plain overloaded functions. \"</p>\n<p>That said, only being able to convert even numbers from 0 to 254 into an Even seems rather restrictive.   I probably just need to do some more reading, but I'm curious to learn how natural embeddings like Evens in Nat are handled for real.</p>",
        "id": 429153659,
        "sender_full_name": "Matthew Fisher",
        "timestamp": 1711256300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"703864\">Matthew Fisher</span> has marked this topic as resolved.</p>",
        "id": 429153663,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711256313
    },
    {
        "content": "<p>Where is this 254 figure coming from?</p>\n<p>I do mathematics in lean and I've never read FPIL by the way. I would start with Mathematics In Lean if your goal is to formalise mathematics.</p>",
        "id": 429173350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711270264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"703864\">Matthew Fisher</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Are.20there.20answers.20for.20excercises.20in.20FPIL.3F/near/429153659\">said</a>:</p>\n<blockquote>\n<p>That said, only being able to convert even numbers from 0 to 254 into an Even seems rather restrictive.</p>\n</blockquote>\n<p><a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20write.20an.20instance.20for.20Even.20number/near/375707208\">There's an advanced trick</a> to create an <code>OfNat</code> instance that has no practical limit. I'm not sure it's used anywhere, but it's a neat idea. It relies on the fact that Lean has a special internal representation for <code>Nat</code> and it has a fast implementation for <code>%</code>.</p>",
        "id": 429174998,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711271092
    }
]