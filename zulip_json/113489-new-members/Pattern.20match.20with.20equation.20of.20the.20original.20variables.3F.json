[
    {
        "content": "<p>Hi in the following code, how can I get an equation like <code>h</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Ex1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">case</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">c</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Ex1</span>\n</code></pre></div>",
        "id": 429171835,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711269172
    },
    {
        "content": "<p>Try <code>match h : (Int.ofNat a + Int.negSucc b) with</code></p>",
        "id": 429171992,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711269213
    },
    {
        "content": "<p>(those parentheses aren't necessary by the way)</p>",
        "id": 429172030,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711269223
    },
    {
        "content": "<p>It works! Thank you very much Kyle <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 429172206,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711269307
    },
    {
        "content": "<p>This <code>match h:</code> syntax seems not mentioned in both TPIL and MIL. Maybe we should add an example for it in TPIL? It seems quite useful sometimes<span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span></p>",
        "id": 429203826,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711287228
    }
]