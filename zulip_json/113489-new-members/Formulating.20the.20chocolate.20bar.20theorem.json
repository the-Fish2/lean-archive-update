[
    {
        "content": "<p>The chocolate bar theorem states that breaking a chocolate bar of size N (= a*b with a,b strictly positive integers) into N individual pieces always takes N-1 cuts.</p>\n<p>Informally, this is proved very easily by induction on N as it is clear (chocolate(N) being the number of cuts) that chocolate(1) = 0 and if we break a bar of size N+1 in two pieces of sizes N1 and N2 we find that chocolate(N+1) = 1 + chocolate(N1) + chocolate(N2) = 1 + N1 - 1 + N2 - 1 = N.</p>\n<p>I would like to prove it in Lean but actually I don't even know how to formulate it.<br>\nThe <a href=\"https://lean-lang.org/theorem_proving_in_lean/induction_and_recursion.html\">documentation</a> on induction doesn't help me much as I don't have such a direct induction as in the examples. Also, I might need to consider a sequence of cuts to formulate the problem properly.</p>\n<p>How would you formulate this problem in a smart (and possibly concise) way?</p>",
        "id": 410969222,
        "sender_full_name": "ElCondor",
        "timestamp": 1704267151
    },
    {
        "content": "<p>Is something like this good enough?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">iterate</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">iterate</span> <span class=\"n\">op</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cut</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">chocolate</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">iterate</span> <span class=\"n\">cut</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">iterate</span> <span class=\"n\">cut</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">N</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">cut</span> <span class=\"n\">N</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_add</span> <span class=\"n\">N</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 410972836,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1704269266
    },
    {
        "content": "<p>I don't think it accurately reflects the two-dimensionality of the problem.</p>",
        "id": 410972990,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704269341
    },
    {
        "content": "<p>This formalisation is more accurate, I hope:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ChocolateBar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">square</span> <span class=\"o\">:</span> <span class=\"n\">ChocolateBar</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hCut</span> <span class=\"o\">⦃</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">⦄</span> <span class=\"o\">:</span> <span class=\"n\">ChocolateBar</span> <span class=\"n\">a₁</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">ChocolateBar</span> <span class=\"n\">a₂</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">ChocolateBar</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vCut</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">⦄</span> <span class=\"o\">:</span> <span class=\"n\">ChocolateBar</span> <span class=\"n\">a</span> <span class=\"n\">b₁</span> <span class=\"bp\">→</span> <span class=\"n\">ChocolateBar</span> <span class=\"n\">a</span> <span class=\"n\">b₂</span> <span class=\"bp\">→</span> <span class=\"n\">ChocolateBar</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">+</span> <span class=\"n\">b₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ChocolateBar.cuts</span> <span class=\"o\">:</span> <span class=\"n\">ChocolateBar</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">square</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hCut</span> <span class=\"n\">choc₁</span> <span class=\"n\">choc₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">choc₁.cuts</span> <span class=\"bp\">+</span> <span class=\"n\">choc₂.cuts</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vCut</span> <span class=\"n\">choc₁</span> <span class=\"n\">choc₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">choc₁.cuts</span> <span class=\"bp\">+</span> <span class=\"n\">choc₂.cuts</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ChocolateBar.size_le_cuts_add_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">choc</span> <span class=\"o\">:</span> <span class=\"n\">ChocolateBar</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">choc.cuts</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">square</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">le_rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hCut</span> <span class=\"n\">choc₁</span> <span class=\"n\">choc₂</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cuts</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_add_add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.add_le_add</span> <span class=\"n\">choc₁.size_le_cuts_add_one</span> <span class=\"n\">choc₂.size_le_cuts_add_one</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vCut</span> <span class=\"n\">choc₁</span> <span class=\"n\">choc₂</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cuts</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_add_add_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.add_le_add</span> <span class=\"n\">choc₁.size_le_cuts_add_one</span> <span class=\"n\">choc₂.size_le_cuts_add_one</span>\n</code></pre></div>",
        "id": 410977226,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704271749
    },
    {
        "content": "<p>In fact, you can just as easily show that this is exactly the number of cuts needed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ChocolateBar.size_eq_cuts_add_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">choc</span> <span class=\"o\">:</span> <span class=\"n\">ChocolateBar</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">choc.cuts</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">square</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hCut</span> <span class=\"n\">choc₁</span> <span class=\"n\">choc₂</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cuts</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_add_add_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">size_eq_cuts_add_one</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">size_eq_cuts_add_one</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vCut</span> <span class=\"n\">choc₁</span> <span class=\"n\">choc₂</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cuts</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_add_add_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">size_eq_cuts_add_one</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">size_eq_cuts_add_one</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 410977495,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704271897
    },
    {
        "content": "<p>That looks quite clean!<br>\nIn your implementation, is this correct to call <code>ChocolateBar</code> a <strong>dependent</strong> inductive type?</p>",
        "id": 410989430,
        "sender_full_name": "ElCondor",
        "timestamp": 1704277374
    },
    {
        "content": "<p>Yes, I think so!</p>",
        "id": 410989553,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704277444
    }
]