[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">listify</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">?</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>        <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>    <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">listify</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Is it possible to fill in the '? 'legally?</p>",
        "id": 410803426,
        "sender_full_name": "Alok Singh",
        "timestamp": 1704178512
    },
    {
        "content": "<p>The type depends on <code>n</code> so you cannot. But you can make a dependent function if you want.</p>",
        "id": 410804226,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1704179059
    },
    {
        "content": "<p>can you hint me as to how? implementing it seems useful practice</p>",
        "id": 410804283,
        "sender_full_name": "Alok Singh",
        "timestamp": 1704179096
    },
    {
        "content": "<p>Here is an example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">listType</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">listType</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">listify</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">listType</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">listify</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 410804413,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1704179170
    },
    {
        "content": "<p>Is there a clean way to do it more inline, without defining a separate function listType?</p>",
        "id": 410825140,
        "sender_full_name": "Alok Singh",
        "timestamp": 1704191184
    },
    {
        "content": "<p>Defining the separate type is the cleaner option, but you can write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">listify</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">n.rec</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">listify</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 410825561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704191409
    },
    {
        "content": "<p>ok yeah the separate way is way better than that</p>",
        "id": 410825663,
        "sender_full_name": "Alok Singh",
        "timestamp": 1704191483
    },
    {
        "content": "<p>This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">listify</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">List</span> <span class=\"o\">:</span> <span class=\"n\">Function.End</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">listify</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 410828936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704193190
    }
]