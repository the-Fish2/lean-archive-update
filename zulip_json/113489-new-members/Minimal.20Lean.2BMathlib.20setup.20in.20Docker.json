[
    {
        "content": "<p>I am currently following these steps to set up new Lean+Mathlib projects:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">docker</span> <span class=\"n\">run</span> <span class=\"bp\">-</span><span class=\"n\">it</span> <span class=\"c1\">--rm ubuntu</span>\n<span class=\"n\">apt</span> <span class=\"n\">update</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">apt</span> <span class=\"n\">upgrade</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">apt</span> <span class=\"n\">install</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"n\">curl</span> <span class=\"n\">git</span>\n<span class=\"n\">curl</span> <span class=\"bp\">-</span><span class=\"n\">sS</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">elan</span><span class=\"bp\">-</span><span class=\"n\">init.sh</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">raw.githubusercontent.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">master</span><span class=\"bp\">/</span><span class=\"n\">elan</span><span class=\"bp\">-</span><span class=\"n\">init.sh</span>\n<span class=\"n\">sh</span> <span class=\"n\">elan</span><span class=\"bp\">-</span><span class=\"n\">init.sh</span> <span class=\"bp\">-</span><span class=\"n\">y</span>\n<span class=\"n\">source</span> <span class=\"bp\">$</span><span class=\"n\">HOME</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">env</span>\n<span class=\"n\">lake</span> <span class=\"n\">new</span> <span class=\"n\">project_name</span> <span class=\"n\">math</span>\n<span class=\"n\">cd</span> <span class=\"n\">project_name</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">echo</span> <span class=\"bp\">'</span><span class=\"kn\">import</span> <span class=\"n\">Mathlib'</span> <span class=\"bp\">&gt;</span> <span class=\"n\">ProjectName</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n<span class=\"n\">echo</span> <span class=\"bp\">'</span><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">!=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop'</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">ProjectName</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span>\n</code></pre></div>\n<p>I have a few questions:</p>\n<ol>\n<li>Is this the recommended method for setting up Lean+Mathlib in Docker?</li>\n<li>Any suggestions on improvements? Are there ways to enhance compile time?</li>\n<li>Are there any plans towards including <code>elan</code>, <code>lake</code>, or <code>lean</code> as official Debian packages?</li>\n</ol>",
        "id": 422302718,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1708374483
    },
    {
        "content": "<p>I don't know anything about docker, but I am pretty sure that the answer to 3 is that <code>lake</code> and <code>lean</code> are both very fast-moving right now and contributing them as official Debian packages will cause a lot of problems. The whole point of <code>elan</code> is that it will download the version of Lean which is right for the project you're running, and 9 times out of 10 this will not be the version that a package manager offers.</p>",
        "id": 422303223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708374647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> That's completely understandable for <code>lake</code> and <code>lean</code> (and what I assumed), but is <code>elan</code> sufficiently stable to be considered for inclusion?</p>",
        "id": 422303529,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1708374793
    },
    {
        "content": "<p>This would eliminate the need for the \"piping curl to shell\" process, which is often unpopular among users (example: <a href=\"https://0x46.net/thoughts/2019/04/27/piping-curl-to-shell/\">https://0x46.net/thoughts/2019/04/27/piping-curl-to-shell/</a>).</p>",
        "id": 422303894,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1708375021
    },
    {
        "content": "<p>To me, packaging <code>elan</code> for Debian doesn't sound out of the question. (The <code>rustup</code> tool (for the Rust programming language) is packaged now - and <code>elan</code> is basically a fork of <code>rustup</code>.)<br>\nI guess the key question is whether the Lean FRO has sufficient resources and interest to make that happen. :-)</p>",
        "id": 422307091,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1708376830
    },
    {
        "content": "<p><a href=\"https://packages.debian.org/sid/elan\">https://packages.debian.org/sid/elan</a></p>",
        "id": 422369573,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1708418418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Thanks! I wasn't aware of that Debian package. I'm happy to move away from the \"curl to shell\" approach.</p>\n<p>Here's my revised minimal Lean+Mathlib setup in Docker:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">docker</span> <span class=\"n\">run</span> <span class=\"bp\">-</span><span class=\"n\">it</span> <span class=\"c1\">--rm debian:unstable</span>\n<span class=\"n\">apt</span> <span class=\"n\">update</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">apt</span> <span class=\"n\">upgrade</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">apt</span> <span class=\"n\">install</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"n\">elan</span> <span class=\"n\">curl</span> <span class=\"n\">git</span>\n<span class=\"n\">elan</span> <span class=\"n\">toolchain</span> <span class=\"n\">install</span> <span class=\"n\">nightly</span>\n<span class=\"n\">elan</span> <span class=\"n\">default</span> <span class=\"n\">nightly</span>\n<span class=\"n\">lake</span> <span class=\"n\">new</span> <span class=\"n\">project_name</span> <span class=\"n\">math</span>\n<span class=\"n\">cd</span> <span class=\"n\">project_name</span><span class=\"bp\">/</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">echo</span> <span class=\"bp\">'</span><span class=\"kn\">import</span> <span class=\"n\">Mathlib'</span> <span class=\"bp\">&gt;</span> <span class=\"n\">ProjectName</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n<span class=\"n\">echo</span> <span class=\"bp\">'</span><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">!=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop'</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">ProjectName</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span>\n</code></pre></div>\n<p>Any suggestions on improvements?</p>\n<p><span class=\"user-mention\" data-user-id=\"373192\">@Christopher Hoskin</span> Thanks for packaging <code>elan</code> for Debian! Would it be sensible to add <code>curl</code> and <code>git</code> as dependencies (or \"recommended dependencies\") for <code>elan</code> in Debian? I believe that <code>lake new &lt;project_name&gt; math</code> and <code>lake exe cache get</code> might fail with somewhat cryptic error messages without <code>curl</code> and <code>git</code> installed.</p>",
        "id": 422387632,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1708424873
    },
    {
        "content": "<p>I think that's somewhat tricky, because it's not <code>elan</code> that depends on <code>curl</code>, or even <code>lake</code>; it's Mathlib</p>",
        "id": 422390406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708425858
    },
    {
        "content": "<p>Maybe it's worth noting that there is already a docker setup for mathlib at <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/.docker/gitpod/Dockerfile\">https://github.com/leanprover-community/mathlib4/blob/master/.docker/gitpod/Dockerfile</a></p>",
        "id": 422390624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708425939
    },
    {
        "content": "<p>This also comes with <code>python</code> and <code>requests</code>, which are needed by the <code>polyrith</code> tactic</p>",
        "id": 422390667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708425952
    },
    {
        "content": "<p>Current Lake does depend on curl</p>",
        "id": 422397741,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1708428530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113489-new-members/topic/Minimal.20Lean.2BMathlib.20setup.20in.20Docker/near/422397741\">said</a>:</p>\n<blockquote>\n<p>Current Lake does depend on curl</p>\n</blockquote>\n<p>The Debian <code>elan</code> package depends on <a href=\"https://packages.debian.org/sid/libcurl3-gnutls\">libcurl3-gnutls</a>. Is that sufficient, or are you saying that it needs the <a href=\"https://packages.debian.org/sid/curl\">curl</a> command line tool too?</p>\n<p>I looked at packaging lean3 - technically looked easy enough, but I'm not sure that a lean package would be particularly useful, at least from a mathlib point of view. Instead I opted for symlinking <code>/usr/bin/lean</code> and friends to <code>elan</code>, which downloads toolchains to <code>~/.elan/toolchains/</code>.</p>",
        "id": 422486650,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1708456987
    }
]