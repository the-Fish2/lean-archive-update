[
    {
        "content": "<p>I'm having an issue with trying to extract contradictions from more 'complex' equalities. I think its easiest to explain with an example.</p>\n<p>Consider the following proof example, which is clearly contrived (but a minimal example compared to what I'm actually trying to prove):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Boolean</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">TRUE</span> <span class=\"o\">:</span> <span class=\"n\">Boolean</span>\n<span class=\"bp\">|</span> <span class=\"n\">FALSE</span> <span class=\"o\">:</span> <span class=\"n\">Boolean</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Singleton</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Boolean</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">Double</span> <span class=\"o\">(</span><span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"n\">Boolean</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">Boolean</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">T.Double</span> <span class=\"n\">Boolean.TRUE</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">f_lemma</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">T.Double</span> <span class=\"n\">Boolean.FALSE</span> <span class=\"n\">Boolean.TRUE</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n    <span class=\"n\">split</span>\n    <span class=\"bp\">&lt;</span><span class=\"n\">stuck</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>I'm having trouble discharging the first case, which looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">h_1</span>\n<span class=\"n\">t</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">T</span>\n<span class=\"n\">b2</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Boolean</span>\n<span class=\"n\">heq</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">T.Double</span> <span class=\"n\">Boolean.FALSE</span> <span class=\"n\">Boolean.TRUE</span> <span class=\"bp\">=</span> <span class=\"n\">T.Double</span> <span class=\"n\">Boolean.TRUE</span> <span class=\"n\">b2</span><span class=\"bp\">✝</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">true</span> <span class=\"bp\">≠</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>The current proof obligation is trivial, but that is only because this is a contrived example. Suppose we want to prove this case by leveraging the obvious contradiction (which is that <code>T.Double Boolean.FALSE Boolean.TRUE</code> does not match with the pattern <code>T.Double Boolean.TRUE _</code>). This contradiction is clearly visible in <code>heq</code>, but I'm not sure how to convince Lean that these patterns do not match with that hypothesis. Any advice would be appreciated!</p>",
        "id": 423084853,
        "sender_full_name": "Alexander Gillon",
        "timestamp": 1708718156
    },
    {
        "content": "<p>Typically when a single hypothesis <code>heq</code> is already a contradiction, you can use <code>cases heq</code> to get Lean to realize it. In your case, you have an inaccessible term (you can't reference <code>heq✝</code>). One way to get around this is to explicitly introduce your case and provide it names for the terms. In your case it would look like this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">f_lemma</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">T.Double</span> <span class=\"n\">Boolean.FALSE</span> <span class=\"n\">Boolean.TRUE</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n    <span class=\"n\">split</span>\n    <span class=\"n\">case</span> <span class=\"n\">h_1</span> <span class=\"n\">t</span> <span class=\"n\">b2</span> <span class=\"n\">heq</span>\n    <span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"n\">heq</span>\n    <span class=\"n\">case</span> <span class=\"n\">h_2</span> <span class=\"n\">t</span> <span class=\"n\">x</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 423091277,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1708720934
    },
    {
        "content": "<p>I see, thanks! I guess multiple things were getting in my way there.</p>",
        "id": 423093185,
        "sender_full_name": "Alexander Gillon",
        "timestamp": 1708721750
    },
    {
        "content": "<p>A related issue: suppose I have something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Pattern1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">Pattern2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">T.Pattern1</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">T.Pattern1</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is there an easy way to extract the fact that <code>a = c</code> because the inductive type instances are equal?</p>",
        "id": 423105561,
        "sender_full_name": "Alexander Gillon",
        "timestamp": 1708727673
    },
    {
        "content": "<p>I think <code>cases h</code> will do the trick here. I don't know the details of how it works, but it strips off the common constructor leveraging injectivity, and automatically performs substitutions. You should be left with a goal of the form <code>a = a</code>.</p>",
        "id": 423106018,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1708727999
    },
    {
        "content": "<p>That does work, thanks.</p>",
        "id": 423106939,
        "sender_full_name": "Alexander Gillon",
        "timestamp": 1708728565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"694154\">Alexander Gillon</span> has marked this topic as resolved.</p>",
        "id": 423174758,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708785120
    }
]