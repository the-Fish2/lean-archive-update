[
    {
        "content": "<p>I followed the Lean manual to start a new project using <code>lake</code>, I have <code>Mathlib</code> as a dependency.  In the project, I first used the <code>Basic.lean</code> file and wrote a proof of the simple AMGM theorem as a practice, the proof is accepted by Lean and the project built fine.</p>\n<p>However, if I create a new file <code>AMGM.lean</code>, then copy the proof to the new file, Lean will complain that the <code>linarith</code> tactic cannot be found. What is the problem?</p>\n<p>For completeness of the description, the proof is like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">AMGM</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"k\">have</span> <span class=\"n\">sq_amgm</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">4</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">z</span><span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">have</span> <span class=\"n\">z_sq_pos</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">mul_self_nonneg</span> <span class=\"n\">z</span><span class=\"o\">]</span>\n        <span class=\"k\">have</span> <span class=\"n\">z_sq_div_4_pos</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n        <span class=\"n\">apply</span> <span class=\"n\">le_add_of_nonneg_left</span> <span class=\"n\">z_sq_div_4_pos</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span>  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x_y_pos</span>\n  <span class=\"k\">calc</span>\n  <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Real.sqrt_le_sqrt</span> <span class=\"n\">sq_amgm</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">x_plus_y_div_2_pos</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Real.sqrt_mul_self</span> <span class=\"n\">x_plus_y_div_2_pos</span>\n</code></pre></div>",
        "id": 416818367,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705682245
    },
    {
        "content": "<p>Sounds like you're missing an import</p>",
        "id": 416821662,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705683009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Problem.20with.20importing.20tactics.20in.20projects/near/416821662\">said</a>:</p>\n<blockquote>\n<p>Sounds like you're missing an import</p>\n</blockquote>\n<p>Thanks! That would be a great problem to have (since it's easy to fix). I am wondering why it works in <code>Basic.lean</code> but not other files.</p>",
        "id": 416821877,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705683064
    },
    {
        "content": "<p>Does <code>Basic.lean</code> have the import?</p>",
        "id": 416823790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705683547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Problem.20with.20importing.20tactics.20in.20projects/near/416823790\">said</a>:</p>\n<blockquote>\n<p>Does <code>Basic.lean</code> have the import?</p>\n</blockquote>\n<p>It doesn't.</p>",
        "id": 416827783,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705684565
    },
    {
        "content": "<p>I tried <code>import Mathlib</code> and thought it didn't work. It turns out it's just Lean is a bit slow. Thanks for the answers, I will close this one.</p>",
        "id": 416828151,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705684661
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671093\">Yunong Shi</span> has marked this topic as resolved.</p>",
        "id": 416828169,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705684666
    }
]