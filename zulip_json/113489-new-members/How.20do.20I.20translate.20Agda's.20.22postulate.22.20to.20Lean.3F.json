[
    {
        "content": "<p>Is there a way to translate Agda's \"<a href=\"https://agda.readthedocs.io/en/latest/language/postulates.html\">postulate</a>\" command to Lean?</p>\n<p>As a curiosity/for the sake of completeness, here's what I would like to use it for. I am adding lots of snippets to my notes on Lean, and it would be nice to be able to generalize this test</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">postulate</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"n\">postulate</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"n\">postulate</span> <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">a1</span><span class=\"o\">,</span><span class=\"n\">a2</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">b1</span><span class=\"o\">,</span><span class=\"n\">b2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">a1</span><span class=\"o\">,</span><span class=\"n\">a2</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">f1</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f2</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which means that a definition for \"postulate\" that is a quick hack using \"sorry\" would be perfectly fine...</p>",
        "id": 439561780,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1716207511
    },
    {
        "content": "<p>Does your first code work for you?</p>",
        "id": 439562307,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716207712
    },
    {
        "content": "<p>Maybe, though, <code>variable</code> is what you are looking for?</p>",
        "id": 439562354,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716207724
    },
    {
        "content": "<p>The first - the one-liner - works. But try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">a2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">a2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">f1</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f2</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I got lots of \"failed to synthesize instance\" errors...</p>",
        "id": 439563090,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1716207970
    },
    {
        "content": "<p>I get the same errors on the first as well...</p>",
        "id": 439563201,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716208021
    },
    {
        "content": "<p>Agda's postulate corresponds to lean's <code>axiom</code>, I believe</p>",
        "id": 439563605,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1716208177
    },
    {
        "content": "<p>GAAAAH! My fault!!! Try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">List</span>  <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">List.pure</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">List.bind</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">a2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">a2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">f1</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f2</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f1</span> <span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">a2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">a2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">f1</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f2</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It works. Sorry (and thanks)!</p>",
        "id": 439563690,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1716208204
    }
]