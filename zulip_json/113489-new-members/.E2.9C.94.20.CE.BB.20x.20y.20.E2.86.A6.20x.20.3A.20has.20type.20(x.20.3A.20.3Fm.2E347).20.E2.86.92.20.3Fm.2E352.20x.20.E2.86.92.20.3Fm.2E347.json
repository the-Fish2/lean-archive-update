[
    {
        "content": "<p>Why does the second argument, namely <code>y</code>,  represented with a type of <code>?m.352 x</code>? Why does it need the <code>x</code> in there, and is not simply <code>?m.352</code>?</p>",
        "id": 440528996,
        "sender_full_name": "George Kojonis",
        "timestamp": 1716563615
    },
    {
        "content": "<p>The type of y could depend on x</p>",
        "id": 440529463,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716563825
    },
    {
        "content": "<p>For example if you had a function <code>n → Fin n → Nat</code></p>",
        "id": 440529498,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716563854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <br>\nI mean it could, but it also might not? Guessing that's to do with the inner workings of Lean then? Not some theoretical matter?</p>",
        "id": 440530045,
        "sender_full_name": "George Kojonis",
        "timestamp": 1716564104
    },
    {
        "content": "<p>I'm not sure what you mean. It might, or it might not, so lean has to take into account that it might</p>",
        "id": 440530511,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716564293
    },
    {
        "content": "<p>I thought that it was assuming that it did, with this syntax</p>",
        "id": 440530620,
        "sender_full_name": "George Kojonis",
        "timestamp": 1716564340
    },
    {
        "content": "<p>So it says that the type of your lambda is \"a first argument of some type (m.347), a second argument that might depend on the first (m.352 applied to x), and returning the type of the first argument (m.347)\"</p>",
        "id": 440530744,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716564384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"720043\">George Kojonis</span> has marked this topic as resolved.</p>",
        "id": 440530774,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716564402
    },
    {
        "content": "<p>Thanks! Your framing really enlightened me. If it doesn't depend on x, it can just throw it way but if it does it can't just make it up out of thin air, so it needs to be a parameter.</p>",
        "id": 440530843,
        "sender_full_name": "George Kojonis",
        "timestamp": 1716564427
    }
]