[
    {
        "content": "<p>How can I complete this simple proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">IfgIsZeroThenInputIsk</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">hg</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Feel free to also show other proofs.</p>\n<p>I'd also appreciate suggestions for how I could have figured this out myself.</p>",
        "id": 441954163,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1717271128
    },
    {
        "content": "<p>try <code>unfold g at hg</code> (which will be a big step towards what you want), and in particular you'll see this is actually not the theorem you want to prove. The point is that <code>variable</code> just prepends <code>k : ℝ</code> as an hypothesis to anything that mentions <code>k</code>. So in this context either you make <code>k</code> into an actual constant by replacing <code>variable</code> with <code>axiom</code> (and get rid of he parenthesis) or you make it explicit, and write <code>g k x</code>, as is, <code>g</code> is really <code>g(k, x) = x - k</code></p>",
        "id": 441958283,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1717273163
    },
    {
        "content": "<p>(if you hover over <code>g</code>,  you should see that its type is not <code>ℝ → ℝ</code>, which should be a big alarm bell)</p>",
        "id": 441958913,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1717273476
    },
    {
        "content": "<p>Then once the theorem is fixed, ways to actually prove it would have been: </p>\n<ul>\n<li>guess that the name of the theorem is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=sub_eq_zero#doc\">docs#sub_eq_zero</a> ; ) and write <code>rwa [ ← sub_eq_zero]</code></li>\n<li>you could have loogled <code>?a - ?b = 0 -&gt; ?a = ?b</code> which gives <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=eq_of_sub_eq_zero#doc\">docs#eq_of_sub_eq_zero</a>, which also works</li>\n<li><code>exact?</code> and <code>apply?</code> are unlikely to work with overly broad equalities of this kind, so no point in trying</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=linarith#doc\">docs#linarith</a> works (as expected)</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=polyrith#doc\">docs#polyrith</a> works (also as expected)</li>\n</ul>\n<p>the last two tactics should be a good default try for this kind of stuff</p>",
        "id": 441960647,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1717274340
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Here is a proof of your theorem though, which remains (vacuously) true: </p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span><span class=\"w\"> </span><span class=\"n\">IfgIsZeroThenInputIsk</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">hg</span>\n<span class=\"w\">  </span><span class=\"n\">exfalso</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">hg</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">  </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">one_ne_zero</span><span class=\"w\"> </span><span class=\"n\">this</span>\n</code></pre></div>\n</div></div>",
        "id": 441962252,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1717275141
    },
    {
        "content": "<p>Thank you very much. I'd actually not given a MWE representative of my situation. In my situation <code>g</code> did have type <code>ℝ → ℝ</code>. But making that mistake in my MWE taught me a lot.</p>\n<p>And what I was missing in my actual example was <code>simp [g] at hg</code>. I had tried <code>rw</code> instead.</p>\n<p>Proof complete!</p>\n<p>Side question: is there a fast way to get <code>ℝ → ℝ</code> in Zulip messages?</p>",
        "id": 441966106,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1717277065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> has marked this topic as resolved.</p>",
        "id": 441966522,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717277332
    },
    {
        "content": "<blockquote>\n<p>Side question: is there a fast way to get <code>ℝ → ℝ</code> in Zulip messages?</p>\n</blockquote>\n<p>Cut and paste from Zulip?</p>\n<p>On my old phone <code>\\R</code> would turn into <code>ℝ</code> in the Zulip app because of some clever hack by <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> which I've now lost track of and so I can't do this on my new phone</p>",
        "id": 441967293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717277823
    },
    {
        "content": "<p>Thanks for reminding me about copy and paste <span aria-label=\"joking\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"joking\">:joking:</span></p>",
        "id": 441970974,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1717279046
    },
    {
        "content": "<p>I actually meant to say \"cut and paste from VS Code\"! Sorry!</p>",
        "id": 441983445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717284889
    }
]