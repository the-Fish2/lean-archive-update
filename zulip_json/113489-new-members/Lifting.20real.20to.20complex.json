[
    {
        "content": "<p>In a review of a PR, it was suggested to me to extend the following result to the complex numbers. I have tried doing so, but I find the coercions hard to work with; the last three steps of my proof currently are invalid over the complex numbers, while I would assume that most steps of the proof should carry over for complex numbers, as it is all written in terms of Bochner integrals... is it a matter of putting coercion arrows everywhere? As of now, every step in the Calc proof but the second is raising an error... </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Gaussian</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Cdf</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ENNReal</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">Real</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span>\n<span class=\"kn\">open</span> <span class=\"n\">Measure</span>\n\n\n<span class=\"sd\">/-- Expresses the integral over Ioi 0 of t^(a-1) * exp(-r*t) in terms of the Gamma function. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_exp_integral_Ioi</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Real.Gamma</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hri</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n  <span class=\"k\">calc</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">MeasureTheory.set_integral_congr</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_eq_mul_right_iff</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_rpow</span> <span class=\"n\">hr.le</span> <span class=\"n\">hx.le</span><span class=\"o\">]</span>\n        <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_rpow</span> <span class=\"n\">hri.le</span> <span class=\"n\">hr.le</span><span class=\"o\">,</span>\n          <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">mul_div</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">div_self</span> <span class=\"n\">hr.ne'</span><span class=\"o\">,</span> <span class=\"n\">one_rpow</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">true_or</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span>  <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">integral_comp_mul_left_Ioi</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">hr</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span>  <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Ioi</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"n\">Ioi_inj.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"n\">hri.le</span><span class=\"o\">]</span>\n      <span class=\"n\">rfl</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span>  <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">congr</span>\n      <span class=\"n\">ext</span> <span class=\"n\">x</span>\n      <span class=\"n\">exact</span> <span class=\"n\">smul_mul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span>  <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">integral_smul</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">rpow_one</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">rpow_add</span><span class=\"o\">]</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">add_sub_cancel'_right</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hri</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Real.Gamma</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Gamma_eq_integral</span> <span class=\"n\">ha</span><span class=\"o\">]</span>\n      <span class=\"n\">congr</span>\n      <span class=\"n\">ext</span> <span class=\"n\">x</span>\n      <span class=\"n\">group</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"sd\">/-- Expresses the integral over Ioi 0 of t^(a-1) * exp(-r*t) in terms of the Gamma function,</span>\n<span class=\"sd\">for complex a. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_exp_integral_Ioi_complex</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.re</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.Gamma</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hri</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n  <span class=\"k\">calc</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">MeasureTheory.set_integral_congr</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_eq_mul_right_iff</span><span class=\"o\">]</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mul_rpow</span> <span class=\"n\">hr.le</span> <span class=\"n\">hx.le</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n        <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_rpow</span> <span class=\"n\">hri.le</span> <span class=\"n\">hr.le</span><span class=\"o\">,</span>\n          <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">mul_div</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">div_self</span> <span class=\"n\">hr.ne'</span><span class=\"o\">,</span> <span class=\"n\">one_rpow</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">true_or</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span>  <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">cexp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n        <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">cexp</span> <span class=\"o\">(</span><span class=\"bp\">-↑</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">integral_comp_mul_left_Ioi</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">hr</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Ioi</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"n\">Ioi_inj.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">_root_.abs_of_nonneg</span> <span class=\"n\">hri.le</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span>  <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">congr</span>\n      <span class=\"n\">ext</span> <span class=\"n\">x</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span>  <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">integral_smul</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">rpow_one</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">rpow_add</span><span class=\"o\">]</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">add_sub_cancel'_right</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hri</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.Gamma</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Complex.Gamma_eq_integral</span> <span class=\"n\">ha</span><span class=\"o\">]</span>\n      <span class=\"n\">congr</span>\n      <span class=\"n\">ext</span> <span class=\"n\">x</span>\n      <span class=\"n\">group</span>\n</code></pre></div>",
        "id": 411070197,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704310856
    },
    {
        "content": "<p>The second step in the calc proof is very ugly right now, I was hoping to rewrite the necessary coe terms, but it is not very successful so far...</p>",
        "id": 411070290,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704310900
    },
    {
        "content": "<p>Some general pointers are much appreciated!</p>",
        "id": 411070321,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704310911
    },
    {
        "content": "<p>I can fill in the second part, but it is very ugly and deals with manipulating the coercions directly, I feel like it should be possible in an easier way...</p>",
        "id": 411071667,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704311513
    },
    {
        "content": "<p>This is what I have now for the second step, but the 'have' statement feels like it should be replaceable? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">_</span> <span class=\"bp\">=</span>  <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">cexp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n        <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">cexp</span> <span class=\"o\">(</span><span class=\"bp\">-↑</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">integral_comp_mul_left_Ioi</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">hr</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 411071863,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704311604
    },
    {
        "content": "<p>What is mainly the problem is the following line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">_</span> <span class=\"bp\">=</span>  <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>Which produces \"failed to synthesize instance<br>\n  HPow ℝ ℂ ?m.293008\"</p>",
        "id": 411074071,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704312492
    },
    {
        "content": "<p>This problem disappears when I replace the \\smul with *, but then I cannot call integral_smul, which I need</p>",
        "id": 411074295,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704312564
    },
    {
        "content": "<p>Guessing is too hard for Lean here.</p>",
        "id": 411075323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704313083
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"c1\">--works</span>\n<span class=\"k\">#check</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">z</span> <span class=\"bp\">•</span> <span class=\"n\">w</span> <span class=\"c1\">-- fails</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">w</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">z</span> <span class=\"bp\">•</span> <span class=\"n\">w</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 411075359,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704313085
    },
    {
        "content": "<p>Oops, forgot I could just do that! Thanks!</p>",
        "id": 411075469,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704313158
    },
    {
        "content": "<p>The issue is having too many types to guess simultaneously.</p>",
        "id": 411075594,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704313214
    },
    {
        "content": "<p>Okay, if you don't mind me asking one more thing: how do I prove the following? r and x are real, so I'd expect nothing funny to happen here: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span>\n<span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.re</span>\n<span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span>\n<span class=\"n\">hri</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 411077153,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704313961
    },
    {
        "content": "<p>Made a MWE in context, the sorry followed by \"this fails\" is the problem: I used to have mul_rpow there, but that cannot be used anymore. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Gaussian</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Cdf</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ENNReal</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">Real</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span>\n<span class=\"kn\">open</span> <span class=\"n\">Measure</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"sd\">/-- Expresses the integral over Ioi 0 of t^(a-1) * exp(-r*t) in terms of the Gamma function,</span>\n<span class=\"sd\">for complex a. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_exp_integral_Ioi_complex</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.re</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.Gamma</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hri</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n  <span class=\"k\">calc</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">MeasureTheory.set_integral_congr</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_eq_mul_right_iff</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mul_rpow</span> <span class=\"n\">hr.le</span> <span class=\"n\">hx.le</span> <span class=\"c1\">-- this fails!</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n        <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_rpow</span> <span class=\"n\">hri.le</span> <span class=\"n\">hr.le</span><span class=\"o\">,</span>\n          <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">mul_div</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">div_self</span> <span class=\"n\">hr.ne'</span><span class=\"o\">,</span> <span class=\"n\">one_rpow</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span>  <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span>  <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span>  <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.Gamma</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 411077630,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704314244
    },
    {
        "content": "<p>You hope that Mario or I will find time to PR the <code>rpow_simp</code> tactic that we wrote at <a href=\"https://github.com/teorth/symmetric_project/blob/master/SymmetricProject/Tactic/RPowSimp.lean\">https://github.com/teorth/symmetric_project/blob/master/SymmetricProject/Tactic/RPowSimp.lean</a></p>",
        "id": 411078362,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704314645
    },
    {
        "content": "<p>that would've been very nice, but I guess I should just get my hands dirty and work out the multiplication here from the definition then, for the time being!</p>",
        "id": 411078473,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704314724
    },
    {
        "content": "<p><code>rw [← mul_cpow_ofReal_nonneg]</code> is what you need.</p>\n<p>I found this by hovering over ^ in the goal, then hovering over <code>instHPow</code> then contol-clicking on <code>instPowComplex</code>(where the definition of ^ is) and then just reading the lemmas in the file until I found the one you needed. I think that an experience loogler could have found it in a more efficient way.</p>",
        "id": 411086232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704318015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Lifting.20real.20to.20complex/near/411086232\">said</a>:</p>\n<blockquote>\n<p><code>rw [← mul_cpow_ofReal_nonneg]</code> is what you need.</p>\n<p>I found this by hovering over ^ in the goal, then hovering over <code>instHPow</code> then contol-clicking on <code>instPowComplex</code>(where the definition of ^ is) and then just reading the lemmas in the file until I found the one you needed. I think that an experience loogler could have found it in a more efficient way.</p>\n</blockquote>\n<p>Thank you, I tried loogle and moogle but didn’t find a good fit! I’ll experiment with control-clicking to the definitions!</p>",
        "id": 411087016,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704318458
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_cpow_ofReal_nonneg</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)]</span>\n        <span class=\"n\">congr</span>\n        <span class=\"n\">norm_cast</span>\n        <span class=\"n\">field_simp</span>\n        <span class=\"n\">ring</span>\n</code></pre></div>\n<p>I prefer using the more high-powered tactics because I'm too old to learn all this mul_div, div_self, one_rpow stuff.</p>",
        "id": 411093145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704321688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Lifting.20real.20to.20complex/near/411093145\">said</a>:</p>\n<blockquote>\n<p>I prefer using the more high-powered tactics because I'm too old to learn all this mul_div, div_self, one_rpow stuff.</p>\n</blockquote>\n<p>Not sure I would agree with Kevin there. In this sort of stuff (manipulating real / complex exponentials and powers), the automated machinery often gets stuck in blind alleys, since it's not algorithmically obvious which direction is the \"simpler\" one to rewrite in. So you have to give it a hint occasionally – exactly as Kevin did by performing a \"backwards\" rewrite <code>rw [← mul_cpow_ofReal_nonneg]</code> – hence it is worth learning how to operate the manual controls!</p>\n<p>(That said, it's very possible that the automated machinery is a lot better now than it was in 2021 when I wrote most of the Gamma stuff.)</p>",
        "id": 411144839,
        "sender_full_name": "David Loeffler",
        "timestamp": 1704355851
    },
    {
        "content": "<p>I still had to fight a bit with Lean to get all the terms right, but all of your suggestions have helped me a great deal! This result is now added to <a href=\"https://github.com/leanprover-community/mathlib4/pull/9408\">#9408</a> for feedback, I'll try and see where it would fit in the files for the Gamma function!</p>",
        "id": 411152534,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704359632
    },
    {
        "content": "<p>I think Analysis/SpecialFunctions/Gamma/Basic would be a good place, I've put it at the end of that file for now!</p>",
        "id": 411153692,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704360179
    },
    {
        "content": "<p>The conversion to the real case should be easy, but I'm having a hard time getting rid of all the coercions in that case, while everything is supposed to be real, so I'm probably overlooking some basic functionality; I'll take another good look</p>",
        "id": 411155545,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704360999
    },
    {
        "content": "<p>I've tried several things, but I cannot really manage to relate the equation for the reals to the one already established for the complexes. The concern is with the second lemma, the first one has been proven. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Gaussian</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Cdf</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ENNReal</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">Real</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span>\n<span class=\"kn\">open</span> <span class=\"n\">Measure</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"sd\">/-- Expresses the integral over Ioi 0 of t^(a-1) * exp(-r*t) in terms of the Gamma function,</span>\n<span class=\"sd\">for complex a. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">integral_cpow_mul_exp_neg_mul_Ioi</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.re</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.Gamma</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"sd\">/-- Expresses the integral over Ioi 0 of t^(a-1) * exp(-r*t) in terms of the Gamma function. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">integral_rpow_mul_exp_neg_mul_Ioi</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">rexp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Real.Gamma</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">integral_cpow_mul_exp_neg_mul_Ioi</span> <span class=\"n\">hac</span> <span class=\"n\">hr</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 411156807,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704361641
    },
    {
        "content": "<p>I end up with the following state, where I want to 'get rid of the coercions', because all quantities involved are real-valued anyway:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ar</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n<span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span>\n<span class=\"n\">hac</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span>\n<span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">cexp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.Gamma</span> <span class=\"bp\">↑</span><span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">rexp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Real.Gamma</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 411156988,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704361711
    },
    {
        "content": "<p>Closer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Gaussian</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Cdf</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ENNReal</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">Real</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span>\n<span class=\"kn\">open</span> <span class=\"n\">Measure</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"sd\">/-- Expresses the integral over Ioi 0 of t^(a-1) * exp(-r*t) in terms of the Gamma function,</span>\n<span class=\"sd\">for complex a. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">integral_cpow_mul_exp_neg_mul_Ioi</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.re</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.Gamma</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"sd\">/-- Expresses the integral over Ioi 0 of t^(a-1) * exp(-r*t) in terms of the Gamma function. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">integral_rpow_mul_exp_neg_mul_Ioi</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">rexp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Real.Gamma</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">Complex.ofReal'</span> <span class=\"n\">using</span> <span class=\"n\">ofReal_injective</span>\n  <span class=\"n\">convert</span> <span class=\"n\">integral_cpow_mul_exp_neg_mul_Ioi</span> <span class=\"n\">hac</span> <span class=\"n\">hr</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trans</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">rexp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- does this need some integrability condition?</span>\n    <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">integral_congr_ae</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"n\">refine</span> <span class=\"n\">EqOn.eventuallyEq_of_mem</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">self_mem_ae_restrict</span> <span class=\"n\">measurableSet_Ioi</span><span class=\"o\">)</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span>\n      <span class=\"n\">norm_cast</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ofReal_cpow</span> <span class=\"n\">hx.le</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ofReal_mul</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">norm_cast</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Complex.Gamma_ofReal</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ofReal_cpow</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ofReal_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">positivity</span>\n</code></pre></div>",
        "id": 411160487,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704362811
    },
    {
        "content": "<p>Thanks! I can't imagine that that needs an integrability condition though</p>",
        "id": 411160950,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704362988
    },
    {
        "content": "<p><code>integral_ofReal</code> does the trick</p>",
        "id": 411161559,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704363221
    },
    {
        "content": "<p>I think that completes <a href=\"https://github.com/leanprover-community/mathlib4/pull/9408\">#9408</a>, thank you for all your input!</p>",
        "id": 411162665,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704363704
    },
    {
        "content": "<p>The impossible instance linter apparently thinks otherwise ;-)</p>",
        "id": 411174736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704368758
    },
    {
        "content": "<p>Yes, I noticed… let me check what went wrong there</p>",
        "id": 411176132,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704369418
    },
    {
        "content": "<p>The point is that the way typeclass inference works, <code>instIsProbabilityMeasureGamma</code> can never fire, because <code>&lt;</code> is not a class, so the input <code>0 &lt; a</code> can never be found by the algorithm which typeclass inference runs. If we had a type <code>pReal</code> of positive reals then you could make <code>a</code> and <code>r</code> terms of this type and then the instance would be OK. An easy fix is just to make this a <code>def</code> not an <code>instance</code>.</p>",
        "id": 411176545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704369622
    },
    {
        "content": "<p>Thank you, that explains the error. I guess this is why Probability/Distributions/Exponential uses Fact (0 &lt; r) for <code>instIsProbabilityMeasureExponential</code>, but I was asked to get rid of that. I used the following now: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">instIsProbabilityMeasureGamma</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsProbabilityMeasure</span> <span class=\"o\">(</span><span class=\"n\">gammaMeasure</span> <span class=\"n\">a</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">measure_univ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">gammaMeasure</span><span class=\"o\">,</span> <span class=\"n\">lintegral_gammaPdf_eq_one</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"n\">ha</span> <span class=\"n\">hr</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 411183881,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704372737
    },
    {
        "content": "<p>That's also not going to work as an instance</p>",
        "id": 411183936,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704372768
    },
    {
        "content": "<p>You either need <code>Fact</code> for both <code>ha</code> and <code>hr</code> or use <code>def</code></p>",
        "id": 411183966,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704372786
    },
    {
        "content": "<p><code>def</code> is probably better</p>",
        "id": 411183991,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704372800
    },
    {
        "content": "<p>yeah, I wrote the wrong one, I switched it to def<br>\nchanged the message</p>",
        "id": 411183994,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704372801
    },
    {
        "content": "<p>okay, great! does the current def look good?</p>",
        "id": 411184016,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704372814
    },
    {
        "content": "<p>I guess you should now remove the <code>inst</code> from the name</p>",
        "id": 411184058,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704372834
    },
    {
        "content": "<p>Will do, so should it be a lemma or a def then?</p>",
        "id": 411184193,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704372877
    },
    {
        "content": "<p>Without knowing the background, it looks sensible enough now</p>",
        "id": 411184196,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704372879
    },
    {
        "content": "<p>Great, I'll PR it and see what the reviewer thinks! Thanks!</p>",
        "id": 411184271,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704372911
    },
    {
        "content": "<p>Oh yes, <code>lemma</code> would be better</p>",
        "id": 411184446,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704372974
    },
    {
        "content": "<p>(Messages crossed there)</p>",
        "id": 411184527,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704373004
    },
    {
        "content": "<p>Changed it, awesome!</p>\n<p>Also, if you don't mind me asking: does the failure in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9200\">https://github.com/leanprover-community/mathlib4/pull/9200</a> come from a cache issue, or should I check my math?</p>",
        "id": 411184721,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704373082
    },
    {
        "content": "<p>(or perhaps I messed up a branch-thing there as well?)</p>",
        "id": 411185224,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704373274
    },
    {
        "content": "<p>That's a cache issue, yeah. The following should help:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">JADekker_filter_from_prop</span>\n<span class=\"n\">git</span> <span class=\"n\">merge</span> <span class=\"n\">origin</span><span class=\"bp\">/</span><span class=\"n\">master</span>\n<span class=\"n\">git</span> <span class=\"n\">push</span> <span class=\"n\">origin</span> <span class=\"n\">JADekker_filter_from_prop</span>\n</code></pre></div>",
        "id": 411186496,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704373700
    },
    {
        "content": "<p>okay, now 'lake exe cache get' is no longer working...</p>",
        "id": 411186932,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704373900
    },
    {
        "content": "<p>This is expected. The orange circle</p>\n<p><a href=\"/user_uploads/3121/2uZvQAi0WsbD36wxGfBKKJyR/orange.png\">orange.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2uZvQAi0WsbD36wxGfBKKJyR/orange.png\" title=\"orange.png\"><img src=\"/user_uploads/3121/2uZvQAi0WsbD36wxGfBKKJyR/orange.png\"></a></div><p>next to <code>a890ae5</code> means \"continuous integration is making your cache right now\". It will eventually change into either a green tick (success) or a red cross (failure).</p>",
        "id": 411192312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704376301
    },
    {
        "content": "<p>Oh, I didn't know that! Thank you! Now time to fix the mess I made (again)</p>",
        "id": 411192582,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704376435
    },
    {
        "content": "<p>Is there a mess? It's now a green tick. Are the changes <a href=\"https://github.com/leanprover-community/mathlib4/pull/9200/files\">here</a> what you expect (7 files changed)?</p>",
        "id": 411194069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704376957
    },
    {
        "content": "<p>My local version became a mess, as I was doing some stuff to \"fix\" that <code>lake exe cache get</code> wasn't working (which was apparently wrong). I've managed to fix that now due to comments in another thread! Thank you very much for clarifying, sorry for the confusion!</p>",
        "id": 411194903,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704377204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Lifting.20real.20to.20complex/near/411194069\">said</a>:</p>\n<blockquote>\n<p>Is there a mess? It's now a green tick. Are the changes <a href=\"https://github.com/leanprover-community/mathlib4/pull/9200/files\">here</a> what you expect (7 files changed)?</p>\n</blockquote>\n<p>yes, the Github version is fine!</p>",
        "id": 411195106,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704377265
    },
    {
        "content": "<p>Then you just wait until it's merged, delete your local branch and just go back to <code>master</code> :-)</p>",
        "id": 411208650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704381803
    }
]