[
    {
        "content": "<p>I want to make a group instance for Nat, with Nat.xor as the group operation. What's the correct way to do this? Do I have to make a newtype wrapper, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">XorNat</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">XorNat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>If I do this, it seems that in order to define the instance, I have to constantly wrap/unwrap to use the properties of xor. Is there a way around this to reduce the amount of boilerplate?</p>",
        "id": 421943917,
        "sender_full_name": "Timothy Mou",
        "timestamp": 1708120183
    },
    {
        "content": "<p>That's usually the recommended approach, though if you're feeling brave you can use <code>def XorNat := Nat</code></p>",
        "id": 421944372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708120388
    },
    {
        "content": "<p>(your approach is the one I described <a href=\"https://eric-wieser.github.io/lftcm-2023/#/4/1/2\">at LFTCM 2023</a>)</p>",
        "id": 421944602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708120463
    },
    {
        "content": "<p>Ok. Could you possibly help me fix my group instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">XorNat</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kn\">open</span> <span class=\"n\">XorNat</span> <span class=\"k\">in</span> <span class=\"k\">match</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mk</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^^^</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.xor_assoc</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">XorNat.mk</span> <span class=\"mi\">0</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n      <span class=\"n\">intros</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_xor</span><span class=\"o\">]</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.xor_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">inv</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n      <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>In particular, I'm having trouble with defining <code>one_mul</code> and <code>mul_one</code>: I want to use <code>Nat.zero_xor</code>, but it's not able to see that <code>1.n = 0</code> even though that's how I defined it.</p>",
        "id": 421948280,
        "sender_full_name": "Timothy Mou",
        "timestamp": 1708122273
    },
    {
        "content": "<p>You will find it a lot easier if you define <code>Mul</code> and <code>One</code> separately before doing anything else</p>",
        "id": 421951640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708124255
    },
    {
        "content": "<p><a href=\"https://github.com/lftcm2023/lftcm2023/blob/master/LftCM/C05_Structures_And_Classes/solutions/Solutions_S00_Structures_And_Classes.lean#L737-L782\">here's</a> the full example fro LftCM</p>",
        "id": 421951935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708124439
    },
    {
        "content": "<p>Note how that once you set up the really boring lemmas, everything is obvious</p>",
        "id": 421951961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708124452
    },
    {
        "content": "<p>That helps, thanks</p>",
        "id": 421953130,
        "sender_full_name": "Timothy Mou",
        "timestamp": 1708125207
    },
    {
        "content": "<p>If you call the instance <code>XorNat.instgroup</code> then can you get away without opening <code>XorNat</code>? This would work for a def or lemma so I suspect the same would be true here. (I dread to think what the autogenerated name would be)</p>",
        "id": 421954571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708126147
    },
    {
        "content": "<p>Yes, that works. Thanks for the tip</p>",
        "id": 421955194,
        "sender_full_name": "Timothy Mou",
        "timestamp": 1708126570
    }
]