[
    {
        "content": "<p>The LE definition works when I define it on a predicate variable of the correct type but if I try to define it using a specific predicate, I get <code>typeclass instance problem is stuck, it is often due to metavariables</code>. <br>\n Here is the code that works </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.BoundedOrder</span>\n\n<span class=\"kd\">variable</span>\n  <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">×</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x.val</span> <span class=\"bp\">≤</span> <span class=\"n\">y.val</span>\n</code></pre></div>\n<p>And here is the code that doesn't work. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.BoundedOrder</span>\n\n<span class=\"kd\">variable</span>\n  <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ordered_product</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">×</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">d.1</span> <span class=\"bp\">≤</span> <span class=\"n\">d.2</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"n\">ordered_product</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x.val</span> <span class=\"bp\">≤</span> <span class=\"n\">y.val</span>\n</code></pre></div>\n<p>What do I need to make more explicit in order for it to work? Even explicitly adding the instances for the product and the subtype of product instance doesn't solve the problem. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">×</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x.1</span> <span class=\"bp\">≤</span> <span class=\"n\">y.1</span> <span class=\"bp\">∧</span> <span class=\"n\">x.2</span> <span class=\"bp\">≤</span> <span class=\"n\">y.2</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x.val</span> <span class=\"bp\">≤</span> <span class=\"n\">y.val</span>\n</code></pre></div>",
        "id": 439799209,
        "sender_full_name": "George Kojonis",
        "timestamp": 1716292107
    },
    {
        "content": "<p>You need to make the first type argument to <code>ordered_product</code> explicit, or to name the <code>[LE D]</code> instance and use that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"n\">ordered_product</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">D</span><span class=\"o\">)))</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x.val</span> <span class=\"bp\">≤</span> <span class=\"n\">y.val</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_product</span> <span class=\"n\">_</span> <span class=\"n\">instLE</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x.val</span> <span class=\"bp\">≤</span> <span class=\"n\">y.val</span>\n</code></pre></div>\n<p>I'm not an expert in typeclass resolution, but I think the difference between <code>g</code> and <code>ordered_product</code> in this case is just that <code>g</code> doesn't have the <code>LE</code> instance as part of its type, but the invocation of <code>ordered_product</code> does.</p>",
        "id": 439840862,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1716304553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"720043\">George Kojonis</span> has marked this topic as resolved.</p>",
        "id": 439843532,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716305326
    }
]