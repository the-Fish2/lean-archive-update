[
    {
        "content": "<p>When I try the NonEmptyLists example from <a href=\"https://lean-lang.org/functional_programming_in_lean/type-classes/indexing.html#non-empty-lists\">Functional Programming In Lean</a>, the two theorems about indices being in bounds or not both fail. For example, the first theorem \"atLeastThreeSpiders\" says that the remaining goal is \"2 ≤ List.length idahoSpiders.tail\".</p>\n<p>Does anyone have an idea what's wrong? Is it more likely that something changed since the document was written or that I've misconfigured something? I installed Lean4 using VS Code about two weeks ago.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">NonEmptyList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">idahoSpiders</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Banded Garden Spider\"</span><span class=\"o\">,</span>\n  <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"o\">[</span>\n    <span class=\"s2\">\"Long-legged Sac Spider\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"Wolf Spider\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"Hobo Spider\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"Cat-faced Spider\"</span>\n  <span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">NonEmptyList.inBounds</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">xs.tail.length</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">atLeastThreeSpiders</span> <span class=\"o\">:</span> <span class=\"n\">idahoSpiders.inBounds</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">notSixSpiders</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">idahoSpiders.inBounds</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 430407014,
        "sender_full_name": "Charlie Garrett",
        "timestamp": 1711820206
    },
    {
        "content": "<p>This is because simp recently became weaker (on purpose). You now need to write <code>simp [idahoSpiders]</code></p>",
        "id": 430409827,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711822826
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20example.20from.20.22Functional.20Programming.20in.20Lean.22\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.E2.9C.94.20example.20from.20.22Functional.20Programming.20in.20Lean.22</a> and <a href=\"https://github.com/leanprover/fp-lean/issues/137\">https://github.com/leanprover/fp-lean/issues/137</a></p>",
        "id": 430409881,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711822919
    },
    {
        "content": "<p>Thanks for your help.</p>",
        "id": 430410315,
        "sender_full_name": "Charlie Garrett",
        "timestamp": 1711823395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"697764\">Charlie Garrett</span> has marked this topic as resolved.</p>",
        "id": 430410325,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711823402
    }
]