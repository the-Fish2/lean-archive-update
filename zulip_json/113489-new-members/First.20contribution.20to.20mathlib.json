[
    {
        "content": "<p>I have some lemmas and functions for lists I'd like to commit to Mathlib. Would you like to have a look at them before I make a pull request? (Background: I'm formalizing Borel Determinacy, and decided to commit some prerequisites to Mathlib before I finish. Until now, I just made some two line commits.)</p>\n<p>First some general lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">List.ext'</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.length</span> <span class=\"bp\">≤</span> <span class=\"n\">y.length</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"bp\">&lt;</span><span class=\"n\">y.length</span><span class=\"o\">,</span> <span class=\"n\">x.get</span><span class=\"bp\">?</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y.get</span><span class=\"bp\">?</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.ext</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">rcases</span> <span class=\"n\">Nat.lt_or_ge</span> <span class=\"n\">n</span> <span class=\"n\">y.length</span> <span class=\"k\">with</span> <span class=\"n\">hn</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h'</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">List.get</span><span class=\"bp\">?</span><span class=\"n\">_eq_none.mpr</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">h</span> <span class=\"n\">hn</span><span class=\"o\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">List.prefix_concat_iff</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">induction'</span> <span class=\"n\">z</span> <span class=\"n\">using</span> <span class=\"n\">List.reverseRecOn</span> <span class=\"k\">with</span> <span class=\"n\">z</span>\n    <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">List.append_nil</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n    <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.append_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">List.append_inj_left'</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">List.IsPrefix.trans</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">List.prefix_append</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">List.prefix_rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">List.prefix_take_iff</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">y.take</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x.length</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span>\n    <span class=\"n\">exact</span> <span class=\"n\">List.IsPrefix.trans</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">List.take_prefix</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.length_le</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h.left</span> <span class=\"o\">}</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"n\">hl'</span> <span class=\"o\">:=</span> <span class=\"n\">hp.length_le</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">List.prefix_iff_eq_take</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">List.take_take</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hl'</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">List.append_left_cancel_nil_left</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}:</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">List.append_cancel_left</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">all_goals</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">List.append_left_cancel_nil_right</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">append_left_cancel_nil_left</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">List.head_tail</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x.head</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">x.tail</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">List.ne_nil_prefix</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">hx</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">List.prefix_nil.mp</span> <span class=\"n\">h</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">List.get_eq_prefix</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">List.get</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">List.get</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">[</span><span class=\"n\">h.length_le</span><span class=\"o\">]⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">symm</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">List.get_append</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">List.head_eq_prefix</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x.head</span> <span class=\"n\">hx</span> <span class=\"bp\">=</span> <span class=\"n\">y.head</span> <span class=\"o\">(</span><span class=\"n\">ne_nil_prefix</span> <span class=\"n\">hx</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">injection</span> <span class=\"n\">h</span><span class=\"o\">}</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">List.head_replicate</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">List.replicate</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:</span>\n  <span class=\"n\">List.head</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">exfalso</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span><span class=\"n\">_append_or_none</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:</span>\n  <span class=\"n\">x.get</span><span class=\"bp\">?</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">?</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"n\">x.get</span><span class=\"bp\">?</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">lt_or_ge</span> <span class=\"n\">n</span> <span class=\"n\">x.length</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">List.get</span><span class=\"bp\">?</span><span class=\"n\">_append</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span>\n  <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">List.concat_prefix_of_length_lt</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">x.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y.length</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">y.get</span> <span class=\"o\">⟨</span><span class=\"n\">x.length</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">⟩]</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"n\">y.drop</span> <span class=\"o\">(</span><span class=\"n\">x.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span><span class=\"bp\">;</span> <span class=\"n\">nth_rw</span> <span class=\"mi\">1</span><span class=\"o\">[</span><span class=\"n\">List.prefix_iff_eq_take.mp</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">List.take_append_drop</span> <span class=\"o\">(</span><span class=\"n\">x.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">using</span> <span class=\"mi\">2</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.take_concat_get</span><span class=\"o\">,</span> <span class=\"n\">List.concat_eq_append</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Furthermore, List.zip and List.zipWith only support a finite number of arguments. Here is the obvious generalization:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">List.mapEval</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">x.map</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">zipFun</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">List</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"o\">(</span><span class=\"n\">List.ne_nil_of_length_eq_succ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n    <span class=\"o\">::</span> <span class=\"n\">zipFun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">List.length</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">List.mapEval_zip</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"n\">zipFun</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapEval</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">List.length_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">zipFun</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">specialize</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">])</span><span class=\"bp\">;</span> <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">ih</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">zipFun</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">List.zip_mapEval</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">zipFun</span> <span class=\"n\">x.mapEval</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">x.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">ih</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">ih</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">zipFun</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">List.mapEval_joint_epi</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">x.length</span> <span class=\"bp\">=</span> <span class=\"n\">y.length</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x.mapEval</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y.mapEval</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zip_mapEval</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zip_mapEval</span> <span class=\"n\">y</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">ext1</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">h</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">List.zipFun_len</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">zipFun</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">zipFun</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">List.zipFun_zero</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">zipFun</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">List.eq_nil_of_length_eq_zero</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">List.zipFun_append</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">zipFun</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"bp\">++</span> <span class=\"n\">zipFun</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"bp\">=</span> <span class=\"n\">zipFun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">induction'</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">ih</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"n\">hf</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">List.eq_nil_of_length_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">hf</span><span class=\"o\">])</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">zipFun</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_add</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">specialize</span> <span class=\"n\">hf</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hf</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Option.some_injective</span><span class=\"bp\">;</span> <span class=\"n\">simp_rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.head</span><span class=\"bp\">?</span><span class=\"n\">_eq_head</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">symm</span>\n    <span class=\"n\">apply</span> <span class=\"n\">List.head</span><span class=\"bp\">?</span><span class=\"n\">_append_of_ne_nil</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">ext1</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">symm</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">List.tail_append_of_ne_nil</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">List.zipFun_mono</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">zipFun</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">zipFun</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"n\">zipFun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">List.drop</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">hg</span><span class=\"o\">])</span>\n  <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ext1</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">nth_rw</span> <span class=\"mi\">2</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.take_append_drop</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)]</span>\n  <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hf</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">List.prefix_iff_eq_take.mp</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 429177755,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1711272926
    },
    {
        "content": "<p>Your <code>List.ext'</code> almost already exists</p>",
        "id": 429177849,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711273005
    },
    {
        "content": "<p>It's basically <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.nthLe#doc\">docs#List.nthLe</a></p>",
        "id": 429178306,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711273478
    },
    {
        "content": "<p>I think you should make a pull request. It's much easier to give you feedback through the GitHub interface</p>",
        "id": 429178344,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711273525
    },
    {
        "content": "<p>Are you sure your link is correct? List.nthLe seems to be just a copy of the function List.get, but my List.ext' is kind of an extensionality lemma</p>",
        "id": 429181594,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1711275617
    },
    {
        "content": "<p>Sorry, I meant <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.ext_nthLe#doc\">docs#List.ext_nthLe</a></p>",
        "id": 429182308,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711275987
    },
    {
        "content": "<p>As suggested, I will open a pull request. Can you suggest where to add these? Maybe the definition of zip in Data.List.Basic and the remainder in Data.List.Lemmas?</p>",
        "id": 429183469,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1711276600
    },
    {
        "content": "<p>Something like that, yeah</p>",
        "id": 429183625,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711276753
    },
    {
        "content": "<p>Oh, I'm aware of both <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.ext#doc\">docs#List.ext</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.ext_get#doc\">docs#List.ext_get</a> (=List.ext_nthLe), but my version is somehow intermediate between both of them</p>",
        "id": 429183629,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1711276759
    },
    {
        "content": "<p>Your version should be called <code>List.ext_get?</code> I guess?</p>",
        "id": 429183648,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711276785
    },
    {
        "content": "<p>Maybe. But maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.ext#doc\">docs#List.ext</a> should be called List.ext_get?, and my version should have an even longer name</p>",
        "id": 429183746,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1711276864
    },
    {
        "content": "<p>At this point, it's up to you</p>",
        "id": 429183770,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711276905
    },
    {
        "content": "<p>Would it be a good idea to rename List.ext? Since there are many extensionality lemmas for lists, the name doesn't seem nice, but then backward compatibility may be preferable...</p>",
        "id": 429183935,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1711277054
    },
    {
        "content": "<p>Yes, it would be good, but note that it's in Std, not mathlib</p>",
        "id": 429183957,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711277098
    },
    {
        "content": "<p>Thanks, I didn't notice that. My results should probably still be added to mathlib and not just to Std (e.g., they could have mathlib dependencies)? And in this case one maybe just should create an alias List.ext_get? of List.ext</p>",
        "id": 429184514,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1711277505
    },
    {
        "content": "<p>Sure, that's one way to proceed</p>",
        "id": 429184591,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711277540
    },
    {
        "content": "<p>For reference: I added a pull request for the first part (<a href=\"https://github.com/leanprover-community/mathlib4/pull/11626\">https://github.com/leanprover-community/mathlib4/pull/11626</a>)</p>",
        "id": 429232865,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1711303618
    }
]