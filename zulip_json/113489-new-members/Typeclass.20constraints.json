[
    {
        "content": "<p>I am trying to convert a parser combinator tutorial in lean4 the following haskell code has Eq as the typeclass constraint passed as an argument is there a way to write an equivalent in lean4?</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">pSym</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Eq</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">â‡’</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">â†’</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">s</span>\n<span class=\"nf\">pSym</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">P</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Î»inp</span><span class=\"w\"> </span><span class=\"err\">â†’</span><span class=\"w\"> </span><span class=\"kr\">case</span><span class=\"w\"> </span><span class=\"n\">inp</span><span class=\"w\"> </span><span class=\"kr\">of</span>\n<span class=\"p\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">ss</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"err\">â‰¡</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">â†’</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss</span><span class=\"p\">)]</span>\n<span class=\"mi\">5</span>\n<span class=\"nf\">otherwise</span><span class=\"w\"> </span><span class=\"err\">â†’</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>in lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pSym</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Parser</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Parser.P</span> <span class=\"o\">(</span><span class=\"bp\">Î»</span> <span class=\"n\">inp</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">inp</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">::</span> <span class=\"n\">ss</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"o\">[(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ss</span><span class=\"o\">)]</span> <span class=\"k\">else</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[])</span>\n</code></pre></div>\n<p>but this is incorrect, the error is</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error:<span class=\"w\"> </span><span class=\"nb\">type</span><span class=\"w\"> </span>expected,<span class=\"w\"> </span>got\n<span class=\"w\">  </span><span class=\"o\">(</span>Eq<span class=\"w\"> </span>s<span class=\"w\"> </span>:<span class=\"w\"> </span>?m.911<span class=\"w\"> </span>â†’<span class=\"w\"> </span>Prop<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 429111624,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711224879
    },
    {
        "content": "<p>What's the type of <code>s</code> in the Haskell code?</p>",
        "id": 429111659,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1711224930
    },
    {
        "content": "<p>There isn't, I think to make it generic</p>",
        "id": 429111731,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711224967
    },
    {
        "content": "<p>Are you sure <code>s</code> isn't the type?</p>",
        "id": 429111758,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1711224996
    },
    {
        "content": "<p>it is but there is no concrete type</p>",
        "id": 429111784,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711225029
    },
    {
        "content": "<p>... in which case you can just remove that <code>Eq s</code> argument since the Lean type <code>s</code> will automatically have access to <code>=</code> notation (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Eq#doc\">docs#Eq</a> is defined for all types)</p>",
        "id": 429111792,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1711225042
    },
    {
        "content": "<p>Ok but <code>pSym</code> in the haskell code consumes a type with identifier a and returns a function of type <code>s -&gt; Parser s s</code> if I remove Eq s then I just pass a without any explicit types?</p>",
        "id": 429112180,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711225220
    },
    {
        "content": "<p>something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pSym</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Parser</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Parser.P</span> <span class=\"o\">(</span><span class=\"bp\">Î»</span> <span class=\"n\">inp</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">inp</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">::</span> <span class=\"n\">ss</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"o\">[(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ss</span><span class=\"o\">)]</span> <span class=\"k\">else</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[])</span>\n</code></pre></div>",
        "id": 429112218,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711225264
    },
    {
        "content": "<p>The Lean version should be of the form <code>pSym {s : Type} : s â†’ Parser s s</code> (for some definition of <code>Parser</code>)</p>",
        "id": 429112235,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1711225280
    },
    {
        "content": "<p>Note that the Haskell code is using <code>s</code> for two different things!</p>",
        "id": 429112253,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1711225310
    },
    {
        "content": "<p><code>s</code> refers to both a type and an element of that type</p>",
        "id": 429112317,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1711225333
    },
    {
        "content": "<p>Oh thanks!</p>",
        "id": 429112348,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711225369
    },
    {
        "content": "<p>do we also need to define an instance of Decidable? because it is unable to generate <code>Decidable (a = s)</code> instance</p>",
        "id": 429112567,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711225532
    },
    {
        "content": "<p>You might need <code>[DecidableEq s]</code> for the <code>if</code></p>",
        "id": 429112575,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711225543
    },
    {
        "content": "<p>Just assume <code>[DecidableEq s]</code></p>",
        "id": 429112579,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1711225546
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pSym</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Parser</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Parser.P</span> <span class=\"o\">(</span><span class=\"bp\">Î»</span> <span class=\"n\">inp</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">inp</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">::</span> <span class=\"n\">ss</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"o\">[(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ss</span><span class=\"o\">)]</span> <span class=\"k\">else</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[])</span>\n</code></pre></div>\n<p>is the above code correct? if I place <code>[DecidableEq s]</code> before the <code>{s : Type}</code> I get the same error, right now I am getting a different error where lean compiler errors out with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Parser.P</span> <span class=\"k\">fun</span> <span class=\"n\">inp</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">inp</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">s_1</span> <span class=\"o\">::</span> <span class=\"n\">ss</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">s_1</span> <span class=\"k\">then</span> <span class=\"o\">[(</span><span class=\"n\">s_1</span><span class=\"o\">,</span> <span class=\"n\">ss</span><span class=\"o\">)]</span> <span class=\"k\">else</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Parser</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">s</span> <span class=\"bp\">â†’</span> <span class=\"n\">Parser</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 429112828,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711225753
    },
    {
        "content": "<p>What's <code>Parser.P</code>? Can you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 429113180,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1711226011
    },
    {
        "content": "<p>yep, just a sec</p>",
        "id": 429113193,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711226037
    },
    {
        "content": "<p>Wait, actually, the error is easy to spot</p>",
        "id": 429113248,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1711226058
    },
    {
        "content": "<p>You meant either <code>(a : s) : Parser s s :=</code> or <code>: s -&gt; Parser s s := fun a â†¦</code>, but not both</p>",
        "id": 429113267,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1711226083
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Parser</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ParserType</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Parser</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>this is how I have defined it, in the tutorial</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">newtype</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">P</span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"err\">â†’</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">])])</span>\n</code></pre></div>",
        "id": 429113316,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711226138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">YaÃ«l Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Typeclass.20constraints/near/429113267\">said</a>:</p>\n<blockquote>\n<p>You meant either <code>(a : s) : Parser s s :=</code> or <code>: s -&gt; Parser s s := fun a â†¦</code>, but not both</p>\n</blockquote>\n<p>I wanted the former, usually in haskell or ML like languages one can assume both, I am not sure that is correct in lean</p>",
        "id": 429113383,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711226196
    },
    {
        "content": "<p><code>ParserType</code> is just <code>abbrev ParserType s t := List s -&gt; List (Prod t (List s))</code></p>",
        "id": 429113434,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711226240
    },
    {
        "content": "<p>is there something wrong in the assumptions I've made?</p>",
        "id": 429115538,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711227877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">YaÃ«l Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Typeclass.20constraints/near/429113267\">said</a>:</p>\n<blockquote>\n<p>You meant either <code>(a : s) : Parser s s :=</code> or <code>: s -&gt; Parser s s := fun a â†¦</code>, but not both</p>\n</blockquote>\n<p>Did you understand my message above? <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 429115586,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1711227927
    },
    {
        "content": "<p>The only difference I know is that it's syntactic sugar but I'm sure it's wrong and I have missed something</p>",
        "id": 429115863,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711228157
    },
    {
        "content": "<p>Simply change your code to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pSym</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Parser.P</span> <span class=\"o\">(</span><span class=\"bp\">Î»</span> <span class=\"n\">inp</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">inp</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">::</span> <span class=\"n\">ss</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"o\">[(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ss</span><span class=\"o\">)]</span> <span class=\"k\">else</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[])</span>\n</code></pre></div>",
        "id": 429115899,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1711228197
    },
    {
        "content": "<p>I'm sorry, I'm such a big idiot, thanks for helping a fool! <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 429116088,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711228335
    },
    {
        "content": "<p>it was right there, I couldn't see it</p>",
        "id": 429116098,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1711228350
    },
    {
        "content": "<p>No problem <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 429116169,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1711228418
    },
    {
        "content": "<blockquote>\n<p>if I place <code>[DecidableEq s]</code> before the <code>{s : Type}</code> then ...</p>\n</blockquote>\n<p>I strongly recommend adding <code>set_option autoImplicit false</code> to the top of your file so that this gives a much stronger error messag</p>",
        "id": 429118626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711230190
    }
]