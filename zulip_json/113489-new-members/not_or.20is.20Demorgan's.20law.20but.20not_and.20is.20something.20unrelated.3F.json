[
    {
        "content": "<p>Dear friends<br>\nI am new here. I am working on completion of Natural Number Game and Set Theory Game without asking anyone. But I noticed some irregularity in naming of  logic proofs and decided to ask. For example, not_or is De Morgan's law. One would expect not_and be a similar property for \\and=∧ but no! It gives x ∈ A → x ∉ B when applied to ¬(x ∈ A ∧ x ∈ B)<br>\nWhat is the reason for this naming? And if possible how do I prove ¬(x ∈ A ∧ x ∈ B) is x ∉ A ∨ x ∉ B without not_and?</p>",
        "id": 416011081,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1705492535
    },
    {
        "content": "<p>it's called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=not_and_or#doc\">docs#not_and_or</a>, or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Decidable.not_and#doc\">docs#Decidable.not_and</a> in std</p>",
        "id": 416011353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705492661
    },
    {
        "content": "<p>How to find other such names easily without asking here? Like distributivity of And over Or and vice versa?<br>\nx ∈ A ∧ (x ∈ B ∨ x ∈ C) is equivalent to<br>\nx ∈ A ∧ x ∈ B ∨ x ∈ A ∧ x ∈ C</p>",
        "id": 416015622,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1705494374
    },
    {
        "content": "<p>You can write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 416017198,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705494977
    },
    {
        "content": "<p>Or guess the name (<a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a>)</p>",
        "id": 416017290,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705495015
    },
    {
        "content": "<p>I'm not sure I want to guarantee that all names in NNG are the same as the corresponding mathlib names, although the vast majority will be.</p>",
        "id": 416076842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705510419
    },
    {
        "content": "<p>See for example <a href=\"#narrow/stream/348111-std4/topic/eq_zero_of_add_eq_zero_right/near/395716874\">this thread</a>.</p>",
        "id": 416077113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705510506
    }
]