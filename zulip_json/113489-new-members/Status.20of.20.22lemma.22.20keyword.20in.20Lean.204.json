[
    {
        "content": "<p>I was tempted to use a \"lemma\" keyword while working on a proof exercise in Lean 4 like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ex3a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>   <span class=\"c1\">-- unexpected identifier; expected command</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex3a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"c1\">-- no problem here</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ex3a</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.intro</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">ex3a</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, the <code>lemma</code> gets the red underscore: it no longer works.  This is confusing, because <code>lemma</code> is used in many places in the Lean 4 mathlib source, for example on line 500 of <a href=\"https://github.com/leanprover-community/mathlib4/blob/fb3fd7cd7a0004f3d9bc0daf99c3d767cf6e7600/Mathlib/Data/Complex/Module.lean\">Data/Complex/Module.lean</a></p>\n<p>What is the current status of <code>lemma</code> in Lean 4?  Deprecated, gone, out of style guide?</p>",
        "id": 410443819,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1703863925
    },
    {
        "content": "<p><code>lemma</code> is a synonym for <code>theorem</code> that's defined in mathlib. Jury's still out on whether we'll keep it</p>",
        "id": 410443915,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703863989
    },
    {
        "content": "<p>It's gone in <a href=\"https://live.lean-lang.org/\">https://live.lean-lang.org/</a>, so I guess the jury decided.  Is there an archive like <a href=\"https://peps.python.org/\">PEP</a> for these kinds of language design decisions?</p>",
        "id": 410444205,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1703864157
    },
    {
        "content": "<p>The jury in this case means the mathlib community, if you <code>import Mathlib</code> in live.lean-lang it will work fine of course. Its just not a core feature anymore</p>",
        "id": 410444461,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1703864311
    },
    {
        "content": "<p>(Since you've mentioned it in at least one other place, I'll just mention that at least in Python I wouldn't personally expect a PEP for that kind of thing, they're for more... 'elaborate' language changes -- Lean (core) has something like PEPs, they're the RFCs that folks occasionally write in issues: <a href=\"https://github.com/leanprover/lean4/issues?q=is%3Aissue+is%3Aopen+label%3ARFC\">https://github.com/leanprover/lean4/issues?q=is%3Aissue+is%3Aopen+label%3ARFC</a> )</p>",
        "id": 410445010,
        "sender_full_name": "Julian Berman",
        "timestamp": 1703864666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span>,  the Lean 4 Mathlib source has <a href=\"/user_uploads/3121/BngpvNCZFQ9SKV_Tye2uOtBH/lemma.txt\">2,491 uses </a> of the <code>lemma</code> synonym, which doesn't work in <a href=\"https://live.lean-lang.org\">https://live.lean-lang.org</a>.  So even though it is a redundant synonym, it is still somewhat impactful to delete it (i.e., those 2,491 uses might want to be changed to <code>theorem</code> prior to removing the synonym).  That's what elevates it somewhat to an RFC.</p>\n<p>Having RFCs is as good as having PEPs.  But, I like the structure and presentation of the PEP website, because the PEPs align directly with release versions of Python.  PEPs are frequently quoted in Stack Exchange questions about the presence or absence of particular language features.  I don't know that people would quote RFCs as fluently or be able to align them with particular Lean 4 releases.  Lean 4 will see a greatly expanding user base over time.  Lean 4 will also change constantly.  It is helpful for a wider user base to have a kind of \"bible\" that people can refer to that aligns language releases and the presence or absence of particular language features.</p>",
        "id": 410448206,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1703866448
    },
    {
        "content": "<p>The reason there are so few <code>lemma</code>s in mathlib right now is that mathport turned all <code>lemma</code>s into <code>theorem</code>s.</p>",
        "id": 410449265,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703867031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/Status.20of.20.22lemma.22.20keyword.20in.20Lean.204/near/410448206\">said</a>:</p>\n<blockquote>\n<p>the <code>lemma</code> synonym, which doesn't work in <a href=\"https://live.lean-lang.org\">https://live.lean-lang.org</a></p>\n</blockquote>\n<p>Maybe you were writing this comment while Alex Best answered you, but <code>lemma</code> does in fact work in on <a href=\"https://live.lean-lang.org\">https://live.lean-lang.org</a> just like in any other mathlib file; you just have to import a relevant module to get the syntax.</p>",
        "id": 410449436,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703867133
    },
    {
        "content": "<p><code>import Mathlib.Tactic.Basic</code></p>",
        "id": 410449633,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703867258
    },
    {
        "content": "<p>There is a PR in the works (<a href=\"https://github.com/leanprover/std4/pull/413\">std4#413</a>) that adds <code>lemma</code> to std with a better error message</p>",
        "id": 410452672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703869207
    }
]