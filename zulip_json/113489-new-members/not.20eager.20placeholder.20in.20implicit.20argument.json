[
    {
        "content": "<p>Hi in TPIL <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/interacting_with_lean.html#more-on-implicit-arguments\">More on Implicit Arguments</a> how the weaker notation solves the placeholder in the following example?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">reflexive</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">symmetric</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- why makeing this not eagerly solving the problem in thm3?</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}},</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">transitive</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- why makeing this not eagerly solving the problem in thm3?</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}},</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">euclidean</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- why makeing this not eagerly solving the problem in thm3?</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}},</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">th1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">reflr</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">euclr</span> <span class=\"o\">:</span> <span class=\"n\">euclidean</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span>\n<span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n<span class=\"k\">show</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"k\">from</span> <span class=\"n\">euclr</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">reflr</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">th2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">symmr</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">euclr</span> <span class=\"o\">:</span> <span class=\"n\">euclidean</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span>\n<span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">rab</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rbc</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n<span class=\"n\">euclr</span> <span class=\"o\">(</span><span class=\"n\">symmr</span> <span class=\"n\">rab</span><span class=\"o\">)</span> <span class=\"n\">rbc</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">th3</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">reflr</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">euclr</span> <span class=\"o\">:</span> <span class=\"n\">euclidean</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n            <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n  <span class=\"n\">th2</span> <span class=\"o\">(</span><span class=\"n\">th1</span> <span class=\"n\">reflr</span> <span class=\"n\">euclr</span><span class=\"o\">)</span> <span class=\"n\">euclr</span>\n</code></pre></div>",
        "id": 420864936,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1707632456
    },
    {
        "content": "<p>Originally it has to be <code>@th2 _ _ (@th1 _ _ reflr @euclr) @euclr</code> in th3</p>",
        "id": 420864962,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1707632510
    },
    {
        "content": "<p>That example is a bit confusing and I have <a href=\"https://github.com/leanprover/theorem_proving_in_lean4/pull/69\">a pull request open to fix it</a>. In fact, even before changing the brackets to <code>{{}}</code>, <code>th3</code> can be <code>th2 (th1 reflr @euclr) @euclr</code>. The weaker implicit arguments only remove the need for <code>@</code> before <code>euclr</code>.</p>",
        "id": 420913784,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707678183
    }
]