[
    {
        "content": "<p>Hi, I'm still trying to get used to the API for filters and measures. In my efforts to formalise the concept of tight measures, I'm trying to prove that a certain alternative characterisation of a tight set of measures implies my chosen characterisation of a tight set of measures (I already have the converse implication, which I've left in for reference). </p>\n<p>I know what to do mathematically (see the commented lines), but I cannot seem to get this to work nicely. I'm happy to assume some more structure (e.g. a metric space and things like this), but the less the better! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.Regular</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ENNReal</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mα</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- A measure `μ` is tight if for all `0 &lt; ε`, there exists `K` compact such that `μ Kᶜ ≤ ε`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">IsTight</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">IsCompact</span> <span class=\"n\">K</span> <span class=\"bp\">∧</span> <span class=\"n\">μ</span> <span class=\"n\">K</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"sd\">/-- A set `S` of measures is tight if for all `0 &lt; ε`, there exists `K` compact such that for all</span>\n<span class=\"sd\">`μ` in `S`, `μ Kᶜ ≤ ε`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">IsTightSet</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">IsCompact</span> <span class=\"n\">K</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">K</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"sd\">/-- As tight sequences are very common in measuretheory, we encode these in a separate</span>\n<span class=\"sd\">definition. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">IsTightSeq</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μs</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IsTightSet</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">μs</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">limsup</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μs</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsTightSeq</span> <span class=\"n\">μs</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">IsCompact</span> <span class=\"n\">K</span> <span class=\"bp\">∧</span> <span class=\"n\">Filter.limsup</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">μs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">hK</span><span class=\"o\">,</span> <span class=\"n\">hKμ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"n\">use</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">hK</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"n\">Filter.limsup_le_iSup</span>\n  <span class=\"n\">exact</span> <span class=\"n\">iSup_le</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hKμ</span> <span class=\"o\">(</span><span class=\"n\">μs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.mem_range_self</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">of_limsup</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μs</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">IsTight</span> <span class=\"o\">(</span><span class=\"n\">μs</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">IsCompact</span> <span class=\"n\">K</span> <span class=\"bp\">∧</span> <span class=\"n\">Filter.limsup</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">μs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsTightSeq</span> <span class=\"n\">μs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">K'</span><span class=\"o\">,</span> <span class=\"n\">hK'</span><span class=\"o\">,</span> <span class=\"n\">hKμ'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- Mathematically:</span>\n  <span class=\"c1\">--- establish that for some N, i &gt; N implies μs i K'ᶜ ≤ ε</span>\n  <span class=\"c1\">--- By tightness, extract K_i for each i ≤ N</span>\n  <span class=\"c1\">--- Let K = (⋃ {i ≤ N}, K_i) ∪ K'</span>\n  <span class=\"c1\">--- Clearly, K is compact. Also, for all i, μs i Kᶜ ≤ ε</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MeasureTheory</span>\n</code></pre></div>",
        "id": 436044993,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714397201
    },
    {
        "content": "<p>(deleted) Sorry, I didn't read the assumptions correctly.</p>",
        "id": 436055133,
        "sender_full_name": "Jason KY.",
        "timestamp": 1714399427
    },
    {
        "content": "<p>If you can prove it with some more, reasonable, assumptions, I'm more than happy of course. It feels like this should need only very little (perhaps something to let the limsup work nicely), but I may be wrong (I'm still trying to wrap my head around using filters in measure theory)</p>",
        "id": 436056057,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714399652
    },
    {
        "content": "<p>I think the lemma you want is <code>eventually_lt_of_limsup_lt</code> and <code>eventually_atTop</code>. Also you can use the tactic <code>choose</code> to to find the sequence of compact sets from assumption <code>hs</code>: something like <code>choose K hK₁ hK₂ using hs</code></p>",
        "id": 436064026,
        "sender_full_name": "Jason KY.",
        "timestamp": 1714401601
    },
    {
        "content": "<p>thanks, I think that pointed me in the right direction, I've almost completed the proof now! I'll post the finished version here once I'm ready!</p>",
        "id": 436068245,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714402636
    },
    {
        "content": "<p>Ah that reminds me, do we have somewhere a version of limsup for functions with values in \\R, where the limsup is in <code>EReal</code>? In many cases it would be nicer to use than carrying around <code>IsBoundedUnder</code> asumptions...</p>",
        "id": 436068316,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714402653
    },
    {
        "content": "<p>I still need to golf this (if you like, have fun....), but I managed to complete the proof! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.Regular</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ENNReal</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mα</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- A measure `μ` is tight if for all `0 &lt; ε`, there exists `K` compact such that `μ Kᶜ ≤ ε`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">IsTight</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">IsCompact</span> <span class=\"n\">K</span> <span class=\"bp\">∧</span> <span class=\"n\">μ</span> <span class=\"n\">K</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"sd\">/-- A set `S` of measures is tight if for all `0 &lt; ε`, there exists `K` compact such that for all</span>\n<span class=\"sd\">`μ` in `S`, `μ Kᶜ ≤ ε`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">IsTightSet</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">IsCompact</span> <span class=\"n\">K</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">K</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"sd\">/-- As tight sequences are very common in measuretheory, we encode these in a separate</span>\n<span class=\"sd\">definition. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">IsTightSeq</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μs</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IsTightSet</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">μs</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">limsup</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μs</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsTightSeq</span> <span class=\"n\">μs</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">IsCompact</span> <span class=\"n\">K</span> <span class=\"bp\">∧</span> <span class=\"n\">Filter.limsup</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">μs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">hK</span><span class=\"o\">,</span> <span class=\"n\">hKμ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"n\">use</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">hK</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"n\">Filter.limsup_le_iSup</span>\n  <span class=\"n\">exact</span> <span class=\"n\">iSup_le</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hKμ</span> <span class=\"o\">(</span><span class=\"n\">μs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.mem_range_self</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">of_limsup</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μs</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">IsTight</span> <span class=\"o\">(</span><span class=\"n\">μs</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">IsCompact</span> <span class=\"n\">K</span> <span class=\"bp\">∧</span> <span class=\"n\">Filter.limsup</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">μs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsTightSeq</span> <span class=\"n\">μs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hε_fin</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">hε2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">ENNReal.half_pos</span> <span class=\"n\">hε.ne'</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">K'</span><span class=\"o\">,</span> <span class=\"n\">hK'</span><span class=\"o\">,</span> <span class=\"n\">hKμ'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">hε2</span>\n    <span class=\"k\">have</span> <span class=\"n\">hKμ'</span> <span class=\"o\">:</span> <span class=\"n\">Filter.limsup</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">μs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">K'</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">hKμ'</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.half_lt_self</span> <span class=\"n\">hε.ne'</span> <span class=\"n\">hε_fin.ne'.symm</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Filter.eventually_lt_of_limsup_lt</span> <span class=\"n\">hKμ'</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Filter.eventually_atTop</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n    <span class=\"n\">choose</span> <span class=\"n\">K</span> <span class=\"n\">hK₁</span> <span class=\"n\">hK₂</span> <span class=\"n\">using</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hs</span> <span class=\"n\">n</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">K</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"n\">K'</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">IsCompact.union</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Set.Finite.isCompact_biUnion</span> <span class=\"o\">(</span><span class=\"n\">Set.finite_le_nat</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hK₁</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hK'</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">μ</span> <span class=\"n\">hy</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_range</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hnN</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span>\n      <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hn</span><span class=\"o\">]</span>\n          <span class=\"n\">apply</span> <span class=\"n\">hK₂</span>\n        <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">measure_mono</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">this</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.compl_subset_compl</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Set.subset_union_of_subset_left</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Set.subset_biUnion_of_mem</span> <span class=\"n\">hnN</span>\n      <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">K'</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hn</span><span class=\"o\">]</span>\n          <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_not_ge</span> <span class=\"n\">hnN</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">le</span>\n        <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">measure_mono</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">this</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.compl_subset_compl</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Set.subset_union_of_subset_right</span>\n        <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"n\">isCompact_empty</span>\n    <span class=\"n\">intro</span> <span class=\"n\">μ_1</span> <span class=\"n\">_</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_lt</span><span class=\"o\">,</span> <span class=\"n\">top_le_iff</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_range</span><span class=\"o\">,</span> <span class=\"n\">Set.compl_empty</span><span class=\"o\">,</span> <span class=\"n\">le_top</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MeasureTheory</span>\n</code></pre></div>",
        "id": 436071338,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714403329
    },
    {
        "content": "<p>Thank you for your help!</p>",
        "id": 436071768,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714403428
    },
    {
        "content": "<p>I golved it a bit, might golf it a bit more later! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">of_limsup</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μs</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">IsTight</span> <span class=\"o\">(</span><span class=\"n\">μs</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span>\n      <span class=\"bp\">∃</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">IsCompact</span> <span class=\"n\">K</span> <span class=\"bp\">∧</span> <span class=\"n\">Filter.limsup</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">μs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsTightSeq</span> <span class=\"n\">μs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hε_fin</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span>\n  <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">K'</span><span class=\"o\">,</span> <span class=\"n\">hK'</span><span class=\"o\">,</span> <span class=\"n\">hKμ'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.half_pos</span> <span class=\"n\">hε.ne'</span><span class=\"o\">)</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Filter.eventually_atTop.mp</span> <span class=\"o\">(</span><span class=\"n\">Filter.eventually_lt_of_limsup_lt</span>\n      <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">hKμ'</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.half_lt_self</span> <span class=\"n\">hε.ne'</span> <span class=\"n\">hε_fin.ne'.symm</span><span class=\"o\">)))</span>\n    <span class=\"n\">choose</span> <span class=\"n\">K</span> <span class=\"n\">hK₁</span> <span class=\"n\">hK₂</span> <span class=\"n\">using</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hs</span> <span class=\"n\">n</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">K</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"n\">K'</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">IsCompact.union</span> <span class=\"o\">((</span><span class=\"n\">Set.finite_le_nat</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isCompact_biUnion</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hK₁</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">hK'</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">μ</span> <span class=\"n\">hy</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Set.mem_range.mp</span> <span class=\"n\">hy</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hn</span><span class=\"o\">]</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hnN</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">measure_mono</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hK₂</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.compl_subset_compl</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Set.subset_union_of_subset_left</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Set.subset_biUnion_of_mem</span> <span class=\"n\">hnN</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">measure_mono</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_not_ge</span> <span class=\"n\">hnN</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">le</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.compl_subset_compl</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Set.subset_union_of_subset_right</span>\n        <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"n\">isCompact_empty</span>\n    <span class=\"n\">intro</span> <span class=\"n\">μ</span> <span class=\"n\">_</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_lt</span><span class=\"o\">,</span> <span class=\"n\">top_le_iff</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_range</span><span class=\"o\">,</span> <span class=\"n\">Set.compl_empty</span><span class=\"o\">,</span> <span class=\"n\">le_top</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 436076198,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714404514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/113489-new-members/topic/Filter.2ElimSup.20and.20sequence.20of.20measures/near/436068316\">said</a>:</p>\n<blockquote>\n<p>Ah that reminds me, do we have somewhere a version of limsup for functions with values in \\R, where the limsup is in <code>EReal</code>? In many cases it would be nicer to use than carrying around <code>IsBoundedUnder</code> asumptions...</p>\n</blockquote>\n<p>I don't think so. It does seem very useful since I remember being bit by <code>IsBoundedUnder</code>. But I guess introducing this definition will require the duplication of a lot of lemmas.</p>",
        "id": 436080062,
        "sender_full_name": "Jason KY.",
        "timestamp": 1714405426
    },
    {
        "content": "<p>Just write this as the limsup of the composition of your original function with the coercion from reals to ereals?</p>",
        "id": 436083381,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714406199
    },
    {
        "content": "<p>Yep the definition is clear but some API around it would help.</p>",
        "id": 436090190,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714408016
    },
    {
        "content": "<p>Mostly linking boundedness to finite values I guess</p>",
        "id": 436090423,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714408078
    }
]