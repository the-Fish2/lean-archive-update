[
    {
        "content": "<p>I wonder how I should proceed in the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Factorization.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"o\">((</span><span class=\"n\">Nat.factorization</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span> <span class=\"o\">⟩</span>\n    <span class=\"n\">intro</span> <span class=\"n\">k</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.factorization_pow</span><span class=\"o\">]</span>\n    <span class=\"n\">dsimp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists_apply_eq_apply'</span>\n</code></pre></div>\n<p>Insights or pointers greatly appreciated.</p>",
        "id": 425169818,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1709755908
    },
    {
        "content": "<p>You're missing some imports</p>",
        "id": 425172035,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709756814
    },
    {
        "content": "<p>I had the following: <code>import Mathlib.Data.Nat.Factorization.Basic</code></p>",
        "id": 425172283,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1709756899
    },
    {
        "content": "<p>Please edit your first message to include it</p>",
        "id": 425172559,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709757006
    },
    {
        "content": "<p>Added the import.</p>",
        "id": 425172729,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1709757101
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Factorization.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"o\">((</span><span class=\"n\">Nat.factorization</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"mi\">0</span>\n      <span class=\"n\">subst</span> <span class=\"n\">n</span>\n      <span class=\"n\">simp</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">Nat.factorization</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">Nat.factorization</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Nat.prod_factorization_eq_prod_primeFactors</span><span class=\"o\">]</span>\n    <span class=\"n\">trans</span> <span class=\"n\">Finset.prod</span> <span class=\"n\">n.primeFactors</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">Nat.factorization</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">Nat.prod_factorization_eq_prod_primeFactors</span><span class=\"o\">]</span>\n      <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">Nat.factorization_prod_pow_eq_self</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">Finset.prod_pow</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Finset.prod_congr</span> <span class=\"n\">rfl</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.div_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">k</span><span class=\"o\">)]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span> <span class=\"o\">⟩</span>\n    <span class=\"n\">intro</span> <span class=\"n\">k</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.factorization_pow</span><span class=\"o\">]</span>\n    <span class=\"n\">dsimp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists_apply_eq_apply'</span>\n</code></pre></div>",
        "id": 425175783,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709758348
    },
    {
        "content": "<p>Thank you. This looks a lot harder than I expected.</p>",
        "id": 425181657,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1709760879
    },
    {
        "content": "<p>Where can one find more examples of proofs using <code>Nat.factorization</code> and related theorems?</p>",
        "id": 425182782,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1709761376
    },
    {
        "content": "<p>I use loogle: <a href=\"https://loogle.lean-lang.org/?q=Nat.factorization\">https://loogle.lean-lang.org/?q=Nat.factorization</a></p>",
        "id": 425183241,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709761564
    },
    {
        "content": "<p>It does feel like there's some lemmas missing</p>",
        "id": 425183286,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709761585
    },
    {
        "content": "<p>You mean the library should have more results that people like me can use?</p>",
        "id": 425183347,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1709761622
    },
    {
        "content": "<p>Yeah, exactly.</p>",
        "id": 425183731,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709761761
    },
    {
        "content": "<p>Maybe the mathlib result should be in terms of <code>Even (Nat.factorization n)</code>?</p>",
        "id": 425183915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709761839
    },
    {
        "content": "<p>With <code>IsSquare</code> on the RHS</p>",
        "id": 425183925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709761846
    },
    {
        "content": "<p>Probably there's some low hanging fruit here for lemmas about <code>Even</code> / <code>IsSquare</code> on <code>Pi</code>/<code>Prod</code>/<code>Finsupp</code> etc</p>",
        "id": 425184036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709761902
    },
    {
        "content": "<p>Maybe a result like this could be added?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">some_name</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"o\">((</span><span class=\"n\">Nat.factorization</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 425184166,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1709761934
    },
    {
        "content": "<p>I think we basically have this in the form of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.floorRoot#doc\">docs#Nat.floorRoot</a></p>",
        "id": 425195768,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709767022
    },
    {
        "content": "<p>Not entirely sure how painful the glue is</p>",
        "id": 425195793,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709767035
    }
]