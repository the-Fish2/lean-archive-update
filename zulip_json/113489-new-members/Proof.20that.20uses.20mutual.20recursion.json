[
    {
        "content": "<p>In TPIL Chapter 8 (Induction and recursion), I'm not familiar with the format that is used in this proof regarding mutual recursion of <code>Even</code> and <code>Odd</code>. Can someone explain what the code means here, i.e. what does <code>_,</code> mean and how <code>odd_succ</code> is helping us here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n <span class=\"kd\">inductive</span> <span class=\"n\">Even</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n   <span class=\"bp\">|</span> <span class=\"n\">even_zero</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"mi\">0</span>\n   <span class=\"bp\">|</span> <span class=\"n\">even_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Odd</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n <span class=\"kd\">inductive</span> <span class=\"n\">Odd</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n   <span class=\"bp\">|</span> <span class=\"n\">odd_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n<span class=\"kn\">open</span> <span class=\"n\">Even</span> <span class=\"n\">Odd</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">even_of_odd_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">odd_succ</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 409532743,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1703228338
    },
    {
        "content": "<p>This is \"pattern matching\". The underscore is used instead of a name when the name is not used or can be derived automatically. The comma separates parts of the pattern, so lean reads this as \"take a natural number (from the <code>∀ n</code>), and take a value of type <code>Odd (n + 1)</code> if it looks like <code>odd_succ something something</code>, and name the somethings <code>n</code> and <code>h</code>, and then the proof for this case is given after the <code>=&gt;</code></p>",
        "id": 409540901,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703232688
    },
    {
        "content": "<p>Generally you'd have more than one alternative (starting with the <code>|</code> bar), but in this case <code>Odd (n + 1)</code> can only be constructed as <code>odd_succ</code></p>",
        "id": 409541062,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703232751
    },
    {
        "content": "<p>Compare with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">even_of_odd_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">even_zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">even_succ</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 409541205,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703232839
    },
    {
        "content": "<p>Got it, thanks <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 409545662,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1703235139
    }
]