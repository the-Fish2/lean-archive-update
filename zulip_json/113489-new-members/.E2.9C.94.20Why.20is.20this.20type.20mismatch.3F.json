[
    {
        "content": "<p>So I have this definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">IsLowerMooreFamily</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">IsLeast</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">M</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Now I am trying to prove the closed property of the definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">MooreFamilyExtend3</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">IsLowerMooreFamily</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">InfClosed</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">InfClosed</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h_a_in_M</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h_b_in_M</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp1</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">L.inf_le_left</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But why can' t I apply <code>exact L.inf_le_left a b</code>? It keep saying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Lattice.inf_le_left</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">LE.le</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Preorder.toLE</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PartialOrder.toPreorder</span> <span class=\"n\">α</span> <span class=\"n\">SemilatticeSup.toPartialOrder</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">LE.le</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Preorder.toLE</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PartialOrder.toPreorder</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>why is this a type mismatch? I see that It is almost the same?</p>",
        "id": 417273658,
        "sender_full_name": "kishou yusa",
        "timestamp": 1705942463
    },
    {
        "content": "<p>You have 2 order structures on <code>α</code>, one coming from <code>PartialOrder</code>, and another one coming from <code>CompleteLattice</code>.</p>",
        "id": 417273790,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705942508
    },
    {
        "content": "<p>Unless this was your intention, you should only assume the latter</p>",
        "id": 417273835,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705942528
    },
    {
        "content": "<p>Oh thanks you after remove PartialOrder it work again.</p>",
        "id": 417274043,
        "sender_full_name": "kishou yusa",
        "timestamp": 1705942582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"666341\">kishou yusa</span> has marked this topic as resolved.</p>",
        "id": 417274052,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705942584
    }
]