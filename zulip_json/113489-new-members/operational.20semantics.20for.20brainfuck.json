[
    {
        "content": "<p>Hi!!! So I'm trying to define the operational semantics of Brainfuck, focusing on small step semantics at first, and I'm stuck on defining the core element of the state, which is a memory cell. This memory cell would be the equivalent of a byte, so a natural number strictly smaller than 256. How would I go about defining this in order to later be able to reason about it?</p>",
        "id": 411554198,
        "sender_full_name": "Stefan",
        "timestamp": 1704589100
    },
    {
        "content": "<p><code>Fin 256</code>, perhaps?</p>",
        "id": 411555185,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704589900
    },
    {
        "content": "<p>also consider <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.BitVec#doc\">docs#Std.BitVec</a></p>",
        "id": 411555439,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704590112
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UInt8#doc\">docs#UInt8</a> is <code>Fin 256</code> but has compiler support where the runtime representation is a byte.</p>",
        "id": 411555874,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704590489
    },
    {
        "content": "<p>Thank you for the suggestions!! I'll probably get stuck again and come back</p>",
        "id": 411639355,
        "sender_full_name": "Stefan",
        "timestamp": 1704668195
    },
    {
        "content": "<p>Hello! While proving a theorem using BigStep semantics I ran into the following case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mp</span>\n<span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">State</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">Op.pDec</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">State.pDec</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>this can be proved with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">h</span>\n<span class=\"bp\">.</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>but it is really not clear to me why we can use <code>cases</code> here. <br>\nafter using <code>cases</code> the goal and assumptions change to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mp.pDec</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">State</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">State.pDec</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">State.pDec</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>and I can't really wrap my head around this.</p>\n<p>For reference State is defined as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">BFBand</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">before</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">current</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">after</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">State</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">input</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">output</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span>\n  <span class=\"n\">band</span><span class=\"o\">:</span> <span class=\"n\">BFBand</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>pDec is defined as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">State</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pDec</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"o\">):</span> <span class=\"n\">State</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">s.band</span>\n  <span class=\"k\">let</span> <span class=\"n\">newBand</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">b.before</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span>  <span class=\"o\">⟨[],</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b.current</span> <span class=\"o\">::</span> <span class=\"n\">b.after</span><span class=\"o\">⟩</span>\n      <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">b.current</span> <span class=\"o\">::</span> <span class=\"n\">b.after</span><span class=\"o\">⟩</span>\n  <span class=\"o\">⟨</span><span class=\"n\">s.input</span><span class=\"o\">,</span> <span class=\"n\">s.output</span><span class=\"o\">,</span> <span class=\"n\">newBand</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">State</span>\n</code></pre></div>\n<p>Op is defined as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Op</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nop</span>        <span class=\"o\">:</span> <span class=\"n\">Op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pInc</span>       <span class=\"o\">:</span> <span class=\"n\">Op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pDec</span>       <span class=\"o\">:</span> <span class=\"n\">Op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vInc</span>       <span class=\"o\">:</span> <span class=\"n\">Op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vDec</span>       <span class=\"o\">:</span> <span class=\"n\">Op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">brakPair</span>   <span class=\"o\">:</span> <span class=\"n\">Op</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">seq</span>        <span class=\"o\">:</span> <span class=\"n\">Op</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Op</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">output</span>     <span class=\"o\">:</span> <span class=\"n\">Op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">input</span>      <span class=\"o\">:</span> <span class=\"n\">Op</span>\n</code></pre></div>\n<p>and BigStep.pDec is defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">BigStep</span><span class=\"o\">:</span> <span class=\"n\">Op</span> <span class=\"bp\">×</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">pDec</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"o\">):</span> <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">Op.pDec</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s.pDec</span>\n</code></pre></div>",
        "id": 412181068,
        "sender_full_name": "Stefan",
        "timestamp": 1704904994
    },
    {
        "content": "<p>Ignoring for a moment whether you have the right definitions., you can use <code>case</code> because <code>BigStep</code> is an inductive type, and <code>case</code> will essentially be “induction without the inductive hypothesis” (i.e. show that your proposition holds for any possible constructor of your inductive type).  You have only one constructor, so Lean reasonably substitutes that in,  and <code>t</code> is forced to be <code>s.pDec</code> because that is the only thing that it can be, according to your definition of <code>BigStep</code>.</p>",
        "id": 412182900,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1704905642
    },
    {
        "content": "<p>I can kind of get behind that, but I only gave the partial definition of BigStep to save some space.  Here is the full definition for more context. Why is cases not trying to match the other constructors? Is it immediately obvious that only the pDec constructor can be matched?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">BigStep</span><span class=\"o\">:</span> <span class=\"n\">Op</span> <span class=\"bp\">×</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nop</span>  <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"o\">):</span> <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">Op.nop</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span>  <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pInc</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"o\">):</span> <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">Op.pInc</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s.pInc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pDec</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"o\">):</span> <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">Op.pDec</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s.pDec</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vInc</span> <span class=\"n\">s</span><span class=\"o\">:</span>\n      <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">Op.vInc</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span>\n        <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">s.band</span>\n        <span class=\"o\">⟨</span><span class=\"n\">s.input</span><span class=\"o\">,</span> <span class=\"n\">s.output</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b.before</span><span class=\"o\">,</span> <span class=\"n\">b.current</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b.after</span><span class=\"o\">⟩⟩)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vDec</span> <span class=\"n\">s</span><span class=\"o\">:</span>\n      <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">Op.vDec</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span>\n        <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">s.band</span>\n        <span class=\"o\">⟨</span><span class=\"n\">s.input</span><span class=\"o\">,</span> <span class=\"n\">s.output</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b.before</span><span class=\"o\">,</span> <span class=\"n\">b.current</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b.after</span><span class=\"o\">⟩⟩)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">brakPairTrue</span> <span class=\"o\">{</span><span class=\"n\">ops</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">s.dereference</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">body</span><span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">ops</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">rest</span><span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">((</span><span class=\"n\">Op.brakPair</span> <span class=\"n\">ops</span><span class=\"o\">),</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">):</span>\n      <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">Op.brakPair</span> <span class=\"n\">ops</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">brakPairFalse</span> <span class=\"n\">ops</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">s.dereference</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n      <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">Op.brakPair</span> <span class=\"n\">ops</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"n\">seq</span> <span class=\"o\">(</span><span class=\"n\">ops1</span> <span class=\"n\">s</span> <span class=\"n\">ops2</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span>  <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">ops1</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">ops2</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">):</span>\n      <span class=\"n\">BigStep</span> <span class=\"o\">((</span><span class=\"n\">Op.seq</span> <span class=\"n\">ops1</span> <span class=\"n\">ops2</span><span class=\"o\">),</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">input</span> <span class=\"n\">s</span><span class=\"o\">:</span>\n      <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">Op.input</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span>\n        <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">s.band</span>\n        <span class=\"k\">match</span> <span class=\"n\">s.input</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨[],</span>\n                   <span class=\"s2\">\"&lt;&lt;error occurred: Not enough input&gt;&gt;\"</span> <span class=\"o\">::</span> <span class=\"n\">s.output</span><span class=\"o\">,</span>\n                   <span class=\"o\">⟨</span><span class=\"n\">b.before</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b.after</span><span class=\"o\">⟩⟩</span>\n          <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s.output</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b.before</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">b.after</span><span class=\"o\">⟩⟩)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">output</span> <span class=\"n\">s</span><span class=\"o\">:</span>\n      <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">Op.output</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span>\n        <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">s.band</span>\n        <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Char.ofNat</span> <span class=\"n\">b.current</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span>\n        <span class=\"o\">⟨</span><span class=\"n\">s.input</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">s.output</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 412184435,
        "sender_full_name": "Stefan",
        "timestamp": 1704906150
    },
    {
        "content": "<p>Hi again! I have the big step semantics defined for my language and I'm trying to write a proof for a swap operation. More concretely, if the sequence of operations is <code>OPS</code> and the initial state is <code>s := {[], 0, [x, y]}</code>, then <code>(OPS, s) ==&gt; {[], 0, [y, x]}</code>. Unfortunately I'm stuck midway through, proving the following lemma:</p>\n<p><code>(OPS', { [0], k, [] }) ==&gt; { [k], 0, [] }  -&gt; (OPS', { [1], k, [] }) ==&gt; { [1 + k], 0, [] }</code></p>\n<p>here OPS' is the form <code>(Op.brakPair ops)</code>, which would be the equivalent of <code>while (s.current != 0) { ops }</code> in a C-like language and <code>s.current</code> is the non-list field of a state.</p>\n<p>I don't really have any idea on how to approach this.</p>",
        "id": 412816928,
        "sender_full_name": "Stefan",
        "timestamp": 1705240616
    },
    {
        "content": "<p>I don't see any reason why that implication would be true</p>",
        "id": 412817346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705240954
    },
    {
        "content": "<p>It seems like you have the wrong inductive hypothesis</p>",
        "id": 412817388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705240998
    },
    {
        "content": "<p>Do you have a theorem statement?</p>",
        "id": 412817409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705241021
    },
    {
        "content": "<p>I suspect I wasn't clear enough in my explanation. OPS are not generic operations, but a particular set that should indeed swap two numbers. I also edited the previous message with a clarification changing OPS to OPS' in the lemma. The implication should now make more sense. Also, here is the full theorem statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bfSwapTX</span><span class=\"o\">:</span> <span class=\"n\">Op</span> <span class=\"o\">:=</span> <span class=\"bp\">&gt;</span><span class=\"n\">_</span><span class=\"o\">[</span><span class=\"bp\">&lt;</span><span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"n\">_</span><span class=\"bp\">&gt;</span><span class=\"n\">_</span><span class=\"bp\">-</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">bfSwapXY</span><span class=\"o\">:</span> <span class=\"n\">Op</span> <span class=\"o\">:=</span> <span class=\"bp\">&gt;</span><span class=\"n\">_</span><span class=\"o\">[</span><span class=\"bp\">&lt;</span><span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"n\">_</span><span class=\"bp\">&gt;</span><span class=\"n\">_</span><span class=\"bp\">-</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">bfSwapYT</span><span class=\"o\">:</span> <span class=\"n\">Op</span> <span class=\"o\">:=</span> <span class=\"bp\">&lt;</span><span class=\"n\">_</span><span class=\"bp\">&lt;</span><span class=\"n\">_</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"n\">_</span><span class=\"bp\">&gt;</span><span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"n\">_</span><span class=\"bp\">&lt;</span><span class=\"n\">_</span><span class=\"bp\">&lt;</span><span class=\"n\">_</span><span class=\"bp\">-</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">bfSwap</span><span class=\"o\">:</span> <span class=\"n\">Op</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bfSwapTX</span><span class=\"o\">)</span><span class=\"n\">_</span><span class=\"o\">(</span><span class=\"n\">bfSwapXY</span><span class=\"o\">)</span><span class=\"n\">_</span><span class=\"o\">(</span><span class=\"n\">bfSwapYT</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">swap</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}:</span> <span class=\"o\">(</span><span class=\"n\">bfSwap</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">State.mk</span> <span class=\"o\">[]</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]))</span> <span class=\"bp\">⟹</span> <span class=\"n\">State.mk</span> <span class=\"o\">[]</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 412818851,
        "sender_full_name": "Stefan",
        "timestamp": 1705242264
    },
    {
        "content": "<p>from what I can tell the inductive hypotheses for the three loops are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">([</span><span class=\"bp\">&lt;</span><span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"n\">_</span><span class=\"bp\">&gt;</span><span class=\"n\">_</span><span class=\"bp\">-</span><span class=\"o\">],</span> <span class=\"o\">(</span><span class=\"n\">State.mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">⟹</span> <span class=\"n\">State.mk</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">r</span> <span class=\"c1\">-- loops bfSwapTX and bfSwapXY</span>\n<span class=\"o\">([</span><span class=\"bp\">&gt;</span><span class=\"n\">_</span><span class=\"bp\">&gt;</span><span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"n\">_</span><span class=\"bp\">&lt;</span><span class=\"n\">_</span><span class=\"bp\">&lt;</span><span class=\"n\">_</span><span class=\"bp\">-</span><span class=\"o\">],</span> <span class=\"o\">(</span><span class=\"n\">State.mk</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">r</span><span class=\"o\">)))</span> <span class=\"bp\">⟹</span> <span class=\"n\">State.mk</span> <span class=\"n\">l</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"c1\">-- bfSwapYT</span>\n</code></pre></div>",
        "id": 412819508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705242850
    },
    {
        "content": "<p>you prove the first one by induction on <code>b</code> generalizing <code>a</code>, and the second one by induction on <code>a</code> generalizing <code>b</code></p>",
        "id": 412819581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705242921
    },
    {
        "content": "<p>and the rest is just forward simulation</p>",
        "id": 412819614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705242952
    },
    {
        "content": "<p>You are correct. Where I get stuck is on the successor step in the induction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">succ</span>\n<span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n<span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Op.brakPair</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"n\">_</span><span class=\"bp\">&gt;</span><span class=\"n\">_</span><span class=\"bp\">-</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">before</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">current</span> <span class=\"o\">:=</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"o\">}</span> <span class=\"o\">)</span> <span class=\"bp\">⟹</span> <span class=\"o\">{</span> <span class=\"n\">before</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">current</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">Op.brakPair</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"n\">_</span><span class=\"bp\">&gt;</span><span class=\"n\">_</span><span class=\"bp\">-</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">before</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">current</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"o\">})</span> <span class=\"bp\">⟹</span>  <span class=\"o\">{</span> <span class=\"n\">before</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">current</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>It's probably trivial, but I don't know how to progress with the proof from this step onwards</p>",
        "id": 412821162,
        "sender_full_name": "Stefan",
        "timestamp": 1705244044
    },
    {
        "content": "<p>you should apply <code>brakPairTrue</code> there</p>",
        "id": 412821229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705244096
    },
    {
        "content": "<p>you forgot to <code>generalizing a</code> there though</p>",
        "id": 412821261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705244126
    },
    {
        "content": "<p>because you need to apply the inductive hypothesis with <code>a+1</code> in place of <code>a</code></p>",
        "id": 412821285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705244149
    },
    {
        "content": "<p>Thank you very much for the input!! Could you guide to where I could see some examples using generalizing and/or some info on how to use it? This is new to me</p>",
        "id": 412821961,
        "sender_full_name": "Stefan",
        "timestamp": 1705244615
    },
    {
        "content": "<p><code>induction b generalizing a</code></p>",
        "id": 412822937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705245327
    },
    {
        "content": "<p>I got it, thank you very much for the help!</p>",
        "id": 412834797,
        "sender_full_name": "Stefan",
        "timestamp": 1705255681
    },
    {
        "content": "<p>I'm now trying to parse a string into an Op, but can't figure how to prove termination</p>\n<p>Op is defined as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Op</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nop</span>        <span class=\"o\">:</span> <span class=\"n\">Op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pInc</span>       <span class=\"o\">:</span> <span class=\"n\">Op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pDec</span>       <span class=\"o\">:</span> <span class=\"n\">Op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vInc</span>       <span class=\"o\">:</span> <span class=\"n\">Op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vDec</span>       <span class=\"o\">:</span> <span class=\"n\">Op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">brakPair</span>   <span class=\"o\">:</span> <span class=\"n\">Op</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">seq</span>        <span class=\"o\">:</span> <span class=\"n\">Op</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Op</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">output</span>     <span class=\"o\">:</span> <span class=\"n\">Op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">input</span>      <span class=\"o\">:</span> <span class=\"n\">Op</span>\n</code></pre></div>\n<p>so far I've tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fromString</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">Op</span> <span class=\"o\">:=</span>\n  <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">s.toUTF8.toList</span><span class=\"o\">)</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">chrl</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">UInt8</span><span class=\"o\">):</span> <span class=\"n\">Op</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">chrl</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nop</span>\n    <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">62</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Op.seq</span> <span class=\"n\">Op.pInc</span>   <span class=\"o\">(</span><span class=\"n\">parse</span> <span class=\"n\">t</span><span class=\"o\">)</span>        <span class=\"c1\">-- 62 &gt;</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">60</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Op.seq</span> <span class=\"n\">Op.pDec</span>   <span class=\"o\">(</span><span class=\"n\">parse</span> <span class=\"n\">t</span><span class=\"o\">)</span>        <span class=\"c1\">-- 60 &lt;</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">43</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Op.seq</span> <span class=\"n\">Op.vInc</span>   <span class=\"o\">(</span><span class=\"n\">parse</span> <span class=\"n\">t</span><span class=\"o\">)</span>        <span class=\"c1\">-- 43 +</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">45</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Op.seq</span> <span class=\"n\">Op.vDec</span>   <span class=\"o\">(</span><span class=\"n\">parse</span> <span class=\"n\">t</span><span class=\"o\">)</span>        <span class=\"c1\">-- 45 -</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">46</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Op.seq</span> <span class=\"n\">Op.output</span> <span class=\"o\">(</span><span class=\"n\">parse</span> <span class=\"n\">t</span><span class=\"o\">)</span>        <span class=\"c1\">-- 46 .</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">59</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Op.seq</span> <span class=\"n\">Op.input</span>  <span class=\"o\">(</span><span class=\"n\">parse</span> <span class=\"n\">t</span><span class=\"o\">)</span>        <span class=\"c1\">-- 59 ;</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">91</span> <span class=\"bp\">=&gt;</span>                                   <span class=\"c1\">-- 91 [</span>\n        <span class=\"k\">let</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">t.takeWhile</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">93</span><span class=\"o\">)</span> <span class=\"c1\">-- 93 ]</span>\n        <span class=\"k\">let</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">t.dropWhile</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">93</span><span class=\"o\">)</span> <span class=\"c1\">-- 93 ]</span>\n        <span class=\"k\">let</span> <span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"n\">parse</span> <span class=\"n\">head</span>\n        <span class=\"k\">let</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"n\">parse</span> <span class=\"n\">tail</span>\n        <span class=\"n\">Op.seq</span> <span class=\"o\">(</span><span class=\"n\">Op.brakPair</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"n\">rest</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">parse</span> <span class=\"n\">t</span> <span class=\"c1\">-- anything else skip</span>\n    <span class=\"n\">termination_by</span>\n      <span class=\"n\">fromString</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n      <span class=\"n\">parse</span> <span class=\"n\">chrl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">chrl</span>\n</code></pre></div>\n<p>termination fails to be proven <code>body</code> and <code>rest</code></p>",
        "id": 412849159,
        "sender_full_name": "Stefan",
        "timestamp": 1705268799
    },
    {
        "content": "<p>Can you, in prose, say why you think <code>parse</code> is terminating?</p>",
        "id": 412918507,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1705311680
    },
    {
        "content": "<p>Yes. With every recursive call the passed char list will be at least one character smaller in size. in the 91 case, len(head) + len(tail) = len(t), so again, the amount of chars processed will decrease. Execution stops when an empty list is reached.</p>",
        "id": 412957359,
        "sender_full_name": "Stefan",
        "timestamp": 1705325320
    },
    {
        "content": "<p>Ok, but that is a sizeable amount of arguing, and beyond what lean can do by default for you these days.</p>\n<p>The first thing you need to do is to tell lean that you expect the <code>length</code> of the list to be decreasing (and no the size, which takes the “size” of the charaters into account):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">parse</span> <span class=\"n\">chrl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">chrl.length</span>\n</code></pre></div>",
        "id": 412958831,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1705325845
    },
    {
        "content": "<p>Now the error message will be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`-</span><span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">remaining</span> <span class=\"n\">goals</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">decreasing_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">tactic</span> <span class=\"n\">for</span> <span class=\"n\">discharging</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">goal</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">UInt8</span>\n<span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">UInt8</span>\n<span class=\"n\">head</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">UInt8</span> <span class=\"o\">:=</span> <span class=\"n\">List.takeWhile</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">93</span><span class=\"o\">))</span> <span class=\"n\">t</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.takeWhile</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">!</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">93</span><span class=\"o\">))</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 412960210,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1705326244
    },
    {
        "content": "<p>After trying that the error persists and I get the following message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`-</span><span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">remaining</span> <span class=\"n\">goals</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">decreasing_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">tactic</span> <span class=\"n\">for</span> <span class=\"n\">discharging</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">goal</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">UInt8</span>\n<span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">UInt8</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.takeWhile</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">!</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">93</span><span class=\"o\">))</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If there is no other option, I would attempt prooving what's suggested, but don't understand what the exact syntax for beginning the poof should be. However, if you have other ideas to share, I would very much appreciate it</p>",
        "id": 412960351,
        "sender_full_name": "Stefan",
        "timestamp": 1705326292
    },
    {
        "content": "<p>Normally it <em>should</em> work to prove the relevant relations right in the code, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"bp\">|</span> <span class=\"mi\">91</span> <span class=\"bp\">=&gt;</span>                                   <span class=\"c1\">-- 91 [</span>\n        <span class=\"k\">let</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">t.takeWhile</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">93</span><span class=\"o\">)</span> <span class=\"c1\">-- 93 ]</span>\n        <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">head.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t.length.succ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n        <span class=\"k\">let</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">t.dropWhile</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">93</span><span class=\"o\">)</span> <span class=\"c1\">-- 93 ]</span>\n        <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">tail.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t.length.succ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n        <span class=\"k\">let</span> <span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"n\">parse</span> <span class=\"n\">head</span>\n        <span class=\"k\">let</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"n\">parse</span> <span class=\"n\">tail</span>\n        <span class=\"n\">Op.seq</span> <span class=\"o\">(</span><span class=\"n\">Op.brakPair</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"n\">rest</span>\n</code></pre></div>\n<p>But in this case, there is some annoyance that <code>(λ x =&gt; x ≠ 93)</code> gets rewritten to <code>(fun x =&gt; !decide (x = 93))</code> and and now <code>assumption</code> doesn’t work. You can work around it by writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">decreasing_by</span> <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">decreasing_tactic</span> <span class=\"bp\">|</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">decide_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>(IMHO this is a bug, the <code>simp_wf</code> in the default <code>decreasing_tactic</code> should <em>only</em> unfold <code>wf</code> stuff but otherwise leave the goal as it as far as possible).</p>",
        "id": 412960619,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1705326372
    },
    {
        "content": "<p>Thank you very much!</p>",
        "id": 412977095,
        "sender_full_name": "Stefan",
        "timestamp": 1705331322
    },
    {
        "content": "<p>I managed to finalize the proofs</p>",
        "id": 412977136,
        "sender_full_name": "Stefan",
        "timestamp": 1705331340
    }
]