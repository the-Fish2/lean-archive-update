[
    {
        "content": "<p>Suppose I have a function that naturally accepts a subarray but I want it to be invocable using an array as well (i.e. so it behaves \"polymophically\"). How might one achieve this?</p>",
        "id": 438218766,
        "sender_full_name": "Somo S.",
        "timestamp": 1715555474
    },
    {
        "content": "<p>Here is my naive attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Subarray</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Array.toSubarray</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Subarray</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Subarray</span> <span class=\"n\">Int</span><span class=\"o\">)</span><span class=\"c1\">-- WORKS</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Subarray</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"c1\">-- WORKS</span>\n\n\n<span class=\"c1\">-- But what I want to work is like:</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"c1\">-- FIXME</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  foo #[-0, 1]</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  #[-0, 1]</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Array Int : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Subarray ?m.754 : Type</span>\n<span class=\"cm\"> -/</span>\n\n\n<span class=\"c1\">-- Or:</span>\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"c1\">-- FIXME</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  y</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Array Int : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Subarray ?m.1411 : Type</span>\n<span class=\"cm\"> -/</span>\n</code></pre></div>",
        "id": 438379566,
        "sender_full_name": "Somo S.",
        "timestamp": 1715611228
    },
    {
        "content": "<p><code>foo (α := Int) #[-0, 1]</code> works too, but I agree this is suboptimal</p>",
        "id": 438413073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715621251
    },
    {
        "content": "<p>thanks thats actually helpful. for some reason, i hadn't realized i could also redefine the signature of <code>foo</code> so the type is expicit</p>",
        "id": 438437134,
        "sender_full_name": "Somo S.",
        "timestamp": 1715630214
    },
    {
        "content": "<p>indeed not optimal, but atleast it works.</p>",
        "id": 438437481,
        "sender_full_name": "Somo S.",
        "timestamp": 1715630354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> has marked this topic as resolved.</p>",
        "id": 438439504,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715631113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> has marked this topic as unresolved.</p>",
        "id": 438449758,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715634930
    },
    {
        "content": "<p>I've unresolved this; I think this is a good question, and suggests either a shortcoming in the coercion system, or a use-case for <code>unif_hint</code> which is otherwise totally unused.</p>",
        "id": 438449943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715634967
    },
    {
        "content": "<p>i guess a good candidate for RFC then?</p>",
        "id": 438450172,
        "sender_full_name": "Somo S.",
        "timestamp": 1715635038
    },
    {
        "content": "<p>Maybe you could show us some code where this would be useful? I suspect this is mostly an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem, and the real solution is to want something else. :-)</p>",
        "id": 438889007,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715808577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"582386\">@Somo S.</span> Here's an implementation of my suggestion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ArrayLike</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">toSubarray</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">Subarray</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ArrayLike</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Array.toSubarray</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ArrayLike</span> <span class=\"o\">(</span><span class=\"n\">Subarray</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">id</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Subarray</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Array.toSubarray</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">ArrayLike</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Subarray</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Subarray</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"n\">x</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"bp\">↑</span><span class=\"n\">y</span>\n</code></pre></div>",
        "id": 438889554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715808819
    },
    {
        "content": "<p>great <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> .. this is actually perfect! I had tried this.. but dont yet understand when is a good time to use outParam (so i didn't include outparam) thanks for this!</p>",
        "id": 438890386,
        "sender_full_name": "Somo S.",
        "timestamp": 1715809213
    }
]