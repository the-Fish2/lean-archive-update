[
    {
        "content": "<p>Why can't this autocomplete? check this <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Equiv</span>\n<span class=\"kn\">open</span> <span class=\"n\">Equiv</span> <span class=\"n\">Perm</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"mi\">2000</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">h4_1</span>\n  <span class=\"o\">(</span><span class=\"n\">gorient</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">gpermute</span><span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">gorient</span> <span class=\"bp\">∘</span> <span class=\"n\">gpermute</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">gorient</span> <span class=\"bp\">∘</span> <span class=\"n\">gpermute</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">gorient</span> <span class=\"bp\">∘</span> <span class=\"n\">gpermute</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">gorient</span> <span class=\"bp\">∘</span> <span class=\"n\">gpermute</span><span class=\"o\">)</span> <span class=\"mi\">2</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">set</span> <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">gorient</span> <span class=\"bp\">∘</span> <span class=\"n\">gpermute</span><span class=\"o\">)</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 426909166,
        "sender_full_name": "chenjulang",
        "timestamp": 1710611148
    },
    {
        "content": "<p>This should be something proved under 3 lines , Right? How to unfold the sum ?</p>",
        "id": 426909755,
        "sender_full_name": "chenjulang",
        "timestamp": 1710611743
    },
    {
        "content": "<p>Or simply like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">testSum</span>\n  <span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"n\">fn</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">fn</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"mi\">2</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 426910720,
        "sender_full_name": "chenjulang",
        "timestamp": 1710612615
    },
    {
        "content": "<p><code>simp [add_assoc]</code> solves it</p>",
        "id": 426911631,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1710613438
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.sum_univ_three#doc\">docs#Fin.sum_univ_three</a> should help</p>",
        "id": 426921167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710622512
    },
    {
        "content": "<p>[Quoting…]</p>\n<p>what if the \"three\" is \"twelve\"? <span aria-label=\"melting face\" class=\"emoji emoji-1fae0\" role=\"img\" title=\"melting face\">:melting_face:</span></p>",
        "id": 426995432,
        "sender_full_name": "chenjulang",
        "timestamp": 1710648041
    },
    {
        "content": "<p>I solve this by a stupid way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">prod_univ_9</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">9</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">8</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.prod_univ_castSucc</span><span class=\"o\">,</span> <span class=\"n\">Fin.prod_univ_eight</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">prod_univ_10</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">9</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.prod_univ_castSucc</span><span class=\"o\">,</span> <span class=\"n\">prod_univ_9</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">prod_univ_11</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">11</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">10</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.prod_univ_castSucc</span><span class=\"o\">,</span> <span class=\"n\">prod_univ_10</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">prod_univ_12</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">12</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">11</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.prod_univ_castSucc</span><span class=\"o\">,</span> <span class=\"n\">prod_univ_11</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 427004419,
        "sender_full_name": "chenjulang",
        "timestamp": 1710650512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 427004446,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710650520
    },
    {
        "content": "<p>See my answer in your other thread about n=1000</p>",
        "id": 427068588,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710668454
    },
    {
        "content": "<p>OK : <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20What.20if.20Fin.2Esum_univ_1000.20.3F\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.E2.9C.94.20What.20if.20Fin.2Esum_univ_1000.20.3F</a></p>",
        "id": 427082415,
        "sender_full_name": "chenjulang",
        "timestamp": 1710672210
    }
]