[
    {
        "content": "<p>Hello, <br>\nlets image a Inductive I that wraps a value of a. UnwrapType is the Type of a function that unwraps the value of a. I now want to express a computation on values of I a based on an unwrapping function so i can access their values. concrete instances of my compType now have to declare a named lambda expression and whenever i want to do computations on my \"I a\" values i have to call this named lambda first.<br>\nthis happens alot so i want a nicer way, i thought of automatically introducing a named lambda with name \"un\" and allways appliing this \"un\" function when a \"I a\" Value appears.<br>\nmaybe someone can help me or point to some  helpful resources, i guess the metaprogramming book could help but it seems somewhat scary to me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">I</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">unwrap</span>  <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">UnwrapType</span>  <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span>  <span class=\"n\">I</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">v1</span><span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">v2</span><span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"s2\">\"two\"</span>\n<span class=\"c1\">--....</span>\n<span class=\"kd\">def</span> <span class=\"n\">compType</span> <span class=\"o\">:=</span> <span class=\"n\">UnwrapType</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">calc1</span><span class=\"o\">:</span> <span class=\"n\">compType</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">un</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">concat</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span>  <span class=\"o\">(</span><span class=\"n\">un</span> <span class=\"n\">v1</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">un</span> <span class=\"n\">v2</span><span class=\"o\">)</span>\n    <span class=\"o\">()</span>\n<span class=\"c1\">--... lots of calcs</span>\n</code></pre></div>",
        "id": 418034490,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1706173450
    },
    {
        "content": "<p>I am not sure that I understand what you are after, but is this good for you?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">I</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">unwrap</span>  <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span>\n\n<span class=\"c1\">--  instruct Lean how to print `I`s</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ToString</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"s2\">\"I \"</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">unwrap</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">v1</span><span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">v2</span><span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"s2\">\"two\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">v1</span> <span class=\"c1\">-- I 2</span>\n<span class=\"k\">#eval</span> <span class=\"n\">v2</span> <span class=\"c1\">-- I two</span>\n</code></pre></div>",
        "id": 418038306,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706174820
    },
    {
        "content": "<p>that is not what i was going for<br>\ni want to express computations (Values of \"compType\") that depend on an concrete interpretation of an \"I a\". so UnwrapType is the type of any function that can unwrap/interpret an \"I.a\".</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">compType</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">UnwrapType</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>compType is also meant to produce meaningful values, not just Unit. <br>\nalso suppose unwrap is not the only function of type UnwrapType<br>\nthe string concatenation served as an example for using \"I a\" values  in a computation</p>\n<p>my problem is when defining computations </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">def</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">compType</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">un</span> <span class=\"bp\">=&gt;</span>\n     <span class=\"o\">(</span><span class=\"n\">un</span> <span class=\"n\">v1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">un</span> <span class=\"n\">v2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n</code></pre></div>\n<p>there is alot of boilerplate code. i dont care for the function name being \"un\", and whenever i use a \"I a\" value in the following part i want to apply this \"un\" function, so i want to be able to write something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">compType</span> <span class=\"n\">Nat</span>  <span class=\"o\">:=</span>\n     <span class=\"n\">v1</span> <span class=\"bp\">+</span> <span class=\"n\">v2.length</span>\n</code></pre></div>\n<p>i hope this clarifies my intend <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 418052879,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1706179696
    }
]