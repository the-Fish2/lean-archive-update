[
    {
        "content": "<p>Hello,</p>\n<p>I came across this example and got confused why here we use <code>Finite</code> instead of <code>Fintype</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup.closure</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">Perm.IsCycle</span> <span class=\"n\">σ</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Perm.closure_isCycle</span>\n</code></pre></div>\n<p>Then I looked at the document of <code>Finite</code> where it said \"it is defined in this way to allow there to be <code>Finite</code> instances for propositions\".</p>\n<p>So here we have <code>{X : Type*}</code> instead of <code>{X : Sort*}</code>, why aren't we using <code>Fintype</code>?</p>\n<p>Another small question: If we have <code>Finite p</code>, <code>p</code> being a proposition, then it has to be an isomorphism with <code>Fin 0</code> or <code>Fin 1</code> since all elements in p are equal. So <code>Finite p</code> somehow gives <code>Decidable p</code>, because we can get the <code>n</code> and see if it <code>0</code> or <code>1</code>. (I am not very familiar with logic...) It this right?</p>\n<p>Thanks!</p>",
        "id": 412421562,
        "sender_full_name": "Tian Hsia",
        "timestamp": 1705007308
    },
    {
        "content": "<p><code>Finite</code> is just the non-constructive version of <code>Fintype</code>, which is probably preferred right now, but much younger, so <code>Fintype</code> has a historical advantage</p>",
        "id": 412424077,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705008452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>  Actually, could you explain what \"non-constructive\" means here a little bit? I thought it was just <code>noncomputable</code> but there is no <code>noncomputable</code> mark for <code>Finite</code>.</p>",
        "id": 412424879,
        "sender_full_name": "Tian Hsia",
        "timestamp": 1705008835
    },
    {
        "content": "<p>My understanding is that <code>Fintype</code> has a list of the elements of the type that you can get back out again, and <code>Finite</code> doesn't</p>",
        "id": 412425303,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705008993
    },
    {
        "content": "<p>But don't you have a map (noted f) from <code>Fin n</code> to <code>alpha</code> (Given <code>Finite alpha</code>). Then you can enumerate elements as f(k) k being from 0 to n</p>",
        "id": 412425676,
        "sender_full_name": "Tian Hsia",
        "timestamp": 1705009168
    },
    {
        "content": "<p><code>Finite X</code> is a <code>Prop</code>, it contains no data</p>",
        "id": 412426235,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1705009412
    },
    {
        "content": "<p>You can use the axiom of choice to noncomputably obtain such an f</p>",
        "id": 412426325,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1705009445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"478462\">Tian Hsia</span> has marked this topic as resolved.</p>",
        "id": 412426403,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705009483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"478462\">Tian Hsia</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Finite.20and.20Fintype/near/412425676\">said</a>:</p>\n<blockquote>\n<p>But don't you have a map (noted f) from <code>Fin n</code> to <code>alpha</code> (Given <code>Finite alpha</code>). Then you can enumerate elements as f(k) k being from 0 to n</p>\n</blockquote>\n<p>Even <code>Fintype</code> does not give you this map, and even when you have <code>Fintype X</code> and <code>DecidableEq X</code>, you can only computably obtain the <em>truncation</em> of such a map, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.truncEquivFin#doc\">docs#Fintype.truncEquivFin</a></p>",
        "id": 412427184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705009841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"478462\">Tian Hsia</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Finite.20and.20Fintype/near/412421562\">said</a>:</p>\n<blockquote>\n<p>Then I looked at the document of <code>Finite</code> where it said \"it is defined in this way to allow there to be <code>Finite</code> instances for propositions\".</p>\n</blockquote>\n<p>Just to clarify the documentation of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finite#doc\">docs#Finite</a>, this comment is a side note. The main thing going for <code>Finite</code> is that it is itself a proposition, so that means it gets to enjoy proof irrelevance, unlike <code>Fintype</code>. <code>Finite</code> is easier to deal with in many ways, and it's preferred unless you're in a context where you know you want to rely on reduction or <code>#eval</code> to compute something.</p>\n<p>I've expanded out the documentation here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/9667\">#9667</a></p>",
        "id": 412431386,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705011780
    },
    {
        "content": "<p>The new doc clarifies a lot for me, thank you :)</p>",
        "id": 412432080,
        "sender_full_name": "Tian Hsia",
        "timestamp": 1705012107
    }
]