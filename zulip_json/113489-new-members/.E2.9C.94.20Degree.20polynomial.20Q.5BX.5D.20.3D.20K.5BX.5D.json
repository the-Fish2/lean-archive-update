[
    {
        "content": "<p>While profing I ended up at a point where I had to show that the degree of the minimal polynomial of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mroot><mn>2</mn><mn>3</mn></mroot></mrow><annotation encoding=\"application/x-tex\">\\sqrt[3]{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7869em;\"><span style=\"top:-2.9647em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span></span></span></span> over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> is equal to the degree over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is an intermediate field of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q,C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathbb\">C</span></span></span></span></span>. I proved that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>=</mo><mi mathvariant=\"normal\">⊥</mi></mrow><annotation encoding=\"application/x-tex\">K = \\bot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">⊥</span></span></span></span>, but I cannot figure out how to use it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">mathlib</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">K_zero</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.adjoin</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">∪</span> <span class=\"o\">{(</span><span class=\"n\">starRingEnd</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">z</span>  <span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">M</span><span class=\"o\">})</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">K_zero_P</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.adjoin</span> <span class=\"n\">ℚ</span> <span class=\"o\">{(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">),(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)}</span>\n\n<span class=\"c1\">-- What if have showed and want to use</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">K_zero_eq_rational_if_M_sub_Q</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊆</span> <span class=\"n\">Set.range</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">):</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">K_zero</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">Polynomial.degree</span> <span class=\"o\">((</span><span class=\"n\">minpoly</span> <span class=\"bp\">↑</span><span class=\"n\">K_zero_P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">Polynomial.degree</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">--! I want to use the lemma K_zero_eq_rational_if_M_sub_Q to show that K_zero M = ⊥ = ℚ but I don't know how to use it</span>\n</code></pre></div>",
        "id": 420574717,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1707443657
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span></p>",
        "id": 420585819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707453842
    },
    {
        "content": "<p>If you want to relate the minimal polynomials over Q and K, I suggest you use results like <code>minpoly.dvd_map_of_isScalarTower</code>.</p>\n<p>But I do feel like there's probably an easier way to go about this, maybe using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.adjoinRootEquivAdjoin#doc\">docs#IntermediateField.adjoinRootEquivAdjoin</a> and taking dimensions. Then the right hand side would be the degree of K, and the left hand side would be the degree of the minimal polynomial.</p>",
        "id": 420591725,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1707459071
    },
    {
        "content": "<p>Here's a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">K_zero</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.adjoin</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">∪</span> <span class=\"o\">{(</span><span class=\"n\">starRingEnd</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">z</span>  <span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">M</span><span class=\"o\">})</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">K_zero_P</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">IntermediateField.adjoin</span> <span class=\"n\">ℚ</span> <span class=\"o\">{(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">),(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)}</span>\n\n<span class=\"c1\">-- What if have showed and want to use</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">K_zero_eq_rational_if_M_sub_Q</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊆</span> <span class=\"n\">Set.range</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">):</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">K_zero</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">K_zero_P_eq_bot</span> <span class=\"o\">:</span> <span class=\"n\">K_zero_P</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">K_zero_eq_rational_if_M_sub_Q</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">}]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">K_zero_P</span><span class=\"o\">,</span> <span class=\"n\">K_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">congr</span>\n    <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">Set.union_self</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">using</span> <span class=\"mi\">2</span>\n    <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"n\">exacts</span> <span class=\"o\">[⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩]</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">EquivLike</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulEquivClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">map_isUnit_iff</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">IsUnit</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"bp\">←</span> <span class=\"n\">IsUnit.map</span> <span class=\"o\">(</span><span class=\"n\">MulEquivClass.toMulEquiv</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">EquivLike.left_inv</span><span class=\"o\">,</span> <span class=\"n\">IsUnit.map</span> <span class=\"n\">f</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">map_irreducible_iff</span> <span class=\"o\">:</span> <span class=\"n\">Irreducible</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Irreducible</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">irreducible_iff</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">EquivLike.surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"k\">forall</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">EquivLike.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eq_iff</span><span class=\"o\">,</span> <span class=\"n\">map_isUnit_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- `IsDomain R` can probably be removed using docs#minpoly.unique</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">minpoly.map_of_isScalarTower</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Function.Bijective</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">IsIntegral</span> <span class=\"n\">A</span> <span class=\"n\">x</span>\n  <span class=\"bp\">·</span> <span class=\"n\">symm</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">minpoly.eq_of_irreducible_of_monic</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">algebraMap</span> <span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">RingEquiv.ofBijective</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Polynomial.mapEquiv_apply</span><span class=\"o\">,</span> <span class=\"n\">map_irreducible_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">minpoly.irreducible</span> <span class=\"n\">h0</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">minpoly.monic</span> <span class=\"n\">h0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">minpoly.eq_zero</span> <span class=\"n\">h0</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">minpoly.eq_zero</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">isIntegral_trans</span> <span class=\"o\">(</span><span class=\"n\">Algebra.isIntegral_of_surjective</span> <span class=\"n\">h.surjective</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">h0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial.degree</span> <span class=\"o\">((</span><span class=\"n\">minpoly</span> <span class=\"bp\">↑</span><span class=\"n\">K_zero_P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">Polynomial.degree</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">minpoly.map_of_isScalarTower</span> <span class=\"n\">ℚ</span> <span class=\"n\">K_zero_P</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.degree_map</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">K_zero_P_eq_bot</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">IntermediateField.botEquiv</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.bijective</span>\n</code></pre></div>",
        "id": 420593608,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707460329
    },
    {
        "content": "<p>Don't we have something using power basis?</p>",
        "id": 420613343,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707470679
    },
    {
        "content": "<p>Going via ScalarTower is a great idea, thanks for the help.</p>",
        "id": 420672779,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1707491834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671805\">Ludwig Monnerjahn</span> has marked this topic as resolved.</p>",
        "id": 420694436,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707498176
    }
]