[
    {
        "content": "<p>I am trying to create a product monad from two monads:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Product</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">m₂</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m₂</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Product</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">bind</span> <span class=\"n\">o</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">y₁</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">o.1</span>\n      <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">|&gt;.</span><span class=\"mi\">1</span>\n    <span class=\"k\">let</span> <span class=\"n\">y₂</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">o.2</span>\n      <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">|&gt;.</span><span class=\"mi\">2</span>\n    <span class=\"o\">(</span><span class=\"n\">y₁</span><span class=\"o\">,</span> <span class=\"n\">y₂</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I thought it was enough to provide the <code>pure</code> and <code>bind</code> implementations to define the instance. Yet, lean complains that <code>fields missing: 'map', 'mapConst', 'seq', 'seqLeft'</code>. I have tried to create other monad instances, again providing only the <code>pure</code> and <code>bind</code> implementations, and it worked. I don't understand why, in this particular example, it doesn't work.</p>",
        "id": 410852741,
        "sender_full_name": "jthulhu",
        "timestamp": 1704205461
    },
    {
        "content": "<p>Something weird is definitely going on here. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Pure</span> <span class=\"n\">m₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Pure</span> <span class=\"n\">m₂</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Pure</span> <span class=\"o\">(</span><span class=\"n\">Product</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Bind</span> <span class=\"n\">m₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Bind</span> <span class=\"n\">m₂</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Bind</span> <span class=\"o\">(</span><span class=\"n\">Product</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">bind</span> <span class=\"n\">o</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">y₁</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">o.1</span>\n      <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">|&gt;.</span><span class=\"mi\">1</span>\n    <span class=\"k\">let</span> <span class=\"n\">y₂</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">o.2</span>\n      <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">|&gt;.</span><span class=\"mi\">2</span>\n    <span class=\"o\">(</span><span class=\"n\">y₁</span><span class=\"o\">,</span> <span class=\"n\">y₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m₂</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Product</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n</code></pre></div>",
        "id": 410856261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704206966
    },
    {
        "content": "<p>As does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m₂</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Product</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">bind</span> <span class=\"n\">o</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">o.1</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">o.2</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 410856462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704207053
    },
    {
        "content": "<p>Extracting the definitions also seems to solve the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Product.pure</span> <span class=\"o\">[</span><span class=\"n\">ι₁</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">m₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ι₂</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">m₂</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ι₁.pure</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ι₂.pure</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">Product.bind</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m₂</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Product</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Product</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">y₁</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">x.1</span>\n    <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">|&gt;.</span><span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">y₂</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">x.2</span>\n    <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">|&gt;.</span><span class=\"mi\">2</span>\n  <span class=\"o\">(</span><span class=\"n\">y₁</span><span class=\"o\">,</span> <span class=\"n\">y₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m₂</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Product</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">Product.pure</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">Product.bind</span>\n</code></pre></div>\n<p>although in this case, for the <code>pure</code> definition, I have to explicitly name the instances. I assume this is because the definition happens in the <code>Product</code> namespace, and therefore the <code>pure</code> defintion shadows the standard library's <code>pure</code>.</p>",
        "id": 410871959,
        "sender_full_name": "jthulhu",
        "timestamp": 1704213360
    },
    {
        "content": "<p>Use <code>nonrec def </code> or <code>protected def</code>to avoid that</p>",
        "id": 410872364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704213530
    }
]