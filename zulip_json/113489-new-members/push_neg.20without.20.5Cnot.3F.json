[
    {
        "content": "<p>Hi,</p>\n<p>I was experimenting with push_neg and I am a bit confused. If I give an example of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">push_neg</span>\n</code></pre></div>\n<p>Lean has no problem pushing the negation through towards the center of the statement. But if I instead write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">push_neg</span>\n</code></pre></div>\n<p>push_neg makes no progress. Even though, to my knowledge, the two statements are definitionally equivalent? How can I rewrite this example to include a negation symbol?</p>",
        "id": 426415853,
        "sender_full_name": "George Tsoukalas",
        "timestamp": 1710359499
    },
    {
        "content": "<p>They're defeq, but just like <code>simp</code> and <code>rw</code>, it acts on the syntactical form of the expression. The definition <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Not#doc\">docs#Not</a> needs to be unfolded to see the defeq. We could modify <code>push_neg</code> to recognize <code>-&gt; False</code> as being equivalent to <code>Not</code> (and have it normalize it to Not as well).</p>\n<p>Barring that, you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=imp_false#doc\">docs#imp_false</a></p>",
        "id": 426417159,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710360007
    }
]