[
    {
        "content": "<p>I have the problem that induction' modifies the assumption about <br>\n$n \\geq 2$ to $\\textrm{succ } n \\geq 2$<br>\nwhich is not good, as it is not true then... <br>\nI believe the error I have is that I do not know how to tell lean this is true from 2 onwards, but maybe there is a logical/mathematical error in the statement or proof? In short I do not know how to fix the sorry or how to restructure the statement/proof so I don't have this issue</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Factorization.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">q</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">question_1</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">·</span> <span class=\"n\">norm_num</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"mi\">1</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">one_le_pow</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.pow_succ</span><span class=\"o\">]</span>\n      <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.sub_self</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.add_sub_assoc</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_sub_left_distrib</span><span class=\"o\">,</span> <span class=\"n\">tsub_tsub</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">tsub_add_tsub_comm</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span><span class=\"bp\">;</span> <span class=\"n\">repeat'</span> <span class=\"n\">linarith</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">h₂</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.mul_sub_left_distrib</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n       <span class=\"c1\">-- why is the hypothesis modified by once applying induction</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.mul_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_range_succ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 418285766,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1706279160
    },
    {
        "content": "<p><del>Code should be in <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> not <code>$$</code>s; can you edit your message?</del></p>",
        "id": 418285991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706279229
    },
    {
        "content": "<p>Your issue is that you have to start a new line after <code> ``` </code></p>",
        "id": 418286062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706279258
    },
    {
        "content": "<p>(But you can do inline math with <code>$$dollars$$</code>)</p>",
        "id": 418286194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706279297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/issues.20with.20induction.2C.20assumptions.20are.20modified/near/418286062\">said</a>:</p>\n<blockquote>\n<p>Your issue is that you have to start a new line after <code> ``` </code></p>\n</blockquote>\n<p>ah that's good to know lol, thanksI'll change it to that haha</p>",
        "id": 418286272,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1706279331
    },
    {
        "content": "<p>Can you edit your code above to include your <code>import</code>s?</p>",
        "id": 418286346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706279354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/issues.20with.20induction.2C.20assumptions.20are.20modified/near/418286346\">said</a>:</p>\n<blockquote>\n<p>Can you edit your code above to include your <code>import</code>s?</p>\n</blockquote>\n<p>I'm using this to prove some elementary number theory statements... I'm not sure which imports are not necessary... sorry if that turns out to be a problem</p>",
        "id": 418286711,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1706279471
    },
    {
        "content": "<p>That's fine, too many imports is better than none</p>",
        "id": 418286781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706279496
    },
    {
        "content": "<p>What matters is that we have the same imports as you</p>",
        "id": 418286806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706279506
    },
    {
        "content": "<p>I think you probably want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.le_induction#doc\">docs#Nat.le_induction</a> here</p>",
        "id": 418286828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706279512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/issues.20with.20induction.2C.20assumptions.20are.20modified/near/418286806\">said</a>:</p>\n<blockquote>\n<p>What matters is that we have the same imports as you</p>\n</blockquote>\n<p>ahhhh ok, so I have to use a different version? more generally where is good place to look for which induction tactic I should use? is there a more robust tactic that will sort it out for me?</p>",
        "id": 418287409,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1706279677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/issues.20with.20induction.2C.20assumptions.20are.20modified/near/418286828\">said</a>:</p>\n<blockquote>\n<p>I think you probably want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.le_induction#doc\">docs#Nat.le_induction</a> here</p>\n</blockquote>\n<p>I have the problem that variable n and hypothesis hn are lost after using \" induction n, hn using Nat.le_induction\"<br>\nhave I set it up wrong? <br>\nI should be able to use the proof as is but n appears to be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">n</span><span class=\"bp\">✝</span>\n</code></pre></div>\n<p>So now the code is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Factorization.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">question_1</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span> <span class=\"n\">using</span> <span class=\"n\">Nat.le_induction</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_sub_left_distrib</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_sub_left_distrib</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n         <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sq</span><span class=\"o\">]</span>\n    <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.sub_self</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)]</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"mi\">1</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">one_le_pow</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.pow_succ</span><span class=\"o\">]</span>\n      <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.sub_self</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.add_sub_assoc</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_sub_left_distrib</span><span class=\"o\">,</span> <span class=\"n\">tsub_tsub</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">tsub_add_tsub_comm</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span><span class=\"bp\">;</span> <span class=\"n\">repeat'</span> <span class=\"n\">linarith</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">h₂</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.mul_sub_left_distrib</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_comm</span><span class=\"o\">]</span>\n       <span class=\"c1\">-- why is the hypothesis modified by once applying induction</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.mul_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_range_succ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 418297151,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1706282749
    },
    {
        "content": "<p>You can use <code>induction' n, hn using Nat.le_induction with n ih</code> or <code>induction n, hn using Nat.le_induction with</code> <code>| zero =&gt;</code> <code>| succ n ih =&gt;</code> to name the variables</p>",
        "id": 418309030,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706286280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/issues.20with.20induction.2C.20assumptions.20are.20modified/near/418309030\">said</a>:</p>\n<blockquote>\n<p>You can use <code>induction' n, hn using Nat.le_induction with n ih</code> or <code>induction n, hn using Nat.le_induction with</code> <code>| zero =&gt;</code> <code>| succ n ih =&gt;</code> to name the variables</p>\n</blockquote>\n<p>Ah thank you that makes sense, I tried the with when doing the induction without the backtick</p>",
        "id": 418517902,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1706460991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634542\">Alex Brodbelt</span> has marked this topic as resolved.</p>",
        "id": 418517918,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706461008
    }
]