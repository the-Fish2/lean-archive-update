[
    {
        "content": "<p>I'm working on learning Lean 4 and tried to state  Morley’s Theorem from the Coq<br>\nproof. And borrowing from <a href=\"https://leanprover-community.github.io/mathlib4_docs/Archive/Wiedijk100Theorems/HeronsFormula.html\">https://leanprover-community.github.io/mathlib4_docs/Archive/Wiedijk100Theorems/HeronsFormula.html</a> . </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Geometry.Euclidean.Triangle</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equilateral</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddTorsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"n\">p1</span> <span class=\"bp\">≠</span> <span class=\"n\">p2</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">p2</span> <span class=\"bp\">≠</span> <span class=\"n\">p3</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">morley</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddTorsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">R</span> <span class=\"n\">Q</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">→</span>\n  <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span>\n  <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">C</span> <span class=\"bp\">→</span>\n  <span class=\"n\">B</span> <span class=\"bp\">≠</span> <span class=\"n\">C</span> <span class=\"bp\">→</span>\n  <span class=\"n\">B</span> <span class=\"bp\">≠</span> <span class=\"n\">R</span> <span class=\"bp\">→</span>\n  <span class=\"n\">B</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span>\n  <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">T</span> <span class=\"bp\">→</span>\n  <span class=\"n\">C</span> <span class=\"bp\">≠</span> <span class=\"n\">T</span> <span class=\"bp\">→</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">EuclideanGeometry.angle</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">EuclideanGeometry.angle</span> <span class=\"n\">B</span> <span class=\"n\">R</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">EuclideanGeometry.angle</span> <span class=\"n\">B</span> <span class=\"n\">Q</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">EuclideanGeometry.angle</span> <span class=\"n\">C</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">EuclideanGeometry.angle</span> <span class=\"n\">C</span> <span class=\"n\">T</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">EuclideanGeometry.angle</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">EuclideanGeometry.angle</span> <span class=\"n\">A</span> <span class=\"n\">Q</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">EuclideanGeometry.angle</span> <span class=\"n\">A</span> <span class=\"n\">T</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">equilateral</span> <span class=\"n\">R</span> <span class=\"n\">Q</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">admit</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">The Coq Freek 100 theorem statement:</span>\n\n<span class=\"cm\">Theorem Morley:</span>\n<span class=\"cm\">  forall (a b c : R) (A B C P Q T : PO),</span>\n<span class=\"cm\">  0 &lt; a -&gt;</span>\n<span class=\"cm\">  0 &lt; b -&gt;</span>\n<span class=\"cm\">  0 &lt; c -&gt;</span>\n<span class=\"cm\">  (a + b) + c = pisurtrois -&gt;</span>\n<span class=\"cm\">  A &lt;&gt; B -&gt;</span>\n<span class=\"cm\">  A &lt;&gt; C -&gt;</span>\n<span class=\"cm\">  B &lt;&gt; C -&gt;</span>\n<span class=\"cm\">  B &lt;&gt; P -&gt;</span>\n<span class=\"cm\">  B &lt;&gt; Q -&gt;</span>\n<span class=\"cm\">  A &lt;&gt; T -&gt;</span>\n<span class=\"cm\">  C &lt;&gt; T -&gt;</span>\n<span class=\"cm\">  image_angle b = cons_AV (vec B C) (vec B P) -&gt;</span>\n<span class=\"cm\">  image_angle b = cons_AV (vec B P) (vec B Q) -&gt;</span>\n<span class=\"cm\">  image_angle b = cons_AV (vec B Q) (vec B A) -&gt;</span>\n<span class=\"cm\">  image_angle c = cons_AV (vec C P) (vec C B) -&gt;</span>\n<span class=\"cm\">  image_angle c = cons_AV (vec C T) (vec C P) -&gt;</span>\n<span class=\"cm\">  image_angle a = cons_AV (vec A B) (vec A Q) -&gt;</span>\n<span class=\"cm\">  image_angle a = cons_AV (vec A Q) (vec A T) -&gt;</span>\n<span class=\"cm\">  image_angle a = cons_AV (vec A T) (vec A C) -&gt; equilateral P Q T.</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 437160479,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1714940509
    },
    {
        "content": "<p>I guess you need to assume that all those points lie in a 2-dim subspace?</p>",
        "id": 437247241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714996586
    },
    {
        "content": "<p>Also, if you <code>open EuclideanGeometry</code>, then you can simply write <code>angle</code></p>",
        "id": 437247417,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714996654
    },
    {
        "content": "<p><code>open EuclideanGeometry</code> really improved readability!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Geometry.Euclidean.Triangle</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equilateral</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddTorsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"n\">p1</span> <span class=\"bp\">≠</span> <span class=\"n\">p2</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">p2</span> <span class=\"bp\">≠</span> <span class=\"n\">p3</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">EuclideanGeometry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">morley</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddTorsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">R</span> <span class=\"n\">Q</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">→</span>\n  <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span>\n  <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">C</span> <span class=\"bp\">→</span>\n  <span class=\"n\">B</span> <span class=\"bp\">≠</span> <span class=\"n\">C</span> <span class=\"bp\">→</span>\n  <span class=\"n\">B</span> <span class=\"bp\">≠</span> <span class=\"n\">R</span> <span class=\"bp\">→</span>\n  <span class=\"n\">B</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span>\n  <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">T</span> <span class=\"bp\">→</span>\n  <span class=\"n\">C</span> <span class=\"bp\">≠</span> <span class=\"n\">T</span> <span class=\"bp\">→</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">R</span> <span class=\"bp\">→</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">B</span> <span class=\"n\">R</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">B</span> <span class=\"n\">Q</span> <span class=\"n\">A</span> <span class=\"bp\">→</span>\n  <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">C</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"bp\">→</span>\n  <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">C</span> <span class=\"n\">T</span> <span class=\"n\">R</span> <span class=\"bp\">→</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">A</span> <span class=\"n\">Q</span> <span class=\"n\">T</span> <span class=\"bp\">→</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">A</span> <span class=\"n\">T</span> <span class=\"n\">C</span> <span class=\"bp\">→</span>\n  <span class=\"n\">equilateral</span> <span class=\"n\">R</span> <span class=\"n\">Q</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<blockquote>\n<p>I guess you need to assume that all those points lie in a 2-dim subspace?</p>\n</blockquote>\n<p>You are right. The Heron's formula statement was just about 3 points in a triangle and the exact middle point between them. So it works in any dimension.</p>",
        "id": 437250338,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1714997723
    },
    {
        "content": "<p>(note that the playground link is auto-inserted by code blocks, so there is no need to paste unreadable links to it)</p>",
        "id": 437250837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714997912
    },
    {
        "content": "<p>That's nice. The Lean has come a long way since I started looking at Lean 3 during the pandemic.</p>",
        "id": 437251296,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1714998084
    },
    {
        "content": "<p>You can also write <code>∠ A B C</code> instead of <code>angle A B C</code></p>",
        "id": 437252631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714998593
    },
    {
        "content": "<p>Nifty (I updated the the post above).</p>\n<p>I haven't read up on all the spaces but I would like to know that I'm really in a flat space where the angles of triangles actually sums to 180 degrees.</p>",
        "id": 437254553,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1714999309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"430763\">Anders Larsson</span> <a href=\"#narrow/stream/113489-new-members/topic/Trying.20to.20state.20Morley.E2.80.99s.20Theorem/near/437254553\">said</a>:</p>\n<blockquote>\n<p>I would like to know that I'm really in a flat space where the angles of triangles actually sums to 180 degrees.</p>\n</blockquote>\n<p>What you should do then is finding the lemma \"Angles of triangles sum to 180 degrees\" in mathlib and see what it assumes.</p>",
        "id": 437255800,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714999778
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EuclideanGeometry.angle_add_angle_add_angle_eq_pi#doc\">docs#EuclideanGeometry.angle_add_angle_add_angle_eq_pi</a> tells you what those assumptions are</p>",
        "id": 437255813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714999780
    },
    {
        "content": "<p>Note that it doesn't hold only in two dimensions so maybe you should find a better property that you want to be true but might only be in 2D</p>",
        "id": 437256001,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714999826
    },
    {
        "content": "<p>I think this:</p>\n<blockquote>\n<p><code> (a + b + c) * 3 = Real.pi →</code></p>\n</blockquote>\n<p>forces the inner points R, Q, T into the same plane as the outher points A, B and C, regardless of if we formally are in something like R^2 or not.<br>\nBut that's maybe too unhelpful for a reader.</p>",
        "id": 437258657,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1715000813
    },
    {
        "content": "<p>I think you are right.</p>",
        "id": 437259936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715001258
    },
    {
        "content": "<p>Just add a half-line  comment. Should be enough.</p>",
        "id": 437259989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715001284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"430763\">Anders Larsson</span> <a href=\"#narrow/stream/113489-new-members/topic/Trying.20to.20state.20Morley.E2.80.99s.20Theorem/near/437250338\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">equilateral</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddTorsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"n\">p1</span> <span class=\"bp\">≠</span> <span class=\"n\">p2</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">p2</span> <span class=\"bp\">≠</span> <span class=\"n\">p3</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I think <code>equilateral</code> might better be defined as a property of an arbitrary indexed family of points in a <code>PseudoEMetricSpace</code> rather than just for three points in a Euclidean context.</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">R</span> <span class=\"n\">Q</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">→</span>\n  <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span>\n  <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">C</span> <span class=\"bp\">→</span>\n  <span class=\"n\">B</span> <span class=\"bp\">≠</span> <span class=\"n\">C</span> <span class=\"bp\">→</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>And then state the result for a <code>Triangle</code> (referring to its vertices as <code>t.points 0</code> etc.), so avoiding needing to give various nondegeneracy conditions here.</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">R</span> <span class=\"bp\">→</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">B</span> <span class=\"n\">R</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">B</span> <span class=\"n\">Q</span> <span class=\"n\">A</span> <span class=\"bp\">→</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>And then state that various angles are <code>∠ (t.points 0) (t.points 1) (t.points 2) / 3</code>, so eliminating <code>a</code>, <code>b</code>, <code>c</code> (note: the angles at B should have B as the <em>second</em> argument to <code>∠</code>, not the first).</p>\n<p>The fact that if <code>∠ a b c + ∠ c b d = ∠ a b d</code> then (possibly with some nondegeneracy conditions required) you have coplanarity would be an early lemma to add to mathlib - probably first proving a corresponding statement for vectors (see the existing <code>proof_wanted angle_triangle</code> for a corresponding inequality).</p>",
        "id": 437318335,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1715021150
    }
]