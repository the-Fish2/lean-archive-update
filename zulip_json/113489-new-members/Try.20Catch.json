[
    {
        "content": "<p>In the Lean Manual about the Except Monad: <a href=\"https://lean-lang.org/lean4/doc/monads/except.lean.html\">https://lean-lang.org/lean4/doc/monads/except.lean.html</a>, there is an example for try catch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">testCatch</span> <span class=\"o\">:=</span>\n  <span class=\"n\">try</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">divide</span> <span class=\"mi\">8</span> <span class=\"mi\">0</span>  <span class=\"c1\">-- 'r' is type Float</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Caught exception: {e}\"</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">testCatch</span> <span class=\"c1\">-- Except String String</span>\n</code></pre></div>\n<p>Why does this return <code>Except String String</code>? My thought is that if <code>let r ← divide 8 0</code>throws an exception, we execute the <code>catch</code> block that returns a string - and the <code>try</code> block also returns a string (toString r).<br>\nSo I guess the <code>Except</code> comes from the <code>pure</code>, but we cannot raise an Exception from this function, so why do we need the <code>pure</code> and can't just return a <code>String</code>?</p>",
        "id": 410724890,
        "sender_full_name": "Philipp",
        "timestamp": 1704117255
    },
    {
        "content": "<p>Have you tried removing the two <code>pure</code>s and seeing what happens?</p>",
        "id": 410726704,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704118593
    },
    {
        "content": "<p>Is there a Lean playground that works on mobile? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 410727502,
        "sender_full_name": "Philipp",
        "timestamp": 1704119219
    },
    {
        "content": "<p>I think the lean playground <a href=\"https://live.lean-lang.org/\">https://live.lean-lang.org/</a> works fine on mobile? (and exposes the fact that your code isn't a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> )</p>",
        "id": 410727620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704119311
    },
    {
        "content": "<p>oh wow yes it does - it just gave me a hard time copy/paste-ing from the lean manual. That's also why I didn't fully write an mwe, sorry. Here is the tediously re-formatted definition of divide:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">divide</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">):</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">throw</span> <span class=\"s2\">\"can't divide by zero\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Anyways, I removed the <code>pure</code> and added <code>: String</code> to <code>testCatch</code> as return type. Now it says <code>invalid do notation, expected type is not a monad application</code>, on the <code>try</code>.</p>\n<p>But why do I need a monad here? Isn't try/catch a way to unwrap/recover from an exception?</p>",
        "id": 410728245,
        "sender_full_name": "Philipp",
        "timestamp": 1704119815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638732\">@Philipp</span> If you're familiar with try/catch in imperative programming languages, the difference is that functional programming languages avoid implicit state and nonlocal control flow, and instead they tend to use monads to make the state and nonlocal control flow more explicit.</p>\n<p>A language like Python can be modeled as there being a pervasive monad that handles global mutable variables, how IO operations are sequenced, and how exceptions trigger <code>try</code>/<code>except</code> blocks. This \"Python monad\" cannot be turned off, and so, for example, you can't be sure that a given function doesn't have any side effects without carefully auditing the code. With Lean, by looking at which monad is being used, you know exactly the range of possible effects -- for example, no monad means \"this function will never raise an exception\".</p>\n<p>Plus, in Lean you can implement exactly how <code>try</code>/<code>catch</code> evaluates. The <code>Except</code> monad gives an implementation for <code>try</code>/<code>catch</code>, it's not something provided by the core Language itself.</p>\n<p>(The Lean language <em>does</em> provide a way to create a runtime error using <code>panic!</code>, but that's more for assertion violations, which are not recoverable, and so I wouldn't consider that to be an exception.)</p>",
        "id": 410732308,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704122922
    },
    {
        "content": "<p>I think this is what hooks in the <code>try</code>/<code>catch</code> implementation for <code>Except</code>: <a href=\"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Init/Prelude.lean#L2989-L2991\">https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Init/Prelude.lean#L2989-L2991</a></p>\n<p>That refers to another definition (<a href=\"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Init/Control/Except.lean#L55-L58\"><code>Except.tryCatch</code></a>), which makes it so the way <code>try x catch e =&gt; y</code> works is that it evaluates <code>x</code>, sees if it evaluates to an error, and if so evaluates <code>y</code> instead.</p>",
        "id": 410732675,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704123202
    },
    {
        "content": "<p>I'm not sure if the manual explains <code>Except</code> before that chapter, so I'll just add that <code>Except String Float</code> is a type that has two kinds of values, either <code>Except.error s</code> with <code>s</code> a string, or <code>Except.ok x</code> with <code>x</code> a float. It's called \"except\", but unlike say Python that doesn't mean it does fancy things like have runtime support for stack unwinding.</p>",
        "id": 410733105,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704123561
    },
    {
        "content": "<p>Hmm I understand State/Reader Monads and State in general, but I would expect that <code>tryCatch</code> would have a definition that is more like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tryCatch</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">handle</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.ok</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.err</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">handle</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>(probably wrong syntax but I hope you get the gist)</p>\n<p>The question is why do we want to carry information about the Except around after it is caught?</p>\n<p>e.g. in Java I think methods need to be marked with <code>throws ...</code> if they can throw an exception. If such a method is called in try/catch then the caller does not need to be marked <code>throws</code>.</p>",
        "id": 410734430,
        "sender_full_name": "Philipp",
        "timestamp": 1704124759
    },
    {
        "content": "<p>In the example from the Manual, <code>#eval testCatch</code> evaluates to <code>Except.ok \"Caught exception: can't divide by zero\"</code>, and from the code (especially the return type of catch) we know that it can never return <code>Except.error</code>. So why keep the result wrapped in <code>Except</code></p>",
        "id": 410734888,
        "sender_full_name": "Philipp",
        "timestamp": 1704125041
    },
    {
        "content": "<p>What if the <code>catch</code> clause wants to throw an exception?</p>",
        "id": 410734950,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704125057
    },
    {
        "content": "<p>The notion that is implemented in the try catch notation is more general than this. It allows you to e.g. re-raise exceptions. Or for example if you are in an IO monad you can do some IO, catch its errors and then handle that IO error by e.g. closing a file descriptor, doing some logging etc.</p>",
        "id": 410735030,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1704125106
    },
    {
        "content": "<p>If the catch clause wants to throw an error, we have to return Except; but why can't we drop it if it's guaranteed not to</p>",
        "id": 410735077,
        "sender_full_name": "Philipp",
        "timestamp": 1704125141
    },
    {
        "content": "<p>Yeah, to generalize what I said, \"what if the <code>catch</code> clause wants to have side-effects\"? This is the common case.</p>",
        "id": 410735127,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704125164
    },
    {
        "content": "<p>With your type signature above this would mean you woud have to provide an (Except (Except a b) c) which is not a type that you really want to deal with I believe</p>",
        "id": 410735159,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1704125186
    },
    {
        "content": "<p>The current implementation does also not prevent you from doing what you are interested in. You can implement the behavior you want by doing exactly what you did, pattern matching on the result.</p>",
        "id": 410735219,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1704125257
    },
    {
        "content": "<p>In that case I would use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">testCatch</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"bp\">$</span> <span class=\"n\">divide</span> <span class=\"mi\">8</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.ok</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">r</span><span class=\"o\">)</span>  <span class=\"c1\">-- 'r' is type Float</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.err</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Caught exception: {e}\"</span>\n</code></pre></div>\n<p>I guess?</p>",
        "id": 410735360,
        "sender_full_name": "Philipp",
        "timestamp": 1704125376
    },
    {
        "content": "<p>You would use this for what?</p>",
        "id": 410735457,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1704125434
    },
    {
        "content": "<p>If you do want to resolve everything to a String like that, then there's no need for <code>pure</code> (there's no monad)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">testCatch</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">divide</span> <span class=\"mi\">8</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.ok</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">toString</span> <span class=\"n\">r</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Caught exception: {e}\"</span>\n</code></pre></div>",
        "id": 410735500,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704125483
    },
    {
        "content": "<p>There's also a feature where you can write this more succinctly as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">testCatch</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">divide</span> <span class=\"mi\">8</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toString</span> <span class=\"n\">r</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Caught exception: {e}\"</span>\n</code></pre></div>",
        "id": 410735580,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704125536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> This <code>testCatch</code> example is from the Lean manual. Maybe it's not fair to ask Philipp to justify the design here :-)</p>",
        "id": 410735721,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704125690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638732\">@Philipp</span> Speaking of the manual, just a bit further down <code>testUnwrap</code> is an example of removing that <code>Except String</code>. I'm not sure <code>Id.run</code> and all that is a good illustration though -- what we have here with a direct <code>match</code> seems more idiomatic.</p>",
        "id": 410735820,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704125775
    },
    {
        "content": "<p>Oh sorry I forgot to delete the <code>pure</code>'s. The <code>.ok / .error</code> is pretty cool! Thanks!</p>\n<p>So what I like about try/catch is that it's a do block so I can call multiple methods that might throw an exception:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"s2\">\"n is zero\"</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n.toFloat.isNaN</span> <span class=\"k\">then</span> <span class=\"n\">Except.error</span> <span class=\"s2\">\"Float is NaN\"</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">n.toFloat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">testCatch</span> <span class=\"o\">:=</span>\n  <span class=\"n\">try</span>\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span> <span class=\"mi\">2</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">bar</span> <span class=\"n\">n</span>\n    <span class=\"n\">pure</span> <span class=\"n\">r.toString</span>\n  <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Something went wrong: {e}\"</span>\n</code></pre></div>\n<p>If either <code>foo</code> or <code>bar</code> throw an exception (return Exception.error) we end up in the catch block. With match this would become something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">testMatch</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span> <span class=\"mi\">2</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">bar</span> <span class=\"n\">n</span>\n    <span class=\"n\">pure</span> <span class=\"n\">r.toString</span>\n  <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Something went wrong: {e}\"</span>\n</code></pre></div>\n<p>(doesn't compile, <code>n</code> here is type <code>Except String Nat</code> and not <code>Nat</code> - I guess <a href=\"http://Id.run\">Id.run</a> doesn't do what I thought it does).</p>\n<p>So I could drop the do notation and write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">testMatch</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">foo</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">bar</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">x.toString</span>\n  <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Something went wrong: {e}\"</span>\n</code></pre></div>\n<p>but that is uhm way less readable.</p>",
        "id": 410736822,
        "sender_full_name": "Philipp",
        "timestamp": 1704126666
    },
    {
        "content": "<p>Henrik's question is good one though: under what circumstances is turning <code>Except String String</code> into <code>String</code> a good design?</p>",
        "id": 410741481,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704131071
    },
    {
        "content": "<p>If there's a good reason for it, I might organize it something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Except.run</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">ε</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">handle</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">handle</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">testMatch</span> <span class=\"o\">:=</span> <span class=\"n\">Except.run</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span> <span class=\"mi\">2</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">bar</span> <span class=\"n\">n</span>\n    <span class=\"n\">pure</span> <span class=\"n\">r.toString</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">handle</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Something went wrong: {e}\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 410741626,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704131245
    },
    {
        "content": "<p>Hmm yes, maybe that is not a great idea.<br>\nWhat IS a good use for try / catch then?</p>",
        "id": 410743656,
        "sender_full_name": "Philipp",
        "timestamp": 1704133279
    }
]