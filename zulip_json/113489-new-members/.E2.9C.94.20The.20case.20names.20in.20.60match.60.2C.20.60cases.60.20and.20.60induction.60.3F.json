[
    {
        "content": "<p>Hi, I am new to Lean; I have some experience with Coq and am still familiarizing myself with Lean. </p>\n<p>I recently found that although all the three tactics <code>match</code>, <code>cases</code> and <code>induction</code> require doing case analysis, their case names seem to have different meanings. For example, I can prove something simple using <code>match</code>: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Here each case should mean a constructor, since I can use the longer qualified name for <code>false</code>. </p>\n<p>However, I failed to use qualified names for cases generated by <code>cases</code> or <code>induction</code>. The error message is <code>invalid alternative name 'Bool.true'</code>. But using the shorter names is fine: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I printed the proof term of <code>foo3</code> and found that it uses <code>Bool.rec</code>, whose the two arguments have names <code>true</code> and <code>false</code>, corresponding exactly to the names of constructors. So I guessed that maybe the case names of <code>induction</code> are not really constructor names. </p>\n<p>The following proof seems to support my postulation: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- have different argument names</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bool_ind.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fal</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">tru</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Bool.rec.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">motive</span> <span class=\"n\">fal</span> <span class=\"n\">tru</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo3'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"n\">using</span> <span class=\"n\">bool_ind</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">fal</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">tru</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>May I confirm whether the argument names of induction principles essentially correspond to the case names of <code>cases</code> and <code>induction</code>? And is there any other similar mechanism in Lean? </p>\n<p>The version of Lean that I am using is 4.4.0. </p>\n<p>Thanks in advance and sorry if this problem has been asked before.</p>",
        "id": 419620917,
        "sender_full_name": "Qiyuan Zhao",
        "timestamp": 1706976772
    },
    {
        "content": "<p>This is correct</p>",
        "id": 419625402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706980620
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ! I guess I will be going to read about how those tactics are implemented then.</p>",
        "id": 419681457,
        "sender_full_name": "Qiyuan Zhao",
        "timestamp": 1707036262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"689027\">Qiyuan Zhao</span> has marked this topic as resolved.</p>",
        "id": 419681479,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707036298
    }
]