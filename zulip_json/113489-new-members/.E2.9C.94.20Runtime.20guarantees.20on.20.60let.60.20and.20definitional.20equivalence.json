[
    {
        "content": "<p>The following expressions are (by my understanding) defeq:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">doubleIt₁</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">doubleIt₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">doubleIt₃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">fk</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">fk</span> <span class=\"bp\">+</span> <span class=\"n\">fk</span>\n</code></pre></div>\n<p>And, by my understanding, if I were to evaluate or run the first one, the generated code would evaluate <code>f k</code> twice, but the third one would only evaluate <code>f k</code> once. I expected the second one to also evaluate it twice, but it seems (based on some quick tests and the runtime) to only evaluate it once.</p>\n<p>Do defeq expressions get evaluated differently? And -- how do I _guarantee_ that it only evaluates <code>f k</code> once? A factor of two might not be too bad on its own, but if I repeat this several layers deep it get exponentially slower of course. I'm guessing that <code>doubleIt₂</code> is using some kind of smart aliasing in the expression that lets it go faster, but I'd really like to know when I can be sure this aliasing will (or won't) occur.</p>",
        "id": 430158270,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1711658220
    },
    {
        "content": "<p>This is sort of tangential, but I've noticed that if I have something like <code>doubleIt₂</code>'s expression <code>(f k) + (f k)</code> in my goal, and I <code>rw [(sorry : fk = y)]</code>, then it becomes <code>y + y</code>, replacing both instances. Is this a behavior specific to <code>rw</code>, or is it somehow related to the underlying aliasing (that both instances of <code>f k</code> are actually the same thing in memory?)</p>",
        "id": 430158462,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1711658312
    },
    {
        "content": "<p>If you do <code>set_option trace.compiler true</code> you can see in the second one that the lcnf transformation already deduplicates <code>f k</code>, and it yields the exact same code as the third one. In compilers, this deduplication known as the common subexpression elimination optimization.</p>\n<p>For the first one, it looks like the compiler simply doesn't know that <code>Nat.add k 0</code> is <code>k</code>.</p>",
        "id": 430158806,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711658483
    },
    {
        "content": "<p>Alright, I guess that confirms what I suspected, but -- in general, writing code -- is there a way for me to guess whether I'll get the subexpression elimination? I don't want to depend on it. Or really I guess, as long as I write it with a <code>let</code>, will I be sure it only gets evaluated once?</p>",
        "id": 430159025,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1711658563
    },
    {
        "content": "<p>definitional equality and the entire type theory stuff is not related to how Lean code is compiled/evaluated. Roughly speaking the mental model for Lean evaluation is like a \"normal\" programming language with reference counting. If you do a <code>let</code> and you reuse its value that let will not be recomputed.</p>",
        "id": 430159246,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1711658658
    },
    {
        "content": "<p>I'd say that if you use <code>let</code>, it <em>should</em> only evaluate once. There could be compiler bugs, or it might even get evaluated \"less than once\" (amortized) if it's possible to hoist a value out of a lambda.</p>",
        "id": 430159328,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711658705
    },
    {
        "content": "<p>Alright. I will mentally segregate those concepts then. <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span>  And \"should\" is good enough for me, haha. :)</p>",
        "id": 430159374,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1711658729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> has marked this topic as resolved.</p>",
        "id": 430159385,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711658736
    }
]