[
    {
        "content": "<p>There are 2 \"sorry\" here. They both seem obvious, but i have no idea:</p>\n<p>1.The first one is about vector \"0\" not equal to h2 (which exists a item not equal to 0). Easy?Right?But how? <span aria-label=\"face with spiral eyes\" class=\"emoji emoji-1f635-200d-1f4ab\" role=\"img\" title=\"face with spiral eyes\">:face_with_spiral_eyes:</span><br>\n<a href=\"/user_uploads/3121/PPwXsaWdLMo3xSGL7KHh77Bl/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PPwXsaWdLMo3xSGL7KHh77Bl/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/PPwXsaWdLMo3xSGL7KHh77Bl/image.png\"></a></div><p>2.The second one is about Sum. Here h3 is exactly the goal i am looking for , but why is \"exact h3\" not working?<br>\n<a href=\"/user_uploads/3121/O0kOOAlhVWEWlDuAoZ8xNumo/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/O0kOOAlhVWEWlDuAoZ8xNumo/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/O0kOOAlhVWEWlDuAoZ8xNumo/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n          <span class=\"kd\">theorem</span> <span class=\"n\">MainGoal7_1</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n          <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n          <span class=\"n\">mulVec</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">yi</span> <span class=\"bp\">↦</span> <span class=\"bp\">∑</span> <span class=\"n\">xi</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">xi</span> <span class=\"bp\">•</span> <span class=\"n\">A</span> <span class=\"n\">yi</span> <span class=\"n\">xi</span>\n            <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mulVec</span><span class=\"o\">]</span>\n            <span class=\"n\">ext</span> <span class=\"n\">h7_x</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dotProduct</span><span class=\"o\">]</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n            <span class=\"n\">refine'</span> <span class=\"n\">sum_congr</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n            <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n            <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x_1</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">h7_x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span>\n\n      <span class=\"kd\">theorem</span> <span class=\"n\">MainGoal7</span>\n      <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n      <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n      <span class=\"c1\">-- [n :Finset n]</span>\n      <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- mulVec就是矩阵和向量的乘法运算</span>\n      <span class=\"o\">:</span><span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">A.transpose</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">refine'</span> <span class=\"n\">linearIndependent_iff'.2</span> <span class=\"n\">_</span>\n        <span class=\"k\">have</span> <span class=\"n\">h6</span><span class=\"o\">:=</span> <span class=\"n\">hA</span> <span class=\"mi\">0</span>\n        <span class=\"k\">have</span> <span class=\"n\">_h6</span><span class=\"o\">:=</span> <span class=\"n\">hA</span> <span class=\"mi\">0</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h6_1</span><span class=\"o\">,</span> <span class=\"n\">h6_2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h6</span>\n        <span class=\"k\">have</span> <span class=\"n\">h7</span><span class=\"o\">:</span> <span class=\"n\">mulVec</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"c1\">-- 这个引理可以单独抽出来</span>\n        <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">yi</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">xi</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">xi</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">yi</span> <span class=\"n\">xi</span><span class=\"o\">)</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">MainGoal7_1</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h7</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h6_1</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span>\n        <span class=\"n\">by_contra</span> <span class=\"n\">oppo</span>\n        <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">oppo</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Matrix.transpose</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n        <span class=\"k\">have</span> <span class=\"n\">h3_2</span> <span class=\"o\">:</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n        <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h3_2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n        <span class=\"n\">clear</span> <span class=\"n\">h3_2</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n        <span class=\"n\">clear</span> <span class=\"n\">hA</span>\n        <span class=\"k\">have</span> <span class=\"n\">h6_oppo</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">,(</span><span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">use</span> <span class=\"mi\">0</span>\n          <span class=\"n\">use</span> <span class=\"n\">h2</span>\n          <span class=\"n\">constructor</span>\n          <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- 很明显的不想等，因为oppo描述h2存在非0的</span>\n          <span class=\"n\">constructor</span>\n          <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">mulVec_zero</span> <span class=\"n\">A</span>\n          <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MainGoal7_1</span> <span class=\"n\">A</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n            <span class=\"gr\">sorry</span>\n            <span class=\"c1\">-- exact h3</span>\n            <span class=\"c1\">-- rw [← Multiset.sum_sum] at h3</span>\n          <span class=\"n\">done</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">x3</span><span class=\"o\">,</span><span class=\"n\">x4</span><span class=\"o\">,</span><span class=\"n\">x5</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h6_oppo</span>\n        <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ExistsUnique.unique</span> <span class=\"n\">_h6</span> <span class=\"n\">x4</span> <span class=\"n\">x5</span><span class=\"o\">)</span>\n        <span class=\"n\">exact</span> <span class=\"n\">x3</span> <span class=\"n\">h4</span>\n        <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 409981602,
        "sender_full_name": "chenjulang",
        "timestamp": 1703572538
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 409981676,
        "sender_full_name": "chenjulang",
        "timestamp": 1703572573
    },
    {
        "content": "<p>Any ideas?</p>",
        "id": 409982400,
        "sender_full_name": "chenjulang",
        "timestamp": 1703573095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"665035\">@chenjulang</span> For the first question, try <code>contrapose! oppo</code>.</p>",
        "id": 409982680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703573314
    },
    {
        "content": "<p>For the second question, note that <code>h3</code> is not the same as your goal. In <code>h3</code> you are summing over <code>x in h1</code>, whereas in the goal you are summing over all <code>x</code>.</p>",
        "id": 409982757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703573396
    },
    {
        "content": "<p>So it seems to me that you probably took a wrong turn somewhere.</p>",
        "id": 409982824,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703573424
    },
    {
        "content": "<p>emm...</p>",
        "id": 409982850,
        "sender_full_name": "chenjulang",
        "timestamp": 1703573456
    },
    {
        "content": "<p>First one solved:<br>\ncontrapose! is not bad <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">oppo</span>\n            <span class=\"n\">intros</span> <span class=\"n\">oppo1</span> <span class=\"n\">oppo2</span>\n            <span class=\"n\">exact</span> <span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">oppo.symm</span><span class=\"o\">)</span> <span class=\"n\">oppo1</span>\n            <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 409982922,
        "sender_full_name": "chenjulang",
        "timestamp": 1703573521
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 409983030,
        "sender_full_name": "chenjulang",
        "timestamp": 1703573596
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 409983310,
        "sender_full_name": "chenjulang",
        "timestamp": 1703573808
    },
    {
        "content": "<p>I still cannot complete this \"sorry\" in \"MainGoal7\".<br>\nMainGoal7 is true , we can see another proof in \"MainGoal5\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.LinearIndependent</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.Basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.ToLin</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.ColumnRowPartitioned</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Sign</span>\n\n\n<span class=\"c1\">-- 线性独立</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n  <span class=\"kn\">open</span> <span class=\"n\">Function</span> <span class=\"n\">Set</span> <span class=\"n\">Submodule</span> <span class=\"n\">Matrix</span>\n  <span class=\"kn\">open</span> <span class=\"n\">Equiv</span> <span class=\"n\">Equiv.Perm</span> <span class=\"n\">Finset</span> <span class=\"n\">Function</span>\n\n  <span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Cardinal</span>\n\n  <span class=\"kd\">universe</span> <span class=\"n\">u'</span> <span class=\"n\">u</span>\n\n  <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M'</span> <span class=\"n\">M''</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n  <span class=\"kn\">section</span> <span class=\"n\">Module</span>\n\n    <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n    <span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M''</span><span class=\"o\">]</span>\n    <span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M''</span><span class=\"o\">]</span>\n    <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n    <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">)</span>\n\n    <span class=\"c1\">-- 线性独立的定义，后面还有定义linearIndependent_iff2'，是比较符合传统数学上的理解的。</span>\n    <span class=\"c1\">-- 1.LinearMap.ker 2.Finsupp.total 3.⊥</span>\n    <span class=\"c1\">-- 零空间（Zero Space）： 在线性代数中，给定一个线性映射（如矩阵），其零空间是所有映射到零向量的输入组成的集合。零空间也被称为核（kernel）。</span>\n    <span class=\"c1\">-- 零子空间（zero subspace）：是向量空间中的一个特殊子空间。它单独由零向量（所有分量都为零的向量）构成。</span>\n    <span class=\"c1\">-- LinearMap.ker：</span>\n      <span class=\"c1\">--   def ker (f : F) : Submodule R M :=</span>\n      <span class=\"c1\">-- comap f ⊥</span>\n      <span class=\"c1\">-- comap f ⊥ ：的含义是将零子空间通过逆映射 f 映射回原始的定义域。</span>\n      <span class=\"c1\">-- 最终，ker (f : F) 返回的是线性映射 f 的核，即所有映射到零向量的输入的集合。</span>\n      <span class=\"c1\">-- Submodule R M：环 R 上的模 M 的子模组成的集合类型</span>\n    <span class=\"kd\">def</span> <span class=\"n\">LinearIndependent2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n      <span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.total</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"c1\">-- 在线性代数中，⊥ 经常用于表示零空间或零子空间。</span>\n    <span class=\"c1\">-- 举例说明</span>\n    <span class=\"c1\">-- 已知2个条件：</span>\n    <span class=\"c1\">-- 已知任意的一维向量d，即(x,y),举例（7，8）</span>\n    <span class=\"c1\">-- 已知一个映射v，将（1，0）=&gt;(2,3),将（0，1）=&gt; (4,5)</span>\n\n    <span class=\"c1\">-- 推理：</span>\n\n    <span class=\"c1\">-- Finsupp.total ι M R v具体结果就是：fun d =&gt; d.sum fun i =&gt; F i</span>\n    <span class=\"c1\">-- d.sum (fun i =&gt; F i) 具体做的是：</span>\n    <span class=\"c1\">-- 展开d.sum: ∑ a in d.support, g a (d a)</span>\n    <span class=\"c1\">-- 展开g，g就是(fun i =&gt; F i)：∑ a in d.support, (fun i =&gt; F i) a (d a)</span>\n    <span class=\"c1\">-- a是什么，先看d.support是指d中有非零元素的索引位置的集合，即{1,2},因为(7，8)的第1，2位都是非零数</span>\n    <span class=\"c1\">-- 所以展开a就是</span>\n    <span class=\"c1\">-- (fun i =&gt; F i) 1 (d 1) +</span>\n    <span class=\"c1\">-- (fun i =&gt; F i) 2 (d 2)</span>\n    <span class=\"c1\">-- 代入(fun i =&gt; F i）得到,并且代入变量d：(F 1) (7) + (F 2) (8)</span>\n    <span class=\"c1\">-- F是什么呢？是LinearMap.id.smulRight (v i)</span>\n    <span class=\"c1\">-- LinearMap.id.smulRight (v 1) (7) + LinearMap.id.smulRight (v 2) (8)</span>\n    <span class=\"c1\">-- 这里不代入比较好，变回由已知条件变量d，映射v来表示：</span>\n    <span class=\"c1\">-- LinearMap.id.smulRight (v 1) (d 1) + LinearMap.id.smulRight (v 2) (d 2)</span>\n    <span class=\"c1\">-- 即(v 1)•(d 1) + (v 2)•(d 2)</span>\n    <span class=\"c1\">-- 这就是(Finsupp.total ι M R v)映射具体代表的，它将任意的向量d，变成了向量(v 1)•(d 1) + (v 2)•(d 2)</span>\n    <span class=\"c1\">-- 因此LinearMap.ker (Finsupp.total ι M R v)指的是由上述映射，从像为零向量，反向映射回去后，得到的所有向量，只有零向量一个。</span>\n    <span class=\"c1\">-- 则ι M R v共同形成一个关系：线性无关</span>\n    <span class=\"c1\">-- v : ι → M 指的是一个映射，根据这里举的例子，将（1，0）=&gt;(2,3),将（0，1）=&gt; (4,5)，</span>\n      <span class=\"c1\">-- ι就是第一个向量空间（一维2项向量组成的集合），M指的是第二个向量空间（一维2项向量组成的集合）</span>\n    <span class=\"c1\">-- R应该指的是数乘取的元素的集合，比如我们举例就是R实数</span>\n\n\n    <span class=\"kd\">theorem</span> <span class=\"n\">linearIndependent2_iff</span>\n    <span class=\"o\">:</span> <span class=\"n\">LinearIndependent2</span> <span class=\"n\">R</span> <span class=\"n\">v</span>\n    <span class=\"bp\">↔</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.total</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n      <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">LinearIndependent2</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">LinearMap.ker_eq_bot'</span><span class=\"o\">]</span>\n      <span class=\"n\">done</span>\n\n<span class=\"c1\">-- //</span>\n\n        <span class=\"kd\">theorem</span> <span class=\"n\">linearIndependent2_iff'_1</span><span class=\"o\">:</span>\n        <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.total</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n        <span class=\"bp\">↔</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n          <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n          <span class=\"bp\">→</span>\n          <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">constructor</span>\n          <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">hf</span> <span class=\"n\">s</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">i</span> <span class=\"n\">his</span>\n            <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">fun₀</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n              <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n              <span class=\"n\">refine'</span> <span class=\"n\">hf</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n              <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_sum</span><span class=\"o\">]</span>\n              <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.total_single</span><span class=\"o\">]</span> <span class=\"c1\">--???</span>\n              <span class=\"n\">exact</span> <span class=\"n\">hg</span>\n            <span class=\"k\">calc</span>\n              <span class=\"n\">g</span> <span class=\"n\">i</span>\n              <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.lapply</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.single</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"c1\">--???</span>\n                <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n                <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.lapply_apply</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.single_eq_same</span><span class=\"o\">]</span>\n              <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.lapply</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.single</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"c1\">--???</span>\n                <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n                <span class=\"n\">refine'</span> <span class=\"n\">Eq.symm</span> <span class=\"n\">_</span>\n                <span class=\"n\">refine'</span> <span class=\"n\">Finset.sum_eq_single</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n                <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">j</span> <span class=\"n\">_hjs</span> <span class=\"n\">hji</span>\n                  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.lapply_apply</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.single_eq_of_ne</span> <span class=\"n\">hji</span><span class=\"o\">]</span>\n                <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hnis</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hnis.elim</span> <span class=\"n\">his</span><span class=\"o\">)</span>\n                <span class=\"n\">done</span>\n              <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.single</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"n\">i</span>\n                <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n                <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.lapply_apply</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">]</span>\n                <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Finset.sum_apply'</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n                <span class=\"c1\">-- exact (map_sum ..).symm --???</span>\n              <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n                <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n                <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:=</span> <span class=\"n\">FunLike.ext_iff.1</span> <span class=\"n\">h</span> <span class=\"n\">i</span>\n                <span class=\"n\">exact</span> <span class=\"n\">h2</span>\n            <span class=\"n\">done</span>\n          <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">hf</span> <span class=\"n\">l</span> <span class=\"n\">hl</span> <span class=\"c1\">--???</span>\n            <span class=\"n\">refine'</span> <span class=\"n\">Finsupp.ext</span> <span class=\"n\">_</span>\n            <span class=\"n\">intros</span> <span class=\"n\">i</span>\n            <span class=\"n\">refine'</span> <span class=\"n\">_root_.by_contradiction</span> <span class=\"n\">_</span>\n            <span class=\"n\">intros</span> <span class=\"n\">hni</span>\n            <span class=\"k\">have</span> <span class=\"n\">h3</span><span class=\"o\">:=</span> <span class=\"n\">Finsupp.mem_support_iff.2</span> <span class=\"n\">hni</span>\n            <span class=\"n\">refine'</span> <span class=\"n\">hni</span> <span class=\"n\">_</span>\n            <span class=\"n\">refine'</span> <span class=\"n\">hf</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hl</span> <span class=\"n\">_</span> <span class=\"n\">h3</span>\n            <span class=\"n\">done</span>\n          <span class=\"n\">done</span>\n\n\n    <span class=\"kd\">theorem</span> <span class=\"n\">linearIndependent2_iff'</span> <span class=\"o\">:</span>\n      <span class=\"n\">LinearIndependent2</span> <span class=\"n\">R</span> <span class=\"n\">v</span>\n      <span class=\"bp\">↔</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span>\n         <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n            <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"c1\">-- g i应该就是系数，v i是第i个向量</span>\n            <span class=\"bp\">→</span>\n            <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"c1\">-- 推出每一个系数都是0</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">linearIndependent2_iff'_1</span> <span class=\"n\">R</span> <span class=\"n\">v</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">linearIndependent_iff</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- //</span>\n\n        <span class=\"kd\">theorem</span> <span class=\"n\">linearIndependent2_iff''_1</span>\n        <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n        <span class=\"bp\">↔</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n          <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n          <span class=\"bp\">→</span>\n          <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">classical</span> <span class=\"c1\">-- 可以使用局部变量，比如下面的这个his</span>\n          <span class=\"n\">constructor</span>\n          <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">s</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">hv</span> <span class=\"n\">i</span>\n            <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">his</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">H</span> <span class=\"n\">s</span> <span class=\"n\">g</span> <span class=\"n\">hv</span> <span class=\"n\">i</span> <span class=\"n\">his</span> <span class=\"k\">else</span> <span class=\"n\">hg</span> <span class=\"n\">i</span> <span class=\"n\">his</span><span class=\"o\">)</span> <span class=\"c1\">--???</span>\n            <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n            <span class=\"n\">done</span>\n          <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">s</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">i</span> <span class=\"n\">hi</span>\n            <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:(</span><span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n            <span class=\"o\">:=</span> <span class=\"n\">H</span>\n              <span class=\"n\">s</span>\n              <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">g</span> <span class=\"n\">j</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">if_neg</span> <span class=\"n\">hj</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">ite_smul</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_extend_by_zero</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">])</span> <span class=\"n\">i</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"c1\">-- convert h2 --一个意思</span>\n            <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">if_pos</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n            <span class=\"n\">done</span>\n          <span class=\"n\">done</span>\n\n    <span class=\"kd\">theorem</span> <span class=\"n\">linearIndependent2_iff''</span> <span class=\"o\">:</span>\n      <span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"n\">v</span>\n      <span class=\"bp\">↔</span>\n      <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">_hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n        <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">→</span>\n        <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">linearIndependent2_iff''_1</span> <span class=\"n\">R</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n        <span class=\"n\">exact</span> <span class=\"n\">linearIndependent_iff'.trans</span> <span class=\"n\">h2</span>\n        <span class=\"n\">done</span>\n\n\n\n      <span class=\"c1\">-- 最终目标：已知A是m*n矩阵，</span>\n      <span class=\"c1\">-- 对于任意m维向量b，</span>\n      <span class=\"c1\">-- 线性方程组AX=b至多只有一个解，</span>\n      <span class=\"c1\">-- =&gt;用lean代码证明：A的各列向量线性无关</span>\n\n      <span class=\"c1\">-- 最终目标：已知A是m*n矩阵，对于任意m维向量b，线性方程组AX=b至多只有一个解，用lean代码证明：A的各列向量线性无关</span>\n\n      <span class=\"c1\">-- 命题还没有写出来。最后A的各列向量线性无关应该怎么写呢？？用哪个定义比较好？</span>\n      <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n          <span class=\"kd\">theorem</span> <span class=\"n\">MainGoal7_1</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n          <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n          <span class=\"o\">:</span>\n          <span class=\"n\">mulVec</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">yi</span> <span class=\"bp\">↦</span> <span class=\"bp\">∑</span> <span class=\"n\">xi</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">xi</span> <span class=\"bp\">•</span> <span class=\"n\">A</span> <span class=\"n\">yi</span> <span class=\"n\">xi</span>\n            <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mulVec</span><span class=\"o\">]</span>\n            <span class=\"n\">ext</span> <span class=\"n\">h7_x</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dotProduct</span><span class=\"o\">]</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n            <span class=\"n\">refine'</span> <span class=\"n\">sum_congr</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n            <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n            <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x_1</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">h7_x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span>\n\n      <span class=\"kd\">theorem</span> <span class=\"n\">MainGoal7</span>\n      <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n      <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- mulVec就是矩阵和向量的乘法运算</span>\n      <span class=\"o\">:</span><span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">A.transpose</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">refine'</span> <span class=\"n\">linearIndependent_iff'.2</span> <span class=\"n\">_</span>\n        <span class=\"k\">have</span> <span class=\"n\">h6</span><span class=\"o\">:=</span> <span class=\"n\">hA</span> <span class=\"mi\">0</span>\n        <span class=\"k\">have</span> <span class=\"n\">_h6</span><span class=\"o\">:=</span> <span class=\"n\">hA</span> <span class=\"mi\">0</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h6_1</span><span class=\"o\">,</span> <span class=\"n\">h6_2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h6</span>\n        <span class=\"k\">have</span> <span class=\"n\">h7</span><span class=\"o\">:</span> <span class=\"n\">mulVec</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"c1\">-- 这个引理可以单独抽出来</span>\n        <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">yi</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">xi</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">xi</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">yi</span> <span class=\"n\">xi</span><span class=\"o\">)</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">MainGoal7_1</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h7</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h6_1</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span>\n        <span class=\"n\">by_contra</span> <span class=\"n\">oppo</span>\n        <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">oppo</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Matrix.transpose</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n        <span class=\"k\">have</span> <span class=\"n\">h3_2</span> <span class=\"o\">:</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n        <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h3_2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n        <span class=\"n\">clear</span> <span class=\"n\">h3_2</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n        <span class=\"n\">clear</span> <span class=\"n\">hA</span>\n        <span class=\"k\">have</span> <span class=\"n\">h6_oppo</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">,(</span><span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">use</span> <span class=\"mi\">0</span>\n          <span class=\"n\">use</span> <span class=\"n\">h2</span>\n          <span class=\"n\">constructor</span>\n          <span class=\"bp\">·</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">oppo</span> <span class=\"c1\">-- 机器和人一样对于这种双重否定的问题一样很难理解</span>\n            <span class=\"n\">intros</span> <span class=\"n\">oppo1</span> <span class=\"n\">oppo2</span>\n            <span class=\"n\">exact</span> <span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">oppo.symm</span><span class=\"o\">)</span> <span class=\"n\">oppo1</span>\n            <span class=\"n\">done</span>\n          <span class=\"n\">constructor</span>\n          <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">mulVec_zero</span> <span class=\"n\">A</span>\n          <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MainGoal7_1</span> <span class=\"n\">A</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n            <span class=\"gr\">sorry</span>\n            <span class=\"c1\">-- exact h3</span>\n            <span class=\"c1\">-- rw [← Multiset.sum_sum] at h3</span>\n          <span class=\"n\">done</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">x3</span><span class=\"o\">,</span><span class=\"n\">x4</span><span class=\"o\">,</span><span class=\"n\">x5</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h6_oppo</span>\n        <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ExistsUnique.unique</span> <span class=\"n\">_h6</span> <span class=\"n\">x4</span> <span class=\"n\">x5</span><span class=\"o\">)</span>\n        <span class=\"n\">exact</span> <span class=\"n\">x3</span> <span class=\"n\">h4</span>\n        <span class=\"n\">done</span>\n\n\n      <span class=\"kd\">theorem</span> <span class=\"n\">MainGoal5</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"c1\">-- 一个大神的证明</span>\n      <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">A.transpose</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Matrix.mulVec_injective_iff.1</span> <span class=\"o\">((</span><span class=\"n\">Function.bijective_iff_existsUnique</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hA</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span>\n        <span class=\"n\">done</span>\n\n\n  <span class=\"kd\">end</span> <span class=\"n\">Module</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 409994741,
        "sender_full_name": "chenjulang",
        "timestamp": 1703580840
    },
    {
        "content": "<p>Any advise? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 409994958,
        "sender_full_name": "chenjulang",
        "timestamp": 1703580964
    },
    {
        "content": "<p>I still cannot complete the second \"sorry\" in \"MainGoal7\".<br>\nMainGoal7 is true indeed, we can see another proof in \"MainGoal5\"</p>",
        "id": 409997384,
        "sender_full_name": "chenjulang",
        "timestamp": 1703582214
    },
    {
        "content": "<p>If <code>MainGoal5</code> is exactly the same as <code>MainGoal7</code>, why don't you use <code>MainGoal5</code> to prove <code>MainGoal7</code>?</p>",
        "id": 410006531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703586400
    },
    {
        "content": "<p>Because MainGoal5 use lemmas about bijective and injective.<br>\nIn MainGoal7 is translated from the textbook proof</p>",
        "id": 410007649,
        "sender_full_name": "chenjulang",
        "timestamp": 1703587004
    },
    {
        "content": "<p>I want to prove it either way ...</p>",
        "id": 410007668,
        "sender_full_name": "chenjulang",
        "timestamp": 1703587019
    },
    {
        "content": "<p>Get it !!!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n          <span class=\"kd\">theorem</span> <span class=\"n\">MainGoal4_1</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n          <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n          <span class=\"o\">:</span>\n          <span class=\"n\">mulVec</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">yi</span> <span class=\"bp\">↦</span> <span class=\"bp\">∑</span> <span class=\"n\">xi</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">xi</span> <span class=\"bp\">•</span> <span class=\"n\">A</span> <span class=\"n\">yi</span> <span class=\"n\">xi</span>\n            <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mulVec</span><span class=\"o\">]</span>\n            <span class=\"n\">ext</span> <span class=\"n\">h7_x</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dotProduct</span><span class=\"o\">]</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n            <span class=\"n\">refine'</span> <span class=\"n\">sum_congr</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n            <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n            <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x_1</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">h7_x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span>\n\n      <span class=\"kd\">theorem</span> <span class=\"n\">MainGoal4</span>\n      <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n      <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- mulVec就是矩阵和向量的乘法运算</span>\n      <span class=\"o\">:</span><span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">A.transpose</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"c1\">-- refine' linearIndependent_iff'.2 _</span>\n        <span class=\"n\">refine'</span> <span class=\"n\">Fintype.linearIndependent_iff.mpr</span> <span class=\"n\">_</span>\n        <span class=\"k\">have</span> <span class=\"n\">h6</span><span class=\"o\">:=</span> <span class=\"n\">hA</span> <span class=\"mi\">0</span>\n        <span class=\"k\">have</span> <span class=\"n\">_h6</span><span class=\"o\">:=</span> <span class=\"n\">hA</span> <span class=\"mi\">0</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h6_1</span><span class=\"o\">,</span> <span class=\"n\">h6_2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h6</span>\n        <span class=\"k\">have</span> <span class=\"n\">h7</span><span class=\"o\">:</span> <span class=\"n\">mulVec</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"c1\">-- 这个引理可以单独抽出来</span>\n        <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">yi</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">xi</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">xi</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">yi</span> <span class=\"n\">xi</span><span class=\"o\">)</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">MainGoal4_1</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h7</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h6_1</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span>\n        <span class=\"n\">by_contra</span> <span class=\"n\">oppo</span>\n        <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">oppo</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Matrix.transpose</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n        <span class=\"n\">clear</span> <span class=\"n\">hA</span>\n        <span class=\"k\">have</span> <span class=\"n\">h6_oppo</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">,(</span><span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n          <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">use</span> <span class=\"mi\">0</span>\n          <span class=\"n\">use</span> <span class=\"n\">h1</span>\n          <span class=\"n\">constructor</span>\n          <span class=\"bp\">·</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">oppo</span> <span class=\"c1\">-- 机器和人一样对于这种双重否定的问题一样很难理解</span>\n            <span class=\"n\">exact</span> <span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">oppo.symm</span><span class=\"o\">)</span> <span class=\"n\">h3</span>\n            <span class=\"n\">done</span>\n          <span class=\"n\">constructor</span>\n          <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">mulVec_zero</span> <span class=\"n\">A</span>\n          <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MainGoal4_1</span> <span class=\"n\">A</span> <span class=\"n\">h1</span><span class=\"o\">]</span>\n            <span class=\"k\">have</span> <span class=\"n\">h8</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n            <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">yi</span> <span class=\"bp\">↦</span> <span class=\"bp\">∑</span> <span class=\"n\">xi</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">xi</span> <span class=\"bp\">•</span> <span class=\"n\">A</span> <span class=\"n\">yi</span> <span class=\"n\">xi</span><span class=\"o\">)</span>\n              <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n              <span class=\"n\">ext</span> <span class=\"n\">h8_1</span>\n              <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_apply</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h8</span><span class=\"o\">]</span>\n            <span class=\"n\">clear</span> <span class=\"n\">h8</span>\n            <span class=\"n\">exact</span> <span class=\"n\">h2</span>\n          <span class=\"n\">done</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">x3</span><span class=\"o\">,</span><span class=\"n\">x4</span><span class=\"o\">,</span><span class=\"n\">x5</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h6_oppo</span>\n        <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ExistsUnique.unique</span> <span class=\"n\">_h6</span> <span class=\"n\">x4</span> <span class=\"n\">x5</span><span class=\"o\">)</span>\n        <span class=\"n\">exact</span> <span class=\"n\">x3</span> <span class=\"n\">h4</span>\n        <span class=\"n\">done</span>\n\n\n      <span class=\"kd\">theorem</span> <span class=\"n\">MainGoal5</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"c1\">-- 一个大神的证明</span>\n      <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">A.transpose</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Matrix.mulVec_injective_iff.1</span> <span class=\"o\">((</span><span class=\"n\">Function.bijective_iff_existsUnique</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hA</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span>\n        <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 410035807,
        "sender_full_name": "chenjulang",
        "timestamp": 1703602945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Thanks</p>",
        "id": 410035851,
        "sender_full_name": "chenjulang",
        "timestamp": 1703602964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 410035873,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703602974
    }
]