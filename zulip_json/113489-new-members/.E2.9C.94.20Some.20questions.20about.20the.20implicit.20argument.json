[
    {
        "content": "<p>Hello community! I am reading through section 2.2 of the book <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">Mathematics in Lean</a>. In this section I am told that <code>variable {R : Type*} [Ring R]</code> gives us a type R, a ring structure on R, and the curly braces declares R to be an implicit argument. This catches my interest. So I type the following sentences into lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">TestRing</span>\n<span class=\"w\">  </span><span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">neg_add_cancel_left</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">add_left_neg</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">zero_add</span><span class=\"o\">]</span><span class=\"bp\">\\</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">neg_add_cancel_left</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"kn\">end</span><span class=\"w\"> </span><span class=\"n\">TestRing</span>\n</code></pre></div>\n<p>Not surprisingly, lean replies me with an error message <code>application type mismatch</code>, or to be more precise</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">application</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span>\n<span class=\"w\">  </span><span class=\"bp\">@</span><span class=\"n\">neg_add_cancel_left</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"n\">argument</span>\n<span class=\"w\">  </span><span class=\"n\">a</span>\n<span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u_1</span>\n<span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">20289</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">20289</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I know this will happen since I omit  the <code>R</code> in the command <code>#check neg_add_cancel_left a b</code>. However, I am curious about the error message <code>but is expected to have type Type ?u.20289 : Type (?u.20289 + 1)</code>. Is the number <code>20289</code> appearing here has any special meanings ?</p>",
        "id": 445915070,
        "sender_full_name": "Tiffany",
        "timestamp": 1718905166
    },
    {
        "content": "<p>You can pretend it does not, no. But if you want to know the truth, 20288 is the number of \"universe metavariables\" created up until you wrote <code>TestRing.neg_add_cancel_left</code>, and <code>?u.20289</code> is the new universe metavariable that Lean creates to try making sense of <code>neg_add_cancel_left a b</code></p>",
        "id": 445915454,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718905296
    },
    {
        "content": "<p>It's an autogenerated metavariable (a \"universe level metavariable\" more precisely). Notice if you <code>#check neg_add_cancel_left</code> it's parameterized by a universe level variable. When you instantiate a theorem, that variable gets instantiated as a universe level metavariable that gets solved for in the normal course of type checking.</p>",
        "id": 445915538,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718905321
    },
    {
        "content": "<p>Just for fun, try doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">neg_add_cancel_left</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">neg_add_cancel_left</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">neg_add_cancel_left</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n</code></pre></div>\n<p>and see how the number goes up</p>",
        "id": 445915701,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718905364
    },
    {
        "content": "<blockquote>\n<p>20288 is the number of \"universe metavariables\" created up until you wrote [...]</p>\n</blockquote>\n<p>I think it's the number is the sum total of the number of (1) variables in local contexts, (2) expression metavariables, and (3) universe level metavariables. That's just trivia though.</p>",
        "id": 445918597,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718906342
    },
    {
        "content": "<p>Oh, the expr and universe metavariables count towards the same tally? TIL</p>",
        "id": 445921142,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718907147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Some.20questions.20about.20the.20implicit.20argument/near/445915701\">said</a>:</p>\n<blockquote>\n<p>Just for fun, try doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">neg_add_cancel_left</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">neg_add_cancel_left</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">neg_add_cancel_left</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n</code></pre></div>\n<p>and see how the number goes up</p>\n</blockquote>\n<p>Each time the number is increased precisely by 1467! That's: </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">neg_add_cancel_left</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"c1\">-- the number is 20289</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">neg_add_cancel_left</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"c1\">-- the number is 21756</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">neg_add_cancel_left</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"c1\">-- the number is 23223</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">neg_add_cancel_left</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"c1\">-- the number is 24690</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">neg_add_cancel_left</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"c1\">-- the number is 26157</span>\n</code></pre></div>",
        "id": 445985960,
        "sender_full_name": "Tiffany",
        "timestamp": 1718936373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Some.20questions.20about.20the.20implicit.20argument/near/445915454\">said</a>:</p>\n<blockquote>\n<p>You can pretend it does not, no. But if you want to know the truth, 20288 is the number of \"universe metavariables\" created up until you wrote <code>TestRing.neg_add_cancel_left</code>, and <code>?u.20289</code> is the new universe metavariable that Lean creates to try making sense of <code>neg_add_cancel_left a b</code></p>\n</blockquote>\n<p>May I ask that where can I learn these knowledge like \"universe metavariables\", since I have seen the word \"metavariable\" several times in Lean infoview ?</p>",
        "id": 445986267,
        "sender_full_name": "Tiffany",
        "timestamp": 1718936589
    },
    {
        "content": "<p>Okay that's not the number I was expecting <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 445994600,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718940491
    },
    {
        "content": "<p>Does <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> not discuss metavariables?</p>",
        "id": 445994615,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718940508
    },
    {
        "content": "<p>Yes it does. Or are you interested specifically in the universe metavariables? I believe there is not much to say about it except for the fact that they are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Level#doc\">docs#Level</a> valued metavariables</p>",
        "id": 445994838,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718940653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Some.20questions.20about.20the.20implicit.20argument/near/445994615\">said</a>:</p>\n<blockquote>\n<p>Does <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> not discuss metavariables?</p>\n</blockquote>\n<p>Thanks for your reply. It turns out that maybe I should read these two books at the same time.</p>",
        "id": 445995380,
        "sender_full_name": "Tiffany",
        "timestamp": 1718940967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"727530\">Tiffany</span> has marked this topic as resolved.</p>",
        "id": 445995457,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718941034
    }
]