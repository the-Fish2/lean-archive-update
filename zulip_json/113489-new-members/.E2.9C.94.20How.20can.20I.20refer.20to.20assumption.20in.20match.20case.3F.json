[
    {
        "content": "<p>I have the following mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test_match1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test_match2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">generalizing</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Nat.mod_lt</span> <span class=\"n\">n</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In the 0 case of <code>test_match1</code>, the hypothesis <code>h0</code> transforms from <code>h0 : n ≠ 0</code> into <code>h0 : 0 ≠ 0</code>. However in <code>test_match2</code> it remains <code>h0 : n % 2 ≠ 0</code> and I was unable to figure out how to refer to the fact that <code>n % 2 = 0</code> by assumption in the match case of 0. Maybe it has something to do with the <code>@Nat.mod_lt</code> component I borrowed from a built-in Lean theorem, but without something like that I don't think the match cases will be accepted. Any advice would be appreciated.</p>",
        "id": 430422624,
        "sender_full_name": "Andreas Gittis",
        "timestamp": 1711835755
    },
    {
        "content": "<p>For each discriminant in a <code>match</code>, you can create a hypothesis for it by including a <code>_ :</code> before it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test_match2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Nat.mod_lt</span> <span class=\"n\">n</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(I think <code>generalizing := true</code> has been the default for quite a while now.)</p>",
        "id": 430423652,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711836769
    },
    {
        "content": "<p>Thanks Kyle!</p>",
        "id": 430423986,
        "sender_full_name": "Andreas Gittis",
        "timestamp": 1711837197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"622464\">Andreas Gittis</span> has marked this topic as resolved.</p>",
        "id": 430423992,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711837201
    }
]