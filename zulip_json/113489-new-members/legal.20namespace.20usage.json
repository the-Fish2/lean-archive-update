[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Real</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">Real</span>\n<span class=\"k\">#check</span> <span class=\"n\">Real.T</span>\n</code></pre></div>\n<p>I can't get past \"unknown identifier: Real.T\".</p>",
        "id": 428386940,
        "sender_full_name": "Quinn",
        "timestamp": 1711131603
    },
    {
        "content": "<p>What do you think that would do? What are you trying to do?</p>",
        "id": 428388599,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1711132266
    },
    {
        "content": "<p>it seems like <code>#check Real.T</code> should just be <code>Type</code></p>",
        "id": 428390419,
        "sender_full_name": "Quinn",
        "timestamp": 1711133034
    },
    {
        "content": "<p>cuz for the namespace's context that's what it is</p>",
        "id": 428390503,
        "sender_full_name": "Quinn",
        "timestamp": 1711133058
    },
    {
        "content": "<p>Either the variable dies when you close the namespace or it stays being called T</p>",
        "id": 428390533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711133070
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Real</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">Real</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"k\">#check</span> <span class=\"n\">T</span>\n</code></pre></div>\n<p>(also fails) i'm confused why i'm able to <code>open</code> a namespace without supplying values for the variables declared</p>",
        "id": 428391044,
        "sender_full_name": "Quinn",
        "timestamp": 1711133283
    },
    {
        "content": "<p><code>namespaces</code> are for declarations, not variables</p>",
        "id": 428391970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711133643
    },
    {
        "content": "<p>If you're following Mathematics in Lean, this chapter mentions <code>variable</code>: <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C02_Basics.html\">https://leanprover-community.github.io/mathematics_in_lean/C02_Basics.html</a></p>",
        "id": 428393110,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711134116
    },
    {
        "content": "<p>It's for declaring parameters to definitions and theorems for the rest of the section. (They get removed from the definition or theorem if they are not used.) They are not definitions or theorems themselves.</p>",
        "id": 428393313,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711134184
    },
    {
        "content": "<p>If you want something in the <code>Real</code> namespace, you have to make definition or theorem.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Real</span>\n<span class=\"kd\">def</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">end</span> <span class=\"n\">Real</span>\n<span class=\"k\">#check</span> <span class=\"n\">Real.T</span>\n<span class=\"c1\">-- Real.T : Type 1</span>\n</code></pre></div>",
        "id": 428393496,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711134257
    },
    {
        "content": "<p>great explanation thanks!</p>",
        "id": 428396304,
        "sender_full_name": "Quinn",
        "timestamp": 1711135567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"693606\">Quinn</span> <a href=\"#narrow/stream/113489-new-members/topic/legal.20namespace.20usage/near/428391044\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Real</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">Real</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"k\">#check</span> <span class=\"n\">T</span>\n</code></pre></div>\n<p>(also fails) i'm confused why i'm able to <code>open</code> a namespace without supplying values for the variables declared</p>\n</blockquote>\n<p>It sounds like you are thinking of modules in the style of Coq or ML. Lean does not have a module system in this sense, so <code>variable</code> declarations have local effect only and theorems using them are generalized immediately after the definition, not at the end of the section. Once the section or namespace is closed or you go to a new file, the variable is completely gone and has no lasting effect.</p>",
        "id": 428401191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711137555
    }
]