[
    {
        "content": "<p>Trying to construct a subtype for power series with nonzero constant coeff., is there a doc about constructing subtypes?<br>\nAlso, regarding the error <code>failed to synthesize</code> I read that usually an <code>instance</code> is missing but don't understand why I get the error here: adding <code>instance</code> definitions of <code>NZCPowerSeries</code> doesn't seem to matter here, as I'm not making such an object in this part of the code?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">autoImplicit</span><span class=\"w\"> </span><span class=\"n\">false</span>\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">diagnostics</span><span class=\"w\"> </span><span class=\"n\">true</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">PowerSeries</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommSemiring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">nonzero_constantCoeff</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">⟦</span><span class=\"n\">X</span><span class=\"bp\">⟧</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">constantCoeff</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">NZCPowerSeries</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">⟦</span><span class=\"n\">X</span><span class=\"bp\">⟧</span><span class=\"w\"> </span><span class=\"bp\">//</span><span class=\"w\"> </span><span class=\"n\">nonzero_constantCoeff</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\">       </span><span class=\"c1\">-- &lt;===============</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">synthesize</span>\n<span class=\"w\">  </span><span class=\"n\">CommSemiring</span><span class=\"w\"> </span><span class=\"n\">R</span>\n</code></pre></div>",
        "id": 444281829,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1718210262
    },
    {
        "content": "<p>Or is it that already the nonzero condition of one coefficient leads to that failure?</p>",
        "id": 444282844,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1718210526
    },
    {
        "content": "<p>There are two <code>R</code>'s. The one at L7 and the one that is a parameter of <code>NZCPowerSeries</code></p>",
        "id": 444282960,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718210562
    },
    {
        "content": "<p>Following Matt's suggestion, you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"c1\">-- make `R` explicit</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">NZCPowerSeries</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">⟦</span><span class=\"n\">X</span><span class=\"bp\">⟧</span><span class=\"w\"> </span><span class=\"bp\">//</span><span class=\"w\"> </span><span class=\"n\">nonzero_constantCoeff</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\">       </span><span class=\"c1\">-- &lt;===============</span>\n</code></pre></div>",
        "id": 444283202,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718210634
    },
    {
        "content": "<p>Thanks. Implicit-/explicitness seems to be a recurring theme that I don't grasp.</p>\n<p>The motivation for this subtype is to enable the <code>log</code> operator for formal power series.</p>",
        "id": 444284754,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1718211064
    },
    {
        "content": "<p>Implicit: Lean should be able to figure this from the context. Eg we have <code>(h : n &gt; 0)</code> so Lean should be able to figure out that <code>n : Nat</code> at the call site. <br>\nExplicit: Lean can't figure this out and/or readability degrades significantly omitting this.</p>",
        "id": 444285501,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718211292
    },
    {
        "content": "<p>Implicit-ness is a mechanism to avoid writing giant signatures for functions</p>",
        "id": 444285623,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718211339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"707242\">Ralf Stephan</span> <a href=\"#narrow/stream/113489-new-members/topic/fail.20to.20synthesize/near/444284754\">said</a>:</p>\n<blockquote>\n<p>Thanks. Implicit-/explicitness seems to be a recurring theme that I don't grasp.</p>\n<p>The motivation for this subtype is to enable the <code>log</code> operator for formal power series.</p>\n</blockquote>\n<p>Note that a lot of the times, rather than working with subtypes it is easier to work with the full type and assign junk values to terms that you would otherwise exclude.  E.g. you could have the log of a power-series that starts with 0 be 0.</p>",
        "id": 444286217,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718211521
    },
    {
        "content": "<p>Then you do not need a subtype, since <code>log</code> is defined on all power series -- it is just not interesting, rather than undefined, where you would normally not compute it.</p>",
        "id": 444286383,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718211573
    },
    {
        "content": "<p>If that is not frowned upon, I'll take easier any time!</p>",
        "id": 444286628,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1718211629
    },
    {
        "content": "<p>I would say that it is standard practice and often desirable.  Kevin may tell you about square-roots of negative reals, if you ask him!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 444286808,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718211682
    },
    {
        "content": "<p>Sometimes even if you don't ask <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 444291859,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718213318
    },
    {
        "content": "<p>Did anyone ever ask?</p>",
        "id": 444332793,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718226577
    },
    {
        "content": "<p>I didn't need to, as I found <a href=\"https://xenaproject.wordpress.com/2020/07/05/division-by-zero-in-type-theory-a-faq/\">his blogpost</a> in another thread.</p>",
        "id": 444517946,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1718298861
    }
]