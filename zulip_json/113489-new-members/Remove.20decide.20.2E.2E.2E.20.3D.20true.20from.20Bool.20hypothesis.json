[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">colListofMat</span> <span class=\"o\">:=</span> <span class=\"n\">List.map</span> <span class=\"n\">List.ofFn</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"n\">M.transpose</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list_allZero</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">l.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">==</span><span class=\"mi\">0</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">findNonzCol</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">colListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findIdx</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">col</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">list_allZero</span> <span class=\"n\">col</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">findNonzCol_get_HasNonz</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">findNonzCol</span> <span class=\"n\">M</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">colListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">colListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">findNonzCol</span> <span class=\"n\">M</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">List.findIdx_get</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:=</span><span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What can I do to to get rid of the <code>decide ... = true</code> in <code>this</code>?</p>",
        "id": 439228872,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715954203
    },
    {
        "content": "<p><code>simp at this</code></p>",
        "id": 439229423,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715954384
    },
    {
        "content": "<p>It also simplifies some other definitions that I don't want simplified. How do I specifically simplify the decide part?</p>",
        "id": 439229760,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715954466
    },
    {
        "content": "<p>Nvm, <code>simp? at this</code> tells me what I want. Thanks anyways!</p>",
        "id": 439229874,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715954496
    }
]