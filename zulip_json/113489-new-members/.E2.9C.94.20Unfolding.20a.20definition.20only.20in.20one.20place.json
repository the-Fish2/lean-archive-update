[
    {
        "content": "<p>Is there a way to unfold only some instances of a definition? I know you can do something similar to what I'm trying to do here with <code>rewrite</code>, and I'm wondering if there's a way to do it with <code>unfold</code>. </p>\n<p>Consider the following minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fLemma</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- here</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The proof obligation at the comment is </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo>⊢</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">⊢ f (f n) = f (n + 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>which can trivially be proved by unfolding all <code>f</code> and arithmetic. However, it could also be proved if we just unfolded the <code>f</code> in <code>(f n)</code>. Is there a way to just unfold that particular <code>f</code>?</p>",
        "id": 427945567,
        "sender_full_name": "Alexander Gillon",
        "timestamp": 1710946088
    },
    {
        "content": "<p><code>conv =&gt; enter [1, 1] ; unfold f</code></p>",
        "id": 427948094,
        "sender_full_name": "Richard Copley",
        "timestamp": 1710946710
    },
    {
        "content": "<p>How about if I only wanted to rewrite the outer <code>f</code>?</p>",
        "id": 427966202,
        "sender_full_name": "Alexander Gillon",
        "timestamp": 1710951272
    },
    {
        "content": "<p><code>rw [f]</code> (or <code>conv_rhs =&gt; rw [f]</code>), probably, in this case. I don't think <code>conv</code> and <code>unfold</code> can do it, but I might be missing something.</p>",
        "id": 427975976,
        "sender_full_name": "Richard Copley",
        "timestamp": 1710954029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"694154\">Alexander Gillon</span> <a href=\"#narrow/stream/113489-new-members/topic/Unfolding.20a.20definition.20only.20in.20one.20place/near/427966202\">said</a>:</p>\n<blockquote>\n<p>How about if I only wanted to rewrite the outer <code>f</code>?</p>\n</blockquote>\n<p>Is this what you had in mind?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fLemma</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>  <span class=\"c1\">-- ⊢ f n + 1 = 0</span>\n</code></pre></div>\n<p>Note that I changed the rhs to <code>0</code>, since otherwise Lean would always prove the goal.</p>",
        "id": 427977032,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710954356
    },
    {
        "content": "<p>That would do it. Thanks both for the info.</p>",
        "id": 427987420,
        "sender_full_name": "Alexander Gillon",
        "timestamp": 1710957589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"694154\">Alexander Gillon</span> has marked this topic as resolved.</p>",
        "id": 427987429,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710957594
    },
    {
        "content": "<p>I just want to add that <code>nth_rewrite</code>/<code>nth_rw</code> is also useful in these situations</p>",
        "id": 428036970,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1710980127
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NthRewrite</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fLemma</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nth_rw</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 428037003,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1710980150
    }
]