[
    {
        "content": "<p>Is there a better way to calculate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><mi>α</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H(\\alpha)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mo mathvariant=\"normal\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>α</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^\\prime(\\alpha)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span></span></span></span> (defined in the code below), then use 100 lines of <code>calc</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">C</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"mi\">1</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">α</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Real.cos</span> <span class=\"o\">(</span><span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">α</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">--simp [H, α]; norm_num</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">α</span> <span class=\"n\">H'</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">--simp [H', α]; norm_num</span>\n</code></pre></div>",
        "id": 420681285,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1707494317
    },
    {
        "content": "<p>Are you asking \"is there an algorithm where given a random real number expressible using the buttons on your calculator, it checks that it's the root of a given polynomial?\" because my guess is that the answer is \"no way\".</p>",
        "id": 420681756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707494446
    },
    {
        "content": "<p>On the other hand presumably there's a proof involving an expression of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mn>3</mn><mi>θ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\cos(3\\theta)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span></span></span></span> in terms of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\cos(\\theta)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span></span></span></span> which is way less than 100 lines.</p>\n<p>By the way, I would avoid the use of <code>C</code> and just use numerals.</p>",
        "id": 420682117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707494536
    },
    {
        "content": "<p>I would think about a smart math proof.</p>",
        "id": 420682500,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707494639
    },
    {
        "content": "<p>100 lines was an exaggeration, but yes, the question is if there is a tactic that can calculate this. <code>by_wolframalpha</code> would be a great tactic.</p>",
        "id": 420683737,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1707494983
    },
    {
        "content": "<p><code>polyrith</code> may be the closest to such things, but I think you'd have to feed it the relevant polynomial defining identities of <code>cos</code></p>",
        "id": 420683881,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707495018
    },
    {
        "content": "<p>(i.e ways to linearise the whole expression)</p>",
        "id": 420683905,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707495028
    },
    {
        "content": "<p>The difference between wolfram alpha and what's happening here is that the system can't just follow algorithms, it needs to also generate proofs. There are numerous examples online of wolfram alpha being wrong, but being wrong is not an option in Lean.</p>",
        "id": 420684748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707495267
    },
    {
        "content": "<p>There are also plenty of examples where wolfram alpha _can't_ solve a question of this nature.</p>\n<p>Here's a simple reduction to a statement which should be in mathlib but which doesn't seem to be?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">C</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"mi\">1</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">α</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Real.cos</span> <span class=\"o\">(</span><span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">α</span> <span class=\"n\">H'</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H'</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"k\">suffices</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"kd\">by</span>\n    <span class=\"n\">linear_combination</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Complex.cos_three_mul</span><span class=\"o\">]</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n    <span class=\"n\">field_simp</span>\n    <span class=\"n\">ring</span>\n  <span class=\"c1\">-- ⊢ cos (↑Real.pi / 3) = 1 / 2 -- should be in mathlib really</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 420685228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707495409
    },
    {
        "content": "<p>it's there for reals: <span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  Real.cos, Real.pi / 3</p>",
        "id": 420687169,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707495999
    },
    {
        "content": "<p>I think it's better to work with real numbers</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">C</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"mi\">1</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">α</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Real.cos</span> <span class=\"o\">(</span><span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">α</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Real.cos_three_mul</span> <span class=\"o\">(</span><span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">eval_sub</span><span class=\"o\">,</span> <span class=\"n\">eval_C</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">eval_pow</span><span class=\"o\">,</span> <span class=\"n\">eval_mul</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_div</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span> <span class=\"n\">Real.cos_pi_div_three</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">linear_combination</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">α</span> <span class=\"n\">H'</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">--simp [H', α]; norm_num</span>\n</code></pre></div>",
        "id": 420689442,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707496668
    },
    {
        "content": "<p>(This is essentially the same as Kevin's answer)</p>",
        "id": 420689551,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707496690
    },
    {
        "content": "<p>note that <code>linear_combination -1 * h / 4</code> is found by <code>polyrith</code></p>",
        "id": 420689583,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707496699
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">C</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"mi\">1</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">α</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Real.cos</span> <span class=\"o\">(</span><span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">Real.cos</span> <span class=\"o\">(</span><span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">Real.cos</span> <span class=\"o\">(</span><span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Real.cos_three_mul</span> <span class=\"o\">(</span><span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">mul_div</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span> <span class=\"n\">Real.cos_pi_div_three</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">α</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">eval_sub</span><span class=\"o\">,</span> <span class=\"n\">eval_C</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">eval_pow</span><span class=\"o\">,</span> <span class=\"n\">eval_mul</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"n\">linear_combination</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">α</span> <span class=\"n\">H'</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">H'</span><span class=\"o\">,</span> <span class=\"n\">eval_sub</span><span class=\"o\">,</span> <span class=\"n\">eval_C</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">eval_pow</span><span class=\"o\">,</span> <span class=\"n\">eval_mul</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"n\">linear_combination</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 420690923,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707497085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thank you very much, I know that a simple calculation or numerical approximation is not sufficient proof. And you can <code>rw</code> with <code>Real.cos_pi_div_three</code>.</p>",
        "id": 420691522,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1707497281
    },
    {
        "content": "<p>To be honest this looks not so bad: even mathematically one has to go through <code>cos (3 * x)</code>, and <code>polyrith</code> did the dirty job.</p>",
        "id": 420691626,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707497303
    },
    {
        "content": "<p>The proofs you found look nice, but my only idea was to use <code>rw</code> until simp can prove it.</p>",
        "id": 420694181,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1707498098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671805\">Ludwig Monnerjahn</span> has marked this topic as resolved.</p>",
        "id": 420694227,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707498118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671805\">Ludwig Monnerjahn</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Eval.20of.20polynomial/near/420694181\">said</a>:</p>\n<blockquote>\n<p>The proofs you found look nice, but my only idea was to use <code>rw</code> until simp can prove it.</p>\n</blockquote>\n<p>The problem with this approach is that moving stuff right/left of the <code>=</code> is always a pain.</p>",
        "id": 420694384,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707498154
    },
    {
        "content": "<p><code>calc</code> is of course useful, but still you have to start somewhere.</p>",
        "id": 420694481,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707498192
    },
    {
        "content": "<p>That is why I ask. I noticed that using this approach is a pain. But I didn't know of a better one.</p>",
        "id": 420695070,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1707498374
    },
    {
        "content": "<p>Unfortunately doing explicit computations is still quite difficult, but the situation is improving!</p>",
        "id": 420695605,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707498549
    },
    {
        "content": "<p>BTW, may I ask what are you trying to do? It seems you are working with the maximal real subfield of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mn>9</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\zeta_9)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. We have quite a lot of stuff regarding cyclotomic fields, and we are very interested in the real subfield.</p>",
        "id": 420697982,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707499418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Eval.20of.20polynomial/near/420681756\">said</a>:</p>\n<blockquote>\n<p>Are you asking \"is there an algorithm where given a random real number expressible using the buttons on your calculator, it checks that it's the root of a given polynomial?\" because my guess is that the answer is \"no way\".</p>\n</blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Tarski%27s_exponential_function_problem\">Relevant open problem</a>. </p>\n<p>If we are just talking trigonometric functions of rational multiples of pi though, those are <a href=\"https://math.stackexchange.com/a/1933276/165144\">always algebraic</a> so in theory, you could write a tactic that decides if a given expression involving some was equal to zero.</p>",
        "id": 420729683,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707511980
    },
    {
        "content": "<p>Seems like a good candidate for the <a href=\"#narrow/stream/113488-general/topic/.22Missing.20Tactics.22.20list\">missing tactics list</a>.</p>",
        "id": 420729800,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707512034
    }
]