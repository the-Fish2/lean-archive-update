[
    {
        "content": "<p>I'm a bit confused about <code>Fin</code> and its subtyping. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.Hermitian</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.Spectrum</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">I₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"o\">],</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">]]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">I₂_Hermitian</span> <span class=\"o\">:</span> <span class=\"n\">Matrix.IsHermitian</span> <span class=\"n\">I₂</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Matrix.IsHermitian.eigenvalues</span> <span class=\"n\">I₂_Hermitian</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Matrix.IsHermitian.eigenvalues</span> <span class=\"n\">I₂_Hermitian</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">trace_norm</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">Matrix.IsHermitian</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"o\">:=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Matrix.IsHermitian.eigenvalues</span> <span class=\"n\">hA</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>The first two <code>#check</code> work as expected, while in the definition <code>trace_norm</code> (a sum of eigenvalues) <code>i: ℕ</code> is considered the incorrect type. Any suggestions on how to do this properly?</p>",
        "id": 418718170,
        "sender_full_name": "Chris Henson",
        "timestamp": 1706561500
    },
    {
        "content": "<p>I would suggest you edit your message so that your code snippets are <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> s, so that people can see the error you're having trouble with</p>",
        "id": 418718476,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706561620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Sum.20of.20eigenvalues.20of.20an.20Hermitian.20matrix/near/418718476\">said</a>:</p>\n<blockquote>\n<p>I would suggest you edit your message so that your code snippets are <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> s, so that people can see the error you're having trouble with</p>\n</blockquote>\n<p>Sorry about that, I edited my answer to include the imports.</p>",
        "id": 418719880,
        "sender_full_name": "Chris Henson",
        "timestamp": 1706562187
    },
    {
        "content": "<p>You just want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Matrix.IsHermitian.eigenvalues</span> <span class=\"n\">hA</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 418720344,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706562392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Sum.20of.20eigenvalues.20of.20an.20Hermitian.20matrix/near/418720344\">said</a>:</p>\n<blockquote>\n<p>You just want:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Matrix.IsHermitian.eigenvalues</span> <span class=\"n\">hA</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Perfect, thank you!</p>",
        "id": 418720526,
        "sender_full_name": "Chris Henson",
        "timestamp": 1706562471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"687698\">@Chris Henson</span> on a separate note, that's not quite the trace norm (unless the Hermitian matrix is positive).</p>",
        "id": 418720931,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706562588
    },
    {
        "content": "<p>In particular, the trace norm is the sum of the singular values (i.e., square roots of the eigenvalues of <code>Aᴴ * A</code>).</p>",
        "id": 418721179,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706562655
    },
    {
        "content": "<p>Yes, good catch. I dropped the root somewhere in the middle of debugging this.</p>",
        "id": 418722034,
        "sender_full_name": "Chris Henson",
        "timestamp": 1706563019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"687698\">Chris Henson</span> has marked this topic as resolved.</p>",
        "id": 418722395,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706563182
    },
    {
        "content": "<p>Note that you should use <code>!![a; b]</code> for matrices, not <code>![![a], ![b]]</code>. Multiplication can do the wrong thing on the latter</p>",
        "id": 418730532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706566574
    }
]