[
    {
        "content": "<p>I'm working through the \"A Lean intro to Logic\" game now. Compared to the two other games available in English (natural number game and Set theory game) it does seem to me like this one is less refined, some analogies are not that helpful yet actual instruction and guidance is lacking imho. I think it'll be more helpful if it's more self-contained and the learning curve is a bit smoother.</p>\n<p>Anyways, I am not that familiar with lambda calculus and trying my best to figure it out as I go along. on the final level of \"party snacks tutorial\", I am asked to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n</code></pre></div>\n<p>I'm not sure how to introduce the negation.</p>\n<p>I imagine the proof will look something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">and_intro</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I'm not sure how to get h1 and h2 in the first place</p>",
        "id": 440678196,
        "sender_full_name": "awefhio",
        "timestamp": 1716688958
    },
    {
        "content": "<p>I'm still stuck on this - would appreciate some pointers.</p>\n<p>I think it's necessary to invoke</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hs</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">R</span>\n<span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div>\n<p>in order to show</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I'm not sure how to link the two together. Any help appreciated</p>",
        "id": 440706124,
        "sender_full_name": "awefhio",
        "timestamp": 1716722231
    },
    {
        "content": "<p>ok, I now understand I can just type it out without proving anything...</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">hR</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">hS</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">hR</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">hNS</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">hR</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n<p>I'm slightly confused as to what leans understands (what's obvious to lean) and what needs to be proven. May it'll come with experience as I understand more, but will also appreciate if someone can give a short explanation or let me know when I can read this up.</p>",
        "id": 440711578,
        "sender_full_name": "awefhio",
        "timestamp": 1716727998
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 440733114,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1716750394
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 440733118,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1716750401
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 440733138,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1716750435
    },
    {
        "content": "<p>Sorry, I hadn't noticed the second part where you managed to find the answer. You can take a look at <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> for more explanations</p>",
        "id": 440733220,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1716750531
    },
    {
        "content": "<p>But essentially the answer there is pretty much \"because that's how the proofs of those two connectives (conjunction and implication) are <em>defined</em> to be\"</p>",
        "id": 440733269,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1716750595
    },
    {
        "content": "<p>I'm on the final levels and I must be missing something blatantly obvious, but I have no idea how to proceed from this point</p>\n<p><a href=\"/user_uploads/3121/zAkniHKv4KLTDWAsqgkeWDlh/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/zAkniHKv4KLTDWAsqgkeWDlh/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/zAkniHKv4KLTDWAsqgkeWDlh/image.png\"></a></div><p>using</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">exfalso</span>\n<span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">h</span>\n</code></pre></div>\n<p>seems to lead to nowhere, but can't figure out how to simplify the expression otherwise given the restricted tactics.</p>",
        "id": 440737963,
        "sender_full_name": "awefhio",
        "timestamp": 1716755255
    },
    {
        "content": "<p>The basic metatheorem it's trying to demonstrate is that if R and S are equivalent than any formula involving R is equivalent to one with S</p>",
        "id": 440738365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716755653
    },
    {
        "content": "<p>In this case I suggest you try to prove <code>P /\\ Q /\\ !S</code> instead of using <code>constructor</code></p>",
        "id": 440738379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716755683
    },
    {
        "content": "<p>oh, I missed that you can't use <code>have</code> either. Well you still want to prove <code>P /\\ Q /\\ !S</code> but you'll have to copy-paste the proof for the other branches</p>",
        "id": 440738805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716756102
    },
    {
        "content": "<p>do you mind elaborating on what do you mean by \"copy-paste the proof for the other branches\"? I could not think of anything that I can use \"apply\" on and I don't have a way to simplify h</p>",
        "id": 440739510,
        "sender_full_name": "awefhio",
        "timestamp": 1716756842
    },
    {
        "content": "<p>Are you allowed <code>refine</code>?</p>",
        "id": 440739788,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716757137
    },
    {
        "content": "<p>I'm not actually sure how to use <code>And.fst</code> without <code>exact</code>, <code>have</code>, <code>apply</code> or <code>refine</code></p>",
        "id": 440739811,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716757171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/lean.20intro.20to.20logic.20game/near/440739788\">said</a>:</p>\n<blockquote>\n<p>Are you allowed <code>refine</code>?</p>\n</blockquote>\n<p>no, only those listed on the right</p>",
        "id": 440740030,
        "sender_full_name": "awefhio",
        "timestamp": 1716757339
    },
    {
        "content": "<p><code>apply</code> is available</p>",
        "id": 440740342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716757664
    },
    {
        "content": "<p>you should be able to do <code>apply And.left</code> twice, and then <code>apply h.mp</code> should work</p>",
        "id": 440740555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716757826
    },
    {
        "content": "<p>haha they forgot to restrict usage of <code>modus_ponens</code>, so you can use <code>apply modus_ponens</code> to accomplish the same thing as <code>have</code></p>",
        "id": 440740753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716758028
    },
    {
        "content": "<p>Thanks for the help, but I'm still not able to get through it. I feel like the game needs a bit more polishing and I'll probably post a issue on the github page. I should probably start working through the math in lean book and start doing some proper lean</p>",
        "id": 440744217,
        "sender_full_name": "awefhio",
        "timestamp": 1716761123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"722108\">awefhio</span> has marked this topic as resolved.</p>",
        "id": 440754514,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716770744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"722108\">awefhio</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20lean.20intro.20to.20logic.20game/near/440744217\">said</a>:</p>\n<blockquote>\n<p>, but I'm still not able to get through it. I</p>\n</blockquote>\n<p>Here's the github repo: <a href=\"https://github.com/Trequetrum/lean4game-logic\">A Lean Intro to Logic</a> and I'm sure <span class=\"user-mention\" data-user-id=\"664276\">@Mark Fischer</span> would be happy to take feedback to further polish their game.</p>",
        "id": 440812901,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1716801797
    },
    {
        "content": "<p>(<a href=\"https://github.com/Trequetrum/lean4game-logic/issues/7\">github issue</a>)</p>",
        "id": 440822086,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1716804744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"722108\">awefhio</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20lean.20intro.20to.20logic.20game/near/440678196\">said</a>:</p>\n<blockquote>\n<p>I'm working through the \"A Lean intro to Logic\" game now. Compared to the two other games available in English (natural number game and Set theory game) it does seem to me like this one is less refined, some analogies are not that helpful yet actual instruction and guidance is lacking imho. I think it'll be more helpful if it's more self-contained and the learning curve is a bit smoother.</p>\n<p>Anyways, I am not that familiar with lambda calculus and trying my best to figure it out as I go along. on the final level of \"party snacks tutorial\", I am asked to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n</code></pre></div>\n<p>I'm not sure how to introduce the negation.</p>\n<p>I imagine the proof will look something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">and_intro</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I'm not sure how to get h1 and h2 in the first place</p>\n</blockquote>\n<p>A lean intro to logic is definitely less refined/polished than it could be. The target audience was my cousin and few of his friends (Grade 11/12 high school students). So a lot of what's there is based on watching where they struggled and balancing the difficultly that way.</p>\n<p>I do see that you've found a solution to this level, but you asked for some clarification on how lean 4 knows that what you typed out is actually evidence for the goal.</p>\n<p>The pretty common solution I see to this level is exactly the structure you provided. I've added in the evidence for h1 and h2.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">and_intro</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In the lingo of the game, <code>r</code>, <code>ns</code>, and <code>s</code> are names you've given to evidence for specific propositions. <br>\nNamely, </p>\n<ul>\n<li><code>r</code> is evidence for <code>R</code></li>\n<li><code>s</code> is evidence for <code>S</code></li>\n<li><code>ns</code> is evidence for <code>¬S</code></li>\n</ul>\n<p>You can actually write this out fully when you're creating the expression. That would look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">and_intro</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>After which you have enough information on the righthand side of the <code>:=</code> for Lean to be able to infer what proposition <code>h1</code> and <code>h2</code> must be evidence for. So the following works too.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">and_intro</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This should start to let you see why the answer you later discovered: </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">hR</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">and_intro</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">hS</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">hR</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">hNS</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">hR</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>works as evidence.</p>\n<ul>\n<li><code>h1 r</code> is evidence that <code>S → R</code>. But <code>λ hS =&gt; hR</code> is also evidence for <code>S → R</code></li>\n<li><code>h2 r</code> is evidence that <code>¬S → R</code>. But <code>λ hNS =&gt; hR</code> is also evidence for <code>¬S → R</code></li>\n</ul>\n<p>So you can that these align:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\">  </span><span class=\"bp\">↦</span><span class=\"w\">  </span><span class=\"n\">and_intro</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\">      </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\">       </span><span class=\"o\">)</span>\n<span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">hR</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">and_intro</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">hS</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">hR</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">hNS</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">hR</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It might be worth trying to explain what information Lean can infer from context a bit better, though I think the game already suffers from/ struggles with front-loading information a bit too heavily.</p>\n<p>I hope that gives a little extra insight into what was happening in that level.</p>",
        "id": 440874589,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1716822652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"722108\">awefhio</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20lean.20intro.20to.20logic.20game/near/440744217\">said</a>:</p>\n<blockquote>\n<p>Thanks for the help, but I'm still not able to get through it. I feel like the game needs a bit more polishing</p>\n</blockquote>\n<p>I'm not completely sure if the redux levels belong in the game, as such, I haven't spent too much time polishing them up (Currently they're just a 1-to-1 copy of the tutorial worlds). I've seen the redux levels build intuition around how tactics behave, which I think is helpful if you plan to get into proper Lean after playing the games. Viewed as just a puzzle game though, the redux levels don't seem to fit in at all.</p>",
        "id": 440877966,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1716823925
    }
]