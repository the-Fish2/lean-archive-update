[
    {
        "content": "<p>Hi,</p>\n<p>Please consider this insertion sort function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isort</span> <span class=\"o\">[</span><span class=\"n\">Ord</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span>\n    <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">xs.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"n\">for</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n            <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">k</span>\n            <span class=\"k\">match</span> <span class=\"n\">Ord.compare</span> <span class=\"o\">(</span><span class=\"n\">xs.get</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">xs.get</span><span class=\"bp\">!</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n            <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">break</span>\n            <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">gt</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">xs.swap</span><span class=\"bp\">!</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"n\">pure</span> <span class=\"n\">xs</span>\n</code></pre></div>\n<p>I would like to prove that the array indices are within range:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isort2</span> <span class=\"o\">[</span><span class=\"n\">Ord</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span>\n    <span class=\"n\">for</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">xs.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"n\">for</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n            <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">k</span>\n\n            <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.size</span>     <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">i</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">h₁.upper</span>\n            <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.size</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">j</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h₂</span>\n\n            <span class=\"k\">match</span> <span class=\"n\">Ord.compare</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"k\">with</span>\n            <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">break</span>\n            <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">gt</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span> <span class=\"c\">/-</span><span class=\"cm\"> xs -/</span> <span class=\"o\">:=</span> <span class=\"n\">xs.swap</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">⟩</span>\n    <span class=\"n\">pure</span> <span class=\"n\">xs</span>\n</code></pre></div>\n<p>The problem is that <code>xs := xs.swap ⟨j, h₂⟩ ⟨j - 1, h₃⟩</code> does not work with <code>h₁</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">i</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Membership.mem.upper</span> <span class=\"n\">h₁</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Membership.mem.upper</span> <span class=\"n\">h₁</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">col</span><span class=\"bp\">✝¹.</span><span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I sort of understand that because Lean can not know that the \"updated\" <code>xs</code> has the same size as the previous one. I think I need to prove that the size of <code>xs</code> does not change by <code>Array.swap</code>, however I do not know how to refer to the arrays involved. The context contains generated identifiers, e.g. <code>xs✝</code>. Any advice how to attack this problem would be much appreciated. Thanks!</p>",
        "id": 421470497,
        "sender_full_name": "65c8b89a",
        "timestamp": 1707924567
    },
    {
        "content": "<p>This is indeed quite ugly, unfortunately. It might be easier if we had a type for sized arrays with an API that preserves the size by construction. You <em>can</em> work around it by passing a subtype around; not sure if I would recommend it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isort2</span> <span class=\"o\">[</span><span class=\"n\">Ord</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">xs.size</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">xs.size</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">for</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"n\">for</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n            <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">k</span>\n\n            <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.1.size</span> <span class=\"o\">:=</span> <span class=\"n\">xs.2.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">i</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">h₁.upper</span>\n            <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.1.size</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">j</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h₂</span>\n\n            <span class=\"k\">match</span> <span class=\"n\">Ord.compare</span> <span class=\"n\">xs.1</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">xs.1</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"k\">with</span>\n            <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">break</span>\n            <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">gt</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">xs.1.swap</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">xs.2</span><span class=\"o\">]⟩</span>\n    <span class=\"n\">pure</span> <span class=\"n\">xs</span>\n</code></pre></div>",
        "id": 421496075,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707931689
    },
    {
        "content": "<p>This way you even have a chance to prove that your <code>isort2</code> is size-preserving:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isort2_size</span> <span class=\"o\">[</span><span class=\"n\">Ord</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">isort2</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"n\">xs.size</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">@</span><span class=\"n\">Subtype.property</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ys.size</span> <span class=\"bp\">=</span> <span class=\"n\">xs.size</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>(because unfortunately proving things about <code>for … in …</code> is currently rather cumbersome, and you probably have a better time using a recursive function.)</p>",
        "id": 421497783,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707932288
    },
    {
        "content": "<p>Many thanks Joachim! While a bit involved I like the subtype approach as it looks like it could help me in similar circumstances.</p>",
        "id": 421500512,
        "sender_full_name": "65c8b89a",
        "timestamp": 1707933174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"691637\">65c8b89a</span> has marked this topic as resolved.</p>",
        "id": 421500608,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707933209
    }
]