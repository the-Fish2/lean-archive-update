[
    {
        "content": "<p>My proof so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">irrationalSqrt6</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Irrational</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">√</span><span class=\"mi\">6</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">:(</span><span class=\"bp\">√</span><span class=\"mi\">6</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">lt_sqrt</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"n\">norm_num</span><span class=\"bp\">;</span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">sqrt_lt</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"n\">norm_num</span><span class=\"bp\">;</span><span class=\"n\">simp</span><span class=\"bp\">;</span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">Not</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Int</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"n\">simpa</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">irrational_nrt_of_notint_nrt</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">g</span>\n</code></pre></div>\n<p>I'm using irrational_nrt_of_notint_nrt  but it needs to know that √6 is not an integer. So I've proved it lies between 2 and 3. But there I'm stuck.</p>\n<p>I think I really need to find a better way of searching for tactics. What are the best strategies for looking for tactics? There's so many!</p>",
        "id": 444598093,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718333275
    },
    {
        "content": "<p>We're working on getting a list of tactics into the mathlib docs, but for now you can use the <code>#help tactic</code> command.</p>\n<p>There's a 9-month-old copy of that output here: <a href=\"https://github.com/haruhisa-enomoto/mathlib4-all-tactics/blob/main/all-tactics.md\">https://github.com/haruhisa-enomoto/mathlib4-all-tactics/blob/main/all-tactics.md</a></p>",
        "id": 444599388,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718333892
    },
    {
        "content": "<p>Here are some tricks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">irrationalSqrt6</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Irrational</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">√</span><span class=\"mi\">6</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">:(</span><span class=\"bp\">√</span><span class=\"mi\">6</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">convert_to</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"mi\">6</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">gcongr</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">norm_num</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">convert_to</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"mi\">9</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">gcongr</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">norm_num</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"bp\">¬</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Int</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">push_neg</span>\n<span class=\"w\">    </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span>\n<span class=\"w\">    </span><span class=\"n\">norm_cast</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span>\n<span class=\"w\">    </span><span class=\"n\">omega</span>\n<span class=\"w\">  </span><span class=\"n\">simpa</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">irrational_nrt_of_notint_nrt</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">g</span>\n</code></pre></div>",
        "id": 444600310,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718334147
    },
    {
        "content": "<p>Thanks. The convert_to didn't seem to work on the <a href=\"https://live.lean-lang.org/#code=import%20Mathlib%0D%0A%0D%0Atheorem%20irrationalSqrt6%20%3A%20Irrational%20(%E2%88%9A6)%20%3A%3D%20by%0D%0A%20%20have%20h%3A(%E2%88%9A6)%5E2%20%3D%206%20%3A%3D%20by%20simp%0D%0A%20%20have%20q%3A%202%20%3C%20%E2%88%9A6%20%3A%3D%20by%20convert_to%20%E2%88%9A4%20%3C%20%E2%88%9A6%3B%20simp%3B%20gcongr%3B%20norm_num%0D%0A%20%20have%20p%3A%20%E2%88%9A6%20%3C%203%20%3A%3Dby%20convert_to%20%E2%88%9A6%20%3C%20%E2%88%9A9%3B%20simp%3B%20gcongr%3B%20norm_num%0D%0A%20%20have%20g%3A%C2%AC%20%E2%88%83%20y%3AInt%2C%20%E2%88%9A6%20%3D%20y%20%3A%3D%20by%0D%0A%20%20%20%20push_neg%0D%0A%20%20%20%20intro%20y%20h%0D%0A%20%20%20%20rw%20%5Bh%5D%20at%20p%20q%0D%0A%20%20%20%20norm_cast%20at%20p%20q%0D%0A%20%20%20%20omega%0D%0A%20%20simpa%20using%20irrational_nrt_of_notint_nrt%202%206%20h%20g\">web version</a> (maybe it's not up to date yet) so I just used my original definitions of  p and q and the rest seemed to work.</p>\n<p>So omega I guess just basically solves integer equations, and in this case it found that there was no solution.</p>",
        "id": 444602381,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718334828
    },
    {
        "content": "<p><code>convert_to</code> does exactly what it's supposed to do in the web version. Instead, it's that I forgot I had my <code>simproc</code> from the other thread still defined, so <code>simp</code> was able to prove the <code>2 = √4</code> goal.</p>",
        "id": 444603838,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718335948
    },
    {
        "content": "<p>Ah <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>. Yeah that simproc is very useful. Hope you will add it to Lean even as just an extra tactic. Could call it sqrt_norm perhaps?</p>",
        "id": 444603892,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718336020
    },
    {
        "content": "<p>I’m maintaining the list of all tactics</p>\n<p><a href=\"https://github.com/Seasawher/mathlib4-tactics\">https://github.com/Seasawher/mathlib4-tactics</a></p>",
        "id": 447154422,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719390252
    }
]