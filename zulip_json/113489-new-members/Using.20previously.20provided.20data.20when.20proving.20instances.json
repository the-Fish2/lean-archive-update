[
    {
        "content": "<p>I have this class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ProjectiveGeometry</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">l1</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n  <span class=\"n\">l2</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span>\n  <span class=\"n\">l3</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">b</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>And I am proving that an object I constructed is an instance of this class. I proved <code>l1</code> and <code>l2</code>, and when proving <code>l3</code>, I need <code>l1</code> and <code>l2</code>. Can I access the proofs of them? What are the names?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">⟨</span>\n<span class=\"kd\">by</span>\n<span class=\"c1\">-- proof of l1</span>\n<span class=\"n\">done</span><span class=\"o\">,</span>\n\n<span class=\"kd\">by</span>\n<span class=\"c1\">-- proof of l2</span>\n<span class=\"n\">done</span><span class=\"o\">,</span>\n\n<span class=\"kd\">by</span>\n<span class=\"c1\">-- I want to access the proof of l1 and l2 here!</span>\n<span class=\"n\">done</span>\n<span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 437597176,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715154696
    },
    {
        "content": "<p>Maybe I should note, the code itself is not actually important. I just wanted to explain the form of the context.</p>",
        "id": 437599028,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715155440
    },
    {
        "content": "<p>Alright, removed the unessential parts.</p>",
        "id": 437599210,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715155465
    },
    {
        "content": "<p>Can you make this a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? You second code block is missing the <code>instance</code> keyword etc needed to make it valid.</p>",
        "id": 437623659,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715164986
    },
    {
        "content": "<p>It got a bit longer but I did my best to shorten it. I also annotated the parts I am interested in.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Subspace</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ProjectiveGeometry</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">l1</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n  <span class=\"n\">l2</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span>\n  <span class=\"n\">l3</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">b</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">star</span>\n  <span class=\"o\">[</span><span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span> <span class=\"n\">ell</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Subspace</span>\n  <span class=\"o\">(</span><span class=\"n\">PG</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span>\n  <span class=\"n\">closure</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">⊆</span> <span class=\"n\">E</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ProjectiveSubgeometry</span>\n  <span class=\"o\">(</span><span class=\"n\">PG</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span> <span class=\"n\">ell</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ell'</span> <span class=\"o\">:</span> <span class=\"n\">G'</span> <span class=\"bp\">→</span> <span class=\"n\">G'</span> <span class=\"bp\">→</span> <span class=\"n\">G'</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">restriction</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G'</span><span class=\"o\">,</span> <span class=\"n\">ell'</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n  <span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G'</span> <span class=\"n\">ell'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">l1_l2_eq_imp_l3</span>\n  <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">abcdp_deq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n               <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pab_col</span> <span class=\"o\">:</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pcd_col</span> <span class=\"o\">:</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span>\n  <span class=\"o\">[</span><span class=\"n\">PG</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span> <span class=\"n\">ell</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subspace</span> <span class=\"n\">PG</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">ProjectiveSubgeometry</span> <span class=\"n\">PG</span> <span class=\"n\">S.E</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">S.E.restrict</span> <span class=\"o\">(</span><span class=\"n\">S.E.restrict</span> <span class=\"o\">(</span><span class=\"n\">S.E.restrict</span> <span class=\"n\">ell</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">done</span><span class=\"o\">,</span>\n\n  <span class=\"o\">⟨</span>\n  <span class=\"kd\">by</span> <span class=\"c1\">-- I prove l1 here.</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">restrict</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">apply</span> <span class=\"n\">PG.l1</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">done</span><span class=\"o\">,</span>\n\n  <span class=\"kd\">by</span> <span class=\"c1\">-- I prove l2 here.</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">restrict</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">apq_col</span> <span class=\"n\">bpq_col</span> <span class=\"n\">pq_neq</span>\n  <span class=\"n\">apply</span> <span class=\"n\">PG.l2</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">apq_col</span> <span class=\"n\">bpq_col</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ppqq_eq</span>\n  <span class=\"k\">have</span> <span class=\"n\">pq_eq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">SetCoe.ext</span> <span class=\"n\">ppqq_eq</span> <span class=\"o\">}</span>\n  <span class=\"n\">contradiction</span>\n  <span class=\"n\">done</span><span class=\"o\">,</span>\n\n  <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">restrict</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span> <span class=\"n\">pab_col</span> <span class=\"n\">pcd_col</span>\n  <span class=\"k\">have</span> <span class=\"n\">q_ex</span> <span class=\"o\">:</span>\n      <span class=\"bp\">∃</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">PG.l3</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span> <span class=\"n\">pab_col</span> <span class=\"n\">pcd_col</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">deq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n                <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"k\">let</span> <span class=\"n\">ell'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">S.E.restrict</span>\n                            <span class=\"o\">(</span><span class=\"n\">S.E.restrict</span>\n                            <span class=\"o\">(</span><span class=\"n\">S.E.restrict</span> <span class=\"n\">ell</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n    <span class=\"n\">apply</span> <span class=\"n\">l1_l2_eq_imp_l3</span> <span class=\"n\">ell'</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">deq</span> <span class=\"n\">pab_col</span> <span class=\"n\">pcd_col</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- Here I need l1 I proved above.</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- Here I need l2 I proved above.</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- This sorry is irrelevant.</span>\n  <span class=\"n\">done</span>\n  <span class=\"o\">⟩</span>\n  <span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Subspace</span>\n</code></pre></div>",
        "id": 437633802,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715169149
    },
    {
        "content": "<blockquote>\n<p>I proved <code>l1</code> and <code>l2</code>, and when proving <code>l3</code>, I need <code>l1</code> and <code>l2</code>. Can I access the proofs of them? What are the names?</p>\n</blockquote>\n<p>You have give names to the proofs using <code>have</code>.  For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">proof_of_l1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"bp\">...</span>\n\n<span class=\"k\">have</span> <span class=\"n\">proof_of_l2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"bp\">...</span>\n\n<span class=\"k\">have</span> <span class=\"n\">proof_of_l3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"bp\">...</span>\n  <span class=\"c1\">-- here you can use proof_of_l1 and proof_of_l2</span>\n</code></pre></div>",
        "id": 437713035,
        "sender_full_name": "Ted Hwa",
        "timestamp": 1715195170
    },
    {
        "content": "<p>I am having a bit of trouble understanding the context of your suggestion. Do I write these between \"⟨\" and \"⟩\"? For example when I try to convert my proof of <code>l1</code> to a <code>have</code> statement, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n  <span class=\"o\">⟨</span>\n  <span class=\"k\">have</span> <span class=\"n\">proof_of_l1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">restrict</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">apply</span> <span class=\"n\">PG.l1</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">done</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">constructor</span> <span class=\"o\">⟨</span><span class=\"bp\">...</span><span class=\"o\">⟩,</span> <span class=\"n\">insufficient</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">arguments</span><span class=\"o\">,</span> <span class=\"n\">constructs</span> <span class=\"bp\">'</span><span class=\"n\">Basic.ProjectiveGeometry.mk'</span> <span class=\"n\">has</span> <span class=\"bp\">#</span><span class=\"mi\">3</span> <span class=\"n\">explicit</span> <span class=\"n\">fields</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">only</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">provided</span>\n</code></pre></div>\n<p>So I get that the block is no longer recognized as a constructor. Meanwhile I read that I can say <code>where</code> and explicitly provide data, but in that case I couldn't figure out how can I write the inner instance explicitly.</p>\n<p>I was going to try to access <code>ell'</code> anyways, and I tried that, but that gives <code>unknown identifier 'ell''</code>, so the outer instance's constructors are not passed to the scope of the inner one? I hope I make sense, I sensed that my goal didn't get to you because maybe I couldn't provide a simpler example. Here is my try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Structures</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ProjectiveGeometry</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">l1</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n  <span class=\"n\">l2</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span>\n  <span class=\"n\">l3</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">b</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">star</span>\n  <span class=\"o\">[</span><span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span> <span class=\"n\">ell</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Subspace</span>\n  <span class=\"o\">(</span><span class=\"n\">PG</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span>\n  <span class=\"n\">closure</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">⊆</span> <span class=\"n\">E</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ProjectiveSubgeometry</span>\n  <span class=\"o\">(</span><span class=\"n\">PG</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span> <span class=\"n\">ell</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ell'</span> <span class=\"o\">:</span> <span class=\"n\">G'</span> <span class=\"bp\">→</span> <span class=\"n\">G'</span> <span class=\"bp\">→</span> <span class=\"n\">G'</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">restriction</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G'</span><span class=\"o\">,</span> <span class=\"n\">ell'</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n  <span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G'</span> <span class=\"n\">ell'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">l1_l2_eq_imp_l3</span>\n  <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">abcdp_deq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n               <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pab_col</span> <span class=\"o\">:</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pcd_col</span> <span class=\"o\">:</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span>\n  <span class=\"o\">[</span><span class=\"n\">PG</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span> <span class=\"n\">ell</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subspace</span> <span class=\"n\">PG</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">ProjectiveSubgeometry</span> <span class=\"n\">PG</span> <span class=\"n\">S.E</span> <span class=\"n\">where</span>\n  <span class=\"n\">ell'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">S.E.restrict</span> <span class=\"o\">(</span><span class=\"n\">S.E.restrict</span> <span class=\"o\">(</span><span class=\"n\">S.E.restrict</span> <span class=\"n\">ell</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n\n  <span class=\"c1\">-- restriction is trivial.</span>\n  <span class=\"n\">restriction</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">done</span>\n\n  <span class=\"n\">inst</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">restrict</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">apply</span> <span class=\"n\">PG.l1</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">done</span><span class=\"o\">,</span>\n\n  <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">restrict</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">apq_col</span> <span class=\"n\">bpq_col</span> <span class=\"n\">pq_neq</span>\n  <span class=\"n\">apply</span> <span class=\"n\">PG.l2</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">apq_col</span> <span class=\"n\">bpq_col</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ppqq_eq</span>\n  <span class=\"k\">have</span> <span class=\"n\">pq_eq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">SetCoe.ext</span> <span class=\"n\">ppqq_eq</span> <span class=\"o\">}</span>\n  <span class=\"n\">contradiction</span>\n  <span class=\"n\">done</span><span class=\"o\">,</span>\n\n  <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">restrict</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span> <span class=\"n\">pab_col</span> <span class=\"n\">pcd_col</span>\n  <span class=\"k\">have</span> <span class=\"n\">q_ex</span> <span class=\"o\">:</span>\n      <span class=\"bp\">∃</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">PG.l3</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span> <span class=\"n\">pab_col</span> <span class=\"n\">pcd_col</span> <span class=\"o\">}</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">deq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n                <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"c1\">-- let ell' := fun a b c =&gt; S.E.restrict</span>\n    <span class=\"c1\">--                         (S.E.restrict</span>\n    <span class=\"c1\">--                         (S.E.restrict ell a) b) c</span>\n    <span class=\"n\">apply</span> <span class=\"n\">l1_l2_eq_imp_l3</span> <span class=\"n\">ell'</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">deq</span> <span class=\"n\">pab_col</span> <span class=\"n\">pcd_col</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">done</span>\n  <span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Structures</span>\n</code></pre></div>",
        "id": 437829926,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715265341
    },
    {
        "content": "<p>See that out of desperation, I was redefining <code>ell'</code> by copy pasting. To try to access the previous constructor now I explicitly have, I commented that redefinition in my recent try. It's not in the scope.</p>",
        "id": 437830696,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715265633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"715872\">@Ted Hwa</span> Am I missing something here? Is this not possible or maybe not reasonable to have as a feature?</p>",
        "id": 438103200,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715427291
    },
    {
        "content": "<p>I mean, do I have to prove these properties <code>l1</code> and <code>l2</code> outside of the instance construction?</p>",
        "id": 438103232,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715427351
    },
    {
        "content": "<p>Your issues might be symptomatic of the fact that you are missing a custom constructor for <code>ProjectiveGeometry</code></p>",
        "id": 438103571,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715427791
    },
    {
        "content": "<p>Oh shoot, I am importing <code>Basic</code> above, it's my own file. I am so sorry. Let me fix that so it runs.</p>",
        "id": 438103736,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715427976
    },
    {
        "content": "<p>Alright, now it errors as I explained. Sorry again, I thought I checked then.</p>",
        "id": 438103942,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715428164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I don't think I understand what you mean. The <code>ProjectiveGeometry</code> class was not in the code above, I missed it because of my import. How does it look now?</p>",
        "id": 438104371,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715428631
    },
    {
        "content": "<p>Ah, I partly based myself off your original message</p>",
        "id": 438104395,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715428661
    },
    {
        "content": "<p>I see, no problem. I think my problem is now best visible in the most recent snippet above.</p>",
        "id": 438104490,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715428765
    },
    {
        "content": "<p>What I am saying is that you might be able to define a function <code>def ProjectiveGeometry.ofSomething ... : ProjectiveGeometry G ell</code> which takes care for you of feeding <code>l1</code> and <code>l2</code> into <code>l3</code></p>",
        "id": 438104634,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715428872
    },
    {
        "content": "<p>I guess I got it. Alright, I will try that.</p>",
        "id": 438105733,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715429988
    },
    {
        "content": "<p>The hope of course is that <code>ProjectiveGeometry.ofSomething</code> has a nice mathematical interpretation. I can't guarantee this will be the case</p>",
        "id": 438105901,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715430163
    }
]