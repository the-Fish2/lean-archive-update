[
    {
        "content": "<p>I want to make an iterative loop that traverses over each row of a matrix (each sub-array of a 2D array). <code>for .. do</code> with<code>List.range</code> keeps giving the error of <code>invalid 'do' notation, expected type is not a monad application  -- (return type of loop)</code>. What should I do here?<br>\nHere's the loop I want to make:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_rrf_row</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">ri</span> <span class=\"o\">:=</span> <span class=\"n\">List.ofFn</span> <span class=\"n\">i</span>\n  <span class=\"k\">let</span> <span class=\"n\">should_0</span> <span class=\"o\">:=</span> <span class=\"n\">ri.take</span> <span class=\"o\">(</span><span class=\"n\">List.indexOf</span> <span class=\"mi\">1</span> <span class=\"n\">ri</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">should_0</span> <span class=\"bp\">=</span> <span class=\"n\">List.replicate</span> <span class=\"o\">(</span><span class=\"n\">List.indexOf</span> <span class=\"mi\">1</span> <span class=\"n\">ri</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">True</span>\n  <span class=\"k\">else</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isrrfMat</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">bl</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"k\">do</span>         <span class=\"c1\">--Not working</span>\n    <span class=\"k\">if</span> <span class=\"n\">is_rrf_row</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">bl.insert</span> <span class=\"mi\">1</span>\n    <span class=\"k\">else</span> <span class=\"mi\">0</span>\n  <span class=\"k\">if</span> <span class=\"n\">bl.prod</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">True</span>\n  <span class=\"k\">else</span> <span class=\"n\">False</span>\n</code></pre></div>\n<p>Basically I want to check whether all rows of a matrix satisfy is_rrf_row</p>",
        "id": 438099651,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715422842
    },
    {
        "content": "<p>Try adding <code>Id.run do</code> after the first <code>:=</code></p>",
        "id": 438100922,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715424463
    },
    {
        "content": "<p>It's still highlighting the return type as the problem (<code>don't know how to synthesize implicit argument</code>). Giving <code>Prop</code> as an argument highlights the <code>let</code> below and says <code>expected command</code>.<br>\nI thought the return type was the problem, so I removed it. This is where I have reached now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isrrfMat</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">bl</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">List.finRange</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">is_rrf_row</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">bl.insert</span> <span class=\"mi\">1</span>\n    <span class=\"k\">else</span> <span class=\"n\">bl.insert</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">isrrfMat</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">;</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"bp\">;</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,(</span><span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"n\">Rat</span><span class=\"o\">)]</span>     <span class=\"c1\">--Result: [PUnit.unit]</span>\n</code></pre></div>",
        "id": 438103056,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715427120
    },
    {
        "content": "<p>Does anyone have a fix for the above code, or another way to do the loop?</p>",
        "id": 438115800,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715440775
    },
    {
        "content": "<p>Here is how the code can be modified to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_rrf_row</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">ri</span> <span class=\"o\">:=</span> <span class=\"n\">List.ofFn</span> <span class=\"n\">i</span>\n  <span class=\"k\">let</span> <span class=\"n\">should_0</span> <span class=\"o\">:=</span> <span class=\"n\">ri.take</span> <span class=\"o\">(</span><span class=\"n\">List.indexOf</span> <span class=\"mi\">1</span> <span class=\"n\">ri</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">should_0</span> <span class=\"bp\">=</span> <span class=\"n\">List.replicate</span> <span class=\"o\">(</span><span class=\"n\">List.indexOf</span> <span class=\"mi\">1</span> <span class=\"n\">ri</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">True</span>\n  <span class=\"k\">else</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isrrfMat</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span> <span class=\"c1\">-- to allow imperative syntax in Lean</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">bl</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"c1\">-- the list must be marked mutable</span>\n  <span class=\"n\">for</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">List.range</span> <span class=\"n\">r</span> <span class=\"k\">do</span> <span class=\"c1\">-- `h` is the proof that `i ∈ List.range r`</span>\n    <span class=\"k\">if</span> <span class=\"n\">is_rrf_row</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">List.mem_range.mp</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"k\">then</span>  <span class=\"c1\">-- `i` needs to be converted to type `Fin r`</span>\n      <span class=\"n\">bl</span> <span class=\"o\">:=</span> <span class=\"n\">bl.insert</span> <span class=\"mi\">1</span> <span class=\"c1\">-- `bl` is assigned the new value</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">bl</span> <span class=\"o\">:=</span> <span class=\"n\">bl.insert</span> <span class=\"mi\">0</span>\n  <span class=\"k\">if</span> <span class=\"n\">bl.prod</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">True</span>\n  <span class=\"k\">else</span> <span class=\"n\">False</span>\n</code></pre></div>",
        "id": 438134863,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1715461913
    },
    {
        "content": "<p>I see, thanks!</p>",
        "id": 438150971,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715481872
    }
]