[
    {
        "content": "<p>Hi. In MIL chapter 6 I am trying to add notation * to the Group₁, but it fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Ex1</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Group₁</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"n\">mul_left_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">one</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"c1\">-- for proving the rest cond</span>\n  <span class=\"c1\">-- if use mul_left_one, then</span>\n  <span class=\"c1\">-- must use left_inv rather than right_inv</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">one</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"o\">(</span><span class=\"n\">Group₁</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"n\">where</span>\n<span class=\"n\">coe</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Group₁</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n<span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">G.mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Group₁</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"c1\">-- error: failed to synthesize instance</span>\n<span class=\"c1\">-- HMul α α ?m.27047</span>\n<span class=\"c1\">-- #check a * b</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Group₁</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">self_mul_self_eq_self_imply_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">G.mul</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">G.one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">G.mul</span> <span class=\"o\">(</span><span class=\"n\">G.inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G.mul</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">G.one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">G.mul_left_inv</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">G.mul</span> <span class=\"o\">(</span><span class=\"n\">G.inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G.mul</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">G.mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">G.mul_left_inv</span><span class=\"o\">,</span> <span class=\"n\">G.mul_left_one</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_right_inv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">G.mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">G.inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">G.one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">G.mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">G.inv</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">G.mul</span> <span class=\"n\">b</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">]</span>\n    <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">lhs</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">G.mul_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">arg</span> <span class=\"mi\">3</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">G.mul_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">G.mul_left_inv</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">G.mul_left_one</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">G.self_mul_self_eq_self_imply_one</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_right_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">G.mul</span> <span class=\"n\">a</span> <span class=\"n\">G.one</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span> <span class=\"n\">G.mul</span> <span class=\"o\">(</span><span class=\"n\">G.mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">G.inv</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">a</span>\n            <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">G.mul</span> <span class=\"n\">G.one</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">G.mul_right_inv</span><span class=\"o\">]</span>\n            <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">G.mul_left_one</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span> <span class=\"n\">G.mul</span> <span class=\"o\">(</span><span class=\"n\">G.mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">G.inv</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">a</span>\n            <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">G.mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">G.mul</span> <span class=\"o\">(</span><span class=\"n\">G.inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">G.mul_assoc</span><span class=\"o\">]</span>\n            <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">G.mul</span> <span class=\"n\">a</span> <span class=\"n\">G.one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">G.mul_left_inv</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span>\n<span class=\"kd\">end</span> <span class=\"n\">Group₁</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Ex1</span>\n</code></pre></div>",
        "id": 425340605,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709827306
    },
    {
        "content": "<p>any reason for the error?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- error: failed to synthesize instance</span>\n<span class=\"c1\">-- HMul α α ?m.27047</span>\n<span class=\"c1\">-- #check a * b</span>\n</code></pre></div>",
        "id": 425340777,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709827343
    },
    {
        "content": "<p>And by the way how can I move <code>mul_right_one</code> and <code>mul_right_inv</code> into the def of Group₁? It relies on an auxiliary theorem</p>",
        "id": 425341115,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709827439
    },
    {
        "content": "<p>Where did you get that <code>CoeSort</code> idea? This is what is causing all you problems. You are mixing two incompatible approaches to algebraic structures.</p>",
        "id": 425365010,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709834668
    },
    {
        "content": "<p>And using the <code>(a : G) →</code> notation is also really awful in this context.</p>",
        "id": 425365130,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709834715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Failed.20to.20write.20a*b.20on.20Group.E2.82.81/near/425365010\">said</a>:</p>\n<blockquote>\n<p>Where did you get that <code>CoeSort</code> idea? This is what is causing all you problems. You are mixing two incompatible approaches to algebraic structures.</p>\n</blockquote>\n<p>I got it from <a href=\"https://lean-lang.org/theorem_proving_in_lean4/type_classes.html\">TPIL chapter 10 type classes</a> 's <code>Semigroup</code> example. I finished TPIL and start reading MIL. Yeah I noticed it seems different implementations between MIL’s Group and TPIL’s Semigroup but cannot tell exactly what the difference is.</p>",
        "id": 425420844,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709857116
    },
    {
        "content": "<p>Those two styles are briefly discussed Chapter 6 of mil. Search for “partially bundled”.</p>",
        "id": 425427320,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709861241
    },
    {
        "content": "<p>OK<span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span> Thank you very much for the helps! And I found that chapter 7 seems relevant too. I will read those and see if I can make this code snippet about notation and a neat definition of group cleaner.<span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 425429896,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709863016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560873\">Coriver Chen</span> has marked this topic as resolved.</p>",
        "id": 425430116,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709863175
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Group₁</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n<span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">G.mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Does that work when <code>Group1</code> is not a class and the brackets are round? How will typeclass inference find <code>G</code>? Isn't that the problem, that <code>Group1</code> isn't a class?</p>",
        "id": 425439479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709868228
    },
    {
        "content": "<p>Yeah it seems problematic to me now. But these two lines doesn’t report error in the Goal panel. I am away from computer for maybe 9-12 hours and hence reading some doc now.</p>",
        "id": 425443214,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709870637
    },
    {
        "content": "<p>Oh I didn’t even noticed that, I was focused on the bundling issue.</p>",
        "id": 425443517,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709870816
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/lFlkQMusZN7J2QfncYVZWjpO/08F0ABAC-BC99-48C3-BE7D-76EC3BFC8BFC.jpg\">08F0ABAC-BC99-48C3-BE7D-76EC3BFC8BFC.jpg</a> By the way I am trying to do this exercise in Rotman’s Advanced Modern Algebra while reading MIL chapter 6, that the axioms(/structure) of group can formalize two rules as auxiliary properties<span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lFlkQMusZN7J2QfncYVZWjpO/08F0ABAC-BC99-48C3-BE7D-76EC3BFC8BFC.jpg\" title=\"08F0ABAC-BC99-48C3-BE7D-76EC3BFC8BFC.jpg\"><img src=\"/user_uploads/3121/lFlkQMusZN7J2QfncYVZWjpO/08F0ABAC-BC99-48C3-BE7D-76EC3BFC8BFC.jpg\"></a></div>",
        "id": 425443560,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709870845
    },
    {
        "content": "<p>We have a version of that exercise in mil already, right?</p>",
        "id": 425443678,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709870930
    },
    {
        "content": "<p>Oh then maybe what I should do is just continue reading.<span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 425443728,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709870975
    },
    {
        "content": "<p>I’m not 100% sure, but I think we do.</p>",
        "id": 425444903,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709871739
    },
    {
        "content": "<p>I took a quick look at MIL Section 6.2 which I haven't looked at in detail yet. It contains a detailed tutorial on notations. It seems not containing the exercise I mentioned above. But the def of Group2 is some-kind close to it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Group₂</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">one</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">one</span>\n</code></pre></div>\n<p>Yeah I think it’s quite nice as some beginner-level exercise for both Lean and group theory that showing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Group₂</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">one</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">one</span>\n  <span class=\"n\">mul_right_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 425445693,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709872243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560873\">Coriver Chen</span> has marked this topic as unresolved.</p>",
        "id": 425536490,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709910352
    },
    {
        "content": "<p>Continue reading MIL Section 6.2 now I get the version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Ex3</span>\n<span class=\"kd\">class</span> <span class=\"n\">Group₂</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"n\">mul_left_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">one</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">one</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">hasMulGroup₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group₂</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Group₂.mul</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">hasOneGroup₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group₂</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Group₂.one</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">hasInvGroup₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group₂</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Group₂.inv</span><span class=\"o\">⟩</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Group₂</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">self_mul_self_eq_self_imply_one</span> <span class=\"o\">[</span><span class=\"n\">Group₂</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>  <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_left_inv</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_left_inv</span><span class=\"o\">,</span> <span class=\"n\">mul_left_one</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₁</span>\n\n<span class=\"c1\">-- failed version</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">self_mul_self_eq_self_imply_one'</span> <span class=\"o\">[</span><span class=\"n\">Group₂</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"c1\">-- tactic 'rewrite' failed, did not find instance of the pattern in the target expression</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_left_inv</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"c1\">-- here failed too</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_left_inv</span><span class=\"o\">,</span> <span class=\"n\">mul_left_one</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₁</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Group₂</span>\n<span class=\"kd\">end</span> <span class=\"n\">Ex3</span>\n</code></pre></div>",
        "id": 425536916,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709910492
    },
    {
        "content": "<p>It's very werid to me that the second version failed. It's the same with the first except that I changed a <code>simp</code> to <code>rw</code> for clear failed info.</p>",
        "id": 425537722,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709910739
    },
    {
        "content": "<p>It seems that the second version cannot recognize <code>x⁻¹ * x</code> as <code>mul (inv x) x</code></p>",
        "id": 425537971,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709910842
    },
    {
        "content": "<p>rewrite the failed version in more detailed form now I get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- failed version</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">self_mul_self_eq_self_imply_one'</span> <span class=\"o\">[</span><span class=\"n\">Group₂</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"c1\">-- this does not work</span>\n      <span class=\"c1\">-- rw [mul_left_inv]</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"c1\">-- type mismatch here:</span>\n      <span class=\"c1\">-- mul_assoc x⁻¹ x x</span>\n      <span class=\"c1\">-- has type</span>\n      <span class=\"c1\">-- mul (mul x⁻¹ x) x = mul x⁻¹ (mul x x) : Prop</span>\n      <span class=\"c1\">-- but is expected to have type</span>\n      <span class=\"c1\">-- x⁻¹ * (x * x) = x⁻¹ * x * x : Prop</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h₃</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_left_inv</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_left_one</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₁</span>\n</code></pre></div>",
        "id": 425542904,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709912345
    },
    {
        "content": "<p>Why would <code>mul (mul x⁻¹ x) x = mul x⁻¹ (mul x x)</code> and <code>x⁻¹ * (x * x) = x⁻¹ * x * x</code> be different types?</p>",
        "id": 425543006,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709912390
    },
    {
        "content": "<p>Oh I got a kind of work version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- also work version</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">self_mul_self_eq_self_imply_one'</span> <span class=\"o\">[</span><span class=\"n\">Group₂</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"c1\">-- this does not work</span>\n      <span class=\"c1\">-- rw [mul_left_inv]</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"c1\">-- this does not work</span>\n      <span class=\"c1\">-- rw [mul_assoc]</span>\n      <span class=\"c1\">-- if the type of h₃ omit, it also does not work</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h₃</span><span class=\"o\">]</span>\n      <span class=\"c1\">-- this not work</span>\n      <span class=\"c1\">-- rw [mul_left_inv]</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">mul_left_inv</span> <span class=\"n\">x</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₄</span><span class=\"o\">]</span>\n      <span class=\"c1\">-- this not work</span>\n      <span class=\"c1\">-- rw [mul_left_one]</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">mul_left_one</span> <span class=\"n\">x</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₅</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₁</span>\n</code></pre></div>",
        "id": 425546196,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709913616
    },
    {
        "content": "<p>It seems werid that:</p>\n<ul>\n<li>for this version involved notations, I cannot do <code>rw [mul_left_inv]</code> etc like the version without notations</li>\n<li>for <code>h₃, h₄, h₅</code> I have to explictly write the type down rather than just <code>h₅ :=...</code><br>\nWhy would this happen?</li>\n</ul>",
        "id": 425546783,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709913780
    },
    {
        "content": "<blockquote>\n<p>for this version involved notations, I cannot do rw [mul_left_inv] etc like the version without notations</p>\n</blockquote>\n<p>This is expected behaviour? <code>rw</code> works up to syntactic matching, and whilst <code>mul a b</code> and <code>a * b</code> are definitionally equal, they are not syntactically equal. In production code you need to choose which way to say that mathematical idea, and then all your lemmas should stick to your choice.</p>",
        "id": 425676069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709980810
    },
    {
        "content": "<p>Yeah the topic is post a day ago and is followed by another topic you replied too. From that I think I understand it now<span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span></p>",
        "id": 425677887,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709982632
    },
    {
        "content": "<p>yeah, sorry I answered twice :-)</p>",
        "id": 425699379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710001391
    },
    {
        "content": "<p>No problems at all . It’s also very informative. :D</p>",
        "id": 425701602,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1710003046
    }
]