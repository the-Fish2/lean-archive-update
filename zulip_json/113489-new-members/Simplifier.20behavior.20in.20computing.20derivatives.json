[
    {
        "content": "<p>Hi all,</p>\n<p>I'm poking around a bit with some basic complex analysis, and encountering some behavior which isn't quite mapping in my brain. The comments <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Analysis/Calculus/FDeriv/Basic.lean#L64-L80\">here</a> led me to believe that the following example (inlined from lean live ) would work , but it does not. Can anyone give me any insight as to why not?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--Doesn't work; we have attempted to 'translate' the domain. I guess provable with composition + linear map.</span>\n<span class=\"c1\">--But why doesn't the simplifier know about it?</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span><span class=\"o\">:</span> <span class=\"n\">DifferentiableAt</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">):</span> <span class=\"n\">DifferentiableAt</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">--doesn't work, we get back 'simp made no progress'</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hf</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 410391053,
        "sender_full_name": "Keith Rush",
        "timestamp": 1703827510
    },
    {
        "content": "<p>I don't think you can expect simp to work here because the lemma would need to be of the form <code>DifferentiableAt ℂ (fun t ↦ f (z + t)) y ↔ DifferentiableAt ℂ (fun t ↦ f t) (z + y)</code> and Lean would have a hard time applying this lemma since it would have to \"unify\" the function <code>f</code>, and higher order unification is undecidable.</p>",
        "id": 410400836,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703835357
    },
    {
        "content": "<p>eg <code>fun t ↦ (z + t) ^ 2 + (z + t)</code> is of the form <code>fun t ↦ f (z + t)</code>, but unification won't figure it out unless you tell it to try <code>f := fun x ↦ x ^ 2 + x</code>.</p>",
        "id": 410400978,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703835446
    },
    {
        "content": "<p>I'm not sure I 100% grok, but will chase down what I can--what I get at the moment is effectively that there is a substitution which has to take place, and in the general case it may be difficult (OK, undecidable) to figure out if this substitution is valid or not. E.g. in your example it's clear that this variable rename / substitution is possible, but one can imagine an arbitrary rewrite of the terms which hides this possibility. I suppose this is why \\alpha equivalence is natively supported (IIUC), but nothing else. </p>\n<p>While I chase down my understanding here, perhaps a simpler example can help me on my way. AFAICT the first simp below works but the second doesn't, and it is beyond me at the moment to understand why:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"n\">DifferentiableAt</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"c1\">--doesn't work, simp made no progress</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"n\">DifferentiableAt</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 410459894,
        "sender_full_name": "Keith Rush",
        "timestamp": 1703872319
    },
    {
        "content": "<p>Uh, interesting. What lemmas does the first one use? Maybe we're just missing another one.</p>",
        "id": 410469651,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703877939
    },
    {
        "content": "<p>Using <code>simp?</code> yields for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"n\">DifferentiableAt</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">differentiableAt_id'</span><span class=\"o\">,</span> <span class=\"n\">differentiableAt_const</span><span class=\"o\">,</span> <span class=\"n\">DifferentiableAt.add</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 410471484,
        "sender_full_name": "Keith Rush",
        "timestamp": 1703879063
    },
    {
        "content": "<p>Ah I know. It's because the other one beta reduces. Try <code>simp (config := { beta := false })</code></p>",
        "id": 410472059,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703879501
    },
    {
        "content": "<p>did a direct copy / paste to ensure im not getting the syntax wrong; im still getting <code>simp made no progress</code>. Confirming, this is what you're expecting me to try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"n\">DifferentiableAt</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">beta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">})</span>\n</code></pre></div>",
        "id": 410473075,
        "sender_full_name": "Keith Rush",
        "timestamp": 1703880178
    },
    {
        "content": "<p>Sorry, <code>eta</code>, not <code>beta</code></p>",
        "id": 410473312,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703880320
    },
    {
        "content": "<p>Greek letters hard</p>",
        "id": 410473323,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703880326
    },
    {
        "content": "<p>still nothing with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"n\">DifferentiableAt</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">eta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">})</span>\n</code></pre></div>\n<p>Pulling things  from the suggestions from <code>simp?</code> above, IIUC the following sequence closes the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"n\">DifferentiableAt</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">DifferentiableAt.add</span>\n  <span class=\"n\">apply</span> <span class=\"n\">differentiableAt_const</span>\n  <span class=\"n\">apply</span> <span class=\"n\">differentiableAt_id</span>\n <span class=\"bp\">```</span>\n<span class=\"n\">but</span> <span class=\"n\">im</span> <span class=\"n\">not</span> <span class=\"n\">sure</span> <span class=\"k\">if</span> <span class=\"n\">this</span> <span class=\"n\">is</span> <span class=\"k\">in</span> <span class=\"n\">any</span> <span class=\"n\">way</span> <span class=\"n\">helpful</span> <span class=\"o\">:</span><span class=\"n\">smiley</span><span class=\"o\">:</span>\n</code></pre></div>",
        "id": 410474458,
        "sender_full_name": "Keith Rush",
        "timestamp": 1703881152
    },
    {
        "content": "<p>What does the goal look like after the simp call?</p>",
        "id": 410474648,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703881290
    },
    {
        "content": "<p>identical to before the call:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">DifferentiableAt</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>if it's relevant, I'm on <a href=\"http://live.lean-lang.org\">live.lean-lang.org</a> for this, rather than a local install</p>",
        "id": 410474914,
        "sender_full_name": "Keith Rush",
        "timestamp": 1703881479
    },
    {
        "content": "<p>(also may be worth keeping in mind that i may be doing something _incredibly_ naive and dumb)</p>",
        "id": 410474935,
        "sender_full_name": "Keith Rush",
        "timestamp": 1703881505
    },
    {
        "content": "<p>There are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasDerivAt.comp_const_add#doc\">docs#HasDerivAt.comp_const_add</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasDerivAt.comp_add_const#doc\">docs#HasDerivAt.comp_add_const</a>, which might be helpful.<br>\nOne could perhaps add <code>iff</code> versions; not sure if they would make good <code>simp</code> lemmas, though.</p>",
        "id": 410476032,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703882235
    }
]