[
    {
        "content": "<p>As an <a href=\"https://lean-lang.org/theorem_proving_in_lean4/propositions_and_proofs.html#exercises\">exercise in Lean 4</a> I did this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.intro</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpqr</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">hpqr.elim</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpq</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">hpq.elim</span>\n              <span class=\"n\">Or.inl</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">hq</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">hr</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpqr</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">hpqr.elim</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hqr</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">hqr.elim</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">hq</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hr</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>I wondered if a shorter proof were possible, so I asked Google Bard \"What is the most compact Lean 4 proof of <code>(p ∨ q) ∨ r ↔ p ∨ (q ∨ r)</code>\" and it said</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">or_assoc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- simp made no progress</span>\n</code></pre></div>\n<p>but Lean says \"simp made no progress\".  However, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Logic.html#or_assoc\">there is an <code>or_assoc</code> in Mathlib</a>.  Is there an import that links <code>simp</code> and <code>or_assoc</code> which would make Bard's proof work?</p>",
        "id": 410498972,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1703899619
    },
    {
        "content": "<p><code>by tauto</code> would make it even simpler if that is what you are going for...</p>",
        "id": 410499249,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703899848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"443984\">@Newell Jensen</span> this has a similar problem <code>unknown tactic</code>.  I am missing a crucial import to get the tactics filled up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tauto</span> <span class=\"c1\">-- unknown tactic</span>\n</code></pre></div>",
        "id": 410499374,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1703899982
    },
    {
        "content": "<p>Yes, something like this (you can refine if you don't want to import as much):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n</code></pre></div>",
        "id": 410499473,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703900066
    }
]