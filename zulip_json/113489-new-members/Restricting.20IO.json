[
    {
        "content": "<p>Im looking vor a more concise way to restrict IO effects, i feel like my solution is more verbose than it should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">PrintIO</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span>   <span class=\"c1\">-- sequence of restricted Effects</span>\n<span class=\"bp\">|</span> <span class=\"n\">Print</span><span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">PrintIO</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">PrintIO</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">Return</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">PrintIO</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PrintIO.bind</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">PrintIO</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">PrintIO</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">PrintIO</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">Return</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">next</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">next</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">Print</span> <span class=\"n\">s</span> <span class=\"n\">cont</span><span class=\"o\">,</span> <span class=\"n\">next</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">PrintIO.Print</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">cont</span><span class=\"o\">)</span> <span class=\"n\">next</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">PrintIO</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">Return</span> <span class=\"n\">x</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">PrintIO.bind</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PrintIO.run</span><span class=\"o\">:</span> <span class=\"n\">PrintIO</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">IO</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">PrintIO.Print</span> <span class=\"n\">s</span> <span class=\"n\">next</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span>\n  <span class=\"n\">next.run</span>\n<span class=\"bp\">|</span> <span class=\"n\">Return</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MonadLift</span>  <span class=\"n\">PrintIO</span> <span class=\"n\">IO</span> <span class=\"n\">where</span>\n  <span class=\"n\">monadLift</span> <span class=\"n\">pio</span> <span class=\"o\">:=</span> <span class=\"n\">pio.run</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">print</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">PrintIO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">Print</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Return</span> <span class=\"o\">())</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prog</span><span class=\"o\">:</span> <span class=\"n\">PrintIO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span><span class=\"k\">do</span>   <span class=\"c1\">-- here a \"program\" that may only print</span>\n  <span class=\"n\">print</span> <span class=\"s2\">\"Hello\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Main</span><span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">prog</span>\n</code></pre></div>",
        "id": 425490048,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709893871
    }
]