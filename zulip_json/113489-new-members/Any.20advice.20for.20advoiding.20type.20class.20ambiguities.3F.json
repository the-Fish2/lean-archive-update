[
    {
        "content": "<p>Kia ora :)</p>\n<p>I am trying to recreate some of the algebra hierarchy. I have the following code leading up to the definition of an elementary theorem in Group theory. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Magma are types with a single binary operation.</span>\n<span class=\"kd\">class</span> <span class=\"n\">Magma</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">bop</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span> <span class=\"mi\">70</span> <span class=\"s2\">\" * \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Magma.bop</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Magma</span>\n\n<span class=\"c1\">-- Semirgroups are a Magma whose binary operation is associative.</span>\n<span class=\"kd\">class</span> <span class=\"n\">Semigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Magma</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">bop_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Semigroup</span>\n\n<span class=\"c1\">-- Monoids are Semigroups with an identity.</span>\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroup</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">G</span>\n  <span class=\"n\">id_bop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">id</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Monoid</span>\n\n<span class=\"c1\">-- Groups are Monoids with inverses.</span>\n<span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n  <span class=\"n\">inv_bop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">postfix</span><span class=\"o\">:</span> <span class=\"mi\">100</span> <span class=\"s2\">\" ⁻¹ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Group.inv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Group</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bop_cancel_left</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h</span>\n      <span class=\"k\">calc</span> <span class=\"n\">x</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>        <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">id_bop</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">inv_bop</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bop_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">bop_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>        <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inv_bop</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>             <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">id_bop</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Lean is unhappy with the first line in the calculation. There is a red line underneath <code>id * x </code> and it explains that it doesn't know how to make sense of <code>id</code>. I changed the name of the identity, and I introduced parentheses. But the ambiguity remains. </p>\n<p>Does any one have any advice on how to set up the hierarchy in such a way as to avoid the ambiguities? Thank you!</p>",
        "id": 418559069,
        "sender_full_name": "Robert Culling",
        "timestamp": 1706498197
    },
    {
        "content": "<p>The other ambiguity is that there's already a <code>*</code>. It'd be best if you didn't override the notation and instead made an HMul instance, but if you set a high priority you can override <code>*</code> completely.</p>\n<p>I'm not sure if there's anything you can do for <code>id</code> but rename it, so it doesn't conflict with the identity function. I suppose you could do <code>notation \"id\" =&gt; Monoid.id</code> to make it be syntax.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Magma are types with a single binary operation.</span>\n<span class=\"kd\">class</span> <span class=\"n\">Magma</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">bop</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span><span class=\"s2\">\" * \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Magma.bop</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Magma</span>\n\n<span class=\"c1\">-- Semirgroups are a Magma whose binary operation is associative.</span>\n<span class=\"kd\">class</span> <span class=\"n\">Semigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Magma</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">bop_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Semigroup</span>\n\n<span class=\"c1\">-- Monoids are Semigroups with an identity.</span>\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroup</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">id'</span> <span class=\"o\">:</span> <span class=\"n\">G</span>\n  <span class=\"n\">id_bop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">id'</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Monoid</span>\n\n<span class=\"c1\">-- Groups are Monoids with inverses.</span>\n<span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n  <span class=\"n\">inv_bop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">id'</span>\n\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\" ⁻¹ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Group.inv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Group</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bop_cancel_left</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h</span>\n      <span class=\"k\">calc</span> <span class=\"n\">x</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">id'</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>        <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">id_bop</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">inv_bop</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bop_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">bop_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">id'</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>        <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inv_bop</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>             <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">id_bop</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 418565125,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706503497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  thank you :) Renaming id and renaming the multiplication symbol fixed the errors!</p>\n<p>Is it possible to make Magma.bop an instance of HMul?</p>",
        "id": 418571832,
        "sender_full_name": "Robert Culling",
        "timestamp": 1706509254
    },
    {
        "content": "<p>Given an instance of <code>Magma α</code> you can obtain an instance of <code>HMul α α α</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Magma</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HMul</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">hMul</span> <span class=\"o\">:=</span> <span class=\"n\">Magma.bop</span>\n</code></pre></div>",
        "id": 418679243,
        "sender_full_name": "N Gelwan",
        "timestamp": 1706547092
    }
]