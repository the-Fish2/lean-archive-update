[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">a : ℝ</span>\n<span class=\"cm\">p q : ℚ</span>\n<span class=\"cm\">⊢ sorryAx (Sort ?u.114130) true</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I guess it means \"I don't know what type <code>a ^ p</code> is supposed to have\"? What am I supposed to do?</p>",
        "id": 432762285,
        "sender_full_name": "Iocta",
        "timestamp": 1712859419
    },
    {
        "content": "<p>If you write \"sorry\" as the proof, Lean will say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HPow</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℚ</span> <span class=\"bp\">?</span><span class=\"n\">m.91</span>\n</code></pre></div>\n<p>flagging a problem with the theorem statement. Declaring p and q as reals is a valid fix, but it depends on what you want to do.</p>",
        "id": 432764697,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1712860217
    },
    {
        "content": "<p>To be able to prove it you'll probably have to assume that a is positive, though. See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.rpow_add#doc\">docs#Real.rpow_add</a></p>",
        "id": 432765299,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1712860478
    },
    {
        "content": "<p>So I can't even state the <code>ℝ ℚ</code> version of this?</p>",
        "id": 432767579,
        "sender_full_name": "Iocta",
        "timestamp": 1712861408
    },
    {
        "content": "<p>What does <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(-1)^{1/2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1/2</span></span></span></span></span></span></span></span></span></span></span></span> even mean here? Are you sure you can definitely assign a meaning to all those symbols which makes this always true?</p>",
        "id": 432770552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712862591
    },
    {
        "content": "<p>You can only state it if you define what real^rational means. For example you could define r^q to mean r^(q regarded as real). Then it's unlikely to be true if r&lt;0.</p>",
        "id": 432770802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712862689
    },
    {
        "content": "<p>Though with that definition, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></msup><mo>=</mo><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">(-1)^{1/3} = -\\frac{1}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1/3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> which isn't exactly ideal</p>",
        "id": 432798104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712874679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> <a href=\"#narrow/stream/113489-new-members/topic/pow_mul.20rational/near/432767579\">said</a>:</p>\n<blockquote>\n<p>So I can't even state the <code>ℝ ℚ</code> version of this?</p>\n</blockquote>\n<p>If you want, you can define your own power function taking a real and a rational, and write an HPow instance so notation works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℝ</span> <span class=\"n\">where</span>\n  <span class=\"n\">hPow</span> <span class=\"o\">:=</span> <span class=\"n\">yourFunction</span>\n</code></pre></div>\n<p>But Mathlib doesn't provide such a definition out-of-the-box, so you will have to write a bunch of supporting lemmas yourself.</p>",
        "id": 432875664,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1712917885
    },
    {
        "content": "<p>Aside: the reason that Lean doesn't show a warning in the statement in the original code snippet is because there is a parse error in having an empty tactic block. This is a known bug: <a href=\"https://github.com/leanprover/lean4/pull/3556\">lean4#3556</a></p>",
        "id": 432877715,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712918896
    }
]