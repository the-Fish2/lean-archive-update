[
    {
        "content": "<p>hello im not quite sure where the problem in my code is,  seems trivial but im kinda stuck</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Opt</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>  <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Wrap</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">=</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Opt</span> <span class=\"n\">a</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span>\n<span class=\"bp\">|</span> <span class=\"n\">Empty</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">≠</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Opt</span> <span class=\"n\">a</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Opt.unwrap</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">}:</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">Opt</span> <span class=\"n\">a</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">s1</span> <span class=\"bp\">=</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">Wrap</span> <span class=\"n\">p</span> <span class=\"n\">v</span>  <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">Empty</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Opt is supposed to be an inductive that is always Opt.Wrap when both type (String) arguments are equal, Opt.Empty otherwise. I now want to access a Opt.Wrap when i have the proof that (s1 = s2). Lean does not simply let me omit the Empty case, so i tried to prove that entering that branch is impossible. but is it? seems like i have to prove </p>\n<blockquote>\n<p>s1 ≠ s2<br>\n⊢ s1 = s2 → a</p>\n</blockquote>\n<p>which is not provable right?</p>",
        "id": 423162177,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1708773889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> has marked this topic as resolved.</p>",
        "id": 423164716,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708776294
    },
    {
        "content": "<p>nvm i found my mistake <span aria-label=\"melting face\" class=\"emoji emoji-1fae0\" role=\"img\" title=\"melting face\">:melting_face:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Opt.unwrap</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">}:</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">Opt</span> <span class=\"n\">a</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">=</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">Wrap</span> <span class=\"n\">_</span> <span class=\"n\">v</span>  <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">Empty</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 423164976,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1708776557
    }
]