[
    {
        "content": "<p>Hi I am quite confused in how adding <code>nsmul </code> to <code>AddMonoid₄</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"sd\">/-- Multiplication by a natural number. -/</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">nsmul₁</span>\n  <span class=\"sd\">/-- Multiplication by `(0 : ℕ)` gives `0`. -/</span>\n  <span class=\"n\">nsmul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nsmul</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"sd\">/-- Multiplication by `(n + 1 : ℕ)` behaves as expected. -/</span>\n  <span class=\"n\">nsmul_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">nsmul</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">nsmul</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">mySMul</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid₄</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">ℕ</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">AddMonoid₄.nsmul</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>solves the bad diamond problem</p>",
        "id": 429419484,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711376482
    },
    {
        "content": "<p>In <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C07_Hierarchies.html\">https://leanprover-community.github.io/mathematics_in_lean/C07_Hierarchies.html</a> with <code>AddMonoid3</code> there are two instances of the ring Z:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">selfModule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring₃</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module₁</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"n\">r</span><span class=\"bp\">*</span><span class=\"n\">s</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"n\">zero_mul</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc₃</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"n\">Ring₃.right_distrib</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"n\">Ring₃.left_distrib</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">abGrpModule</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup₃</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module₁</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"n\">zsmul₁</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 429420426,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711376690
    },
    {
        "content": "<p>But the corresonding content for <code>AddMonoid₄ </code> only defines and shows that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoid₄</span> <span class=\"n\">ℤ</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"n\">add_assoc₃</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_assoc</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">Int.zero_add</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_zero</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">m</span>\n  <span class=\"n\">nsmul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">Int.zero_mul</span>\n  <span class=\"n\">nsmul_succ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">↦</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.add_mul</span><span class=\"o\">,</span> <span class=\"n\">Int.add_comm</span><span class=\"o\">,</span> <span class=\"n\">Int.one_mul</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SMul.smul</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:=</span> <span class=\"n\">mySMul</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>How is the example relavant to bad diamond?</p>",
        "id": 429420918,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711376808
    },
    {
        "content": "<p>Maybe I should be more explicit and include the code that doesn’t work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">myBadSMul</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid₃</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">ℕ</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">nsmul₁</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SMul.smul</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:=</span> <span class=\"n\">myBadSMul</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 429438454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711380474
    },
    {
        "content": "<p>This is endowing every additive monoid with a scalar multiplication by natural numbers instead of including this data in the definition of additive monoid, and it ruins the <code>rfl</code>.</p>",
        "id": 429438905,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711380555
    },
    {
        "content": "<p>Yeah this  code for <code>AddMonoid₃</code> corresponding the example of  <code>AddMonoid₄</code>. Hence it solved it by \"override\" the default implementation (i.e., <code>nsmul₁</code>) for  <code>AddMonoid₄</code>?</p>",
        "id": 429443604,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711381453
    },
    {
        "content": "<p>I was thinking defining <code>Module₂</code> and two instances <code>selfModule2</code> and <code>abGrpModule2</code>, and checking they are the same before. But it's more complicated than the example supplied here <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 429445190,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711381678
    },
    {
        "content": "<p>Yes the <code>AddMonoid₄ ℤ</code> instance overrides the default implementation.</p>",
        "id": 429445295,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711381686
    },
    {
        "content": "<p>Could you please open an issue on the MIL source repo so that I don’t forget to add the explicit bad code? I really don’t have time now but I will do it later.</p>",
        "id": 429445738,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711381744
    },
    {
        "content": "<p>Sure, I will open an issue in <a href=\"https://github.com/avigad/mathematics_in_lean_source\">https://github.com/avigad/mathematics_in_lean_source</a></p>",
        "id": 429446465,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711381873
    },
    {
        "content": "<p>It's kind of solving the bad diamond problem via avoiding it. Since they are definitionally equal, hence I understand that they can be proved the same by <code>rfl</code> now. What is the advantage of this way over proving that they are equal not using <code>rfl</code>?</p>",
        "id": 429447451,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711382060
    },
    {
        "content": "<p>Lots of automation in the system relies on definitional equality (eg <code>rfl</code> works). Propositional equality is much less useful in this way</p>",
        "id": 429450539,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711382628
    },
    {
        "content": "<p>I think I am kind of getting it now. Thank you very much Patrick and Matthew <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 429451613,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711382847
    },
    {
        "content": "<blockquote>\n<p>Could you please open an issue on the MIL source repo so that I don’t forget to add the explicit bad code? I really don’t have time now but I will do it later.</p>\n</blockquote>\n<p>A issue created <a href=\"https://github.com/avigad/mathematics_in_lean_source/issues/185\">here</a> linking this thread</p>",
        "id": 429451782,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711382882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/113489-new-members/topic/Fix.20bad.20diamond.20via.20forgetting.20data.20in.20MIL.20Chapter7/near/429450539\">said</a>:</p>\n<blockquote>\n<p>Lots of automation in the system relies on definitional equality (eg <code>rfl</code> works). Propositional equality is much less useful in this way</p>\n</blockquote>\n<p>Could we possibly add a \"meta\" instance search that instead looks up proofs that these equalities are true? Could also speed up the system by making sure that any <code>rfl</code>s are cached effectively</p>",
        "id": 429481979,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1711390574
    },
    {
        "content": "<p>You mean in type class synthesis or more generally?</p>",
        "id": 429484560,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711391567
    },
    {
        "content": "<p>Within typeclass synthesis is where I imagined this</p>",
        "id": 429493916,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1711395144
    },
    {
        "content": "<p>I just learned yesterday that typeclass synthesis starts off filtering the list of instances by matching on a key in a discrimination tree. So we aren’t even getting to unification before some things are tossed for performance reasons.</p>",
        "id": 429499515,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711397230
    }
]