[
    {
        "content": "<p>Greetings, I'm trying to implement a custom monad that tracks the sequence of a limited Set of IO actions but i'm struggeling to define a proper bind functions that can use IO. limitedIO.bind is supposed to apply the effect <a href=\"http://x.run\">x.run</a>.  Ive read the Manual article about MonadTransformers and lifting, my \".run\" function serves as the \"monadLift\"  for IO  i think</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">limitedIO</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">):</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">print_nat</span>  <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">limitedIO</span> <span class=\"n\">a</span> <span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">limitedIO</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">done</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">-&gt;</span>  <span class=\"n\">limitedIO</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">limitedIO.run</span> <span class=\"o\">:</span> <span class=\"n\">limitedIO</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">IO</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">print_nat</span> <span class=\"n\">n</span> <span class=\"n\">next</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"s2\">\"nat: \"</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">run</span>\n<span class=\"bp\">|</span> <span class=\"n\">done</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">limitedIO</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">limitedIO.done</span> <span class=\"n\">x</span>\n  <span class=\"n\">bind</span> <span class=\"n\">x</span> <span class=\"n\">next</span> <span class=\"o\">:=</span> <span class=\"c1\">-- apply IO here?</span>\n</code></pre></div>",
        "id": 417082696,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1705839966
    },
    {
        "content": "<p>You can't use <code>IO</code> there, but I don't think you want to do so anyway. This seems correct to me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">limitedIO.bind</span> <span class=\"o\">:</span> <span class=\"n\">limitedIO</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">limitedIO</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">limitedIO</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">print_nat</span> <span class=\"n\">n</span> <span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"n\">next'</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">print_nat</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"o\">())</span> <span class=\"n\">next'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">done</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">next'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">next'</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">limitedIO</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">limitedIO.done</span> <span class=\"n\">x</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">limitedIO.bind</span>\n</code></pre></div>",
        "id": 417084780,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705841944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> <a href=\"#narrow/stream/113489-new-members/topic/IO.20in.20custom.20monad/near/417082696\">said</a>:</p>\n<blockquote>\n<p>limitedIO.bind is supposed to apply the effect <a href=\"http://x.run\">x.run</a>.</p>\n</blockquote>\n<p>In particular, this sound wrong to me. <code>limitedIO.bind</code> is supposed to <em>produce a <code>limitedIO</code></em> that has the desired effect when you call <code>run (a.bind b)</code>. <code>bind</code> should't do the actual running.</p>",
        "id": 417084924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705842075
    },
    {
        "content": "<blockquote>\n<p>my \".run\" function serves as the \"monadLift\" for IO i think</p>\n</blockquote>\n<p>This is true, and indeed you should use it to provide a <code>MonadLift</code> instance; but this only lets you run <code>limitedIO</code> from <code>IO</code>, not vice versa. Monad lifts usually let you run a monad with less state (<code>limitedIO</code>) in a monad with more state (<code>IO</code>)</p>",
        "id": 417085014,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705842133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/IO.20in.20custom.20monad/near/417084924\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> <a href=\"#narrow/stream/113489-new-members/topic/IO.20in.20custom.20monad/near/417082696\">said</a>:</p>\n<blockquote>\n<p>limitedIO.bind is supposed to apply the effect <a href=\"http://x.run\">x.run</a>.</p>\n</blockquote>\n<p>In particular, this sound wrong to me. <code>limitedIO.bind</code> is supposed to <em>produce a <code>limitedIO</code></em> that has the desired effect when you call <code>run (a.bind b)</code>. <code>bind</code> should't do the actual running.</p>\n</blockquote>\n<p>thanks alot for that helpful explanation, makes much more sense that way</p>",
        "id": 417105011,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1705858265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> has marked this topic as resolved.</p>",
        "id": 417105021,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705858284
    }
]