[
    {
        "content": "<p>hello, im quite new to Lean4, is it possible to map Types to there Name? the #check command for example tells me that \"3\" is of Type \"Nat\" and \"Nat\" is of Type \"Type\", so it knows about the Type Name \"Nat\".  Is there a (debug) function:  Type -&gt; String  identifying a given Type like #check does?</p>",
        "id": 416995024,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1705760758
    },
    {
        "content": "<p>That function can't exist, but you can write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n<span class=\"k\">#eval</span> <span class=\"n\">toString</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 416996442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705761990
    },
    {
        "content": "<p>Note this is not taking in a type, but an <code>Expr</code></p>",
        "id": 416996456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705762022
    },
    {
        "content": "<p>thanks for the quick reply, is Qq part of  Matlib4 ? since i cant import that package.<br>\nand how would I've been able to find this solution by myself? my current main resources are google searches and the Lean Manual + Functional programming book, any additional tips?</p>",
        "id": 416997280,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1705762705
    },
    {
        "content": "<p>Qq is one of the packages that mathlib depends upon, but is not in mathlib itself</p>",
        "id": 416998644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705763787
    },
    {
        "content": "<p>While it won't tell you about Qq, you might have been able to find another solution in the \"metaprogramming book\"</p>",
        "id": 416998714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705763832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> has marked this topic as resolved.</p>",
        "id": 416999088,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705764110
    },
    {
        "content": "<p>Here's a Qq-free spelling:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Term</span>\n<span class=\"k\">#eval</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 416999439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705764315
    }
]