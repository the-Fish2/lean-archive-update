[
    {
        "content": "<p>Hello, </p>\n<p>I am trying to prove the correctness of some function I implemented in Lean. This function is recursive and is called again on some list, which requires me to use List.attach instead of a list itself in order to prove termination.</p>\n<p>In the proof I get the following element in the context: <code>a ∈ Lean.Internal.coeM (List.attach (l)</code> where <code>a:A</code>  and <code>l: List A</code>.  My goal is to have the following statement in my context <code>a   ∈ l</code>, but I am unsure how to get it. I unfolded coeM and used simp to gain <code>∃ a_1 b, a = CoeT.coe { val := a_1, property := b }</code> and b would be the proof of <code>a_1  ∈ l </code>, but I don't see how to conclude that a_1 = a. I tried unfolding CoeT.coe as well, but that leads to nothing.</p>\n<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">Lean.Internal.coeM</span> <span class=\"o\">(</span><span class=\"n\">List.attach</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Lean.Internal.coeM</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a'</span><span class=\"o\">,</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">a_a'</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span>\n  <span class=\"gr\">admit</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">a_a'</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h'</span>\n</code></pre></div>",
        "id": 422201498,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1708337781
    },
    {
        "content": "<p>Ugh, this is awful. Maybe we should add this lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">l.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.map_eq_bind</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">Lean.Internal.coeM</span> <span class=\"o\">(</span><span class=\"n\">List.attach</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 422204214,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708338633
    },
    {
        "content": "<p>(note your original post is not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> because it has no imports!)</p>",
        "id": 422206507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708339445
    },
    {
        "content": "<p>Btw, while I agree that this is not ideal, your <code>have</code> is easy to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">a_a'</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span>\n</code></pre></div>",
        "id": 422207037,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708339652
    },
    {
        "content": "<p>I claim this is a Lean bug; <code>List.attach l : List A</code> should not be elaborating to <code>Lean.Internal.coeM</code></p>",
        "id": 422207055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708339660
    },
    {
        "content": "<p>Thank you for the help. Both methods work. I didn't think of applying eq as it looked different to the goal.</p>",
        "id": 422208142,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1708340056
    },
    {
        "content": "<p>Yeah, we fixed the <code>Lean.Internal.coeM</code> thing for <code>Set</code>, as I recall, but apparently not for <code>List</code></p>",
        "id": 422208332,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708340131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"619540\">Johannes Tantow</span> <a href=\"#narrow/stream/113489-new-members/topic/Obtaining.20membership.20proof.20from.20Lean.2EInternal.2ECoeM/near/422208142\">said</a>:</p>\n<blockquote>\n<p>Thank you for the help. Both methods work. I didn't think of applying eq as it looked different to the goal.</p>\n</blockquote>\n<p>As a general principle, if a hypothesis <code>hyp</code> looks different from the goal, and <code>exact hyp</code> closes the goal, then this often means that there is some abuse going on.</p>",
        "id": 422209084,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708340400
    },
    {
        "content": "<p>I also just noticed that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">Lean.Internal.coeM</span> <span class=\"o\">(</span><span class=\"n\">List.attach</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Lean.Internal.coeM</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a'</span><span class=\"o\">,</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">⟩</span>\n  <span class=\"n\">subst</span> <span class=\"n\">eq</span>  <span class=\"c1\">-- &lt;-- instead of `have`</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h'</span>\n</code></pre></div>\n<p>appears to \"fix\" the issue.</p>",
        "id": 422209288,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708340453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Obtaining.20membership.20proof.20from.20Lean.2EInternal.2ECoeM/near/422208332\">said</a>:</p>\n<blockquote>\n<p>Yeah, we fixed the <code>Lean.Internal.coeM</code> thing for <code>Set</code>, as I recall, but apparently not for <code>List</code></p>\n</blockquote>\n<p>To be clear; I am not claiming that this is a mathlib bug that needs a fix in mathlib. It is a lean bug that:</p>\n<ul>\n<li>something with the word \"internal\" in it can ever end up in the elaborated term</li>\n<li>something with the typeclass <code>Coe</code> in it can ever end up in the elaborated term; coercions are supposed to be inlined</li>\n</ul>",
        "id": 422210388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708340874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"619540\">Johannes Tantow</span> has marked this topic as resolved.</p>",
        "id": 422243579,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708352600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Obtaining.20membership.20proof.20from.20Lean.2EInternal.2ECoeM/near/422208332\">said</a>:</p>\n<blockquote>\n<p>Yeah, we fixed the <code>Lean.Internal.coeM</code> thing for <code>Set</code>, as I recall, but apparently not for <code>List</code></p>\n</blockquote>\n<p>For <code>Set</code>, we removed the global <code>Monad</code> instance and made a custom coercion just for going from <code>Set A</code> to <code>Set \\alpha</code> for <code>A : Set \\alpha</code>. The <code>Monad List</code> instance is more useful (though there have been debates about it being a global instance for years, since it's likely not the exact monad people expect since Lean is eagerly evaluated).</p>",
        "id": 422267598,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708359299
    },
    {
        "content": "<p>There does seem to be a Lean bug here. In <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.coerceMonadLift%3F#doc\">docs#Lean.Meta.coerceMonadLift?</a> you can see that the <code>Lean.Internal.coeM</code> application is meant to be unfolded, but for some reason it's not unfolding.</p>",
        "id": 422268542,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708359510
    },
    {
        "content": "<p>Is this related to <a href=\"https://github.com/leanprover/lean4/pull/3395\">lean4#3395</a>?</p>",
        "id": 422269033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708359632
    },
    {
        "content": "<p>At least indirectly. The bug seems to be that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Internal.liftCoeM#doc\">docs#Lean.Internal.liftCoeM</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Internal.coeM#doc\">docs#Lean.Internal.coeM</a> aren't instances or reducible, so they weren't being reduced. I just added <code>@[reducible]</code> to them, and now the goal from your issue starts out as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">l</span>\n    <span class=\"n\">pure</span> <span class=\"n\">a.val</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 422269846,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708359826
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3404\">lean4#3404</a></p>",
        "id": 422273120,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708360598
    }
]