[
    {
        "content": "<p>Hello everyone! I am an undergraduate new to Lean usage. Could someone please help me to solve this theorem in Lean3?<br>\nProve that if a is an integer that is not divisible by 3, then (a + 1)(a + 2) is divisible by 3.</p>\n<p>I am currently using the web Lean3 version as that is the one required by my professor for a certain project. Any help would be greatly appreciated.</p>",
        "id": 424700240,
        "sender_full_name": "Vir Malhotra",
        "timestamp": 1709570804
    },
    {
        "content": "<p>Could you tell us why you're using lean 3?</p>",
        "id": 424700647,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709570896
    },
    {
        "content": "<p>That's the version my professor is asking me to use. I assume it's because it's more intuitive to learn.</p>",
        "id": 424700795,
        "sender_full_name": "Vir Malhotra",
        "timestamp": 1709570946
    },
    {
        "content": "<p>Unfortunately you'll find it exceedingly hard to find help with lean 3 here, and we'd strongly recommend your professor moves to lean 4</p>",
        "id": 424702883,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709571573
    },
    {
        "content": "<p>I of course agree with Ruben, but anyway have you a math proof?</p>",
        "id": 424711702,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709574256
    },
    {
        "content": "<p>I will talk to my professor about it, but if anyone is able to help me with the proof I'd be really grateful.</p>",
        "id": 424744715,
        "sender_full_name": "Vir Malhotra",
        "timestamp": 1709585392
    },
    {
        "content": "<p>This is the math proof for the same in a nutshell:</p>\n<p>a can be written as 3b+1 or 3b+2 for some integer b</p>\n<p>If a=3b+1, then a+2 is divisible by 3.</p>\n<p>If a=3b+2, then a+1 is divisible by 3.</p>\n<p>Since either a+1 or a+2 is divisible by 3, (a+1)(a+2) is divisible by 3.</p>",
        "id": 424744737,
        "sender_full_name": "Vir Malhotra",
        "timestamp": 1709585401
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.div_add_mod#doc\">docs#Int.div_add_mod</a> gives you a=3b+r -- maybe you can take it from there? Oh wait -- you want Lean 3?? It will still be called something like that I guess.</p>",
        "id": 424745207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709585589
    },
    {
        "content": "<p>I can't help with Lean 3, but here is (I believe) a proof in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c1\">-- The theorem states: if an integer a is not divisible by 3, then (a + 1) * (a + 2) is divisible by 3.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">div_by_three</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- First, calculate the remainder of a when divided by 3.</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span>\n\n  <span class=\"c1\">-- Establish the two possible cases for the remainder: it can only be 1 or 2 since a is not divisible by 3.</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_cases</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.dvd_iff_emod_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">ne_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"n\">rlt</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">Int.emod_lt_of_pos</span> <span class=\"n\">a</span> <span class=\"n\">zero_lt_three</span>\n    <span class=\"k\">have</span> <span class=\"n\">rge</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">Int.emod_nonneg</span> <span class=\"n\">a</span> <span class=\"n\">three_ne_zero</span><span class=\"o\">)</span> <span class=\"n\">h.symm</span>\n    <span class=\"n\">interval_cases</span> <span class=\"n\">r</span>\n    <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n  <span class=\"c1\">-- Use case analysis on the remainder.</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h_cases</span> <span class=\"k\">with</span> <span class=\"n\">hr</span> <span class=\"bp\">|</span> <span class=\"n\">hr</span>\n\n  <span class=\"c1\">-- Case 1: Remainder is 1. Show a can be written as 3b + 1, and hence (a + 2) is divisible by 3.</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">Z1</span><span class=\"o\">,</span> <span class=\"n\">Z2</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hr</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Int.ediv_add_emod</span> <span class=\"n\">a</span> <span class=\"mi\">3</span>\n\n  <span class=\"c1\">-- Use the expression for a to prove that (a + 2) is divisible by 3.</span>\n  <span class=\"k\">have</span> <span class=\"n\">W2</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Z2</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"n\">Z1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"n\">ring</span>\n\n  <span class=\"c1\">-- Conclude that (a + 1) * (a + 2) is divisible by 3, completing the proof for the first case.</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Dvd.dvd.mul_left</span> <span class=\"n\">W2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">-- Case 2: Remainder is 2. Similar to Case 1, but now showing that (a + 1) is divisible by 3.</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">Z1</span><span class=\"o\">,</span> <span class=\"n\">Z2</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hr</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Int.ediv_add_emod</span> <span class=\"n\">a</span> <span class=\"mi\">3</span>\n\n  <span class=\"c1\">-- Use the expression for a to prove that (a + 1) is divisible by 3.</span>\n  <span class=\"k\">have</span> <span class=\"n\">W3</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Z2</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"n\">Z1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"n\">ring</span>\n\n  <span class=\"c1\">-- Conclude that (a + 1) * (a + 2) is divisible by 3, completing the proof for the second case.</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Dvd.dvd.mul_right</span> <span class=\"n\">W3</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 424857503,
        "sender_full_name": "Peter Hansen",
        "timestamp": 1709641613
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">div_add_mod</span> <span class=\"n\">a</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"k\">have</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">mod_lt</span> <span class=\"n\">_</span> <span class=\"n\">zero_lt_three</span>\n  <span class=\"n\">interval_cases</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> first goal -/</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> remaining goals -/</span>\n  <span class=\"n\">all_goals</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha'</span><span class=\"o\">]</span>\n    <span class=\"n\">ring_nf</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">apply</span> <span class=\"n\">dvd_add</span>\n    <span class=\"n\">norm_num</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">exact</span> <span class=\"n\">dvd_mul_of_dvd_right</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 424888739,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709650959
    },
    {
        "content": "<p>Check edit history for clearer versions I guess, I just golf it for fun</p>",
        "id": 424889370,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709651119
    },
    {
        "content": "<p>Though the theorem holds for all integers; not just the natural numbers. Anywho - I golfed along and came up with the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">div_by_three</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dvd_iff_emod_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ne_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">emod_lt_of_pos</span> <span class=\"n\">a</span> <span class=\"n\">zero_lt_three</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">emod_nonneg</span> <span class=\"n\">a</span> <span class=\"n\">three_ne_zero</span><span class=\"o\">)</span> <span class=\"n\">h.symm</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dvd_iff_emod_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_emod</span><span class=\"o\">,</span> <span class=\"n\">add_emod</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">add_emod</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n    <span class=\"n\">interval_cases</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Though now it hardly follows the mathematical proof that was originally presented. On the flip side, it was easy to turn into Lean 3 code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.order.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.interval_cases</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">int</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">div_by_three</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dvd_iff_mod_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">mod_lt_of_pos</span> <span class=\"n\">a</span> <span class=\"n\">zero_lt_three</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">mod_nonneg</span> <span class=\"n\">a</span> <span class=\"n\">three_ne_zero</span><span class=\"o\">)</span> <span class=\"n\">H.symm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dvd_iff_mod_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_mod</span><span class=\"o\">,</span> <span class=\"n\">add_mod</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">add_mod</span> <span class=\"n\">a</span><span class=\"o\">],</span>\n    <span class=\"n\">interval_cases</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span><span class=\"o\">),</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 424926533,
        "sender_full_name": "Peter Hansen",
        "timestamp": 1709661340
    },
    {
        "content": "<p>You can also golf this using <code>ZMod</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">div_by_three</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">ZMod.int_cast_zmod_eq_zero_iff_dvd</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_mul</span><span class=\"o\">,</span>\n           <span class=\"n\">Int.cast_add</span><span class=\"o\">]</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n  <span class=\"n\">revert</span> <span class=\"n\">b</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 424985481,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1709686323
    },
    {
        "content": "<p>When I've got my golf trousers on I'm sometimes annoyed about how one has to occasionally <code>revert</code> before <code>decide</code>.</p>",
        "id": 425024861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709711633
    },
    {
        "content": "<p>Avoiding <code>revert</code> before <code>decide</code> is why Lean 3 had the <code>dec_trivial!</code> tactic variant. I think we've lost that in Lean 4, though since we also lack a Lean 4 equivalent of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a> I find it hard to be sure exactly what tactics exist at present.</p>",
        "id": 425051502,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1709720477
    }
]