[
    {
        "content": "<p>Mathematics in Lean (section 8.2.2) states a version of the Chinese Remainder Theorem as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">coprime</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Coprime</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≃+*</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I am confused by the usage of <code>∀</code> in <code> ∀ i, ZMod (a i)</code> . Apparently, changing it to <code>Π</code> doesn't change the type - at least it still compiles with the same proof. Is this some sort of implicit way of writing a product?</p>",
        "id": 436379374,
        "sender_full_name": "Tainnor",
        "timestamp": 1714527417
    },
    {
        "content": "<p>I believe that <code>∀</code> and <code>Π</code> mean exactly the same thing.</p>",
        "id": 436380423,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1714528470
    },
    {
        "content": "<p>The human convention is to write <code>∀</code> only in <code>Prop</code>s so a PR to change this would probably be well received.</p>",
        "id": 436380840,
        "sender_full_name": "A.",
        "timestamp": 1714528853
    },
    {
        "content": "<p>This is indeed the same thing to Lean and obviously a typo in the context of MIL. In my defense this typo is a straight copy-paste <a href=\"https://github.com/leanprover-community/mathlib4/blob/ac466445552dd0ab1b7e57c32cb8749229de0c5b/Mathlib/Data/ZMod/Quotient.lean#L72-L79\">from Mathlib</a> so PRs to both MIL and Mathlib are welcome. In defense of Mathlib, note that in the early days of Lean 4 we didn’t have the nice notation because Leo decided it was useless to have this redundant notation in core Lean. But since he also first decided users would have the power to define such notations, we restored it.</p>",
        "id": 436382893,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714530597
    },
    {
        "content": "<p>Be careful when you fix the typo: there are many symbols that look similar. The correct statement</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≃+*</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>features two different Pi-like symbols that bad fonts won’t make easy to distinguish.</p>",
        "id": 436383039,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714530719
    },
    {
        "content": "<p>I suddenly had a bad feeling about this story, and it has just been confirmed by git blame: I also authored the Mathlib version. My defense still stands, but requires a bit of schizophrenia.</p>",
        "id": 436383229,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714530847
    },
    {
        "content": "<p>Thanks for explaining. I didn't find it intuitive at first that they mean the same thing, although it makes a certain amount of sense once I think about it.</p>\n<p>I made a PR for mathematics-in-lean: <a href=\"https://github.com/avigad/mathematics_in_lean_source/pull/193\">https://github.com/avigad/mathematics_in_lean_source/pull/193</a><br>\nI don't have write permissions for mathlib, otherwise I would have made one there too (it's my understanding that one shouldn't make PRs from forks).</p>",
        "id": 436577080,
        "sender_full_name": "Tainnor",
        "timestamp": 1714599475
    },
    {
        "content": "<p>(This understanding is correct; mathlib's continuous integration requires running from not-a-fork.)</p>",
        "id": 440078370,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716380139
    }
]