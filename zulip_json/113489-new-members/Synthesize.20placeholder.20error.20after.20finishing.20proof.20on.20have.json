[
    {
        "content": "<p>Hi,</p>\n<p>I have a problem with a theorem where I am quite sure that it should work but as soon as I finish the last goal suddenly I get a lot \"don't know how to synthesize placeholder\" errors in my <code>have</code> and <code>by_cases</code> tactics.  This is not what I would expect and I do not find any question marks or underscores in the context or goal. Are there any other signs I need to look out for. I don't think I could write it in a simple way without these tactics . In the induction base I can have a have-statement without leading to the error.</p>\n<p>My proof and statement is unfortunately rather long and I did not manage to find a shorter example. I thought it might be connected with Fin, but I also get it when trying to show true=true. I have tested it also in the browser and the error persists. It might be a longshot but does anyone have an idea what is behind that ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.HashMap</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.AssocList</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Classes.BEq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Bool.AllAny</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foldl_reinsertAux</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">source</span><span class=\"o\">:(</span><span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">:</span> <span class=\"n\">HashMap.Imp.Buckets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">bkt</span><span class=\"o\">:</span> <span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">bkt</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HashMap.Imp.reinsertAux</span> <span class=\"n\">d</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">AssocList.toList</span> <span class=\"n\">source</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">ab</span> <span class=\"bp\">∈</span> <span class=\"n\">bkt.toList</span> <span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">bkt</span><span class=\"o\">:</span> <span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span>  <span class=\"n\">bkt</span> <span class=\"bp\">∈</span> <span class=\"n\">target.1</span> <span class=\"bp\">∧</span> <span class=\"n\">ab</span> <span class=\"bp\">∈</span> <span class=\"n\">bkt.toList</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">ab</span> <span class=\"bp\">∈</span> <span class=\"n\">source.toList</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">HashMap.Imp.expand_go_mem</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">source</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">Buckets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">):</span>\n <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">bkt</span><span class=\"o\">:</span> <span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">bkt</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">HashMap.Imp.expand.go</span> <span class=\"n\">i</span> <span class=\"n\">source</span> <span class=\"n\">target</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">ab</span> <span class=\"bp\">∈</span> <span class=\"n\">bkt.toList</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">bkt</span><span class=\"o\">:</span> <span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">bkt</span> <span class=\"bp\">∈</span> <span class=\"n\">target.1</span> <span class=\"bp\">∨</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">source.size</span><span class=\"o\">),</span> <span class=\"n\">j.val</span> <span class=\"bp\">≥</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">bkt</span> <span class=\"bp\">=</span> <span class=\"n\">source</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"bp\">∧</span> <span class=\"n\">ab</span> <span class=\"bp\">∈</span> <span class=\"n\">bkt.toList</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">h</span><span class=\"o\">:(</span><span class=\"n\">source.size</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span>  <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">source</span> <span class=\"n\">i</span> <span class=\"n\">target</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_eq_zero_iff_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">expand.go</span>\n  <span class=\"k\">have</span> <span class=\"n\">if_cond</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.not_lt_of_le</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">if_cond</span><span class=\"o\">]</span>\n\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">bkt</span><span class=\"o\">,</span> <span class=\"n\">bkt_mem</span><span class=\"o\">,</span> <span class=\"n\">ab_mem</span><span class=\"o\">⟩</span>\n  <span class=\"n\">use</span> <span class=\"n\">bkt</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">apply</span> <span class=\"n\">bkt_mem</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ab_mem</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">g</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">bkt</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">ab_mem</span><span class=\"o\">⟩</span>\n  <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">use</span> <span class=\"n\">bkt</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i_le_j</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"n\">lt_self</span><span class=\"o\">:</span> <span class=\"n\">Array.size</span> <span class=\"n\">source</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:=</span><span class=\"n\">j.val</span><span class=\"o\">)</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.le_trans</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h</span>\n      <span class=\"n\">apply</span> <span class=\"n\">i_le_j</span>\n      <span class=\"n\">apply</span> <span class=\"n\">j.isLt</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">lt_self</span>\n\n  <span class=\"c1\">--step</span>\n  <span class=\"k\">have</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rfl</span>\n\n  <span class=\"n\">unfold</span> <span class=\"n\">expand.go</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_i</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">source.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_of_sub_eq_succ</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h_i</span><span class=\"o\">]</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">source.set</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk</span> <span class=\"n\">i</span> <span class=\"n\">h_i</span><span class=\"o\">)</span> <span class=\"n\">AssocList.nil</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reinsertAux</span> <span class=\"n\">d</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">AssocList.toList</span> <span class=\"n\">source</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]))</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">ih</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">Array.size</span> <span class=\"n\">source</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_succ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">ih</span> <span class=\"n\">h'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">or_and_right</span><span class=\"o\">,</span> <span class=\"n\">exists_or</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g</span>\n  <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foldl_reinsertAux</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">g</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">left</span>\n      <span class=\"n\">apply</span> <span class=\"n\">g</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">right</span>\n      <span class=\"n\">use</span> <span class=\"n\">source.get</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk</span> <span class=\"n\">i</span> <span class=\"n\">h_i</span><span class=\"o\">)</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk</span> <span class=\"n\">i</span> <span class=\"n\">h_i</span><span class=\"o\">)</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">apply</span> <span class=\"n\">g</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">bkt</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">ab_mem</span><span class=\"o\">⟩</span>\n    <span class=\"n\">right</span>\n    <span class=\"n\">use</span> <span class=\"n\">bkt</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j_i</span><span class=\"o\">,</span> <span class=\"n\">bkt_set</span><span class=\"o\">⟩</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Array.get_set</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bkt_set</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">bkt_set</span>\n    <span class=\"k\">have</span> <span class=\"n\">j_isLt</span><span class=\"o\">:</span> <span class=\"n\">j.val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">j.val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"o\">(</span><span class=\"n\">Array.set</span> <span class=\"n\">source</span> <span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h_i</span><span class=\"o\">}</span> <span class=\"n\">AssocList.nil</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">j.isLt</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span>\n    <span class=\"n\">use</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">j</span> <span class=\"n\">j_isLt</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">j_i</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bkt_set</span><span class=\"o\">]</span>\n    <span class=\"n\">split</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">i_j</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">i_j</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">j_i</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">j_i</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">j_i</span>\n\n    <span class=\"n\">simp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ab_mem</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">g</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foldl_reinsertAux</span><span class=\"o\">]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">left</span>\n    <span class=\"n\">left</span>\n    <span class=\"n\">apply</span> <span class=\"n\">g</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">bkt</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">ab_mem</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">i_j</span><span class=\"o\">,</span> <span class=\"n\">bkt_j</span><span class=\"o\">⟩</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">j_i</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j.val</span>\n    <span class=\"n\">left</span>\n    <span class=\"n\">right</span>\n    <span class=\"k\">have</span> <span class=\"n\">source_eq</span><span class=\"o\">:</span> <span class=\"n\">source</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">source</span><span class=\"o\">[</span><span class=\"n\">j.val</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">congr</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">source_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">bkt_j</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ab_mem</span>\n\n    <span class=\"n\">right</span>\n    <span class=\"n\">use</span> <span class=\"n\">bkt</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_k</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"o\">(</span><span class=\"n\">Array.set</span> <span class=\"n\">source</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h_i</span> <span class=\"o\">}</span> <span class=\"n\">AssocList.nil</span><span class=\"o\">))),</span> <span class=\"n\">k.val</span> <span class=\"bp\">=</span> <span class=\"n\">j.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">k'</span><span class=\"o\">:</span> <span class=\"n\">j.val</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"o\">(</span><span class=\"n\">Array.set</span> <span class=\"n\">source</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h_i</span> <span class=\"o\">}</span> <span class=\"n\">AssocList.nil</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Array.size_set</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">j.isLt</span>\n      <span class=\"n\">use</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">j.val</span> <span class=\"n\">k'</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h_k</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k_j</span><span class=\"o\">⟩</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">use</span> <span class=\"n\">k</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">k_j</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_le_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_of_le_of_ne</span>\n    <span class=\"n\">apply</span> <span class=\"n\">i_j</span>\n    <span class=\"n\">apply</span> <span class=\"n\">j_i</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Array.get_set</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">split</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">i_k</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">i_k</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">j_i</span>\n    <span class=\"n\">contradiction</span>\n\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bkt_j</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ab_mem</span>\n</code></pre></div>",
        "id": 433752918,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1713359487
    },
    {
        "content": "<p>This is a little shorter; the issue seems to be that <code>congr</code> gets confused because the goal includes the other side goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.HashMap</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.AssocList</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Classes.BEq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Bool.AllAny</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foldl_reinsertAux</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">source</span><span class=\"o\">:(</span><span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">:</span> <span class=\"n\">HashMap.Imp.Buckets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">bkt</span><span class=\"o\">:</span> <span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">bkt</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HashMap.Imp.reinsertAux</span> <span class=\"n\">d</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">AssocList.toList</span> <span class=\"n\">source</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">ab</span> <span class=\"bp\">∈</span> <span class=\"n\">bkt.toList</span> <span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">bkt</span><span class=\"o\">:</span> <span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span>  <span class=\"n\">bkt</span> <span class=\"bp\">∈</span> <span class=\"n\">target.1</span> <span class=\"bp\">∧</span> <span class=\"n\">ab</span> <span class=\"bp\">∈</span> <span class=\"n\">bkt.toList</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">ab</span> <span class=\"bp\">∈</span> <span class=\"n\">source.toList</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">HashMap.Imp.expand_go_mem</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">source</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">Buckets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">bkt</span><span class=\"o\">:</span> <span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">bkt</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">HashMap.Imp.expand.go</span> <span class=\"n\">i</span> <span class=\"n\">source</span> <span class=\"n\">target</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">ab</span> <span class=\"bp\">∈</span> <span class=\"n\">bkt.toList</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">bkt</span><span class=\"o\">:</span> <span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">bkt</span> <span class=\"bp\">∈</span> <span class=\"n\">target.1</span> <span class=\"bp\">∨</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">source.size</span><span class=\"o\">),</span> <span class=\"n\">j.val</span> <span class=\"bp\">≥</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">bkt</span> <span class=\"bp\">=</span> <span class=\"n\">source</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"bp\">∧</span> <span class=\"n\">ab</span> <span class=\"bp\">∈</span> <span class=\"n\">bkt.toList</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">h</span><span class=\"o\">:(</span><span class=\"n\">source.size</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span>  <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">source</span> <span class=\"n\">i</span> <span class=\"n\">target</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">expand.go</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_i</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">source.size</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h_i</span><span class=\"o\">,</span> <span class=\"bp\">↓</span><span class=\"n\">reduceDite</span><span class=\"o\">,</span> <span class=\"n\">Array.get_eq_getElem</span><span class=\"o\">,</span> <span class=\"n\">AssocList.foldl_eq</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">getElem_fin</span><span class=\"o\">]</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">source.set</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk</span> <span class=\"n\">i</span> <span class=\"n\">h_i</span><span class=\"o\">)</span> <span class=\"n\">AssocList.nil</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reinsertAux</span> <span class=\"n\">d</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">AssocList.toList</span> <span class=\"n\">source</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]))</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Array.size_set</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">getElem_fin</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ih</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">ih</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">or_and_right</span><span class=\"o\">,</span> <span class=\"n\">exists_or</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foldl_reinsertAux</span><span class=\"o\">]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">bkt</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">ab_mem</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">i_j</span><span class=\"o\">,</span> <span class=\"n\">bkt_j</span><span class=\"o\">⟩</span>\n    <span class=\"n\">right</span>\n    <span class=\"n\">use</span> <span class=\"n\">bkt</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_k</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"o\">(</span><span class=\"n\">Array.set</span> <span class=\"n\">source</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h_i</span> <span class=\"o\">}</span> <span class=\"n\">AssocList.nil</span><span class=\"o\">))),</span> <span class=\"n\">k.val</span> <span class=\"bp\">=</span> <span class=\"n\">j.val</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h_k</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k_j</span><span class=\"o\">⟩</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">k</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Array.get_set</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span>\n        <span class=\"n\">split</span>\n        <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bkt_j</span><span class=\"o\">]</span>\n          <span class=\"n\">congr</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bkt_j</span><span class=\"o\">]</span>\n          <span class=\"n\">swap</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n          <span class=\"n\">congr</span>\n          <span class=\"gr\">sorry</span>\n          <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Would be good if someone could create a mathlib-free example</p>",
        "id": 433758379,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713360911
    },
    {
        "content": "<p>Ok, I do not understand why but after replacing the congr in a no longer get an error in the backwards direction of the induction step. The previous errors remain.</p>",
        "id": 433760502,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1713361500
    },
    {
        "content": "<p>So this is the current look. I added everything back to the back direction and removed the congr. In the front direction the errors remain. I have purged the <code>congr</code> tactic completely. Do you have another suspect ? I have also minimized the mathlib imports, but  to do it completely without it seems difficult. I would need to reprove the results about nats and introduce the induction tactic and use tactic again. Is that important ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.HashMap</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.AssocList</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Classes.BEq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Lattice</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foldl_reinsertAux</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">source</span><span class=\"o\">:(</span><span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">:</span> <span class=\"n\">HashMap.Imp.Buckets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">bkt</span><span class=\"o\">:</span> <span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">bkt</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HashMap.Imp.reinsertAux</span> <span class=\"n\">d</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">AssocList.toList</span> <span class=\"n\">source</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">ab</span> <span class=\"bp\">∈</span> <span class=\"n\">bkt.toList</span> <span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">bkt</span><span class=\"o\">:</span> <span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span>  <span class=\"n\">bkt</span> <span class=\"bp\">∈</span> <span class=\"n\">target.1</span> <span class=\"bp\">∧</span> <span class=\"n\">ab</span> <span class=\"bp\">∈</span> <span class=\"n\">bkt.toList</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">ab</span> <span class=\"bp\">∈</span> <span class=\"n\">source.toList</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">HashMap.Imp.expand_go_mem</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">B</span><span class=\"o\">](</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">source</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">Buckets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">bkt</span><span class=\"o\">:</span> <span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">bkt</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">HashMap.Imp.expand.go</span> <span class=\"n\">i</span> <span class=\"n\">source</span> <span class=\"n\">target</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">ab</span> <span class=\"bp\">∈</span> <span class=\"n\">bkt.toList</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">bkt</span><span class=\"o\">:</span> <span class=\"n\">AssocList</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">bkt</span> <span class=\"bp\">∈</span> <span class=\"n\">target.1</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">source.size</span><span class=\"o\">),</span> <span class=\"n\">j.val</span> <span class=\"bp\">≥</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">bkt</span> <span class=\"bp\">=</span> <span class=\"n\">source</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"bp\">∧</span> <span class=\"n\">ab</span> <span class=\"bp\">∈</span> <span class=\"n\">bkt.toList</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">h</span><span class=\"o\">:(</span><span class=\"n\">source.size</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span>  <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">source</span> <span class=\"n\">i</span> <span class=\"n\">target</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_eq_zero_iff_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">expand.go</span>\n  <span class=\"k\">have</span> <span class=\"n\">if_cond</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.not_lt_of_le</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">if_cond</span><span class=\"o\">]</span>\n\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">bkt</span><span class=\"o\">,</span> <span class=\"n\">bkt_mem</span><span class=\"o\">,</span> <span class=\"n\">ab_mem</span><span class=\"o\">⟩</span>\n  <span class=\"n\">use</span> <span class=\"n\">bkt</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">apply</span> <span class=\"n\">bkt_mem</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ab_mem</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">g</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">bkt</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">ab_mem</span><span class=\"o\">⟩</span>\n  <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">use</span> <span class=\"n\">bkt</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i_le_j</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"n\">lt_self</span><span class=\"o\">:</span> <span class=\"n\">Array.size</span> <span class=\"n\">source</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:=</span><span class=\"n\">j.val</span><span class=\"o\">)</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.le_trans</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h</span>\n      <span class=\"n\">apply</span> <span class=\"n\">i_le_j</span>\n      <span class=\"n\">apply</span> <span class=\"n\">j.isLt</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">lt_self</span>\n\n  <span class=\"c1\">--step</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">expand.go</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_i</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">source.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_of_sub_eq_succ</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h_i</span><span class=\"o\">]</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">source.set</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk</span> <span class=\"n\">i</span> <span class=\"n\">h_i</span><span class=\"o\">)</span> <span class=\"n\">AssocList.nil</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reinsertAux</span> <span class=\"n\">d</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">AssocList.toList</span> <span class=\"n\">source</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]))</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">ih</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">Array.size</span> <span class=\"n\">source</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_succ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">ih</span> <span class=\"n\">h'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">or_and_right</span><span class=\"o\">,</span> <span class=\"n\">exists_or</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g</span>\n  <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foldl_reinsertAux</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">g</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">left</span>\n      <span class=\"n\">apply</span> <span class=\"n\">g</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">right</span>\n      <span class=\"n\">use</span> <span class=\"n\">source.get</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk</span> <span class=\"n\">i</span> <span class=\"n\">h_i</span><span class=\"o\">)</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk</span> <span class=\"n\">i</span> <span class=\"n\">h_i</span><span class=\"o\">)</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">apply</span> <span class=\"n\">g</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">bkt</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">ab_mem</span><span class=\"o\">⟩</span>\n    <span class=\"n\">right</span>\n    <span class=\"n\">use</span> <span class=\"n\">bkt</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j_i</span><span class=\"o\">,</span> <span class=\"n\">bkt_set</span><span class=\"o\">⟩</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Array.get_set</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bkt_set</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">bkt_set</span>\n    <span class=\"k\">have</span> <span class=\"n\">j_isLt</span><span class=\"o\">:</span> <span class=\"n\">j.val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">j.val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"o\">(</span><span class=\"n\">Array.set</span> <span class=\"n\">source</span> <span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h_i</span><span class=\"o\">}</span> <span class=\"n\">AssocList.nil</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">j.isLt</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span>\n    <span class=\"n\">use</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">j</span> <span class=\"n\">j_isLt</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">j_i</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bkt_set</span><span class=\"o\">]</span>\n    <span class=\"n\">split</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">i_j</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">i_j</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">j_i</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_le_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">j_i</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">j_i</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ab_mem</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">g</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foldl_reinsertAux</span><span class=\"o\">]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">left</span>\n    <span class=\"n\">left</span>\n    <span class=\"n\">apply</span> <span class=\"n\">g</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">bkt</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">ab_mem</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">i_j</span><span class=\"o\">,</span> <span class=\"n\">bkt_j</span><span class=\"o\">⟩</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">j_i</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j.val</span>\n    <span class=\"n\">left</span>\n    <span class=\"n\">right</span>\n    <span class=\"k\">have</span> <span class=\"n\">source_eq</span><span class=\"o\">:</span> <span class=\"n\">source</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">source</span><span class=\"o\">[</span><span class=\"n\">j.val</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">j_i</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">source_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">bkt_j</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ab_mem</span>\n\n    <span class=\"n\">right</span>\n    <span class=\"n\">use</span> <span class=\"n\">bkt</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_k</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"o\">(</span><span class=\"n\">Array.set</span> <span class=\"n\">source</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h_i</span> <span class=\"o\">}</span> <span class=\"n\">AssocList.nil</span><span class=\"o\">))),</span> <span class=\"n\">k.val</span> <span class=\"bp\">=</span> <span class=\"n\">j.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">k'</span><span class=\"o\">:</span> <span class=\"n\">j.val</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"o\">(</span><span class=\"n\">Array.set</span> <span class=\"n\">source</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h_i</span> <span class=\"o\">}</span> <span class=\"n\">AssocList.nil</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Array.size_set</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">j.isLt</span>\n      <span class=\"n\">use</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">j.val</span> <span class=\"n\">k'</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h_k</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k_j</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">constructor</span>\n      <span class=\"n\">use</span> <span class=\"n\">k</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">k_j</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_le_iff</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_of_le_of_ne</span>\n        <span class=\"n\">apply</span> <span class=\"n\">i_j</span>\n        <span class=\"n\">exact</span> <span class=\"n\">j_i</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Array.get_set</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">split</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rename_i</span> <span class=\"n\">i_k</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">i_k</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">j_i</span>\n        <span class=\"n\">contradiction</span>\n\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bkt_j</span><span class=\"o\">]</span>\n        <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">k_j</span><span class=\"o\">]</span>\n        <span class=\"k\">have</span> <span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">source.size</span> <span class=\"bp\">=</span> <span class=\"n\">Array.size</span> <span class=\"o\">(</span><span class=\"n\">Array.set</span> <span class=\"n\">source</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h_i</span> <span class=\"o\">}</span> <span class=\"n\">AssocList.nil</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">simp</span>\n        <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">k.isLt</span>\n      <span class=\"n\">exact</span> <span class=\"n\">ab_mem</span>\n</code></pre></div>",
        "id": 433782988,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1713364063
    },
    {
        "content": "<p>I reordered the forward direction a bit and added another lemma to simplify the proof and now it works. Thank you for your help.</p>",
        "id": 433808678,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1713366902
    }
]