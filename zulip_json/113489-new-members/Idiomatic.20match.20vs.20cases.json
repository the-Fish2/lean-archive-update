[
    {
        "content": "<p>Sometimes it's clear when one makes more sense than the other. If you need pattern matching, you'll need <code>match</code>. If you're relying on the shape of your type as a shorthand (like <code>cases d &lt;;&gt; simp</code>), then you'll need <code>cases</code>.</p>\n<p>What about places where either will do? <br>\nAre there style/other considerations at play?</p>",
        "id": 435601426,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1714142920
    },
    {
        "content": "<p>I'd say you will generally see cases and rcases dominate in proofs</p>",
        "id": 435611493,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1714146220
    },
    {
        "content": "<p>I know <code>match</code> generalizes the context differently from how <code>cases</code> does (<code>cases</code> is generally \"better\" at this I think), though I don't immediately have an example of this.</p>\n<p>There's not much <code>match</code> in tactic proofs out there yet, since it's new to Lean 4. For inductive proofs though, there are lots of examples of a <code>match</code> term since it can be a lot easier to do induction via recursion. That gives you the full power of the termination checker, which figures out what you actually are inducting on.</p>",
        "id": 435636726,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714155160
    },
    {
        "content": "<p>Sounds like cases is typically preferred when either would work.</p>",
        "id": 435644449,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1714158779
    }
]