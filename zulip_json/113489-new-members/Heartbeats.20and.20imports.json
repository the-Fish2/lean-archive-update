[
    {
        "content": "<p>I'm curious why in this example, as we import more of the library, the heartbeat count goes up and then down.  This is just supposed to be educational; I'm hitting heartbeat issues in more complicated situations than this.</p>\n<p>8674 heartbeats:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Subalgebra.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Module.End</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">200000</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Subring.centralizer</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>30345 heartbeats:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Complex.Polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Subalgebra.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Module.End</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">200000</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Subring.centralizer</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>2538 heartbeats:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Module.End</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">200000</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Subring.centralizer</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 410895651,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704224363
    },
    {
        "content": "<p>If you use <code>set_option trace.Meta.synthInstance true</code> you can see the path instance synthesis takes, this could be faster or slower depending on what instances are in the imported files, but isn't monotonic necessarily. For example an instance in a later file might more quickly lead to a solution to the synthesis problem.</p>",
        "id": 410896243,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704224651
    },
    {
        "content": "<p>That 30345 heartbeats example is bad because it actually goes over Lean's time limit. So it's interesting to see what is going wrong. You can do it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Complex.Polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Subalgebra.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Module.End</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">200000</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Subring.centralizer</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Within the output is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Elab.command</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">757608</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Subring.centralizer</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>and that's a long time for typeclass inference to do something which looks so straightforward. Clicking on the <code>▶</code> unfolds it and you can chase the number until you find the following 800+ line long beauty <a href=\"https://gist.github.com/kbuzzard/2f6e84f797ce21999468ebf243e11b53\">here</a>. Mathematically that's just Lean being really stupid for a long time. It turns out that typeclass inference is phenomenally difficult though, and this is basically the computer just trying lots of possibilities in a really stupid order (if we could figure out how to say \"Lean obviously don't think about anything involving linear orders because they're not going to help\" then we would, but as far as I know we can't).</p>",
        "id": 410920087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704238015
    }
]