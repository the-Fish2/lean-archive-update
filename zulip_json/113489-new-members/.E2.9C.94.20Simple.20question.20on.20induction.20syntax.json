[
    {
        "content": "<p>Writing <code>example (n : ℕ) : n + 0 = n := by\n  induction n with d hd</code> I get the error <code>unknown tactic</code>. What am I doing wrong here?  I am importing <code>Mathlib.Tactic</code>...</p>",
        "id": 420897584,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707664807
    },
    {
        "content": "<p>Use <code>induction'</code></p>",
        "id": 420897669,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707664894
    },
    {
        "content": "<p>thanks! where is that documented? I am kinda overwhelmed by all the documentation.</p>",
        "id": 420897756,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707664943
    },
    {
        "content": "<p>Unsure. The reason is that core Lean changed the syntax of <code>induction</code> and mathlib users don't really like it, so we restored the old syntax as <code>induction'</code>.</p>",
        "id": 420897854,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707665024
    },
    {
        "content": "<p>So how would I write things with the core Lean syntax?</p>",
        "id": 420897928,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707665054
    },
    {
        "content": "<p>Also which syntax should I follow as a newcomer :/</p>",
        "id": 420897960,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707665087
    },
    {
        "content": "<p>I would suggest the <code>induction'</code> syntax. It's more forgiving</p>",
        "id": 420897974,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707665104
    },
    {
        "content": "<p>Okay thanks a lot!</p>",
        "id": 420898084,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707665200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690867\">Philipp SL Schäfer</span> <a href=\"#narrow/stream/113489-new-members/topic/Simple.20question.20on.20induction.20syntax/near/420897928\">said</a>:</p>\n<blockquote>\n<p>So how would I write things with the core Lean syntax?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 420898233,
        "sender_full_name": "Richard Copley",
        "timestamp": 1707665324
    },
    {
        "content": "<p>Maybe I could quickly ask another newcomer question, I have this simple file, but despite using <code>open Nat</code> I get errors when not using the <code>Nat.</code> prefix</p>",
        "id": 420898260,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707665350
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">warningAsError</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"c1\">-- simple proof for n + 0 = 0 assuming that 0 + n = n</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n  <span class=\"c1\">-- base case</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_add</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"c1\">-- induction step</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">]</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 420898272,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707665364
    },
    {
        "content": "<p>I don't think this explanation is quite right. <code>induction'</code> was introduced to make it easier to port code from lean 3; I don't think there's a preference in mathlib as a whole for it (there are some contributors who prefer it, though)</p>",
        "id": 420898347,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707665407
    },
    {
        "content": "<p>Some theorems are \"protected\", which means <code>open</code> doesn't bring them into scope</p>",
        "id": 420898605,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707665616
    },
    {
        "content": "<p>Notably, there's also a general <code>zero_add</code> that's not about <code>Nat</code>, and you'd get an ambiguity with that</p>",
        "id": 420898702,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707665687
    },
    {
        "content": "<p>Okay I see! this makes sense :)</p>",
        "id": 420898743,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707665722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690867\">Philipp SL Schäfer</span> has marked this topic as resolved.</p>",
        "id": 420919362,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707683292
    }
]