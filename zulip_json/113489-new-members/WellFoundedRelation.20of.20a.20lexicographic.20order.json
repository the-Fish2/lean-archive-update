[
    {
        "content": "<p>I think lexicographic order is wellfounded and we may have something like <code> instance [WellFoundedRelation α] : WellFoundedRelation (List α) where </code> to imply it. Does anyone know if we have this and where it is? <br>\nOr just use <code>measure</code> but how can I map strings with different length to a number ?</p>",
        "id": 434890474,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713841103
    },
    {
        "content": "<p>found at <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/List/Chain.html#WellFounded.list_chain\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/List/Chain.html#WellFounded.list_chain</a>' but it only works on  <code>r</code>-decreasing chains .</p>",
        "id": 434893746,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713842726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> has marked this topic as resolved.</p>",
        "id": 434893754,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713842729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> has marked this topic as unresolved.</p>",
        "id": 434895164,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713843427
    },
    {
        "content": "<p>I guess lexicographic order is not well founded maybe.</p>",
        "id": 434895765,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713843731
    },
    {
        "content": "<p>The default <code>&lt;</code> relation on lists is actually already defined to be the lexicographic order (assuming you import <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/List/Lex.html\">Mathlib.Data.List.Lex</a>). All that's missing is an instance of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lex</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">List.instWellFoundedLT</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">WellFoundedLT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">WellFoundedLT</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">wf</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 434904779,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1713849448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500038\">Timo Carlin-Burns</span> <a href=\"#narrow/stream/113489-new-members/topic/WellFoundedRelation.20of.20a.20lexicographic.20order/near/434904779\">said</a>:</p>\n<blockquote>\n<p>The default <code>&lt;</code> relation on lists is actually already defined to be the lexicographic order (assuming you import <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/List/Lex.html\">Mathlib.Data.List.Lex</a>). All that's missing is an instance of</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lex</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">List.instWellFoundedLT</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">WellFoundedLT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">WellFoundedLT</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">wf</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Do you have any suggestions on how to prove it? Is there a quick lemma that might be useful, or should I start from the very beginning if I want to use it?</p>",
        "id": 434907281,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713851443
    },
    {
        "content": "<p>I think <code>isStrictTotalOrder</code> should be very helpful when prove WellFoundedLT. How can I find lemmas connect them?</p>",
        "id": 434909264,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713852657
    },
    {
        "content": "<p>I found <code>Mathlib.Data.Finsupp.Lex</code> and there is <code>WellFoundedLT</code>.</p>",
        "id": 434914310,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713855014
    },
    {
        "content": "<p>I actually am not sure whether it is well founded. I think maybe not. I'm working on a counterexample now</p>",
        "id": 434914518,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1713855109
    },
    {
        "content": "<p>Here is an infinite strictly decreasing sequence of <code>List (Fin 2)</code> under the lexicographic order</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lex</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mySeq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.replicate</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mySeq_lt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mySeq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">mySeq</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mySeq</span><span class=\"o\">,</span> <span class=\"n\">List.replicate_succ'</span><span class=\"o\">,</span> <span class=\"n\">List.append_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.Lex.append_left</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 434916427,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1713855850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500038\">Timo Carlin-Burns</span> <a href=\"#narrow/stream/113489-new-members/topic/WellFoundedRelation.20of.20a.20lexicographic.20order/near/434916427\">said</a>:</p>\n<blockquote>\n<p>Here is an infinite strictly decreasing sequence of <code>List (Fin 2)</code> under the lexicographic order</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lex</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mySeq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.replicate</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mySeq_lt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mySeq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">mySeq</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mySeq</span><span class=\"o\">,</span> <span class=\"n\">List.replicate_succ'</span><span class=\"o\">,</span> <span class=\"n\">List.append_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.Lex.append_left</span>\n  <span class=\"n\">decide</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you very much. It is not well founded. Then I guess for all the List that is shorter than a certain length, it is well founded on lexicographic order. This should be enough from my problem. Let me see if I can prove it.</p>",
        "id": 434917453,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713856188
    },
    {
        "content": "<p>It's hard to prove a general lemma. The best way to use it in practice is to use a limited character set and a limited length of <code>List</code>, and map the string to a Nat to prove termination.</p>",
        "id": 434932198,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713861166
    }
]