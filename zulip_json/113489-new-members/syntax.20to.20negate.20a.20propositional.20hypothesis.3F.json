[
    {
        "content": "<p>Dumb question - given a hypothesis such as <code>h : 1 + 1 = 3</code>, how do I construct its negation <code>¬ h</code>?</p>\n<p>I'm getting an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n <span class=\"bp\">¬</span><span class=\"n\">h</span>\n<span class=\"n\">argument</span>\n <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Here's the full code example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">demo</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>Related vocabulary question - in informal conversation, is there a precise way to say that the type of the type of <code>h</code> is <code>Prop</code>? I wrote \"propositional hypothesis\" in my topic title but I don't know if that means what I want.</p>\n<p>Thanks!</p>",
        "id": 419907040,
        "sender_full_name": "Daniel Windham",
        "timestamp": 1707159252
    },
    {
        "content": "<p>The type of <code>h</code> is <em>not</em> <code>Prop</code>. The type of <code>h</code> is <code>1 + 1 = 3</code>, that's exactly what <code>h : 1 + 1 = 3</code> means. Here <code>h</code> is <em>proof</em> that <code>1 + 1 = 3</code>.</p>",
        "id": 419907333,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707159378
    },
    {
        "content": "<p>That's why you can't write <code>¬ h</code>, because <code>¬ : Prop → Prop</code>. You can't take the negation of a proof.</p>",
        "id": 419907421,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707159408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> it sounds like I'm stuck on something deeper then. I am trying to construct a proof by contradiction. If I write <code>have h2: ¬ (1 + 1 = 3)</code> in my original example, the proof by contradiction completes. I'd rather write <code>h2</code> in terms of <code>h1</code> because it will be more concise. In my real example, <code>h1</code> is a lot longer to write out. Does Lean provide a way to write <code>h2</code> in terms of <code>h1</code>?</p>",
        "id": 419908586,
        "sender_full_name": "Daniel Windham",
        "timestamp": 1707159821
    },
    {
        "content": "<p>You could do something like the following, but it's less useful than you might think.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">TypeOf</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">demo</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">TypeOf</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">TypeOf</span>\n    <span class=\"c1\">-- ⊢ ¬1 + 1 = 3</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>It's easier to use the <code>contrapose</code> tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">demo</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">contrapose</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- ⊢ ¬1 + 1 = 3</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 419914918,
        "sender_full_name": "Richard Copley",
        "timestamp": 1707162042
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span> , that's what I was looking for.</p>\n<p>Agreed that <code>contrapose</code> usually makes more sense. However, I don't have contrapose right now because I'm working in the std library. (Perhaps contrapose belongs in std, I haven't gone and asked anyone yet...)</p>",
        "id": 419915407,
        "sender_full_name": "Daniel Windham",
        "timestamp": 1707162217
    },
    {
        "content": "<p><code>contrapose</code> is a tiny tactic that could very easily move to std or your own code. The more complicated bit is <code>contrapose!</code>.</p>",
        "id": 419915719,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707162328
    },
    {
        "content": "<p>Or there's this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">demo</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- 1 + 1 = 3 → False</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 419915762,
        "sender_full_name": "Richard Copley",
        "timestamp": 1707162343
    },
    {
        "content": "<p>Hopefully you can simply drop</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic.Contrapose</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mtr</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">hp</span> <span class=\"bp\">↦</span> <span class=\"n\">by_contra</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h'</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Transforms the goal into its contrapositive.</span>\n<span class=\"sd\">* `contrapose`     turns a goal `P → Q` into `¬ Q → ¬ P`</span>\n<span class=\"sd\">* `contrapose h`   first reverts the local assumption `h`, and then uses `contrapose` and `intro h`</span>\n<span class=\"sd\">* `contrapose h with new_h` uses the name `new_h` for the introduced hypothesis</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">contrapose</span><span class=\"o\">)</span> <span class=\"s2\">\"contrapose\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\" with \"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">contrapose</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">refine</span> <span class=\"n\">mtr</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">contrapose</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">revert</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">;</span> <span class=\"n\">contrapose</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">contrapose</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">revert</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">;</span> <span class=\"n\">contrapose</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"bp\">$</span><span class=\"n\">e'</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>into your current file.</p>",
        "id": 419915822,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707162363
    },
    {
        "content": "<p>Also, since you're in <code>Std</code>, you can just use <code>omega</code> to close this goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">demo</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 419917864,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707163086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> it looks like there are a few more missing definitions in std:</p>\n<p><code>lemma</code> errors with <code>unexpected identifier; expected command</code>. I assume this is an alias for <code>theorem</code> defined outside of std. I replaced it with <code>theorem</code>, at which point I hit the next error:</p>\n<p><code>by_contra</code> errors with <code>unknown identifier 'by_contra' </code>. <del>Is this definition easy to pull from Mathlib?</del> I'm not sure what to make of this, since I can use <code>by_contra</code> as a tactic within a proof.</p>",
        "id": 419917866,
        "sender_full_name": "Daniel Windham",
        "timestamp": 1707163087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/113489-new-members/topic/syntax.20to.20negate.20a.20propositional.20hypothesis.3F/near/419914918\">said</a>:</p>\n<blockquote>\n<p>You could do something like the following, but it's less useful than you might think.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">TypeOf</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is builtin to Lean as <code>type_of% x</code>, which unfolds immediately</p>",
        "id": 419918021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707163154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"662442\">Daniel Windham</span> <a href=\"#narrow/stream/113489-new-members/topic/syntax.20to.20negate.20a.20propositional.20hypothesis.3F/near/419917866\">said</a>:</p>\n<blockquote>\n<p>I'm not sure what to make of this, since I can use <code>by_contra</code> as a tactic within a proof.</p>\n</blockquote>\n<p>The tactic <code>by_contra</code> is in <code>Std.Tactic.Basic</code>, but the (\"term-mode\") function <code>by_contra</code> is in <code>Mathlib.Logic.Basic</code>.</p>",
        "id": 419919716,
        "sender_full_name": "Richard Copley",
        "timestamp": 1707163780
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mtr</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">hp</span> <span class=\"bp\">↦</span>  <span class=\"n\">Decidable.byCases</span> <span class=\"o\">(</span><span class=\"n\">dec</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"k\">fun</span> <span class=\"n\">nq</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">nq</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div>",
        "id": 419920086,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707163919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> Or there's <code>theorem demo (h : 1 + 1 = 3) : false := by cases h</code> since there are no free variables (it analyzes the constructors).</p>",
        "id": 419920829,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707164204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/syntax.20to.20negate.20a.20propositional.20hypothesis.3F/near/419920086\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mtr</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">hp</span> <span class=\"bp\">↦</span>  <span class=\"n\">Decidable.byCases</span> <span class=\"o\">(</span><span class=\"n\">dec</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"k\">fun</span> <span class=\"n\">nq</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">nq</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> that works now.</p>",
        "id": 419920871,
        "sender_full_name": "Daniel Windham",
        "timestamp": 1707164226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> what fun is a mallet when you have a sledgehammer? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> (joking of course)</p>",
        "id": 419921820,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707164597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"662442\">@Daniel Windham</span> maybe I'm off base but it sounds like you're really just trying to do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">very</span> <span class=\"n\">long</span> <span class=\"n\">and</span> <span class=\"n\">complicated</span> <span class=\"n\">proposition</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">demo</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>There's no need for <code>type_of%</code> or anything like that. The key to writing <code>h2</code> in terms of <code>h1</code> is to abstract out the common element into its own definition.</p>",
        "id": 419926051,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707166320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> thanks, that's a good trick. That's not quite my situation here, since the complicated proposition is the result of unfolding (and simplifying) subexpressions in the theorem's hypothesis. Is there a tactic to abstract out a subexpression from an existing goal or hypothesis in the proof state? I'd like to do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">demo</span> <span class=\"bp\">...</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"k\">let</span> <span class=\"n\">len</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">AssocList</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">AssocList.toList</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- define the subexpression</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">len</span><span class=\"o\">]</span> <span class=\"c1\">-- replace the subexpression in the goal with `len`</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">len</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- replace the subexpression in `h` with `len`</span>\n</code></pre></div>",
        "id": 419929881,
        "sender_full_name": "Daniel Windham",
        "timestamp": 1707167972
    },
    {
        "content": "<p>maybe the <code>set</code> tactic? it's like <code>let</code> but it replaces expressions with the newly defined variable where it can</p>",
        "id": 419930505,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707168239
    },
    {
        "content": "<p>Ah perfect, <code>set</code> is what I was looking for. (Though it's another tactic that's not in std lib, hmm...) Thanks <span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span>!</p>",
        "id": 419931264,
        "sender_full_name": "Daniel Windham",
        "timestamp": 1707168539
    },
    {
        "content": "<p>no problem!</p>",
        "id": 419931338,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707168574
    },
    {
        "content": "<p>Here's a way to do this without <code>set</code>. This is what <code>set</code> does under the hood:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">demo</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">hh</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- construct an equality corresponding to the new definition</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hh</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hh</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 419937239,
        "sender_full_name": "Daniel Windham",
        "timestamp": 1707171025
    }
]