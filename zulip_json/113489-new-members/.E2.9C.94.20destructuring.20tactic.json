[
    {
        "content": "<p>Is there a tactic that given say a structure <code>x</code> that  has one or more type fields and/or prop fields, adds all of the contents of x to the local tactic environment?</p>\n<p>here is a minimal non-working example (assume such a tactic is called <code>my_tac</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">8</span><span class=\"o\">}}:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Tactic state before:</span>\n<span class=\"cm\">⊢ True</span>\n<span class=\"cm\">x : { n // n &lt; 8 }</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">my_tac</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Tactic state after:</span>\n<span class=\"cm\">⊢ True</span>\n<span class=\"cm\">x : { n // n &lt; 8 }</span>\n<span class=\"cm\">n1 : Nat</span>\n<span class=\"cm\">h1 : n1 &lt; 8</span>\n<span class=\"cm\">-/</span>\n\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 437832603,
        "sender_full_name": "Somo S.",
        "timestamp": 1715266317
    },
    {
        "content": "<p>Does <code>rcases x with ⟨n1, h1⟩</code> count?</p>",
        "id": 437833332,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715266558
    },
    {
        "content": "<p>In general, I think that <code>cases</code>, <code>rcases</code> and <code>ext</code> seem close to what you are asking, but they are not entirely automatic.</p>",
        "id": 437833473,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715266603
    },
    {
        "content": "<p>not quite, looks like my example above was not good enough.. let me try and reproduce what rcases does in mwe</p>",
        "id": 437835336,
        "sender_full_name": "Somo S.",
        "timestamp": 1715267243
    },
    {
        "content": "<p>basically rcases / cases changes the goal and I dont want it to touch the goal.. I only want it to add the contents of the structure to the environment</p>",
        "id": 437835947,
        "sender_full_name": "Somo S.",
        "timestamp": 1715267431
    },
    {
        "content": "<p>here is an example where rcases doesn't work in where the kind of tactic i'm looking for should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">8</span><span class=\"o\">}}:</span> <span class=\"n\">x.val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Tactic state:</span>\n<span class=\"cm\">⊢ x.val - 1 &lt; 8</span>\n<span class=\"cm\">x : { n // n &lt; 8 }</span>\n<span class=\"cm\">-/</span>\n  <span class=\"c1\">-- rcases x  -- &lt;-- FIXME</span>\n  <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">x.property</span> <span class=\"c1\">-- &lt;-- WORKS</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Tactic state:</span>\n<span class=\"cm\">⊢ x.val - 1 &lt; 8</span>\n<span class=\"cm\">x : { n // n &lt; 8 }</span>\n<span class=\"cm\">n1 : Nat</span>\n<span class=\"cm\">h1 : n1 &lt; 8</span>\n<span class=\"cm\">-/</span>\n\n  <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 437836090,
        "sender_full_name": "Somo S.",
        "timestamp": 1715267491
    },
    {
        "content": "<p>in this case I know that the exact name of the field I want to be added is <code>property</code> .. but if I was working with some other structure that has several fields, I don't want to have to care which exact field it should add to the environment ... it should just add all of them without changing the goal in a way that is analogous to what the have tactic is doing here</p>",
        "id": 437836566,
        "sender_full_name": "Somo S.",
        "timestamp": 1715267657
    },
    {
        "content": "<p>note that since I use omega at the end .. I also dont care what names are given to all these props and values that are being added to the environment</p>",
        "id": 437836894,
        "sender_full_name": "Somo S.",
        "timestamp": 1715267775
    },
    {
        "content": "<p>I do not know of such a tactic and in general there aren't that many tactics that look inside structures, I think.</p>",
        "id": 437838866,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715268555
    },
    {
        "content": "<p>here is the most faithful example of what I'm expecting (imagine condensing the entire sequence of haves into one tactic):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">MyStruct</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">3</span>\n  <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">MyStruct</span><span class=\"o\">}:</span> <span class=\"mi\">13</span> <span class=\"bp\">*</span> <span class=\"n\">s.x</span> <span class=\"bp\">+</span> <span class=\"mi\">11</span> <span class=\"bp\">*</span> <span class=\"n\">s.y</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"n\">s.z</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">23</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Tactic state before:</span>\n<span class=\"cm\">⊢ 13 * s.x + 11 * s.y + 7 * s.z &gt; 23</span>\n<span class=\"cm\">s : MyStruct</span>\n<span class=\"cm\">-/</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">s.x</span>\n  <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">s.y</span>\n  <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">s.z</span>\n  <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">s.h1</span>\n  <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">s.h2</span>\n  <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">s.h3</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Tactic state after:</span>\n<span class=\"cm\">⊢ 13 * s.x + 11 * s.y + 7 * s.z &gt; 23</span>\n<span class=\"cm\">x✝ : s.x &gt; 5</span>\n<span class=\"cm\">x✝¹ : s.y &gt; 3</span>\n<span class=\"cm\">x✝² : s.x &gt; 2</span>\n<span class=\"cm\">x✝³ : Nat := s.z</span>\n<span class=\"cm\">x✝⁴ : Nat := s.y</span>\n<span class=\"cm\">x✝⁵ : Nat := s.x</span>\n<span class=\"cm\">s : MyStruct</span>\n<span class=\"cm\">-/</span>\n\n  <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 437839361,
        "sender_full_name": "Somo S.",
        "timestamp": 1715268721
    },
    {
        "content": "<p>You can destructure with the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">MyStruct</span><span class=\"o\">}:</span> <span class=\"mi\">13</span> <span class=\"bp\">*</span> <span class=\"n\">s.x</span> <span class=\"bp\">+</span> <span class=\"mi\">11</span> <span class=\"bp\">*</span> <span class=\"n\">s.y</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"n\">s.z</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">23</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n  <span class=\"n\">dsimp</span>\n  <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 437843288,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1715270207
    },
    {
        "content": "<p>thanks looks like I can just combine the suggestions into one like <code>cases s; dsimp</code></p>",
        "id": 437850439,
        "sender_full_name": "Somo S.",
        "timestamp": 1715272816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> has marked this topic as resolved.</p>",
        "id": 437850458,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715272825
    }
]