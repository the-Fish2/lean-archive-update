[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">12</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n</code></pre></div>\n<p>which tactic is able to accomplish this? Got used to dealing with addition and multiplication but not division, i looked through mathlib in vain and some of the books on the lean website(like mathematics in lean ) .can someone point me in the right direction</p>",
        "id": 440328152,
        "sender_full_name": "Jad Abou Hawili",
        "timestamp": 1716472393
    },
    {
        "content": "<p>This works</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">12</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 440331930,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716473407
    },
    {
        "content": "<p>To be honest I am a little surprised <code>linarith</code> does it, I've found it using <code>hint</code>.</p>",
        "id": 440331994,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716473423
    },
    {
        "content": "<p>You can of course do a more low-level approach if you want.</p>",
        "id": 440332124,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716473459
    },
    {
        "content": "<p>Also <code>omega</code> works, but that's maybe not terribly educational. This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">12</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">mul_left_cancel</span><span class=\"w\"> </span><span class=\"n\">three_pos</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 440334231,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716474107
    },
    {
        "content": "<p>Thinking pedagogically, there are two approaches. What is the math proof you have in mind?</p>",
        "id": 440334407,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716474160
    },
    {
        "content": "<p>I see two proofs:</p>\n<ul>\n<li>divide by <code>3</code> at h and there is nothing to do.</li>\n<li>multiply the goal by <code>3</code> and again there is nothing to do.</li>\n</ul>",
        "id": 440334507,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716474191
    },
    {
        "content": "<p>Let's try the first approach. Here there is an important lesson: at least at the beginning <em>avoid division on natural numbers</em>, it is not what you think it is. The trick is to say to Lean \"well, instead of working with natural numbers, let's move to <code>ℚ</code>, this is what the tactic <code>qify</code> does. Then we can just divide, using the tactic <code>apply_fun</code>. Since <code>h</code> is now a little mess, let's use <code>simp at h</code>. Now we can just <code>rw [h]</code> and the goal is <code>12/3=4</code>, and <code>norm_num</code> is the tactic for this kind of problems. The actual code is</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">12</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">qify</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">⊢</span>\n<span class=\"w\">  </span><span class=\"n\">apply_fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">·/</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 440335217,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716474386
    },
    {
        "content": "<p>But dividing natural numbers has issues - so you're usually better off <em>canceling</em> than <em>dividing</em> (though that distinction rarely comes up outside formalisation, in my experience).</p>\n<p>That is complicated a little by the fact that there isn't <em>literally</em> a factor you can cancel out in the hypothesis, so you'd want to rewrite the 12 to 3*4 first</p>",
        "id": 440335303,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716474414
    },
    {
        "content": "<p>The other approach gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">12</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">apply_fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*·</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">mul_right_injective₀</span><span class=\"w\"> </span><span class=\"bp\">?_</span>\n<span class=\"w\">  </span><span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 440335473,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716474462
    },
    {
        "content": "<p>note that <code>mul_right_injective₀</code> is found by <code>apply?</code></p>",
        "id": 440335600,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716474490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Dividing.20Both.20Sides.20Of.20An.20Equation.20By.20A.20Constant/near/440331930\">said</a>:</p>\n<blockquote>\n<p>This works</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">12</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">linarith</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>isnt linarith supposed to be for inequalities? strange. I know about linarith but it never occurred to me to try it here.</p>",
        "id": 440337513,
        "sender_full_name": "Jad Abou Hawili",
        "timestamp": 1716475045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Dividing.20Both.20Sides.20Of.20An.20Equation.20By.20A.20Constant/near/440335303\">said</a>:</p>\n<blockquote>\n<p>But dividing natural numbers has issues - so you're usually better off <em>canceling</em> than <em>dividing</em> (though that distinction rarely comes up outside formalisation, in my experience).</p>\n<p>That is complicated a little by the fact that there isn't <em>literally</em> a factor you can cancel out in the hypothesis, so you'd want to rewrite the 12 to 3*4 first</p>\n</blockquote>\n<p>Thanks for emphasizing the distinction between cancelation and dividing both sides. But how do i rewrite 12 as 3*4?</p>",
        "id": 440337822,
        "sender_full_name": "Jad Abou Hawili",
        "timestamp": 1716475130
    },
    {
        "content": "<p>I assume after that i can use a mul_cancel tactic, ill check mathlib</p>",
        "id": 440337935,
        "sender_full_name": "Jad Abou Hawili",
        "timestamp": 1716475166
    },
    {
        "content": "<p>mul_left_cancel for example</p>",
        "id": 440338363,
        "sender_full_name": "Jad Abou Hawili",
        "timestamp": 1716475279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Dividing.20Both.20Sides.20Of.20An.20Equation.20By.20A.20Constant/near/440334231\">said</a>:</p>\n<blockquote>\n<p>Also <code>omega</code> works, but that's maybe not terribly educational. This also works:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">12</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">mul_left_cancel</span><span class=\"w\"> </span><span class=\"n\">three_pos</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">norm_num</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>just saw this, sorry for the redundant suggestion</p>",
        "id": 440338643,
        "sender_full_name": "Jad Abou Hawili",
        "timestamp": 1716475347
    },
    {
        "content": "<p>You can do <code>have : 12 = 3 * 4 := by norm_num; rw [this] at h</code></p>",
        "id": 440338757,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716475383
    },
    {
        "content": "<p>i don't know what <code>this</code> is , thanks for the pointers. Now i know what to look into. ill mark as solved</p>",
        "id": 440339068,
        "sender_full_name": "Jad Abou Hawili",
        "timestamp": 1716475481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714864\">Jad Abou Hawili</span> has marked this topic as resolved.</p>",
        "id": 440339142,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716475504
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">12</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">qify</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">⊢</span>\n<span class=\"w\">  </span><span class=\"n\">polyrith</span>\n</code></pre></div>",
        "id": 440352679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716479786
    },
    {
        "content": "<p>yay, more new things to learn about.</p>",
        "id": 440375894,
        "sender_full_name": "Jad Abou Hawili",
        "timestamp": 1716488727
    },
    {
        "content": "<p><code>polyrith</code> will solve linear equalities which are implied by hypotheses (and also some nonlinear ones -- it uses a groebner basis algorithm)</p>",
        "id": 440399018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716498525
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">12</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">helper</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">helper</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">zlt</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">mul_left_cancel</span><span class=\"w\"> </span><span class=\"n\">zlt</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Just as a reference, this is the solution that i found easiest to understand and read, using tactics im already used to</p>",
        "id": 440413526,
        "sender_full_name": "Jad Abou Hawili",
        "timestamp": 1716506429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714864\">Jad Abou Hawili</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Dividing.20Both.20Sides.20Of.20An.20Equation.20By.20A.20Constant/near/440337513\">said</a>:</p>\n<blockquote>\n<p>isnt linarith supposed to be for inequalities? strange. I know about linarith but it never occurred to me to try it here.</p>\n</blockquote>\n<p>not really, it stands for <em>linear arithmetic</em> after all, equalities are well within its scope</p>",
        "id": 440500840,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1716554265
    },
    {
        "content": "<p>For a very long time, linarith was our only tactic that was able to deal with inequalities, so people got used to think of it as an inequality tactic. But it handled equalities from the very beginning.</p>",
        "id": 440512387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716558225
    }
]