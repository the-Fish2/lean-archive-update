[
    {
        "content": "<p>This is a problem I have isolated from my code, where <code>simp</code> is converting a matrix into a natural number. I can't figure out what theorem it uses either, because <code>simp?</code> just says <code>Try this : simp only </code>.  Why is this happening, and how do I fix it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">∨</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 442159057,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1717395809
    },
    {
        "content": "<p>Here, the goal after the simp is <code>OfNat.ofNat 1 i j = 1 ∨ OfNat.ofNat 1 i j = 0</code>. Note that <code>OfNat.ofNat</code> takes a nat and returns an object of the appropriate type. In other words, it is \"equivalent\" to the type ascription <code>: Matrix (Fin m) (Fin m) Rat</code> you provided. In VS Code, you can hover over the term in the infoview to see its type.</p>",
        "id": 442176133,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1717401068
    },
    {
        "content": "<p>The \"ugly\" version of <code>OfNat.ofNat 1</code> in this case, with all the implicits, is <code>(@OfNat.ofNat.{0} (Matrix.{0, 0, 0} (Fin m) (Fin m) Rat) (@OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))</code>, the first argument being the output type.</p>",
        "id": 442176424,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1717401156
    },
    {
        "content": "<p>in other words, <code>simp</code> is not doing what you're saying it does, <code>1</code> means \"the matrix <code>1</code>\", i.e. the identity matrix.</p>",
        "id": 442177421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717401459
    },
    {
        "content": "<p>Yeah, but simp should not be introducing those explicit ofNat calls</p>",
        "id": 442179257,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717401933
    },
    {
        "content": "<p>That's a good point. <code>simp</code> is turning the term <code>(@OfNat.ofNat.{0} (Matrix.{0, 0, 0} (Fin m) (Fin m) Rat) 1 ...)</code> into <code>(@OfNat.ofNat.{0} (Matrix.{0, 0, 0} (Fin m) (Fin m) Rat) (@OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) ...)</code> (where <code>...</code> denotes equal terms in <code>set_option pp.all true</code>), so it is inserting an extra <code>ofNat</code> from Nat to Nat.</p>",
        "id": 442181870,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1717402644
    },
    {
        "content": "<p>Okay, now I understand what <code>OfNat.ofNat</code> means. Thanks!</p>",
        "id": 442196814,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1717406703
    },
    {
        "content": "<p>Minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat_lit</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">dsimp</span><span class=\"w\"> </span><span class=\"n\">only</span>\n<span class=\"w\">  </span><span class=\"c1\">-- unsolved goals</span>\n<span class=\"w\">  </span><span class=\"c1\">-- ⊢ OfNat.ofNat 0 0 0 = 0</span>\n</code></pre></div>",
        "id": 442276499,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1717426458
    },
    {
        "content": "<p>Leo fixed this in <a href=\"https://github.com/leanprover/lean4/pull/4481\">lean4#4481</a></p>",
        "id": 445337059,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1718711039
    }
]