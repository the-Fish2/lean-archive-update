[
    {
        "content": "<p>I can't seem to leverage known information about <code>xs</code> to accomplish this proof. What syntax would I use to just exhaustively go through each element? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nonDecreasing</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">),</span>  <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span><span class=\"bp\">;</span>\n  <span class=\"c1\">-- stuck</span>\n</code></pre></div>\n<p>I tried some <code>induction</code> approaches</p>",
        "id": 437896631,
        "sender_full_name": "Quinn",
        "timestamp": 1715293798
    },
    {
        "content": "<p><code>simp</code> seems to be able to do this automatically if you use <code>List.Pairwise</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp.rewrite</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nonDecreasing</span> <span class=\"o\">:</span> <span class=\"n\">List.Pairwise</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">xs</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>You can check out the trace to see what steps it uses.</p>",
        "id": 437897797,
        "sender_full_name": "Will Crichton",
        "timestamp": 1715294443
    },
    {
        "content": "<p>thanks! I'm trying to do this in a lightwegiht project that doens't have mathlib installed, though</p>",
        "id": 437899174,
        "sender_full_name": "Quinn",
        "timestamp": 1715295251
    },
    {
        "content": "<p>You don't actually need mathlib I think, just Batteries</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Batteries.Data.List.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp.rewrite</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nonDecreasing</span> <span class=\"o\">:</span> <span class=\"n\">List.Pairwise</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">xs</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>All it's doing is evaluation of the definition of the <code>Pairwise</code> function, which seems like the more idiomatic way to state this theorem anyway.</p>",
        "id": 437899604,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715295561
    },
    {
        "content": "<p>Cool. Is batteries an external dep? I couldn't find it when I googled, but I don't remember seeing anything like that when I grepped around lean4 source a few weeks ago</p>",
        "id": 437900048,
        "sender_full_name": "Quinn",
        "timestamp": 1715295792
    },
    {
        "content": "<p>Do you need the full O(n^2) comparisons here or just that adjacent elements are ordered? <a href=\"https://leanprover-community.github.io/mathlib4_docs/Batteries/Data/List/Basic.html#List.Chain\">List.Chain</a> might be good too if you have a long list.</p>",
        "id": 437900061,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715295811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"693606\">Quinn</span> <a href=\"#narrow/stream/113489-new-members/topic/prove.20list.20monotonic.20for.20known.20list/near/437900048\">said</a>:</p>\n<blockquote>\n<p>Cool. Is batteries an external dep? I couldn't find it when I googled, but I don't remember seeing anything like that when I grepped around lean4 source a few weeks ago</p>\n</blockquote>\n<p>As of a few days ago, Batteries is the new name of Std</p>",
        "id": 437900074,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715295831
    },
    {
        "content": "<p>List.chain should be fine!</p>",
        "id": 437900180,
        "sender_full_name": "Quinn",
        "timestamp": 1715295893
    }
]