[
    {
        "content": "<p>Is <code>obtain ⟨rfl | rfl⟩</code> supposed to substitute in each branch or am I misunderstanding what <code>rfl</code> does?</p>\n<p>toy example: <a href=\"https://live.lean-lang.org/#code=import%20Mathlib%0A%0Aexample%20(n%20%3A%20%E2%84%95)%20(h%20%3A%20n%20%3D%201%20%E2%88%A8%20n%20%3D%202)%20(h2%20%3A%20n%20%3D%203)%3A%20False%20%3A%3D%20by%0A%20%20obtain%20%E2%9F%A8rfl%20%7C%20rfl%E2%9F%A9%20%3A%3D%20h%0A%20%20%C2%B7%20sorry%0A%20%20%C2%B7%20sorry\">https://live.lean-lang.org/#code=import%20Mathlib%0A%0Aexample%20(n%20%3A%20%E2%84%95)%20(h%20%3A%20n%20%3D%201%20%E2%88%A8%20n%20%3D%202)%20(h2%20%3A%20n%20%3D%203)%3A%20False%20%3A%3D%20by%0A%20%20obtain%20%E2%9F%A8rfl%20%7C%20rfl%E2%9F%A9%20%3A%3D%20h%0A%20%20%C2%B7%20sorry%0A%20%20%C2%B7%20sorry</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">):</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- h2: 1 = 3</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- h2: n = 3 h✝: n = 2</span>\n</code></pre></div>\n<p>Naively I expected in the second branch <code>h2</code> to be <code>2 = 3</code></p>",
        "id": 437781140,
        "sender_full_name": "llllvvuu",
        "timestamp": 1715240398
    },
    {
        "content": "<p>You're using the wrong brackets</p>",
        "id": 437781266,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715240450
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">):</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>or simply drop the brackets (which wasn't possible in Lean 3)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">):</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 437781320,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715240487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> has marked this topic as resolved.</p>",
        "id": 437781430,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715240549
    },
    {
        "content": "<p>Pointy brackets <code>⟨⟩</code> match a specific constructor. <code>|</code> separates the matches between constructors</p>",
        "id": 437781439,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715240554
    },
    {
        "content": "<p>So <code>⟨rfl | rfl⟩</code> destructs something of the form <code>PLift (a = b ∨ c = d)</code>, namely a one-field structure wrapping a two-constructors inductive sort (and because of the <code>rfl</code> these two sorts should be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Eq#doc\">docs#Eq</a> something)</p>",
        "id": 437781584,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715240647
    },
    {
        "content": "<p>hah, this was a surprisingly instructive mistake, thanks!</p>",
        "id": 437781881,
        "sender_full_name": "llllvvuu",
        "timestamp": 1715240844
    }
]