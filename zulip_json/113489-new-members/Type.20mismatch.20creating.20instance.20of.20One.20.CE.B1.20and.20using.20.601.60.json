[
    {
        "content": "<p>Hi I am continuing the topic <a href=\"#narrow/stream/113489-new-members/topic/Failed.20to.20write.20a*b.20on.20Group.E2.82.81\">Failed to write a*b on Group₁</a> but now with a smaller example for failed using the notations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">One1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">onehh</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One1</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">One1.a</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">one_1</span> <span class=\"o\">[</span><span class=\"n\">One1</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 425641143,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709956053
    },
    {
        "content": "<p>But it gives an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismathced</span><span class=\"o\">:</span>\n  <span class=\"n\">rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">Group.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n</code></pre></div>",
        "id": 425641175,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709956072
    },
    {
        "content": "<p>Have you got autoImplicit on and you're a beginner? This is a big footgun for beginners. I conjecture that that a is an autoImplicit.</p>",
        "id": 425641421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709956188
    },
    {
        "content": "<p>Yeah Kevin I just begin learning Lean. The same code on live lean lang: <a href=\"https://live.lean-lang.org/#code=import%20Mathlib.Tactic%0D%0Anamespace%20Ex4%0D%0Aclass%20One1%20(%CE%B1%20%3A%20Type%20u)%20where%0D%0A%20%20a%20%3A%20%CE%B1%0D%0A%0D%0Ainstance%20onehh%20%7B%CE%B1%20%3A%20Type%20u%7D%20%5BOne1%20%CE%B1%5D%20%3A%20One%20%CE%B1%20%3A%3D%20%E2%9F%A8One1.a%E2%9F%A9%0D%0A%0D%0Atheorem%20one_1%20%5BOne1%20%CE%B1%5D%20%3A%20a%20%3D%201%20%3A%3D%20rfl%0D%0A--%20rfl%20failed%3A%0D%0A--%20type%20mismatch%0D%0A--%20%20%20rfl%0D%0A--%20has%20type%0D%0A--%20%20%20one%20%3D%20one%20%3A%20Prop%0D%0A--%20but%20is%20expected%20to%20have%20type%0D%0A--%20%20%20one%20%3D%201%20%3A%20Prop%0D%0A%0D%0A--%20%23check%20one1%0D%0A--%20--%20result%3A%0D%0A--%20--%20Ex4.one1.%7Bu%7D%20%7B%CE%B1%20%3A%20Type%20u%7D%20%5Binst%E2%9C%9D%20%3A%20One1%20%CE%B1%5D%20%3A%20One%20%CE%B1%0D%0A%0D%0Avariable%20%5BOne1%20%CE%B1%5D%0D%0A%23check%20(1%3A%CE%B1)%0D%0A--%20%23check%20(inferInstance%20%3A%20One1%20%CE%B1).a%0D%0A--%20%23check%20one1.one%0D%0A%0D%0A%0D%0Aend%20Ex4%0D%0A%0D%0A\">https://live.lean-lang.org/#code=import%20Mathlib.Tactic%0D%0Anamespace%20Ex4%0D%0Aclass%20One1%20(%CE%B1%20%3A%20Type%20u)%20where%0D%0A%20%20a%20%3A%20%CE%B1%0D%0A%0D%0Ainstance%20onehh%20%7B%CE%B1%20%3A%20Type%20u%7D%20%5BOne1%20%CE%B1%5D%20%3A%20One%20%CE%B1%20%3A%3D%20%E2%9F%A8One1.a%E2%9F%A9%0D%0A%0D%0Atheorem%20one_1%20%5BOne1%20%CE%B1%5D%20%3A%20a%20%3D%201%20%3A%3D%20rfl%0D%0A--%20rfl%20failed%3A%0D%0A--%20type%20mismatch%0D%0A--%20%20%20rfl%0D%0A--%20has%20type%0D%0A--%20%20%20one%20%3D%20one%20%3A%20Prop%0D%0A--%20but%20is%20expected%20to%20have%20type%0D%0A--%20%20%20one%20%3D%201%20%3A%20Prop%0D%0A%0D%0A--%20%23check%20one1%0D%0A--%20--%20result%3A%0D%0A--%20--%20Ex4.one1.%7Bu%7D%20%7B%CE%B1%20%3A%20Type%20u%7D%20%5Binst%E2%9C%9D%20%3A%20One1%20%CE%B1%5D%20%3A%20One%20%CE%B1%0D%0A%0D%0Avariable%20%5BOne1%20%CE%B1%5D%0D%0A%23check%20(1%3A%CE%B1)%0D%0A--%20%23check%20(inferInstance%20%3A%20One1%20%CE%B1).a%0D%0A--%20%23check%20one1.one%0D%0A%0D%0A%0D%0Aend%20Ex4%0D%0A%0D%0A</a></p>",
        "id": 425641892,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709956395
    },
    {
        "content": "<p>Oh I did not turn any option about autoImplicit. Let me check how to turn it on.</p>",
        "id": 425641955,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709956430
    },
    {
        "content": "<p>Yeah I think that has autoImplicit on?</p>",
        "id": 425641967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709956433
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/dw_rD8sgOOB-7mlQyZj_Sduv/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dw_rD8sgOOB-7mlQyZj_Sduv/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/dw_rD8sgOOB-7mlQyZj_Sduv/image.png\"></a></div>",
        "id": 425642385,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709956613
    },
    {
        "content": "<p>I'm suggesting that you turn it and relaxedAutoImplicit off and then you'll see your error</p>",
        "id": 425642475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709956661
    },
    {
        "content": "<p>Yeah now I get the maybe right error:<br>\n<a href=\"/user_uploads/3121/zg5e04olhAs6jPXzejMgicaM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/zg5e04olhAs6jPXzejMgicaM/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/zg5e04olhAs6jPXzejMgicaM/image.png\"></a></div>",
        "id": 425642732,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709956779
    },
    {
        "content": "<p>Still some werid error. Maybe I should read MIL chapter7 first where there are more content on the notations. I am still in MIL chapter 6<span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 425643410,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709957059
    },
    {
        "content": "<p>Ah with the option</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">relaxedAutoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>Now I get it (at lest for the current topic): the <code>a</code> in the theorem is not the same <code>a</code> as in line 8 inside the class. It's in fact an argument created implicitly. Hence they are not the same.</p>",
        "id": 425655656,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709966113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Thank you very much for for supplying the information of these options. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 425655895,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709966233
    },
    {
        "content": "<p>No worries!</p>",
        "id": 425668251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709974016
    }
]