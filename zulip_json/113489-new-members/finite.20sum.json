[
    {
        "content": "<p>How can I write the finite sum from 0 to some integer i?</p>",
        "id": 426311914,
        "sender_full_name": "Junjie Bai",
        "timestamp": 1710328182
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum#doc\">docs#Finset.sum</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.range#doc\">docs#Finset.range</a></p>",
        "id": 426326751,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710333462
    },
    {
        "content": "<p>and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.succ#doc\">docs#Nat.succ</a> :-) (because <code>range i</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>x</mi><mo>&lt;</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">0\\leq x&lt;i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>)</p>",
        "id": 426449543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710377614
    },
    {
        "content": "<p>That helps! but I get a new question: I want to sum some function from \\Z to \\N, but Finset.range return the type of Finset \\N, how can I solve this?</p>",
        "id": 426465386,
        "sender_full_name": "Junjie Bai",
        "timestamp": 1710388292
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.Ioo#doc\">docs#Finset.Ioo</a>  ?</p>",
        "id": 426472029,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1710393760
    },
    {
        "content": "<p>There's no problem with <code>Finset \\N</code>, since Lean inserts coercions.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- Equivalent:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 426472436,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710394092
    },
    {
        "content": "<p>This is nice too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Icc</span> <span class=\"mi\">0</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>(Icc is \"interval closed to closed\")</p>",
        "id": 426472465,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710394127
    },
    {
        "content": "<p>Or you can use an \"Iverson bracket\" (indicator function) approach using an infinite sum:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∑'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 426472590,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710394218
    },
    {
        "content": "<p>Maybe this helps: <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/how.20to.20spell.20tsum.20in.20a.20set.3F\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/how.20to.20spell.20tsum.20in.20a.20set.3F</a></p>",
        "id": 426473910,
        "sender_full_name": "sdzz gndrc",
        "timestamp": 1710395295
    },
    {
        "content": "<p>That helps a lot! Thank you!</p>",
        "id": 426474689,
        "sender_full_name": "Junjie Bai",
        "timestamp": 1710395968
    }
]