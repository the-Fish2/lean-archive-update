[
    {
        "content": "<p>If I write <code>∏ p in b.primeFactors, ...</code>how do I obtain a proof of <code>p.Prime</code>?<br>\nI surely should use <code>Nat.prime_of_mem_primeFactors</code> but how do you obtain a proof of <code>p ∈ b.primeFactors</code> then?</p>",
        "id": 409646151,
        "sender_full_name": "Bartosz Towiański",
        "timestamp": 1703281788
    },
    {
        "content": "<p>Write <code>h : p in …</code> instead of just <code>p in … </code></p>",
        "id": 409646534,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703282043
    },
    {
        "content": "<p>Oh wait I was wrong.</p>",
        "id": 409646790,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703282236
    },
    {
        "content": "<p>you probably want to take the product over the subtype associated to <code>primeFactors</code></p>",
        "id": 409646806,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703282250
    },
    {
        "content": "<p>E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>  <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">b.primeFactors</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 409646890,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703282294
    },
    {
        "content": "<p>then you can use <code>p.2</code> to get the proof</p>",
        "id": 409646908,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703282306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Obtaining.20condition.20from.20Sum.2FProd/near/409646790\">said</a>:</p>\n<blockquote>\n<p>Oh wait I was wrong.</p>\n</blockquote>\n<p>Kyle and I are wanting to make you right, but it's not there yet</p>",
        "id": 409646939,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703282331
    },
    {
        "content": "<p>I was thinking ahead :)</p>",
        "id": 409646961,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703282355
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 409647119,
        "sender_full_name": "Jeremy Chen",
        "timestamp": 1703282443
    },
    {
        "content": "<p><code>∏ p in b.primeFactors.attach</code>?</p>",
        "id": 409648081,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703282974
    },
    {
        "content": "<blockquote>\n<p>then you can use <code>p.2</code> to get the proof</p>\n</blockquote>\n<blockquote>\n<p>∏ p in b.primeFactors.attach?</p>\n</blockquote>\n<p>Combining these two worked for me, thanks!</p>",
        "id": 409648255,
        "sender_full_name": "Bartosz Towiański",
        "timestamp": 1703283107
    },
    {
        "content": "<p>Using <code>p.mem</code> for clarity</p>",
        "id": 409648376,
        "sender_full_name": "Bartosz Towiański",
        "timestamp": 1703283194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"675493\">Bartosz Towiański</span> has marked this topic as resolved.</p>",
        "id": 409648384,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703283201
    },
    {
        "content": "<p><code>∏ p in b.primeFactors.attach</code> is effectively the same as <code>∏ p : b.primeFactors</code></p>",
        "id": 409649067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703283687
    },
    {
        "content": "<p>But how do you obtain a proof of <code>p ∈ b.primeFactor</code> then?</p>",
        "id": 409649663,
        "sender_full_name": "Bartosz Towiański",
        "timestamp": 1703284055
    },
    {
        "content": "<p><code>p.prop</code></p>",
        "id": 409650198,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703284386
    }
]