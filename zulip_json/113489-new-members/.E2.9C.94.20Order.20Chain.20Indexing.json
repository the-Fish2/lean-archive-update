[
    {
        "content": "<p>Is there anything in Mathlib that would allow me to directly reason about i-th elements in an Ordered Chain? <br>\nLooking at <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/Chain.html\">Mathlib.Order.Chain</a> I didn't see anything obvious (although admittedly my brain is not yet adept at decoding those definitions). I am even looking in the right place?</p>",
        "id": 446307022,
        "sender_full_name": "George Kojonis",
        "timestamp": 1719081612
    },
    {
        "content": "<p>No there is not, because a chain might actually not have such a thing as an i-th element (consider <code>univ : Set ℝ</code>)</p>",
        "id": 446315113,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719085258
    },
    {
        "content": "<p>Maybe you want to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OmegaCompletePartialOrder.Chain#doc\">docs#OmegaCompletePartialOrder.Chain</a> (a misnomer) rather than <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsChain#doc\">docs#IsChain</a> ?</p>",
        "id": 446315160,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719085292
    },
    {
        "content": "<p>Ah okay, thanks! That looks promising</p>",
        "id": 446315513,
        "sender_full_name": "George Kojonis",
        "timestamp": 1719085485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"720043\">George Kojonis</span> has marked this topic as resolved.</p>",
        "id": 446315550,
        "sender_full_name": "Notification Bot",
        "timestamp": 1719085501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"720043\">George Kojonis</span> has marked this topic as unresolved.</p>",
        "id": 447243373,
        "sender_full_name": "Notification Bot",
        "timestamp": 1719415286
    },
    {
        "content": "<p>Is there any Structure like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OmegaCompletePartialOrder.Chain#doc\">docs#OmegaCompletePartialOrder.Chain</a> that allows for transfinite indexing?</p>",
        "id": 447244401,
        "sender_full_name": "George Kojonis",
        "timestamp": 1719415470
    },
    {
        "content": "<p>Use <code>Ordinal \\r o \\alpha</code></p>",
        "id": 447247675,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719416057
    },
    {
        "content": "<p>I am not sure I understand, is that  a mapping from ordinals to naturals that you are suggesting? Forgive me, I have no idea how ordinals works, just hoped that the first limit ordinal would have been enough</p>",
        "id": 447248281,
        "sender_full_name": "George Kojonis",
        "timestamp": 1719416170
    },
    {
        "content": "<p>What <span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> is saying is that <code>OmegaComletePartialOrder.Chain α := (ℕ →o α)</code> (i.e., this is a definitional equality). In other words, a chain in <code>α</code> is just a monotone sequence, or equivalently, an order-preserving function from <code>ℕ</code> to <code>α</code> (that's the type <code>ℕ →o α</code>). So, if you want a <em>transfinite</em> chain in <code>α</code>, that's just a monotone function from ordinals to <code>α</code>, or simply <code>Ordinal →o α</code>.</p>",
        "id": 447275252,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1719421500
    },
    {
        "content": "<p>If you want transfinite chains of a particular \"length\" (i.e., with a particular order type, like <code>ω + 1</code>), then all you need is <code>v.out →o α</code> where <code>v : Ordinal</code> is the ordinal with the order type you desire.</p>",
        "id": 447276044,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1719421684
    },
    {
        "content": "<p>Alternatively, you can replace <code>v.out</code> with any type with a well order whose order type is the one you want (this is why <code>ℕ → α</code> works for <code>OmegaCompletePartialOrder.Chain</code>)</p>",
        "id": 447276658,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1719421841
    },
    {
        "content": "<p>What you are saying is that it's very simple to add my own transfinite Chain instance for a Complete Partial Order? I am failing to see how I can use all the synergies and ready functions that OmegaCompletePartialOrder has in that case, which come very handy to me.</p>",
        "id": 447278569,
        "sender_full_name": "George Kojonis",
        "timestamp": 1719422230
    },
    {
        "content": "<p>Maybe you can be more specific about what you're trying to do?</p>",
        "id": 447278863,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1719422286
    },
    {
        "content": "<p>Well it has to do with <a href=\"https://en.wikipedia.org/wiki/Kleene_fixed-point_theorem\">Kleene's fixpoint theorem</a>. I could use the Theorem itself as well but as I understand, it hasn't yet been implemented</p>",
        "id": 447279638,
        "sender_full_name": "George Kojonis",
        "timestamp": 1719422448
    },
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OmegaCompletePartialOrder#doc\">docs#OmegaCompletePartialOrder</a> worked perfectly for me, it's just that what I am trying to do should theoretically go up to some limit ordinal</p>",
        "id": 447279940,
        "sender_full_name": "George Kojonis",
        "timestamp": 1719422517
    },
    {
        "content": "<p>It's not clear to me how Kleene's fixed -point theorem needs transfinite chains. It seems to only need ω-chains.</p>",
        "id": 447280618,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1719422654
    },
    {
        "content": "<p>I am just doing some proofs from a paper, Kleene's theorem is not the reason as to why I need that (I guess I took the question too literally). Why I need a transfinite chain is just because that's what the theorem claims</p>",
        "id": 447281251,
        "sender_full_name": "George Kojonis",
        "timestamp": 1719422811
    },
    {
        "content": "<p>So, do you just want a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CompleteLattice#doc\">docs#CompleteLattice</a> ? You're saying you want arbitrarily indexed transfinite chains to have suprema?</p>",
        "id": 447283628,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1719423367
    },
    {
        "content": "<p>If you want only bounded (by some fixed limit ordinal <code>v</code>) chains to have suprema, then you'll probably want to roll your own version of <code>OmegaCompletePartialOrder</code>. It will be rather painful I imagine, if you want to allow arbitrary limit ordinals. You'll likely need to keep track of universes, and you'll need to work with <code>v.out</code> to access a type whose order type is <code>v</code>.</p>",
        "id": 447284857,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1719423641
    },
    {
        "content": "<p>No, I need a chain, something totally ordered. In the paper they are using Complete Lattices to create the Chain, so the Chain is a Subdomain. Anyway, I think I will proceed with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OmegaCompletePartialOrder#doc\">docs#OmegaCompletePartialOrder</a>, it's too good and too close to pass up honestly. Thanks for considering this problem with me.</p>",
        "id": 447284928,
        "sender_full_name": "George Kojonis",
        "timestamp": 1719423655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"720043\">George Kojonis</span> has marked this topic as resolved.</p>",
        "id": 447284940,
        "sender_full_name": "Notification Bot",
        "timestamp": 1719423658
    }
]