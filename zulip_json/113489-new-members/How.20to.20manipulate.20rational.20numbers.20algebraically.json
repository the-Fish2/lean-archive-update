[
    {
        "content": "<p>I've been trying to do a proof that sqrt 2 is irrational, but I'm stuck on manipulating the numerator and denominator algebraically. Specifically, how do I go from (p / q)^2 = 2 to p^2 = 2q^2? And is there a more idiomatic way to get from p / q = sqrt 2 to (p / q)^2 = 2, without invoking cast_inj?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Irrational</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">x.num</span>\n  <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">x.den</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Real.sq_sqrt</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"n\">Rat.cast_inj</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 412820508,
        "sender_full_name": "Will Bradley",
        "timestamp": 1705243562
    },
    {
        "content": "<p>You can probably formalize any math proof you have. My suggestion is to write down an <em>extremely</em> precise math proof, and try to formalize each step.</p>",
        "id": 412821355,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705244190
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Irrational</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">x.num</span>\n  <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">x.den</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Real.sq_sqrt</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"n\">Rat.cast_inj</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Rat.num_div_den</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">div_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"c1\">-- rw? at this</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"c1\">-- guess</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_div_iff_mul_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n      <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Rat.den_nz</span> <span class=\"n\">x</span>\n      <span class=\"n\">positivity</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 412821505,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705244294
    },
    {
        "content": "<p>Is there an encyclopedic list of Lean 4 tactics? I can't find such a thing in the API documentation, so I figure I'm looking in the wrong places.</p>",
        "id": 439268675,
        "sender_full_name": "Jon Bannon",
        "timestamp": 1715968637
    },
    {
        "content": "<p>(asked again here <a href=\"#narrow/stream/113489-new-members/topic/Lean.204.20tactics.20list/near/439268892\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Lean.204.20tactics.20list/near/439268892</a>). Please don't double-post -- you can move posts.</p>",
        "id": 439269516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715968894
    }
]