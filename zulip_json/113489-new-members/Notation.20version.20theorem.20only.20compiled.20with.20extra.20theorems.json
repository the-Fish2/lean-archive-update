[
    {
        "content": "<p>Hi when reading MIL§6 (continue <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Failed.20to.20write.20a*b.20on.20Group.E2.82.81\">Failed to write a*b on Group₁</a> but new topic for clearner context) I setup the class <code>Group₂</code> as the tutorial</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Ex3</span>\n<span class=\"kd\">class</span> <span class=\"n\">Group₂</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"n\">mul_left_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">one</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">one</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">hasMulGroup₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group₂</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Group₂.mul</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">hasOneGroup₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group₂</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Group₂.one</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">hasInvGroup₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group₂</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Group₂.inv</span><span class=\"o\">⟩</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Group₂</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">self_mul_self_eq_self_imply_one</span> <span class=\"o\">[</span><span class=\"n\">Group₂</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>  <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_left_inv</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_left_inv</span><span class=\"o\">,</span> <span class=\"n\">mul_left_one</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₁</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_left_inv'</span> <span class=\"o\">[</span><span class=\"n\">Group₂</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">mul_left_inv</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_left_one'</span> <span class=\"o\">[</span><span class=\"n\">Group₂</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">mul_left_one</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_assoc'</span> <span class=\"o\">[</span><span class=\"n\">Group₂</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc</span>\n\n<span class=\"c1\">-- It succeeds only with the three theorems aobve rather than the three axioms in `Group₂`</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">self_mul_self_eq_self_imply_one'</span> <span class=\"o\">[</span><span class=\"n\">Group₂</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_left_inv'</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_assoc'</span><span class=\"o\">,</span> <span class=\"n\">mul_left_inv'</span><span class=\"o\">,</span> <span class=\"n\">mul_left_one'</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₁</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Group₂</span>\n<span class=\"kd\">end</span> <span class=\"n\">Ex3</span>\n</code></pre></div>",
        "id": 425664446,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709972051
    },
    {
        "content": "<p>I found that I must supply extra theorems stated with notations like <code>mul_left_inv'</code> to prove theorem that uses these notations. Is this by design that when we introduce notations, we must duplicate the original theorems/axioms with a notatoned version? Or is it any option to control this behavior? I found that <code>self_mul_self_eq_self_imply_one'</code> failed if I use <code>mul_left_inv</code> rather than <code>mul_left_inv'</code> in the proof.</p>",
        "id": 425664788,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709972249
    },
    {
        "content": "<p>Unfortunately what you're seeing above is a common idiom in mathlib. One way around it in this case (which is also the way it's done in mathlib) is to make Group2 <code>extend</code> <code>Mul</code>, <code>One</code> etc, then you can use the notation in the axioms and don't have to do this</p>",
        "id": 425669142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709974476
    },
    {
        "content": "<p>This is teaching you the difference between definitonal and syntactic equality. In practice mathlib has a chosen syntactic preference for saying any basic mathematical idea (so for example in group theory it's <code>a * b</code> rather than <code>mul a b</code>) and all the lemmas are written using this so-called normal form (other than the simp lemmas of the from <code>non_normal form = normal form</code>)</p>",
        "id": 425669641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709974743
    },
    {
        "content": "<p>Yeah I am getting some information about equality from xena too<span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span></p>",
        "id": 425671384,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709976366
    }
]