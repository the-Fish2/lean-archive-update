[
    {
        "content": "<p>Hello everyone. We were trying to construct the instance <code>ConditionallyCompleteLinearOrder (WithTop α)</code> where <code>α</code> is a type with <code>[ConditionallyCompleteLinearOrder α]</code>. However, we found that <code>WithTop α</code> can never be equipped with <code>ConditionallyCompleteLinearOrder</code>.</p>\n<p>The instance  <code>WithTop.conditionallyCompleteLattice</code> has alreadied been defined; in paticular, the <code>sInf</code> function on <code>WithTop α</code> is defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">WithTop</span><span class=\"bp\">.</span><span class=\"n\">instInfSet</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">InfSet</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">InfSet</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">WithTop</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"bp\">⟨</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">⊆</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"bp\">⊤</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"bp\">⊤</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">sInf</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">⁻¹'</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">))</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n<p>If  the preimage of some <code>s : Set (WithTop α)</code> in <code>Set α</code> has no lower bounds, then <code>sInf s : WithTop α</code> is a junk value in <code>α</code>, and </p>\n<blockquote>\n<p><code>sInf s ≠ ⊤</code>.</p>\n</blockquote>\n<p>We also have</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">WithTop</span><span class=\"bp\">.</span><span class=\"n\">sInf_empty</span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u_5</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">InfSet</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">sInf</span><span class=\"w\"> </span><span class=\"bp\">∅</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⊤</span>\n</code></pre></div>\n<p>and one of the fields of <code>ConditionallyCompleteLinearOrder (WithTop α)</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">csInf_of_not_bddBelow</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">WithTop</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)),</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"n\">BddBelow</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">sInf</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">sInf</span><span class=\"w\"> </span><span class=\"bp\">∅</span>\n</code></pre></div>\n<p>So if we want to equip <code>WithTop α</code> with <code>ConditionallyCompleteLinearOrder (WithTop α)</code>, then it must hold that</p>\n<blockquote>\n<p><code>sInf s =  ⊤</code></p>\n</blockquote>\n<p>for every set <code>s : Set α</code> without lower bounds. A contradiction.</p>\n<p>Our original goal is to give <code>ConditionallyCompleteLinearOrder</code> on <code>ℤₘ₀</code>. Should we change the definition of <code>WithTop.instInfSet</code>?</p>",
        "id": 443609808,
        "sender_full_name": "Lei Bichang",
        "timestamp": 1717948611
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span>, who I think added that axiom constraining the junk value</p>",
        "id": 443645069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717969203
    },
    {
        "content": "<p>It would definitely make sense to change the definition of <code>WithTop.instInfSet</code> by setting that the infimum of a set which is not bounded below is <code>⊤</code>. I'm not sure how hard it would be to fix everything. I can try to do it if you want.</p>",
        "id": 443707245,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1718006792
    },
    {
        "content": "<p>I am confused. Lack of upper bound makes supremum = <code>⊤</code> and lack of lower bound should make infimum = <code>⊤</code> as well?</p>\n<p>How will it behave when you have both <code>WithTop</code> and <code>WithBot</code> on the same type?</p>",
        "id": 443718037,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718010093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Definition.20of.20.60WithTop.2EinstInfSet.60/near/443718037\">said</a>:</p>\n<blockquote>\n<p>lack of lower bound should make infimum = <code>⊤</code></p>\n</blockquote>\n<p>No, lack of lower bound should make infimum = <code>⊥</code></p>",
        "id": 443718334,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718010164
    },
    {
        "content": "<p>And when the type has <code>WithTop</code> only?</p>",
        "id": 443718702,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718010276
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13717\">#13717</a>.</p>",
        "id": 443940367,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1718093096
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 444396615,
        "sender_full_name": "Lei Bichang",
        "timestamp": 1718261968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631682\">Lei Bichang</span> has marked this topic as resolved.</p>",
        "id": 444396671,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718261990
    }
]