[
    {
        "content": "<p>Hi in <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html#inaccessible-patterns\">TPIL,§8. Induction and Recursion, #Inaccessible Patterns</a> there is an example <code>ImageOf</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- ImageOf f b as evidence that b is in the image of f</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ImageOf</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">imf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ImageOf</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ImageOf</span>\n<span class=\"kd\">def</span> <span class=\"n\">inverse</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ImageOf</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">imf</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inverse'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ImageOf</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">imf</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 421971028,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708141090
    },
    {
        "content": "<p>Is the def of inverse well defined? What if there are two different <code>a₁</code>,<code>a₂</code> both mapped to <code>b</code>?</p>",
        "id": 421971291,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708141268
    },
    {
        "content": "<p>In text-written math proof  the def of inverse must invoke something like the axiom of choice. It's unnecessary in this case? And why don't we tag the def of <code>inverse</code>with <code>noncomputable</code>?</p>",
        "id": 421971684,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708141529
    },
    {
        "content": "<p>In this case I think <code>inverse</code> is well-defined. Even though there can be two different preimages of <code>b</code>, the point is that an element of the <code>ImageOf f b</code> type carries with it as data the <code>a</code> value that evidences <code>b</code> being in the image of <code>f</code>. Thus, <code>ImageOf</code> isn't like most proposition types you see, where all elements of the type are considered to be equivalent: There can be distinct elements of <code>ImageOf f b</code> for different preimages.</p>",
        "id": 421973448,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708143018
    },
    {
        "content": "<p>Thank you for the detailed explanation. I think I get it now <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 421973755,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708143374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560873\">Coriver Chen</span> has marked this topic as resolved.</p>",
        "id": 421973775,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708143420
    },
    {
        "content": "<p>If it's any help, then in mathlib when defining images the definition is completely different to all this inductive type nonsense, it's just what a mathematician would think of as the image, and indeed in that case it would not be possible to define the inverse map without using the axiom of choice. This example above is a somewhat convoluted one to demonstrate a subtlety in type theory rather than anything a mathematician needs to be worried about</p>",
        "id": 421994983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708160523
    },
    {
        "content": "<p>Yeah knowing the sketched alternative def of image in mathlib is helpful too. And it reminds me that similar case like <code>ImageOf</code> maybe used in the definition of limits and colimits in category theory in Lean, since something like <code>HasLimit</code> carries a implicitly specified limit as data.</p>",
        "id": 422008424,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708173559
    }
]