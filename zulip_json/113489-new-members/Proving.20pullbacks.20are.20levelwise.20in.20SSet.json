[
    {
        "content": "<p>Hi, I am trying to prove that pullbacks are levelwise in the category of simplicial sets. SSet is a functor category so it should follow from <code>evaluationJointlyReflectsLimits</code>, but I ran into the problem of equality between terms of equal types. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.AlgebraicTopology.SimplicialSet</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.CommSq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">SSet.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">sq</span> <span class=\"o\">:</span> <span class=\"n\">CommSq</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">sq_m</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">SimplexCategory</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">IsPullback</span> <span class=\"o\">(</span><span class=\"n\">f.app</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g.app</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h.app</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i.app</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IsPullback</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">fapply</span> <span class=\"n\">IsPullback.of_isLimit'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">sq</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">evaluationJointlyReflectsLimits</span>\n    <span class=\"n\">intro</span> <span class=\"n\">m</span>\n    <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">sq_m</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isLimit</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- cospan h i ⋙ (evaluation SimplexCategoryᵒᵖ Type).obj m = cospan (h.app m) (i.app m)</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- some HEq</span>\n</code></pre></div>\n<p>I was able to prove the first <code>sorry</code>, although it is an equality between functors, which should be avoided (?). I have no idea what to do with the second one. I tried various <code>rw</code>s, <code>subst</code>s, <code>cast</code>s and theorems for <code>HEq</code> but no luck. Am I missing something obvious here ?</p>",
        "id": 435119093,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1713940183
    },
    {
        "content": "<p>I guess a follow up question will be : can we deduce a HEq between \"same\" structures (<code>Cone</code> in this example) from HEqs between their fields ?</p>",
        "id": 435120247,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1713940699
    },
    {
        "content": "<p>The solution here is to not use equality, but instead rely on isomorphisms and lemmas that tell you that everything is well-behaved under isomorphism. Instead of <code>convert (sq_m m).isLimit</code>, you should use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.IsLimit.equivOfNatIsoOfIso#doc\">docs#CategoryTheory.Limits.IsLimit.equivOfNatIsoOfIso</a> Your first sorry is then just a natural isomorphism of the diagrams instead of an equality and your second sorry turns into an isomorphism of cones after transfer with the natural isomorphisms.  For showing isomorphism of cones, we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.Cones.ext#doc\">docs#CategoryTheory.Limits.Cones.ext</a></p>",
        "id": 435121346,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1713941183
    },
    {
        "content": "<p>Here is the full proof for reference:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IsPullback</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">fapply</span> <span class=\"n\">IsPullback.of_isLimit'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">sq</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">evaluationJointlyReflectsLimits</span>\n    <span class=\"n\">intro</span> <span class=\"n\">m</span>\n    <span class=\"n\">refine</span> <span class=\"n\">IsLimit.equivOfNatIsoOfIso</span> <span class=\"o\">(</span><span class=\"n\">cospanCompIso</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">sq_m</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isLimit</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Cones.ext</span> <span class=\"o\">(</span><span class=\"n\">Iso.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">(⟨⟩</span><span class=\"bp\">|</span><span class=\"o\">(⟨⟩</span><span class=\"bp\">|</span><span class=\"o\">⟨⟩))</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 435121375,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1713941202
    },
    {
        "content": "<p>this is perfect, thank you</p>",
        "id": 435121455,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1713941253
    },
    {
        "content": "<p>The problem reappears for a particular choice of pullback : suppose I want to prove <code>lemma pull : (pullback f f).obj m ≅ pullback (f.app m) (f.app m) </code> . Here if we want to use something like <code>limit.isoLimitCone</code>, we need to provide a choice of <code>LimitCone</code> over exactly <code>cospan (f.app m) (f.app m) </code>,  but we can find only an isomorphic <code>((evaluation SimplexCategoryᵒᵖ Type).obj m).mapCone (limit.cone (cospan p p))</code>. I am quite confused tbh.</p>",
        "id": 435154249,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1713952823
    },
    {
        "content": "<p>That doesn't look like a lemma by the way, it looks like a definition (an isomorphism is data not a true-false statement).</p>",
        "id": 435155571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713953277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"460215\">@Fedor Pavutnitskiy</span> Assuming <code>f</code> means the same thing as before, I think you're looking for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.AlgebraicTopology.SimplicialSet</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.CommSq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">SSet.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pull</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pullback</span> <span class=\"n\">f</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">m</span> <span class=\"bp\">≅</span> <span class=\"n\">pullback</span> <span class=\"o\">(</span><span class=\"n\">f.app</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f.app</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">limitObjIsoLimitCompEvaluation</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">≪≫</span> <span class=\"n\">HasLimit.isoOfNatIso</span> <span class=\"o\">(</span><span class=\"n\">cospanCompIso</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 435164283,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1713956850
    },
    {
        "content": "<p>ah, there is a specific <code>def</code> for it, cool, thank you. Interestingly, could not find it using <a href=\"http://moogle.ai\">moogle.ai</a>  <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 435168154,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1713958368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>  where do you recommend to read about the stuff like <code>rintro (⟨⟩|(⟨⟩|⟨⟩))</code> ? I want to understand how to generalize it for cones and cocones over other diagrams like parallels pairs.</p>",
        "id": 435311858,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1714020691
    },
    {
        "content": "<p>for example in the example above <code>rintro (_|_|_)</code> also works. But in mathlib people use <code>⟨⟩</code> instead of <code>_</code> in situations like this.</p>",
        "id": 435312130,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1714020940
    },
    {
        "content": "<p>I think the most complete and up-to-date documentation for the syntax of <code>rcases</code>/<code>obtain</code>/<code>rintro</code> is available by hovering over an <code>rcases</code> invocation in VS Code or the web editor. There are often multiple ways to do the same thing with <code>rcases</code> patterns, and it often comes down to personal preference. I read my version as \"I expect there to be two cases, the second of which should again have two cases, and in all three resulting cases there should be nothing to name\". Your version reads to me like \"there should be three cases, and in none of them I care how the introduced thing (if it exists) is named\". The end result is the same.</p>",
        "id": 435325920,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1714029077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20pullbacks.20are.20levelwise.20in.20SSet/near/435325920\">said</a>:</p>\n<blockquote>\n<p>I think the most complete and up-to-date documentation for the syntax of <code>rcases</code>/<code>obtain</code>/<code>rintro</code> is available by hovering over an <code>rcases</code> invocation in VS Code or the web editor. There are often multiple ways to do the same thing with <code>rcases</code> patterns, and it often comes down to personal preference. I read my version as \"I expect there to be two cases, the second of which should again have two cases, and in all three resulting cases there should be nothing to name\". Your version reads to me like \"there should be three cases, and in none of them I care how the introduced thing (if it exists) is named\". The end result is the same.</p>\n</blockquote>\n<p>thank you for the explanation. I thought that there may be a deeper meaning behind using <code>(⟨⟩|(⟨⟩|⟨⟩))</code> instead of <code>(_|_|_)</code>.</p>",
        "id": 435434199,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1714065514
    }
]