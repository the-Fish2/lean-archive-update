[
    {
        "content": "<p>Does this theorem already exist in Mathlib4?  If not could someone add it to a file?  I have needed it for my work, but I have not found it in Mathlib.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_and_and_and</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">Q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">not_and_or</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">not_and</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 420271874,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1707318124
    },
    {
        "content": "<p>I would not expect Mathlib to have that fact as a single lemma. After all, you can get it just by pasting together two lemmas. That's what I would do in practice.</p>",
        "id": 420272825,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707318360
    },
    {
        "content": "<p>More generally, if you have arbitrary logical equivalences you need to transform between, if there is not a nice sequence of lemmas, you can just write down the two statements and prove they are equivalent <code>by tauto</code>.</p>",
        "id": 420273082,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707318423
    },
    {
        "content": "<p>Oh yeah, I forgot about tauto. That would make the logic a lot easier.</p>",
        "id": 420273442,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1707318512
    },
    {
        "content": "<p>Thanks for reminding me.</p>",
        "id": 420273489,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1707318523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"628490\">Colin Jones ⚛️</span> has marked this topic as resolved.</p>",
        "id": 420273499,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707318525
    },
    {
        "content": "<p>The only issue with <code>tauto</code> is that you would have to write out exactly what logical equivalence you wanted. So in your specific example, I think two rewrites is better.</p>",
        "id": 420274322,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707318759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"628490\">Colin Jones ⚛️</span> has marked this topic as unresolved.</p>",
        "id": 420278711,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707319991
    }
]