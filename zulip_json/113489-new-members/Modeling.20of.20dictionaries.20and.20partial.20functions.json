[
    {
        "content": "<p>Hello all. I am a novice at using Lean and interactive proof assistants in general, so apologies if this question is too simple.</p>\n<p>I am trying to model the semantics of a simple imperative programming language in Lean 4. This language has a notion of memory which is a map (in the sense of dictionary) that relates a series of variable names (just strings) to values. The issue is that this map is only defined for a subset of variable names that are \"in scope\", i.e., the memory is a <em>partial</em> function from strings to values. </p>\n<p>I am not sure how to model this in the way that is the most amenable for later proofs. A perhaps na√Øve approach would be to define the memory as a total function from strings to an optional value (i.e.,<code>String -&gt; Option Value</code>). While this works, it seems annoying because in most of the proofs I expect to just assume that any variable names I fix are in scope, so this style would force me to \"branch out\" every time I try to access the value of a variable in memory, forcing me to seek a contradiction to rule out that branch as impossible. I have been thinking that maybe a better way to do this would be to mimic <code>Array.get</code>by  asking for a proof that the variable is defined as an additional argument to the variable lookup operator.</p>\n<p>What do you think is the best way to proceed?  How would you model this? Thank you very much!</p>",
        "id": 418874269,
        "sender_full_name": "Relyth",
        "timestamp": 1706631673
    },
    {
        "content": "<p>If your model is functional (something like <code>(program, state) -&gt; state</code>), you can implement a relational model <code>(program, state) -&gt; state -&gt; Prop</code>, which solves this problem by just not permitting a step for a bad lookup. <a href=\"https://lean-forward.github.io/hitchhikers-guide/2023/\">The hitchhikers guide</a> and software foundations vol. 1 have chapters about making and comparing/contrasting functional vs. relational models for PL semantics.</p>",
        "id": 418888343,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1706636044
    },
    {
        "content": "<p>Thank you very much for sharing that resource, it looks very useful!</p>",
        "id": 418891688,
        "sender_full_name": "Relyth",
        "timestamp": 1706637322
    }
]