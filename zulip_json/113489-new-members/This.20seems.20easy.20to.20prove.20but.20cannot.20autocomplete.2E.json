[
    {
        "content": "<p>Check this infoview, h2 is the key to the question.<br>\nWe can see \"a.1.permute.symm\" is a permute , it only changes orders, the Sum is not changed.<br>\nHow to write it ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span>\n<span class=\"n\">hav</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">ValidCube</span>\n<span class=\"n\">hbv</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">ValidCube</span>\n<span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">Finset.sum</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"n\">a.1.orient</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">Finset.sum</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"n\">b.1.orient</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">Finset.sum</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">PieceState.orient</span> <span class=\"n\">b.1</span> <span class=\"o\">(</span><span class=\"n\">a.1.permute.symm</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 422543885,
        "sender_full_name": "chenjulang",
        "timestamp": 1708490642
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.Perm.sum_comp#doc\">docs#Equiv.Perm.sum_comp</a> can probably help.</p>",
        "id": 422545055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708491371
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Fin</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Equiv</span> <span class=\"n\">Perm</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">RubiksSuperGroup</span>\n\n  <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span><span class=\"n\">reprPrec</span> <span class=\"bp\">∘</span> <span class=\"n\">Equiv.toFun</span><span class=\"o\">⟩</span>\n\n  <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mk.injEq</span> <span class=\"n\">a.toFun</span> <span class=\"n\">a.invFun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">b.toFun</span> <span class=\"n\">b.invFun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">▸</span> <span class=\"n\">inferInstance</span>\n\n\n  <span class=\"c\">/-</span><span class=\"cm\"> This PieceState structure is used to represent the entire state of both corner pieces and edge pieces.-/</span>\n  <span class=\"kd\">structure</span> <span class=\"n\">PieceState</span> <span class=\"o\">(</span><span class=\"n\">pieces</span> <span class=\"n\">orientations</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">permute</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">pieces</span><span class=\"o\">)</span>\n    <span class=\"n\">orient</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">pieces</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">orientations</span>\n    <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n\n  <span class=\"kd\">def</span> <span class=\"n\">ps_mul</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">a1.permute</span> <span class=\"bp\">*</span> <span class=\"n\">a2.permute</span>\n      <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a2.orient</span> <span class=\"bp\">∘</span> <span class=\"n\">a1.permute.invFun</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a1.orient</span>\n    <span class=\"o\">}</span>\n  <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">mul</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">a1.permute</span> <span class=\"bp\">*</span> <span class=\"n\">a2.permute</span>\n      <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a2.orient</span> <span class=\"bp\">∘</span> <span class=\"n\">a1.permute.invFun</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a1.orient</span>\n    <span class=\"o\">}</span>\n\n\n  <span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"c1\">-- 这个同时代表了手写证明中的ρ和σ的同态性质</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">permute_mul</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"n\">a2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">permute</span> <span class=\"bp\">=</span> <span class=\"n\">a1.permute</span> <span class=\"bp\">*</span> <span class=\"n\">a2.permute</span>\n  <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n  <span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n  <span class=\"kd\">lemma</span> <span class=\"n\">ps_mul_assoc</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- ps_mul a (ps_mul b c) = ps_mul (ps_mul a b) c -- 一样的，换个位置。</span>\n  <span class=\"n\">ps_mul</span> <span class=\"o\">(</span><span class=\"n\">ps_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">ps_mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">ps_mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ps_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Perm.mul_def</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Equiv.trans_assoc</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_left_inj</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">done</span>\n\n\n  <span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n  <span class=\"kd\">lemma</span> <span class=\"n\">ps_one_mul</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">),</span>\n  <span class=\"n\">ps_mul</span> <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">a</span>  <span class=\"bp\">=</span>  <span class=\"n\">a</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">invFun_as_coe</span><span class=\"o\">,</span> <span class=\"n\">one_symm</span><span class=\"o\">,</span> <span class=\"n\">coe_one</span><span class=\"o\">,</span> <span class=\"n\">Function.comp.right_id</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">done</span>\n\n\n  <span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n  <span class=\"kd\">lemma</span> <span class=\"n\">ps_mul_one</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">),</span>\n  <span class=\"n\">ps_mul</span> <span class=\"n\">a</span> <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">invFun_as_coe</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">zero_comp</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n    <span class=\"n\">done</span>\n\n\n  <span class=\"kd\">def</span> <span class=\"n\">ps_inv</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span>\n  <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">ps</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">ps.permute</span><span class=\"bp\">⁻¹</span>\n      <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">ps.orient</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">ps.permute</span>\n    <span class=\"o\">}</span>\n\n  <span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n  <span class=\"kd\">lemma</span> <span class=\"n\">ps_mul_left_inv</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">),</span>\n  <span class=\"n\">ps_mul</span> <span class=\"o\">(</span><span class=\"n\">ps_inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_inv</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_left_inv</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">invFun_as_coe</span><span class=\"o\">,</span> <span class=\"n\">PieceState.mk.injEq</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">neg_eq_iff_add_eq_zero.mp</span> <span class=\"n\">rfl</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\"> This sets up a group structure for all Rubik's cube positions</span>\n<span class=\"cm\">  (including invalid ones that couldn't be reached from a solved state without removing pieces from the cube,</span>\n<span class=\"cm\">  twisting corners, etc.). -/</span>\n  <span class=\"kd\">instance</span> <span class=\"n\">PieceGroup</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">ps_mul</span>\n    <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">ps_mul_assoc</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n    <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">ps_one_mul</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">ps_mul_one</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">ps_inv</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">ps_mul_left_inv</span>\n  <span class=\"o\">}</span>\n\n\n  <span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n  <span class=\"kd\">lemma</span> <span class=\"n\">PieceState.mul_def</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">ps_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n  <span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n  <span class=\"kd\">lemma</span> <span class=\"n\">PieceState.inv_def</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">ps_inv</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n  <span class=\"n\">abbrev</span> <span class=\"n\">CornerType</span> <span class=\"o\">:=</span> <span class=\"n\">PieceState</span> <span class=\"mi\">8</span> <span class=\"mi\">3</span>\n  <span class=\"n\">abbrev</span> <span class=\"n\">EdgeType</span> <span class=\"o\">:=</span> <span class=\"n\">PieceState</span> <span class=\"mi\">12</span> <span class=\"mi\">2</span>\n\n  <span class=\"kd\">instance</span> <span class=\"n\">Rubiks2x2Group</span> <span class=\"o\">:</span>\n  <span class=\"n\">Group</span> <span class=\"n\">CornerType</span>\n  <span class=\"o\">:=</span> <span class=\"n\">PieceGroup</span> <span class=\"mi\">8</span> <span class=\"mi\">3</span>\n\n  <span class=\"n\">abbrev</span> <span class=\"n\">RubiksSuperType</span> <span class=\"o\">:=</span> <span class=\"n\">CornerType</span> <span class=\"bp\">×</span> <span class=\"n\">EdgeType</span>\n  <span class=\"kd\">instance</span> <span class=\"n\">RubiksSuperGroup</span> <span class=\"c1\">-- 就是手写证明中的群H</span>\n  <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">RubiksSuperType</span>\n  <span class=\"o\">:=</span> <span class=\"n\">Prod.instGroup</span> <span class=\"c1\">--???</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">RubiksSuperGroup</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Creates an orientation function given a list of input-output pairs</span>\n<span class=\"cm\">(with 0 for anything left unspecified). -/</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">Orient</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pairs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">((</span><span class=\"n\">Fin</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">o</span><span class=\"o\">)))</span>\n<span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">o</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">pairs.lookup</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Orient</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"c1\">-- ![1, 0, 1]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Solved</span>\n<span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span>\n<span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">FACE_TURNS</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\"> These two functions (from kendfrey's repository) create a cycle permutation,</span>\n<span class=\"cm\">  which is useful for defining the rotation of any given face, as seen directly below. -/</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">cycleImpl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Perm</span> <span class=\"n\">α</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"c1\">-- “_”指的是第一个元素。可以写成a吗???</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">cycleImpl</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"c1\">-- “a”指的是第一个元素</span>\n    <span class=\"c1\">--</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Perm</span> <span class=\"n\">α</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cycleImpl</span> <span class=\"n\">x</span> <span class=\"n\">xs</span>\n\n\n  <span class=\"kd\">def</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"c1\">-- 第一是角块</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>  <span class=\"c1\">-- 第二是棱块</span>\n    <span class=\"o\">⟩</span>\n  <span class=\"kd\">def</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">},</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n    <span class=\"o\">⟩</span>\n  <span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"n\">Orient</span> <span class=\"mi\">8</span> <span class=\"mi\">3</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)]},</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n    <span class=\"o\">⟩</span>\n  <span class=\"kd\">def</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"n\">Orient</span> <span class=\"mi\">8</span> <span class=\"mi\">3</span> <span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)]},</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n    <span class=\"o\">⟩</span>\n  <span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"n\">Orient</span> <span class=\"mi\">8</span> <span class=\"mi\">3</span> <span class=\"o\">[(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)]},</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"n\">Orient</span> <span class=\"mi\">12</span> <span class=\"mi\">2</span> <span class=\"o\">[(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">11</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)]}</span>\n    <span class=\"o\">⟩</span>\n  <span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"n\">Orient</span> <span class=\"mi\">8</span> <span class=\"mi\">3</span> <span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)]},</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"n\">Orient</span> <span class=\"mi\">12</span> <span class=\"mi\">2</span> <span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)]}</span>\n    <span class=\"o\">⟩</span>\n  <span class=\"kd\">def</span> <span class=\"n\">U2</span> <span class=\"o\">:=</span> <span class=\"n\">U</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n  <span class=\"kd\">def</span> <span class=\"n\">D2</span> <span class=\"o\">:=</span> <span class=\"n\">D</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n  <span class=\"kd\">def</span> <span class=\"n\">R2</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n  <span class=\"kd\">def</span> <span class=\"n\">L2</span> <span class=\"o\">:=</span> <span class=\"n\">L</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n  <span class=\"kd\">def</span> <span class=\"n\">F2</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n  <span class=\"kd\">def</span> <span class=\"n\">B2</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n  <span class=\"kd\">def</span> <span class=\"n\">U'</span> <span class=\"o\">:=</span> <span class=\"n\">U</span><span class=\"bp\">⁻¹</span>\n  <span class=\"kd\">def</span> <span class=\"n\">D'</span> <span class=\"o\">:=</span> <span class=\"n\">D</span><span class=\"bp\">⁻¹</span>\n  <span class=\"kd\">def</span> <span class=\"n\">R'</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"bp\">⁻¹</span>\n  <span class=\"kd\">def</span> <span class=\"n\">L'</span> <span class=\"o\">:=</span> <span class=\"n\">L</span><span class=\"bp\">⁻¹</span>\n  <span class=\"kd\">def</span> <span class=\"n\">F'</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">⁻¹</span>\n  <span class=\"kd\">def</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"bp\">⁻¹</span>\n\n  <span class=\"c1\">-- #check Multiplicative.coeToFun</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">FaceTurn</span>\n  <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">U</span>\n    <span class=\"bp\">|</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">D</span>\n    <span class=\"bp\">|</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">R</span>\n    <span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">L</span>\n    <span class=\"bp\">|</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">F</span>\n    <span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">B</span>\n    <span class=\"bp\">|</span> <span class=\"n\">U2</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">U2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">D2</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">D2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">R2</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">R2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">L2</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">L2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">F2</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">F2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">B2</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">B2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">U'</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">U'</span>\n    <span class=\"bp\">|</span> <span class=\"n\">D'</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">D'</span>\n    <span class=\"bp\">|</span> <span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">R'</span>\n    <span class=\"bp\">|</span> <span class=\"n\">L'</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">L'</span>\n    <span class=\"bp\">|</span> <span class=\"n\">F'</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">F'</span>\n    <span class=\"bp\">|</span> <span class=\"n\">B'</span> <span class=\"o\">:</span> <span class=\"n\">FaceTurn</span> <span class=\"n\">B'</span>\n\n  <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">RubiksSuperType</span> <span class=\"n\">where</span>\n    <span class=\"n\">toString</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">Solved</span> <span class=\"k\">then</span> <span class=\"s2\">\"Solved\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"k\">then</span> <span class=\"s2\">\"U\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">D</span> <span class=\"k\">then</span> <span class=\"s2\">\"D\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">R</span> <span class=\"k\">then</span> <span class=\"s2\">\"R\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">L</span> <span class=\"k\">then</span> <span class=\"s2\">\"L\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"k\">then</span> <span class=\"s2\">\"F\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"k\">then</span> <span class=\"s2\">\"B\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">U2</span> <span class=\"k\">then</span> <span class=\"s2\">\"U2\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">D2</span> <span class=\"k\">then</span> <span class=\"s2\">\"D2\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">R2</span> <span class=\"k\">then</span> <span class=\"s2\">\"R2\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">L2</span> <span class=\"k\">then</span> <span class=\"s2\">\"L2\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">F2</span> <span class=\"k\">then</span> <span class=\"s2\">\"F2\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">B2</span> <span class=\"k\">then</span> <span class=\"s2\">\"B2\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">U'</span> <span class=\"k\">then</span> <span class=\"s2\">\"U'\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">D'</span> <span class=\"k\">then</span> <span class=\"s2\">\"D'\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">R'</span> <span class=\"k\">then</span> <span class=\"s2\">\"R'\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">L'</span> <span class=\"k\">then</span> <span class=\"s2\">\"L'\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">F'</span> <span class=\"k\">then</span> <span class=\"s2\">\"F'\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span> <span class=\"k\">then</span> <span class=\"s2\">\"B'\"</span>\n      <span class=\"k\">else</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{repr c}\"</span>\n\n  <span class=\"c1\">-- instance : Multiplicative.coeToFun RubiksSuperType := {coe := fun (a : RubiksSuperType) =&gt; fun (b : RubiksSuperType) =&gt; a * b }</span>\n  <span class=\"c1\">--? How do I get the line above to work?</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">FACE_TURNS</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">TPerm</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span> <span class=\"c1\">-- 这个*是在哪里定义的呢？，看定义就知道，因为RubiksSuperType是笛卡尔积CornerType × EdgeType，其乘法就是两个分量分别乘积</span>\n  <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"bp\">*</span> <span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"n\">R'</span> <span class=\"bp\">*</span> <span class=\"n\">U'</span> <span class=\"bp\">*</span> <span class=\"n\">R'</span> <span class=\"bp\">*</span> <span class=\"n\">F</span> <span class=\"bp\">*</span> <span class=\"n\">R2</span> <span class=\"bp\">*</span> <span class=\"n\">U'</span> <span class=\"bp\">*</span> <span class=\"n\">R'</span> <span class=\"bp\">*</span> <span class=\"n\">U'</span> <span class=\"bp\">*</span> <span class=\"n\">R</span> <span class=\"bp\">*</span> <span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"n\">R'</span> <span class=\"bp\">*</span> <span class=\"n\">F'</span>\n<span class=\"kd\">def</span> <span class=\"n\">AlteredYPerm</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span>\n  <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"bp\">*</span> <span class=\"n\">U'</span> <span class=\"bp\">*</span> <span class=\"n\">R'</span> <span class=\"bp\">*</span> <span class=\"n\">U'</span> <span class=\"bp\">*</span> <span class=\"n\">R</span> <span class=\"bp\">*</span> <span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"n\">R'</span> <span class=\"bp\">*</span> <span class=\"n\">F'</span> <span class=\"bp\">*</span> <span class=\"n\">R</span> <span class=\"bp\">*</span> <span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"n\">R'</span> <span class=\"bp\">*</span> <span class=\"n\">U'</span> <span class=\"bp\">*</span> <span class=\"n\">R'</span> <span class=\"bp\">*</span> <span class=\"n\">F</span> <span class=\"bp\">*</span> <span class=\"n\">R</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">CornerTwist</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span>  <span class=\"c1\">-- 应该是形容两个不可能的魔方状态：只旋转一次角块，还有只旋转一次棱块</span>\n  <span class=\"o\">:=</span> <span class=\"o\">(</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">},</span> <span class=\"c1\">-- 这种是归纳定义的向量写法，只有0位置为1，其余为0。</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n     <span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">EdgeFlip</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span>\n  <span class=\"o\">:=</span> <span class=\"o\">(</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">},</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)}</span>\n     <span class=\"o\">)</span>\n\n\n\n<span class=\"kn\">section</span> <span class=\"n\">RubiksGroup</span>\n\n  <span class=\"c1\">-- def ValidCube : Set RubiksSuperType := {c | Perm.sign c.fst.permute = Perm.sign c.snd.permute ∧ Fin.foldl 8 (fun acc n =&gt; acc + c.fst.orient n) 0 = 0 ∧ Fin.foldl 12 (fun acc n =&gt; acc + c.snd.orient n) 0 = 0}</span>\n  <span class=\"kd\">def</span> <span class=\"n\">ValidCube</span> <span class=\"o\">:</span>\n  <span class=\"n\">Set</span> <span class=\"n\">RubiksSuperType</span>\n  <span class=\"o\">:=</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">c</span> <span class=\"bp\">|</span>\n    <span class=\"n\">Perm.sign</span> <span class=\"n\">c.fst.permute</span> <span class=\"bp\">=</span> <span class=\"n\">Perm.sign</span> <span class=\"n\">c.snd.permute</span>\n    <span class=\"bp\">∧</span>\n    <span class=\"n\">Finset.sum</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">}:</span><span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"n\">c.fst.orient</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">∧</span>\n    <span class=\"n\">Finset.sum</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">10</span><span class=\"o\">,</span><span class=\"mi\">11</span><span class=\"o\">}:</span><span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">12</span><span class=\"o\">))</span> <span class=\"n\">c.snd.orient</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">mul_mem'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">ValidCube</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">ValidCube</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">ValidCube</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hav</span> <span class=\"n\">hbv</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ValidCube</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- simp only [PieceState.mul_def]</span>\n    <span class=\"c1\">-- simp only [ps_mul]</span>\n    <span class=\"c1\">-- repeat' apply And.intro</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">sign</span> <span class=\"n\">a.1.permute</span> <span class=\"bp\">=</span> <span class=\"n\">sign</span> <span class=\"n\">a.2.permute</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">hav.left</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">sign</span> <span class=\"n\">b.1.permute</span> <span class=\"bp\">=</span> <span class=\"n\">sign</span> <span class=\"n\">b.2.permute</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">hbv.left</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Prod.fst_mul</span><span class=\"o\">,</span> <span class=\"n\">PieceState.mul_def</span><span class=\"o\">,</span> <span class=\"n\">Prod.snd_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Mathlib.Tactic.LinearCombination.mul_pf</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Finset.sum</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"n\">a.1.orient</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">hav.right.left</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">Finset.sum</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"n\">b.1.orient</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">hbv.right.left</span>\n      <span class=\"c1\">-- rw [PieceState.orient, PieceState.orient]</span>\n      <span class=\"c1\">-- rw [Finset.sum_add_distrib, h2]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">zero_ne_one</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">,</span> <span class=\"n\">Prod.fst_mul</span><span class=\"o\">,</span><span class=\"n\">PieceState.mul_def</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">zero_ne_one</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">,</span> <span class=\"n\">invFun_as_coe</span><span class=\"o\">,</span>\n        <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_add_distrib</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n      <span class=\"c1\">-- refine Equiv.Perm.prod_comp</span>\n      <span class=\"c1\">-- apply h2</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"o\">}</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">RubiksGroup</span>\n</code></pre></div>",
        "id": 422546251,
        "sender_full_name": "chenjulang",
        "timestamp": 1708492105
    },
    {
        "content": "<p>It doesn’t seem to match the situation. Have a look if you have time. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <br>\nCheck the \"sorry\"</p>",
        "id": 422546303,
        "sender_full_name": "chenjulang",
        "timestamp": 1708492175
    },
    {
        "content": "<p>It should also work if Finset.sum is changed to the form of addition somehow.</p>",
        "id": 422546516,
        "sender_full_name": "chenjulang",
        "timestamp": 1708492331
    },
    {
        "content": "<p>These two \"sorry\" are similar:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_mem'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">ValidCube</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">ValidCube</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">ValidCube</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hav</span> <span class=\"n\">hbv</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ValidCube</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- simp only [PieceState.mul_def]</span>\n    <span class=\"c1\">-- simp only [ps_mul]</span>\n    <span class=\"c1\">-- repeat' apply And.intro</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">sign</span> <span class=\"n\">a.1.permute</span> <span class=\"bp\">=</span> <span class=\"n\">sign</span> <span class=\"n\">a.2.permute</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">hav.left</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">sign</span> <span class=\"n\">b.1.permute</span> <span class=\"bp\">=</span> <span class=\"n\">sign</span> <span class=\"n\">b.2.permute</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">hbv.left</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Prod.fst_mul</span><span class=\"o\">,</span> <span class=\"n\">PieceState.mul_def</span><span class=\"o\">,</span> <span class=\"n\">Prod.snd_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Mathlib.Tactic.LinearCombination.mul_pf</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Finset.sum</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"n\">a.1.orient</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">hav.right.left</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">Finset.sum</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"n\">b.1.orient</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">hbv.right.left</span>\n      <span class=\"c1\">-- rw [PieceState.orient, PieceState.orient]</span>\n      <span class=\"c1\">-- rw [Finset.sum_add_distrib, h2]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">zero_ne_one</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">,</span> <span class=\"n\">Prod.fst_mul</span><span class=\"o\">,</span><span class=\"n\">PieceState.mul_def</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">zero_ne_one</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">,</span> <span class=\"n\">invFun_as_coe</span><span class=\"o\">,</span>\n        <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_add_distrib</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n      <span class=\"c1\">-- refine Equiv.Perm.prod_comp</span>\n      <span class=\"c1\">-- apply h2</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"o\">}</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Finset.sum</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">10</span><span class=\"o\">,</span><span class=\"mi\">11</span><span class=\"o\">}</span> <span class=\"n\">a.2.orient</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">hav.right.right</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">Finset.sum</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">10</span><span class=\"o\">,</span><span class=\"mi\">11</span><span class=\"o\">}</span> <span class=\"n\">b.2.orient</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">hbv.right.right</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">zero_ne_one</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">,</span> <span class=\"n\">Prod.snd_mul</span><span class=\"o\">,</span>\n        <span class=\"n\">PieceState.mul_def</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">zero_ne_one</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">,</span> <span class=\"n\">invFun_as_coe</span><span class=\"o\">,</span>\n        <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_add_distrib</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 422547002,
        "sender_full_name": "chenjulang",
        "timestamp": 1708492716
    }
]