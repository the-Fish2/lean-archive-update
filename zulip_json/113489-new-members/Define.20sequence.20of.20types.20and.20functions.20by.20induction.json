[
    {
        "content": "<p>What is the usual way to construct a sequence of types and functions between these types, when to construct the <code>(n+1)</code>th term you will sometimes need the whole composition of functions from the <code>m</code> th term to the <code>n</code> th term, for some <code>m</code>?<br>\nI can be more precise about the setup of my problem, if it helps (but I think it is probably just confusing). I have: </p>\n<ol>\n<li>a type <code>T0</code></li>\n<li>a function <code>F</code> that takes as input two types <code>A</code> and <code>B</code> and a function <code>A -&gt; B</code>, and outputs a type <code>C</code></li>\n<li>a function <code>F'</code> that takes as input two types <code>A</code> and <code>B</code> and a function <code>f : A -&gt; B</code> and outputs a function <code>B -&gt; F A B f</code></li>\n<li>a function <code>G</code> that takes as input an integer <code>n</code> and a type <code>B</code>, and outputs a type <code>A</code>.</li>\n<li>a function <code>G'</code> that takes as input an integer <code>n</code> and a type <code>B</code>, and outputs a function <code>G n B -&gt; A</code></li>\n<li>a function <code>H</code> that takes as input a positive integer <code>n</code>, and outputs a positive integer <code>m</code> smaller or equal.<br>\nNow, I want to construct recursively a sequence <code>T0 =: A_0, A_1, A_2, ...</code> and a sequence of functions <code>f_n : A_n -&gt; A_{n+1}</code>, with <code>A_{n+1} := F A_{(H n)} A_n (f_{n-1} ∘ ... ∘ f_{H n} ∘ (G' n A_{(H n}))</code> and <code>f_n := F' A_{(H n)} A_n (f_{n-1} ∘ ... ∘ f_{H n} ∘ (G' n A_{(H n}))</code>.</li>\n</ol>\n<p>I was thinking that perhaps the best solution was to define the function <code>S</code> that takes as input <code>i : ℕ</code>, and outputs a pair consisting of a type <code>A</code> and a function that takes as input  <code>j : ℕ</code> and <code> j &lt;= i</code>, and outputs a function <code>(S j).1 -&gt; (S i).1</code>, such that <code>A_n</code> is given by <code>(S n).1</code> and the function <code>f_n</code> is given by <code>(S (n+1)).2 n _</code></p>",
        "id": 419675561,
        "sender_full_name": "Gabin Kolly",
        "timestamp": 1707029661
    },
    {
        "content": "<p>Ok, here is a simpler question. It seems that the following definition by mutual recursion is not allowed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">growing_sequence</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">directed_system</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">growing_sequence</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">growing_sequence</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a clean way to construct directed system by recursion in general?</p>",
        "id": 420300163,
        "sender_full_name": "Gabin Kolly",
        "timestamp": 1707325393
    },
    {
        "content": "<p>it would help to have a MWE of the definition you want</p>",
        "id": 420316705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707330758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"612162\">@Gabin Kolly</span>  I started writing your conditions in lean and ran into the issue that step 5 contains an unknown identifier <code>A</code></p>",
        "id": 420318657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707331377
    },
    {
        "content": "<p>Here's my attempt at writing the requirements in lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Nat.Notation</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">T0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">F'</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">f</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">G'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">H_le</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fs</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"n\">eq</span> <span class=\"bp\">▸</span> <span class=\"n\">id</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">∘</span> <span class=\"n\">fs</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt_succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_le_of_ne</span> <span class=\"n\">h</span> <span class=\"n\">eq</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eq.elim</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_zero.1</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">A_zero</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">T0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">A_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fs</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">H_le</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">G'</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">f_def</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">A_succ</span> <span class=\"n\">n</span> <span class=\"bp\">▸</span> <span class=\"n\">F'</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 420322310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707332483
    },
    {
        "content": "<p>And here's a construction that works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Nat.Notation</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">T0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">F'</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">f</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">G'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">H_le</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">system</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">T0</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">⟩⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">fs</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">system</span> <span class=\"n\">n</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">fs</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">f1</span> <span class=\"o\">:=</span> <span class=\"n\">F'</span> <span class=\"n\">B</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">G'</span> <span class=\"n\">n</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">⟨</span><span class=\"n\">F</span> <span class=\"n\">B</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">G'</span> <span class=\"n\">n</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">fs</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">f1</span> <span class=\"bp\">∘</span> <span class=\"n\">k</span><span class=\"o\">⟩</span>\n      <span class=\"k\">else</span>\n        <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">system</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">system_eq</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">system</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">system</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rename_i</span> <span class=\"n\">h'</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">system_eq</span> <span class=\"n\">h'</span>\n    <span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_or_eq_of_le_succ</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"n\">h'</span>\n      <span class=\"n\">rfl</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">system_eq</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"o\">((</span><span class=\"n\">system</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 420333180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707336369
    },
    {
        "content": "<p>Thank you very much for your help!<br>\nSorry for not giving a MWE, I thought I would get a high-level answer, not an exact one! But it was very useful!<br>\nI have some trouble with proving anything about the functions of the system though, for example this simple result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">system_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">system</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">comp</span>\n      <span class=\"o\">(</span><span class=\"n\">system_eq</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_refl</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I cannot find how to prove it. The state at the <code>sorry</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">Sigma.snd</span> <span class=\"o\">(</span><span class=\"n\">system</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">∘</span>\n    <span class=\"n\">Eq.rec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Sigma.snd</span> <span class=\"o\">(</span><span class=\"n\">system</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">_</span> <span class=\"bp\">=</span>\n  <span class=\"n\">id</span>\n</code></pre></div>\n<p>If I try to do <code>simp [system]</code>, then the first function is based on an if-then-else that I don't manage to simplify even though the condition is <code>n+1 &lt;= n</code>, which should simplifiable, but I don't know how to do it. The second term is a recursion on an equality, and I'm also at a loss if something can be done.</p>",
        "id": 424758649,
        "sender_full_name": "Gabin Kolly",
        "timestamp": 1709591153
    }
]