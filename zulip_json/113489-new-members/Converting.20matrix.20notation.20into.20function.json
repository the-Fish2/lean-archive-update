[
    {
        "content": "<p>I've seen that <code>Matrix.of</code> can convert a function <code>f  : m -&gt; n -&gt; R</code> into a 2D array. Is there anything that does the reverse? Given a 2D array, is there anything that turns it into a function as mentioned above?</p>",
        "id": 438081610,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715405584
    },
    {
        "content": "<p>Just use the matrix as a function. There is a coercion from <code>Matrix m n alpha</code> to <code>m -&gt; n -&gt; alpha</code></p>",
        "id": 438083428,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715407844
    },
    {
        "content": "<p>The <code>listTransvecCol</code> function is unable to accept the 2D array as a <code>Matrix</code>. Here's an mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.DMatrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.Determinant</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.Reindex</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FieldSimp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">transvection</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">Matrix.stdBasisMatrix</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M1</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">listTransvecCol'</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.ofFn</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">transvection</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">-</span><span class=\"n\">M1</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">M1</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">listTransvecCol'</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">;</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"bp\">;</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">:=</span><span class=\"n\">Rat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(I've redefined listTransvecCol because I don't know how to define matrices with direct sum domains)<br>\nBut when I define it as a function and explicitly state its type as <code>Matrix (Fin 3) (Fin 3) Rat</code>, it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mat</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">Rat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">7</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">listTransvecCol'</span> <span class=\"n\">mat</span>\n</code></pre></div>",
        "id": 438083753,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715408307
    },
    {
        "content": "<p>What's the error in your mwe? (Also note that without <code>import</code>s, it's not quite a mwe!)</p>",
        "id": 438090029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715415420
    },
    {
        "content": "<p>Oops, sorry about that! I'll add the imports</p>",
        "id": 438090756,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715416003
    },
    {
        "content": "<p>Hmm, that's odd. Previously it was giving an error of something along the lines of \"Expected type Matrix (Fin 3) (Fin 3) Rat but got type fun x =&gt; Matrix (Fin 3) (Fin 3) Rat\". But now it's working fine. Thanks for the help anyways!</p>",
        "id": 438091500,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715416656
    }
]