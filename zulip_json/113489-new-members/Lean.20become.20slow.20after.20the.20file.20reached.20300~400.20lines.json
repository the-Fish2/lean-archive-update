[
    {
        "content": "<p>Hi when reading MIL I found that if the file reached about 300~400 lines, it became quite slow. Any advise for avoding this? More specifically I got the problem from the following content <a href=\"https://gist.github.com/onriv/112d1dda4e976b5e1110739273a16280\">linked here</a> Is that becuase I used too many <code>simp</code>? If tagged more lemmas in this file with attribute <code>simp</code>, it even caused an error <code>tactic 'simp' failed, nested error:\n(deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)</code></p>",
        "id": 429201970,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711286552
    },
    {
        "content": "<p>(note if you use <a href=\"http://gist.github.com\">gist.github.com</a> rather than pastebin, you get lean syntax highlighting)</p>",
        "id": 429202363,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711286765
    },
    {
        "content": "<p>Oh It's glad to know this. Update the link now <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 429202776,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711286922
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- mark theses with attr simp really hurts the performance</span>\n<span class=\"c1\">-- and make timeout at 'whnf', maximum number of heartbeats (200000) has been reached:</span>\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span>\n<span class=\"c1\">-- (attr := simp)</span>\n<span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Group₃.inv_inj</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group₃</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n</blockquote>\n<p>Yes, because you've sent simp on an infinite wild goose chase!</p>",
        "id": 429208178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711289177
    },
    {
        "content": "<p>Whenever it sees <code>a = b</code> it now tries to prove <code>a⁻¹ = b⁻¹</code>, which it then tries to prove with <code>a⁻¹⁻¹ = b⁻¹⁻¹</code>, ...</p>",
        "id": 429208288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711289220
    },
    {
        "content": "<p>Mathlib avoids this by stating the lemma as <code>a⁻¹ = b⁻¹ ↔ a = b</code> instead</p>",
        "id": 429208498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711289286
    },
    {
        "content": "<p>Oh I didn’t notice this, I found it problematic via uncommenting the attribute tag . It seems now only adding theorems to brackets of simp sometimes requires seconds for the goal changed in the Lean Infoview. Totally acceptable<span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 429217474,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711292781
    },
    {
        "content": "<p>I'm not sure if I should make my own topic or ask under this one, but this is exactly the problem that I'm facing. I have a function that calculates the row echelon form of a matrix, and it lies after 200 lines in my file. Running it for a 3x4 matrix is taking over a minute. However, if I copy the function over to a new file, where it lies after 150 lines, it takes only 8 seconds. I have a bunch of other functions and lemmas in the former file that aren't required for this function, but will be required later. How do I make this function faster while keeping all the contents of the file?</p>",
        "id": 440717134,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1716733849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627751\">Vivek Rajesh Joshi</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean.20become.20slow.20after.20the.20file.20reached.20300~400.20lines/near/440717134\">said</a>:</p>\n<blockquote>\n<p>it lies after 200 lines in my file. Running it for a 3x4 matrix is taking over a minute. However, if I copy the function over to a new file, where it lies after 150 lines, it takes only 8 minutes.</p>\n</blockquote>\n<p>Are the numbers wrong maybe?</p>",
        "id": 440717567,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716734277
    },
    {
        "content": "<p>Whoops, sorry. I meant 8 seconds</p>",
        "id": 440717992,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1716734675
    },
    {
        "content": "<p>Yeah I found that sometimes I have to wait seconds if the proof is complicated or bad written. But I used a very old machine like</p>",
        "id": 440718486,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716735149
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">OS</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Arch</span><span class=\"w\"> </span><span class=\"n\">Linux</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n<span class=\"n\">Host</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">20090</span><span class=\"w\"> </span><span class=\"n\">Lenovo</span><span class=\"w\"> </span><span class=\"n\">IdeaPad</span><span class=\"w\"> </span><span class=\"n\">Y470</span>\n<span class=\"n\">Kernel</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">6.8</span><span class=\"bp\">.</span><span class=\"m\">9</span><span class=\"bp\">-</span><span class=\"n\">arch1</span><span class=\"bp\">-</span><span class=\"mi\">2</span>\n<span class=\"n\">Uptime</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"n\">hours</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">mins</span>\n<span class=\"n\">Packages</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">828</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pacman</span><span class=\"o\">)</span>\n<span class=\"n\">Shell</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">zsh</span><span class=\"w\"> </span><span class=\"mf\">5.9</span>\n<span class=\"n\">Resolution</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1366</span><span class=\"n\">x768</span>\n<span class=\"n\">Terminal</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"n\">dev</span><span class=\"bp\">/</span><span class=\"n\">pts</span><span class=\"bp\">/</span><span class=\"mi\">0</span>\n<span class=\"n\">CPU</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Intel</span><span class=\"w\"> </span><span class=\"n\">i5</span><span class=\"bp\">-</span><span class=\"mi\">2430</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"w\"> </span><span class=\"mf\">3.000</span><span class=\"n\">GHz</span>\n<span class=\"n\">GPU</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Intel</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">nd</span><span class=\"w\"> </span><span class=\"n\">Generation</span><span class=\"w\"> </span><span class=\"n\">Core</span><span class=\"w\"> </span><span class=\"n\">Processor</span><span class=\"w\"> </span><span class=\"n\">Family</span>\n<span class=\"n\">GPU</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">NVIDIA</span><span class=\"w\"> </span><span class=\"n\">GeForce</span><span class=\"w\"> </span><span class=\"n\">GT</span><span class=\"w\"> </span><span class=\"mi\">550</span><span class=\"n\">M</span>\n<span class=\"n\">Memory</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">5857</span><span class=\"n\">MiB</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"mi\">15940</span><span class=\"n\">MiB</span>\n</code></pre></div>",
        "id": 440718560,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716735229
    },
    {
        "content": "<p>My laptop's pretty new and high-end. It's less than a year old, and is a HP Victus. Plus, I has no issue with running the function itself quickly, as shown with the latter file. The length of the former file is the problem.</p>",
        "id": 440718645,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1716735297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627751\">Vivek Rajesh Joshi</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean.20become.20slow.20after.20the.20file.20reached.20300~400.20lines/near/440717134\">said</a>:</p>\n<blockquote>\n<p>I'm not sure if I should make my own topic or ask under this one, but this is exactly the problem that I'm facing. I have a function that calculates the row echelon form of a matrix, and it lies after 200 lines in my file. Running it for a 3x4 matrix is taking over a minute. However, if I copy the function over to a new file, where it lies after 150 lines, it takes only 8 seconds. I have a bunch of other functions and lemmas in the former file that aren't required for this function, but will be required later. How do I make this function faster while keeping all the contents of the file?</p>\n</blockquote>\n<p>May I ask what parameters are your hardware?</p>",
        "id": 440718646,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716735299
    },
    {
        "content": "<p>OK got it</p>",
        "id": 440718678,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716735333
    },
    {
        "content": "<p>There is a similar thread in PASE <a href=\"https://proofassistants.stackexchange.com/questions/1080/how-to-speed-up-lean\">https://proofassistants.stackexchange.com/questions/1080/how-to-speed-up-lean</a> the tips link is outdated though</p>",
        "id": 440718912,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716735538
    },
    {
        "content": "<p>maybe check if the tips work <a href=\"https://web.archive.org/web/20240224061858/https://leanprover-community.github.io/tips_and_tricks.html\">https://web.archive.org/web/20240224061858/https://leanprover-community.github.io/tips_and_tricks.html</a></p>",
        "id": 440719095,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716735677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627751\">Vivek Rajesh Joshi</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean.20become.20slow.20after.20the.20file.20reached.20300~400.20lines/near/440718645\">said</a>:</p>\n<blockquote>\n<p>My laptop's pretty new and high-end. It's less than a year old, and is a HP Victus. Plus, I has no issue with running the function itself quickly, as shown with the latter file. The length of the former file is the problem.</p>\n</blockquote>\n<p>You will have to show your work if you expect people to figure this type of performance stuff out.</p>",
        "id": 440719180,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716735730
    },
    {
        "content": "<p>Yeah posting codes or <a href=\"https://leanprover-community.github.io/mwe.html\">#MWE</a> may help</p>",
        "id": 440719808,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716736323
    },
    {
        "content": "<p>The file's pretty long and has an import to another file, so I'll post the link to the file in my GitHub repo: <a href=\"https://github.com/vivek-rj/gauss_elim1/blob/master/GaussElim/ge_test2vec.lean\">https://github.com/vivek-rj/gauss_elim1/blob/master/GaussElim/ge_test2vec.lean</a></p>",
        "id": 440719875,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1716736413
    },
    {
        "content": "<p>If you cannot make a reproduction without having other people download your project, could you perhaps upload a file into your project which indicates the problem? Right now you're saying \"please clone my repo and solve my problem which is somewhere in this file\", which is a bad way to ask a question. Perhaps two files which indicate something working and something not working?</p>",
        "id": 440721439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716738016
    },
    {
        "content": "<p>Yes, sorry. I only uploaded the long file. Here's the short file, where the function application runs in 8 seconds: <a href=\"https://github.com/vivek-rj/gauss_elim1/blob/master/GaussElim/mwetest.lean\">https://github.com/vivek-rj/gauss_elim1/blob/master/GaussElim/mwetest.lean</a><br>\nThe function application is written as this line:<br>\n<code>#eval rowEchelonList_ij' (m:=3) (n:=4) (by linarith) (by linarith) amat 0 0</code></p>",
        "id": 440721608,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1716738196
    },
    {
        "content": "<p>So you have two files in your repo, one of which is 150 lines long and the other is 230 lines long, and you're running what looks like the same command twice (although you're <code>#eval</code>ing a declaration which is defined in both files). What's the difference between the two files? I suspect this has nothing to do with whether you have 230 lines or 150 lines --- that's I suspect a red herring. There is something in the bad file which is making things bad.</p>",
        "id": 440721986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716738578
    },
    {
        "content": "<p>You could probably debug this yourself by removing things in the bad file until it's quick, and then report on which declaration is making it slow.</p>",
        "id": 440722074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716738635
    },
    {
        "content": "<p>I see. I thought that since the other lines don't contribute to the function in the long file, they just act as extra lines in the code from the point of view of the function. I'll try removing them and see which of them has an impact.</p>",
        "id": 440725731,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1716742252
    },
    {
        "content": "<p>They clearly do contribute to it somehow, because they're making it take 6 times longer to run!</p>",
        "id": 440726604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716743145
    },
    {
        "content": "<p>When you say \"it takes longer to run\", do you mean \"when I run it on the command line, it takes longer to run the whole file\", or \"the time between starting the <code>#eval</code> and finishing it takes longer\"? you can use <code>set_option trace.profiler true in</code> to measure the time of a single command, which might be more precise than what you're doing</p>",
        "id": 440728357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716745153
    },
    {
        "content": "<p>I cloned the project and it seemed to me like there were two <code>#eval</code>s which ostensibly looked like they were doing the same thing but one was taking much longer than the other.</p>",
        "id": 440728544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716745376
    }
]