[
    {
        "content": "<p>I'm formalising Lindelöf spaces, but I'm not entirely sure what the 'mathlib way' of generalising 'Finset ι' to '\"Countable\" ι' would be, e.g. in the following setting: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">assumptions</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Just writing 'Countable ι' doesn't give the expected result. I currently have ∃ t : Set ι, Countable t \\wedge  (s ⊆ ⋃ i ∈ t, U i), is that the way to go?</p>",
        "id": 408650129,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1702918352
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset#doc\">docs#Finset</a> is \"bundled finiteness\". <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Countable#doc\">docs#Countable</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Countable#doc\">docs#Set.Countable</a> are \"unbundled countability\".</p>",
        "id": 408650522,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702918516
    },
    {
        "content": "<p>Do you actually want iota to be countable or should t be a countable set, possibly embedded in an uncountable type?</p>",
        "id": 408650543,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702918522
    },
    {
        "content": "<p>Whoops, the last Countable iota should have been Countable t, I just changed it. I was hoping  there'd be a 'bundled countability', which is why the first mentions in my message contain Countable iota.</p>",
        "id": 408651514,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1702918825
    },
    {
        "content": "<p>Then it should be <code>t.Countable</code>, not <code>Countable t</code>.</p>",
        "id": 408651727,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702918890
    },
    {
        "content": "<p>Great, and then continue with \\exists t : Set \\iota, t.Countable \\wedge ... ?</p>",
        "id": 408652374,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1702919051
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Denumerable#doc\">docs#Denumerable</a> is the true equivalent of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset#doc\">docs#Finset</a> for bundled countably infinite sets, but I'm not arguing that's what you want to use here.</p>",
        "id": 408674345,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702927448
    },
    {
        "content": "<p>Uh, not really? It would rather be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">DenSet</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n  <span class=\"n\">denumerable</span> <span class=\"o\">:</span> <span class=\"n\">Denumerable</span> <span class=\"n\">carrier</span>\n</code></pre></div>\n<p>which doesn't exist</p>",
        "id": 408674599,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702927569
    },
    {
        "content": "<p>Duh, you're right.</p>",
        "id": 408674787,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702927647
    },
    {
        "content": "<p>Is there a specific reason why we do not have a countable analogue for Finset? I think that the proofs and definitions for Lindelöf spaces that I'm working on in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9107\">#9107</a> would be a bit shorter if we had this.</p>",
        "id": 409379680,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1703162453
    },
    {
        "content": "<p>It would have less (no?) nice computational content and we rarely (never?) care about the lattice of countable sets of a type. In contrast, we care a lot about the lattice of finite sets.</p>",
        "id": 409379922,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703162526
    },
    {
        "content": "<p>Thank you, I get that the computational aspects are less nice indeed, for me it just meant for me that something that reads as 't : CountableSet X, p t' has to be written as 't : Set X, t.Countable ∧ p t', which was a bit more cumbersome to work with for me (unfolding the 'and' all the time etc)</p>",
        "id": 409380710,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1703162801
    },
    {
        "content": "<p>That's probably the lesser evil <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 409380906,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703162877
    },
    {
        "content": "<p>Yes, that is most likely true ... thanks!</p>",
        "id": 409381205,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1703162943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Countable.20analogue.20of.20Finset/near/408674599\">said</a>:</p>\n<blockquote>\n<p>Uh, not really? It would rather be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">DenSet</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n  <span class=\"n\">denumerable</span> <span class=\"o\">:</span> <span class=\"n\">Denumerable</span> <span class=\"n\">carrier</span>\n</code></pre></div>\n<p>which doesn't exist</p>\n</blockquote>\n<p>Doesn't this need a <code>Trunc</code> to make it encoding irrelevant?</p>",
        "id": 409394286,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703167090
    },
    {
        "content": "<p>Sure. But the point is that mathlib doesn't have it.</p>",
        "id": 409394456,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703167151
    }
]