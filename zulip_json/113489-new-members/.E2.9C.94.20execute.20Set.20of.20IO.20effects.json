[
    {
        "content": "<p>Hello,<br>\ni can iterate through Lists but not Mathlib (fin)sets like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"s2\">\"b\"</span><span class=\"o\">,</span> <span class=\"s2\">\"c\"</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"s2\">\"b\"</span><span class=\"o\">,</span> <span class=\"s2\">\"c\"</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span><span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I suppose Sets cannot support the ForIn typeclass because sets have no ordering to iterate through them. <br>\nbut what if i want to execute a set of commands where the order is not meaningful? (i dont care if 'abc' is printed or 'bac').<br>\nFinsets toList implementation uses choice which is non computable.<br>\nI think I could use FinEnum and generate a random order at runtime, but this seems very inefficent.</p>",
        "id": 433719713,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1713348504
    },
    {
        "content": "<p>You can use <code>l.val.unquot</code></p>",
        "id": 433719835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713348548
    },
    {
        "content": "<p>kernel complains about it being unsafe, is this avoidable?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">s.val.unquot</span>  <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span><span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"c1\">--invalid declaration</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">s.val.unquot</span>\n</code></pre></div>",
        "id": 433720225,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1713348695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> <a href=\"#narrow/stream/113489-new-members/topic/execute.20Set.20of.20IO.20effects/near/433719713\">said</a>:</p>\n<blockquote>\n<p>(i dont care if 'abc' is printed or 'bac').</p>\n</blockquote>\n<p>This is exactly what <code>unsafe</code> means</p>",
        "id": 433721764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713349325
    },
    {
        "content": "<p>You can write <code>let _ := unsafe s.val.unquot</code> to avoid the error</p>",
        "id": 433721812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713349350
    },
    {
        "content": "<p>hmm in my use case i broadcast a message to a set of IP adresses. <br>\nAll possible orders of sending have the same effect of broadcasting.<br>\nis 'unsafe' considered bad practice  or appropriate here?<br>\ni noticed it does not produce a warning similar to using 'sorry'</p>",
        "id": 433724366,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1713350402
    },
    {
        "content": "<blockquote>\n<p>All possible orders of sending have the same effect of broadcasting.</p>\n</blockquote>\n<p>Not if your network connection drops out halfway through the list. Once you're in <code>IO</code>, it's hard to argue that any two algorithms are truly the same.</p>",
        "id": 433725110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713350615
    },
    {
        "content": "<p><code>unsafe</code> just means \"you can't use this in proofs\"</p>",
        "id": 433725215,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713350650
    },
    {
        "content": "<p>Another approach would just be to put <code>unsafe</code> before <code>def main</code></p>",
        "id": 433725404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713350731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/execute.20Set.20of.20IO.20effects/near/433725110\">said</a>:</p>\n<blockquote>\n<p>Not if your network connection drops out halfway through the list. </p>\n</blockquote>\n<p>while thats true there is no meaningful order i could use on the addresses.</p>\n<p>thanks for the explanation</p>",
        "id": 433726746,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1713351290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> has marked this topic as resolved.</p>",
        "id": 433726831,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713351323
    },
    {
        "content": "<p>The order doesn't need to be meaningful, you could just sort the strings. What makes it unsafe is that the order is undeterminable in Lean's type theory, as you can have two sets that are equal but whose <code>unquot</code>s are in different orders</p>",
        "id": 433728524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713351960
    },
    {
        "content": "<p>In particular, you can have <code>a = b</code> and <code>unquot a â‰  unquot b</code>, which is not good logically</p>",
        "id": 433748305,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713358216
    },
    {
        "content": "<p>(Note, it's reasons like this that std data structures like <code>HashMap</code> and <code>RBMap</code> do <em>not</em> take a quotient)</p>",
        "id": 433783709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713364150
    }
]