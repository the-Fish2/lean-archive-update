[
    {
        "content": "<p>Hi. I am completing chapter 3.3 and i am stuck at this question.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>solution</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_of_not_gt</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h'</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"c1\">-- this is unsolvable without clue</span>\n  <span class=\"c1\">-- how to do it without linarith??</span>\n</code></pre></div>\n<p>As I understand <code>h</code> here is something like a function which is when give a Real positive number gives a proof what x is less than that number. But I don't know how to proceed with any of this, so I looked at the solutions and found use of linarith and <code>_</code>.</p>\n<p>Can you help me make proof  without use of linarith?</p>\n</div></div>",
        "id": 437147409,
        "sender_full_name": "lame_lexem",
        "timestamp": 1714928927
    },
    {
        "content": "<p>The state that you have after the <code>intro h'</code> is the same as when you had said <code>by_contra h'</code>, so you need to show a contradiction now. No idea if this is the right way, but hey, I'm a newb.</p>",
        "id": 437148087,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714929404
    },
    {
        "content": "<p>Oh ok. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I solved it the same way the previous ones were solved by obtaining the contra proof, and applying something from the mathlib. </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>solution</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- now works!</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_of_not_gt</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h'</span>\n    <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">h'</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">lt_self_iff_false</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">this</span>\n</code></pre></div>\n</div></div>\n<p>But I am still a bit unsure about <code>[h _ h']</code> syntax used in the linarith solution.<br>\nIs there a pice of docs i can read about it?</p>",
        "id": 437149400,
        "sender_full_name": "lame_lexem",
        "timestamp": 1714930443
    },
    {
        "content": "<blockquote>\n<p>But I am still a bit unsure about <code>[h _ h']</code> syntax used in the linarith solution.</p>\n</blockquote>\n<p>When you write <code>linarith [h _ h']</code> you are asking <code>linarith</code> to use the fact <code>h _ h'</code> in addition to all the other facts in the context. In this case, the <code>_</code> is inferred as <code>x</code> so it would be equivalent to write <code>[h x h']</code> (<code>h x h'</code> is the fact you used in the previous solution).  When you write the <code>_</code> , you are asking Lean to infer the missing parameter from the other parameters.  Since <code>h'</code> is of type <code>x &gt; 0</code>, and <code>h</code> is looking for a hypothesis of type <code>ε &gt; 0</code>, the <code>_</code> is inferred as <code>x</code>.</p>\n<p>The <code>_</code> is useful when you have a complicated expression. Imagine <code>h'</code> was <code>(some complicated expression) &gt; 0</code>. Then you could write <code>_</code> and Lean would infer the complicated expression, rather than forcing you to type it in.</p>",
        "id": 437151483,
        "sender_full_name": "Ted Hwa",
        "timestamp": 1714932386
    }
]