[
    {
        "content": "<p>I would like to show</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">;</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mi mathvariant=\"double-struck\">R</mi><mo>≅</mo><msup><mi>C</mi><mn>1</mn></msup><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">;</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">C((-1,1);\\mathbb{R} ) \\times \\mathbb{R} \\cong C^1((-1,1);\\mathbb{R} ) ,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">((</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mopen\">((</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span></span></span></span></span></p>\n<p>but I don't know how to state it <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> <br>\n(the equivalence is as topological vector spaces)</p>\n<p>Some questions:</p>\n<ol>\n<li><code>Set.Ioo </code>: is there notation for (-1,1),  similar to <code>[[-1,1]]</code> for [-1,1]?</li>\n<li>I found <code>ContinuousMap</code> for the type of continuous functions (between given topological spaces), but is it already a topological module? I could not find an instance.</li>\n<li>What is the type of continuously differentiable functions?</li>\n</ol>",
        "id": 418913051,
        "sender_full_name": "Michiel Huttener",
        "timestamp": 1706645824
    },
    {
        "content": "<ol>\n<li>No. <code>(-1, 1)</code> would be terrible notation and <code>]-1, 1[</code> sadly confuses Lean</li>\n<li>Yes. Sorry about the name, but it is around <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMap.instTopologicalAddGroupContinuousMapCompactOpenInstAddGroupContinuousMapToAddGroup#doc\">docs#ContinuousMap.instTopologicalAddGroupContinuousMapCompactOpenInstAddGroupContinuousMapToAddGroup</a></li>\n<li>It is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContDiff#doc\">docs#ContDiff</a></li>\n</ol>",
        "id": 418915435,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706646787
    },
    {
        "content": "<p>Thanks! I also found  3, but this is a Prop. How would I use it as a type? <br>\nAlso, is there a better way to find instances than just browsing Mathlib or guessing their name? Something like \"import all of Mathlib and if you've found something, tell me where\"?</p>",
        "id": 419004558,
        "sender_full_name": "Michiel Huttener",
        "timestamp": 1706695401
    },
    {
        "content": "<p>There are many such things (tactics like <code>exact?</code> <code>apply?</code>, there is also the <code>#synth</code> command to syntheise instances and <code>#find</code> command or <a href=\"https://loogle.lean-lang.org/\">https://loogle.lean-lang.org/</a>), if you say more specifcally (with an example!) what sort of input you want to give and what output you would want we can guide you more</p>",
        "id": 419013314,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1706698043
    },
    {
        "content": "<p>Below is a MWE.<br>\nI defined a type for continuously differentiable functions and will have to show a lot of instances.<br>\n(Note that I changed the goal a bit: (-1,1) is now ℝ.)<br>\nIs this the/a way to go?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.ContinuousFunction.Algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.ContDiff.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.ContDiff.Basic</span>\n\n<span class=\"c1\">-- continuously differentiable maps</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ContDiffMap</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">contDiff_toFun</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"n\">toFun</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">ContDiffMap</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">m.toFun</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">ContDiffMap</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">ContDiffMap</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">ContDiffMap</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"o\">(</span><span class=\"n\">ContDiffMap</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">IsOpen</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">isOpen_inter</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">isOpen_sUnion</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">isOpen_univ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousSMul</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">ContDiffMap</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">continuous_smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalAddGroup</span> <span class=\"o\">(</span><span class=\"n\">ContDiffMap</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">continuous_add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">continuous_neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- Fundamental theorem of calculus</span>\n<span class=\"kd\">def</span> <span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ContDiffMap</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 419203483,
        "sender_full_name": "Michiel Huttener",
        "timestamp": 1706778975
    },
    {
        "content": "<p>Also, is there a way to let vscode complete the necessary fields while defining an instance?</p>",
        "id": 419203714,
        "sender_full_name": "Michiel Huttener",
        "timestamp": 1706779080
    },
    {
        "content": "<p>The problem with the answer we have for VS Code completing necessary fields is that it's <code>instance foo : MyClass := _</code> and then put your cursor next to the <code>_</code> and then click on the blue bulb and then click on the option which mentions fields of a structure, and it prints out many fields which don't necessarily need to be filled in because they are filled in automatically. But in your situation maybe this is not a problem (in algebra it's a big problem because beginners don't have a clue what <code>nsmul</code> is).</p>",
        "id": 419287273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706805721
    },
    {
        "content": "<p>When I'm in this situation I usually just fill in the fields one by one and look at the error to tell me the name of the next field :-)</p>",
        "id": 419287397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706805749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Fixed in <a href=\"https://github.com/leanprover/std4/pull/577\">std4#577</a></p>",
        "id": 419417160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706865798
    }
]