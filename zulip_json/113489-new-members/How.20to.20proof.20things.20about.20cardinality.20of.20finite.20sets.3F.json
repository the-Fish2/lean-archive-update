[
    {
        "content": "<p>Example: Let X be some finite set with cardinality n, let a be some object that is not in X, then how could one proof (in Lean) that the cardinality of X U {a} is n + 1? </p>\n<p>I already saw the documentation here: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/SetTheory/Cardinal/Finite.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/SetTheory/Cardinal/Finite.html</a>, but I am not sure how to use this exactly.</p>",
        "id": 429072439,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1711192953
    },
    {
        "content": "<p>We have several notions of cardinality in mathlib, but this result should be already there for all of them. Can you state precisely the result you want?</p>",
        "id": 429073841,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711194158
    },
    {
        "content": "<p>Anyway look for results about card and insert</p>",
        "id": 429073857,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711194174
    },
    {
        "content": "<p>for example <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.card_insert_of_not_mem#doc\">docs#Finset.card_insert_of_not_mem</a></p>",
        "id": 429074401,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711194639
    },
    {
        "content": "<p>or maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.ncard_union_eq#doc\">docs#Set.ncard_union_eq</a> if you are working in <code>Set</code> rather than <code>Finset</code></p>",
        "id": 429077455,
        "sender_full_name": "David Renshaw",
        "timestamp": 1711197510
    },
    {
        "content": "<p>You'll get a better answer if you write a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> . Right now there are many ways to translate your question into lean.</p>",
        "id": 429077469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711197522
    },
    {
        "content": "<p>Thanks everyone! <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Card.html#Noncomputable-Set-Cardinality\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Card.html#Noncomputable-Set-Cardinality</a> seems perfect for my use cases. But I just ran into some error I don't understand.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Card</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hfin</span><span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">→</span> <span class=\"n\">S.encard</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hempty</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_setOf</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.not_succ_le_zero</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">apply</span> <span class=\"n\">False.elim</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Set.eq_empty_iff_forall_not_mem.mp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">apply</span> <span class=\"n\">False.elim</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"k\">have</span> <span class=\"n\">hcard</span> <span class=\"o\">:</span> <span class=\"n\">Set.encard</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Set.Nat.encard_range</span> <span class=\"mi\">0</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">hempty</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hcard</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hcard</span>\n</code></pre></div>\n<p>Although the hypothesis is exactly the goal as fas as I can tell, i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hcard</span><span class=\"o\">:</span> <span class=\"n\">Set.encard</span> <span class=\"bp\">∅</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Set.encard</span> <span class=\"bp\">∅</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>using <code>exact hcard</code> does not work. Why is that the case?</p>\n<p>The error message is not very helpful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">hcard</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Set.encard</span> <span class=\"bp\">∅</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Set.encard</span> <span class=\"bp\">∅</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Since as far as I can tell there is not type mismatch...</p>",
        "id": 429083439,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1711202499
    },
    {
        "content": "<p>One of your empty sets is the empty subset of alpha, the other is the empty subset of <code>Nat</code>. I noticed this by writing <code>convert hcard</code> (which means \"try <code>exact</code> and leave the things which weren't exactly the same as new goals\") and then hovering over the terms in the new goal in the infoview.</p>",
        "id": 429085743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711204211
    },
    {
        "content": "<p>Just to be clear -- if you've been brought up with set theory then you might think that there's only one empty set. But in Lean every type has an empty subset, and the empty subset of <code>X</code> has got type <code>Set X</code>, so it doesn't even make sense to ask whether two empty subsets of two different types are equal, because equality is only defined for two terms of the same type.</p>",
        "id": 429085921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711204361
    },
    {
        "content": "<p>Okay, I get it! Thanks for taking the time to answer this :)</p>",
        "id": 429087040,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1711205275
    }
]