[
    {
        "content": "<p>When formalizing the question</p>\n<blockquote>\n<p>If a group has even number of elements, then there exists a ≠ 1 such that a * a = 1</p>\n</blockquote>\n<p>I was trying to solve this by splitting the group into two sets. The lean code as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">EqInv</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">UnEqInv</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">G</span><span class=\"o\">)):</span>\n<span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Even</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₀</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h₀</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"k\">have</span> <span class=\"n\">not_inv_eq_self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">h''</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h'</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">nth_rw</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">mul_left_inv</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I want to show that if there is no element other than 1 that satisfy a * a = 1, then UnEqInv has even number of elements, as pairs of x and x⁻¹.  And EqInv has only 1 element, which leads to contradiction.<br>\nHowever, I found it hard to declare the cardinality of  the two set. It seems that I need to prove their finiteness and construct Finset from them. I feel quite confused since G is declared to be Fintype, but I got errors when using Set.toFinset. Also, prove that the univ of G equals the union of that two sets seems also nontrivial. But I haven't make it to that step yet.</p>",
        "id": 423984848,
        "sender_full_name": "Yicheng Tao",
        "timestamp": 1709200738
    },
    {
        "content": "<p>Counting is hard, especially if you're just learning the basics. I tell my students to avoid counting and quotients if they can. Here I would be tempted not to define your sets, and instead hope that there's a lemma in mathlib whose mathematical content is the claim that given a finite type and an involution on it, the cardinality of the fixed points is congruent mod 2 to the cardinality of the original set.</p>",
        "id": 423993902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709203887
    },
    {
        "content": "<p>Added to the confusion here is that, as you've spotted, there are several different ways in lean of saying \"this object is finite\" -- we have <code>Finset</code> (constructive bundled finiteness for sets), <code>Set.Finite</code> (nonconstructive nonbundled finiteness for sets), <code>Fintype</code> (constrctive unbundled finiteness for types) and <code>Finite</code> (nonconstructive unbundled finiteness for types), and occasionally people suggest that we also need nonconstructive bundled finiteness for sets too. Of course if you're an expert you can seamlessly move from one to another but these things are very daunting for beginners unfortunately</p>",
        "id": 423994715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709204164
    },
    {
        "content": "<p>In short, various open questions in this thread now are: should you push through with this approach or choose another one, and how to push through with this approach.</p>",
        "id": 423995091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709204285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"fixed\", \"mod\"</p>",
        "id": 423999550,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709205979
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/Perm/Cycle/Type.html#Equiv.Perm.card_fixedPoints_modEq\">Equiv.Perm.card_fixedPoints_modEq</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/PGroup.html#IsPGroup.card_modEq_card_fixedPoints\">IsPGroup.card_modEq_card_fixedPoints</a>, and <a href=\"https://loogle.lean-lang.org/?q=%22fixed%22%2C%20%22mod%22\">2 more</a></p>",
        "id": 423999554,
        "sender_full_name": "loogle",
        "timestamp": 1709205980
    },
    {
        "content": "<p>(Without reading the details...)</p>",
        "id": 423999623,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709206011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20construct.20a.20Finset.20from.20a.20Set/near/423993902\">发言道</a>：</p>\n<blockquote>\n<p>Counting is hard, especially if you're just learning the basics. I tell my students to avoid counting and quotients if they can. Here I would be tempted not to define your sets, and instead hope that there's a lemma in mathlib whose mathematical content is the claim that given a finite type and an involution on it, the cardinality of the fixed points is congruent mod 2 to the cardinality of the original set.</p>\n</blockquote>\n<p>Thank you for the advice. I'll try another approach. Hope for some more materials about the finiteness in Mathlib. Searching for useful theorems and definitions are quite a struggle.</p>",
        "id": 424003281,
        "sender_full_name": "Yicheng Tao",
        "timestamp": 1709207477
    },
    {
        "content": "<p>Pushing though is not obvious, though there might be things in mathlib that I missed. I suspect you could solve each of the substeps below except for seven, which took me ~50 lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>  <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">EqInv</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">UnEqInv</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">UnEqInv</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">EqInv</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">two</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EqInv</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">three</span> <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">Set.ncard</span> <span class=\"o\">(</span><span class=\"n\">EqInv</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Set.ncard</span> <span class=\"o\">(</span><span class=\"n\">UnEqInv</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">four</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Nat.card</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hsing</span> <span class=\"o\">:</span> <span class=\"n\">EqInv</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"o\">(</span><span class=\"n\">Set.ncard</span> <span class=\"o\">(</span><span class=\"n\">UnEqInv</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">five</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"o\">(</span><span class=\"n\">Set.ncard</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">six</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">UnEqInv</span> <span class=\"n\">G</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">UnEqInv</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">seven</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n    <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Set.ncard</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">eight</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Set.ncard</span> <span class=\"o\">(</span><span class=\"n\">UnEqInv</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span><span class=\"bp\">!</span> <span class=\"n\">h'</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₀</span> <span class=\"o\">:=</span> <span class=\"n\">two</span> <span class=\"n\">_</span> <span class=\"n\">h'</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">four</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">)</span> <span class=\"n\">h₀</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">eight</span> <span class=\"n\">G</span> <span class=\"n\">h'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.odd_iff_not_even</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 424004258,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709207871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"646276\">@Yicheng Tao</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.toFinset#doc\">docs#Set.toFinset</a> requires that the set be a <code>Fintype</code> too. One way to get that is to be sure your set <code>s</code> has <code>DecidableRel (· ∈ s)</code> (a decidable membership). Or, you can be careful with <code>classical</code></p>",
        "id": 424004351,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709207902
    },
    {
        "content": "<p>For the <code>example</code> above, I would try to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exists_prime_orderOf_dvd_card#doc\">docs#exists_prime_orderOf_dvd_card</a> .</p>",
        "id": 424008588,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709209608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"order\", \"exists\", \"dvd\", Group</p>",
        "id": 424008641,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709209626
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/Perm/Cycle/Type.html#exists_prime_orderOf_dvd_card\">exists_prime_orderOf_dvd_card</a></p>",
        "id": 424008648,
        "sender_full_name": "loogle",
        "timestamp": 1709209628
    },
    {
        "content": "<p>I'll add that you probably would have had a better time if your initial hypothesis had been of type <code>Even (Set.ncard G)</code>. If I'm not mistaken, it will let you avoid a bit of the traveling between <code>Set.ncard</code> and <code>Nat.card</code> that <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>  is doing. Skipping the long lemma which required some actual thinking, here are my solutions for the \"silly\" lemmas that when you start using Lean are incredibly frustrating to get stuck on. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">EqInv</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">UnEqInv</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">ncard</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">))):</span>\n<span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">EqInv</span> <span class=\"bp\">∪</span> <span class=\"n\">UnEqInv</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">EqInv</span><span class=\"o\">,</span> <span class=\"n\">UnEqInv</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eq_or_ne</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"c1\">-- by exact?</span>\n  <span class=\"k\">have</span> <span class=\"n\">card_eq</span> <span class=\"o\">:</span> <span class=\"n\">ncard</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ncard</span> <span class=\"n\">EqInv</span> <span class=\"bp\">+</span> <span class=\"n\">ncard</span> <span class=\"n\">UnEqInv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h₁</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ncard_union_eq</span> <span class=\"c1\">-- found with obvious moogle query</span>\n    <span class=\"c1\">-- all three by exact?</span>\n    <span class=\"n\">exact</span> <span class=\"n\">disjoint_left.mpr</span> <span class=\"k\">fun</span> <span class=\"o\">⦃</span><span class=\"n\">a</span><span class=\"o\">⦄</span> <span class=\"n\">a_1</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span>\n    <span class=\"n\">exact</span> <span class=\"n\">toFinite</span> <span class=\"n\">EqInv</span>\n    <span class=\"n\">exact</span> <span class=\"n\">toFinite</span> <span class=\"n\">UnEqInv</span>\n  <span class=\"k\">have</span> <span class=\"n\">card_one</span> <span class=\"o\">:</span> <span class=\"n\">ncard</span> <span class=\"n\">EqInv</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ncard_eq_one.mpr</span> <span class=\"c1\">-- by apply?</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">EqInv</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">exact</span> <span class=\"n\">not_not_mem.mp</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h'</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"c1\">-- by exact?</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">EqInv</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"c1\">-- simp simp simp</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">even_uneq</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">ncard</span> <span class=\"o\">(</span><span class=\"n\">UnEqInv</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">--this is the hard one : )</span>\n  <span class=\"k\">have</span> <span class=\"n\">odd_card</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"o\">(</span><span class=\"n\">ncard</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">card_eq</span><span class=\"o\">,</span> <span class=\"n\">card_one</span><span class=\"o\">,</span> <span class=\"n\">even_uneq</span><span class=\"o\">]</span> <span class=\"c1\">-- simp simp simp</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.odd_iff_not_even.mp</span> <span class=\"n\">odd_card</span> <span class=\"n\">h₀</span> <span class=\"c1\">-- found with obvious moogle query</span>\n</code></pre></div>\n<p>the philosophy is <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's \"hit everything with strong tactics  (in this case <code>simp</code>) and use <code>exact?</code> a lot\"</p>\n<p>Also I have a prehistoric laptop, a few of the things I had to moogle you might have luck with <code>exact?</code></p>",
        "id": 424010843,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709210494
    },
    {
        "content": "<p>FWIW:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_prime_orderOf_dvd_card</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Even.two_dvd</span> <span class=\"n\">h₀</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pow_orderOf_eq_one</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 424013577,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709211557
    },
    {
        "content": "<p>In some sense Michael's proof is using a sledgehammer to crack a nut though; the counting argument is far more delicate for a general prime p (the argument is to consider ordered sequences of length p whose product is 1, note that Z/pZ acts on this set (which has size |G|^{p-1}, a multiple of p) by cycling (\"move the first element to the end\") and has at least one fixed point (1,1,1,1,..,1) so must have others by counting. But I remember formalising this argument many years ago and it was like wading through treacle :-)</p>",
        "id": 424014149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709211733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"646276\">@Yicheng Tao</span> it was after various experiences like this (finding that counting is hard) that I realised to my surprise that formalising MSc level commutative algebra was far easier than doing this sort of stuff in Lean :-)</p>",
        "id": 424014303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709211791
    },
    {
        "content": "<p>Via <code>Equiv.Perm.card_fixedPoints_modEq</code> (and in the contrapositive):</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Cycle.Type</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">≠</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">G</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">Nat.ModEq</span><span class=\"o\">,</span> <span class=\"n\">Nat.one_mod</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.odd_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"k\">let</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">Function.End</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·⁻¹</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Function.fixedPoints</span> <span class=\"n\">inv</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Function.fixedPoints</span> <span class=\"n\">inv</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"mi\">1</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">ext</span> <span class=\"n\">x</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">Function.mem_fixedPoints_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"bp\">.</span> <span class=\"n\">tauto</span>\n      <span class=\"bp\">.</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span>\n        <span class=\"n\">exact</span> <span class=\"n\">inv_one</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">Fintype.card_ofSubsingleton</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Equiv.Perm.card_fixedPoints_modEq</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"n\">Function.End.mul_def</span><span class=\"o\">,</span> <span class=\"n\">Function.End.one_def</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">inv_comp_inv</span> <span class=\"n\">G</span>\n</code></pre></div>\n</div></div>",
        "id": 424015292,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709212123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20construct.20a.20Finset.20from.20a.20Set/near/424004258\">发言道</a>：</p>\n<blockquote>\n<p>Pushing though is not obvious, though there might be things in mathlib that I missed. I suspect you could solve each of the substeps below except for seven, which took me ~50 lines</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>  <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">EqInv</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">UnEqInv</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">UnEqInv</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">EqInv</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">two</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EqInv</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">three</span> <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">Set.ncard</span> <span class=\"o\">(</span><span class=\"n\">EqInv</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Set.ncard</span> <span class=\"o\">(</span><span class=\"n\">UnEqInv</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">four</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Nat.card</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hsing</span> <span class=\"o\">:</span> <span class=\"n\">EqInv</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"o\">(</span><span class=\"n\">Set.ncard</span> <span class=\"o\">(</span><span class=\"n\">UnEqInv</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">five</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"o\">(</span><span class=\"n\">Set.ncard</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">six</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">UnEqInv</span> <span class=\"n\">G</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">UnEqInv</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">seven</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n    <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Set.ncard</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">eight</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Set.ncard</span> <span class=\"o\">(</span><span class=\"n\">UnEqInv</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span><span class=\"bp\">!</span> <span class=\"n\">h'</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₀</span> <span class=\"o\">:=</span> <span class=\"n\">two</span> <span class=\"n\">_</span> <span class=\"n\">h'</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">four</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">)</span> <span class=\"n\">h₀</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">eight</span> <span class=\"n\">G</span> <span class=\"n\">h'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.odd_iff_not_even</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks for all the solution! I'm still trying to fill in the sorrys above that I didn't expect so many answers. I need to spend some time for digesting.</p>\n<p>I just encountered some difficulties to prove lemma four, feeling relieved to find shared ideas <span class=\"user-mention\" data-user-id=\"466290\">@Luigi Massacci</span>. I think these are valuable examples. I'll share them with my classmates and have some discussions. Now I'll mark this as resolved.</p>",
        "id": 424019830,
        "sender_full_name": "Yicheng Tao",
        "timestamp": 1709213646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"646276\">Yicheng Tao</span> has marked this topic as resolved.</p>",
        "id": 424020109,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709213755
    }
]