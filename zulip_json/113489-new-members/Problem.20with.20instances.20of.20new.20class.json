[
    {
        "content": "<p>I'm trying to declare a class that bundles numerous properties (a group, a topological space, an action, the fact that the space is T2 (Hausdorff), etc.); here is an <strong>oversimplified</strong> example of what I'm trying to do, and fail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">GroupMulAction</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">group</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">G</span>\n  <span class=\"n\">act</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">GroupMulAction</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">GroupMulAction.group</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">GroupMulAction</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">GroupMulAction.act</span>\n</code></pre></div>\n<p>(the error messages are different for both instances: the first complains <code>cannot find synthesization order for instance @instGroup with type</code>, and the second says <code>type mismatch\n  GroupMulAction.act\nhas type\n  @MulAction G α\n    (@DivInvMonoid.toMonoid G (@Group.toDivInvMonoid G (GroupMulAction.group α))) : Type (max ?u.2019 ?u.2018)\nbut is expected to have type\n  @MulAction G α (@DivInvMonoid.toMonoid G (@Group.toDivInvMonoid G instGroup)) : Type (max ?u.2019 ?u.2018)</code>)</p>\n<p>By contrast, the following works like a charm:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">TestSpace</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">isspace</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span>\n  <span class=\"n\">isT2</span> <span class=\"o\">:</span> <span class=\"n\">T2Space</span> <span class=\"n\">α</span>\n  <span class=\"n\">isNE</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">TestSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">TestSpace.isspace</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">TestSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">T2Space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">TestSpace.isT2</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">TestSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">TestSpace.isNE</span>\n</code></pre></div>\n<p>I read <code>https://leanprover.github.io/lean4/doc/typeclass.html</code> which I found enlightening, but obviously not enough...</p>",
        "id": 412397990,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1704997355
    },
    {
        "content": "<p>The short answer is that you can't combine typeclasses that take different <del>numbers of</del> types</p>",
        "id": 412398379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704997548
    },
    {
        "content": "<p>Soo <code>Foo A B</code> can only ever extend / contain / imply <code>Bar A B</code>, not <code>Baz A</code> or <code>Bar A A</code></p>",
        "id": 412398507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704997603
    },
    {
        "content": "<p>Laurent, you can read Chapter 7 of <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> that contains a lengthy discussion of that error message.</p>",
        "id": 412400163,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704998298
    },
    {
        "content": "<p>You can see how <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulAction#doc\">docs#MulAction</a> is defined (with <code>Monoid \\alpha</code> \"outside\") -- can you do the same in your example, with the group structure etc all outside the class itself?</p>",
        "id": 412405374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705000546
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> I marked G as <code>outParam</code> and I can do almost everything I want (except infer \"Group G\"). My code now reads</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">GroupMulAction</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">act</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">GroupMulAction</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">GroupMulAction.act</span>\n</code></pre></div>",
        "id": 412414085,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1705004151
    },
    {
        "content": "<p><del>There was a recent discussion about essentially the same </del>problem<del> kind of mathematics quite recently. Let me dig it up</del> No, I was wrong. It was about something different</p>",
        "id": 412428559,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705010464
    },
    {
        "content": "<p>Using an <code>outParam</code> here is a bad idea, as it means \"there will never be any type that acts on <code>α</code> other than <code>G</code>\"</p>",
        "id": 412442714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705017776
    }
]