[
    {
        "content": "<p>How to prove that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_minimal_i_of_pi</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">j</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I believe this proposition should hold true because if <code>i</code> is not the smallest natural number satisfying <code>p</code>, then we can find the smallest natural number satisfying <code>p</code> within a finite number of steps from <code>0</code> to <code>i-1</code>.<br>\nWhat I tried is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_minimal_i_of_pi</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">j</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">pi</span><span class=\"o\">⟩</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h'</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"n\">induction</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"mi\">0</span> <span class=\"n\">pi</span><span class=\"o\">)</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">k_lt_zero</span><span class=\"o\">⟩⟩</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.not_lt_zero</span> <span class=\"n\">k</span> <span class=\"n\">k_lt_zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">h''</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 425295420,
        "sender_full_name": "sdzz gndrc",
        "timestamp": 1709815668
    },
    {
        "content": "<p>Not at a computer, but this looks like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.find#doc\">docs#Nat.find</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.find_le#doc\">docs#Nat.find_le</a>.</p>",
        "id": 425295965,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709815823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"670422\">sdzz gndrc</span> has marked this topic as resolved.</p>",
        "id": 425303937,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709818604
    }
]