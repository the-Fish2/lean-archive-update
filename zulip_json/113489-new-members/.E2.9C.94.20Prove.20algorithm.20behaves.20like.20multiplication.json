[
    {
        "content": "<p>Given this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">2</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">_h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"mi\">0</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">mul</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">c.val</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"n\">c.val</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">%</span> <span class=\"n\">c.val</span><span class=\"o\">)</span>\n\n<span class=\"n\">termination_by</span> <span class=\"n\">z</span>\n\n<span class=\"n\">decreasing_by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero_lt_of_ne_zero</span> <span class=\"n\">_h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c.val</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_of_succ_le</span> <span class=\"n\">c.property</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.div_lt_self</span> <span class=\"n\">h₀</span> <span class=\"n\">h₁</span>\n</code></pre></div>\n<p>I try to prove that it is equivalent to regular multiplication:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_mul</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">2</span> <span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">c</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">mul</span>\n  <span class=\"n\">split</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>However I am stuck at the <code>sorry</code>. Can anybody help?</p>",
        "id": 425766314,
        "sender_full_name": "65c8b89a",
        "timestamp": 1710070521
    },
    {
        "content": "<p>Your function <code>mul</code> is defined by induction on <code>z</code> (it terminates because the definition calls <code>mul</code> with a strictly smaller value of <code>z</code>), so it would make sense to prove your result by induction on <code>z</code>. You'll need to use strong induction, because you're not just using the result for <code>z - 1</code> but for <code>z/c.val</code>, which could be strictly smaller.</p>",
        "id": 425771172,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710075277
    },
    {
        "content": "<p>As the definition of <code>mul</code> calls <code>mul</code> with a bigger value of <code>y</code>, you should not fix <code>y</code> before you start the induction. In fact you should start your proof by calling the strong induction principle on <code>Nat</code>.</p>",
        "id": 425771362,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710075472
    },
    {
        "content": "<p>Thank you for your reply. How do I use \"strong induction\"?</p>",
        "id": 425771450,
        "sender_full_name": "65c8b89a",
        "timestamp": 1710075539
    },
    {
        "content": "<p>For comparison I previously managed to prove a simplified version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">multiply</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">multiply</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">multiply</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">induction</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">multiply</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_succ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 425771604,
        "sender_full_name": "65c8b89a",
        "timestamp": 1710075656
    },
    {
        "content": "<p>You can start like so (note that I switched <code>y</code> and <code>z</code> in your quantifier, to make the induction easier; I trust that you can deduce the result you want from this modified version):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_mul</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">2</span> <span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">c</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">z</span> <span class=\"n\">using</span> <span class=\"n\">Nat.strongRec</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"n\">hz</span>\n</code></pre></div>",
        "id": 425771746,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710075755
    },
    {
        "content": "<p>Thanks. Where do I find <code>induction'</code>? Lean tells me \"unknown tactic\".</p>",
        "id": 425771931,
        "sender_full_name": "65c8b89a",
        "timestamp": 1710075926
    },
    {
        "content": "<p><code>import Mathlib.Tactic</code></p>",
        "id": 425772015,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710075989
    },
    {
        "content": "<p>OK. Thanks again. I try using Mathlib.</p>",
        "id": 425772051,
        "sender_full_name": "65c8b89a",
        "timestamp": 1710076027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>, is this a place where the new <code>.induct</code> declaration helps?</p>",
        "id": 425775372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710078967
    },
    {
        "content": "<p>What is the new <code>.induct</code> declaration ?</p>",
        "id": 425776753,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710080054
    },
    {
        "content": "<p>I am afraid I am out of my depth with this proof. I can see that <code>induction' z using Nat.strongRec with z hz</code> introduces a new hypothesis <code>∀ m &lt; z, ∀ (y : ℕ), mul c y m = y * m</code> but I have no idea how to proceed.</p>",
        "id": 425785388,
        "sender_full_name": "65c8b89a",
        "timestamp": 1710087565
    },
    {
        "content": "<p>Do you want a full solution or just a hint ?</p>",
        "id": 425790678,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710092529
    },
    {
        "content": "<p>Anyway, the hint is that you have to apply your new hypothesis with <code>m</code> equal to <code>z / c.val</code> and <code>y</code> equal to <code>c.val * y</code>.</p>",
        "id": 425790801,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710092679
    },
    {
        "content": "<p>Thanks for the hint but I guess I am ready for the full solution if you would be so kind.</p>",
        "id": 425800790,
        "sender_full_name": "65c8b89a",
        "timestamp": 1710100643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Prove.20algorithm.20behaves.20like.20multiplication/near/425775372\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span>, is this a place where the new <code>.induct</code> declaration helps?</p>\n</blockquote>\n<p>Yes, exactly! Too bad <a href=\"http://live.lean-lang.org\">live.lean-lang.org</a> doesn’t have a version selector to use the latest nightly…</p>\n<p>But with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">derive_functional_induction</span> <span class=\"n\">mul</span>\n<span class=\"k\">#check</span> <span class=\"n\">mul.induct</span>\n</code></pre></div>\n<p>you’ll get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mul.induct</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">case1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">y</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">case2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">c.val</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"n\">c.val</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span>\n</code></pre></div>\n<p>and can use it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_mul</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">2</span> <span class=\"o\">})</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">c</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"n\">using</span> <span class=\"n\">mul.induct</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"n\">case</span> <span class=\"n\">case1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">case2</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">h</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">mul</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- goal is now now ⊢ c.val * y * (z / c.val) + y * (z % c.val) = y * z</span>\n</code></pre></div>",
        "id": 425807244,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1710106015
    },
    {
        "content": "<p>Wow, cool!<br>\nWith old-fashioned methods, you can do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_mul</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">2</span> <span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">c</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">z</span> <span class=\"n\">using</span> <span class=\"n\">Nat.strongRec</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"n\">hz</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">mul</span>\n  <span class=\"n\">split</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y</span>\n    <span class=\"k\">have</span> <span class=\"n\">hlt</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"n\">c.1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.div_lt_self</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_iff_ne_zero.mpr</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">c.2</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hz</span> <span class=\"n\">_</span> <span class=\"n\">hlt</span> <span class=\"o\">(</span><span class=\"n\">c.1</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)]</span> <span class=\"c1\">-- goal is now c.val * y * (z / ↑c) + y * (z % c.val) = y * z</span>\n</code></pre></div>",
        "id": 425838879,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710134365
    },
    {
        "content": "<p>The other old-fashioned method is a <em>recursive proof</em>. In general, it is best if proofs follow the structure of the function they prove something about, so if <code>mul</code> is defined by well-founded recursion, then proofs about it often work well the same way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_mul</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">2</span> <span class=\"o\">})</span> <span class=\"n\">z</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">c</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">mul</span>\n  <span class=\"n\">split</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_mul</span><span class=\"o\">]</span> <span class=\"c1\">-- NB: we are using the theorem we are currently proving!</span>\n    <span class=\"c1\">-- goal is now c.val * y * (z / ↑c) + y * (z % c.val) = y * z</span>\n    <span class=\"gr\">sorry</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">z</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero_lt_of_ne_zero</span> <span class=\"n\">_h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c.val</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_of_succ_le</span> <span class=\"n\">c.property</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.div_lt_self</span> <span class=\"n\">h₀</span> <span class=\"n\">h₁</span>\n</code></pre></div>\n<p>This duplicates the termination proof of <code>mul</code>; this is precisely the busy work that <code>derive_functional_induction</code> will do for you.</p>",
        "id": 425877821,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1710152796
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"318709\">@Sophie Morel</span>  and <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> ! This helps me a lot. One last question about the repeated termination proof:  <code>_h</code> (from <code>mul</code>) is not in scope here, but Lean generates a hypothesis. Is  <code>rename_i _ _ _ h</code> the recommended way to deal with it here?</p>",
        "id": 425933344,
        "sender_full_name": "65c8b89a",
        "timestamp": 1710170476
    },
    {
        "content": "<p>I don’t think there is a perfect solution for this. I would do it as you do, or simply write <code>h : </code> and disable the unused-variable-linter with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">linter.unusedVariables</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"bp\">…</span>\n</code></pre></div>",
        "id": 425943239,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1710173064
    },
    {
        "content": "<p>Thanks but I was referring to the  termination proof for <strong><code>eq_mul</code></strong>. Lean gives  me an \"unknown identifier '_h'\" error for the line <code>have h₀: 0 &lt; z := Nat.zero_lt_of_ne_zero _h</code> but the context contains a <code>h✝ : ¬z = 0</code>. Without <code>rename_i</code> I could not make it work. Perhaps I misunderstood. Anyway this is a minor point so thanks again for your very helpful replies.</p>",
        "id": 425995615,
        "sender_full_name": "65c8b89a",
        "timestamp": 1710185765
    },
    {
        "content": "<p>Ah, you mean the <code>theorem eq_mul</code>, sorry, my bad.</p>\n<p>Hmm, I would have expected the <code>h</code> to be accessible there, but it looks like it is not. <code>rename_i h</code> works (no need to use underscores). It also works to say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_mul</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">2</span> <span class=\"o\">})</span> <span class=\"n\">z</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">c</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">mul</span>\n  <span class=\"n\">split</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_mul</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"n\">c.val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c.val</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)]</span> <span class=\"c1\">-- NB: we are using the theorem we are currently proving!</span>\n    <span class=\"c1\">-- goal is now c.val * y * (z / ↑c) + y * (z % c.val) = y * z</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>so this might be a bug with the way <code>split</code> or <code>case</code> works here.</p>",
        "id": 425998448,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1710186936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"691637\">65c8b89a</span> has marked this topic as resolved.</p>",
        "id": 425999579,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710187399
    }
]