[
    {
        "content": "<p>It seems very unintuitive to me that \"the least positive residue\" convention is chosen.    Take 5mod3 and (-5)mod3 for example.   Having (q,r) = (1,2) in the first strongly implies (to me at least) that the second case should have the negative operator applied to it resulting in (q,r) = (-1,-2), instead of (-2,1).  This preserves the symmetry as well as the intuitive nature: the absolute value of the divisor multiplied with the quotient is less than the absolute value of the dividend, and the remainder is added, always moving the real answer away from 0.   As all numbers and operations are built first from the naturals starting with just 0 and 1 (thank you, lean number game), it seems also correct to anchor further definitions based on the behavior of working with strictly positives...  </p>\n<p>Is there a strong reason the least positive residue was chosen, from the context of number theory?  Or is it largely resting on practical reasons emerging from computer science?  Or am I just completely out of the ballpark here?  </p>\n<p>Is it even important (beyond needing to correct your work accordingly?)</p>",
        "id": 433969609,
        "sender_full_name": "Ian Allen",
        "timestamp": 1713424257
    },
    {
        "content": "<p>It's very convenient to know that the remainder is always in a certain range because this now gives you a natural and well-behaved map from the integers to the ring Z/rZ thought of as the numbers from 0 to r-1</p>",
        "id": 433981959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713425808
    },
    {
        "content": "<p>Ok, but doesn't the other way also produce a well defined range?  It's just got different bounds.. no?  Maybe I should learn what rings do, finally...</p>",
        "id": 433983951,
        "sender_full_name": "Ian Allen",
        "timestamp": 1713426455
    },
    {
        "content": "<p>Right, so your system gives us two well-defined ranges which is less convenient than one well-defined range</p>",
        "id": 433987527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713427584
    },
    {
        "content": "<p>Ahh ok.  Thank you, Kevin.</p>",
        "id": 433992952,
        "sender_full_name": "Ian Allen",
        "timestamp": 1713428943
    },
    {
        "content": "<p>I think the distinction here is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.div#doc\">docs#Int.div</a> vs <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.ediv#doc\">docs#Int.ediv</a></p>",
        "id": 434003720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713432012
    },
    {
        "content": "<p>Though the docstrings are a little confusing because until very recently the meaning of <code>/</code> swapped depending on what you import</p>",
        "id": 434004116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713432135
    },
    {
        "content": "<p>Yes exactly, what I was looking for was the reason for the propensity for one choice above the others.   It is apparently just a choice of convenience, one that emerges I can imagine from having to write algorithms and efficiently predict behavior, which is satisfying enough.   I just hate doing something that feels wrong, without knowing the reason for it..</p>",
        "id": 434006431,
        "sender_full_name": "Ian Allen",
        "timestamp": 1713432835
    },
    {
        "content": "<p><a href=\"https://blog.vero.site/post/modulo\">https://blog.vero.site/post/modulo</a> is a good read on why C's modulo operation is the way it is. I think a big reason why people find negative remainders natural is familiarity with C.</p>",
        "id": 434008622,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1713433620
    },
    {
        "content": "<p>One big footgun in C is checking if a number is odd by doing <code>n % 2 == 1</code>. This is obviously wrong given the context we have here, but it's very easy to forget about it while writing code.</p>",
        "id": 434008857,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1713433711
    },
    {
        "content": "<p>Thanks for the link.   Pretty sure I am firmly in the truncate towards zero camp.  Fun to see this is such a big topic after all, I came in thinking maybe there was just something I didn't understand.</p>",
        "id": 434010972,
        "sender_full_name": "Ian Allen",
        "timestamp": 1713434423
    }
]