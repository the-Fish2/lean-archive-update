[
    {
        "content": "<p>Can i write MonadLift instances for parameterized Monads? When trying to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">PrintEff</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">print</span><span class=\"o\">:</span> <span class=\"n\">PrintEff</span> <span class=\"n\">s</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">MonadLift</span> <span class=\"o\">(</span><span class=\"n\">PrintEff</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">IO</span> <span class=\"n\">where</span>\n  <span class=\"n\">monadLift</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">print</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>i get the info that MonadLift takes an semiOutParam (Type u â†’ Type v). From the Docs I  interpret this as: there cannot occur any free variables (like s in my example).<br>\nIst this correct or is there a way to write such a instance?</p>",
        "id": 425725832,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1710025731
    }
]