[
    {
        "content": "<p>Dear all,</p>\n<p>I am new to lean and mathlib. As a first sample project in lean4, I would like to formalize the proof of Jensen's formula [https://en.wikipedia.org/wiki/Jensen%27s_formula] of complex analysis. Right now, I am banging my head against the wall because I cannot make lean to compute derivatives of the most elementary functions. Can anyone here please help me with that? I attach a reduced sample file that highlights with 'sorry' the places where I have problems.</p>\n<p>Sorry for asking so elementary questions here. Any help of any kind is greatly appreciated!</p>\n<p>Best wishes,</p>\n<p>Stefan.</p>\n<hr>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.LineDeriv.Basic</span>\n\n<span class=\"c1\">-- Harmonic functions on the plane</span>\n\n\n<span class=\"kd\">noncomputable</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">laplace</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">f</span>\n  <span class=\"k\">let</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">x.2</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.I</span><span class=\"o\">)</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">F₁</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">lineDeriv</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"n\">e₁</span>\n  <span class=\"k\">let</span> <span class=\"n\">F₁₁</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">lineDeriv</span> <span class=\"n\">ℝ</span> <span class=\"n\">F₁</span> <span class=\"n\">x</span> <span class=\"n\">e₁</span>\n  <span class=\"k\">let</span> <span class=\"n\">F₂</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">lineDeriv</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"n\">e₂</span>\n  <span class=\"k\">let</span> <span class=\"n\">F₂₂</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">lineDeriv</span> <span class=\"n\">ℝ</span> <span class=\"n\">F₂</span> <span class=\"n\">x</span> <span class=\"n\">e₂</span>\n\n  <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">F₁₁</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">x.2</span><span class=\"o\">⟩</span> <span class=\"bp\">+</span> <span class=\"n\">F₂₂</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">x.2</span><span class=\"o\">⟩</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z₀</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">laplace</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"n\">z₀</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z₀</span>\n\n  <span class=\"n\">unfold</span> <span class=\"n\">laplace</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">lineDeriv</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z₀</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">laplace</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">Complex.exp</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"n\">z₀</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z₀</span>\n\n  <span class=\"n\">unfold</span> <span class=\"n\">laplace</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">lineDeriv</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Does not work: simp [deriv.add]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 435566902,
        "sender_full_name": "Stefan Kebekus",
        "timestamp": 1714130699
    },
    {
        "content": "<p>I don't know anything about <code>lineDeriv</code>, but I can help with your last example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.LineDeriv.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_eq</span><span class=\"o\">]</span> <span class=\"c1\">-- in my experience with the library, more results are stated about `HasDerivAt` than about equality of `deriv`</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.const_add</span> <span class=\"c1\">-- I guessed the name `HasDerivAt.add`, which didn't work, but the autocomplete dropdown showed `add_const` and `const_add` too</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hasDerivAt_id'</span> <span class=\"n\">x</span> <span class=\"c1\">-- I assumed this was in the library, and `apply?` found it</span>\n</code></pre></div>",
        "id": 435573580,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714133452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> Now this is extremely helpful, thank you so much. I have been banging my head against concrete all day long. I will try to apply this to the other sorries (which are statements about deriv and not lineDeriv, so things might work).</p>",
        "id": 435574071,
        "sender_full_name": "Stefan Kebekus",
        "timestamp": 1714133658
    },
    {
        "content": "<p>Here is your first one: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z₀</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">laplace</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"n\">z₀</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z₀</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">laplace</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">lineDeriv</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">arg</span> <span class=\"mi\">1</span>\n    <span class=\"n\">intro</span> <span class=\"n\">t</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_sub</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">try</span> <span class=\"n\">fun_prop</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_mul</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">try</span> <span class=\"n\">fun_prop</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_const_add</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">ring_nf</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">rhs</span>\n    <span class=\"n\">arg</span> <span class=\"mi\">1</span>\n    <span class=\"n\">intro</span> <span class=\"n\">t</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_sub</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">try</span> <span class=\"n\">fun_prop</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_const</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_mul</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">try</span> <span class=\"n\">fun_prop</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_const_add</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">ring_nf</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_const_add</span><span class=\"o\">,</span> <span class=\"n\">deriv_sub</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">fun_prop</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 435574349,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1714133769
    },
    {
        "content": "<p>Modulo that this was my first time actually computing derivatives, and there's probably a more optimized proof</p>",
        "id": 435574394,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1714133793
    },
    {
        "content": "<p>My strategy was \"that looks like something I can do with <code>conv</code> +  guessing the names of some <code>rw</code> theorems + <code>fun_prop</code> is always awesome\"</p>",
        "id": 435574494,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1714133849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466290\">@Luigi Massacci</span> Thank you so much! I have a bit of a hard time following, though. What does 'conv' do in this context?</p>",
        "id": 435574644,
        "sender_full_name": "Stefan Kebekus",
        "timestamp": 1714133910
    },
    {
        "content": "<p>try it out in the infoview and it should be clearer, but essentially it allows you to work under binders (in particular, to simplify expressions), <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/conv.html\">see here for some documentation</a>, it is one of the more useful tactics for this kind of stuff.</p>",
        "id": 435574821,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1714133988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466290\">@Luigi Massacci</span> Understood. Awesome, you saved my [and my wife's] weekend. Thanks again!</p>",
        "id": 435575000,
        "sender_full_name": "Stefan Kebekus",
        "timestamp": 1714134043
    },
    {
        "content": "<p>Also, if you are doing Complex Analysis stuff, <span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> can probably be helpful for the non-elementary stuff</p>",
        "id": 435577555,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1714134947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"679664\">@Stefan Kebekus</span> we should start by saying that Mathlib is very bad at concrete computations. We know we have a lot of work to do about that. Some of it is already under way. For instance <a href=\"https://github.com/leanprover-community/mathlib4/pull/10594\">https://github.com/leanprover-community/mathlib4/pull/10594</a> is work in progress towards a tactic that helps computing concrete derivatives. Right know you would have a lot more fun formalizing abstract mathematics.</p>",
        "id": 435638092,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714155806
    },
    {
        "content": "<p>For instance your last example can be proven using:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">t</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_const_add</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>but really it should be only one tactic.</p>",
        "id": 435638270,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714155876
    },
    {
        "content": "<p>However I also think you took a wrong start with your definition of the Laplacian. You used <code>lineDeriv</code> that is a very exotic definition, as explained in the overall documentation of the file containing it: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Calculus/LineDeriv/Basic.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Calculus/LineDeriv/Basic.html</a>.</p>",
        "id": 435638481,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714155966
    },
    {
        "content": "<p>So I am not surprised that lots of lemmas are missing here.</p>",
        "id": 435638526,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714155984
    },
    {
        "content": "<p>A more idiomatic definition would be using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=iteratedFDeriv#doc\">docs#iteratedFDeriv</a>.</p>",
        "id": 435638565,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714156004
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">laplace'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iteratedFDeriv</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">iteratedFDeriv</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">Complex.I</span><span class=\"o\">,</span> <span class=\"n\">Complex.I</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 435638625,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714156037
    },
    {
        "content": "<p>Which reads </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>D</mi><mn>2</mn></msup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><msup><mi>D</mi><mn>2</mn></msup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Delta f(z) = D^2f(z)(1, 1) + D^2f(z)(i, i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>where you can already see that Lean requires you to be more specific that you paper and pen since the above expression does not clearly say whether <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> means real or complex differentiation.</p>",
        "id": 435638826,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714156145
    },
    {
        "content": "<p>However using this definition will not fix the issue I started with: doing concrete computations will probably be very painful.</p>",
        "id": 435638948,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714156201
    },
    {
        "content": "<p>Note for people who wonder what they could do to help the community today: in the Lean 3 version of the Mathematics in Lean  textbook, the <a href=\"https://leanprover-community.github.io/mathematics_in_lean3/08_Differential_Calculus.html\">differential calculus chapter</a> contained more concrete examples than in the <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C10_Differential_Calculus.html\">Lean 4 version</a>. Those examples were removed when we ported the book last summer because the Lean 4 simplifier had bugs at that time. In the mean time Leo worked a lot on the Lean 4 simplifier and I bet many of those examples could be restored (maybe after adding some simp attributes in mathlib). A pull request to the book doing that would be very welcome.</p>",
        "id": 435639695,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714156546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Thank you for your explanations and suggestions. I am experimenting with the approach you suggested and do seem to make some progress. I am looking forward to working with the community here. Thanks again.</p>",
        "id": 435984625,
        "sender_full_name": "Stefan Kebekus",
        "timestamp": 1714379282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466290\">@Luigi Massacci</span> Thanks again for your help. I will be in touch with Beffara as soon as my project becomes more concrete.</p>",
        "id": 435984831,
        "sender_full_name": "Stefan Kebekus",
        "timestamp": 1714379352
    },
    {
        "content": "<p>@massot Dear Patrick, I am trying to follow the path that you suggested … but now I am struggling to compare various notions of derivatives. Any help would be greatly appreciated! -- Thanks again, and sorry for the hassle.</p>\n<p>Concretely, for a function</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mo>:</mo><mi mathvariant=\"double-struck\">R</mi><mo>×</mo><mi mathvariant=\"double-struck\">R</mi><mo>→</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">f : \\mathbb R \\times \\mathbb R \\to R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span></p>\n<p>I would like to compare</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mi>f</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mfrac><mi mathvariant=\"normal\">∂</mi><mrow><mi mathvariant=\"normal\">∂</mi><mi>a</mi></mrow></mfrac><mfrac><mi mathvariant=\"normal\">∂</mi><mrow><mi mathvariant=\"normal\">∂</mi><mi>b</mi></mrow></mfrac><mi>f</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>w</mi><mo>→</mo><msup><mi>f</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>w</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><msup><mo stretchy=\"false\">)</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f&#x27;&#x27;(z) (a, b),  (\\frac{\\partial}{\\partial a}\\frac{\\partial}{\\partial b}f)(z), ( w \\to f&#x27;(w)(a))&#x27;(b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.0574em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8019em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">b</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0519em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8019em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8019em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>In Lean4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l₁</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">iteratedFDeriv</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 436909181,
        "sender_full_name": "Stefan Kebekus",
        "timestamp": 1714750490
    },
    {
        "content": "<p>These questions are not straightforward, especially the first one, since the definition of the iterated derivative involves the process called currying (viewing a function on a product space as a function of functions), and one needs to see how this process commutes with taking derivatives -- while this is all completely transparent in informal mathematics. Here are proofs for your statements:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.ContDiff.Bounds</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.FDeriv.Symmetric</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l₁</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">iteratedFDeriv</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- next line should not be needed, but is because of synthPending issue</span>\n  <span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span>\n      <span class=\"n\">ContinuousMultilinearMap</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">iteratedFDeriv_succ_eq_comp_left</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.reduceAdd</span><span class=\"o\">,</span>\n    <span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">continuousMultilinearCurryLeftEquiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp_fderiv</span>\n      <span class=\"c1\">-- next line shouldn't be needed, but Lean is confused without it</span>\n      <span class=\"c1\">-- without any help (i.e., just using LinearIsometryEquiv.comp_fderiv), nothing is simplified.</span>\n      <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">iteratedFDeriv</span> <span class=\"n\">ℝ</span> <span class=\"mi\">0</span> <span class=\"n\">f</span><span class=\"o\">)),</span>\n    <span class=\"n\">continuousMultilinearCurryLeftEquiv_apply</span><span class=\"o\">,</span> <span class=\"n\">Fin.isValue</span><span class=\"o\">,</span> <span class=\"n\">Matrix.cons_val_zero</span><span class=\"o\">,</span> <span class=\"n\">Fin.tail_def</span><span class=\"o\">,</span>\n    <span class=\"n\">ContinuousLinearMap.coe_comp'</span><span class=\"o\">,</span> <span class=\"n\">ContinuousLinearEquiv.coe_coe</span><span class=\"o\">,</span> <span class=\"n\">LinearIsometryEquiv.coe_coe</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">iteratedFDeriv_zero_eq_comp</span><span class=\"o\">,</span> <span class=\"n\">fderiv_continuousLinearEquiv_comp</span><span class=\"o\">,</span>\n    <span class=\"n\">LinearIsometryEquiv.comp_fderiv'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l₂'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">↦</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fderiv_clm_apply</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">contDiff_succ_iff_fderiv.1</span> <span class=\"n\">hf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">differentiable</span> <span class=\"n\">le_rfl</span> <span class=\"n\">z</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l₂</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">↦</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">l₂'</span> <span class=\"n\">hf</span> <span class=\"n\">z</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">second_derivative_symmetric</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:=</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">y</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hf.differentiable</span> <span class=\"n\">one_le_two</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hasFDerivAt</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">contDiff_succ_iff_fderiv.1</span> <span class=\"n\">hf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">differentiable</span> <span class=\"n\">le_rfl</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hasFDerivAt</span>\n</code></pre></div>\n<p>Note that the first proof will not compile on master, as I had to add a few missing statements in our library here and there. But it works on my branch SG_fderiv_fderiv, as you can see at <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/8949607940/job/24584095263\">https://github.com/leanprover-community/mathlib4/actions/runs/8949607940/job/24584095263</a>.</p>",
        "id": 437008048,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714815911
    },
    {
        "content": "<p>A few comments on the proofs. </p>\n<p>First, instead of taking a function defined on <code>ℝ × ℝ</code> as in your example, I did it on a general normed space. The reason is that more generality often makes the proofs easier to read and to write, as you are not confused by irrelevant details.</p>\n<p>Second, for the first lemma <code>l₁</code>, I didn't need the assumption of second differentiability, this identity is always true.</p>\n<p>Third, for the second lemma <code>l₂</code>, your statement is true as given, but not so natural because you have exchanged the roles of <code>a</code> and <code>b</code> in the left and right hand sides. Of course, it doesn't make a difference since the second derivative is symmetric (and we know that in mathlib), but the natural proof gives the statement <code>l₂'</code> in my code snippet.</p>\n<p>Don't hesitate to ask if you have more questions on what is going on there!</p>",
        "id": 437008285,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714816144
    },
    {
        "content": "<p>Also, as spaces of continuous linear maps into spaces of continuous multilinear maps are quite involved, Lean struggles a little bit here and you can see a few defects of our system in the proof of <code>l₁</code>, that I have pinpointed in the comments. Namely, typeclass inference is failing if I don't help it a little bit, and a simp lemma doesn't fire if I don't help it a little bit.</p>",
        "id": 437008406,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714816298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span> Thank you for your great answer. This will definitely help me move forward.</p>\n<p>I understand your comments on the proofs/my statements. This is a little simplistic because I tried to write down the simplest statement I couldn't prove. As soon as things are working, I will upgrade the statements to the appropriate level of generality.</p>\n<p>Are you planning to submit SG_fderiv_fderiv to the main branch of mathlib anytime soon?</p>\n<p>Thanks again,</p>\n<p>Stefan.</p>",
        "id": 437205575,
        "sender_full_name": "Stefan Kebekus",
        "timestamp": 1714979113
    },
    {
        "content": "<p>Yes, I have just PRed my branch to mathlib, in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12697\">#12697</a> (with a simpler proof than the above, as I found a better lemma).</p>",
        "id": 437231351,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714989728
    },
    {
        "content": "<p>That's very good news, looking forward to it.</p>",
        "id": 437238227,
        "sender_full_name": "Stefan Kebekus",
        "timestamp": 1714992828
    }
]