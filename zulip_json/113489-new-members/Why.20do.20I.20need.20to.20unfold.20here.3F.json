[
    {
        "content": "<p>I got tripped up on the example below. <code>myType</code> is defined as a pair, but that it is or what it's a pair of is actually totally irrelevant to the lemma I'm proving. You can see the monad does not use the <code>A,B</code> values it unpacks. Yet it is still necessary to unfold the definition for the code to work. Why is this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myType</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">stmt</span> <span class=\"o\">:</span> <span class=\"n\">myType</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">(</span><span class=\"n\">StateT.run</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Id</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">stmt</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n            <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n            <span class=\"n\">set</span> <span class=\"o\">([]</span> <span class=\"o\">::</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n            <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n            <span class=\"n\">set</span> <span class=\"o\">([]</span> <span class=\"o\">::</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n            <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n            <span class=\"n\">set</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">List.headD</span> <span class=\"n\">x</span> <span class=\"o\">[])</span> <span class=\"o\">::</span> <span class=\"n\">List.tailD</span> <span class=\"n\">x</span> <span class=\"o\">[])</span>\n            <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n            <span class=\"n\">set</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">List.headD</span> <span class=\"n\">x</span> <span class=\"o\">[])</span> <span class=\"o\">::</span> <span class=\"n\">List.tailD</span> <span class=\"n\">x</span> <span class=\"o\">[])</span>\n            <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n            <span class=\"n\">set</span> <span class=\"o\">([]</span> <span class=\"o\">::</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n            <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n            <span class=\"n\">set</span> <span class=\"o\">([]</span> <span class=\"o\">::</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n            <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n            <span class=\"n\">set</span> <span class=\"o\">([]</span> <span class=\"o\">::</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n            <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n            <span class=\"n\">set</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">List.headD</span> <span class=\"n\">x</span> <span class=\"o\">[])</span> <span class=\"o\">::</span> <span class=\"n\">List.tailD</span> <span class=\"n\">x</span> <span class=\"o\">[])</span>\n            <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n            <span class=\"n\">set</span> <span class=\"o\">([]</span> <span class=\"o\">::</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n            <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n            <span class=\"n\">set</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">List.headD</span> <span class=\"n\">x</span> <span class=\"o\">[])</span> <span class=\"o\">::</span> <span class=\"n\">List.tailD</span> <span class=\"n\">x</span> <span class=\"o\">[]))</span>\n          <span class=\"o\">[[]])</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">],</span> <span class=\"o\">[],</span> <span class=\"o\">[],</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">],</span> <span class=\"o\">[],</span> <span class=\"o\">[]]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- Doesn't do what I want</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">myType</span> <span class=\"c1\">-- ???</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- Now it does what I want</span>\n</code></pre></div>",
        "id": 419941168,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707172799
    },
    {
        "content": "<p>Indeed, if I replace <code>(A,B)</code> with <code>A</code> it works on the first simp (unfortunately I don't think I can do this in my real code because the unpacking arises from a definition which is important for other things).</p>",
        "id": 419941978,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707173091
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20power.20of.20a.20type.20using.20cartesian.20product/near/419134912\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.E2.9C.94.20power.20of.20a.20type.20using.20cartesian.20product/near/419134912</a></p>",
        "id": 419954218,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707180074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20power.20of.20a.20type.20using.20cartesian.20product/near/419134912\">said</a>:</p>\n<blockquote>\n<p><code>def Foo : Type := Bar</code> roughly means \"forget everything you know about <code>Bar</code> other than how it is represented\"</p>\n</blockquote>",
        "id": 419954341,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707180137
    },
    {
        "content": "<p>oh wait, sorry, I just misread your question</p>",
        "id": 419954402,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707180182
    },
    {
        "content": "<p>you're saying you understand the behavior of <code>def</code> but you're still not sure why it matters in this case?</p>",
        "id": 419954515,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707180252
    },
    {
        "content": "<p>Yes</p>",
        "id": 419954535,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707180273
    },
    {
        "content": "<p>I don't understand why it affects how simp works here. The whole do expression never references the arguments from that function which returns it.</p>",
        "id": 419954804,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707180474
    },
    {
        "content": "<p>Frankly, I don't understand why, when I have a match expression like that, it doesn't just automatically disappear with simp.</p>",
        "id": 419955242,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707180745
    }
]