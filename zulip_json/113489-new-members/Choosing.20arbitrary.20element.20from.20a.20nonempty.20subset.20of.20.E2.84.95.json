[
    {
        "content": "<p>Hello, I was wondering I can construct a function that, given an element <code>e</code>, it returns an arbitrary element of the set <code>{n : ℕ | p(e)}</code>, where I can prove that this set is nonempty for any <code>e</code>. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary_elem</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">e</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 425690665,
        "sender_full_name": "Gaëtan Serré",
        "timestamp": 1709994076
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.find#doc\">docs#Nat.find</a></p>",
        "id": 425692109,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709995415
    },
    {
        "content": "<p>Thanks a lot! I was not looking in the right place in the doc…</p>",
        "id": 425692231,
        "sender_full_name": "Gaëtan Serré",
        "timestamp": 1709995538
    },
    {
        "content": "<p>Ok that's lead to another problem. Here is my context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">u</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>The idea is to construct a function <code>g : u → ℕ</code> such that, on <code>E</code>, <code>g e</code> returns an arbitrary (let's says the smallest) <code>n</code> such that <code>f n = e</code>. On the complementary set, I don't care what natural number it returns (let's say <code>0</code>). The issue is that, in order to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.find#doc\">docs#Nat.find</a>, I need the proof that <code>e ∈ E</code>. I looked <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.indicator#doc\">docs#Set.indicator</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.piecewise#doc\">docs#Set.piecewise</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.single#doc\">docs#Pi.single</a> but none seems to \"propagate\" the proof to the function. Is there a way to do that? Note that the property that <code>e ∈ E</code> is Decidable is not an issue here.</p>",
        "id": 425695452,
        "sender_full_name": "Gaëtan Serré",
        "timestamp": 1709998225
    },
    {
        "content": "<p>I apologize if it is a dumb question. It is the first time I deal with this kind of issue</p>",
        "id": 425695524,
        "sender_full_name": "Gaëtan Serré",
        "timestamp": 1709998307
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Nonempty.some#doc\">docs#Set.Nonempty.some</a>, which works for all sets (not just sets of natural numbers), and it avoids any Decidable instances.</p>\n<p>You could also use <code>sInf</code> of your set to take its infimum. This doesn't itself take a nonemptiness assumption (and it ends up giving 0 if the set is empty), but you need nonemptiness for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.sInf_mem#doc\">docs#Nat.sInf_mem</a></p>",
        "id": 425696604,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709999143
    },
    {
        "content": "<p>Instead of sharing contexts, you can usually get better help if you share a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, which is some code that can be pasted into the editor, ideally with the question corresponding to some piece of the code that needs to be filled in.</p>",
        "id": 425696730,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709999259
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span> <span class=\"k\">then</span> <span class=\"n\">Nat.find</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>?</p>",
        "id": 425696756,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1709999278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Choosing.20arbitrary.20element.20from.20a.20nonempty.20subset.20of.20.E2.84.95/near/425696604\">said</a>:</p>\n<blockquote>\n<p>There's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Nonempty.some#doc\">docs#Set.Nonempty.some</a>, which works for all sets (not just sets of natural numbers), and it avoids any Decidable instances.</p>\n<p>You could also use <code>sInf</code> of your set to take its infimum. This doesn't itself take a nonemptiness assumption (and it ends up giving 0 if the set is empty), but you need nonemptiness for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.sInf_mem#doc\">docs#Nat.sInf_mem</a></p>\n</blockquote>\n<p>Thanks for all the references!</p>\n<blockquote>\n<p>Instead of sharing contexts, you can usually get better help if you share a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, which is some code that can be pasted into the editor, ideally with the question corresponding to some piece of the code that needs to be filled in.</p>\n</blockquote>\n<p>You're totally right, I don't know why I did not provided a mwe this time, sorry for that</p>",
        "id": 425696994,
        "sender_full_name": "Gaëtan Serré",
        "timestamp": 1709999468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/113489-new-members/topic/Choosing.20arbitrary.20element.20from.20a.20nonempty.20subset.20of.20.E2.84.95/near/425696756\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span> <span class=\"k\">then</span> <span class=\"n\">Nat.find</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>?</p>\n</blockquote>\n<p>Awesome, thanks a lot! I tried something like that earlier but it did not typechecked for some reason...</p>",
        "id": 425697141,
        "sender_full_name": "Gaëtan Serré",
        "timestamp": 1709999592
    }
]