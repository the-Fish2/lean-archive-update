[
    {
        "content": "<p>I have defined this list</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Cashflow</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CashflowSequence</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Cashflow</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cashflowExample22</span> <span class=\"o\">:</span> <span class=\"n\">CashflowSequence</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">10</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">time</span> <span class=\"o\">:=</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">amount</span> <span class=\"o\">:=</span> <span class=\"mi\">1000</span> <span class=\"o\">})</span>\n</code></pre></div>\n<p>How can I view the elements of the list <code>cashflowExample22</code> (to ensure I defined it correctly)?</p>",
        "id": 423275991,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708879516
    },
    {
        "content": "<p>Does <code>#eval cashflowExample22</code> work?  If <code>CashflowSequence</code> is an <code>abbrev</code> it might work.</p>",
        "id": 423276645,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708880209
    },
    {
        "content": "<p>Otherwise, you may have to add a <code>deriving ToString</code> or something similar to the definition of <code>CashflowSequence</code> -- depending on the actual code, something like this might work.</p>",
        "id": 423276740,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708880294
    },
    {
        "content": "<p>I just updated my MWE.</p>",
        "id": 423276804,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708880395
    },
    {
        "content": "<p>And I tried added <code>deriving Repr</code> to the end of the structure `Cashflow, but got error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">invalid</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">uses</span> <span class=\"n\">unsafe</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">Real.instReprReal'Lean</span> <span class=\"mi\">4</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">reprCashflow</span><span class=\"bp\">✝'</span><span class=\"n\">Lean</span> <span class=\"mi\">4</span>\n<span class=\"n\">Repr.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n</code></pre></div>",
        "id": 423277204,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708880764
    },
    {
        "content": "<p>and adding <code>deriving ToString</code> gives error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">default</span> <span class=\"n\">handlers</span> <span class=\"k\">have</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span> <span class=\"n\">yet</span><span class=\"o\">,</span> <span class=\"kd\">class</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">ToString'</span> <span class=\"n\">types</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">Cashflow</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 423277228,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708880811
    },
    {
        "content": "<p>And no,  <code>#eval cashflowExample22</code> doesn't work.</p>",
        "id": 423277854,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708881389
    },
    {
        "content": "<p>you can write a <code>Repr</code> instance manually</p>",
        "id": 423278519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708882041
    },
    {
        "content": "<p>It's got real numbers, so <code>#eval</code> isn't going to work here.</p>",
        "id": 423285097,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708888483
    },
    {
        "content": "<p>However, you can write a command to reduce the list and run <code>norm_num</code> on each entry.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Cashflow</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CashflowSequence</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Cashflow</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cashflowExample22</span> <span class=\"o\">:</span> <span class=\"n\">CashflowSequence</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">10</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">time</span> <span class=\"o\">:=</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">amount</span> <span class=\"o\">:=</span> <span class=\"mi\">1000</span> <span class=\"o\">})</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span> <span class=\"n\">Tactic</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">reduce_list</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span>\n  <span class=\"k\">if</span> <span class=\"n\">e'.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">List.nil</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">e'</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">e'.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">List.cons</span> <span class=\"mi\">3</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">tail</span> <span class=\"bp\">←</span> <span class=\"n\">reduce_list</span> <span class=\"n\">e'.appArg</span><span class=\"bp\">!</span>\n    <span class=\"n\">return</span> <span class=\"n\">Expr.app</span> <span class=\"n\">e'.appFn</span><span class=\"bp\">!</span> <span class=\"n\">tail</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"n\">e</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"reduce_list\"</span> <span class=\"o\">:</span> <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">Conv.changeLhs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">reduce_list</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Conv.getLhs</span><span class=\"o\">))</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"#list_norm_num \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"bp\">#</span><span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">reduce_list</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">CoeT.coe</span><span class=\"o\">,</span> <span class=\"n\">CoeHTCT.coe</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"bp\">#</span><span class=\"n\">list_norm_num</span> <span class=\"n\">cashflowExample22</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">[{ time := 1, amount := 1000 }, { time := 2, amount := 1000 }, { time := 3, amount := 1000 },</span>\n<span class=\"cm\">  { time := 4, amount := 1000 }, { time := 5, amount := 1000 }, { time := 6, amount := 1000 },</span>\n<span class=\"cm\">  { time := 7, amount := 1000 }, { time := 8, amount := 1000 }, { time := 9, amount := 1000 },</span>\n<span class=\"cm\">  { time := 10, amount := 1000 }]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 423285107,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708888496
    },
    {
        "content": "<p>I told <code>norm_num</code> to unfold some coe functions that seemed to appear in your expression.</p>",
        "id": 423285132,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708888521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> <a href=\"#narrow/stream/113489-new-members/topic/View.20list.20elements/near/423277204\">said</a>:</p>\n<blockquote>\n<p>And I tried added <code>deriving Repr</code> to the end of the structure `Cashflow, but got error: </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">invalid</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">uses</span> <span class=\"n\">unsafe</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">Real.instReprReal'Lean</span> <span class=\"mi\">4</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">reprCashflow</span><span class=\"bp\">✝'</span><span class=\"n\">Lean</span> <span class=\"mi\">4</span>\n<span class=\"n\">Repr.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This feels like a bug to me; <code>deriving</code> should automatically propagate <code>unsafe</code>, rather than erroring</p>",
        "id": 423288139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708891508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/View.20list.20elements/near/423285097\">said</a>:</p>\n<blockquote>\n<p>It's got real numbers, so <code>#eval</code> isn't going to work here.</p>\n</blockquote>\n<p>To elaborate on this thought for <span class=\"user-mention\" data-user-id=\"245476\">@Quinn Culver</span>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Real</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Real.ofCauchy (sorry /- 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, ... -/</span>\n</code></pre></div>",
        "id": 423288219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708891581
    },
    {
        "content": "<p>Filed a bug as <a href=\"https://github.com/leanprover/lean4/pull/3498\">lean4#3498</a></p>",
        "id": 423293739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708897103
    },
    {
        "content": "<p>What is the \"sorry\" doing there?</p>",
        "id": 423326102,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708925523
    },
    {
        "content": "<p>What does \"COE\" mean/stand for?</p>",
        "id": 423326277,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708925679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/View.20list.20elements/near/423278519\">said</a>:</p>\n<blockquote>\n<p>you can write a <code>Repr</code> instance manually</p>\n</blockquote>\n<p>I barely understand <code>Repr</code>, so maybe I'm going into territory I don't belong, but what would that look like?</p>",
        "id": 423326402,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708925776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> <a href=\"#narrow/stream/113489-new-members/topic/View.20list.20elements/near/423326277\">said</a>:</p>\n<blockquote>\n<p>What does \"COE\" mean/stand for?</p>\n</blockquote>\n<p>It's short for \"coercion\". The notation for them is the up arrow, and there's a coercion applied to <code>k</code> since <code>k : Nat</code> but the result needs to be a Real.</p>",
        "id": 423327281,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708926479
    }
]