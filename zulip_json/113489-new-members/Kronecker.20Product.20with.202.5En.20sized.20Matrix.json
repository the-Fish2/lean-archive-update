[
    {
        "content": "<p>Hi! I am hitting a wall with this problem: I want to define H^⊗n (so H ⊗ₖ H ⊗ₖ H ⊗ₖ ....... ⊗ₖ H). I'm struggling with the fact that Lean doesn't seem to like working out <code>(Fin (2 ^ (x + 1)) × Fin 2)</code> to <code>(Fin (2 ^ (x + 2)))</code>. I don't know how to work this out anymore. </p>\n<p>Here is the code I've written (it runs for me, so I believe it is MWE):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Kronecker</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">Kronecker</span>\n\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Hadamard</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">ℤ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]]</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Hadamard</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">⊗ₖ</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I also have a second question that pertains similar content. I want to prove that H * H = 2 (given how they are non-normal). This works when using <code>!![1, 1; 1, -1]</code> but not with a matrix made from a function. Note that part of the code in the MWE is copied from a merged PR that isn't released yet. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Kronecker</span>\n\n\n<span class=\"c1\">-- This code is merged in the mathlib4 PR #10592, but it is not yet released.</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">AddMonoidWithOne</span>\n <span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">AddMonoidWithOne</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n <span class=\"kd\">theorem</span> <span class=\"n\">natCast_fin_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n   <span class=\"n\">fin_cases</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n\n <span class=\"c1\">-- See note [no_index around OfNat.ofNat]</span>\n <span class=\"kd\">theorem</span> <span class=\"n\">ofNat_fin_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">n.AtLeastTwo</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"n\">no_index</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n       <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n   <span class=\"n\">natCast_fin_two</span> <span class=\"n\">_</span>\n\n <span class=\"kd\">end</span> <span class=\"n\">AddMonoidWithOne</span>\n\n <span class=\"c1\">-- End of the merged code</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">Kronecker</span>\n\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Hadamard</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">x.val</span> <span class=\"bp\">*</span> <span class=\"n\">y.val</span><span class=\"o\">))</span>\n  <span class=\"c1\">-- !![1, 1; 1, -1]  -- WORKS</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">HH</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"bp\">*</span> <span class=\"n\">Hadamard</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ofNat_fin_two</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>Any help would be much appreciated &lt;3</p>",
        "id": 426001650,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1710188297
    },
    {
        "content": "<p>Isn't <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><msup><mn>2</mn><mi>x</mi></msup></msub><mo>×</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msub><mo>≅</mo><msub><mi mathvariant=\"double-struck\">Z</mi><msup><mn>2</mn><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow></msup></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_{2^x} \\times \\mathbb{Z}_2 \\cong \\mathbb{Z}_{2^{x+1}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8665em;vertical-align:-0.1776em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5224em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1776em;\"><span></span></span></span></span></span></span></span></span></span> instead?</p>",
        "id": 426004289,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710189357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/113489-new-members/topic/Kronecker.20Product.20with.202.5En.20sized.20Matrix/near/426004289\">said</a>:</p>\n<blockquote>\n<p>Isn't <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><msup><mn>2</mn><mi>x</mi></msup></msub><mo>×</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msub><mo>≅</mo><msub><mi mathvariant=\"double-struck\">Z</mi><msup><mn>2</mn><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow></msup></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_{2^x} \\times \\mathbb{Z}_2 \\cong \\mathbb{Z}_{2^{x+1}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8665em;vertical-align:-0.1776em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5224em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1776em;\"><span></span></span></span></span></span></span></span></span></span> instead?</p>\n</blockquote>\n<p>Yes, I messed up the last line of my MWE when copying it over and cleaning it up. I will edit my initial message.</p>",
        "id": 426006825,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1710190453
    },
    {
        "content": "<p>You'll need to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.reindex#doc\">docs#Matrix.reindex</a> with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finProdFinEquiv#doc\">docs#finProdFinEquiv</a>.</p>",
        "id": 426009564,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1710191595
    },
    {
        "content": "<p>I see, those are very helpful pointers. I sadly am not versed enough with Lean to know how to apply these to a definition. Would it be possible to help me on my way a bit more?</p>",
        "id": 426011602,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1710192511
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Hadamard</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">ℤ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Matrix.reindex</span> <span class=\"n\">finProdFinEquiv</span> <span class=\"n\">finProdFinEquiv</span> <span class=\"o\">(</span><span class=\"n\">Hadamard</span> <span class=\"n\">n</span> <span class=\"bp\">⊗ₖ</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 426013510,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1710193323
    },
    {
        "content": "<p>(I think <a href=\"https://github.com/leanprover-community/mathlib4/pull/10592\">#10592</a> is \"released\" now, for all reasonable senses of the word)</p>",
        "id": 426028723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710200673
    },
    {
        "content": "<p>I think this hadarmard matrix stuff came up on the zulip a few years ago; you might want to search the history for more ideas</p>",
        "id": 426029386,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710201205
    },
    {
        "content": "<p>Thank you, <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> for the working code. This works (at least when #eval'ing) :)<br>\nUsing this to e.g. prove Hadamard * Hadamard = 2 is giving me a lot of trouble with kroneckerMap, submatrix and finProdFinEquivs (see code below). Any idea how I could try solve this issue?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Kronecker</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">Kronecker</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Hadamard</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">ℤ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reindex</span> <span class=\"n\">finProdFinEquiv</span> <span class=\"n\">finProdFinEquiv</span> <span class=\"o\">(</span><span class=\"n\">Hadamard</span> <span class=\"n\">n</span> <span class=\"bp\">⊗ₖ</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">])</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">HxH</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">Hadamard</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hadamard</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Thanks! I'll have to check that out, I am on lean stable. I'll see it pop into existence at some point.</p>",
        "id": 426107453,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1710244190
    },
    {
        "content": "<p>I don't think lean stable exists any more</p>",
        "id": 426150290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710256794
    },
    {
        "content": "<p>You should pick a <code>lean-4.x.0</code> if you want stability, but if you're using mathlib it's probably best to just be on the bleeding edge</p>",
        "id": 426150475,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710256830
    },
    {
        "content": "<p>Mathlib is <em>not</em> on the bleeding edge, it’s on release candidates.</p>",
        "id": 426153295,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710257495
    },
    {
        "content": "<p>I'll check GitHub for what is used for newest code, thanks for the heads-ups!</p>",
        "id": 426154667,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1710257830
    },
    {
        "content": "<p><code>theorem HxH : Hadamard 1 * Hadamard 1 = 2 := by decide</code> works here.</p>",
        "id": 426158774,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1710258938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Kronecker.20Product.20with.202.5En.20sized.20Matrix/near/426153295\">said</a>:</p>\n<blockquote>\n<p>Mathlib is <em>not</em> on the bleeding edge, it’s on release candidates.</p>\n</blockquote>\n<p>Sorry, what I meant is 'use the bleeding edge of mathlib, don't pick a lean version'</p>",
        "id": 426163338,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710260108
    }
]