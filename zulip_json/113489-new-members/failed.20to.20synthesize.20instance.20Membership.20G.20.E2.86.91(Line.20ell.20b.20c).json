[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ProjectiveGeometry</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">l1</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n  <span class=\"n\">l2</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span>\n  <span class=\"n\">l3</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">b</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">star</span>\n  <span class=\"o\">[</span><span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span> <span class=\"n\">ell</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Line</span>\n  <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Plane</span>\n  <span class=\"o\">[</span><span class=\"n\">PG</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span> <span class=\"n\">ell</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a_nin_δ</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"n\">sUnion</span> <span class=\"o\">{</span><span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">δ</span><span class=\"o\">}</span>\n</code></pre></div>\n<p><code>Line ell b c</code> is a <code>Set G</code>. What is the problem here?</p>",
        "id": 438375085,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715610107
    },
    {
        "content": "<p><code>δ</code> is an element of <code>G</code> along with a proof that <code>δ ∈ Line ell b c</code>. It isn't a set.</p>",
        "id": 438381491,
        "sender_full_name": "Richard Copley",
        "timestamp": 1715611698
    },
    {
        "content": "<p>Ah, I still confuse this apparently! Thank you.</p>",
        "id": 438525120,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715675016
    },
    {
        "content": "<p>So should I say <code>(δ := Line (ell := ell) b c)</code> instead?</p>",
        "id": 438525853,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715675271
    },
    {
        "content": "<p>No, that means \"<code>δ</code> is some arbitrary set which may or may not be <code>Line b c</code>\"</p>",
        "id": 438532404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715677494
    },
    {
        "content": "<p>Hmm, I just wanted to give it a name, actually, to not repeat the expression again and again.</p>",
        "id": 438533373,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715677844
    },
    {
        "content": "<p>Yeah it's not actually a parameter, I realize that right now. I use the order of <code>a b c</code> for determining the line.</p>",
        "id": 438533786,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715678002
    },
    {
        "content": "<p>And why can't I write this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Plane</span>\n  <span class=\"o\">[</span><span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span> <span class=\"n\">ell</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"n\">sUnion</span> <span class=\"o\">{</span><span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Line</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">Line</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 438534518,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715678249
    },
    {
        "content": "<p>Am I doomed with this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Plane</span>\n  <span class=\"o\">[</span><span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span> <span class=\"n\">ell</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a_nin_δ</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">Line</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"n\">sUnion</span> <span class=\"o\">{</span><span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Line</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 438536310,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715678897
    },
    {
        "content": "<p>Which naturally has unused variable <code>a_nin_δ</code>.</p>",
        "id": 438536459,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715678952
    },
    {
        "content": "<p>I guess I will continue with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Plane</span>\n  <span class=\"o\">[</span><span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span> <span class=\"n\">ell</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">sUnion</span> <span class=\"o\">{</span><span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Line</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n  <span class=\"n\">a_nin_δ</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">Line</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 438539009,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715679886
    },
    {
        "content": "<p>But again I am I made the same mistake. <code>pi</code> is an element of that <code>Set G</code>, right? I want it to be that set.</p>",
        "id": 438539847,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715680182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  Can I now say <code>π := sUnion ...</code> and it's fine?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Plane</span>\n  <span class=\"o\">[</span><span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span> <span class=\"n\">ell</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"n\">sUnion</span> <span class=\"o\">{</span><span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Line</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n  <span class=\"n\">a_nin_δ</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">Line</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 438540478,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715680424
    },
    {
        "content": "<p>No, that has the same problem; <code>a := b</code> means \"use <code>b</code> as a default for <code>a</code>\" not \"<code>a</code> is always <code>b</code>\"</p>",
        "id": 438540980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715680589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I guess I have profound misconception, then.</p>",
        "id": 438541461,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715680768
    },
    {
        "content": "<p>I infer that it's not possible or reasonable. My goal is to write plane that is defined as a subset of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo>=</mo><mo>∪</mo><mo stretchy=\"false\">{</mo><mi>a</mi><mo>⋆</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mo>∈</mo><mi>δ</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\pi = \\cup \\{ a \\star x | x \\in \\delta \\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∪</span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋆</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mclose\">}</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo>⊆</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">\\delta \\subseteq G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> is a line and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>G</mi><mo>∖</mo><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">a \\in G \\setminus \\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∖</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>.</p>",
        "id": 438541866,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715680902
    },
    {
        "content": "<p>I hope I am not overwhelming, but do you think this is fixable?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Structure</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ProjectiveGeometry</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">l1</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n  <span class=\"n\">l2</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span>\n  <span class=\"n\">l3</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">b</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">star</span>\n  <span class=\"o\">[</span><span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span> <span class=\"n\">ell</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Line</span>\n  <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Plane</span>\n  <span class=\"o\">[</span><span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span> <span class=\"n\">ell</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  application type mismatch</span>\n<span class=\"cm\">    And (Line ell b c)</span>\n<span class=\"cm\">  argument</span>\n<span class=\"cm\">    Line ell b c</span>\n<span class=\"cm\">  has type</span>\n<span class=\"cm\">    Set G : Type ?u.289</span>\n<span class=\"cm\">  but is expected to have type</span>\n<span class=\"cm\">    Prop : Type</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  failed to synthesize instance</span>\n<span class=\"cm\">    Membership ?m.324 Prop</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">sUnion</span> <span class=\"o\">{(</span><span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Line</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">Line</span> <span class=\"o\">(</span><span class=\"n\">ell</span> <span class=\"o\">:=</span> <span class=\"n\">ell</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Structure</span>\n</code></pre></div>",
        "id": 438550389,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1715684231
    }
]