[
    {
        "content": "<p>I am having a hard time figuring out how to start the proof below.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I know I have to use some sort of induction but what is the proper way to start it? Any help is greatly appreciated.</p>",
        "id": 419253271,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1706796437
    },
    {
        "content": "<p>(I'll assume induction is the way to go; others might want to take a step back and recommend another strategy.)<br>\nLean 4 induction is supposed to work like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">T</span> <span class=\"n\">using</span> <span class=\"n\">Finset.induction_on</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- ⊢ ∑ s in ∅, s &gt; 0</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">insert</span> <span class=\"n\">hxt</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- (? : ℕ) (?? : Finset ℕ) (hxt : ? ∉ ??) (ih : ∑ s in ??, s &gt; 0) ⊢ ∑ s in insert ? ??, s &gt; 0</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But like many induction principles in Mathlib, the premises for <code>Finset.induction_on</code>  have these weird implicit parameters, and Lean 4's builtin <code>induction</code> tactic has no syntax for providing arguments for implicit parameters, so some of the variables in the goal state end up with inaccessible names (the <code>?</code>'s in the comments above). If you can complete the proof without referring to those variables by name, that's ok.</p>\n<p>If not, there are a couple of workarounds:</p>\n<ul>\n<li>use the Mathlib <code>induction'</code> tactic instead, and supply a list of names as optional arguments (after <code>with</code>):</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">T</span> <span class=\"n\">using</span> <span class=\"n\">Finset.induction_on</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"n\">hxt</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">.</span> <span class=\"c1\">-- ⊢ ∑ s in ∅, s &gt; 0</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">.</span> <span class=\"c1\">-- (x : ℕ) (t : Finset ℕ) (hxt : x ∉ t) (ih : ∑ s in t, s &gt; 0) ⊢ ∑ s in insert x t, s &gt; 0</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<ul>\n<li>apply the induction lemma directly:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Finset.induction_on</span> <span class=\"n\">T</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"n\">t</span> <span class=\"n\">hxt</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">.</span> <span class=\"c1\">-- ⊢ ∑ s in ∅, s &gt; 0</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">.</span> <span class=\"c1\">-- (x : ℕ) (t : Finset ℕ) (hxt : x ∉ t) (ih : ∑ s in t, s &gt; 0) ⊢ ∑ s in insert x t, s &gt; 0</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 419259022,
        "sender_full_name": "Richard Copley",
        "timestamp": 1706797997
    },
    {
        "content": "<p>If you don’t mind cheating a little bit, you can look at how it’s done in <code>Finset.sum_pos</code></p>",
        "id": 419259433,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1706798104
    },
    {
        "content": "<p>The point here is that it is tricky to use induction because of the nonemptyness assumption. I think it's better to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.Nonempty.cons_induction#doc\">docs#Finset.Nonempty.cons_induction</a></p>",
        "id": 419263934,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706799415
    },
    {
        "content": "<p>For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Finset.Nonempty.cons_induction</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nonempty_coe_sort.1</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">ha</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">has</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">H</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_cons</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">add_pos</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">H</span>\n      <span class=\"n\">exact</span> <span class=\"n\">mem_cons_self</span> <span class=\"n\">a</span> <span class=\"n\">s</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">h</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n      <span class=\"n\">apply</span> <span class=\"n\">H</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_cons</span><span class=\"o\">]</span>\n      <span class=\"n\">right</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hx</span>\n</code></pre></div>\n<p>works</p>",
        "id": 419265353,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706799779
    },
    {
        "content": "<p>This can of course be golfed a lot, but I think the main points are:</p>\n<ul>\n<li>use a specific induction principle for nonempty sets</li>\n<li><code>revert h</code> at the beginning</li>\n</ul>",
        "id": 419265937,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706799943
    },
    {
        "content": "<p>Thank you all for your help. I didn't realize something this simple-looking could be so complicated in Lean.</p>",
        "id": 419267446,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1706800352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"397075\">Kevin Cheung</span> has marked this topic as resolved.</p>",
        "id": 419267670,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706800421
    },
    {
        "content": "<p>Well, I don't  think it's really more complicated in Lean than in real math. It's just that Lean is <em>extremely precise</em></p>",
        "id": 419271709,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706801522
    },
    {
        "content": "<p>How would you prove in with pen and paper? Of course without saying \"and so on\" or \"it's clear that\".</p>",
        "id": 419271959,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706801577
    },
    {
        "content": "<p>All those implicits take some getting used to.</p>",
        "id": 419272290,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1706801661
    },
    {
        "content": "<p>It's much easier without induction (we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.single_le_sum#doc\">docs#Finset.single_le_sum</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Finset.single_le_sum</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">aesop</span><span class=\"o\">)</span> <span class=\"n\">ha</span>\n</code></pre></div>",
        "id": 419286161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706805407
    },
    {
        "content": "<p>Ah this is clever!</p>",
        "id": 419286644,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706805528
    },
    {
        "content": "<p>Now do ℤ :)</p>",
        "id": 419287015,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706805632
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Finset.single_le_sum</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">peel</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">ha</span>\n</code></pre></div>",
        "id": 419287767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706805850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Stuck.20on.20an.20easy.20result.20involving.20Finset/near/419286644\">said</a>:</p>\n<blockquote>\n<p>Ah this is clever!</p>\n</blockquote>\n<p>It looks a bit cryptic to me. Need to spend some time studying this. Is there a way to avoid <code>aesop</code>?</p>",
        "id": 419438882,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1706873458
    },
    {
        "content": "<p>The math proof is different: instead of doing it by induction one can say that, for all <code>a ∈ T</code>, we have <code>a ≤ ∑ s in T, s</code> (this result is essentially already in mathlib, it is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.single_le_sum#doc\">docs#Finset.single_le_sum</a> applied to the identity function) and then conclude since <code>0 &lt; a ≤  ∑ s in T, s</code>.</p>",
        "id": 419442170,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706874842
    },
    {
        "content": "<p>If it looks cryptic to you then fire up VS Code, paste my proof in, and then break it down into pieces. I discovered it as a simple 5-line proof and then I just golfed it specifically to make it look cryptic (to maximise the effect of the \"if you avoid induction then it's shorter\" claim)</p>",
        "id": 419442256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706874862
    },
    {
        "content": "<p>It would be interesting to know how you thought about doing it without induction in the first place. Was it simply experience?</p>",
        "id": 419442743,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1706875052
    },
    {
        "content": "<p>Someone else suggested to use induction at the beginning of the topic and I thought it was a reasonable approach. To be honest I didn't even think to change strategry.</p>\n<p>Note that under the hood induction is essentially the only available technique to prove stuff about finstes. By this I mean that  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.single_le_sum#doc\">docs#Finset.single_le_sum</a> is either proved itself by induction or it uses something that is proved by induction (most likely).</p>",
        "id": 419443502,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706875342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"397075\">Kevin Cheung</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Stuck.20on.20an.20easy.20result.20involving.20Finset/near/419442743\">said</a>:</p>\n<blockquote>\n<p>It would be interesting to know how you thought about doing it without induction in the first place. Was it simply experience?</p>\n</blockquote>\n<p>I could see that the result would follow from single_le_sum and I just followed up that idea.</p>",
        "id": 419443940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706875529
    }
]