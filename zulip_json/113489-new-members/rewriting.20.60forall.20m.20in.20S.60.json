[
    {
        "content": "<p>What do I need to know, in order to understand why the first example below works, but not the second?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h'</span>\n</code></pre></div>",
        "id": 439833923,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1716302697
    },
    {
        "content": "<p>Write <code>set_option autoImplicit false</code> before the examples</p>",
        "id": 439834284,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716302798
    },
    {
        "content": "<p>So, <code>(m : ℕ)</code> is missing but it still doesn't work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span>\n<span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">P</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">P</span>\n</code></pre></div>",
        "id": 439835001,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1716302966
    },
    {
        "content": "<p>What do you think your <code>h : m ∈ S ↔ m ∈ L</code> mean? What is <code>m</code>?</p>",
        "id": 439835318,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716303059
    },
    {
        "content": "<p>Let me rewrite your new statement a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 439835477,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716303109
    },
    {
        "content": "<p>Do you see the issue?</p>",
        "id": 439835491,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716303117
    },
    {
        "content": "<p><code>m</code> is a variable? The statement is a bi-implication?</p>",
        "id": 439835793,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1716303195
    },
    {
        "content": "<p>Yes, but does it have anything to do with the <code>l</code> in your <code>∀ l ∈ L</code> binder?</p>",
        "id": 439835999,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716303249
    },
    {
        "content": "<p>Giving <code>m</code> via <code>`rw [←h m]</code> also doesn't work.</p>",
        "id": 439836102,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1716303281
    },
    {
        "content": "<p>Do you want <code>∀ m, m ∈ S ↔ m ∈ L</code>?</p>",
        "id": 439836295,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716303344
    },
    {
        "content": "<p>isn't that implicit?</p>",
        "id": 439836522,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1716303398
    },
    {
        "content": "<p>No,  if you look at the infoview for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>you see that Lean created a natural number called <code>m</code> to make sense of <code>h : m ∈ S ↔ m ∈ L</code>.</p>",
        "id": 439836792,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716303467
    },
    {
        "content": "<p>But this <code>m</code> is fixed</p>",
        "id": 439836910,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716303491
    },
    {
        "content": "<p>It looks to me that <code>∀ m, m ∈ S ↔ m ∈ L</code> behaves like <code>m ∈ S ↔ m ∈ L</code>. Do you say that the goal cannot be matched, and the rewrite not be done?</p>",
        "id": 439838427,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1716303852
    },
    {
        "content": "<p>If you dont write the <code>∀</code> binder, Lean just assumes that this double implication holds for <em>one specific number</em>. This is exactly the same difference between <code>∀ m, m ∈ S ↔ m ∈ L</code> and <code>37 ∈ S ↔ 37 ∈ L</code>.</p>",
        "id": 439838733,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716303939
    },
    {
        "content": "<p>Your goal at the beginning is <code>∀ m ∈ L, P</code>. The natural strategy here is to start with <code>intro x</code>. Now the goal is x ∈ L → P, so we do another <code>intro hx</code>. Now you have to prove <code>P</code>, and you have a number <code>x</code> such that <code>x ∈ L</code>. You want to use that <code>m ∈ S ↔ m ∈ L</code> to obtain that <code>x ∈ s</code>, but <code>x</code> and <code>m</code> are completely unrelated.</p>",
        "id": 439839306,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716304091
    },
    {
        "content": "<p>I keep forgetting that <code>intro</code> splits off conditions also from forall statements. Thanks. That is embarrassing.</p>",
        "id": 439839956,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1716304288
    },
    {
        "content": "<p><code>hint</code> wouldn't suggest <code>intro</code> either. Wouldn't that be useful?</p>",
        "id": 439841607,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1716304774
    },
    {
        "content": "<p>I don't understand the question, <code>hint</code> suggests <code>intro</code> for me.</p>",
        "id": 439842997,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716305180
    },
    {
        "content": "<p>In the original code, agreed. Not here, though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">hint</span>\n</code></pre></div>",
        "id": 439846647,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1716306212
    }
]