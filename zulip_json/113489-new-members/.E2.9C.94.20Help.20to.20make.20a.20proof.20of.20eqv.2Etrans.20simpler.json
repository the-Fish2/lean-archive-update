[
    {
        "content": "<p>Hi! Is the following proof of eqv.trans has simpler version? It took me some time to write this kind of tedious version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- TODO can this be simpler?</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eqv.trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∼</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∼</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∼</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eqv</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">g</span>\n  <span class=\"k\">have</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">Nat.add_comm</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rhs</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.add_right_cancel</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 423181293,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708788973
    },
    {
        "content": "<p>Hi! Can you please provide an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? It doesn't look like the definition of <code>eqv</code> is included here</p>",
        "id": 423181470,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1708789140
    },
    {
        "content": "<p>Oh sorry. I missed that</p>",
        "id": 423181500,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708789162
    },
    {
        "content": "<p>The whole snippet is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eqv</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">d</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∼ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eqv</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eqv.refl</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∼</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eqv</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eqv.symm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∼</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∼</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eqv</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- TODO can this be simpler?</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eqv.trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∼</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∼</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∼</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eqv</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">g</span>\n  <span class=\"k\">have</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">Nat.add_comm</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rhs</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.add_right_cancel</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 423181548,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708789203
    },
    {
        "content": "<p>I am also wondering if it's possible to do conv in both lhs and rhs, and if we can navigate back after doing <code>congr</code>s or <code>arg</code>s</p>",
        "id": 423181721,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708789334
    },
    {
        "content": "<p>Now I do it with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eqv.trans'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∼</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∼</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∼</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eqv</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">g</span>\n  <span class=\"k\">have</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"k\">have</span> <span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">▸</span> <span class=\"n\">j</span> <span class=\"bp\">▸</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>after <code>import Matlib.Tactic</code>. Much simplier <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 423183318,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708790491
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eqv.trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∼</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∼</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∼</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eqv</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">g</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 423185806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708792356
    },
    {
        "content": "<p>My proof is in some sense circular. I've written the code you're writing above, in order to give a definition of <code>Int</code>. But you can see with <code>#print</code> that the <code>linarith</code> proof uses <code>Int</code> anyway.</p>",
        "id": 423185924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708792450
    },
    {
        "content": "<p>Yeah I wrote this for an alternative definition of Int as an exercise for quotient. Though kind of circularity it’s very nice knowing the powerful tactic <code>linarith</code> too</p>",
        "id": 423186139,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708792644
    },
    {
        "content": "<p>Technically it seems not circular. It just use one definition of <code>Int</code> for an alternative definition of <code>Int</code> maybe <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span></p>",
        "id": 423186597,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708792875
    },
    {
        "content": "<p>Indeed technically if it were circular, then it wouldn't compile :-)</p>",
        "id": 423187403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708793258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560873\">Coriver Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20to.20make.20a.20proof.20of.20eqv.2Etrans.20simpler/near/423181721\">said</a>:</p>\n<blockquote>\n<p>I am also wondering if it's possible to do conv in both lhs and rhs, and if we can navigate back after doing <code>congr</code>s or <code>arg</code>s</p>\n</blockquote>\n<p>You can use <code>conv =&gt; ...</code> inside of conv to do a modification and then navigate back.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span> <span class=\"n\">handle</span> <span class=\"n\">lhs</span>\n    <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span> <span class=\"n\">handle</span> <span class=\"n\">rhs</span>\n  <span class=\"c1\">-- now here we have the rewritten equality, and we can manipulate it further</span>\n</code></pre></div>",
        "id": 423188197,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708793895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560873\">Coriver Chen</span> has marked this topic as resolved.</p>",
        "id": 423231352,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708836292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  Hi sorry for the late response. Yeah now I get it with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eqv.trans1</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∼</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∼</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∼</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eqv</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">g</span>\n  <span class=\"k\">have</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">lhs</span> <span class=\"c1\">-- lhs is a + d + c + f</span>\n      <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- conv for lhs</span>\n        <span class=\"n\">arg</span> <span class=\"mi\">1</span> <span class=\"c1\">-- get a + d + c</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span> <span class=\"c1\">-- assoc turn it into a + (d+c)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span> <span class=\"c1\">-- then assoc then it in to a + ((d + c) + f)</span>\n      <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- other conv</span>\n        <span class=\"n\">arg</span> <span class=\"mi\">2</span> <span class=\"c1\">-- get (d+c)+f</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span> <span class=\"c1\">-- turn into f+(d+c)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span> <span class=\"c1\">-- turn into a+f+(d+c)</span>\n    <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rhs</span>\n      <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">arg</span> <span class=\"mi\">1</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">arg</span> <span class=\"mi\">2</span>\n        <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">arg</span> <span class=\"mi\">1</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.add_right_cancel</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 424028861,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709216397
    }
]