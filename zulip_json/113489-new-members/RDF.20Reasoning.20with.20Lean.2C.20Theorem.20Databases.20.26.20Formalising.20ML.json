[
    {
        "content": "<p>I recently attended a fantastic talk that <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> gave at the Oxford CS department; having spent some time mulling it over, Lean seems quite promising for several <a href=\"https://www.cs.ox.ac.uk/people/jesse.wright/\">projects I am involved with</a> - and I wanted to ask about whether there has been any work in the following directions I’m interested in:</p>\n<p><strong>Building <a href=\"https://docs.oxfordsemantic.tech/reasoning.html\">RDF Reasoning</a> Engines using Lean</strong>: A large amount of my work is related to structured reasoning over <a href=\"https://en.wikipedia.org/wiki/Knowledge_graph\">knowledge graphs</a>. Typically this is done using Description Logics. In particular, I am currently investigating whether I can implement the <a href=\"https://w3c-cg.github.io/rdfsurfaces/\">RDF Surfaces</a> specification (which has a correspondence with first order logic) in Lean. Has there been any work on the implementation of  domain specific automated reasoners that include proof of their results that I can be pointed towards?</p>\n<p><strong>Mathematics Database generated from theorems proven in Lean</strong>: I’ve seen it mentioned in a couple of Kevin’s talks that this is something that Tom Hales has interest in - and was also an idea mentioned in <a href=\"https://gow.epsrc.ukri.org/NGBOViewGrant.aspx?GrantRef=EP/Y022904/1\">this grant proposal</a>. Since my background is in working with the <a href=\"https://en.wikipedia.org/wiki/Semantic_Web\">Semantic Web</a> and <a href=\"https://solidproject.org/\">Solid</a>; so I would be interested in generating a <a href=\"https://en.wikipedia.org/wiki/Knowledge_graph\">Knowledge Graph</a> of theorems proven in Lean (including the proofs) so that the theorems themselves can be entities on the Web - and linked to from other domains. Has there been any substantial work on this.</p>\n<p><strong>Proofs of Machine Learning theorems</strong>: I can also see Lean being quite relevant to colleagues working on foundational ML models. Before I take some of the ideas I have to them I was wondering if there has been any work to formalize ML related proofs - such as the <a href=\"https://en.wikipedia.org/wiki/Universal_approximation_theorem\">Universal Approximation Theorem</a> in Lean?</p>",
        "id": 416764612,
        "sender_full_name": "Jesse Wright",
        "timestamp": 1705666045
    },
    {
        "content": "<p>It's not Lean, but my colleagues at IBM research have some work in Coq formalizing machine learning theory including Divoretsky's approximation theory and the convergence of some classical RL algorithms. <a href=\"https://github.com/IBM/FormalML\">https://github.com/IBM/FormalML</a></p>",
        "id": 416778001,
        "sender_full_name": "Jason Rute",
        "timestamp": 1705670907
    },
    {
        "content": "<p>As for the universal approximation theory, I would assume it would be a simple thing to prove if you already have the standard approximation theorems (such as continuous functions are approximable by polynomials, piecewise affine functions, etc, and integrable/measurable functions are approximable by the same as well as step functions).  I assume these are already in mathlib, and indeed I can find various lemmas of this form with <a href=\"https://www.moogle.ai/search/raw?q=continuous%20functions%20in%20a%20compact%20region%20of%20R%5En%20are%20approximable%20with%20piecewise%20affine%20functions.\">moogle.ai</a>.</p>",
        "id": 416778005,
        "sender_full_name": "Jason Rute",
        "timestamp": 1705670910
    },
    {
        "content": "<p>Do you really think theorems would fit into a nice knowledge graph format?  If so, what would it look like?  I'm all for applying lots of different methods (theorem proving, AI, better cataloging) to unify and explore the mathematical universe, but I think mathematics by its very nature is a bit hard to put into a clean box.  (But maybe I'm not understanding the power and expressivity of knowledge graphs, and if there were good knowledge graph representations, that would indeed be interesting.)</p>",
        "id": 416779727,
        "sender_full_name": "Jason Rute",
        "timestamp": 1705671533
    },
    {
        "content": "<p>As for RDF (which I know nothing about), is your goal to make Lean tools that:</p>\n<ul>\n<li>Reason over knowledge graphs and output proofs?  This sounds like making tactics, although if your proof format is just a formal object deeply embedded into Lean, then outputting a proof could just be outputting some formal object in Lean code.</li>\n<li>Develop formally verified RDF algorithms to give correct deductions?  If you describe the mathematics of knowledge graphs and whatever else in Lean, you can write algorithms to do stuff and then prove they are correct.</li>\n<li>Or is your goal to actually reason about theorems in Lean with RDF?  I don't know what this would look like, but again it sounds like a form of a tactic.</li>\n</ul>",
        "id": 416780977,
        "sender_full_name": "Jason Rute",
        "timestamp": 1705671952
    },
    {
        "content": "<p>Also, as for mathematical databases, here is the current Lean one (including Lean core, STD, and Mathlib): <a href=\"https://leanprover-community.github.io/mathlib4_docs/index.html\">https://leanprover-community.github.io/mathlib4_docs/index.html</a>.  You can search over it with <a href=\"https://loogle.lean-lang.org/\">Loogle</a> or <a href=\"http://moogle.ai\">Moogle</a>.</p>",
        "id": 416781433,
        "sender_full_name": "Jason Rute",
        "timestamp": 1705672096
    },
    {
        "content": "<p>Thankyou for the detailed responses and links - they are very useful starting points!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113489-new-members/topic/RDF.20Reasoning.20with.20Lean.2C.20Theorem.20Databases.20.26.20Formalising.20ML/near/416779727\">said</a>:</p>\n<blockquote>\n<p>Do you really think theorems would fit into a nice knowledge graph format?  If so, what would it look like?</p>\n</blockquote>\n<p>On expressiveness - a knowledge graph is essentially just a multi-relational directed graph. However, one is also permitted to define arbitrary relations for the graph as you go. This means, for instance, you can could encode any abstract syntax tree in a KG. The <a href=\"https://fno.io/spec/\">function ontology</a> - which is a vocabulary for describing functions and algorithms in knowledge graphs - is a starting point to describe programming functions in a more language agnostic manner.</p>\n<p>My impression is if a theorem can be formalised in Lean - then it should be possible to map that formalization to a KG - given that at some point Lean files are going to be parsed into an abstract syntax tree (not that this would be the best KG representation, this is just my reasoning as to why a KG representation exists).</p>\n<blockquote>\n<p>As for RDF (which I know nothing about), is your goal to make Lean tools that:</p>\n</blockquote>\n<p>The goal is to \"Reason over knowledge graphs and output proofs\" in the sense that we have sets of <em>rules</em> (implications from decidable fragments of first order logic) which we recursively apply to the Knowledge Graph to derive new information. As a basic example using the data <code>:Jesse a :Student . :Student a :Human</code> and the rule <code>?x a ?c \\land ?c subClassOf ?c2 =&gt; ?x a ?c2</code> one derives <code>:Jesse a :Human</code>. The purpose of the proof is to enable one system - that is potentially malicious -  to prove/explain to another system how it derived the data. </p>\n<blockquote>\n<p>outputting some formal object in Lean code.</p>\n</blockquote>\n<p>Indeed - this is quite close to what I think I want - except I want to map this proof back in terms of RDF in order to be interoperable with existing RDF Proof checkers (e.g. <a href=\"https://www.w3.org/2000/10/swap/doc/paper/\">CWM</a> and <a href=\"https://github.com/eyereasoner/eye\">EYE</a>) when using rules from fragments of FOL that they are programmed to understand - I'll have a crack at this in the coming weeks and report back.</p>",
        "id": 416795756,
        "sender_full_name": "Jesse Wright",
        "timestamp": 1705676454
    }
]