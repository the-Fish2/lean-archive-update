[
    {
        "content": "<p>The following snippet of code compiles <code>floobOk</code> fine, but complains that <code>floobBad</code> is noncomputable and so can't be compiled:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Floob</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">floob</span> <span class=\"o\">:</span> <span class=\"n\">Floob</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">floobOk</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Floob</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">floobBad</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Floob</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟩</span>\n</code></pre></div>\n<p>To be precise, it says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">compile</span> <span class=\"kd\">definition</span><span class=\"o\">,</span> <span class=\"n\">consider</span> <span class=\"n\">marking</span> <span class=\"n\">it</span> <span class=\"n\">as</span> <span class=\"bp\">'</span><span class=\"kd\">noncomputable</span><span class=\"bp\">'</span> <span class=\"n\">because</span> <span class=\"n\">it</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"bp\">'</span><span class=\"n\">Real.instLinearOrderedFieldReal'</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">it</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">executable</span> <span class=\"n\">code</span>\n</code></pre></div>\n<p>which makes sense. But why does <code>floobOk</code> work? It depends on <code>Real.instInvReal</code> (which I can confirm by turning off the pretty-printer), and that is also noncomputable -- for instance, running</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n</code></pre></div>\n<p>fails in the way I expect and says, <code>failed to compile definition, consider marking it as 'noncomputable' because it depends on 'Real.instInvReal', and it does not have executable code</code>.</p>\n<p>I don't understand why FloobOk compiles.</p>",
        "id": 429865570,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1711547959
    },
    {
        "content": "<p>I might be wrong, but IIRC the compiler erases types, and the only noncomputable part in <code>floobOk</code> is the type (you can try adding <code>deriving Repr</code> to <code>Floob</code> and <code>#eval</code>-ing it to see this), but that doesn't explain why <code>floobBad</code> fails</p>",
        "id": 429869921,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711549093
    }
]