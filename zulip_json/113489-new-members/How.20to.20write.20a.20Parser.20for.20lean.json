[
    {
        "content": "<p>How can I create a new Parser to parse a comment likehere: <a href=\"https://github.com/leanprover/lean4/blob/fe0cb97c5d4d43393728ddd885415bc5bfb4b929/src/Lean/Parser/Term.lean#L14C5-L14C17\">https://github.com/leanprover/lean4/blob/fe0cb97c5d4d43393728ddd885415bc5bfb4b929/src/Lean/Parser/Term.lean#L14C5-L14C17</a>.<br>\nI tried with my code here </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span><span class=\"w\"> </span><span class=\"n\">comment</span>\n<span class=\"n\">declare_syntax_cat</span><span class=\"w\"> </span><span class=\"n\">project_term</span>\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"n\">true</span>\n\n<span class=\"n\">partial</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">getCommentUntilTheEnd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ParserFn</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">input</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">pos</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"bp\">.</span><span class=\"n\">atEnd</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">else</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">curr</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">pos</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">curr</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"bp\">'\\</span><span class=\"n\">n'</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">next'</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"k\">else</span>\n<span class=\"w\">  </span><span class=\"n\">getCommentUntilTheEnd</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">next'</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">commentBody</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Parser</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">  </span><span class=\"n\">fn</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">getCommentUntilTheEnd</span>\n<span class=\"w\">  </span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">epsilonInfo</span>\n<span class=\"o\">}</span>\n\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"begin_test\"</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">project_term</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"s2\">\"end_test\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"o\">()</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment_wrap</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"/*\"</span><span class=\"w\"> </span><span class=\"n\">rawIdent</span><span class=\"w\"> </span><span class=\"s2\">\"*/\"</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment_line</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"//\"</span><span class=\"w\"> </span><span class=\"n\">commentBody</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment_wrap</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">comment</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment_line</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">comment</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">project_term</span>\n\n\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">basic_type</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"int*\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"uint*\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"address\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"bool\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"string\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"bytes\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"n\">rawIdent</span><span class=\"w\"> </span><span class=\"s2\">\".\"</span><span class=\"w\"> </span><span class=\"n\">rawIdent</span>\n\n<span class=\"n\">begin_test</span>\n<span class=\"w\">  </span><span class=\"bp\">/*</span><span class=\"w\"> </span><span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"bp\">*/</span>\n<span class=\"w\">  </span><span class=\"bp\">/*</span><span class=\"w\"> </span><span class=\"n\">hello1</span><span class=\"w\"> </span><span class=\"bp\">*/</span>\n<span class=\"w\">  </span><span class=\"bp\">//</span><span class=\"w\"> </span><span class=\"n\">fsadfsdaf</span>\n\n<span class=\"n\">end_test</span>\n</code></pre></div>\n<p>but for the line <code>syntax comment_line : comment</code> it give error that <code>don't know how to generate formatter for non-definition '{ info := epsilonInfo, fn := getCommentUntilTheEnd }'</code></p>",
        "id": 444839272,
        "sender_full_name": "kishou yusa",
        "timestamp": 1718437536
    },
    {
        "content": "<p>I get loads of errors if I try and run your code in the web editor. Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that works there with only one error (the one you want help with) to make it easier for others to answer your question</p>",
        "id": 444983789,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1718550688
    },
    {
        "content": "<p>Here is mwe </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">Term</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">Attr</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">Level</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">Term</span>\n\n<span class=\"n\">declare_syntax_cat</span><span class=\"w\"> </span><span class=\"n\">comment</span>\n<span class=\"n\">declare_syntax_cat</span><span class=\"w\"> </span><span class=\"n\">project_term</span>\n\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"n\">true</span>\n\n\n<span class=\"n\">partial</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">getCommentUntilTheEnd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ParserFn</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">input</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">pos</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"bp\">.</span><span class=\"n\">atEnd</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">else</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">curr</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">pos</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">curr</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"bp\">'\\</span><span class=\"n\">n'</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">next'</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"k\">else</span>\n<span class=\"w\">  </span><span class=\"n\">getCommentUntilTheEnd</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">next'</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">commentBody</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Parser</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">  </span><span class=\"n\">fn</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">getCommentUntilTheEnd</span>\n<span class=\"w\">  </span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">epsilonInfo</span>\n<span class=\"o\">}</span>\n\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"begin_test\"</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">project_term</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"s2\">\"end_test\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"o\">()</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment_wrap</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"/*\"</span><span class=\"w\"> </span><span class=\"n\">rawIdent</span><span class=\"w\"> </span><span class=\"s2\">\"*/\"</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment_line</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"//\"</span><span class=\"w\"> </span><span class=\"n\">commentBody</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment_wrap</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">comment</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment_line</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">comment</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">project_term</span>\n\n\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">basic_type</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"int*\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"uint*\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"address\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"bool\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"string\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"bytes\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"n\">rawIdent</span><span class=\"w\"> </span><span class=\"s2\">\".\"</span><span class=\"w\"> </span><span class=\"n\">rawIdent</span>\n</code></pre></div>",
        "id": 444994096,
        "sender_full_name": "kishou yusa",
        "timestamp": 1718556445
    },
    {
        "content": "<p>ok I manage to solve the problem by adding formatter and parenthesizer, here is the final code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">partial</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">getCommentUntilTheEnd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ParserFn</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">input</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">pos</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"bp\">.</span><span class=\"n\">atEnd</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">else</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">curr</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">pos</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">curr</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"bp\">'\\</span><span class=\"n\">n'</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">next'</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"k\">else</span>\n<span class=\"w\">  </span><span class=\"n\">getCommentUntilTheEnd</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">next'</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">commentBody</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Parser</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">  </span><span class=\"n\">fn</span><span class=\"w\">    </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">getCommentUntilTheEnd</span>\n<span class=\"w\">  </span><span class=\"n\">info</span><span class=\"w\">  </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mkAtomicInfo</span><span class=\"w\"> </span><span class=\"s2\">\"comment\"</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">combinator_parenthesizer</span><span class=\"w\"> </span><span class=\"n\">commentBody</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">commentBody</span><span class=\"bp\">.</span><span class=\"n\">parenthesizer</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">PrettyPrinter</span><span class=\"bp\">.</span><span class=\"n\">Parenthesizer</span><span class=\"bp\">.</span><span class=\"n\">visitToken</span>\n<span class=\"kd\">@[</span><span class=\"n\">combinator_formatter</span><span class=\"w\"> </span><span class=\"n\">commentBody</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">commentBody</span><span class=\"bp\">.</span><span class=\"n\">formatter</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">PrettyPrinter</span><span class=\"bp\">.</span><span class=\"n\">Formatter</span><span class=\"bp\">.</span><span class=\"n\">visitAtom</span><span class=\"w\"> </span><span class=\"n\">Name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span>\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"begin_test\"</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">project_term</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"s2\">\"end_test\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"o\">()</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment_wrap</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"/*\"</span><span class=\"w\"> </span><span class=\"n\">rawIdent</span><span class=\"w\"> </span><span class=\"s2\">\"*/\"</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment_line</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"//\"</span><span class=\"w\"> </span><span class=\"n\">commentBody</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment_wrap</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">comment</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment_line</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">comment</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">comment</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">project_term</span>\n\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">basic_type</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"int*\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"uint*\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"address\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"bool\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"string\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"bytes\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"n\">rawIdent</span><span class=\"w\"> </span><span class=\"s2\">\".\"</span><span class=\"w\"> </span><span class=\"n\">rawIdent</span>\n</code></pre></div>\n<p>but I don't  understand why do I need to add those, I just take it from the commentBody of lean4</p>",
        "id": 445161242,
        "sender_full_name": "kishou yusa",
        "timestamp": 1718638107
    }
]