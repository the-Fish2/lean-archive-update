[
    {
        "content": "<p>What is this called? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 433164761,
        "sender_full_name": "Iocta",
        "timestamp": 1713128543
    },
    {
        "content": "<p>I can't find it with the search tactics I know about or with moogle</p>",
        "id": 433165199,
        "sender_full_name": "Iocta",
        "timestamp": 1713128963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Real, (?a * ?b) ^ ?c = ?a ^ ?c * ?b ^ ?c</p>",
        "id": 433165571,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1713129276
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecialFunctions/Pow/Complex.html#Complex.mul_cpow_ofReal_nonneg\">Complex.mul_cpow_ofReal_nonneg</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecialFunctions/Pow/Real.html#Real.mul_rpow\">Real.mul_rpow</a>, and <a href=\"https://loogle.lean-lang.org/?q=Real%2C%20%28%3Fa%20%2A%20%3Fb%29%20%5E%20%3Fc%20%3D%20%3Fa%20%5E%20%3Fc%20%2A%20%3Fb%20%5E%20%3Fc\">5 more</a></p>",
        "id": 433165574,
        "sender_full_name": "loogle",
        "timestamp": 1713129278
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.mul_rpow#doc\">docs#Real.mul_rpow</a> looks like what you want</p>",
        "id": 433165617,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1713129326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> has marked this topic as resolved.</p>",
        "id": 433165628,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713129341
    },
    {
        "content": "<p>Just to clarify: the example at the start of this thread is false (which is why search tactics won't find it) and the solution given asserts that it's true under certain hypotheses.</p>",
        "id": 433165741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713129441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> has marked this topic as unresolved.</p>",
        "id": 433165758,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713129471
    },
    {
        "content": "<p>A search tactic that when asked for <code>p</code> can find <code>h -&gt; p</code> would be nice.</p>",
        "id": 433165894,
        "sender_full_name": "Iocta",
        "timestamp": 1713129580
    },
    {
        "content": "<p>(side note: you don't need to resolve threads, and in fact doing so is discouraged)</p>",
        "id": 433166000,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1713129644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> <a href=\"#narrow/stream/113489-new-members/topic/.60Real.2Emul_pow.60/near/433165894\">said</a>:</p>\n<blockquote>\n<p>A search tactic that when asked for <code>p</code> can find <code>h -&gt; p</code> would be nice.</p>\n</blockquote>\n<p>Does <code>apply?</code> not work in your example?</p>",
        "id": 433166818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713130440
    },
    {
        "content": "<p>I didn't know about <code>apply?</code>. It does work.</p>",
        "id": 433166910,
        "sender_full_name": "Iocta",
        "timestamp": 1713130517
    },
    {
        "content": "<p>It seems like for any given elementary algebra problem there's a whole bunch of search tactics to try and I don't understand when to use each one. <code>apply? linarith nlinarith simp ring field_simp aesop hint</code>, moogle, guessing what it's called, searching mathlib, scrolling through mathlib.  I would like some guidance on how to choose.</p>",
        "id": 433167268,
        "sender_full_name": "Iocta",
        "timestamp": 1713130813
    },
    {
        "content": "<p>You are right that there are a whole bunch of things to try -- however there are not 100 things to try, there is something like 10 things to try, and you list most of them above, so it's just a case of getting a feeling for what each of them do. A good way to work out what a tactic does is to read its docstring. For example <code>linarith</code> solves equalities and inequalities using hypotheses in the context; <code>ring</code> solves identities in ring theory without using hypotheses in the context.</p>",
        "id": 433167819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713131370
    }
]