[
    {
        "content": "<p>very basic question, thats how i tried to match on a finset, similiar to how I would match on an inductive</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">strSubset</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">String</span>  <span class=\"o\">:=</span>  <span class=\"o\">{</span><span class=\"s2\">\"hello\"</span><span class=\"o\">,</span> <span class=\"s2\">\"world\"</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nat_mapping</span><span class=\"o\">:</span> <span class=\"n\">strSubset</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>  <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"c1\">-- or match s, p with</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"hello\"</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"world\"</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>how can i do that? also learning resource pointers are welcome, i used <a href=\"http://url\">https://leanprover-community.github.io/theories/sets.html</a> and matlib3 docs</p>",
        "id": 424341585,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709335479
    },
    {
        "content": "<p>What error does that give?</p>",
        "id": 424343559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709336618
    },
    {
        "content": "<blockquote>\n<p>failed to compile pattern matching, stuck at<br>\n  remaining variables: [s✝:(String), p✝:(s✝ ∈ Location)]<br>\n  alternatives:<br>\n    [x✝:(\"hello\" ∈ Location)] |- [\"hello\", x✝] =&gt; h_1 x✝<br>\n    [x✝:(\"world\" ∈ Location)] |- [\"world\", x✝] =&gt; h_2 x✝<br>\n  examples:_, _</p>\n</blockquote>\n<p>which sounds weird to me because i specified all alternatives?</p>",
        "id": 424343814,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709336761
    },
    {
        "content": "<p>I think it works if you add a 3rd <code>_</code> case</p>",
        "id": 424344626,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709337262
    },
    {
        "content": "<p>but that's not an ideal solution, of course... it seems like Lean is treating this as if you were just matching on <code>String</code> with no constraints</p>",
        "id": 424344936,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709337468
    },
    {
        "content": "<p>yes, i cant seem to close a 3rd  \"_\" case by contradiction</p>",
        "id": 424345290,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709337683
    },
    {
        "content": "<p>I'm curious though... if you're writing a match statement like this, then you'd seem to know the possible values, but then why not make those values into a type instead of using <code>String</code>? I wonder if there's an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> here</p>",
        "id": 424345682,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709337929
    },
    {
        "content": "<blockquote>\n<p>inductive my_type where<br>\n| hello | world<br>\nderiving Repr</p>\n<p>def nat_mapping: my_type -&gt; Nat<br>\n| .hello =&gt; 3<br>\n| .world =&gt; 2</p>\n</blockquote>\n<p>thinking about it youre right with <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> ... <br>\nlooking through the manual i found that \"deriving Repr\" even lets me convert to the String</p>",
        "id": 424348618,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709340062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> has marked this topic as resolved.</p>",
        "id": 424348743,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709340175
    }
]