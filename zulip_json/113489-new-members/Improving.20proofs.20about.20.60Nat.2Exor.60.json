[
    {
        "content": "<p>I've proved a few basic theorems about the <code>^^^</code> operator on natural numbers, but I feel like most (if not all) of these proofs are way more clunky and verbose than they need to be. Does anyone have any advice for condensing them down or making them more readable?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Nat.zero_xor</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">^^^</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">HXor.hXor</span><span class=\"o\">,</span> <span class=\"n\">Xor.xor</span><span class=\"o\">,</span> <span class=\"n\">xor</span><span class=\"o\">,</span> <span class=\"n\">bitwise</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Nat.xor_zero</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^^^</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">HXor.hXor</span><span class=\"o\">,</span> <span class=\"n\">Xor.xor</span><span class=\"o\">,</span> <span class=\"n\">xor</span><span class=\"o\">]</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bitwise</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">eq_comm</span> <span class=\"n\">_</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Nat.xor_self</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^^^</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">HXor.hXor</span><span class=\"o\">,</span> <span class=\"n\">Xor.xor</span><span class=\"o\">,</span> <span class=\"n\">xor</span><span class=\"o\">]</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bitwise</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">split</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_eq_zero_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">xor_self</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.xor_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^^^</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">^^^</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">HXor.hXor</span><span class=\"o\">,</span> <span class=\"n\">Xor.xor</span><span class=\"o\">,</span> <span class=\"n\">xor</span><span class=\"o\">]</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bitwise</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">split</span>\n  <span class=\"bp\">·</span> <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span>\n  <span class=\"bp\">·</span> <span class=\"n\">split</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">·</span> <span class=\"n\">split</span>\n      <span class=\"bp\">·</span> <span class=\"n\">split</span>\n        <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.xor_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">HXor.hXor</span><span class=\"o\">,</span> <span class=\"n\">Xor.xor</span><span class=\"o\">,</span> <span class=\"n\">xor</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">p</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n        <span class=\"bp\">·</span> <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"n\">not_h</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h.symm</span> <span class=\"n\">not_h</span>\n      <span class=\"bp\">·</span> <span class=\"n\">split</span>\n        <span class=\"bp\">·</span> <span class=\"n\">next</span> <span class=\"n\">not_h</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h.symm</span> <span class=\"n\">not_h</span>\n        <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.xor_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">HXor.hXor</span><span class=\"o\">,</span> <span class=\"n\">Xor.xor</span><span class=\"o\">,</span> <span class=\"n\">xor</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">p</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 435778926,
        "sender_full_name": "tjf801",
        "timestamp": 1714241187
    },
    {
        "content": "<p><code>import Mathlib.Data.Nat.Bitwise</code> will let you delete all of those</p>",
        "id": 435779231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714241388
    },
    {
        "content": "<p>I figured Mathlib would have something like that, but I'm trying to do it myself so I can personally get more familiar with using tactics and writing proofs, even if it is reinventing the wheel a bit if that makes any sense</p>",
        "id": 435780653,
        "sender_full_name": "tjf801",
        "timestamp": 1714242761
    },
    {
        "content": "<p>In that case, one way to learn how to condense them down would be to read the source of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.xor_comm#src\">src#Nat.xor_comm</a> etc. Of course, it's possible that the proofs in mathlib could be further condensed down!</p>",
        "id": 435781291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714243408
    },
    {
        "content": "<p>(Reinventing the wheel as an exercise is totally fine, but if you ask \"how do I make this shorter\" and don't explain that you're doing this, the best answer is \"use as much as possible that already exists\"!)</p>",
        "id": 435781355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714243462
    }
]