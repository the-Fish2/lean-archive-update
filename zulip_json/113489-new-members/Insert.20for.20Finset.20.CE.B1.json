[
    {
        "content": "<p>As I understand it, the following creates a singleton set, then inserts the second Nat</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>The same doesn't work in the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">E</span> <span class=\"n\">where</span> <span class=\"bp\">|</span> <span class=\"n\">e1</span> <span class=\"bp\">|</span> <span class=\"n\">e2</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">e2</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>I imagine that there's some Typeclass instance missing for E, which Nat has. Specifically, I would guess I need <code>DecidableEq</code> for E. That's just a gut feeling though. I'm not seeing how to discover this from the documentation.</p>",
        "id": 412007182,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1704832094
    },
    {
        "content": "<p>that is indeed the case, you should be able to see it from the signature of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.insert#doc\">docs#Finset.insert</a> but it is unintuitive. Note that <code>where | e1 | e2 deriving DecidableEq</code> fixes this, although this is just a band aid for not great error messages.</p>",
        "id": 412007504,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704832238
    },
    {
        "content": "<p>Right, yeah. <code>deriving DecidableEq</code> does the trick.</p>",
        "id": 412007557,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1704832257
    },
    {
        "content": "<p>I get a 404 not found for Finset insert</p>",
        "id": 412007647,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1704832302
    },
    {
        "content": "<p>sorry, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.instInsertFinset#doc\">docs#Finset.instInsertFinset</a> (hard to find)!</p>",
        "id": 412007655,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704832305
    },
    {
        "content": "<p>Yup! there it is. Okay, good. I was expecting to find that. It's good that <code>DeciableEq α</code> is in the sig</p>",
        "id": 412007924,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1704832424
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 412008041,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1704832471
    },
    {
        "content": "<p>Here's a searching hint:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">instances</span> <span class=\"n\">Insert</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">1 instance:</span>\n\n<span class=\"cm\">Finset.instInsertFinset.{u_1} {α : Type u_1} [inst✝ : DecidableEq α] : Insert α (Finset α)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 412008596,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704832763
    },
    {
        "content": "<p>I haven't used <code>#instances</code> before.<br>\nOh. That's helpful to know.</p>",
        "id": 412008939,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1704832936
    },
    {
        "content": "<p>Is it possible to look into an already defined FInset? For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">full</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Elem</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">e2</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">e1</span> <span class=\"bp\">∈</span> <span class=\"n\">full</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 412012661,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1704834589
    },
    {
        "content": "<p><code>by simp [full]</code> and then <code>decide</code> if that didn't do it? Maybe?</p>",
        "id": 412014888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704835607
    },
    {
        "content": "<p>Lean won't see through definitions if they're not marked <code>@[reducible]</code> or <code>abbrev</code></p>",
        "id": 412015019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704835671
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">E</span> <span class=\"n\">where</span> <span class=\"bp\">|</span> <span class=\"n\">e1</span> <span class=\"bp\">|</span> <span class=\"n\">e2</span> <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n<span class=\"kn\">open</span> <span class=\"n\">E</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">full</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">e2</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">e1</span> <span class=\"bp\">∈</span> <span class=\"n\">full</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>\n<p>works indeed</p>",
        "id": 412015915,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1704836087
    },
    {
        "content": "<p>It would be really great if Lean could run <code>#instances</code> for you in the error message when elaboration fails to find an instance</p>",
        "id": 412019486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704837689
    },
    {
        "content": "<p>Especially as sometimes it's not at all clear to the user that the failure is a missing instance</p>",
        "id": 412040848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704847976
    }
]