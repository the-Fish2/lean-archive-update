[
    {
        "content": "<p>How do I say \"supremum of this set of reals\"? I couldn't find anything like <code>Real.sup</code>. I have a collection S that produces different values when a function f is applied, and I want to take the supremum.</p>\n<p>I would also like to eventually prove that this supremum is attained, and then also define a particular function by \"take the element in S that maximizes this value\". This will obviously require some topology, but Lean's topology feels very strange and foreign to me...</p>",
        "id": 422878404,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1708626187
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=sSup#doc\">docs#sSup</a></p>",
        "id": 422879177,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708626474
    },
    {
        "content": "<p>There is also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=iSup#doc\">docs#iSup</a> for indexed suprema, also known as <code>⨆</code></p>",
        "id": 422880697,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708626950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/supremum.20of.20reals/near/422879177\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=sSup#doc\">docs#sSup</a></p>\n</blockquote>\n<p>The link you gave gives a 404 error. <a href=\"https://leanprover-community.github.io/mathlib4_docs/404.html#sSup\">https://leanprover-community.github.io/mathlib4_docs/404.html#sSup</a></p>",
        "id": 422886651,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1708628974
    },
    {
        "content": "<p>Yeah, though you can click through. Here's a direct link: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/SetNotation.html#SupSet.sSup\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/SetNotation.html#SupSet.sSup</a></p>",
        "id": 422894657,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708631936
    },
    {
        "content": "<p>Thanks. Any pointers on how to go about saying an \"argmax\" type thing...? Or showing that the supremum is attained? Is this something I need to understand <code>Filter</code> for?</p>",
        "id": 422901426,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1708634705
    },
    {
        "content": "<p>I suppose it depends on your exact argument but I didn't think of filters when I wrote</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.PseudoMetric</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">argmax</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsCompact</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ne_s</span> <span class=\"o\">:</span> <span class=\"n\">s.Nonempty</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOn</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">hs.exists_isMaxOn</span> <span class=\"n\">ne_s</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 422950404,
        "sender_full_name": "A.",
        "timestamp": 1708664096
    }
]