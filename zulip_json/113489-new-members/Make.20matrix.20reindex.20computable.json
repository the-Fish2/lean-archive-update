[
    {
        "content": "<p>I am trying to convert  <code>Matrix (Fin 2 × Fin 2) (Fin 1 × Fin 1) ℂ)</code> to  <code>(Matrix (Fin 4) (Fin 1) ℂ</code>. However the converter needs to be set to \"noncomputable\", I am wondering what changes are needed in my Equiv proofs to make it computable?</p>\n<p>Here is the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Kronecker</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">Kronecker</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fin22Fin4Equiv</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">x</span><span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">zero_lt_four</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin.eq_of_veq</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">fin_cases</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">fin_cases</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fin11Fin1Equiv</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">x</span><span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin.eq_of_veq</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">fin_cases</span> <span class=\"n\">x</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">fin_cases</span> <span class=\"n\">x</span>\n    <span class=\"n\">simp</span>\n\n<span class=\"c1\">-- This has to be set to noncomputable</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">convertMatrix_fin22Fin11Fin4Fin1</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">reindex</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">finProdFinEquiv</span> <span class=\"n\">fin22Fin4Equiv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">finProdFinEquiv</span> <span class=\"n\">fin11Fin1Equiv</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n<span class=\"bp\">````</span>\n</code></pre></div>",
        "id": 418942768,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706659293
    },
    {
        "content": "<p>It looks like you used <code>theorem</code> instead of <code>def</code> for your definitions.</p>",
        "id": 418944760,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706660335
    },
    {
        "content": "<p>yeah, it's a common mistake... equivalences aren't Propositions, they're data</p>",
        "id": 418945125,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1706660540
    },
    {
        "content": "<p>Makes sense! Thanks!</p>",
        "id": 418947029,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706661768
    },
    {
        "content": "<p>You might be looking for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.castIso#doc\">docs#Fin.castIso</a>, which  gives you that <code>Fin 4</code> and <code>Fin (2*2)</code> are isomorphic</p>",
        "id": 418977141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706683444
    },
    {
        "content": "<p>(although in fact since <code>2*2=4</code> is true by definition you don't need it at all)</p>",
        "id": 418977194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706683480
    }
]