[
    {
        "content": "<p>I am writing a tactic that will selectively apply certain existing tactics based on conditions.</p>\n<p>Is the following the recommended syntax for invoking a tactic (in this case <code>linarith</code>)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.Elab.Tactic.evalTactic</span> <span class=\"bp\">&lt;|←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">linarith</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How do I make the tactic name dynamic? In other words, how do I execute <code>tacticToExecute</code> given <code>let tacticToExecute := \"some tactic\"</code>?</p>",
        "id": 419944842,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1707174406
    },
    {
        "content": "<p>I'm not sure this is really a recommended way to go about it, probably you only have a fixed list of options, I'd go with something more like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>   <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">assumption</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">simp</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"asd\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">as</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">Lean.Elab.Tactic.evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">a</span> <span class=\"n\">as</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">asd</span>\n</code></pre></div>",
        "id": 420252617,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1707312759
    },
    {
        "content": "<p>If you had made a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with an example of your setup it would have been much quicker for me to write this answer btw</p>",
        "id": 420252708,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1707312787
    },
    {
        "content": "<p>You could also use  a string or whatever in place of a nat index here, but fundamentally when using these tactic syntax quotations Lean wants to check that the syntax you are producing corresponds to valid tactic calls, so full dynamism seems ill-advised</p>",
        "id": 420252941,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1707312849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Thanks Alex! I've resolved the issue by employing both <code>runParserCategory</code> and <code>evalTactic</code> together:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>          <span class=\"k\">match</span> <span class=\"n\">Lean.Parser.runParserCategory</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.MonadEnv.getEnv</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"n\">tacticToRun</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Except.error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"n\">e</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Except.ok</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Elab.Tactic.evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(⟨</span><span class=\"n\">stx</span><span class=\"o\">⟩))</span>\n</code></pre></div>\n<p>Does this appear to be correct?</p>",
        "id": 420363747,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1707350303
    },
    {
        "content": "<p><code>Lean.Elab.Tactic.evalTactic $ ← `(tactic| $(⟨stx⟩))</code> can be simply <code>Lean.Elab.Tactic.evalTactic stx</code>.</p>\n<p>Could we <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> this? There's almost always a better thing to do than parsing strings. For example, your tactic might have a <code>tactic</code> argument. There are many tactics that take a <code>discharger</code> argument, where you can write something like <code>my_tactic (discharger := linarith)</code>, and <code>linarith</code> can be replaced with an arbitrarily complicated tactic script.</p>",
        "id": 420376135,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707358529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thank you! Using <code>Lean.Elab.Tactic.evalTactic stx</code> is indeed much cleaner.</p>\n<p>In my logic, I have arrays of strings containing tactics that I wish to execute if certain criteria are met, hence the need to convert strings into tactics (using <code>evalTactic &lt;Lean.Syntax&gt;</code> after getting the <code>Lean.Syntax</code> object via <code>Lean.Parser.runParserCategory</code>). Please let me know if there's a more appropriate method to accomplish this without parsing strings.</p>\n<p>I'm required to supply <code>Lean.Syntax</code> objects to <code>Lean.Elab.Tactic.evalTactic</code>. I'm contemplating whether storing Lean syntax objects directly in the array, as opposed to strings, might be a better strategy. Would this approach be advisable? Furthermore, is there an alternative method that enables \"compile-time\" verification of tactic availability?</p>",
        "id": 420473997,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1707403843
    },
    {
        "content": "<p>You should definitely try to handle Syntax objects as much as possible.</p>",
        "id": 420478730,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707405174
    },
    {
        "content": "<p>Could we <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> more? I'd like to understand what sort of tactic you're writing, and why it's natural for you to have arrays of tactic strings/syntax rather than some other arrangement.</p>\n<p>(Is it an array because you want to execute sequences of tactics? A tactic can be a composite of tactics, so there's no need for an array.)</p>",
        "id": 420497999,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707410567
    },
    {
        "content": "<p>How dynamic do you need this to be? Is there anything wrong with an if/else chain that does an appropriate <code>Lean.Elab.Tactic.evalTactic &lt;|← `(tactic|linarith)</code> in each case?</p>",
        "id": 420498193,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707410634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> showing what I'm currently doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">mytactic</span><span class=\"o\">)</span> <span class=\"s2\">\"mytactic\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">@[</span><span class=\"n\">tactic</span> <span class=\"n\">mytactic</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">_mytactic</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Tactic.Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">tactics_1</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"s2\">\"some tactic 1\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"some tactic 2\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"some tactic 3\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"aesop\"</span>\n  <span class=\"o\">]</span>\n  <span class=\"c1\">-- let tactics_2 : ...</span>\n  <span class=\"c1\">-- let tactics_3 : ...</span>\n  <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"c1\">-- some logic determining which of tactics_1, tactics_2, etc should be run</span>\n    <span class=\"n\">tactics_1.forM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"c1\">-- some logic 1</span>\n      <span class=\"k\">match</span> <span class=\"n\">Lean.Parser.runParserCategory</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.MonadEnv.getEnv</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"n\">tactic</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Except.error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Error '{tactic}': {e}\"</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Except.ok</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Elab.Tactic.evalTactic</span> <span class=\"n\">s</span>\n      <span class=\"c1\">-- some logic 2</span>\n    <span class=\"o\">)</span>\n    <span class=\"c1\">-- some logic 3</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">mytactic</span>\n</code></pre></div>\n<p>If I'm understanding your suggestion correctly it would require me to violate the \"Don't repeat yourself\" (DRY) principle by repeating the \"some logic\" blocks in my code, no?</p>",
        "id": 420787897,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1707559722
    },
    {
        "content": "<p>I think the suggestion is for your array to contain <code> `(tactic| some tactic 1) </code> etc instead</p>",
        "id": 420789924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707561841
    },
    {
        "content": "<p>What's the \"some logic 1\" and \"some logic 2\"? Could you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that represents the functionality of the tactic that you're working on?</p>",
        "id": 420816138,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707584694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> It is code analysing and reporting what progress each \"subtactic\" achieved. Here is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">mytactic</span><span class=\"o\">)</span> <span class=\"s2\">\"mytactic\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">@[</span><span class=\"n\">tactic</span> <span class=\"n\">mytactic</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">_mytactic</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Tactic.Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">tactics_1</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"s2\">\"some tactic 1\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"some tactic 2\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"some tactic 3\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"aesop\"</span>\n  <span class=\"o\">]</span>\n  <span class=\"c1\">-- let tactics_2 : ...</span>\n  <span class=\"c1\">-- let tactics_3 : ...</span>\n  <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"c1\">-- some logic determining which of tactics_1, tactics_2, etc should be run</span>\n    <span class=\"c1\">-- depending on the current state ...</span>\n    <span class=\"n\">tactics_1.forM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"c1\">-- code analyzing the state after before running the subtactic such as ...</span>\n      <span class=\"k\">let</span> <span class=\"n\">unsolved</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getUnsolvedGoals</span>\n      <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{unsolved.length} unsolved goal(s) before running subtactic {tactic}\"</span>\n      <span class=\"k\">match</span> <span class=\"n\">Lean.Parser.runParserCategory</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.MonadEnv.getEnv</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"n\">tactic</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Except.error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Error '{tactic}': {e}\"</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Except.ok</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Elab.Tactic.evalTactic</span> <span class=\"n\">s</span>\n      <span class=\"c1\">-- code analyzing the state after after running the subtactic such as ...</span>\n      <span class=\"k\">let</span> <span class=\"n\">unsolved</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getUnsolvedGoals</span>\n      <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{unsolved.length} unsolved goal(s) after running subtactic {tactic}\"</span>\n    <span class=\"o\">)</span>\n    <span class=\"c1\">-- code analyzing the state after running all subtactics</span>\n    <span class=\"k\">let</span> <span class=\"n\">unsolved</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getUnsolvedGoals</span>\n    <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{unsolved.length} unsolved goal(s) after running tactics\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">mytactic</span>\n</code></pre></div>",
        "id": 420822927,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1707590276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"683979\">@Isak Colboubrani</span> (an important aspect of <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>'s is that they have the correct <code>import</code>s and <code>open</code>s)</p>",
        "id": 420826931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707593385
    },
    {
        "content": "<p>Here's an example of how you can organize this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">evalTacticWithReport</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">unsolved</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getUnsolvedGoals</span>\n  <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{unsolved.length} unsolved goal(s) before running subtactic {tactic}\"</span>\n  <span class=\"n\">evalTactic</span> <span class=\"n\">tactic</span>\n  <span class=\"k\">let</span> <span class=\"n\">unsolved</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getUnsolvedGoals</span>\n  <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{unsolved.length} unsolved goal(s) after running subtactic {tactic}\"</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">mytactic</span><span class=\"o\">)</span> <span class=\"s2\">\"mytactic\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">@[</span><span class=\"n\">tactic</span> <span class=\"n\">mytactic</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">_mytactic</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Tactic.Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">shouldDoTactics1</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"c1\">-- some logic</span>\n    <span class=\"k\">if</span> <span class=\"n\">shouldDoTactics1</span> <span class=\"k\">then</span>\n      <span class=\"n\">evalTacticWithReport</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n      <span class=\"n\">evalTacticWithReport</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n      <span class=\"n\">evalTacticWithReport</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">aesop</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">evalTacticWithReport</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">congr</span><span class=\"o\">)</span>\n    <span class=\"c1\">-- code analyzing the state after running all subtactics</span>\n    <span class=\"k\">let</span> <span class=\"n\">unsolved</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getUnsolvedGoals</span>\n    <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{unsolved.length} unsolved goal(s) after running tactics\"</span>\n</code></pre></div>",
        "id": 420827527,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707593928
    },
    {
        "content": "<p>Note that <code>withMainContext</code> is only valid for the state right at the beginning. If you need to do some logic after running after tactics, you have to adjust the context.</p>",
        "id": 420827553,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707593973
    }
]