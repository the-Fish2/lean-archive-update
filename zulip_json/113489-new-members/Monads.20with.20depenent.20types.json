[
    {
        "content": "<p>Im Trying to write a Monad M that captures a Sequence of effects. Those effects produce Values that Depend on the Monads context (Nat in my example for read only state). I think this cannot be written as a monad, since it would require a Nat -&gt; Type instead of just Type. But im kinda stuck finding a working solution. The dependent Values used in my effects are not meant to ever leave the monad context, and may only be created inside the context</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"n\">n2</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>   <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Some</span><span class=\"o\">:</span> <span class=\"n\">n1</span> <span class=\"bp\">=</span> <span class=\"n\">n2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">None</span><span class=\"o\">:</span> <span class=\"n\">n1</span> <span class=\"bp\">≠</span> <span class=\"n\">n2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">n1</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n2</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Eff</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>  <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Create</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n2</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">IO</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Eff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">n2</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>  <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Do</span> <span class=\"o\">:</span>  <span class=\"n\">Eff</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">M</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">M</span> <span class=\"n\">n</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">Return</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">M</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_ep</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">M.bind</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}:</span> <span class=\"n\">M</span> <span class=\"n\">ep</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">α</span> <span class=\"n\">ep</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">ep</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">ep</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">M.Do</span> <span class=\"n\">eff</span> <span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"n\">next'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M.Do</span> <span class=\"n\">eff</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">next'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">M.Return</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">next'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">next'</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">M.pure</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span>  <span class=\"n\">M</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">M.Return</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">M.bind</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">M.pure</span>\n</code></pre></div>",
        "id": 425092293,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709733600
    }
]