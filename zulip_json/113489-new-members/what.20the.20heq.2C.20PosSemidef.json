[
    {
        "content": "<p>So I'm trying to prove some things about PSD matrices and I ran into issues where <code>sqrt</code> requires a proof that the matrix is PSD, which meant I got <code>HEq</code> issues because <code>PosSemidef A</code> and <code>PosSemidef B</code> are different types even if <code>A = B</code>. A minimized chunk of my proof looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">RCLike</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ComplexOrder</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sqrt_neg</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Matrix.posSemidef_conjTranspose_mul_self</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">Matrix.posSemidef_conjTranspose_mul_self</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.conjTranspose_neg</span><span class=\"o\">,</span> <span class=\"n\">Matrix.neg_mul</span><span class=\"o\">,</span> <span class=\"n\">Matrix.mul_neg</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">neg_neg</span> <span class=\"n\">_</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_heq</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">heq_prop</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>so I was eventually able to get it with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"n\">congr_heq</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">heq_prop</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>but what I really \"meant\" was just <code>rw [this]</code>. Is there a better way to handle these types of things ... ?</p>",
        "id": 434147980,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1713455891
    },
    {
        "content": "<p>If I just cared about <code>sqrt</code>, I could just write a lemma like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sqrt_eq</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A.PosSemidef</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">B.PosSemidef</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">hA.sqrt</span> <span class=\"bp\">=</span> <span class=\"n\">hB.sqrt</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_heq</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">heq_prop</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>and rely on that. But there are many such matrix functions, like <code>IsHermitian.eigenvalues</code>, <code>IsHermitian..eigenvectorMatrix</code>, <code>IsHermitian.eigenvectorMatrixInv</code>, and it feels wrong to have to write so many similar \"casting\" lemmas.</p>",
        "id": 434157155,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1713456295
    },
    {
        "content": "<p>Note: <span class=\"user-mention\" data-user-id=\"462733\">@Jon Bannon</span> is currently in the process of refactoring <code>Matrix.IsHermitian.eigen*</code> stuff, so expect some things around that to change very soon. I think there's a PR, but it's not in an appropriate state yet, so I won't link it.</p>",
        "id": 434172604,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713456956
    },
    {
        "content": "<p>Moreover, note that some of this will be fixed by using the continuous functional calculus. There will be an instance of that for hermitian and positive semidefinite matrices soon (but it needs the refactor first). And I have material about <code>sqrt</code> for the cfc waiting in another repo which I'll PR soonish.</p>",
        "id": 434175329,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713457074
    },
    {
        "content": "<p>Also, I would bet that using the term constructor <code>congr</code> (or the tactic <code>congrm</code>) can help you here, but I haven't tested it.</p>",
        "id": 434178037,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713457200
    },
    {
        "content": "<p>Can you share what you're working on concerning positive semidefinite matrices?</p>\n<p>Note that there's currently lots of defeq abuse in those files, which is part of the thing that Jon is cleaning up.</p>",
        "id": 434179298,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713457256
    },
    {
        "content": "<p>I'm trying to write up some things from quantum information theory. Just basic stuff right now. :)</p>",
        "id": 434195558,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1713458004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I know this is kind of cursed, but do you understand why the <code>congrm</code> tactic succeeds here but the declaration fails because the kernel says it still has free variables? Seems like a bug in <code>congr</code>, which I know you're currently working on.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">RCLike</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ComplexOrder</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sqrt_eq</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A.PosSemidef</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">B.PosSemidef</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">hA.sqrt</span> <span class=\"bp\">=</span> <span class=\"n\">hB.sqrt</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">congrm</span><span class=\"o\">(</span><span class=\"n\">Matrix.PosSemidef.sqrt</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span>\n</code></pre></div>",
        "id": 434202080,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713459143
    },
    {
        "content": "<p><code>congr!</code> works here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sqrt_eq</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A.PosSemidef</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">B.PosSemidef</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">hA.sqrt</span> <span class=\"bp\">=</span> <span class=\"n\">hB.sqrt</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">congr</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>That tactic is \"goal directed\" vs <code>congrm</code> and <code>congr(...)</code> which are \"term directed\" (the former can use whatever it finds in the goal, the latter needs to synthesize what it needs). The issue appears to be <code>‹_›</code>, which doesn't seem to play nice with <code>congrm</code>/<code>congr(...)</code>, though I'm not sure what the issue is exactly.</p>",
        "id": 434206651,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713460839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> Thanks for that example. There was a bad bug deep within <code>congr(...)</code>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/12253\">#12253</a></p>",
        "id": 434221214,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713466764
    },
    {
        "content": "<p>Lol, I can't believe I didn't think of <code>congr!</code> in this case. Thanks for the bug fix Kyle!</p>",
        "id": 434223740,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713467917
    },
    {
        "content": "<p>It's neat to see that <code>congrm</code>/<code>congr(...)</code> actually works with <code>‹_›</code>. (That didn't turn out to be the problem by the way. The real issue was that <code>congr(...)</code> was building a term that used <code>Subsingleton</code> instances to automatically handle discrepancies between arguments, but it wasn't substituting it in everywhere, leaving a stray fvar in the term.)</p>",
        "id": 434224558,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713468269
    },
    {
        "content": "<p>Yeah, I didn't know if it would work with <code>‹_›</code> either, and was a bit surprised to see that it did. I also realized you can postpone goals with metavariable holes like <code>?_</code>. I tried that first, found it was very cool that it worked, then tried with <code>‹_›</code>. Unsurprisingly, given what the issue ended up being, the <code>fvar</code> error also occurred with <code>?_</code>.</p>",
        "id": 434224773,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713468387
    }
]