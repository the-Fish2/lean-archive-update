[
    {
        "content": "<p>Is it possible to use notation for a object in one part of a file and then use different notation for it later?</p>\n<p>This is a somewhat contrived example, but if you were to build up groups and rings from the ground up, the standard notation for the identity is <code>e</code> for the group/monoid, but for rings we typically use numeric notation (ex. <code>0</code> and <code>1</code>).  And there's a bit of conflict between the two. </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Example</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MyAlgebra</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The element one -/</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span><span class=\"kd\">]</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"e\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">One.one</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The element zero -/</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span><span class=\"kd\">]</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"(0)\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Zero.zero</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">Magma</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The binary operation that must be closed by definition -/</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span><span class=\"kd\">]</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\" ⬝ \"</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">Magma.mul</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">AddSemigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n<span class=\"sd\">/-- Addition is associative -/</span>\n  <span class=\"n\">add_assoc₃</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Magma</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The operation is associative -/</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"n\">b</span> <span class=\"bp\">⬝</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⬝</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">UnitalAddMagma</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- One is a left neutral element for the operation. -/</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"sd\">/-- One is a right neutral element for the operation -/</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">UnitalMagma</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Magma</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- One is a left neutral element for the operation. -/</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"bp\">⬝</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"sd\">/-- One is a right neutral element for the operation -/</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">AddMonoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddSemigroup</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">UnitalAddMagma</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroup</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">UnitalMagma</span> <span class=\"n\">α</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The inversion function -/</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span><span class=\"kd\">]</span>\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"⁻¹\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inv.inv</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">AddGroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Neg</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">neg_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">add_neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Inv</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⬝</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n  <span class=\"n\">mul_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">CommGroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Group</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">⬝</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">Monoid</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"n\">c</span>\n  <span class=\"n\">add_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">⬝</span> <span class=\"n\">c</span>\n\n\n<span class=\"c1\">-- In a group theory context, you probably want to use `e` as your identity</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test₁</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- In a ring theory context, you probably want to use `1` as your identity</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test₂</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n</div></div>",
        "id": 417973685,
        "sender_full_name": "George Chemmala",
        "timestamp": 1706134733
    },
    {
        "content": "<p>You could use <code>scoped</code> or <code>local</code> notation to make <code>e</code> valid notation for <code>One.one</code> (although you would <em>still</em> be able to use <code>1</code>). If you give it high enough priority I think it should also display that in the infoview.</p>",
        "id": 417974234,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706134978
    },
    {
        "content": "<p>Here is what I mean, although I have implemented it so that <code>e</code> and <code>1</code> can be used disjointly if preferred. Note: I've reduced your imports because I think you may have unintentionally had some overlap with Mathlib definitions. Also, for <code>0</code> and <code>1</code>, I recommend using <code>OfNat</code>, as I have done here.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Example</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ScopedNS</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The element one -/</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span><span class=\"kd\">]</span>\n<span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">Group</span><span class=\"o\">]</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"e\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">One.one</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">One.toOfNat1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">Ring</span><span class=\"o\">]</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">One.toOfNat1</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The element zero -/</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Zero.toOfNat0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Magma</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The binary operation that must be closed by definition -/</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span><span class=\"kd\">]</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\" ⬝ \"</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">Magma.mul</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">AddSemigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n<span class=\"sd\">/-- Addition is associative -/</span>\n  <span class=\"n\">add_assoc₃</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Magma</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The operation is associative -/</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"n\">b</span> <span class=\"bp\">⬝</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⬝</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">UnitalAddMagma</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- One is a left neutral element for the operation. -/</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"sd\">/-- One is a right neutral element for the operation -/</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">UnitalMagma</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Magma</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- One is a left neutral element for the operation. -/</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"bp\">⬝</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"sd\">/-- One is a right neutral element for the operation -/</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">AddMonoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddSemigroup</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">UnitalAddMagma</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroup</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">UnitalMagma</span> <span class=\"n\">α</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The inversion function -/</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span><span class=\"kd\">]</span>\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"⁻¹\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inv.inv</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">AddGroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Neg</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">neg_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">add_neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Inv</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⬝</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n  <span class=\"n\">mul_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">CommGroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Group</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">⬝</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">Monoid</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"n\">c</span>\n  <span class=\"n\">add_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">⬝</span> <span class=\"n\">c</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Group</span>\n\n<span class=\"c1\">-- In a group theory context, you probably want to use `e` as your identity</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test₁</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Ring</span>\n\n<span class=\"c1\">-- In a ring theory context, you probably want to use `1` as your identity</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test₂</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⬝</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 417975687,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706135728
    },
    {
        "content": "<p>This has the unfortunate side effect that if neither of the notation scopes is activated, you'll just see <code>One.one</code> everywhere.</p>",
        "id": 417975824,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706135799
    },
    {
        "content": "<p>If you make <code>One.toOfNat1</code> an instance, and remove the <code>scoped[Ring]</code> line, then <code>1</code> will be always valid notation, but you'll also be able to use <code>e</code> when you write <code>open scoped Group</code>.</p>",
        "id": 417976369,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706136053
    },
    {
        "content": "<p>Thanks, this was exactly what I was looking for</p>",
        "id": 418003230,
        "sender_full_name": "George Chemmala",
        "timestamp": 1706153541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"575712\">George Chemmala</span> has marked this topic as resolved.</p>",
        "id": 418312946,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706287585
    }
]