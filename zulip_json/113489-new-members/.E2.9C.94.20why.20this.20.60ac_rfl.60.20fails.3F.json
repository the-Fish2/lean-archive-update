[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Point</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">a.x</span> <span class=\"bp\">+</span> <span class=\"n\">b.x</span><span class=\"o\">,</span> <span class=\"n\">a.y</span> <span class=\"bp\">+</span> <span class=\"n\">b.y</span><span class=\"o\">,</span> <span class=\"n\">a.z</span> <span class=\"bp\">+</span> <span class=\"n\">b.z</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Point</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">add_comm</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Std.Commutative</span> <span class=\"n\">Point.add</span> <span class=\"n\">where</span>\n  <span class=\"n\">comm</span> <span class=\"o\">:=</span> <span class=\"n\">Point.add_comm</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  tactic 'rfl' failed, equality lhs</span>\n<span class=\"cm\">    a + b</span>\n<span class=\"cm\">  is not definitionally equal to rhs</span>\n<span class=\"cm\">    b + a</span>\n\n<span class=\"cm\">  a b : Point</span>\n<span class=\"cm\">  ⊢ a + b = b + a</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">ac_rfl</span>\n</code></pre></div>",
        "id": 435392233,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714052363
    },
    {
        "content": "<p>It looks like <code>ac_rfl</code> needs associativity to work. Also, Lean doesn't know to pick up the instance for <code>Point.add</code> if you use <code>+</code> in your example, so you'll need to phrase the instance in terms of <code>+</code>. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Point</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">a.x</span> <span class=\"bp\">+</span> <span class=\"n\">b.x</span><span class=\"o\">,</span> <span class=\"n\">a.y</span> <span class=\"bp\">+</span> <span class=\"n\">b.y</span><span class=\"o\">,</span> <span class=\"n\">a.z</span> <span class=\"bp\">+</span> <span class=\"n\">b.z</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Point</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">add_comm</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">add_assoc</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Std.Associative</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">assoc</span> <span class=\"o\">:=</span> <span class=\"n\">Point.add_assoc</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Std.Commutative</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">comm</span> <span class=\"o\">:=</span> <span class=\"n\">Point.add_comm</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ac_rfl</span>\n</code></pre></div>",
        "id": 435394724,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1714053005
    },
    {
        "content": "<p>Thanks!!</p>",
        "id": 435399949,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714054489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 435412436,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714058020
    }
]