[
    {
        "content": "<p>The following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_true</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_false</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_zero</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_false</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_zero</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>does not work. What am I missing?</p>",
        "id": 222329288,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1610386174
    },
    {
        "content": "<p>I'm missing the error message</p>",
        "id": 222330305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610386627
    },
    {
        "content": "<p>And you're probably missing <code>open term</code></p>",
        "id": 222330357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610386647
    },
    {
        "content": "<p>This fixes it!<br>\n(the error message is invalid application, function expected)<br>\nAnother question, when I list only a single option on the size function, it doesn't error. Why?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 222330933,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1610386871
    },
    {
        "content": "<p>Same reason that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">anything</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>doesn't error</p>",
        "id": 222331304,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610387021
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 222333670,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1610388038
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">factorial</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">minFac</span> <span class=\"n\">M</span><span class=\"bp\">;</span>\n  <span class=\"k\">have</span> <span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">Prime</span> <span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"o\">{</span>\n    <span class=\"n\">refine</span> <span class=\"n\">minFac_prime</span> <span class=\"n\">_</span><span class=\"o\">:</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">factorial</span> <span class=\"n\">N</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">factorial_pos</span> <span class=\"n\">N</span><span class=\"bp\">;</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n</code></pre></div>\n<p>I have an error in this part can anybody help with that</p>",
        "id": 427907371,
        "sender_full_name": "Omar Shehab",
        "timestamp": 1710934525
    },
    {
        "content": "<p>You can add <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> to make your message readable</p>",
        "id": 427908411,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710934953
    },
    {
        "content": "<p>Note: <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> is a clickable like that will tell you what people mean by \"backticks\"</p>",
        "id": 427908569,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1710935019
    },
    {
        "content": "<p>It looks like you are trying to use lean 3 syntax (which is the old deprecated version). Are you trying to use lean 3 or lean 4 (recommended)</p>",
        "id": 427908609,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1710935037
    },
    {
        "content": "<p>If you are trying to use lean 4 you should try to follow some materials from <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a></p>",
        "id": 427908746,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1710935087
    },
    {
        "content": "<p>I think one error is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.minFac_prime#doc\">docs#Nat.minFac_prime</a> proves that <code>Nat.Prime p</code>, while you said you wanted to prove <code>Prime p</code></p>",
        "id": 427908752,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710935088
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">infinitude_of_primes</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">∧</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.factorial</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">;</span>\n<span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.minFac</span> <span class=\"n\">M</span><span class=\"bp\">;</span>\n<span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"bp\">;</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_lt_succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.factorial_pos</span> <span class=\"n\">N</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n<span class=\"k\">have</span> <span class=\"n\">primeP</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.minFac_prime</span> <span class=\"n\">h1</span><span class=\"bp\">;</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.minFac_dvd</span> <span class=\"n\">M</span><span class=\"bp\">;</span>\n<span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.lt_of_not_ge</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hge</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">Nat.factorial</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">primeP.dvd_factorial</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_succ_le</span> <span class=\"n\">hge</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.dvd_sub'</span> <span class=\"n\">h2</span> <span class=\"n\">h4</span><span class=\"bp\">;</span>\n    <span class=\"n\">Nat.prime.not_dvd_one</span> <span class=\"n\">primeP</span> <span class=\"n\">h5</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">primeP</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I have edited the code so that it follows the lean4 syntax but I still get an error</p>",
        "id": 427914495,
        "sender_full_name": "Omar Shehab",
        "timestamp": 1710937199
    },
    {
        "content": "<p>The first error I see is the fact that you write a function using <code>λ x, x + 3</code>: this is Lean3 style, in Lean 4 we write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span>\n</code></pre></div>",
        "id": 427930890,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710942266
    },
    {
        "content": "<p>Also, we don't use <code>;</code> to finish a line</p>",
        "id": 427930941,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710942282
    },
    {
        "content": "<p>Is there a reason why you are not in tactic mode?</p>",
        "id": 427931107,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710942334
    }
]