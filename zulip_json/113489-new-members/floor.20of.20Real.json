[
    {
        "content": "<p>How can this be proved? My understanding is the floor returns a <code>Z</code>, still nothing works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">autoImplicit</span><span class=\"w\"> </span><span class=\"n\">false</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 443507711,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1717871147
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.floor_intCast#doc\">docs#Int.floor_intCast</a></p>",
        "id": 443507843,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717871224
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">rewrite'</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">did</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">pattern</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">expression</span>\n<span class=\"bp\">⌊↑?</span><span class=\"n\">z</span><span class=\"bp\">⌋</span>\n</code></pre></div>",
        "id": 443508318,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1717871468
    },
    {
        "content": "<p>Don't rewrite!</p>",
        "id": 443508375,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717871493
    },
    {
        "content": "<p><code>example : ⌊(3 : ℝ)⌋₊ = 3 := Int.floor_intCast 3</code></p>",
        "id": 443508403,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717871513
    },
    {
        "content": "<p><del>Unexpected, thanks.</del></p>",
        "id": 443508575,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1717871613
    },
    {
        "content": "<p>Nope, does NOT work.</p>",
        "id": 443508707,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1717871695
    },
    {
        "content": "<p>You might have to do some <code>norm_cast</code> massaging</p>",
        "id": 443508748,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717871718
    },
    {
        "content": "<p><code>example : ⌊(3 : ℝ)⌋₊ = 3 := Nat.floor_coe 3</code> is the one for natural numbers</p>",
        "id": 443513901,
        "sender_full_name": "Bbbbbbbbba",
        "timestamp": 1717874704
    },
    {
        "content": "<p>Whoops sorry I missed the <code>₊</code></p>",
        "id": 443514116,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717874902
    },
    {
        "content": "<p><code>Nat.floor_coe</code> is marked as <code>simp</code> but <code>simp?</code> \"made no progress\".</p>",
        "id": 443521762,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1717880165
    },
    {
        "content": "<p>Yeah, because this is not actually a cast, but an ofNat</p>",
        "id": 443522038,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717880414
    },
    {
        "content": "<p>And two calls deep is too much for <code>simp</code>?</p>",
        "id": 443522169,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1717880473
    },
    {
        "content": "<p>I wonder why there isn't a parallel theorem about ofNat - probably historical reasons</p>",
        "id": 443522186,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717880485
    },
    {
        "content": "<p>What do you mean by two calls?</p>",
        "id": 443522218,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717880505
    },
    {
        "content": "<p>The <code>ofNat</code> after the floor.</p>",
        "id": 443522343,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1717880562
    },
    {
        "content": "<p>Of course they are not really called.</p>",
        "id": 443522435,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1717880619
    },
    {
        "content": "<p>No, this is the missing lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">autoImplicit</span><span class=\"w\"> </span><span class=\"n\">false</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">floor_ofNat</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">LinearOrderedSemiring</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">FloorSemiring</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">AtLeastTwo</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"bp\">⌊</span><span class=\"n\">no_index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">OfNat</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_ofNat</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">floor_coe</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 443524398,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717881771
    },
    {
        "content": "<p>Feel free to PR it</p>",
        "id": 443524409,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717881778
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13645\">#13645</a></p>",
        "id": 443525313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717882313
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13647\">#13647</a> revives some related work too, though it seems to have picked up an annoying <code>CharZero</code> requirement that we didn't need in lean 3</p>",
        "id": 443531178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717887025
    },
    {
        "content": "<p>Floor/ceil doesn't really make sense in finite characteristic, so I'm happy with it</p>",
        "id": 443562990,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717914387
    },
    {
        "content": "<p>&lt;= doesn't really make much sense in finite characteristic</p>",
        "id": 443563607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717914995
    },
    {
        "content": "<p>Does LinearOrderedField imply CharZero?</p>",
        "id": 443563632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717915036
    },
    {
        "content": "<p>Yes, definitely</p>",
        "id": 443563643,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717915047
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StrictOrderedSemiring.to_charZero#doc\">docs#StrictOrderedSemiring.to_charZero</a></p>",
        "id": 443563661,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717915075
    },
    {
        "content": "<p>Maybe I was just tired and not paying attention; or optimistically, I was missing the file with that result</p>",
        "id": 443563672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717915080
    },
    {
        "content": "<p>Misnamed and kind of misplaced, but the implication exists</p>",
        "id": 443563720,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717915091
    }
]