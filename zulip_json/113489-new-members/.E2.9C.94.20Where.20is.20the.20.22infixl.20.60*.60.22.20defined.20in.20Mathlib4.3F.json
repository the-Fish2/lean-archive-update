[
    {
        "content": "<p>In Lean2, group.lean , the notion \"*\" is defined like below:<br>\n<a href=\"https://github.com/leanprover/lean2/blob/25394dddb79bc20c8adfacc060c752eb37091734/library/algebra/group.lean\">https://github.com/leanprover/lean2/blob/25394dddb79bc20c8adfacc060c752eb37091734/library/algebra/group.lean</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">has_mul</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infixl</span> <span class=\"bp\">`*`</span>   <span class=\"o\">:=</span> <span class=\"n\">has_mul.mul</span>\n</code></pre></div>\n<p>So my question is , where is \"*\" defined in Mathlib4?<br>\nI can only find the definition of Mul:<br>\nthe file path is \"/Users/chenjulang/.elan/toolchains/leanprover--lean4---v4.2.0/src/lean/Init/Prelude.lean\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- `a * b` computes the product of `a` and `b`. See `HMul`. -/</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>Where is the \"infixl <code>*</code>\" kind-of-thing writen down in Mathlib4?</p>",
        "id": 438503263,
        "sender_full_name": "chenjulang",
        "timestamp": 1715664107
    },
    {
        "content": "<p>It's in core, somewhere near the definition of <code>HMul</code></p>",
        "id": 438506995,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715666892
    },
    {
        "content": "<p>It's docs#«term_*_», in <code>Init.Notation</code>: <a href=\"https://github.com/leanprover/lean4/blob/dcccfb73cb247e9478220375ab7de03f7c67e505/src/Init/Notation.lean#L277-L277\">https://github.com/leanprover/lean4/blob/dcccfb73cb247e9478220375ab7de03f7c67e505/src/Init/Notation.lean#L277-L277</a></p>",
        "id": 438507604,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715667331
    },
    {
        "content": "<p>Another question, How can i use the notion \"*\" to simplify in here ???</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">checkBinderAnnotations</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mygroup1</span>\n\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">structure</span> <span class=\"n\">has_mul1</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">mul2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">structure</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul1</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">mul3_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">mul2</span> <span class=\"o\">(</span><span class=\"n\">mul2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">mul2</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">mul2</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n\n  <span class=\"kd\">theorem</span> <span class=\"n\">mul_assoc2</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span><span class=\"n\">has_mul1.mul2</span> <span class=\"n\">self.tohas_mul1</span> <span class=\"o\">(</span><span class=\"n\">has_mul1.mul2</span> <span class=\"n\">self.tohas_mul1</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span>\n    <span class=\"n\">has_mul1.mul2</span> <span class=\"n\">self.tohas_mul1</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">has_mul1.mul2</span> <span class=\"n\">self.tohas_mul1</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">semigroup.mul3_assoc</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">Mygroup1</span>\n</code></pre></div>",
        "id": 438507669,
        "sender_full_name": "chenjulang",
        "timestamp": 1715667371
    },
    {
        "content": "<p>I want to write everything in one file , so that it can be understood easily.</p>",
        "id": 438507926,
        "sender_full_name": "chenjulang",
        "timestamp": 1715667550
    },
    {
        "content": "<p>For new learners.</p>",
        "id": 438507947,
        "sender_full_name": "chenjulang",
        "timestamp": 1715667571
    },
    {
        "content": "<p>Take a look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Semigroup#doc\">docs#Semigroup</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">checkBinderAnnotations</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mygroup1</span>\n\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">class</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n    <span class=\"n\">mul3_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">theorem</span> <span class=\"n\">mul_assoc2</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semigroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">semigroup.mul3_assoc</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">Mygroup1</span>\n</code></pre></div>",
        "id": 438508049,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715667612
    },
    {
        "content": "<p>Thanks~~~</p>",
        "id": 438508077,
        "sender_full_name": "chenjulang",
        "timestamp": 1715667634
    },
    {
        "content": "<p>But can we use \"infixl\" instead of \"extends Mul A\" ?</p>",
        "id": 438508160,
        "sender_full_name": "chenjulang",
        "timestamp": 1715667689
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">checkBinderAnnotations</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mygroup1</span>\n\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">class</span> <span class=\"n\">has_mul1</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">mul2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n\n  <span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\" * \"</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">has_mul1.mul2</span>\n\n  <span class=\"kd\">class</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul1</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n    <span class=\"n\">mul3_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n\n  <span class=\"kd\">theorem</span> <span class=\"n\">mul_assoc2</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semigroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">semigroup.mul3_assoc</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">Mygroup1</span>\n</code></pre></div>",
        "id": 438508322,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715667795
    },
    {
        "content": "<p>I want this process to be gradual, rather than the simplest from the beginning. Beginners will not understand the underlying principles here.Thanks</p>",
        "id": 438508413,
        "sender_full_name": "chenjulang",
        "timestamp": 1715667847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 438508479,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715667896
    },
    {
        "content": "<p>Incredible!</p>",
        "id": 438508640,
        "sender_full_name": "chenjulang",
        "timestamp": 1715667972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"665035\">@chenjulang</span> did you read Chapter 7 of <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a>?</p>",
        "id": 438590269,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715697323
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Where.20is.20the.20.22infixl.20.60*.60.22.20defined.20in.20Mathlib4.3F/near/438590269\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> did you read Chapter 7 of <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a>?</p>\n</blockquote>\n<p>Oh!!! Thanks for reminding me. I read it before, but i didn't get it .</p>",
        "id": 438606565,
        "sender_full_name": "chenjulang",
        "timestamp": 1715702297
    },
    {
        "content": "<p>After doing a Rubik's Cube formalization project, I returned to learn the basics. I originally planned to start from the initial submission of lean2 and learn by rebuilding the Mathlib4 files on demand... Fortunately, you reminded me</p>",
        "id": 438607111,
        "sender_full_name": "chenjulang",
        "timestamp": 1715702468
    }
]