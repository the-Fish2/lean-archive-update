[
    {
        "content": "<p><a href=\"https://adam.math.hhu.de/#/g/hhu-adam/robo/world/SetTheory/level/5\">https://adam.math.hhu.de/#/g/hhu-adam/robo/world/SetTheory/level/5</a></p>\n<p>If you have as an assumption:<br>\nh8: ∃ x, ¬(x ∈ s → x ∈ ∅)<br>\nhow do you extract that x from the existential quantifier? I want to use that x to get contradiction with <br>\nh: ∀ (x : A), x ∉ s</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Set.eq_empty_iff_forall_not_mem</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">constructor</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"n\">tauto</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span>\n<span class=\"n\">by_contra</span> <span class=\"n\">h0</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Subset.antisymm_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h0</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">not_and_or</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h0</span>\n<span class=\"n\">cases'</span> <span class=\"n\">h0</span> <span class=\"k\">with</span> <span class=\"n\">h8</span> <span class=\"n\">h9</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">subset_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h8</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">not_forall</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h8</span>\n</code></pre></div>",
        "id": 419818969,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1707133176
    },
    {
        "content": "<p>The nice way is <code>have \\&lt;x, hx\\&gt; := h8</code>, or using <code>obtain</code> instead of <code>have</code> if you have imported Mathlib. (Or you can <code>match</code>/<code>cases</code> on <code>h8</code> as with any other inductive type.)</p>",
        "id": 419820325,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1707133680
    },
    {
        "content": "<p>Was away from Lean for a week and started to forget some stuff. How do you remember all of these guys? Do you take notes? Google search doesn't seem to be much helpful with Lean.</p>",
        "id": 419826541,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1707135648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"682831\">Yagub Aliyev</span> <a href=\"#narrow/stream/113489-new-members/topic/World.3A.20Mengenlehre/near/419826541\">said</a>:</p>\n<blockquote>\n<p>Was away from Lean for a week and started to forget some stuff. How do you remember all of these guys? Do you take notes? Google search doesn't seem to be much helpful with Lean.</p>\n</blockquote>\n<p>I use Loogle and Mathlib documentation search. And a lot of apply? and rw?</p>",
        "id": 419832028,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1707137350
    },
    {
        "content": "<p>It's not hard to learn the 30 or so common tactics in use in lean code doing standard mathematics. It takes practice but it's definitely feasible. It's much harder to learn the 100000 lemmas in mathlib but that's what <code>exact?</code> is for.</p>",
        "id": 419832722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707137586
    },
    {
        "content": "<p>I also keep a set of examples around.</p>",
        "id": 419832849,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1707137637
    },
    {
        "content": "<p>I added your solution as a sample solution with a hint at the position you got stuck, <span class=\"user-mention\" data-user-id=\"682831\">@Yagub Aliyev</span>, for future users. I see that level doesn't have barely any hints at all.</p>\n<p>I think the game introduced <code>rcases h8 with \\&lt;x, hx\\&gt;</code> to take all sorts of assumptions appart. Defacto one needs to make a choice between these options, which all do essentially the same:</p>\n<ul>\n<li><code>rcases</code></li>\n<li><code>cases'</code> (I always think of primed tactics as lean3-relicts that are just still around for convenience)</li>\n<li><code>cases</code> (multiline syntax, doesnt work in the games)</li>\n<li><code>match</code> (multiline syntax, doesnt work in the games)</li>\n<li><code>have</code>/<code>obtain</code> (another good option)</li>\n</ul>",
        "id": 421441851,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1707916355
    }
]