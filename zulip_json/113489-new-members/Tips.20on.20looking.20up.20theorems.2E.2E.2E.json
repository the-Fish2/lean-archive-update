[
    {
        "content": "<p>I am working through the mathematic in lean textbook and I am building a repertoire of theorems I know but those will often lead me to long inefficient and often ugly solution when compared to the provided solution where there is some theorem that does half the work. <br>\nI do often try to guess name of theorem after #check to find if there is something relevant, or use \"!apply?\" but my search is often in vain and inefficient. What is the best process to follow? Thanks in advance</p>",
        "id": 441850445,
        "sender_full_name": "Pietro Lavino",
        "timestamp": 1717213192
    },
    {
        "content": "<p>I think those are still limited by what you have imported/open. The search tool in the <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">doc pages</a> is helpful, and there's a thing called <a href=\"https://loogle.lean-lang.org/\">loogle</a> that a lot of people like, though I haven't explored it much.</p>",
        "id": 441851004,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717213542
    },
    {
        "content": "<p>Apparently loogle can search by type signature too (I think there's a local/CLI version as well?)</p>",
        "id": 441851109,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717213597
    },
    {
        "content": "<p>In practice a very efficient way to find theorems about X is to look up the definition of X in mathlib (don't worry if you don't understand the actual definition) and then read what happens next -- it will be a bunch of theorems about X (don't worry if you don't understand the proofs). Perhaps a less intimidating version of this algorithm is to look up the definition of X in the mathlib documentation <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">https://leanprover-community.github.io/mathlib4_docs/</a> and read what happens next.</p>",
        "id": 441867658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717225299
    },
    {
        "content": "<p>This is a main problem for me as a beginner. I found that I needed to think as broad as possible and to use all tools that are even remotely helpful. In addition to what is said above I used searching of the code (i.e., Unix <code>grep</code>), searching the whole of Zulip, asking a detailed question on stackoverflow, or give the same question to GPT-4o (which can be surprisingly helpful at times). In the end, the knowledge is in the code, so reading Mathlib is unavoidable.</p>",
        "id": 441868259,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1717225880
    },
    {
        "content": "<p>There are many places where you can ask for help or look up something, but as you just said, the only thing you can ultimately trust is the code.</p>",
        "id": 441875747,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717230795
    },
    {
        "content": "<p>moogle is also very helpful</p>",
        "id": 441911088,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1717251213
    },
    {
        "content": "<p><a href=\"https://www.moogle.ai/\">https://www.moogle.ai/</a></p>",
        "id": 441911202,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1717251264
    },
    {
        "content": "<p>And if you know something about the statement of the theorem you want, then there's loogle</p>",
        "id": 441912562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717251820
    },
    {
        "content": "<p>I gave a talk on exactly this topic at LftCM 2024 at CIRM. It was recorded and the video is here: <a href=\"https://library.cirm-math.fr/Record.htm?idlist=1&amp;record=19392446124911106289\">https://library.cirm-math.fr/Record.htm?idlist=1&amp;record=19392446124911106289</a></p>",
        "id": 441923165,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1717256971
    },
    {
        "content": "<p>Feels like this might be a good candidate for a blog post. <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> would you mind if I used your talk as a basis for one?</p>",
        "id": 441959837,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1717273936
    },
    {
        "content": "<p>That's fine.</p>",
        "id": 441960021,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1717274042
    },
    {
        "content": "<p>Just watched that talk, very well done! This should help many contributors. And very happy to see people using Loogle so expertly. In particular the way you find Binet's formula with Loogle is very much how I envisioned people to use it: don't bother getting the precise system right in the search, but just list two concepts that very likely are part of the statement (here fib and sqrt), as that often suffices.</p>\n<p>I noticed you didn't use loogle's ability to search by lemma name substring. I guess that's because moogle served you well to find how a concept is called in mathlib. It's a clever combination of the two very different searches.</p>\n<p>Having this kind of advice in a (more accessible) blog post would be great, thanks for writing that, Bolton!</p>",
        "id": 441966753,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1717277497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113489-new-members/topic/Tips.20on.20looking.20up.20theorems.2E.2E.2E/near/441966753\">said</a>:</p>\n<blockquote>\n<p>I noticed you didn't use loogle's ability to search by lemma name substring.</p>\n</blockquote>\n<p>Indeed. I expected that new users would not know what things are called, so substring searches wouldn't be that helpful. I probably should have mentioned it though.</p>",
        "id": 441967810,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1717278067
    },
    {
        "content": "<p>The document I'm walking through there is located here: <a href=\"https://github.com/riccardobrasca/LFTCM2024/blob/master/LFTCM2024%2FUsingMathlib%2FMain.lean\">https://github.com/riccardobrasca/LFTCM2024/blob/master/LFTCM2024%2FUsingMathlib%2FMain.lean</a></p>",
        "id": 441968172,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1717278194
    },
    {
        "content": "<p>Right. As we are collecting tips here: I find substring matches also helpful if I think I know the namespace, e.g. with <code>\"List.\"</code> (which is more specific than searching for the constant <code>List</code>) or <code>\"Lean\"</code></p>",
        "id": 441970935,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1717279031
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/blog/pull/75\">blog#75</a></p>",
        "id": 441999471,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1717298209
    },
    {
        "content": "<p>I would also put in the advice to search from general to specific. So if you are looking for a theorem about the logarithm,  start by searching for <code>log</code>, and then iterate only if the result list is too long, by adding one additional filter at a time or restriction, rather than searching for a very specific pattern (which can easily go wrong, due to overloading, order of parameters, etc.) and then seeing an empty result set.</p>",
        "id": 442023403,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1717317019
    },
    {
        "content": "<p>Another loogle trick is </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">|-</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to search only for lemmas and</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">|-</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to search only for data definitions (from <a href=\"https://github.com/nomeata/loogle/issues/9\">https://github.com/nomeata/loogle/issues/9</a>).</p>",
        "id": 442023496,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1717317093
    }
]