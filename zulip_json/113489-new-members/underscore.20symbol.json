[
    {
        "content": "<p>Quick question: Is the underscore symbol <code>_</code> ever used anywhere other than the LHS of a relation statement?</p>\n<p>And following on from that, does it \"unify\" only with the RHS of the most recent statement parsed? </p>\n<p>(I can't find documentation describing what it does)</p>",
        "id": 444899310,
        "sender_full_name": "rzeta0",
        "timestamp": 1718479251
    },
    {
        "content": "<p>Yes, it is generally a placeholder to be filled in by unification, eg</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">37</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">37</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 444902539,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1718481165
    },
    {
        "content": "<p>That example is too advanced for me :) </p>\n<p>Why does the <code>_</code> in <code>example : 37 = 37 := foo _</code> unify with?</p>",
        "id": 444908401,
        "sender_full_name": "rzeta0",
        "timestamp": 1718484701
    },
    {
        "content": "<p><code>foo _</code> is <code>foo ?m</code> for a fresh metavariable <code>?m</code>. The type of <code>foo ?m</code> is <code>?m = ?m</code>. This gets unified with <code>37 = 37</code>, and the solution is <code>?m := 37</code>. So, <code>foo _</code> ends up being <code>foo 37</code>.</p>",
        "id": 444908869,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718484860
    },
    {
        "content": "<p>A \"metavariable\" is a hole in an expression that needs to be filled in at some point, and one of the side effects of unification is assigning expressions to metavariables. Unification is a general idea, and if you see \"<code>isDefEq</code>\" that's Lean's algorithm for both checking that two expressions are defeq and for trying to <em>make</em> them defeq by assigning to metavariables as necessary.</p>",
        "id": 444909793,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718485131
    }
]