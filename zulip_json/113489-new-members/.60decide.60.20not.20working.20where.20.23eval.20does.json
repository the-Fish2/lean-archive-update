[
    {
        "content": "<p>The <code>#eval</code> below works but the <code>decide</code> below the <code>#eval</code> does not. How can I prove the theorem <code>dec</code> succinctly?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.Catalan</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Step</span>\n  <span class=\"bp\">|</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Step</span>\n  <span class=\"bp\">|</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Step</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">DyckPath</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Step</span> <span class=\"n\">deriving</span> <span class=\"n\">Append</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">DyckPath</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Step</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">DyckPath</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsBalanced</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">DyckPath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">p.count</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">p.count</span> <span class=\"n\">D</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p.take</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">D</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">p.take</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">U</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsBalanced'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">DyckPath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">p.count</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">p.count</span> <span class=\"n\">D</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p.length</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p.take</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">D</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">p.take</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">U</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isBalanced_iff_isBalanced'</span> <span class=\"o\">:</span> <span class=\"n\">p.IsBalanced</span> <span class=\"bp\">↔</span> <span class=\"n\">p.IsBalanced'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"n\">IsBalanced</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">isBalanced_iff_isBalanced'</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">And.decidable</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">IsBalanced</span> <span class=\"o\">[</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"c1\">-- true</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">dec</span> <span class=\"o\">:</span> <span class=\"n\">IsBalanced</span> <span class=\"o\">[</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">DyckPath</span>\n</code></pre></div>",
        "id": 413090331,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705387619
    },
    {
        "content": "<p>The rewrite was creating a term that made Lean fail to reduce the instance. Here's a fix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"n\">IsBalanced</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span>\n  <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∧</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">isBalanced_iff_isBalanced'.symm</span>\n</code></pre></div>",
        "id": 413093298,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705389434
    },
    {
        "content": "<p>I used this to diagnose it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">dec</span> <span class=\"o\">:</span> <span class=\"n\">IsBalanced</span> <span class=\"o\">[</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">decide_eq_true_iff</span> <span class=\"o\">(</span><span class=\"n\">IsBalanced</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n  <span class=\"n\">reduce</span>\n  <span class=\"c1\">-- ⊢ Decidable.rec (fun h ↦ false) (fun h ↦ true) (_ ▸ isTrue _) = true</span>\n</code></pre></div>\n<p>Notice the <code>isTrue</code> -- that means the instance basically was reducible, but there was an <code>Eq.rec</code> (the <code>▸</code>) keeping the <code>Decidable.rec</code> from fully reducing.</p>",
        "id": 413093638,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705389605
    },
    {
        "content": "<p>The above code has been expanded into <a href=\"https://github.com/leanprover-community/mathlib4/pull/9781\">#9781</a></p>",
        "id": 413149268,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705410220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.60decide.60.20not.20working.20where.20.23eval.20does/near/413093298\">said</a>:</p>\n<blockquote>\n<p>The rewrite was creating a term that made Lean fail to reduce the instance. Here's a fix:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"n\">IsBalanced</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span>\n  <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∧</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">isBalanced_iff_isBalanced'.symm</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I've never understood - why does this block reduction? Because of <code>propext</code>?</p>",
        "id": 415977116,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1705480935
    }
]