[
    {
        "content": "<p><a href=\"https://adam.math.hhu.de/#/g/hhu-adam/robo/world/Function/level/2\">https://adam.math.hhu.de/#/g/hhu-adam/robo/world/Function/level/2</a></p>\n<p>It seems that whatever you put instead of g, you always have the same g(x+4)=x+1 in the goal. Why? And what is <code>_root_.f</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n<span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n<span class=\"n\">use</span> <span class=\"n\">g</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">comp_apply</span><span class=\"o\">]</span>\n<span class=\"n\">unfold</span> <span class=\"n\">_root_.f</span>\n</code></pre></div>",
        "id": 420219608,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1707301280
    },
    {
        "content": "<p>I suppose <code>f</code> is given in the left hand column:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 420220282,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707301556
    },
    {
        "content": "<p>So, this doesn't appear in the assumptions but somehow it is an assumption? Interesting! I completed, thank you.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n<span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span>\n<span class=\"n\">use</span> <span class=\"n\">g</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">comp_apply</span><span class=\"o\">]</span>\n<span class=\"n\">unfold</span> <span class=\"n\">_root_.f</span>\n<span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 420221874,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1707302126
    },
    {
        "content": "<p>Still don't know what is <code>_root_.f</code></p>",
        "id": 420222047,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1707302176
    },
    {
        "content": "<p>Where did it come from?</p>",
        "id": 420222122,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707302205
    },
    {
        "content": "<p>I suppose in my first attempt there were two <code>f</code> functions and therefore Lean tried to distinguish them. It kept working after I erased unnecessary <code>f</code> from the code. It appeared after <code>rw[comp_apply]</code>in the previous attempt.</p>",
        "id": 420222871,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1707302451
    },
    {
        "content": "<p>Ah, I see what happened. Yeah, lean was disambiguating between the <code>f</code> that the game defines and the one you introduced</p>",
        "id": 420223433,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707302604
    }
]