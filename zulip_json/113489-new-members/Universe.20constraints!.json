[
    {
        "content": "<p>I am struggling to understand what's going on here, or in general what's going on in the category theory files. I see a lot of universes labelled manually, sometimes some are equal, but an explanation would be great.. Here is the code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib.Algebra.Category.Grp.Colimits</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"w\"> </span><span class=\"n\">Limits</span>\n\n<span class=\"kd\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">AddCommGrp</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"n\">AddSubgroup</span>\n\n<span class=\"c1\">-- I need this cuz .mk' gives a →+ and type checker doesn't like it in place of ⟶</span>\n<span class=\"n\">abbrev</span><span class=\"w\"> </span><span class=\"n\">cocone_quotient_map</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">AddCommGrp.of</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"bp\">⧸</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">QuotientAddGroup.mk'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">AddMonoidHom.range</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- Define the cocone over parallelPair f g</span>\n<span class=\"kd\">noncomputable</span><span class=\"w\"> </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">cocone_coequalizer</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Cocone</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">parallelPair</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">pt</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">AddCommGrp.of</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"bp\">⧸</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">ι</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">    </span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">≫</span><span class=\"w\"> </span><span class=\"n\">cocone_quotient_map</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">cocone_quotient_map</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span>\n<span class=\"w\">    </span><span class=\"n\">naturality</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 447728139,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1719570431
    },
    {
        "content": "<p>For \"I see a lot of universes labelled manually\" I am thinking of <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Algebra/Category/Grp/Colimits.lean#L267-L271\">these 5 lines</a>, and also the <code>HasColimitsOfSize</code> <code>HasColimits</code> <code>HasColimitsOfShape</code> stuff</p>",
        "id": 447728216,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1719570471
    },
    {
        "content": "<p>Error is simple but undecipherable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">▶</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">17</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"bp\">-</span><span class=\"mi\">19</span><span class=\"o\">:</span><span class=\"mi\">40</span><span class=\"o\">)</span>\n<span class=\"n\">G</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">AddCommGrp</span>\n<span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">H</span>\n<span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">WalkingParallelPair</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">parallelPair</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">⟶</span>\n<span class=\"w\">    </span><span class=\"o\">((</span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">const</span><span class=\"w\"> </span><span class=\"n\">WalkingParallelPair</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">AddCommGrp</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"bp\">⧸</span><span class=\"w\"> </span><span class=\"n\">AddMonoidHom</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">))))</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"n\">X</span>\n\n<span class=\"bp\">▶</span><span class=\"w\"> </span><span class=\"mi\">19</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"bp\">-</span><span class=\"mi\">19</span><span class=\"o\">:</span><span class=\"mi\">40</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">stuck</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">solving</span><span class=\"w\"> </span><span class=\"kn\">universe</span><span class=\"w\"> </span><span class=\"n\">constraint</span>\n<span class=\"w\">  </span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">4135</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">4136</span><span class=\"w\"> </span><span class=\"bp\">=?=</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">3195</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">3826</span>\n<span class=\"n\">while</span><span class=\"w\"> </span><span class=\"n\">trying</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">unify</span>\n<span class=\"w\">  </span><span class=\"n\">Quiver</span><span class=\"bp\">.</span><span class=\"n\">Hom</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">4136</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">4135</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">4136</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">4135</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">4136</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">4135</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"n\">Quiver</span><span class=\"bp\">.</span><span class=\"n\">Hom</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">3826</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">3195</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">3826</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">3195</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">3826</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">3195</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 447729129,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1719570772
    },
    {
        "content": "<p>Update: Modifying <code>G H</code> by adding universe constraints manually fixes the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span><span class=\"w\"> </span><span class=\"n\">u</span>\n<span class=\"kd\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">AddCommGrp</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, this doesn't answer any questions. In fact I have more questions now, since <code>G</code> and <code>H</code> have to be of the same universe for the type check to work at all (objects in a category have to be in the same universe), so why is this <code>.{u}</code> needed</p>",
        "id": 447737054,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1719573136
    },
    {
        "content": "<p>Unifying level (universe) metavariables is fairly conservative currently and without specifying some universes explicitly you tend to have a lot of level metavariables floating around in the context. While a person can say \"oh that's the solution I want\", the code can't immediately jump to that case without ignoring other possibly valid solutions at a cost</p>",
        "id": 447738065,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719573400
    },
    {
        "content": "<p>Hmm so here Lean is just not trying hard enough to unify level/universes metavraiables? Does it mean I should try to add universe variables manually whenever I can (in category theory I guess)</p>",
        "id": 447741598,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1719574357
    },
    {
        "content": "<p>Clearly <code>max ?u.4135 ?u.4136 =?= max ?u.3195 ?u.3826</code> has got lots of solutions, I don't think it's a case of not trying hard enough, Lean can't read your mind. If you know which of those universes you want to be equal you're going to have to tell Lean explicitly, surely?</p>",
        "id": 447987696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719674370
    },
    {
        "content": "<p>Maybe this is closer to what to universes not trying hard enough</p>\n<p><a href=\"/user_uploads/3121/-CTDwp5vBhszxyeuZjo1fHYp/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-CTDwp5vBhszxyeuZjo1fHYp/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/-CTDwp5vBhszxyeuZjo1fHYp/image.png\"></a></div>",
        "id": 448046426,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1719703375
    },
    {
        "content": "<p><a href=\"https://gist.github.com/grhkm21/231f9bfcac11b7d9a57f985e957e49cd\">https://gist.github.com/grhkm21/231f9bfcac11b7d9a57f985e957e49cd</a> MRE (Maximal Reproducible Example)<br>\nJust load and scroll down</p>",
        "id": 448046610,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1719703438
    },
    {
        "content": "<p>It seems that it is solved by replacing <code>(J : Type)</code> by <code>(J : Type v_1)</code>. But then I realised <code>(R : Type v_1)</code> as well so now I need to use <code>(J : Type v_2)</code> :/</p>",
        "id": 448048340,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1719704157
    },
    {
        "content": "<p>\\- and that leads to another issue(ss), because of some category theory stuff (see TODO in FGModuleCat file)</p>",
        "id": 448049266,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1719704993
    }
]