[
    {
        "content": "<p>Hi the following exercise in category theory:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Types</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Yoneda</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Pullbacks</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.FiniteLimits</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Diagonal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Types</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Yoneda</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Presheaf</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">Category</span>\n<span class=\"kn\">open</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">LargeCategory</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasFiniteLimits</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">yoneda.obj</span> <span class=\"o\">(</span><span class=\"n\">pullback.diagonalObj</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"c1\">-- : Type u</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">yoneda.obj</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">yoneda.obj</span> <span class=\"n\">Z</span><span class=\"o\">)</span>  <span class=\"c1\">-- : Type (u+1)</span>\n<span class=\"k\">#check</span> <span class=\"n\">yoneda.map</span> <span class=\"n\">g</span>\n\n<span class=\"c1\">-- set_option trace.Meta.synthInstance true in</span>\n<span class=\"c1\">-- #synth (HasFiniteLimits (Cᵒᵖ ⥤ Type u))</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">pullback.diagonal</span> <span class=\"o\">(</span><span class=\"n\">yoneda.map</span> <span class=\"n\">g</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>gives an error like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">u</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"bp\">?</span><span class=\"n\">u.10680</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"bp\">?</span><span class=\"n\">u.10679</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"k\">with</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"bp\">?</span><span class=\"n\">u.10680</span><span class=\"o\">)),</span> <span class=\"n\">Small.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"bp\">?</span><span class=\"n\">u.10680</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"bp\">?</span><span class=\"n\">u.10680</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"bp\">?</span><span class=\"n\">u.10680</span><span class=\"o\">)),</span> <span class=\"n\">Small.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"bp\">?</span><span class=\"n\">u.10680</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"bp\">?</span><span class=\"n\">u.10680</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>in the last line? any idea for this?</p>",
        "id": 437286976,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715009484
    },
    {
        "content": "<p>I read some discussion in <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233463.20universe.20constraint.20issues\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/!4.233463.20universe.20constraint.20issues</a>  and <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/TypeMax.html#TypeMax\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/TypeMax.html#TypeMax</a> But still no idea why it happened</p>",
        "id": 437287166,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715009541
    },
    {
        "content": "<p>On my computer, I do not get any error...</p>",
        "id": 437308446,
        "sender_full_name": "Joël Riou",
        "timestamp": 1715017092
    },
    {
        "content": "<p>Universe constraint solving has changed a bit in Lean 4.8.0-rc1. Are you on a mathlib more recent than May 2?</p>",
        "id": 437321764,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715022478
    },
    {
        "content": "<p>I am in windows 10, Lean 4.6.0-rc1 and commit 0a4873b of MIL (I am doing some extra exercises my local copy of MIL)</p>",
        "id": 437364355,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715046933
    },
    {
        "content": "<p>Glad to hear that it works somewhere <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span> I am updating my local toolchain and fetching the last update of MIL user repo to see if it resolved in my environment or not</p>",
        "id": 437364531,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715047063
    },
    {
        "content": "<p>It works now <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>(Now I am in 4.8.0-rc1 with latest MIL) it’s also possible that I changed the local mathlib copy accidentally, when I run <code>lake exec cache get</code> there’s a message saying some files are not downloaded. After running <code>git pull</code> and deleting the directories <code>.lake</code> and <code>lake-package</code> and run <code>lake exec cache get</code> it reports no error now</p>",
        "id": 437366389,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715048391
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/7hWcApaumaMHax7CrA5a9rVO/328DA930-68AA-4FEE-AFFB-9201E13F0586.jpg\">328DA930-68AA-4FEE-AFFB-9201E13F0586.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7hWcApaumaMHax7CrA5a9rVO/328DA930-68AA-4FEE-AFFB-9201E13F0586.jpg\" title=\"328DA930-68AA-4FEE-AFFB-9201E13F0586.jpg\"><img src=\"/user_uploads/3121/7hWcApaumaMHax7CrA5a9rVO/328DA930-68AA-4FEE-AFFB-9201E13F0586.jpg\"></a></div>",
        "id": 437366445,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715048404
    },
    {
        "content": "<p>Thank you for the kindly help <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 437366624,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715048546
    },
    {
        "content": "<p>Hi,</p>\n<p>I am having  similar problem. I just updated with elan to v4.8 but I'm still getting the error so I probably need to specify the universe levels manually somehow. </p>\n<p>I'm building an inductive type for mathematical relations. I want to allow the domain and codomain of the relation to originate in different type universes, but since relations are reversible (converse) I may need to lift both types to the max of the two universes. I'm not sure how to do this. </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">Relation</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">Dom</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Cod</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"c1\">-- universe error occurs in the `first` constructor</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Relation</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">α</span>\n</code></pre></div>\n<p><a href=\"https://github.com/AviCraimer/lean-math-logic-exploration/blob/refactoring-type-universes/LeanMathLogicExploration/RelationalAlgebra.lean\">Full code here</a></p>\n<p>Error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">stuck</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">solving</span><span class=\"w\"> </span><span class=\"kn\">universe</span><span class=\"w\"> </span><span class=\"n\">constraint</span>\n<span class=\"w\">  </span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">176</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">177</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=?=</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">176</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">177</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">242</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">while</span><span class=\"w\"> </span><span class=\"n\">trying</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">unify</span>\n<span class=\"w\">  </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">177</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">176</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">177</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">176</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">176</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">177</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">242</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">176</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">177</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">242</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">242</span>\n</code></pre></div>",
        "id": 443815404,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1718038050
    },
    {
        "content": "<p>Hi maybe extracting a <a href=\"https://leanprover-community.github.io/mwe.html\">#MWE</a> here would help?</p>",
        "id": 443902387,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1718073196
    },
    {
        "content": "<p>Not directly relevant, but in the full code you linked you have <code>import MathLib.Tactic</code> instead of <code>import Mathlib.Tactic</code>, and I think the former only works on case-insensitive file systems (as I learned when I myself tried to make my first mwe)</p>",
        "id": 443904120,
        "sender_full_name": "Bbbbbbbbba",
        "timestamp": 1718074561
    },
    {
        "content": "<p>So the thing is that <code>first</code> only makes sense when the <code>Dom</code> is in a higher universe than <code>Cod</code>, right?</p>",
        "id": 443904783,
        "sender_full_name": "Bbbbbbbbba",
        "timestamp": 1718074999
    },
    {
        "content": "<p>Ok, I got it working now. So I think that Dom and Cod have to be in the same type universe since .converse switches the order. </p>\n<p>Here is the working code. <br>\n<a href=\"https://github.com/AviCraimer/lean-math-logic-exploration/blob/main/LeanMathLogicExploration/RelationalAlgebra.lean\">https://github.com/AviCraimer/lean-math-logic-exploration/blob/main/LeanMathLogicExploration/RelationalAlgebra.lean</a></p>\n<p>The main thing I learned was how to lift the type universe to make certain relations where the Cod and Dom start out in different universes. </p>\n<p>For example, a relation that represents the evaluation function (i.e., it maps a relation expression to its set of Pairs). </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Relation</span><span class=\"bp\">.</span><span class=\"n\">evalRel</span><span class=\"w\">  </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Relation</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Relation</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">PLift</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Relation</span><span class=\"bp\">.</span><span class=\"n\">Pairs</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\">  </span><span class=\"n\">β</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">atomic</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"n\">Relation</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">PLift</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Pairs</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">evaluatedR</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">PLift</span><span class=\"bp\">.</span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Relation</span><span class=\"bp\">.</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">evaluatedR</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">f</span>\n</code></pre></div>\n<p>I needed to use PLift here so that it would type check.  I suppose this could be automated somehow.</p>",
        "id": 443906280,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1718076007
    }
]