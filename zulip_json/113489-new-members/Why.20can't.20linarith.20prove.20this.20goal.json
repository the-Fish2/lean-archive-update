[
    {
        "content": "<p>Why can't linarith prove this goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 422525609,
        "sender_full_name": "Timothy Mou",
        "timestamp": 1708476419
    },
    {
        "content": "<p>What tactic should I use for linear integer arithmetic?</p>",
        "id": 422526021,
        "sender_full_name": "Timothy Mou",
        "timestamp": 1708476741
    },
    {
        "content": "<p>Another option is <code>omega</code></p>",
        "id": 422526107,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708476824
    },
    {
        "content": "<p>Thanks. It's a bit hard to search for this stuff, and I incorrectly assumed <code>linarith</code> was the analogue of Coq's <code>lia</code></p>",
        "id": 422526738,
        "sender_full_name": "Timothy Mou",
        "timestamp": 1708477297
    },
    {
        "content": "<p>I would think <code>linarith</code>should do this also.</p>",
        "id": 422527539,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708477891
    },
    {
        "content": "<p><code>omega</code> seems (is?) much more recent so documentation needs to catch up</p>",
        "id": 422527631,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708477939
    },
    {
        "content": "<p>though <code>linarith</code> doesn't know about the fact that there are no natural numbers between <code>n</code> and <code>n + 1</code></p>",
        "id": 422529215,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708479295
    },
    {
        "content": "<p>Kyle, this isn’t the issue. There are two completely independent issues. First <code>linarith</code> doesn’t do <code>intro</code>, this is simply not its job. And, for performance reasons, it doesn’t split not equal assumptions into two inequalities cases (since this could lead to a huge number of cases). So you can get a proof with:</p>",
        "id": 422533114,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708482607
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">splitNe</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span>\n</code></pre></div>",
        "id": 422533155,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708482655
    },
    {
        "content": "<p>To be honest I was never really convinced by the argument in favor of the <code>splitNe := false</code> default.</p>",
        "id": 422533199,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708482715
    },
    {
        "content": "<p>And I think the way <code>linarith</code> “knows” there is no natural number between <code>n</code> and <code>n+1</code> is simply by preprocessing the inequality <code>i &lt; n</code> into <code>i + 1 ≤ n</code>.</p>",
        "id": 422533356,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708482854
    }
]