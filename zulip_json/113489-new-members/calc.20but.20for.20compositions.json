[
    {
        "content": "<p>Is there something analogous to <code>calc</code> but for compositions, that would make the following (broken) code work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>        <span class=\"c1\">-- invalid 'calc' step, relation expected A → B</span>\n    <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">example</span>\n    <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n    <span class=\"n\">_</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n</code></pre></div>",
        "id": 411090831,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704320237
    },
    {
        "content": "<p>The first one should work already! The second one is a bit broken right now IIRC but is meant to be in scope for <code>calc</code>.</p>",
        "id": 411092391,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704321196
    },
    {
        "content": "<p>I edited it to add the error message for the first one as a comment</p>",
        "id": 411092550,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704321308
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6509\">#6509</a> contains a recipe for how to make the second one work</p>",
        "id": 411092575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704321329
    },
    {
        "content": "<p>ah, great</p>",
        "id": 411092598,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704321354
    },
    {
        "content": "<p>The first came up before, <a href=\"#narrow/stream/287929-mathlib4/topic/calc.20mode.20for.20types/near/383739924\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/calc.20mode.20for.20types/near/383739924</a>, but I'm not sure if it was ever reported upstream <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 411092668,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704321383
    },
    {
        "content": "<p>Nope, I never did file an issue for that</p>",
        "id": 411092890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704321532
    }
]