[
    {
        "content": "<p>Dear Lean Experts,</p>\n<p>Hi.  I have a strong background in logic and theoretical computer science,<br>\nbut I am new to Lean.  I have been going through the Natural Number Game<br>\nand I have some questions.  In particular I am here:<br>\n<a href=\"https://adam.math.hhu.de/#/g/leanprover-community/nng4/world/Multiplication/level/3\">https://adam.math.hhu.de/#/g/leanprover-community/nng4/world/Multiplication/level/3</a>,<br>\ni.e., level 3 out of 9 in the Multiplication World.</p>\n<p>Our goal is to prove succ_mul which I write as ‚àÄa b:N (succ a) * b = a * b + b)</p>\n<p>Lean writes   Goal: succ a * b = a*b + b</p>\n<p>Now we already know the following two facts:</p>\n<p>mul_succ: ‚àÄx y:N (x * succ y = x * y + x)<br>\nmul_comm: ‚àÄx y:N (x * y = y * x)</p>\n<p>So it seems to me that this should be pretty straight forward.<br>\nThe first thing I tried was \"rw [mul_comm]\"   As I understand it,<br>\nthis means match the first occurrence of x * y and replace it with y * x, right?</p>\n<p>So this should have let x be succ a and y be b and thus the new<br>\nGoal would be b * succ a = a*b + b.</p>\n<p>However Lean said no, this tactic failed.  Why?</p>\n<p>Furthermore, if it couldn't match x * y with succ a * b, then<br>\nsurely it should have been able to match x * y with a*b.  Why didn't<br>\nit do that.</p>\n<p>What am I missing?  Is there something I can read about how Lean chooses<br>\nto unify terms to do its substitutions?</p>\n<p>Thanks for your help.</p>\n<p>Best,<br>\n-- Neil</p>",
        "id": 426398184,
        "sender_full_name": "Neil Immerman",
        "timestamp": 1710352767
    },
    {
        "content": "<p>Could be a bug!</p>\n<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> </p>\n<p>I don't have mul_comm by that level, but if I unlock it I wind up with the mul_comm from <code>Mathlib.Algebra.Group</code> and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">CommMagma</span> <span class=\"n\">‚Ñï</span>\n</code></pre></div>\n<p>if I try MyNat.mul_comm, then I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">MyNat.mul_comm'</span>\n</code></pre></div>\n<p>So I think there's something wrong with NNG4.</p>",
        "id": 426403588,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1710354756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"700769\">Neil Immerman</span> <a href=\"#narrow/stream/113489-new-members/topic/help.20for.20Lean.20beginners.20in.20natural.20number.20game/near/426398184\">said</a>:</p>\n<blockquote>\n<p>As I understand it,<br>\nthis means match the first occurrence of x * y and replace it with y * x, right?</p>\n<p>So this should have let x be succ a and y be b and thus the new<br>\nGoal would be b * succ a = a*b + b.</p>\n</blockquote>\n<p>That's mostly right. This is what I get if I do this outside NNG4.</p>\n<p>Instead of the first occurrence <code>rw</code> will actually replace every occurrence. Though perhaps a bit confusingly, if <code>rw</code> gets a proof like <code>b ‚Üí c = d</code>, it will try to infer a value for <code>b</code>, <strong>then</strong> replace every occurrence of <code>c</code> with <code>d</code>. </p>\n<p>In this case, either <code>rw [mul_comm (succ a) b]</code> or <code>rw [mul_comm a b]</code> would have worked, but lean chooses the first one. In either case, it would have re-written every occurrence if there were more than one.</p>",
        "id": 426405167,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1710355329
    },
    {
        "content": "<p>Dear Neil, nice seeing you here! I am reading your book at the moment.</p>",
        "id": 426414665,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1710359007
    },
    {
        "content": "<p>I agree with <span class=\"user-mention silent\" data-user-id=\"664276\">Treq</span>'s diagnosis. Something is up with NNG here.</p>",
        "id": 426414894,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1710359095
    },
    {
        "content": "<p>Here's my 30sec diagnosis from my phone so that might be wrong. I'll look at it tomorrow in details.</p>\n<p>If I play around a bit with <code>mul_comm</code> I get</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to synthesize instance CommMagma ‚Ñï\n</code></pre></div>\n<p>which makes me believe that <code>mul_comm</code> is in fact some statement from mathlib and not <code>MyNat.mul_comm</code> (note that <code>‚Ñï</code> means <code>MyNat</code> in the nng and not lean's <code>Nat</code>). And since the game uses <code>MyNat</code> instead of <code>Nat</code> it fails to find some some instances to use this <code>mul_comm</code> which applies to an arbitrary (comm.) magma.</p>\n<p>I'll see if the NNG needs to be tweaked somehow to not import this <code>mul_comm</code> there, alternatively it might need to either add some instances to <code>MyNat</code> or disable the theorem until <code>MyNat.mul_comm</code> is defined and takes higher priority.</p>\n<p>Btw Neil, some <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> make your message much more readable<span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 426444117,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1710373094
    },
    {
        "content": "<p>(oh and I didnt read Treq's message at allü§¶üèª‚Äç‚ôÇÔ∏è<span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>)</p>",
        "id": 426444344,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1710373288
    },
    {
        "content": "<p>I am a bit confused about Neil's claim that we \"already know <code>mul_comm</code>\" -- that theorem is level 4 and you're on level 3. So sure something's wrong but it doesn't surprise me at all that you can't get <code>mul_comm</code> to work; in some sense that should be a reasonable explanation of what's wrong. The issue is that the error message is bad.</p>",
        "id": 426448863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710376995
    },
    {
        "content": "<p>Indeed, Im just a bit afraid that we might not be able to get rid of mathlibs <code>mul_comm</code> because it's not in any namespace but probably imported by some low-level tactic we're using.</p>",
        "id": 426484482,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1710401890
    },
    {
        "content": "<p>I guess this adds more weight to the idea that mathlib stuff should be put in a mathlib namespace</p>",
        "id": 426488569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710404063
    },
    {
        "content": "<p>I now pushed the updated game where we just removed a lot of mathlib tactics to avoid importing <code>Mathlib.Algebra.Group.Defs</code>.</p>\n<p>That means now it should rather say \"unknown identifier mul_comm\" (or the obstruse <code>rw</code>-error message if one tries <code>rw [nonexisting]</code>)</p>\n<p>I haven't tested it completely, so lets see if anybody finds a tactic that's now missing or missfunctional because it was modified in mathlib...</p>",
        "id": 426587454,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1710435788
    },
    {
        "content": "<p>Oh wow, I had not realised that my cavalier attitude of <code>import tactic</code> was the root cause of the problems! Many thanks!</p>",
        "id": 426650803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710461288
    },
    {
        "content": "<p>Did you deploy? (I don't know how to tell). I'll find the time to play through the game after I've got this pile of marking off my desk</p>",
        "id": 426650907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710461363
    },
    {
        "content": "<p>Yes I deployed (there's no good way for you to tell yet, but I guess redeploying is also not hurtfull)</p>\n<p>well that works until you decide that it would be good to reintroduce <code>ring</code> to the game. Then we'd need to think about something different</p>",
        "id": 426693802,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1710491031
    },
    {
        "content": "<p>If <code>ring</code> causes more problems than it solves then I'm happy to leave it out.</p>",
        "id": 426702002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710494229
    }
]