[
    {
        "content": "<p>I have in mind that <code>p → q</code> is shorthand for <code>¬p ∨ q</code> in which case <code>p → p</code> is really <code>p ∨ ¬p</code> which is <code>em</code>.  Is that correct, or am I missing a subtlety?</p>",
        "id": 410764484,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1704148099
    },
    {
        "content": "<p>In systems based on type theory, function types such as <code>p → q</code> are fundamental. The honest answer to your question is \"no\". One could write quite a long essay on this, but perhaps here is not the place (and certainly I'm not the right person). Such essays must already exist, if you can find some introductory material on type theory in logic.</p>",
        "id": 410764947,
        "sender_full_name": "Richard Copley",
        "timestamp": 1704148426
    },
    {
        "content": "<p>Another way of explaining your remark: your use of the word \"shorthand\" or \"is really\" is a) not the \"definitional equality\" meaning of \"is\" that type theory cares about and b) invoking <code>em</code> to justify the equality</p>",
        "id": 410765176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704148601
    },
    {
        "content": "<p>I am looking at this exercise, which should not require <code>Classical</code>, but where I need to show <code>p → p</code> to finish it.  Based on my old understanding that <code>p → p</code> was shorthand for <code>¬p ∨ p </code>, I was unsure what to do next.   I am unsure whether (intuitonistic?) type theory gives me <code>p → p</code> as an axiom or otherwise without resorting to <code>open Classical</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">fwd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>  <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hpf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">hpf1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- em?</span>\n      <span class=\"n\">Or.elim</span> <span class=\"n\">hpf</span> <span class=\"n\">hpf1</span> <span class=\"n\">False.elim</span>\n  <span class=\"n\">Iff.intro</span> <span class=\"n\">fwd</span> <span class=\"n\">Or.inl</span>\n</code></pre></div>",
        "id": 410766876,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1704150206
    },
    {
        "content": "<p>Maybe it helps to think how you would \"prove\" <code>Nat → Nat</code></p>",
        "id": 410766919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704150240
    },
    {
        "content": "<p>Implications are just functions, so a proof of <code>p implies q</code> is just a function that takes a proof of <code>p</code> and returns a proof of <code>q</code></p>",
        "id": 410767134,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704150444
    },
    {
        "content": "<p>OK</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">pp</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">hp</span>\n</code></pre></div>",
        "id": 410767135,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1704150452
    },
    {
        "content": "<p>Looks good! <code>id</code> should work as well</p>",
        "id": 410767212,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704150538
    },
    {
        "content": "<p>Of course</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hp</span>\n  <span class=\"k\">have</span> <span class=\"n\">fwd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>  <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hpf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Or.elim</span> <span class=\"n\">hpf</span> <span class=\"n\">pp</span> <span class=\"n\">False.elim</span>\n  <span class=\"n\">Iff.intro</span> <span class=\"n\">fwd</span> <span class=\"n\">Or.inl</span>\n</code></pre></div>\n<p>then remembering <code>id</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">fwd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>  <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hpf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Or.elim</span> <span class=\"n\">hpf</span> <span class=\"n\">id</span> <span class=\"n\">False.elim</span>\n  <span class=\"n\">Iff.intro</span> <span class=\"n\">fwd</span> <span class=\"n\">Or.inl</span>\n</code></pre></div>\n<p>Trying to figure out what is classical and what isn't puts me in deer-in-the-headlights state sometimes.</p>",
        "id": 410767340,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1704150709
    },
    {
        "content": "<p>I should really port <code>itauto</code>...</p>",
        "id": 410767483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704150850
    },
    {
        "content": "<p>How usable will <a href=\"https://github.com/leanprover-community/mathlib3port/blob/4e6c8360770e7f9aba55a7c32040065de4f9d823/Mathbin/Tactic/Itauto.lean\">https://github.com/leanprover-community/mathlib3port/blob/4e6c8360770e7f9aba55a7c32040065de4f9d823/Mathbin/Tactic/Itauto.lean</a> be?</p>",
        "id": 410768087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704151605
    },
    {
        "content": "<p>what do you mean? It was designed for the kind of problems lars is asking</p>",
        "id": 410768484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704152106
    },
    {
        "content": "<p>in particular, it generates really nice proofs that can be viewed in <code>#explode</code>, a property definitely not shared with <code>tauto</code>, <code>simp</code>, <code>decide</code> or other similar ways of proving this</p>",
        "id": 410768511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704152163
    },
    {
        "content": "<p>well, <code>simp</code> will create okayish proofs but mainly because all of these things are already theorems</p>",
        "id": 410768565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704152205
    },
    {
        "content": "<p>and it will also wrap it in a bunch of junk with <code>congrFun</code> and <code>iff_true</code> and <code>propext</code></p>",
        "id": 410768584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704152239
    },
    {
        "content": "<p>Oh I realize now that you are asking whether the mathlib3port output will be useful for doing the port, and the answer is that it is rarely all that useful for meta code, in part because we didn't set up even basic mappings like <code>expr -&gt; Lean.Expr</code>. But it's possible to read the code and manually translate without too much difficulty</p>",
        "id": 410768784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704152431
    },
    {
        "content": "<p>Actually it's not that bad, because unlike many tactics <code>itauto</code> is 90% pure code, one could even prove the core function correct if desired, and only the reification part needs a rewrite</p>",
        "id": 410769026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704152655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span> instead of writing a long essay, would be possible to prove, in the absence of <code>open Classical</code>, that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">pp_isnt_em</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>or is there something meta about this that eludes proof?  Or is it hard to phrase and I haven't phrased it correctly with <code>pp_isnt_em</code>?</p>\n<p>That said, I have finished the non-Classical exercises in the book, with liberal use of <code>have</code>s and no <code>lemma</code>s. This was good exercise, I have developed some muscle memory for <code>False.elim</code>, <code>Or.elim</code>, <code>And.intro</code>, <code>Or.inr</code>,  <code>Or.inl</code> and <code>Iff.intro</code> to the extent that applying these feels mechanical.  I only had to <code>open Mathlib</code> for <code>imp_false.2</code>, but that was only after I proved <code>imp_false.2</code> on my own and then went looking for it in Mathlib, since it looked fundamental:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Logic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">fwd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hpqr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">fun</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">hpq.left</span>\n        <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">hpq.right</span>\n        <span class=\"n\">hpqr</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span>\n  <span class=\"k\">have</span> <span class=\"n\">back</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hpqr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">fun</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">have</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span> <span class=\"o\">⟩</span>\n          <span class=\"n\">hpqr</span> <span class=\"n\">hpq</span>\n  <span class=\"n\">Iff.intro</span> <span class=\"n\">fwd</span> <span class=\"n\">back</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">fwd</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hpqr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">hpr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n        <span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">have</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span>\n          <span class=\"n\">hpqr</span> <span class=\"n\">hpq</span>\n      <span class=\"k\">have</span> <span class=\"n\">hqr</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n        <span class=\"k\">fun</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">have</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hq</span>\n          <span class=\"n\">hpqr</span> <span class=\"n\">hpq</span>\n      <span class=\"n\">And.intro</span> <span class=\"n\">hpr</span> <span class=\"n\">hqr</span>\n  <span class=\"k\">have</span> <span class=\"n\">back</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hprqr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">hpr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">hprqr.left</span>\n      <span class=\"k\">have</span> <span class=\"n\">hqr</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">hprqr.right</span>\n      <span class=\"k\">fun</span> <span class=\"n\">hpq</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">Or.elim</span> <span class=\"n\">hpq</span> <span class=\"n\">hpr</span> <span class=\"n\">hqr</span>\n  <span class=\"n\">Iff.intro</span> <span class=\"n\">fwd</span> <span class=\"n\">back</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">fwd</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span>  <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span>  <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hnpq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n        <span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">have</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span>\n          <span class=\"n\">hnpq</span> <span class=\"n\">hpq</span>\n      <span class=\"k\">have</span> <span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n        <span class=\"k\">fun</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">have</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hq</span>\n          <span class=\"n\">hnpq</span> <span class=\"n\">hpq</span>\n      <span class=\"n\">And.intro</span> <span class=\"n\">hnp</span> <span class=\"n\">hnq</span>\n  <span class=\"k\">have</span> <span class=\"n\">back</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hnpnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">hnpnq.left</span>\n      <span class=\"k\">have</span> <span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">hnpnq.right</span>\n      <span class=\"k\">fun</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"n\">hpf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">imp_false.2</span> <span class=\"n\">hnp</span>\n        <span class=\"k\">have</span> <span class=\"n\">hqf</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">imp_false.2</span> <span class=\"n\">hnq</span>\n        <span class=\"n\">Or.elim</span> <span class=\"n\">hpq</span> <span class=\"n\">hpf</span> <span class=\"n\">hqf</span>\n  <span class=\"n\">Iff.intro</span> <span class=\"n\">fwd</span> <span class=\"n\">back</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">cnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">fun</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">hpq.left</span>\n        <span class=\"n\">hnp</span> <span class=\"n\">hp</span>\n  <span class=\"k\">have</span> <span class=\"n\">cnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">fun</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">hpq.right</span>\n        <span class=\"n\">hnq</span> <span class=\"n\">hq</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Or.elim</span> <span class=\"n\">hpq</span> <span class=\"n\">cnp</span> <span class=\"n\">cnq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hpp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">hpp.left</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">hpp.right</span>\n    <span class=\"k\">have</span> <span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">hnp</span> <span class=\"n\">hp</span>\n    <span class=\"n\">hF</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">hpq.left</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">hpq.right</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">hpq</span> <span class=\"n\">hp</span>\n      <span class=\"n\">hnq</span> <span class=\"n\">hq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">absurd</span> <span class=\"n\">hp</span> <span class=\"n\">hnp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">hnpq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n        <span class=\"k\">fun</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">absurd</span> <span class=\"n\">hp</span> <span class=\"n\">hnp</span>\n      <span class=\"n\">Or.elim</span> <span class=\"n\">hpq</span> <span class=\"n\">hnpq</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">fwd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>  <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hpf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Or.elim</span> <span class=\"n\">hpf</span> <span class=\"n\">id</span> <span class=\"n\">False.elim</span>\n  <span class=\"n\">Iff.intro</span> <span class=\"n\">fwd</span> <span class=\"n\">Or.inl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">False</span> <span class=\"bp\">↔</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">fwd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">False</span> <span class=\"bp\">→</span> <span class=\"n\">False</span>  <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hpf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">False</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">hpf.right</span>\n  <span class=\"k\">have</span> <span class=\"n\">back</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">False.elim</span> <span class=\"n\">hf</span>\n  <span class=\"n\">Iff.intro</span> <span class=\"n\">fwd</span> <span class=\"n\">back</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span>  <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">hpq</span> <span class=\"n\">hp</span>\n    <span class=\"n\">absurd</span> <span class=\"n\">hq</span> <span class=\"n\">hnq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">hpq</span> <span class=\"n\">hp</span>\n          <span class=\"n\">absurd</span> <span class=\"n\">hq</span> <span class=\"n\">hnq</span>\n</code></pre></div>",
        "id": 410778986,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1704159295
    },
    {
        "content": "<p>Usually in order to show that a result is <del>non-classical</del> nonconstructive one proves (constructively) that it is equivalent to a result that is known to be nonconstructive. That's not a very satisfying answer (since it's <code>em</code> itself that we want to show is nonconstructive, so my answer there just says \"because it is\"), but it's the best I know.</p>",
        "id": 410779380,
        "sender_full_name": "Richard Copley",
        "timestamp": 1704159581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250110\">@ZHAO Jiecheng</span>, in light of <span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span>'s observations above, what are your thoughts on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- \"open Classical \" not allowed for this exercise</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 410785614,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1704163418
    },
    {
        "content": "<p>Sorry, but I feel there must be something wrong with your settings. It is really unusual that you write this kind of proof. Are you using vscode or nvim or other supported editors and are all the plugins installed correctly.</p>",
        "id": 410785703,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1704163464
    },
    {
        "content": "<p>This is my proof of example : <code>¬(p ∨ q) ↔ ¬p ∧ ¬q</code> the editor plugin will hint you the type of each term you should fill. There is no need to write down and make these things with <code>have</code> by your own. You can write the code just like in a tactic model. Writing so many <code>have</code> in your code may indicate that you do not use the help of the editor which will make everything much harder.</p>\n<p><a href=\"/user_uploads/3121/MvwvL9LSZruSmes4dstx3TFx/Screencast-from-2024年01月02日-10时52分09秒.webm\">Screencast-from-2024年01月02日-10时52分09秒.webm</a></p>\n<div class=\"message_inline_image message_inline_video\"><a href=\"/user_uploads/3121/MvwvL9LSZruSmes4dstx3TFx/Screencast-from-2024年01月02日-10时52分09秒.webm\" title=\"Screencast-from-2024年01月02日-10时52分09秒.webm\"><video preload=\"metadata\" src=\"/user_uploads/3121/MvwvL9LSZruSmes4dstx3TFx/Screencast-from-2024年01月02日-10时52分09秒.webm\"></video></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">fwd</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span>  <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span>  <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hnpq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n        <span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">have</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span>\n          <span class=\"n\">hnpq</span> <span class=\"n\">hpq</span>\n      <span class=\"k\">have</span> <span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n        <span class=\"k\">fun</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">have</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hq</span>\n          <span class=\"n\">hnpq</span> <span class=\"n\">hpq</span>\n      <span class=\"n\">And.intro</span> <span class=\"n\">hnp</span> <span class=\"n\">hnq</span>\n  <span class=\"k\">have</span> <span class=\"n\">back</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hnpnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">hnpnq.left</span>\n      <span class=\"k\">have</span> <span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">hnpnq.right</span>\n      <span class=\"k\">fun</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"n\">hpf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">imp_false.2</span> <span class=\"n\">hnp</span>\n        <span class=\"k\">have</span> <span class=\"n\">hqf</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">imp_false.2</span> <span class=\"n\">hnq</span>\n        <span class=\"n\">Or.elim</span> <span class=\"n\">hpq</span> <span class=\"n\">hpf</span> <span class=\"n\">hqf</span>\n  <span class=\"n\">Iff.intro</span> <span class=\"n\">fwd</span> <span class=\"n\">back</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.intro</span>\n    <span class=\"o\">(</span>\n      <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">)),</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hq</span><span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">hq</span><span class=\"o\">))⟩</span>\n    <span class=\"o\">)</span>\n    <span class=\"o\">(</span>\n      <span class=\"k\">fun</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">hpq</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">hpq.elim</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h.left</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hq</span><span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h.right</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 410786843,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1704164367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250110\">@ZHAO Jiecheng</span> I was moving the context of <a href=\"#narrow/stream/113489-new-members/topic/Is.20there.20an.20un-Classical.20version.20of.20the.20.60tauto.60.20tactic.3F/near/410781320\">your reply in this other thread</a> here to relate to my ongoing reading of the Theorem Proving text.  I completed the non-Classical exercises in <a href=\"https://lean-lang.org/theorem_proving_in_lean4/propositions_and_proofs.html#exercises\">this section</a>.  The problem above occurred to me in asking for help on the non-Classical examples.  The question is not a result of assistance from <code>vscode</code> or <code>nvim</code>.  I am using the Lean 4 playground on the web to edit my examples.  The question is about an equivalence that is typically learned in a basic logic class but which does not hold in the type theory approach used by Lean.  This equivalence doesn't hold in the Lean setting.  It seems interesting to ask how it would be formally described or established.  The question is outside of the book and has nothing to do with text editors.</p>",
        "id": 410787092,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1704164523
    },
    {
        "content": "<p>The statement is that in Lean, <code>p → p</code> is not the same as <code>¬p ∨ p</code>.  This goes to the old-school logic equivalence of <code>p → q</code> and <code>¬p ∨ q</code>.  Please read the answers above to understand the particular question I am asking.</p>",
        "id": 410787336,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1704164670
    },
    {
        "content": "<p>One I prepared earlier (not different from your second proof, <span class=\"user-mention\" data-user-id=\"250110\">@ZHAO Jiecheng</span>, but golfed)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">hq</span><span class=\"o\">)⟩,</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h₂.elim</span> <span class=\"n\">h₁.left</span> <span class=\"n\">h₁.right</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 410787396,
        "sender_full_name": "Richard Copley",
        "timestamp": 1704164724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span>, <code>p → p</code> is provable, as you know, so the remaining part of your challenge is, \"Either prove that <code>¬p ∨ p</code>, or prove that <code>¬(¬p ∨ p)</code>.\"<br>\nYou will not be able to do either of those. As for proving that it is not possible: I think you need some model theory. It's a little further than I every really got with logic. But not too much further. I am certain there are books that are not too hard that cover this in detail.</p>",
        "id": 410787915,
        "sender_full_name": "Richard Copley",
        "timestamp": 1704165111
    },
    {
        "content": "<p>Incidentally, <code>itauto</code> (which I am currently rescuscitating) will be able to solve questions of the form \"is this intuitionistically provable\", because it is complete for intuitionistic propositional logic</p>",
        "id": 410788040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704165205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span>  You can not prove this. You can never prove a false without AC when you can prove a true with AC. For <code>(p → p) ↔ (¬p ∨ p)</code>is true with AC you can never prove <code>¬ ((p → p) ↔ (¬p ∨ p))</code> without AC.</p>\n<p>Or it means you can prove <code>False</code> after AC added.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">))):</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 410788696,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1704165785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Does.20.60p.20.E2.86.92.20p.60.20require.20.60open.20Classical.60.3F/near/410788040\">said</a>:</p>\n<blockquote>\n<p>Incidentally, <code>itauto</code> (which I am currently rescuscitating) will be able to solve questions of the form \"is this intuitionistically provable\", because it is complete for intuitionistic propositional logic</p>\n</blockquote>\n<p>Out of curiosity, how it can be complete without EM. Is there any reference for paper?</p>",
        "id": 410788911,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1704165958
    },
    {
        "content": "<blockquote>\n<p><code>p → q</code> is shorthand for <code>¬p ∨ q</code></p>\n</blockquote>\n<p>I'm not sure this is true in classical propositional calculus either since this is a \"rule of inference\" rather than how implication is defined (implication is its own fundamental concept).</p>\n<p>And in Lean, <code>(p → q) =&gt; ¬p ∨ q</code> is a theorem (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Decidable.not_or_of_imp#doc\">docs#Decidable.not_or_of_imp</a>) depending on <code>em</code> (via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Classical.propDecidable#doc\">docs#Classical.propDecidable</a>):</p>\n<p>FWIW in intuitionistic logic, the rule of inference is <code>(p → q) =&gt; ¬(p ∧ ¬q)</code>. This you can actually write as a program:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">imp_example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">False</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hq</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">imp_example</span>\n</code></pre></div>\n<p>(if you'd rather come at it from the angle of a programmer rather than a logician)</p>",
        "id": 410789591,
        "sender_full_name": "llllvvuu",
        "timestamp": 1704166539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> <a href=\"#narrow/stream/113489-new-members/topic/Does.20.60p.20.E2.86.92.20p.60.20require.20.60open.20Classical.60.3F/near/410788911\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Does.20.60p.20.E2.86.92.20p.60.20require.20.60open.20Classical.60.3F/near/410788040\">said</a>:</p>\n<blockquote>\n<p>Incidentally, <code>itauto</code> (which I am currently rescuscitating) will be able to solve questions of the form \"is this intuitionistically provable\", because it is complete for intuitionistic propositional logic</p>\n</blockquote>\n<p>Out of curiosity, how it can be complete without EM. Is there any reference for paper?</p>\n</blockquote>\n<p>I said \"complete for intuitionistic logic\". That means that if there exists a proof without EM, then <code>itauto</code> will find it, and contrapositively if it reports failure then no proof exists and there is a countermodel (which will be some kind of Kripke frame). It is based on the G4ip algorithm from <a href=\"https://www.cs.cmu.edu/~fp/courses/atp/cmuonly/D92.pdf\">Contraction-free sequent calculi for intuitionistic logic</a></p>",
        "id": 410792334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704168778
    },
    {
        "content": "<p>On my itauto branch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">itauto</span><span class=\"bp\">!</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">itauto</span> <span class=\"c1\">-- failed</span>\n</code></pre></div>",
        "id": 410795455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704171908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Does.20.60p.20.E2.86.92.20p.60.20require.20.60open.20Classical.60.3F/near/410795455\">said</a>:</p>\n<blockquote>\n<p>On my itauto branch:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">itauto</span><span class=\"bp\">!</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">itauto</span> <span class=\"c1\">-- failed</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>And branch on Github to have a quick access?</p>",
        "id": 410795802,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1704172240
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9398\">#9398</a></p>",
        "id": 410796714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704173118
    },
    {
        "content": "<p>Lean 4, with its hierarchy of universes, has a flexibility that may allow for constructing more metamathematical arguments than a system without a hierarchy of universes.  If model theory is required, perhaps proofs in model theory could be formalized in Lean. </p>\n<p>Please let me rephrase my question: Let <code>L</code> be a system of logic with axioms <code>A₁,A₂,...,An</code>. If a proposition <code>P↔Q</code> depends on axiom <code>Ai</code> to prove, and<code>Ai</code>  is removed, how do you show, verifiably, that no proof exists in <code>L-Ai</code>of <code>P↔Q</code>?  To simplify, suppose that <code>Ai=P↔Q</code>.</p>\n<p>In other words, say that there is nothing in <code>{A₁,A₂,...,An}\\{Ai}</code> which contradicts <code>Ai</code>.  In that case, other than just saying \"Well, it's not there!\", how do you show that <code>Ai</code> is not provable in <code>L-Ai</code>?  </p>\n<p>If this were a vector space question, it would amount to proving that <code>A₁,A₂,...,An</code> is a set of mutually orthogonal basis vectors, and from there show that, by virtue of being mutually orthogonal, you can't \"add up\" any of the <code>Aj</code>, <code>j≠i</code>, to get <code>Ai</code>.   Along those lines, how would you show, mechanically verifiably, that a particular set of axioms are mutually orthogonal, say in some kind of space of proofs?</p>",
        "id": 410853991,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1704206018
    },
    {
        "content": "<p>The vector space analogy is reasonably good. Proofs are linear combinations of basis vectors, and countermodels are proper subspaces which contain all the specified basis vectors</p>",
        "id": 410854415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704206182
    },
    {
        "content": "<p>The way you construct a model for a theory is the same way as you do any other kind of abstract algebra, you construct a set satisfying a bunch of properties</p>",
        "id": 410854531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704206231
    },
    {
        "content": "<p>in fact most abstract algebraic classes are models of specific first order axiom systems. For example groups are just models of first order logic with equality, a binary function symbol <code>*</code> and some axioms about it</p>",
        "id": 410854756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704206319
    },
    {
        "content": "<p>if you want to prove AC is independent of ZF, you construct a model of ZF where AC is false and a model of ZF where AC is true</p>",
        "id": 410854870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704206373
    },
    {
        "content": "<p>You can prove that the axiom <code>\\forall x, \\exists y, x * y = 1</code> is independent of the monoid axioms, because there exist monoids that are not groups. So the proof is \"Observe: <code>Nat</code> is an additive monoid, and it is not an additive group. QED\"</p>",
        "id": 410855334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704206556
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> for that example.  </p>\n<p>Here is <a href=\"https://math.stackexchange.com/questions/3013027/giving-an-explicit-example-showing-that-ac-is-independent-of-zf\">a discussion from Noah Schweber on this example.</a>.</p>\n<p>Even better, here is a Bachelor's thesis by Elliot Belbin going through the proof of <a href=\"https://repository.library.carleton.ca/downloads/1831ck38c\">the independence of the axiom of choice in set theory</a>.  Do you think it would be possible to express and check the model-theoretic constructions and theorems in this thesis in Lean 4?  That would be a fun project.</p>",
        "id": 410924636,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1704240832
    },
    {
        "content": "<p>Also following on the mutual orthogonality idea, another version of that is to show a dimension reduction, e.g. if I have <code> i = (1,0,0)</code>, <code>j = (0,1,0)</code> and <code>k = (0,0,1)</code>, then I can express points in 3 dimensions.  If I take away <code>k</code>, then I can \"compress\" <code>i</code> and <code>j</code> to be <code>i = (1,0)</code> and <code>j = (0,1)</code> and effect a dimension reduction.  So if you can show that taking away <code>em</code> from the axioms of Lean 4 results in a dimension reduction, that seems like a slightly different avenue of proof than proving that the axioms are mutually orthogonal (although it may be saying the same thing).</p>",
        "id": 410925291,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1704241120
    },
    {
        "content": "<p>P.S. I guess the answer is <a href=\"https://flypitch.github.io/about/\">yes</a>.</p>",
        "id": 411018545,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1704290228
    },
    {
        "content": "<p>well, that one is about the independence of CH from ZFC, so independence of AC from ZF is still an available project... I believe the proofs have a lot of commonality</p>",
        "id": 411019386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704290558
    },
    {
        "content": "<p>So:</p>\n<ul>\n<li>Flypitch is independence of CH from ZFC: formally verified in Lean, blazing a trail.</li>\n<li>Belbin (<a href=\"/user_uploads/3121/idrw7VM8PtLTRwfTlKRkKeub/belbin-theindependenceoftheaxiomofchoiceinsettheory.pdf\">attached</a>) is independence of AC from ZF.  I will put verification of Belbin's thesis on my Lean bucket list, just after actually learning Lean thoroughly through all my bookmarked texts.</li>\n<li>Regarding independence of EM from intuitionistic logic, I could only find <a href=\"https://math.stackexchange.com/questions/4314385/looking-for-a-simple-proof-of-the-independence-of-the-law-of-excluded-middle\">this Stack Exchange post</a>.  Other than that, ChatGPT/Bard/BingChat can cite no article which gives the proof.   I didn't find anything in Google Scholar.  This is quite surprising, given how plowed under and relatively old the topic is, and what low-hanging fruit this would seem to be.  If there is no complete writeup, would writing out and formally verifying this proof qualify as a PhD thesis in Math?  MS Thesis?  Or just Bachelor's thesis, like AC from ZF?</li>\n</ul>",
        "id": 411066952,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1704309354
    },
    {
        "content": "<p>They teach that one in school (if you take the right classes). The two main proofs are the topological one (<a href=\"https://math.stackexchange.com/a/1371237/50776\">https://math.stackexchange.com/a/1371237/50776</a>) and the one with a two element kripke frame (<a href=\"https://math.stackexchange.com/a/2888061/50776\">https://math.stackexchange.com/a/2888061/50776</a>)</p>",
        "id": 411068320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704309986
    },
    {
        "content": "<p>Mathlib already has Heyting algebras; constructing a suitable instance and showing it doesn't satisfy EM would surely be both straightforward and appropriate for <code>Counterexamples/</code> (if not mathlib proper).</p>",
        "id": 411079465,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1704315256
    }
]