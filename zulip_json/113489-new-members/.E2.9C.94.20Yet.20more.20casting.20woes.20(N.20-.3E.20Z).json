[
    {
        "content": "<p>I hope I'm not asking too many questions or opening too many streams here (please let me know otherwise)!</p>\n<p>I'm struggling again with casting from and to different types (for those who have seen my other questions). This time the problem comes not from my own definitions but from the in-built Nat and Int types. Basically I don't know how to prove the following because I have an equation in Z (that is always positive though) and I need one in N. A minimal example would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.ModEq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">i_pow_mod_1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nmod</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">keq</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.ModEq.dvd</span> <span class=\"n\">nmod.symm</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">keq</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">keq</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k'</span> <span class=\"n\">k'</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">keq</span>\n    <span class=\"c1\">-- this doesn't work because the types are mismatched</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">keq</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- and I also don't know how to prove this</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">k'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- simp? rfl? they don't work</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Maybe I'm also approaching this in the wrong way.</p>",
        "id": 433379330,
        "sender_full_name": "Tainnor",
        "timestamp": 1713212438
    },
    {
        "content": "<p><code>norm_cast</code> works here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">i_pow_mod_1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nmod</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">keq</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.ModEq.dvd</span> <span class=\"n\">nmod.symm</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">keq</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">keq</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k'</span> <span class=\"n\">k'</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">keq</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">keq</span>\n    <span class=\"c1\">-- now keq : n = 4 * k' + 1</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">keq</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 433380138,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713212726
    },
    {
        "content": "<p>Thanks a lot for your help! That does work</p>",
        "id": 433380423,
        "sender_full_name": "Tainnor",
        "timestamp": 1713212829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"685366\">Tainnor</span> has marked this topic as resolved.</p>",
        "id": 433383535,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713213976
    },
    {
        "content": "<p>PS <span class=\"user-mention\" data-user-id=\"685366\">@Tainnor</span> asking lots of questions in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> , one per thread, as you're doing, is a correct way to use the site. Please keep asking! Experts who don't want to be bothered with lots of newcomers asking questions will just have this entire stream muted so you're not bothering them.</p>",
        "id": 433447871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713247674
    }
]