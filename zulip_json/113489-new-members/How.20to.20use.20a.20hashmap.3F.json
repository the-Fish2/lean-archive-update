[
    {
        "content": "<p>I am trying to use the hashmap implementation provided by Lean core but I can't figure out the syntax, can someone write me a simple function that shows how to use a hashmap in general, how do you make an \"instance\" of it and then fill it with key-value pairs and then use these value pairs when needed?</p>",
        "id": 445433545,
        "sender_full_name": "Jafar Tanoukhi",
        "timestamp": 1718735967
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">A very quick tutorial for using `HashMap`s</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"sd\">/-- using `HashMap.empty` and `HashMap.insert` -/</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">myHM</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HashMap</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">HashMap</span><span class=\"bp\">.</span><span class=\"n\">empty</span>\n<span class=\"w\">  </span><span class=\"bp\">|&gt;.</span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s2\">\"one\"</span>\n<span class=\"w\">  </span><span class=\"bp\">|&gt;.</span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"s2\">\"two\"</span>\n<span class=\"w\">  </span><span class=\"bp\">|&gt;.</span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"s2\">\"three\"</span>\n\n<span class=\"c1\">--  the above is just for \"clean\" formatting: you could also write</span>\n<span class=\"c1\">--  `def myHM1 : HashMap Nat String := ((HashMap.empty.insert 1 \"one\").insert 2 \"two\").insert 3 \"three\"`</span>\n\n<span class=\"c1\">-- Now also `HashMap.find?` and `HashMap.contains`</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">myHM</span><span class=\"bp\">.</span><span class=\"n\">find?</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"c1\">-- `some \"one\"`</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">myHM</span><span class=\"bp\">.</span><span class=\"n\">find?</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"c1\">-- `none`</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">myHM</span><span class=\"bp\">.</span><span class=\"n\">contains</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"c1\">-- `true`</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">myHM</span><span class=\"bp\">.</span><span class=\"n\">contains</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"c1\">-- `false`</span>\n\n<span class=\"c1\">-- to print a HashMap, convert it to a `List` or an `Array`</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">println</span><span class=\"w\"> </span><span class=\"n\">myHM</span><span class=\"bp\">.</span><span class=\"n\">toArray</span><span class=\"w\"> </span><span class=\"c1\">-- #[(1, one), (2, two), (3, three)]</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">println</span><span class=\"w\"> </span><span class=\"n\">myHM</span><span class=\"bp\">.</span><span class=\"n\">toList</span><span class=\"w\">  </span><span class=\"c1\">-- [(3, three), (2, two), (1, one)]</span>\n</code></pre></div>",
        "id": 445469713,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718748352
    },
    {
        "content": "<p>hi, thanks for replying, i did a lot of trial and error after asking the question and eventually got my answer, but i still have some questions, in the documentation there's HashMapImp, HashMap, HashMapBucket. I don't understand the difference especially between HashMap and HashMapImp.</p>\n<p>Also I am interested in understanding this syntax, how does it work ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">myHM</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HashMap</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">HashMap</span><span class=\"bp\">.</span><span class=\"n\">empty</span>\n<span class=\"w\">  </span><span class=\"bp\">|&gt;.</span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s2\">\"one\"</span>\n<span class=\"w\">  </span><span class=\"bp\">|&gt;.</span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"s2\">\"two\"</span>\n<span class=\"w\">  </span><span class=\"bp\">|&gt;.</span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"s2\">\"three\"</span>\n</code></pre></div>",
        "id": 445470710,
        "sender_full_name": "Jafar Tanoukhi",
        "timestamp": 1718748709
    },
    {
        "content": "<p>I personally view everything in the <code>HashMap</code> file that comes before the definition of <code>HashMap</code> as an implementation detail: I have never used neither <code>...imp</code>, nor <code>...Bucket</code>.</p>\n<p>Regarding the final syntax, it is more an optical illusion than anything else: <code>|&gt;</code> essentially means \"close here a parenthesis that has been opened as far left as possible\".  (There is an analogous symbol <code>&lt;|</code> for going right.)  After that, you are leveraging dot-notation for the term appearing in the previous line.  The inlined, commented code above is \"exactly the same\", but without the visual effect.</p>",
        "id": 445473295,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718750137
    },
    {
        "content": "<p>So, in effect, you are starting from the empty <code>HashMap</code> and you are adding key-value pairs to it one at a time, except that you are well-spacing them and making each addition on a new line and nicely justified.</p>",
        "id": 445473544,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718750236
    },
    {
        "content": "<p>Ok so from what i understand |&gt; closes the \"last unclosed bracket\".<br>\nIs this like a special notation cooked into lean or is this symbol actually defined somewhere to do this?</p>",
        "id": 445474279,
        "sender_full_name": "Jafar Tanoukhi",
        "timestamp": 1718750667
    },
    {
        "content": "<p>Hovering over <code>&lt;|</code> should give you some information.  Maybe docs#«term_&lt;|_» also works?</p>",
        "id": 445474808,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718750984
    },
    {
        "content": "<p>That did not work, but maybe this does: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Notation.html#%C2%ABterm_%3C|_%C2%BB\">https://leanprover-community.github.io/mathlib4_docs/Init/Notation.html#%C2%ABterm_%3C|_%C2%BB</a></p>",
        "id": 445474901,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718751008
    },
    {
        "content": "<p>Oh ok thanks alot</p>",
        "id": 445476901,
        "sender_full_name": "Jafar Tanoukhi",
        "timestamp": 1718752189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20a.20hashmap.3F/near/445473295\">said</a>:</p>\n<blockquote>\n<p>I personally view everything in the <code>HashMap</code> file that comes before the definition of <code>HashMap</code> as an implementation detail: I have never used neither <code>...imp</code>, nor <code>...Bucket</code>.</p>\n</blockquote>\n<p>Note that the <code>Imp</code> in <code>HashMapImp</code> stands for \"implementation (detail)\" (although normally this is abbreviated <code>Impl</code>...) so your view is the correct one. You should basically never use these functions directly</p>",
        "id": 445707784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718833387
    }
]