[
    {
        "content": "<p>From <code>Mathlib.Algebra.Quaternion</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"n\">following</span> <span class=\"kd\">notation</span> <span class=\"n\">is</span> <span class=\"n\">available</span> <span class=\"k\">with</span> <span class=\"bp\">`</span><span class=\"kn\">open</span> <span class=\"n\">Quaternion</span><span class=\"bp\">`</span> <span class=\"n\">or</span> <span class=\"bp\">`</span><span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Quaternion</span><span class=\"bp\">`.</span>\n\n<span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">ℍ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">c₁</span><span class=\"o\">,</span> <span class=\"n\">c₂</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"bp\">`</span><span class=\"n\">QuaternionAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span><span class=\"bp\">`</span>\n<span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">ℍ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"n\">quaternions</span> <span class=\"n\">over</span> <span class=\"bp\">`</span><span class=\"n\">R</span><span class=\"bp\">`.</span>\n</code></pre></div>\n<p>What's the difference between <code>open</code> and <code>open scoped</code>?</p>",
        "id": 436673770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714650025
    },
    {
        "content": "<p>I think that <code>open scoped</code> does a subset of what <code>open</code> does: it \"opens\" what is in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">AddMonoidAlgebra</span><span class=\"o\">]</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">9000</span> <span class=\"n\">R</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">A</span> <span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>but does not also give you access to the <code>AddMonoidAlgebra.</code> lemmas without the <code>AddMonoidAlgebra</code>-prefix.</p>",
        "id": 436675864,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714650771
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Nat</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">C</span>  <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Nat</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">C</span>\n</code></pre></div>",
        "id": 436676028,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714650835
    },
    {
        "content": "<p>The notation <code>Nat[X]</code> works the first time, since it is <code>scoped</code>, but <code>C</code> is not picked up as <code>Polynomial.C</code>.</p>",
        "id": 436676179,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714650879
    },
    {
        "content": "<p>Oh -- is it like lean 3 <code>open locale</code>?</p>",
        "id": 436676598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714651021
    },
    {
        "content": "<p>Ah, very likely yes!  Maybe not literally, but probably close enough.</p>",
        "id": 436676649,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714651042
    },
    {
        "content": "<p>Lean 4 <code>open</code> = Lean 3 <code>open</code> + <code>open locale</code> (i.e. the namespace plus the notation), and Lean 4 <code>open scoped</code> is just the notation but not the namespace?</p>",
        "id": 436676763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714651081
    },
    {
        "content": "<p>Yes, at least this is my mental model.  With some flexibility about possible edge cases.  I think that also instances can be scoped.</p>",
        "id": 436677016,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714651130
    },
    {
        "content": "<p>Yes, they can.</p>",
        "id": 436677406,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714651249
    },
    {
        "content": "<p>I think that <code>open_locale</code> also allowed instances anyway, so probably the analogy with <code>open_locale</code> is quite accurate.</p>",
        "id": 436677545,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714651301
    },
    {
        "content": "<p>Yes, <code>open scoped</code> is indeed the analogue of <code>open_locale</code> in Lean 3. Except in Lean 3 it was a hack, and Lean 4 supports it natively.</p>",
        "id": 436778763,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714684910
    },
    {
        "content": "<p>And in both versions you could scope/localize any attribute (including instances) and notation.</p>",
        "id": 436778866,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714684938
    },
    {
        "content": "<p>In Lean 4 you can also scope things like macros, pretty printers, parsers, and various other things.</p>",
        "id": 436778905,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714684967
    },
    {
        "content": "<p>e.g. we now have notation <code>∑ (x ∈ s) (y ∈ s), f x y</code> and we could imagine writing a pretty printer for that. But because it obscures what is going on, that maybe should be a scoped pretty printer</p>",
        "id": 436779043,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714685035
    },
    {
        "content": "<p>One thing that's missing here is an <code>open notscoped Foo</code> that matches the behavior of the lean 3 <code>open foo</code>. (for <code>Nat</code>, it would put <code>factorial</code> in the local environment, but not  the <code>!</code> notation)</p>",
        "id": 436783876,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714687394
    },
    {
        "content": "<p>Maybe it could be spelt <code>open Nat (*)</code>, which matches <code>open Nat (factorial)</code></p>",
        "id": 436783987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714687458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/open.20scoped/near/436783876\">said</a>:</p>\n<blockquote>\n<p>One thing that's missing here is an <code>open notscoped Foo</code> that matches the behavior of the lean 3 <code>open foo</code>. (for <code>Nat</code>, it would put <code>factorial</code> in the local environment, but not  the <code>!</code> notation)</p>\n</blockquote>\n<p>For this reason I have been writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Notation</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">end</span> <span class=\"n\">Notation</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">end</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>so that <code>open Foo</code> does not necessarily bring in the notation.</p>",
        "id": 436784697,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1714687899
    }
]