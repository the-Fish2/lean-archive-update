[
    {
        "content": "<p>I've <code>s : Type</code> and an instance <code>Fintype s</code>. It seems like it should be possible to turn a <code>X : Set s</code> into a <code>Finset s</code>, but I can't seem to figure out how to do that. I might be missing something obvious here.</p>",
        "id": 435108907,
        "sender_full_name": "Eric Zhao",
        "timestamp": 1713933735
    },
    {
        "content": "<p>Is that <code>X.toFinset</code>?</p>",
        "id": 435113350,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713936772
    },
    {
        "content": "<p>Does this help?  <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Finite.html#Set.Finite.toFinset\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Finite.html#Set.Finite.toFinset</a></p>",
        "id": 435113974,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1713937279
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.toFinset#doc\">docs#Set.toFinset</a></p>",
        "id": 435115092,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1713938046
    },
    {
        "content": "<p>I had thought so, but Set.toFinset wants, in this case, a <code>Fintype ↑X</code>, but I've a <code>Fintype s</code>. I think <code>↑X</code> is just <code>{ x : s //  x ∈X }</code>, so if I could get that this subtype is a Fintype that would work?</p>",
        "id": 435225542,
        "sender_full_name": "Eric Zhao",
        "timestamp": 1713974594
    },
    {
        "content": "<p>I'd try to debug it if I had a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 435226004,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713974732
    },
    {
        "content": "<p>If your <code>X</code> has decidable membership, you can get a <code>Fintype ↑X</code> instance from <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fintype/Basic.html#setFintype\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fintype/Basic.html#setFintype</a>, otherwise (in which case you might not need computatbility anyway) you can magic one into existence with <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fintype/Basic.html#Fintype.ofInjective\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fintype/Basic.html#Fintype.ofInjective</a> and the injection from a set coerced into a type back into the original type, like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span>\n<span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">setFintype</span> <span class=\"n\">s</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">s.toFinset</span><span class=\"o\">,</span> <span class=\"n\">s.coe_toFinset</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">Injective</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">SetCoe.ext</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.ofInjective</span> <span class=\"n\">_</span> <span class=\"n\">this</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">s.toFinset</span><span class=\"o\">,</span> <span class=\"n\">s.coe_toFinset</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 435249380,
        "sender_full_name": "Tom Kranz",
        "timestamp": 1713983204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"712641\">@Tom Kranz</span> Here are some simpler versions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span>\n<span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">s.toFinset</span><span class=\"o\">,</span> <span class=\"n\">s.coe_toFinset</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">s.toFinite.toFinset</span><span class=\"o\">,</span> <span class=\"n\">Set.Finite.coe_toFinset</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 435249932,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713983404
    },
    {
        "content": "<p>Two ways to avoid decidability (while embracing noncomputability):</p>\n<ol>\n<li>Use <code>classical</code> and <code>s.toFinset</code></li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">s.toFinset</span><span class=\"o\">,</span> <span class=\"n\">s.coe_toFinset</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Use <code>s.toFinite.toFinset</code></li>\n</ol>",
        "id": 435250069,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713983458
    },
    {
        "content": "<p>Thanks, I think this (the one with <code>DecidablePred</code>) is exactly what I wanted!</p>",
        "id": 435599001,
        "sender_full_name": "Eric Zhao",
        "timestamp": 1714142096
    }
]