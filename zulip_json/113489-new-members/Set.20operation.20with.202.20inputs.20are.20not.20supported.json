[
    {
        "content": "<p>I have a function to compose two sets:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Kronecker</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Qudit</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">ψ</span> <span class=\"bp\">|</span> <span class=\"n\">ψ</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">ψ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ComposedQudits</span> <span class=\"o\">(</span><span class=\"n\">d1</span> <span class=\"n\">d2</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">ψ</span> <span class=\"bp\">⊗ₖ</span> <span class=\"n\">φ</span><span class=\"bp\">|</span> <span class=\"n\">ψ</span> <span class=\"bp\">∈</span> <span class=\"n\">Qudit</span> <span class=\"n\">d1</span> <span class=\"bp\">∧</span> <span class=\"n\">φ</span> <span class=\"bp\">∈</span> <span class=\"n\">Qudit</span> <span class=\"n\">d2</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>It complains <code>unknown identifier ψ, φ</code>.</p>\n<p>If I only have 1 input, then the above works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ComposedQudits</span> <span class=\"o\">(</span><span class=\"n\">d1</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">ψ</span> <span class=\"bp\">+</span> <span class=\"n\">ψ</span> <span class=\"bp\">|</span> <span class=\"n\">ψ</span> <span class=\"bp\">∈</span> <span class=\"n\">Qudit</span> <span class=\"n\">d1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>If <code>Qudit</code> is a type, then the above also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Qudit2</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ψ</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span>\n  <span class=\"n\">normalized</span><span class=\"o\">:</span> <span class=\"n\">ψ</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">ψ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ComposedQudits3</span> <span class=\"o\">(</span><span class=\"n\">d1</span> <span class=\"n\">d2</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">ψ.1</span> <span class=\"bp\">⊗ₖ</span> <span class=\"n\">φ.1</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">Qudit2</span> <span class=\"n\">d1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span><span class=\"o\">:</span> <span class=\"n\">Qudit2</span> <span class=\"n\">d2</span><span class=\"o\">)}</span>\n</code></pre></div>\n<p>I am wondering how to support the above use case (Qudit being Sets and having 2 inputs to Set operations)?</p>",
        "id": 418344659,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706299811
    },
    {
        "content": "<p>Does <code>{ψ ⊗ₖ φ| (ψ ∈ Qudit d1) (φ ∈ Qudit d2)}</code> work?</p>",
        "id": 418347236,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706301064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Set.20operation.20with.202.20inputs.20are.20not.20supported/near/418347236\">said</a>:</p>\n<blockquote>\n<p>Does <code>{ψ ⊗ₖ φ| (ψ ∈ Qudit d1) (φ ∈ Qudit d2)}</code> work?</p>\n</blockquote>\n<p>Yes, thank you <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> . I thought <code>ψ ∈ Qudit d1</code> and <code>φ ∈ Qudit d2</code> are propositions and you need to <code>And</code> them</p>",
        "id": 418347445,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706301161
    },
    {
        "content": "<p>Yes, they are propositions, but they also have an interpretation as binders, so this is able to work.</p>",
        "id": 418347940,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706301401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Set.20operation.20with.202.20inputs.20are.20not.20supported/near/418347940\">said</a>:</p>\n<blockquote>\n<p>Yes, they are propositions, but they also have an interpretation as binders, so this is able to work.</p>\n</blockquote>\n<p>Yep, makes sense. Found those extended binder definitions in <code>Mathlib/Init/Set.lean</code>.</p>",
        "id": 418349273,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706302168
    }
]