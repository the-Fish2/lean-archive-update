[
    {
        "content": "<p>Something I'm a bit confused about:</p>\n<p>If we had a type <code>A × B</code> we can make instances <code>(a,b)</code>, <code>(a',b')</code> etc of that type<br>\nIf we had a dependent type <code>∃(x:A),B(x)</code> then this represents a dependent pair. But <code>(a, b a)</code>, <code>(a', b' a')</code> aren't instances AFIK. They are instances of <code>A × B a</code> and <code>A × B a'</code> respectively I believe. And since things can't have two types. This leaves me two wonder if you had a pair which accidentally can also be written as an instance of dependent pair then  what happens there? </p>\n<p>The instances <code>∀(x:A),B(x)</code> are functions using lambda notation, but I'm confused about if there is, in the same way, a notation for a dependent pair.</p>",
        "id": 445690793,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718826821
    },
    {
        "content": "<p>(just to note, I think you mean \"term\" not \"instance\", since the latter can be confused with <code>instance</code>)</p>",
        "id": 445691597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718827119
    },
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n<p>answer your question?</p>",
        "id": 445691809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718827200
    },
    {
        "content": "<p>Well I'm sort of wondering why this is wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 445692306,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718827329
    },
    {
        "content": "<p>Do you mean this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 445692524,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1718827409
    },
    {
        "content": "<p>The proof of an existential statement is a witness <code>x</code> as well as a proof that the proposition holds for that witness. You are giving a witness <code>x = 3</code> and the proposition for that specific witness, but not a proof. A proof in this case would be <code>rfl</code></p>",
        "id": 445692544,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718827416
    },
    {
        "content": "<p>I see. So the structure <code>⟨....⟩</code> can be used to fill in a dependent pair type. But there is no specialised notation to do this other than specifying the type with <code>∃</code>? Unlike the forall type in which I believe you can define a function directly using the <code>=&gt;</code> notation.</p>",
        "id": 445696257,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718828841
    },
    {
        "content": "<p>Angle brackets are the generic notation for constructing one-constructor types, and parentheses are specialized just for <code>Prod</code>.</p>\n<p>You are correct that there is no specialized notation for <code>Exists</code>.</p>",
        "id": 445696749,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718829037
    },
    {
        "content": "<blockquote>\n<p>Unlike the forall type in which I believe you can define a function directly using the <code>=&gt;</code> notation.</p>\n</blockquote>\n<p>The forall type is very special, and is native to the type theory</p>",
        "id": 445697043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718829147
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prod#doc\">docs#Prod</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sigma#doc\">docs#Sigma</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Exists#doc\">docs#Exists</a> are not native, they're just <code>inductive</code> types</p>",
        "id": 445697099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718829164
    },
    {
        "content": "<p>(They're native insofar as inductive types are native. I think there's a point of view that all inductive types that could ever be defined are already present, and the <code>inductive</code> command just names them.)</p>",
        "id": 445698103,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718829482
    },
    {
        "content": "<p>Could you suggest a notation for a dependent pair? e.g. something like <code>⟨3◀ rfl⟩</code> It's strange if there is no notation for it. It should be interpreted \"3 is an example of the proposition P(3) whose proof is rfl 3\". I think it contains all the information to deduce it's type.</p>",
        "id": 445728919,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718843605
    },
    {
        "content": "<p>What's wrong with <code>⟨3, rfl⟩</code> notation?</p>",
        "id": 445785207,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718871304
    },
    {
        "content": "<p>(or <code>⟨_, Eq.refl 3⟩</code>, if you want to provide only the second argument)</p>",
        "id": 445785265,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718871321
    },
    {
        "content": "<p>You can use the constructor directly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n</code></pre></div>\n<p>That's not really ergonomic or idiomatic, but it gets you at a different notation perhaps.</p>\n<p>Here are some more examples: I'm not sure if this is helpful or not as this is not how you've see this in the wild, but here we are.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\">  </span><span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">example</span><span class=\"w\">                   </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"kn\">example</span><span class=\"w\">                   </span><span class=\"o\">:=</span><span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"kn\">example</span><span class=\"w\">                   </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">({</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">)</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Sigma</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"kn\">example</span><span class=\"w\">                   </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">Sigma</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 445893302,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1718900933
    },
    {
        "content": "<p>I'm surprised the following from above type checks. </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n<p>Okay, I'm not sure that's happening...</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">20</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"c1\">-- Fin 1</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"c1\">-- 0</span>\n</code></pre></div>",
        "id": 445908706,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1718903195
    },
    {
        "content": "<p><code>(2 : Fin 1)</code> is the same as <code>(0 : Fin 1)</code> since numeric literals wrap around for <code>Fin</code>.</p>",
        "id": 445914982,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718905142
    },
    {
        "content": "<p>I made some notation just for fun:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">DependentPair</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"bp\">→</span><span class=\"kt\">Prop</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">notation</span><span class=\"w\">  </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"s2\">\"◀\"</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\">  </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">DependentPair</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">example1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"bp\">◀</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">example2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">◀</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">one_eq_succ_zero</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">example3</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"bp\">◀</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">):</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">4</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But I can't think of any other examples of using it except to show that 3=3. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n<p>Edit: Perhaps a better notation is to have the second argument a function (to abuse the naming):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">DependentPair</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"bp\">→</span><span class=\"kt\">Prop</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">notation</span><span class=\"w\">  </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"s2\">\"◀\"</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\">  </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">DependentPair</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">example1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"bp\">◀</span><span class=\"w\"> </span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 445965600,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718923385
    },
    {
        "content": "<p>It's perhaps worth pointing out that <code>∃</code> is not usually called a \"dependent pair\"</p>",
        "id": 445969415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718924917
    },
    {
        "content": "<p>That's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sigma#doc\">docs#Sigma</a>, not <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Exists#doc\">docs#Exists</a></p>",
        "id": 445969422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718924924
    },
    {
        "content": "<p>Notably, you can't ask an <code>Exists</code> for its first element, so this is a very weird definition of \"pair\"</p>",
        "id": 445969525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718924995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Notation.20for.20instance.20of.20dependent.20type.3F/near/445969525\">said</a>:</p>\n<blockquote>\n<p>Notably, you can't ask an <code>Exists</code> for its first element</p>\n</blockquote>\n<p>That's just constructive? I think that with the axiom of choice, you can get the element.</p>",
        "id": 445991827,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1718938854
    },
    {
        "content": "<p>you can get <em>some</em> element, but you can't prove that the element you are getting from choice is exactly the one you used while constucting. what you can prove is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Exists.choose_spec#doc\">docs#Exists.choose_spec</a></p>",
        "id": 446017751,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718953016
    },
    {
        "content": "<p>In fact, if there's a way to get that element from <code>Exists.intro</code>, then you can make use of proof irrelevance to prove a contradiction.</p>",
        "id": 446134530,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718991085
    },
    {
        "content": "<p>Here's an example setup of that: <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20Equivalence.20in.20Inductive.20Prop.20Families/near/436606381\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.E2.9C.94.20Equivalence.20in.20Inductive.20Prop.20Families/near/436606381</a></p>",
        "id": 446134872,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718991159
    }
]