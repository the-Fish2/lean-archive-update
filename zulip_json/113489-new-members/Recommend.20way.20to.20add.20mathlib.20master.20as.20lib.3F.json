[
    {
        "content": "<p>Hi! Say I want to add the master branch of mathlib as lib like <code>require mathlib from git \"https://github.com/leanprover-community/mathlib4\"@\"master\"</code> in the <code>lakefile.lean</code> file. What’s the recommend way to update it regularly?</p>",
        "id": 438080597,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715404390
    },
    {
        "content": "<p>I found that the directory <code>.lake/package/mathlib</code> is checked out directly on a specific commit. Currently I update it via removing <code>lake-manifest.json</code> and rerun <code>lake exec cache get</code>. Is it the correct way?</p>",
        "id": 438080774,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715404580
    },
    {
        "content": "<p>Are you aware of <code>lake update Mathlib</code>? Or preferably if you need doc-gen4, <code>lake update -R -Kenv=dev Mathlib</code>.</p>",
        "id": 438081421,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715405342
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/113486-announce/topic/v4.2E8.2E0-rc1/near/437194547\">lake's new TOML configuration</a> if it's a simple project.</p>",
        "id": 438081505,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715405451
    },
    {
        "content": "<p>Ah I don’t pay attention to <code>lake update</code> before. Yeah it’s quite simple<span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 438081589,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715405550
    },
    {
        "content": "<p>Never use <code>lake update</code> without a specific package name, it might have unexpected result on other packages, and it could become non-trivial to fix manually, unless you know how git and lake work regarding this very clearly.</p>",
        "id": 438081707,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715405750
    },
    {
        "content": "<p>Oh thank you for bringing this to my attention. I hadn’t realized it either.</p>",
        "id": 438081865,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715405971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113489-new-members/topic/Recommend.20way.20to.20add.20mathlib.20master.20as.20lib.3F/near/438081707\">said</a>:</p>\n<blockquote>\n<p>Never use <code>lake update</code> without a specific package name, it might have unexpected result on other packages, and it could become non-trivial to fix manually, unless you know how git and lake work regarding this very clearly.</p>\n</blockquote>\n<p>I think this is outdated advice; if your package only has mathlib as a dependency, then <code>lake update</code> will do the right thing.</p>",
        "id": 438096119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715420297
    },
    {
        "content": "<p>(long ago, this was not the case, and it would update all the dependencies of mathlib to random versions incompatible versions too)</p>",
        "id": 438096125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715420310
    },
    {
        "content": "<p>I can confirm that I use <code>lake update</code> without any package argument in my projects (well, <code>lake -R -Kenv=dev update</code> more precisely, because of <code>doc-gen</code>) and it works fine.</p>\n<p>Although last time it broke everything, but adding <code>mathlib</code> to the command also broke everything. I had to change the toolchain by hand but I have no idea why. See here: <a href=\"https://github.com/RemyDegenne/testing-lower-bounds/pull/28\">https://github.com/RemyDegenne/testing-lower-bounds/pull/28</a> if somebody want to investigate.</p>",
        "id": 438096507,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1715420691
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/checkdecl.20update.20surprise/near/437308323\">This</a> and <a href=\"#narrow/stream/113488-general/topic/Create.20new.20Lean.20mathlib4.20project.20with.20leanblueprint.20support\">this</a> are very recent. <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 438096567,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715420764
    },
    {
        "content": "<p>Personally I do run <code>lake update</code> since I can fix it if anything goes wrong, but mostly as <code>lake update -R -Kenv=dev</code>. I'm just still not so confident to recommend a raw <code>lake update</code> to others.</p>",
        "id": 438096702,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715420881
    },
    {
        "content": "<p>Indeed one should be careful with that command. When I write that \"it broke everything\", I mean that the only way I could recover was by deleting the local repository and cloning again: never run <code>lake update</code> if your local work is not saved somewhere else.</p>",
        "id": 438096998,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1715421038
    },
    {
        "content": "<p>I can fix them with some <code>git stash</code>, <code>git reset --hard</code>, <code>git cherry-pick -n</code>, <code>git push -f</code> like combos (some are dark magic) without re-cloning, but re-cloning is cleanest to recommend to others.</p>",
        "id": 438097589,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715421226
    },
    {
        "content": "<p>FWIW <a href=\"https://github.com/YaelDillies/LeanAPAP/blob/master/scripts/update_mathlib.sh\">my script to update LeanAPAP</a> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">curl</span> <span class=\"bp\">-</span><span class=\"n\">L</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">raw.githubusercontent.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">master</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n<span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">R</span> <span class=\"bp\">-</span><span class=\"n\">Kenv</span><span class=\"bp\">=</span><span class=\"n\">dev</span> <span class=\"n\">update</span>\n</code></pre></div>\n<p>and it has <em>never</em> failed me so far.</p>",
        "id": 438097875,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715421376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/113489-new-members/topic/Recommend.20way.20to.20add.20mathlib.20master.20as.20lib.3F/near/438096507\">said</a>:</p>\n<blockquote>\n<p>I can confirm that I use <code>lake update</code> without any package argument in my projects (well, <code>lake -R -Kenv=dev update</code> more precisely, because of <code>doc-gen</code>) and it works fine.</p>\n<p>Although last time it broke everything, but adding <code>mathlib</code> to the command also broke everything. I had to change the toolchain by hand but I have no idea why. See here: <a href=\"https://github.com/RemyDegenne/testing-lower-bounds/pull/28\">https://github.com/RemyDegenne/testing-lower-bounds/pull/28</a> if somebody want to investigate.</p>\n</blockquote>\n<p>Inspecting the PR, by breaking everything, it seems to mean just that the recent updates of Mathlib will need to change some user-side code to build? That's usually a disrupting process for ongoing work, but if one has some proper time for a bump, when everything builds again, it's pure joy.</p>",
        "id": 438097919,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715421425
    },
    {
        "content": "<p>The breakage is not visible by looking at the PR. I mean that if you get the repo in the state it was before that PR, then try to update without changing the toolchain first, the update command does not even succeed. You get errors mentioning the aesop package (I don't have the precise error messages anymore).</p>",
        "id": 438098199,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1715421599
    },
    {
        "content": "<p>That's similar to <a href=\"#narrow/stream/270676-lean4/topic/could.20not.20rename.20packages.20directory/near/437632644\">this</a>.</p>",
        "id": 438098340,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715421718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Recommend.20way.20to.20add.20mathlib.20master.20as.20lib.3F/near/438097875\">said</a>:</p>\n<blockquote>\n<p>FWIW <a href=\"https://github.com/YaelDillies/LeanAPAP/blob/master/scripts/update_mathlib.sh\">my script to update LeanAPAP</a> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">curl</span> <span class=\"bp\">-</span><span class=\"n\">L</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">raw.githubusercontent.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">master</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n<span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">R</span> <span class=\"bp\">-</span><span class=\"n\">Kenv</span><span class=\"bp\">=</span><span class=\"n\">dev</span> <span class=\"n\">update</span>\n</code></pre></div>\n<p>and it has <em>never</em> failed me so far.</p>\n</blockquote>\n<p>This script dodged that issue. So, indeed, one must bump toolchain file first before any <code>lake update</code>* commands.</p>",
        "id": 438098427,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715421775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113489-new-members/topic/Recommend.20way.20to.20add.20mathlib.20master.20as.20lib.3F/near/438096567\">said</a>:</p>\n<blockquote>\n<p><a href=\"#narrow/stream/270676-lean4/topic/checkdecl.20update.20surprise/near/437308323\">This</a> and <a href=\"#narrow/stream/113488-general/topic/Create.20new.20Lean.20mathlib4.20project.20with.20leanblueprint.20support\">this</a> are very recent. <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>\n</blockquote>\n<p>This one is a case where there is non-trivial scripting going on in the <code>lakefile.lean</code>, which in mathematical (as opposed to infrastructure) projects is rare.</p>",
        "id": 438100908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715424434
    },
    {
        "content": "<p>Incidentally, the <a href=\"http://live.lean-lang.org\">live.lean-lang.org</a> setup also settled on the delete manifest - download toolchain - build idiom.</p>\n<p>I guess if you have only one dependency, and you are upgrading, then there is no useful information in the manifest and the stateless approach works more reliable.</p>\n<p>This changes if you have more than one direct dependency and the manifest contains valuable information about a curated combination of versions.</p>",
        "id": 438101392,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1715425067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Recommend.20way.20to.20add.20mathlib.20master.20as.20lib.3F/near/438096119\">said</a>:</p>\n<blockquote>\n<p>I think this is outdated advice; if your package only has mathlib as a dependency, then <code>lake update</code> will do the right thing.</p>\n</blockquote>\n<p>I think it is strategically bad to start teaching people how to update mathlib in one way if they have no other dependency and another way if they have other dependencies. We should only teach the command that work in both cases and makes the intention clear.</p>",
        "id": 438113616,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715438369
    },
    {
        "content": "<p>I think if people depend on both mathlib and another package, they are likely to have a bad time whatever we tell them</p>",
        "id": 438175390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715509927
    },
    {
        "content": "<p>(At least, if the other project is just as picky about the Std / toolchain version as mathlib is)</p>",
        "id": 438175457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715510032
    },
    {
        "content": "<p>So far, depending on both Mathlib and Duper matches your description.</p>",
        "id": 438314863,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715592329
    },
    {
        "content": "<p>Many projects depend on Mathlib and checkdecls (all projects with a modern blueprint). And one can imagine other tiny libs like checkdecls adding one gadget.</p>",
        "id": 438369044,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715608543
    }
]