[
    {
        "content": "<p>Is there any way to combine Lean4 with symbolic computation? One challenge I've encountered is the mismatch between Lean's logic, which operates on propositions, and the intricacies of symbolic computations. Specifically, situations arise where expressions like \"(1/a&gt;0):Prop\" and \"(1/a&gt;0*2):Prop\" mismatch as expected, leading to frustration and confusion.</p>",
        "id": 423545099,
        "sender_full_name": "ByronW",
        "timestamp": 1709017900
    },
    {
        "content": "<p>There is <a href=\"https://robertylewis.com/leanmm/\">https://robertylewis.com/leanmm/</a> but nobody maintains it afaik.</p>",
        "id": 423549636,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709020233
    },
    {
        "content": "<p>For these kinds of problems, I'd rather advice you to learn how to prove that one implies the other.</p>",
        "id": 423549784,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709020303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Combining.20Lean.20with.20Symbolic.20Computation.20to.20Resolve.20Matching/near/423549784\">said</a>:</p>\n<blockquote>\n<p>For these kinds of problems, I'd rather advice you to learn how to prove that one implies the other.</p>\n</blockquote>\n<p>Thanks. I know this project. And the two propositions match through theorems like \"a&gt;b-&gt;b=c-&gt;a&gt;c\". However, my aim is to explore more efficient and automated approaches to address these types of problems. Ideally, I'm looking for a built-in package or functionality in Lean that can seamlessly handle these types of matching issues.</p>",
        "id": 423551716,
        "sender_full_name": "ByronW",
        "timestamp": 1709021208
    },
    {
        "content": "<p>We kinda have. Often you can use the tactic <code>convert</code> or something like that.</p>",
        "id": 423552720,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709021714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Combining.20Lean.20with.20Symbolic.20Computation.20to.20Resolve.20Matching/near/423552720\">said</a>:</p>\n<blockquote>\n<p>We kinda have. Often you can use the tactic <code>convert</code> or something like that.</p>\n</blockquote>\n<p>Thank you, this indeed proves it. What if I want to use the prop as a hypothesis for a theorem? For example,  look at<br>\n<code>theorem am_gm2 {x y:ℝ}(ha:x≥0)(hb:y≥0):x+y≥2*Real.sqrt (x*y):=by sorry</code>. Then there is a type mismatch  in\"<code>am_gm2 p1 p2 --(p1:1/b&gt;=0),(p2:(1/a)*2&gt;=0*2)</code>\"</p>",
        "id": 423556580,
        "sender_full_name": "ByronW",
        "timestamp": 1709023397
    },
    {
        "content": "<p>Use <code> ` </code> to enclose code, or else Zulip markdown mangles everything with a <code>*</code> in (you can edit your post). For more information see <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 423559264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709024083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"694084\">ByronW</span> <a href=\"#narrow/stream/113489-new-members/topic/Combining.20Lean.20with.20Symbolic.20Computation.20to.20Resolve.20Matching/near/423556580\">said</a>:</p>\n<blockquote>\n<p>What if I want to use the prop as a hypothesis for a theorem? </p>\n</blockquote>\n<p>Please post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of a situation where <code>convert</code> does not do the job for you. I'll try to find a workaround.</p>",
        "id": 423563961,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709025632
    }
]