[
    {
        "content": "<p>Hi all, learning Lean 4 with the \"Functional Programming in Lean\" book, been great fun so far!</p>\n<p>I tried modifying the <code>doug</code> utility introduced in chapter 7.1 to handle parsing multiple config arguments using <code>ExceptT</code>. However, I get an <code>uncaught exception</code> error when trying this that I don't understand - the minimally viable code I can find to reproduce this is, in <code>Main.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">ExceptStack</span> <span class=\"o\">:=</span> <span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">argToConfig</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">ExceptStack</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"--ok\"</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"valid arg processed\"</span>\n    <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"s2\">\"invalid arg\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">buildConfig</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ExceptStack</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">xs.foldlM</span> <span class=\"n\">argToConfig</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">buildConfig</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"valid: {n}\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">err</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"n\">err</span>\n</code></pre></div>\n<p>Trying to run it gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>iwooden@mbp lean-except-bug % lake build\n[0/2] Building Main\n[1/2] Compiling Main\n[2/2] Linking lean-except-bug\niwooden@mbp lean-except-bug % .lake/build/bin/lean-except-bug\nvalid: 0\niwooden@mbp lean-except-bug % .lake/build/bin/lean-except-bug --ok\nvalid arg processed\nvalid: 1\niwooden@mbp lean-except-bug % .lake/build/bin/lean-except-bug --notok\nuncaught exception: invalid arg\n</code></pre></div>\n<p>The idea here is that I have some default object (in chapter 7.1 this would be the <code>Config</code>), use something like <code>List.foldlM</code> to make changes in that object for valid arguments, with \"short-circuiting\" for invalid arguments. Note that if I use <code>Except String Nat</code> here instead of <code>ExceptT String IO Nat</code> it works, but I'd like the <code>IO</code> context available so I can do e.g. filesystem checks as part of the validation.</p>\n<p>I have two questions:</p>\n<ol>\n<li>Why does this typecheck/compile? I would've hoped to avoid things like uncaught exceptions.</li>\n<li>What should I use instead of <code>List.foldlM</code> here? I can, of course, manually write a recursive function to traverse the list in this context, but I was hoping there's something in the standard library that would work.</li>\n</ol>\n<p>Again, thanks so much for putting work into Lean and the great accompanying books! I'm having a great time, just this one issue has me scratching my head. Thanks!</p>",
        "id": 438477519,
        "sender_full_name": "iwooden",
        "timestamp": 1715648216
    },
    {
        "content": "<p>Ahhh, got it. After lots of trial and error, that <code>.error</code> inside of <code>argToConfig</code> is (for some reason) an <code>EStateM.Result.error</code> instead of an <code>Except.error</code>. Explicitly using the latter solves this issue and no longer results in an <code>uncaught exception</code>.</p>\n<p>Fairly confusing bug for a newcomer, but I guess being more explicit is one of the first things I should have tried.</p>",
        "id": 438505738,
        "sender_full_name": "iwooden",
        "timestamp": 1715666107
    },
    {
        "content": "<p>(although looking at it a bit more, <code>EStateM</code> should work as well here? Looks like it's supposed to be equivalent to <code>ExceptT ε (StateM σ)</code>, not sure why you'd get an uncaught exception from it)</p>",
        "id": 438507229,
        "sender_full_name": "iwooden",
        "timestamp": 1715667036
    },
    {
        "content": "<p>The issue is that <code>.error</code> is not resolving the way you might hope/expect: it is <code>EStateM.error</code>, which is the constructor for the exception state of the <code>IO</code> monad, rather than the additional exception path you have added via <code>ExceptT</code>. The <code>String</code> you passed to it is coerced to a <code>IO.Exception</code> and so since you didn't use the <code>tryCatch</code> implementation of the <code>IO</code> monad it propagated a <code>userError \"invalid arg\"</code> out of <code>main</code> and the runtime caught it.</p>\n<p>What you should do instead is use <code>throw</code>, which is the generic function provided by the <code>MonadExcept</code> instance for <code>ExceptT</code> (or even more precisely, <code>throwThe</code> which allows you to specify which type you expect if the monad simultaneously supports throwing more than one type, in your case <code>String</code> and <code>IO.Exception</code>).</p>",
        "id": 438884059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715806625
    }
]