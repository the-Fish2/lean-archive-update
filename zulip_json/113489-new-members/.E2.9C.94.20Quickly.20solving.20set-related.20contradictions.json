[
    {
        "content": "<p>As part of inverting on typing rules, I end up with a lot of cases that can quickly be dismissed by eye, but I'm finding it difficult to do so concisely in Lean. The contradictions mostly follow the shape of the examples below, and I've included my attempt to prove them false. However, this is a lot to do for each case manually, so I wondered if I'm missing a tactic or some other technique that could dismiss these cases easily?</p>\n<p>Thanks in advance for any assistance.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∪</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">k.Nonempty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Finset.singleton_nonempty</span> <span class=\"mi\">5</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">∪</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.Nonempty.inr</span> <span class=\"n\">h1</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h</span>\n  <span class=\"n\">intro</span> <span class=\"n\">neg</span>\n  <span class=\"n\">simp_all</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"bp\">≠</span> <span class=\"o\">{</span><span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">neg</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Finset.ext_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">neg</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">neg</span> <span class=\"mi\">6</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">neg</span>\n</code></pre></div>",
        "id": 421070238,
        "sender_full_name": "James Reynolds",
        "timestamp": 1707753831
    },
    {
        "content": "<p>It doesn't seem like <code>aesop</code> can do it on its own, but it can with a little help:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∪</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ne_of_apply_ne</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">∈</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"n\">aesop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"bp\">≠</span> <span class=\"o\">{</span><span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ne_of_apply_ne</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"bp\">∈</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 421072802,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707754541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"688561\">James Reynolds</span> has marked this topic as resolved.</p>",
        "id": 421209573,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707818003
    }
]