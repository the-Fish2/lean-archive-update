[
    {
        "content": "<p>I'm trying to prove a lemma \"cons_erase\" in analogy to Finset.erase_cons. The last line below gives as error because it wants to match mem_cons_self a s ?m with mem_cons_self a s (_: a \\notin s), and for some reason it can't do it--why can't it match them?<br>\nIs there a better way--or any way--to prove the lemma? </p>\n<p>section<br>\nopen Finset</p>\n<p>variable {α: Type} [DecidableEq α] <br>\nvariable (s: Finset α)</p>\n<p>example (as: a ∈ s): a ∉ Finset.erase s a:= by<br>\n  exact not_mem_erase a s</p>\n<p>example (as: a ∉ s) (as2: a ∉ s): cons a s as = cons a s as2 := by<br>\n  rfl</p>\n<p>example (as: a ∉ s): a ∈ cons a s as:= by<br>\n  exact mem_cons_self a s</p>\n<p>lemma cons_erase (as: a ∈ s): s = cons a (erase s a) (not_mem_erase a s) := by<br>\n  have aes:= not_mem_erase a s<br>\n  ext x<br>\n  constructor<br>\n  . by_cases xa: x = a <br>\n    . intro<br>\n      exact mem_cons_self a (erase s a)</p>",
        "id": 430191121,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1711678792
    },
    {
        "content": "<p>you'll have better luck getting a response if you use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 430195002,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711681623
    },
    {
        "content": "<p>Tip: you can follow the links <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> and <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for advice about more efficient ways to ask questions here.</p>",
        "id": 430195009,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711681633
    },
    {
        "content": "<p>You can prove your lemma with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cons_erase</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">):</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">not_mem_erase</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">aes</span><span class=\"o\">:=</span> <span class=\"n\">not_mem_erase</span> <span class=\"n\">a</span> <span class=\"n\">s</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cons_eq_insert</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">erase_eq_iff_eq_insert</span> <span class=\"n\">as</span> <span class=\"n\">aes</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 430195024,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711681648
    },
    {
        "content": "<p>Matt was faster with the tip but I also have a proof!</p>",
        "id": 430195042,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711681674
    },
    {
        "content": "<p>That being said I would love to explain more about your attempt but it is full of error messages so I’m not sure which one was worrying you most. And it’s also a good general advice to stop at the first error message. Sometimes Lean gets completely confused by the first error and the next messages are completely misleading as a result.</p>",
        "id": 430195213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711681808
    },
    {
        "content": "<p>Last piece of advice before I go to bed: the way I found the proof was by removing the lines having errors, typing <code>simp?</code> and then <code>apply?</code>, and then cleaning up the resulting proof. I didn’t even try to understand what the statement was saying…</p>",
        "id": 430195322,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711681915
    },
    {
        "content": "<p>Okay thanks <span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span>  and <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> ! Mainly it seems that I'm learning how to post a question. :)</p>",
        "id": 430195772,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1711682310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432565\">Jeremy Kahn</span> has marked this topic as resolved.</p>",
        "id": 430196230,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711682722
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"432565\">@Jeremy Kahn</span> did we meet in Poland in 1986?)</p>",
        "id": 430251245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711716531
    },
    {
        "content": "<p>Yes, presumably we did, because we would generally hang out with the UK team, and I vaguely remember doing so in 1986. But to be honest I have no recollection if we did. </p>\n<p>On the other hand, I do remember meeting in Providence in 2022. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 430255983,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1711718764
    },
    {
        "content": "<p>Learning how to ask questions is 100% part of the normal learning here, it’s totally fine. People are happy to help. And I can’t wait to see formalization of your work in geometry!</p>",
        "id": 430269275,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711724582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Implicit.20terms.20and.20matching/near/430251245\">said</a>:</p>\n<blockquote>\n<p>(<span class=\"user-mention silent\" data-user-id=\"432565\">Jeremy Kahn</span> did we meet in Poland in 1986?)</p>\n</blockquote>\n<p>And then somehow you got separated and developed a different attraction to fancy pants. (I’m afraid that joke is a bit too technical, requiring to know both Kevin’s clothes and Jeremy’s work).</p>",
        "id": 430275438,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711727064
    }
]