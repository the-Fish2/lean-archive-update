[
    {
        "content": "<p>Hi, I have one more result I would like to include before submitting my definitions of tightness of measures, which is in a sense a consequence of the Ulam tightness theorem. However, I'm struggling with how to pass to a subspace here (and back...). What is the proper way to approach this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.Regular</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.ProbabilityMeasure</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.Portmanteau</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Uniformity</span> <span class=\"n\">Uniform</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">Set</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ENNReal</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- A measure `μ` is separable if there is a separable set `S` such that `μ S = μ Set.univ`. -/</span>\n <span class=\"kd\">def</span> <span class=\"n\">IsSeparable</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">∃</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">TopologicalSpace.IsSeparable</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">μ</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">μ</span> <span class=\"n\">Set.univ</span>\n\n<span class=\"sd\">/-- A measure `μ` is pre-tight if for all `0 &lt; ε`, there exists `K` totally bounded such that</span>\n<span class=\"sd\">  `μ Kᶜ ≤ ε`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">IsPretight</span> <span class=\"o\">[</span><span class=\"n\">UniformSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">TotallyBounded</span> <span class=\"n\">K</span> <span class=\"bp\">∧</span> <span class=\"n\">μ</span> <span class=\"n\">K</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"sd\">/-- Ulam tightness theorem, which I have already proven. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">of_separableSpace_on_metric</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace.SeparableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">OpensMeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFiniteMeasure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsPretight</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- The proof idea is simple: if `μ` is separable, then there exists a separable set `S` such that</span>\n<span class=\"c1\">-- `μ S = μ Set.univ`. On the subspace (closure S) we can invoke `of_separableSpace_on_metric` to get that</span>\n<span class=\"c1\">-- `μ` is pre-tight on this subspace. As this has full measure, we want to lift this back.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">of_isSeparable_on_metric</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OpensMeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsSeparable</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsFiniteMeasure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsPretight</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"n\">hSμ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.PseudoMetrizableSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">infer_instance</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.SeparableSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">hSc</span> <span class=\"o\">:=</span> <span class=\"n\">TopologicalSpace.IsSeparable.closure</span> <span class=\"n\">hS</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">closure</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">Set.univ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Subtype.coe_image_univ</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hSc</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">of_separableSpace_on_metric</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 436666189,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714647227
    },
    {
        "content": "<p>Does anyone have pointers on this? I tried proving the result directly by adapting my proof of the Ulam tightness theorem, but for the necessary auxiliary results, I ended up with even more subtyping problems, so I don't think that is the way to go... I believe the above should be able to work, but I'm too inexperienced with subtypes to get it to work</p>",
        "id": 436840701,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714725445
    },
    {
        "content": "<p>If you like more context, this is  the last thing I need in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12394\">#12394</a> (other than cleaning up / moving some of the auxiliary results)</p>",
        "id": 436841605,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714725864
    },
    {
        "content": "<p>can’t you “manually” make the MeasureSpace instance using something like  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subtype.opensMeasurableSpace#doc\">docs#Subtype.opensMeasurableSpace</a> ?</p>",
        "id": 436849204,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1714729144
    },
    {
        "content": "<p>But if you want to avoid subtypes it’s probably not the right approach</p>",
        "id": 436849270,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1714729174
    },
    {
        "content": "<p>Thank you for your suggestion! I'd like to use the result that I have proven (if possible) to prove the result I still have open. If you think that it is better to work via subtypes, I'm happy to try this. However, I'm getting a new TC problem here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The proof idea is simple: if `μ` is separable, then there exists a separable set `S` such that</span>\n<span class=\"c1\">-- `μ S = μ Set.univ`. On the subspace (closure S) we can invoke `of_separableSpace_on_metric` to</span>\n<span class=\"c1\">-- get that `μ` is pre-tight on this subspace. As this has full measure, we want to lift this back.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">of_isSeparable_on_metric</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OpensMeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsSeparable</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsFiniteMeasure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsPretight</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"n\">hSμ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.PseudoMetrizableSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">infer_instance</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.SeparableSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">hSc</span> <span class=\"o\">:=</span> <span class=\"n\">TopologicalSpace.IsSeparable.closure</span> <span class=\"n\">hS</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">closure</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">Set.univ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Subtype.coe_image_univ</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hSc</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">mα</span> <span class=\"o\">:</span> <span class=\"n\">MeasureSpace</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">μ</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Subtype.opensMeasurableSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">MeasureSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Measure.Subtype.measureSpace</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">of_separableSpace_on_metric</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">this.volume</span><span class=\"o\">)</span> <span class=\"c1\">-- fails with</span>\n    <span class=\"c1\">--synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized</span>\n    <span class=\"c1\">--Subtype.instMeasurableSpace</span>\n    <span class=\"c1\">--inferred</span>\n    <span class=\"c1\">--MeasureSpace.toMeasurableSpace</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 436851397,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714730027
    },
    {
        "content": "<p>An alternative approach would be to prove my auxiliary results for subtypes all the way, although I expect that to face similar problems...</p>",
        "id": 436851550,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714730080
    },
    {
        "content": "<p>What happens if you swaps the <code>have</code>-s with <code>let</code>-s? That might work</p>",
        "id": 436870166,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1714737911
    },
    {
        "content": "<p>Thank you, this is actually getting me very close (a bit sloppy still). I have three sorry's left, where I think the second and third require some way of relating <code>volume</code> back to my measure <code>μ</code> that I'm not aware of. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The proof idea is simple: if `μ` is separable, then there exists a separable set `S` such that</span>\n<span class=\"c1\">-- `μ S = μ Set.univ`. On the subspace (closure S) we can invoke `of_separableSpace_on_metric` to</span>\n<span class=\"c1\">-- get that `μ` is pre-tight on this subspace. As this has full measure, we want to lift this back.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">of_isSeparable_on_metric</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OpensMeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsSeparable</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsFiniteMeasure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsPretight</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"n\">hSμ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.PseudoMetrizableSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">infer_instance</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.SeparableSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">hSc</span> <span class=\"o\">:=</span> <span class=\"n\">TopologicalSpace.IsSeparable.closure</span> <span class=\"n\">hS</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">closure</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">Set.univ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Subtype.coe_image_univ</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hSc</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">letI</span> <span class=\"n\">mα</span> <span class=\"o\">:</span> <span class=\"n\">MeasureSpace</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">μ</span><span class=\"o\">⟩</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">Subtype.opensMeasurableSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"n\">letI</span> <span class=\"n\">mS</span> <span class=\"o\">:</span> <span class=\"n\">MeasureSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Measure.Subtype.measureSpace</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">IsFiniteMeasure</span> <span class=\"n\">mS.volume</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"o\">{</span> <span class=\"n\">measure_univ_lt_top</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">}</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">Set.univ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"n\">IsFiniteMeasure.measure_univ_lt_top</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">this</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">of_separableSpace_on_metric</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">mS.volume</span><span class=\"o\">)</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">hK</span><span class=\"o\">,</span> <span class=\"n\">hKe</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"n\">use</span> <span class=\"n\">K</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.totallyBounded_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">intro</span> <span class=\"n\">δ</span> <span class=\"n\">hδ</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hK</span> <span class=\"n\">δ</span> <span class=\"n\">hδ</span>\n    <span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">Finite.image</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">hN.1</span>\n    <span class=\"n\">aesop</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 436872991,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714739092
    },
    {
        "content": "<p>Here is the second one: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">IsFiniteMeasure</span> <span class=\"n\">mS.volume</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Measure.Subtype.volume_univ</span> <span class=\"o\">(</span><span class=\"n\">MeasurableSet.nullMeasurableSet</span> <span class=\"n\">measurableSet_closure</span><span class=\"o\">)]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">measure_lt_top</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and for the third one let me actually read your definition of pre-tight measure, I'm giving measure theory this semester so I have never heard of it yet : )</p>",
        "id": 436873874,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1714739464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> <a href=\"#narrow/stream/113489-new-members/topic/Subspaces.2C.20topological.20and.20measurable.20properties/near/436873874\">said</a>:</p>\n<blockquote>\n<p>Here is the second one: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">IsFiniteMeasure</span> <span class=\"n\">mS.volume</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Measure.Subtype.volume_univ</span> <span class=\"o\">(</span><span class=\"n\">MeasurableSet.nullMeasurableSet</span> <span class=\"n\">measurableSet_closure</span><span class=\"o\">)]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">measure_lt_top</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and for the third one let me actually read your definition of pre-tight measure, I'm giving measure theory this semester so I have never heard of it yet : )</p>\n</blockquote>\n<p>Thank you! I think pre-tight measures are not particularly beautiful, as they depend on the metric space structure of the space. However, getting a totally bounded set can sometimes be useful</p>",
        "id": 436874281,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714739620
    },
    {
        "content": "<p>Here is the first one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.SeparableSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">TopologicalSpace.IsSeparable.separableSpace</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TopologicalSpace.IsSeparable.closure</span> <span class=\"n\">hS</span>\n</code></pre></div>",
        "id": 436874858,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1714739864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> <a href=\"#narrow/stream/113489-new-members/topic/Subspaces.2C.20topological.20and.20measurable.20properties/near/436874858\">said</a>:</p>\n<blockquote>\n<p>Here is the first one:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.SeparableSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">TopologicalSpace.IsSeparable.separableSpace</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TopologicalSpace.IsSeparable.closure</span> <span class=\"n\">hS</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you! The remaining sorry (after applying <code>apply le_trans ?_ hKe</code>) becomes <code>↑↑μ (Subtype.val '' K)ᶜ ≤ ↑↑volume Kᶜ</code>, which I guess should be independent of the definition of pre-tight.</p>",
        "id": 436875374,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714740063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> <a href=\"#narrow/stream/113489-new-members/topic/Subspaces.2C.20topological.20and.20measurable.20properties/near/436874858\">said</a>:</p>\n<blockquote>\n<p>Here is the first one:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.SeparableSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">TopologicalSpace.IsSeparable.separableSpace</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TopologicalSpace.IsSeparable.closure</span> <span class=\"n\">hS</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>So I think the crucial aspect that needs to be included here is <code>hSμ</code>, the fact that the measure concentrates on the set S, as the two complements do not necessarily align well. Or the problem is in relating volume to this measure, which I'm not sure of how to proceed either.</p>",
        "id": 436877145,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714740751
    },
    {
        "content": "<p>Ok so this is indeed non-obvious even ignoring the lean aspects (at least to me), this way (which I think is good?) you get rid of your subtyping problems and are working only in the bigger space:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hKe</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Measure.Subtype.volume_def</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MeasureTheory.Measure.comap_apply</span> <span class=\"n\">_</span> <span class=\"n\">Subtype.val_injective</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n      <span class=\"n\">refine</span> <span class=\"n\">MeasurableSet.subtype_image</span> <span class=\"bp\">?</span><span class=\"n\">refine_1.h.hs</span> <span class=\"n\">hs</span>\n      <span class=\"n\">apply</span> <span class=\"n\">measurableSet_closure</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 436880856,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1714742025
    },
    {
        "content": "<p>Thank you! By replacing <code>K</code> by <code>closure K</code>, we can clear the last sorry, so the current proof is given below. I think I'm very close, rewriting 'volume' helps a bit</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The proof idea is simple: if `μ` is separable, then there exists a separable set `S` such that</span>\n<span class=\"c1\">-- `μ S = μ Set.univ`. On the subspace (closure S) we can invoke `of_separableSpace_on_metric` to</span>\n<span class=\"c1\">-- get that `μ` is pre-tight on this subspace. As this has full measure, we want to lift this back.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">of_isSeparable_on_metric</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OpensMeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsSeparable</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsFiniteMeasure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsPretight</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"n\">hSμ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.SeparableSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">TopologicalSpace.IsSeparable.separableSpace</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TopologicalSpace.IsSeparable.closure</span> <span class=\"n\">hS</span>\n  <span class=\"n\">letI</span> <span class=\"n\">mα</span> <span class=\"o\">:</span> <span class=\"n\">MeasureSpace</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">μ</span><span class=\"o\">⟩</span>\n  <span class=\"c1\">--letI := Subtype.opensMeasurableSpace (closure S)</span>\n  <span class=\"n\">letI</span> <span class=\"n\">mS</span> <span class=\"o\">:</span> <span class=\"n\">MeasureSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Measure.Subtype.measureSpace</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">IsFiniteMeasure</span> <span class=\"n\">mS.volume</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Measure.Subtype.volume_univ</span> <span class=\"o\">(</span><span class=\"n\">MeasurableSet.nullMeasurableSet</span> <span class=\"n\">measurableSet_closure</span><span class=\"o\">)]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">measure_lt_top</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">of_separableSpace_on_metric</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">mS.volume</span><span class=\"o\">)</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">hK</span><span class=\"o\">,</span> <span class=\"n\">hKe</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"k\">have</span> <span class=\"n\">hSμ</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">μ</span> <span class=\"n\">Set.univ</span> <span class=\"o\">:=</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">measure_mono</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Set.subset_univ</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hSμ.ge</span> <span class=\"o\">(</span><span class=\"n\">measure_mono</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">subset_closure</span><span class=\"o\">))</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">TotallyBounded.closure</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.totallyBounded_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">intro</span> <span class=\"n\">δ</span> <span class=\"n\">hδ</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hK</span> <span class=\"n\">δ</span> <span class=\"n\">hδ</span>\n    <span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">Finite.image</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">hN.1</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">iUnion_coe_set</span><span class=\"o\">,</span> <span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">Subtype.exists</span><span class=\"o\">,</span> <span class=\"n\">exists_and_right</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span>\n      <span class=\"n\">iUnion_exists</span><span class=\"o\">,</span> <span class=\"n\">image_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">preimage_iUnion</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hN.right</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">hKe</span> <span class=\"o\">:</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hKe</span>\n      <span class=\"n\">apply</span> <span class=\"n\">measure_mono</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.compl_subset_compl</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subset_closure</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hKe</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Measure.Subtype.volume_def</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MeasureTheory.Measure.comap_apply</span> <span class=\"n\">_</span> <span class=\"n\">Subtype.val_injective</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">volume</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span>\n      <span class=\"n\">apply</span> <span class=\"n\">measure_mono</span>\n      <span class=\"gr\">sorry</span>\n\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n      <span class=\"n\">refine</span> <span class=\"n\">MeasurableSet.subtype_image</span> <span class=\"bp\">?</span><span class=\"n\">refine_1.h.hs</span> <span class=\"n\">hs</span>\n      <span class=\"n\">apply</span> <span class=\"n\">measurableSet_closure</span>\n    <span class=\"bp\">·</span> <span class=\"n\">measurability</span>\n</code></pre></div>",
        "id": 436885120,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714743356
    },
    {
        "content": "<p>I still need to clean it up a bit more, but I'm now down to one (mathematically) trivial claim, so I think I should be able to handle it! Thanks a lot for all the help! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The proof idea is simple: if `μ` is separable, then there exists a separable set `S` such that</span>\n<span class=\"c1\">-- `μ S = μ Set.univ`. On the subspace (closure S) we can invoke `of_separableSpace_on_metric` to</span>\n<span class=\"c1\">-- get that `μ` is pre-tight on this subspace. As this has full measure, we want to lift this back.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">of_isSeparable_on_metric</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OpensMeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsSeparable</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsFiniteMeasure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsPretight</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"n\">hSμ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.SeparableSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">TopologicalSpace.IsSeparable.separableSpace</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TopologicalSpace.IsSeparable.closure</span> <span class=\"n\">hS</span>\n  <span class=\"n\">letI</span> <span class=\"n\">mα</span> <span class=\"o\">:</span> <span class=\"n\">MeasureSpace</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">μ</span><span class=\"o\">⟩</span>\n  <span class=\"c1\">--letI := Subtype.opensMeasurableSpace (closure S)</span>\n  <span class=\"n\">letI</span> <span class=\"n\">mS</span> <span class=\"o\">:</span> <span class=\"n\">MeasureSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Measure.Subtype.measureSpace</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">IsFiniteMeasure</span> <span class=\"n\">mS.volume</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Measure.Subtype.volume_univ</span> <span class=\"o\">(</span><span class=\"n\">MeasurableSet.nullMeasurableSet</span> <span class=\"n\">measurableSet_closure</span><span class=\"o\">)]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">measure_lt_top</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">of_separableSpace_on_metric</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">mS.volume</span><span class=\"o\">)</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">hK</span><span class=\"o\">,</span> <span class=\"n\">hKe</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"k\">have</span> <span class=\"n\">hSμ</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">μ</span> <span class=\"n\">Set.univ</span> <span class=\"o\">:=</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">measure_mono</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Set.subset_univ</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hSμ.ge</span> <span class=\"o\">(</span><span class=\"n\">measure_mono</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">subset_closure</span><span class=\"o\">))</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">TotallyBounded.closure</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.totallyBounded_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">intro</span> <span class=\"n\">δ</span> <span class=\"n\">hδ</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hK</span> <span class=\"n\">δ</span> <span class=\"n\">hδ</span>\n    <span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">Finite.image</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">hN.1</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">iUnion_coe_set</span><span class=\"o\">,</span> <span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">Subtype.exists</span><span class=\"o\">,</span> <span class=\"n\">exists_and_right</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span>\n      <span class=\"n\">iUnion_exists</span><span class=\"o\">,</span> <span class=\"n\">image_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">preimage_iUnion</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hN.right</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">hKe</span> <span class=\"o\">:</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hKe</span>\n      <span class=\"n\">apply</span> <span class=\"n\">measure_mono</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.compl_subset_compl</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subset_closure</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hKe</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Measure.Subtype.volume_def</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MeasureTheory.Measure.comap_apply</span> <span class=\"n\">_</span> <span class=\"n\">Subtype.val_injective</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">MeasureTheory.measure_inter_add_diff₀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">MeasureTheory.measure_inter_add_diff₀</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">volume</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">volume</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span>\n      <span class=\"n\">congr</span>\n      <span class=\"n\">apply</span> <span class=\"n\">add_le_add</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">measure_mono</span>\n        <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">closure_subtype</span><span class=\"o\">,</span> <span class=\"n\">Subtype.val_inj</span><span class=\"o\">]</span>\n        <span class=\"n\">constructor</span>\n        <span class=\"bp\">·</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_compl_iff</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">]</span>\n        <span class=\"bp\">·</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_compl_iff</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">MeasurableSet.nullMeasurableSet</span>\n        <span class=\"n\">measurability</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">MeasurableSet.nullMeasurableSet</span>\n        <span class=\"n\">measurability</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n      <span class=\"n\">refine</span> <span class=\"n\">MeasurableSet.subtype_image</span> <span class=\"bp\">?</span><span class=\"n\">refine_1.h.hs</span> <span class=\"n\">hs</span>\n      <span class=\"n\">apply</span> <span class=\"n\">measurableSet_closure</span>\n    <span class=\"bp\">·</span> <span class=\"n\">measurability</span>\n</code></pre></div>",
        "id": 436888931,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714744565
    },
    {
        "content": "<p>My pleasure</p>",
        "id": 436898219,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1714747313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> <a href=\"#narrow/stream/113489-new-members/topic/Subspaces.2C.20topological.20and.20measurable.20properties/near/436898219\">said</a>:</p>\n<blockquote>\n<p>My pleasure</p>\n</blockquote>\n<p>I ended up with this for now, I'm afraid I can't really break down the length much more without introducing many intermediate results, so I'll see what comes up in review!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The proof idea is simple: if `μ` is separable, then there exists a separable set `S` such that</span>\n<span class=\"c1\">-- `μ S = μ Set.univ`. On the subspace (closure S) we can invoke `of_separableSpace_on_metric` to</span>\n<span class=\"c1\">-- get that `μ` is pre-tight on this subspace. As this has full measure, we want to lift this back.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">of_isSeparable_on_metric</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OpensMeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsSeparable</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsFiniteMeasure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsPretight</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"n\">hSμ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.SeparableSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">TopologicalSpace.IsSeparable.separableSpace</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TopologicalSpace.IsSeparable.closure</span> <span class=\"n\">hS</span>\n  <span class=\"n\">letI</span> <span class=\"n\">mα</span> <span class=\"o\">:</span> <span class=\"n\">MeasureSpace</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">μ</span><span class=\"o\">⟩</span>\n  <span class=\"n\">letI</span> <span class=\"n\">mS</span> <span class=\"o\">:</span> <span class=\"n\">MeasureSpace</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Measure.Subtype.measureSpace</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">IsFiniteMeasure</span> <span class=\"n\">mS.volume</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Measure.Subtype.volume_univ</span> <span class=\"o\">(</span><span class=\"n\">MeasurableSet.nullMeasurableSet</span> <span class=\"n\">measurableSet_closure</span><span class=\"o\">)]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">measure_lt_top</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">of_separableSpace_on_metric</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">mS.volume</span><span class=\"o\">)</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">hK</span><span class=\"o\">,</span> <span class=\"n\">hKe</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"k\">have</span> <span class=\"n\">hSμ</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">μ</span> <span class=\"n\">Set.univ</span> <span class=\"o\">:=</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">measure_mono</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Set.subset_univ</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hSμ.ge</span> <span class=\"o\">(</span><span class=\"n\">measure_mono</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">subset_closure</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"n\">hSμ_co</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MeasureTheory.measure_compl</span><span class=\"o\">,</span> <span class=\"n\">tsub_eq_zero_of_le</span> <span class=\"n\">hSμ.ge</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">measurability</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hSμ</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">measure_ne_top</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">TotallyBounded.closure</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.totallyBounded_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">intro</span> <span class=\"n\">δ</span> <span class=\"n\">hδ</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hK</span> <span class=\"n\">δ</span> <span class=\"n\">hδ</span>\n    <span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">Finite.image</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">hN.1</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">iUnion_coe_set</span><span class=\"o\">,</span> <span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">Subtype.exists</span><span class=\"o\">,</span> <span class=\"n\">exists_and_right</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span>\n      <span class=\"n\">iUnion_exists</span><span class=\"o\">,</span> <span class=\"n\">image_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">preimage_iUnion</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hN.right</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">hKe</span> <span class=\"o\">:</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hKe</span>\n      <span class=\"n\">apply</span> <span class=\"n\">measure_mono</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.compl_subset_compl</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subset_closure</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hKe</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Measure.Subtype.volume_def</span><span class=\"o\">,</span> <span class=\"n\">MeasureTheory.Measure.comap_apply</span> <span class=\"n\">_</span> <span class=\"n\">Subtype.val_injective</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">MeasureTheory.measure_inter_add_diff₀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n        <span class=\"bp\">←</span> <span class=\"n\">MeasureTheory.measure_inter_add_diff₀</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">volume</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">volume</span><span class=\"o\">]</span>\n      <span class=\"n\">congr</span>\n      <span class=\"n\">apply</span> <span class=\"n\">add_le_add</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">measure_mono</span>\n        <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">mem_compl_iff</span><span class=\"o\">,</span> <span class=\"n\">closure_subtype</span><span class=\"o\">,</span> <span class=\"n\">Subtype.exists</span><span class=\"o\">,</span>\n          <span class=\"n\">exists_and_left</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right_right</span><span class=\"o\">,</span> <span class=\"n\">and_self_right</span><span class=\"o\">]</span>\n        <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_compl_iff</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"o\">((</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"bp\">''</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">\\</span> <span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nonpos_iff_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hSμ_co</span><span class=\"o\">]</span>\n          <span class=\"n\">apply</span> <span class=\"n\">measure_mono</span>\n          <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n          <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_diff</span><span class=\"o\">,</span> <span class=\"n\">mem_compl_iff</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"n\">_</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">MeasurableSet.nullMeasurableSet</span>\n        <span class=\"n\">measurability</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">MeasurableSet.nullMeasurableSet</span>\n        <span class=\"n\">measurability</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"bp\">↦</span> <span class=\"n\">MeasurableSet.subtype_image</span> <span class=\"n\">measurableSet_closure</span> <span class=\"n\">hs</span>\n    <span class=\"bp\">·</span> <span class=\"n\">measurability</span>\n</code></pre></div>",
        "id": 436907321,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714749942
    },
    {
        "content": "<p>I'll post my message from a different <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tight.20measures/near/434821260\">thread</a> here as well, as it relates to this thread:</p>\n<p>Hi, <a href=\"https://github.com/leanprover-community/mathlib4/pull/12394\">#12394</a> is up for review and defines <code>IsSeparable</code>, <code>IsPretight</code> and <code>IsTight</code> and shows some relationships between them. Main result is Ulam's tightness theorem (and a strengthened version that only requires <code>IsSeparable</code> rather than <code>SeparableSpace</code>. It is still building, but I don't expect any problems there! I think most results are straightforward, although some proofs are a bit longish: I've used 4 private lemma's to break up the work a bit, but still Ulam's tightness theorem and its strengthened form require some legwork.</p>",
        "id": 437012755,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714820699
    }
]