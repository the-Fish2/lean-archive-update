[
    {
        "content": "<p>Hello,<br>\nI am going through MIL and I encountered this question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"bp\">∩</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span> <span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hn2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">hen</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">at</span> <span class=\"n\">hp</span>\n</code></pre></div>\n<p>With the tactic state showing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">intro</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Irreducible</span> <span class=\"n\">n</span>\n<span class=\"n\">hn2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n<span class=\"n\">hen</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">False</span>\n</code></pre></div>\n<p>Now I want to unfold <code>hp : Irreducible n</code> but I can't do it. I  would like to know why and how I should be proceeding without knowing much about the content of the library.</p>\n<p>Thank you!</p>",
        "id": 409417035,
        "sender_full_name": "Tian Hsia",
        "timestamp": 1703174213
    },
    {
        "content": "<p>In general unfolding definitions is a bad idea (and here Lean complains since <code>Irreducible</code> is a structure). On the other hand, there is usually, immediately after the definition, a lemma <code>..._iff</code> that allows you to mathematically unfold the definition (ie it replaces the name of the property with its mathematical definition). In this case it is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=irreducible_iff#doc\">docs#irreducible_iff</a></p>",
        "id": 409419788,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703175035
    },
    {
        "content": "<p>So <code>rw [irreducible_iff] at hp</code> does what you want.</p>",
        "id": 409419928,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703175076
    },
    {
        "content": "<p>But you can finish directly using <code>Prime</code> if you prefer</p>",
        "id": 409420047,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703175120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20some.20things.20can.20not.20be.20unfolded.20and.20how.20to.20proceed/near/409419788\">said</a>:</p>\n<blockquote>\n<p>In general unfolding definition is a bad idea (and here Lean complains since <code>Irreducible</code> is a structure). On the other hand, there is usually, immediately after the definition, a lemma <code>..._iff</code> that allows you to mathematically unfold the definition (ie it replace the name of the property with its mathematical definition). In this case it is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=irreducible_iff#doc\">docs#irreducible_iff</a></p>\n</blockquote>\n<p>That's very helpful. Thanks!</p>",
        "id": 409421467,
        "sender_full_name": "Tian Hsia",
        "timestamp": 1703175542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"478462\">Tian Hsia</span> has marked this topic as resolved.</p>",
        "id": 409421489,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703175548
    }
]