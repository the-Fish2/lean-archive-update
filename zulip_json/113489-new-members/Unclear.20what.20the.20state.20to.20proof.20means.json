[
    {
        "content": "<p>I am porting some Lean3 code right now, and I am getting stuck on the final part of a proof where the state is <code>?refine_1.intro.intro.a ∈ M₁_wo_c.edgeSet</code>. I am unsure what this means and how I can prove this. See <a href=\"https://live.lean-lang.org/#code=import%20Mathlib.Combinatorics.SimpleGraph.Matching%0D%0Aimport%20Mathlib.Combinatorics.SimpleGraph.Connectivity%0D%0A%0D%0Auniverse%20u%0D%0A%0D%0Anamespace%20SimpleGraph%0D%0A%0D%0Avariable%20%5BFintype%20V%5D%20%7BV%20%3A%20Type%20u%7D%20%7BG%20%3A%20SimpleGraph%20V%7D%20(v%20%3A%20V)%0D%0A%0D%0A%2F-%20A%20graph%20with%20exclusively%20disjoint%20perfect%20matchings%20-%2F%0D%0Adef%20IsExclusivelyDisjointPMGraph%20(G%20%3A%20SimpleGraph%20V)%20%3A%20Prop%20%3A%3D%0D%0A%20%20%7BM%20%3A%20Subgraph%20G%20%7C%20M.IsPerfectMatching%7D.PairwiseDisjoint%20Subgraph.edgeSet%0D%0A%0D%0A%2F-%20Ported%20from%20https%3A%2F%2Fgithub.com%2Fleanprover-community%2Fmathlib%2Fblob%2Fkmill_hamiltonian%2Fsrc%2Fhamiltonian2.lean%20-%2F%0D%0A--%20Keeping%20only%20the%20part%20of%20the%20graph%20that%20includes%20the%20connected%20component%0D%0Adef%20ConnectedComponent.induce%20(c%20%3A%20G.ConnectedComponent)%20%3A%20SimpleGraph%20V%20%3A%3D%0D%0A%20%20(G.induce%20c.supp).spanningCoe%0D%0A%0D%0Anamespace%20Subgraph%0D%0A%0D%0A%2F--%20Adjusted%20from%20https%3A%2F%2Fgithub.com%2Fleanprover-community%2Fmathlib4%2Fblob%2F6096b4a14c21be6102c467d7a49b93faa9993e64%2FMathlib%2FCombinatorics%2FSimpleGraph%2FFinite.lean%23L292-L293%20-%2F%0D%0A%40%5Breducible%5D%0D%0Adef%20LocallyFinite%20(M%20%3A%20Subgraph%20G)%20%3A%3D%0D%0A%20%20%E2%88%80%20v%20%3A%20V%2C%20Fintype%20(M.neighborSet%20v)%0D%0A%0D%0Alemma%20sub_graph_leq_G%20(M%20%3A%20Subgraph%20G)%20%3A%20M.spanningCoe%20%E2%89%A4%20G%20%3A%3D%20by%0D%0A%20%20intros%20u%20v%0D%0A%20%20simp%0D%0A%20%20exact%20Adj.adj_sub%0D%0A%0D%0Avariable%20(M%E2%82%81%20M%E2%82%82%20%3A%20Subgraph%20G)%20%5BLocallyFinite%20M%E2%82%81%5D%20%5BLocallyFinite%20M%E2%82%82%5D%0D%0A%20%20%5BLocallyFinite%20(M%E2%82%81%20%E2%8A%94%20M%E2%82%82)%5D%20%5BFintype%20(M%E2%82%81%20%E2%8A%94%20M%E2%82%82).verts%5D%20%5BDecidableEq%20(M%E2%82%81%20%E2%8A%94%20M%E2%82%82).verts%5D%0D%0A%0D%0A%2F-%20Ported%20from%20https%3A%2F%2Fgithub.com%2Fleanprover-community%2Fmathlib%2Fblob%2Fkmill_hamiltonian%2Fsrc%2Fhamiltonian2.lean%20-%2F%0D%0A--%20The%20predicate%20that%20the%20graph%20of%20the%20symmetric%20difference%20of%20M%E2%82%81%20and%20a%20connected%20component%20is%20a%20perfect%20matching%0D%0Alemma%20flip_part_of_disjoint%20(M%E2%82%81%20M%E2%82%82%20%3A%20Subgraph%20G)%20(hd%20%3A%20Disjoint%20M%E2%82%81.edgeSet%20M%E2%82%82.edgeSet)%0D%0A%20%20(hM%E2%82%81%20%3A%20M%E2%82%81.IsPerfectMatching)%20(hM%E2%82%82%20%3A%20M%E2%82%82.IsPerfectMatching)%0D%0A%20%20(c%20%3A%20(M%E2%82%81%20%E2%8A%94%20M%E2%82%82).spanningCoe.ConnectedComponent)%0D%0A%20%20(hsd%20%3A%20(symmDiff%20M%E2%82%81.spanningCoe%20c.induce)%20%E2%89%A4%20G)%20%3A%0D%0A%20%20(SimpleGraph.toSubgraph%20(symmDiff%20M%E2%82%81.spanningCoe%20c.induce)%20hsd).IsPerfectMatching%20%3A%3D%20by%20sorry%0D%0A%0D%0A%2F-%20Ported%20from%20https%3A%2F%2Fgithub.com%2Fleanprover-community%2Fmathlib%2Fblob%2Fkmill_hamiltonian%2Fsrc%2Fhamiltonian2.lean%20-%2F%0D%0Alemma%20flip_part_of_disjoint_le%20(M%E2%82%81%20M%E2%82%82%20%3A%20Subgraph%20G)%0D%0A%20%20(c%20%3A%20(M%E2%82%81%20%E2%8A%94%20M%E2%82%82).spanningCoe.ConnectedComponent)%20%3A%0D%0A%20%20symmDiff%20M%E2%82%81.spanningCoe%20c.induce%20%E2%89%A4%20M%E2%82%81.spanningCoe%20%E2%8A%94%20M%E2%82%82.spanningCoe%20%3A%3D%20by%20%0D%0A%20%20%20%20sorry%0D%0A%0D%0A%2F-%20Ported%20from%20https%3A%2F%2Fgithub.com%2Fleanprover-community%2Fmathlib%2Fblob%2Fkmill_hamiltonian%2Fsrc%2Fhamiltonian2.lean%20-%2F%0D%0Alemma%20ne_symm_diff%20(hed%20%3A%20G.IsExclusivelyDisjointPMGraph)%20(M%E2%82%81%20M%E2%82%82%20%3A%20Subgraph%20G)%0D%0A%20%20(hM%E2%82%81%20%3A%20M%E2%82%81.IsPerfectMatching)%20(hM%E2%82%82%20%3A%20M%E2%82%82.IsPerfectMatching)%20(hne%20%3A%20M%E2%82%81%20%E2%89%A0%20M%E2%82%82)%20(v%20%3A%20V)%20%3A%0D%0A%20%20M%E2%82%81.spanningCoe%20%E2%89%A0%20symmDiff%20M%E2%82%81.spanningCoe%20((M%E2%82%81%20%E2%8A%94%20M%E2%82%82).spanningCoe.connectedComponentMk%20v).induce%20%3A%3D%20by%0D%0A%20%20%20%20sorry%0D%0A%0D%0A%2F--%20The%20union%20of%20two%20distinct%20perfect%20matchings%20in%20a%20graph%20with%20the%20property%20that%20all%20perfect%0D%0Amatchings%20are%20disjoint%20is%20connected.%20-%2F%0D%0A%2F-%20Ported%20from%3A%20https%3A%2F%2Fgithub.com%2Fleanprover-community%2Fmathlib%2Fblob%2Fkmill_hamiltonian%2Fsrc%2Fhamiltonian2.lean-%2F%0D%0Atheorem%20excl_disj_PM_graph_union_connected%20(hed%20%3A%20G.IsExclusivelyDisjointPMGraph)%0D%0A%20%20(hM%E2%82%81%20%3A%20M%E2%82%81.IsPerfectMatching)%20(hM%E2%82%82%20%3A%20M%E2%82%82.IsPerfectMatching)%20(hne%20%3A%20M%E2%82%81%20%E2%89%A0%20M%E2%82%82)%20%3A%0D%0A%20%20(M%E2%82%81%20%E2%8A%94%20M%E2%82%82).spanningCoe.Connected%20%3A%3D%20by%0D%0A%20%20%20%20rw%20%5Bconnected_iff%5D%0D%0A%20%20%20%20refine%20%E2%9F%A8%3F_%2C%20%3F_%E2%9F%A9%0D%0A%20%20%20%20%2F-%20Show%20that%20M%E2%82%81%20%E2%8A%94%20M%E2%82%82%20is%20Preconnected%20-%2F%0D%0A%20%20%20%20%C2%B7%20by_contra%20h%0D%0A%20%20%20%20%20%20simp%20only%20%5BPreconnected%2C%20not_forall%5D%20at%20h%0D%0A%20%20%20%20%20%20obtain%20%E2%9F%A8v%2C%20v'%2C%20h%E2%9F%A9%20%3A%3D%20h%0D%0A%20%20%20%20%20%20--%20show%20that%20v%2C%20v'%20are%20not%20reachable%20in%20M%E2%82%81%20%E2%8A%94%20M%E2%82%82%0D%0A%20%20%20%20%20%20--%20have%20hin%20%3A%20v'%20%E2%88%88%20M%E2%82%81.verts%20%3A%3D%20by%20refine%20mem_verts_if_mem_edge%20%3Fhe%20%3Fhv%0D%0A%20%20%20%20%20%20have%20hdisj%20%3A%3D%20hed%20hM%E2%82%81%20hM%E2%82%82%20hne%0D%0A%20%20%20%20%20%20have%20unionleqG%20%3A%20M%E2%82%81.spanningCoe%20%E2%8A%94%20M%E2%82%82.spanningCoe%20%E2%89%A4%20G%20%3A%3D%20sup_le%20(sub_graph_leq_G%20M%E2%82%81)%20(sub_graph_leq_G%20M%E2%82%82)%0D%0A%20%20%20%20%20%20let%20c%20%3A%3D%20(M%E2%82%81%20%E2%8A%94%20M%E2%82%82).spanningCoe.connectedComponentMk%20v%0D%0A%20%20%20%20%20%20let%20symmDiffM%E2%82%81_c%20%3A%3D%20symmDiff%20M%E2%82%81.spanningCoe%20c.induce%0D%0A%20%20%20%20%20%20have%20symmDiffleqG%20%3A%20symmDiffM%E2%82%81_c%20%E2%89%A4%20G%20%3A%3D%20le_trans%20(flip_part_of_disjoint_le%20M%E2%82%81%20M%E2%82%82%20c)%20unionleqG%0D%0A%20%20%20%20%20%20let%20symmDiffSubgraph%20%3A%3D%20G.toSubgraph%20symmDiffM%E2%82%81_c%20symmDiffleqG%0D%0A%20%20%20%20%20%20have%20symmDiffIsPM%20%3A%3D%20flip_part_of_disjoint%20M%E2%82%81%20M%E2%82%82%20hdisj%20hM%E2%82%81%20hM%E2%82%82%20c%20symmDiffleqG%0D%0A%20%20%20%20%20%20have%20M1neqsymmDiff%20%3A%20M%E2%82%81.spanningCoe%20%E2%89%A0%20symmDiffM%E2%82%81_c%20%3A%3D%20ne_symm_diff%20hed%20M%E2%82%81%20M%E2%82%82%20hM%E2%82%81%20hM%E2%82%82%20hne%20v%0D%0A%20%20%20%20%20%20have%20symmDiffDisjoint%20%3A%20Disjoint%20M%E2%82%81.edgeSet%20symmDiffSubgraph.edgeSet%20%3A%3D%20by%0D%0A%20%20%20%20%20%20%2F-%20M%E2%82%81%20%E2%89%A4%20G%20and%20M%E2%82%81%20%E2%88%86%20c%20%E2%89%A4%20G%20but%20also%20M%E2%82%81%20isPM%20and%20(M%E2%82%81%20%E2%88%86%20c).isPM%2C%20so%20M%E2%82%81%20and%20(M%E2%82%81%20%E2%88%86%20c)%20are%20disjoint%20because%20of%20hed%20(remember%20this%20is%20a%20proof%20by%20contradiction)-%2F%0D%0A%20%20%20%20%20%20%20%20--%20hed%20M%E2%82%81%20hM%E2%82%81%20symmDiffSubgraph%20symmDiffIsPM%0D%0A%20%20%20%20%20%20%20%20sorry%0D%0A%20%20%20%20%20%20let%20M%E2%82%81_wo_c%20%3A%3D%20M%E2%82%81.spanningCoe%20%5C%20c.induce%0D%0A%20%20%20%20%20%20have%20h1%20%3A%20M%E2%82%81_wo_c.edgeSet%20%E2%89%A4%20M%E2%82%81.spanningCoe.edgeSet%20%3A%3D%20by%20sorry%0D%0A%20%20%20%20%20%20have%20h2%20%3A%20M%E2%82%81_wo_c.edgeSet%20%E2%89%A4%20symmDiffSubgraph.edgeSet%20%3A%3D%20by%20sorry%0D%0A%20%20%20%20%20%20--%20show%20that%20M%E2%82%81%20without%20c%20(the%20connected%20component%20containing%20v)%20contains%20v'%3A%0D%0A%20%20%20%20%20%20have%20h3%20%3A%20M%E2%82%81_wo_c.Adj%20v%20v'%20%3A%3D%20by%20sorry%0D%0A%20%20%20%20%20%20apply%20symmDiffDisjoint%20h1%20h2%0D%0A%20%20%20%20%20%20exact%20h3%0D%0A%20%20%20%20%2F-%20Show%20that%20V%20is%20nonempty%20-%2F%0D%0A%20%20%20%20%C2%B7%20by_contra%20h%0D%0A%20%20%20%20%20%20rw%20%5Bnot_nonempty_iff%5D%20at%20h%0D%0A%20%20%20%20%20%20apply%20hne%0D%0A%20%20%20%20%20%20exact%20h.elim%20v\">the following environment for the relevant code</a>)</p>",
        "id": 438753342,
        "sender_full_name": "Lode Vermeulen",
        "timestamp": 1715762458
    },
    {
        "content": "<p>It means that you need to prove something is in <code>M₁_wo_c.edgeSet</code>, but you haven't told lean <em>what</em> yet</p>",
        "id": 438754922,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715763037
    },
    {
        "content": "<p>There will be another goal further down with label <code>refine_1.intro.intro.a</code> where the goal is the type of the value you need</p>",
        "id": 438755096,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715763099
    },
    {
        "content": "<p>If you already have a hypothesis <code>hx : x ∈ M₁_wo_c.edgeSet</code>, you can write <code>exact hx</code> and lean will figure out the rest</p>",
        "id": 438755255,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715763150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Unclear.20what.20the.20state.20to.20proof.20means/near/438755096\">said</a>:</p>\n<blockquote>\n<p>There will be another goal further down with label <code>refine_1.intro.intro.a</code> where the goal is the type of the value you need</p>\n</blockquote>\n<p>Right, it states as a second goal <code>Sym2 V</code>. I guess then this is the type of <code>refine_1.intro.intro.a</code> of which I need to show membership?</p>",
        "id": 438762403,
        "sender_full_name": "Lode Vermeulen",
        "timestamp": 1715765564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690587\">Lode Vermeulen</span> has marked this topic as resolved.</p>",
        "id": 438762729,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715765677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690587\">Lode Vermeulen</span> has marked this topic as unresolved.</p>",
        "id": 438762908,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715765752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Unclear.20what.20the.20state.20to.20proof.20means/near/438754922\">said</a>:</p>\n<blockquote>\n<p>It means that you need to prove something is in <code>M₁_wo_c.edgeSet</code>, but you haven't told lean <em>what</em> yet</p>\n</blockquote>\n<p>And the goal is that I need to prove that <em>something</em> is in <code>M₁_wo_c.edgeSet</code>, i.e. it is not empty?</p>",
        "id": 438763070,
        "sender_full_name": "Lode Vermeulen",
        "timestamp": 1715765803
    },
    {
        "content": "<p>Well, depends</p>",
        "id": 438763150,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715765836
    },
    {
        "content": "<p>In this case I think so, but generally you may have another goal where you need to prove something else about this specific value <code>?refine_1.intro.intro.a ∈ M₁_wo_c.edgeSet</code></p>",
        "id": 438763407,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715765926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Unclear.20what.20the.20state.20to.20proof.20means/near/438763407\">said</a>:</p>\n<blockquote>\n<p>generally you may have another goal where you need to prove something else about this specific value <code>?refine_1.intro.intro.a ∈ M₁_wo_c.edgeSet</code></p>\n</blockquote>\n<p>Wouldn't the variable you need to prove membership of be named in that case? Otherwise you wouldn't know what it is referencing to.</p>",
        "id": 438763592,
        "sender_full_name": "Lode Vermeulen",
        "timestamp": 1715765994
    },
    {
        "content": "<p><code>refine_1.intro.intro.a</code> is a name, if not a great one :)</p>",
        "id": 438764222,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715766211
    },
    {
        "content": "<p>You can see more clearly what's going on with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">symmDiffDisjoint</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.bot_eq_empty</span><span class=\"o\">,</span> <span class=\"n\">Set.le_eq_subset</span><span class=\"o\">,</span> <span class=\"n\">Set.subset_empty_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It turns out that you need to prove <code>False</code> given that your set is empty; that is, your set is not empty</p>",
        "id": 438764404,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715766282
    },
    {
        "content": "<p>Oh wow, that is great</p>",
        "id": 438764609,
        "sender_full_name": "Lode Vermeulen",
        "timestamp": 1715766358
    },
    {
        "content": "<p>With the set in question being <code>M₁_wo_c.edgeSet</code>?</p>",
        "id": 438764670,
        "sender_full_name": "Lode Vermeulen",
        "timestamp": 1715766369
    },
    {
        "content": "<p>Yep</p>",
        "id": 438778144,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715771611
    }
]