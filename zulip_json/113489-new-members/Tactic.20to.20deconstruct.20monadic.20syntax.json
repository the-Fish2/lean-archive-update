[
    {
        "content": "<p>I'm working on a proof, and I have a hypothesis of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h_eval</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">t_eval</span> <span class=\"bp\">←</span> <span class=\"n\">none</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">Term.Abs</span> <span class=\"n\">t_eval</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"n\">some</span> <span class=\"n\">t'</span>\n</code></pre></div>\n<p>I'd like to collapse this to show a contradiction, but I'm not quite sure what to apply here. I tried <code>simp at h_eval</code>, but that made no progress.</p>",
        "id": 410335692,
        "sender_full_name": "McCoy",
        "timestamp": 1703793242
    },
    {
        "content": "<p>Related -- is there an easy way to apply <code>cases</code> to syntax of this form (for e.g. <code>t1_eval</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h_eval</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">t1_eval</span> <span class=\"bp\">←</span> <span class=\"n\">eval</span> <span class=\"n\">n</span><span class=\"bp\">✝</span> <span class=\"o\">[]</span> <span class=\"n\">a</span><span class=\"bp\">✝¹</span>\n    <span class=\"k\">let</span> <span class=\"n\">t2_eval</span> <span class=\"bp\">←</span> <span class=\"n\">eval</span> <span class=\"n\">n</span><span class=\"bp\">✝</span> <span class=\"o\">[]</span> <span class=\"n\">a</span><span class=\"bp\">✝</span>\n    <span class=\"n\">eval</span> <span class=\"n\">n</span><span class=\"bp\">✝</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">Term.App</span> <span class=\"n\">t1_eval</span> <span class=\"n\">t2_eval</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"n\">some</span> <span class=\"n\">t'</span>\n</code></pre></div>",
        "id": 410357819,
        "sender_full_name": "McCoy",
        "timestamp": 1703806389
    },
    {
        "content": "<p>There is a simp lemma for this but it is hidden by <code>bind</code>. Try <code>simp [bind]</code></p>",
        "id": 410358479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703806684
    },
    {
        "content": "<p>No progress, unfortunately</p>",
        "id": 410358621,
        "sender_full_name": "McCoy",
        "timestamp": 1703806751
    },
    {
        "content": "<p><code>import Std</code>?</p>",
        "id": 410358638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703806759
    },
    {
        "content": "<p>ah, sorry -- <code>simp [bind] at h_eval</code></p>",
        "id": 410358677,
        "sender_full_name": "McCoy",
        "timestamp": 1703806782
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 410358689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703806788
    },
    {
        "content": "<p>I think I got it by applying <code>simp [bind]</code> to the hypothesis.</p>",
        "id": 410358828,
        "sender_full_name": "McCoy",
        "timestamp": 1703806840
    },
    {
        "content": "<p>thanks for the MWE tip! I'll play around with the web editor later so I can be more helpful when asking Qs</p>",
        "id": 410358877,
        "sender_full_name": "McCoy",
        "timestamp": 1703806868
    }
]