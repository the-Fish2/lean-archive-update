[
    {
        "content": "<p>I'm trying to get my feet wet with Lean after reading parts of \"mathematics in Lean\". I'm trying to define the Complex numbers and to prove that they're a field (<code>instance : Field Complex</code>). Unfortunately, the VS Code extension starts to completely hang (\"busily processing\") and the RAM usage is completely off the charts. Since this seems like a very simple task, I'm assuming that I'm doing something very wrong on a fundamental level. I'm more or less following the approach as in \"mathematics in lean\" (where the Gaussian Integers are defined).</p>\n<p>I'm thinking that maybe the instance definition should be split up somehow. Or that I may be overusing <code>simp</code> or <code>ring</code> tactics.</p>\n<p>Anyone have an idea? I can share my code of course</p>",
        "id": 433000394,
        "sender_full_name": "Tainnor",
        "timestamp": 1712967700
    },
    {
        "content": "<p>it's possible that you're using <code>simp</code> in a way that results in an infinite loop... feel free to share your code using <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 433003307,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712970449
    },
    {
        "content": "<p>I assume Lean works for simple examples?</p>",
        "id": 433003413,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712970544
    },
    {
        "content": "<p>Yeah, everything was working correctly initially, but at some point, it just started getting slower and slower. I don't think it's stuck forever, but it's just stuck for an insanely long time (so much that it's not practical to use any more)</p>",
        "id": 433003451,
        "sender_full_name": "Tainnor",
        "timestamp": 1712970591
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Complex₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">im</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Complex₁.mk</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ℂ₁\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Complex₁</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Complex₁</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_re</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_im</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">one_re</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">one_im</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">z.re</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">z.im</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">neg_def</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">z.re</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">z.im</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">neg_re</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">neg_im</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">z.im</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">z.re</span> <span class=\"bp\">+</span> <span class=\"n\">w.re</span><span class=\"o\">,</span> <span class=\"n\">z.im</span> <span class=\"bp\">+</span> <span class=\"n\">w.im</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_def</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">z.re</span> <span class=\"bp\">+</span> <span class=\"n\">w.re</span><span class=\"o\">,</span> <span class=\"n\">z.im</span> <span class=\"bp\">+</span> <span class=\"n\">w.im</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_re</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"n\">z.re</span> <span class=\"bp\">+</span> <span class=\"n\">w.re</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_im</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"n\">z.im</span> <span class=\"bp\">+</span> <span class=\"n\">w.im</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span> <span class=\"bp\">-</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span><span class=\"o\">,</span> <span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_def</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span> <span class=\"bp\">-</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span><span class=\"o\">,</span> <span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_re</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span> <span class=\"bp\">-</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_im</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"n\">z.re</span> <span class=\"bp\">*</span> <span class=\"n\">w.im</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">w.re</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"n\">ℂ₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_def</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">z.re</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">z.im</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_re</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"n\">z.re</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_im</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">z.im</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">Complex₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">+</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">add_assoc</span><span class=\"o\">)</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"n\">nsmulRec</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">*</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n  <span class=\"n\">zsmul</span> <span class=\"o\">:=</span> <span class=\"n\">zsmulRec</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">.⁻¹</span><span class=\"o\">)</span>\n  <span class=\"n\">exists_pair_ne</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span>\n    <span class=\"n\">intro</span> <span class=\"n\">contra</span>\n    <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">contra</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">contra</span>\n  <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">anz</span>\n    <span class=\"k\">have</span> <span class=\"n\">denom_pos</span> <span class=\"o\">:</span> <span class=\"n\">a.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">arez</span> <span class=\"o\">:</span> <span class=\"n\">a.re</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span><span class=\"o\">)</span>\n    <span class=\"bp\">.</span> <span class=\"k\">calc</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">inv_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">qsmul</span> <span class=\"o\">:=</span> <span class=\"n\">qsmulRec</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 433003539,
        "sender_full_name": "Tainnor",
        "timestamp": 1712970644
    },
    {
        "content": "<p>The later parts of the code might be broken btw, since it was stuck so badly that I couldn't really get much feedback</p>",
        "id": 433003682,
        "sender_full_name": "Tainnor",
        "timestamp": 1712970812
    },
    {
        "content": "<p>Put <code>suppress_compilation</code> at the top of the file and all your problems will be solved.</p>",
        "id": 433080477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713044389
    },
    {
        "content": "<p>This is not a great situation we have here. It was hard to diagnose what was going on because setting <code>trace.profiler</code> true did not indicate any unreasonable timings. It took me a while to remember that when you see this symptom you should try <code>suppress_compilation</code>. I don't really understand what the problem is or how one might go about warning users that this is the issue. Another fix is <code>noncomputable instance : Field Complex₁ where</code>... . Somehow Lean is trying to generate runnable code for this declaration.</p>",
        "id": 433083274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713047216
    },
    {
        "content": "<p>PS <code>mul_inv_cancel</code> looks more challenging than all the other ones -- I'd be tempted to factor this one out as a standalone lemma.</p>",
        "id": 433083376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713047300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/VSCode.20stuck/near/433080477\">said</a>:</p>\n<blockquote>\n<p>Put <code>suppress_compilation</code> at the top of the file and all your problems will be solved.</p>\n</blockquote>\n<p>wow, that does seem to fix the issue! thanks<br>\n(for reference, if anyone stumbles across this, it needs to go below the imports, because it's apparently defined as a mathlib tactic)</p>",
        "id": 433087971,
        "sender_full_name": "Tainnor",
        "timestamp": 1713052613
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/VSCode.20stuck/near/433083376\">said</a>:</p>\n<blockquote>\n<p>PS <code>mul_inv_cancel</code> looks more challenging than all the other ones -- I'd be tempted to factor this one out as a standalone lemma.</p>\n</blockquote>\n<p>I ended up extracting <code>theorem add_re_sq_im_sq_pos_of_nz {a : ℂ₁} (anz : a ≠ 0): a.re^2 + a.im^2 &gt; 0</code> and then, <code>mul_inv_cancel</code> reduces to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">anz</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a.re</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a.im</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">add_re_sq_im_sq_pos_of_nz</span> <span class=\"n\">anz</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 433090098,
        "sender_full_name": "Tainnor",
        "timestamp": 1713054831
    },
    {
        "content": "<p>Are you porting the <a href=\"https://github.com/ImperialCollegeLondon/complex-number-game?tab=readme-ov-file\">complex number game</a>?</p>",
        "id": 433091561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713056509
    },
    {
        "content": "<p>No, just going \"from scratch\" (using the lecture notes from the complex analysis class I'm taking)</p>",
        "id": 433091625,
        "sender_full_name": "Tainnor",
        "timestamp": 1713056557
    },
    {
        "content": "<p>trace.profiler should be able to capture this in the next RC</p>",
        "id": 433108335,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1713075963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"685366\">Tainnor</span> has marked this topic as resolved.</p>",
        "id": 433383701,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713214057
    }
]