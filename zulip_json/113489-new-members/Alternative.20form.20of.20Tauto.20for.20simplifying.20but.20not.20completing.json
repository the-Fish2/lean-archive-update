[
    {
        "content": "<p>Is there an alternative form of tauto to simplify a goal instead of completely solving it? For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Set</span> <span class=\"n\">Finset</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">divisors_eq_proper_union_self</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Nat.divisors</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.properDivisors</span> <span class=\"n\">n</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">divisors</span><span class=\"o\">,</span> <span class=\"n\">properDivisors</span><span class=\"o\">]</span>\n    <span class=\"n\">ext</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩,</span> <span class=\"n\">h3</span><span class=\"o\">⟩</span>\n    <span class=\"n\">tauto</span>\n</code></pre></div>",
        "id": 434842281,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1713818579
    },
    {
        "content": "<p>The tauto below  generates an error because it cannot completely solve the goal; however, it greatly simplifies it which I would like to keep as the proof easily follows.</p>",
        "id": 434842417,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1713818639
    },
    {
        "content": "<p>This isn't an answer to your question, but here's a way to finish your proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">divisors_eq_proper_union_self</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Nat.divisors</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.properDivisors</span> <span class=\"n\">n</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">divisors</span><span class=\"o\">,</span> <span class=\"n\">properDivisors</span><span class=\"o\">]</span>\n    <span class=\"n\">ext</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩,</span> <span class=\"n\">h3</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">omega</span>\n    <span class=\"bp\">·</span> <span class=\"n\">omega</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">lt_add_iff_pos_right</span><span class=\"o\">,</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">,</span> <span class=\"n\">dvd_refl</span><span class=\"o\">]</span>\n      <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 434843031,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713818855
    },
    {
        "content": "<p>The <code>simp only</code> came from <code>simp? [*]</code></p>",
        "id": 434843059,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713818866
    },
    {
        "content": "<p>One trick to handle simplifying a goal with a closing tactic is to use <code>suffices</code></p>",
        "id": 434843221,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713818915
    },
    {
        "content": "<p>Wow omega is powerful. Thanks for sharing.</p>",
        "id": 434843518,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1713819023
    },
    {
        "content": "<p>It's not very easy to use, but here's what I mean about suffices:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"bp\">·</span> <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n      <span class=\"bp\">·</span> <span class=\"n\">tauto</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 434844424,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713819356
    }
]