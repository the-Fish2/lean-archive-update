[
    {
        "content": "<p>I wrote my first DSL a few days ago - <a href=\"https://github.com/edrx/LuaTreeLean\">here</a>, <a href=\"http://anggtwu.net/LuaTreeLean/screenshot.png\">screenshot</a> - and I'm in a stage in which I still have to decompose each example in the Metaprogramming book into 10 smaller snippets to understand what is going on in it... and this looks like a good way to explore (specific) Syntax/TSyntax objects:</p>\n<div class=\"message_inline_image\"><a href=\"http://anggtwu.net/LuaTreeLean/screenshot.png\" title=\"screenshot\"><img src=\"https://uploads.zulipusercontent.net/c4183d75b20c722e0cb220af47ed38de02913f5a/687474703a2f2f616e67677477752e6e65742f4c7561547265654c65616e2f73637265656e73686f742e706e67\"></a></div><div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Command</span>\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"#withstring \"</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"a\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"b\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">repr</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"c\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">repr</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">raw</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"bp\">#</span><span class=\"n\">withstring</span><span class=\"w\"> </span><span class=\"s2\">\"a\"</span>\n<span class=\"bp\">#</span><span class=\"n\">withstring</span><span class=\"w\"> </span><span class=\"s2\">\"b\"</span>\n<span class=\"bp\">#</span><span class=\"n\">withstring</span><span class=\"w\"> </span><span class=\"s2\">\"c\"</span>\n</code></pre></div>\n<p>I know that <code>repr o</code> converts <code>o</code> to its repr as a string, and <code>#check o</code> prints o and its type - but <code>#check</code> is a command, so it has access to the current context...</p>\n<p>Is there a function that receives an object <code>o</code> and returns its type converted to a string?</p>",
        "id": 444131617,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1718157739
    },
    {
        "content": "<p>Could you give an example of an <code>o</code> and what you would like to obtain?</p>",
        "id": 444133483,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718159031
    },
    {
        "content": "<p>Oops, sorry!<br>\nIn my example above the <code>#withstring \"b\"</code> displays <code>repr x</code> without saying that its type is <code>TSyntax `str</code>.</p>",
        "id": 444139455,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1718163236
    },
    {
        "content": "<p>Do you need a string for your particular application? Or is this for use with <code>logInfo</code>?</p>",
        "id": 444143767,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718165785
    },
    {
        "content": "<p>It's for logInfo! I asked for the type \"as a string\" because that seemed to be general enough...</p>",
        "id": 444179872,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1718181695
    },
    {
        "content": "<p>...in the sense of: \"people that start from the code that returns the type as a string and then discover how that type was represented before being converted into a string\".</p>",
        "id": 444180398,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1718181852
    },
    {
        "content": "<p>I was planning to write a blog post, or something like that looks like one, to explain what I did to decypher some examples of the Metaprogramming book, and why I am still stuck at some other examples... would that be useful?</p>",
        "id": 444181721,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1718182259
    },
    {
        "content": "<p>Few things use <code>repr</code>, as it turns out. It's mostly for the case where you have a runtime representation that you want to turn into a string representation, where in metaprogramming you already are working with an <code>Expr</code> representation of the object rather than a runtime representation, and the <code>Expr</code> representation is \"richer\" in a number of ways. </p>\n<p>For example, with the <code>Expr</code> representation, you can compute the type of the term (as an <code>Expr</code>).</p>\n<p>For <code>repr</code>, if you really want to work with it, you would have to make your own version that also includes a <code>reprTypePrec</code> field for creating a representation of the type.</p>\n<p>Here's a simple <code>#check</code> command:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"w\"> </span><span class=\"n\">Meta</span>\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"#my_check \"</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">runTermElabM</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"c1\">-- go into term elaboration mode after processing any `variables` commands</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">elabTermAndSynthesize</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"c1\">-- elaborate `t` and run all elaboration tasks to completion</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">eTy</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">inferType</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"c1\">--  compute the type of `e`</span>\n<span class=\"w\">    </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"{e} : {eTy}\"</span><span class=\"w\"> </span><span class=\"c1\">-- log a MessageData with `e` and `eTy` embedded into it</span>\n\n<span class=\"bp\">#</span><span class=\"n\">my_check</span><span class=\"w\"> </span><span class=\"s2\">\"s\"</span>\n<span class=\"c1\">-- \"s\" : String</span>\n</code></pre></div>\n<p>The <code>logInfo</code> line is not using <code>repr</code> at all. Instead, <code>e</code> and <code>eTy</code> are both <code>Expr</code>s, they are being embedded into the <code>MessageData</code>, and then, eventually, they are pretty printed (not using <code>repr</code>) in such a way that you can hover over them in the InfoView and get informational popups.</p>",
        "id": 444289418,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718212534
    },
    {
        "content": "<p>Wow! That's exactly what I was looking for! Thanks! =)</p>",
        "id": 444306858,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1718217857
    },
    {
        "content": "<p>...except for one thing: sometimes I need to inspect objects whose types have metavariables - like here, in which <code>#my_check</code> gives the error <code>typeclass instance problem is stuck, it is often due to metavariables</code> but <code>#check</code> handles that in a nice way...</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\">    </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"s2\">\"foo\"</span>\n<span class=\"bp\">#</span><span class=\"n\">my_check</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"s2\">\"foo\"</span>\n</code></pre></div>\n<p>Is that trivial to fix? How?</p>",
        "id": 444307588,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1718218093
    },
    {
        "content": "<p>The \"typeclass instance problem is stuck\" error comes from <code>elabTermAndSynthesize</code>. You can do some of it manually to adjust some configuration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"w\"> </span><span class=\"n\">Meta</span>\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"#my_check \"</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">runTermElabM</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"c1\">-- go into term elaboration mode after processing any `variables` commands</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">elabTerm</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"c1\">-- elaborate `t` and run all elaboration tasks to completion</span>\n<span class=\"w\">    </span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">synthesizeSyntheticMVars</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">postpone</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">no</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ignoreStuckTC</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">eTy</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">inferType</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"c1\">--  compute the type of `e`</span>\n<span class=\"w\">    </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"{e} : {eTy}\"</span><span class=\"w\"> </span><span class=\"c1\">-- log a MessageData with `e` and `eTy` embedded into it</span>\n\n<span class=\"bp\">#</span><span class=\"n\">my_check</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"s2\">\"foo\"</span>\n<span class=\"c1\">-- logInfo ((MessageData.ofFormat ∘ format) \"foo\") : ?m.983 Unit</span>\n</code></pre></div>",
        "id": 444308350,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718218345
    },
    {
        "content": "<p>If you right click on <code>#check</code> and \"Go to Definition\" you can see how <code>#check</code> does it.</p>",
        "id": 444308466,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718218398
    }
]