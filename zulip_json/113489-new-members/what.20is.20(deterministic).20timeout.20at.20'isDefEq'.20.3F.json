[
    {
        "content": "<p>Continuing to work through  \"The Mechanics of Proof\", I am doing the exercise to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">≥</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>My attempt at a solution is as follows</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">≥</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h4</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">calc</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">addarith</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">ring</span>\n<span class=\"w\">  </span><span class=\"n\">cancel</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h4</span>\n</code></pre></div>\n<p>However this gives an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">timeout</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">isDefEq'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">maximum</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">heartbeats</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">reached</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">maxHeartbeats</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><strong>What does this mean? What caused it?</strong></p>\n<p>The error refers rot the line with <code>cancel</code> on it.</p>\n<hr>\n<p>If I comment out the <code>cancel</code> line and put the cursor at the end, info view reports</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">h4</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>which looks cancellable, especially since <code>x ≥ 1</code> by hypothesis <code>h2</code></p>",
        "id": 444818319,
        "sender_full_name": "rzeta0",
        "timestamp": 1718417694
    },
    {
        "content": "<p>I've googled but found nothing helpful. </p>\n<p>Should I interpret this as \"the proof is so bad the internal engine broke\" ?</p>",
        "id": 444865428,
        "sender_full_name": "rzeta0",
        "timestamp": 1718459685
    },
    {
        "content": "<p>You are asking a question about a bespoke tactic which only exists in the mechanics of proof repo, which greatly decreases the number of people who are able to answer the question.</p>",
        "id": 444866145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718460189
    },
    {
        "content": "<p>Understood Kevin - I was directed to this site by Heather Macbeth but I understand the limited interest in non-standard tactics. I will restrict my future questions to those that apply to lean/mathlib.</p>",
        "id": 444901222,
        "sender_full_name": "rzeta0",
        "timestamp": 1718480382
    },
    {
        "content": "<p>The question should be answered at some point! You might have to wait though :-)</p>",
        "id": 444906306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718483476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"724904\">@rzeta0</span> , which chapter of \"The Mechanics...\" is it?</p>",
        "id": 444906761,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718483761
    },
    {
        "content": "<p>I've gone through most of that book so maybe I have the solution lying somewhere</p>",
        "id": 444906840,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718483789
    },
    {
        "content": "<p>OK <span class=\"user-mention\" data-user-id=\"724904\">@rzeta0</span>  so this is how I solved it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">≥</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h3</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">≥</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">h2</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h4</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">≥</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">addarith</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h3</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h5</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">≥</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">calc</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">≥</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">ring</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">≥</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">h4</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h6</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">≥</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">cancel</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h5</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h7</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">addarith</span><span class=\"o\">[</span><span class=\"n\">h6</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">h7</span>\n</code></pre></div>\n<p>Let me have a look at your solution</p>",
        "id": 444907231,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718484029
    },
    {
        "content": "<p>Let's work through each part of this message:</p>\n<blockquote>\n<p>(deterministic) timeout at 'isDefEq', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)</p>\n</blockquote>\n<ul>\n<li><code>isDefEq</code> is the algorithm that checks whether two expressions are definitionally equal to one another</li>\n<li>Lean measures time in a <em>deterministic</em> way rather than using a clock, using the \"heartbeat clock\". At various points in the algorithm, the heartbeat clock is incremented.</li>\n<li>the algorithm timed out because it reached the maximum number of heartbeats. You can follow the suggestion to add the command <code>set_option maxHeartbeats NNN</code> before the <code>example</code> with a larger value of <code>NNN</code> to see if it will succeed if you wait long enough. Setting it to <code>0</code> turns off the timer.</li>\n</ul>\n<p>This does not mean the error is <em>because</em> of <code>isDefEq</code> to be sure. Rather, it's <code>isDefEq</code> that happened to be running when the timer went off. We can infer that the <code>cancel</code> tactic uses definitional equality inside the algorithm. Maybe it has a bug, maybe it doesn't, but it seems worth someone looking into why your example causes it to time out.</p>",
        "id": 444907969,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718484460
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"724904\">@rzeta0</span>, it looks like cancel indeed should work and indeed it doesn't work for me either.</p>\n<p>But there's still a way to finish your proof.</p>\n<p>So, you might have heard about it already, there's a website that can help you <a href=\"https://www.moogle.ai/search/raw?q=mul_le_mul\">find standard libarary proofs.</a>. I've used it to search for mul_le_mul (although I think my first search was le_mul, after which I narrowed down to mul_le_mul. le stands for less than or equal, mul stands for multiplication, these are both standard abbreviations in lean).</p>\n<p>Using this approach, I found <code>mul_le_mul_left</code>, which is a function that can take a proof of <code>0 &lt; x</code> and spit out a proof of <code>x * y ≤ x * 1 ↔ y ≤ 1</code>.  Since it is an implication, and we want to go forward we have to do <code>.mp</code> and then we feed it the proof you've got already, h4, to get <code>y ≤ 1</code></p>\n<p>Putting this all together (I'm leaving showing <code>0 &lt; x</code> as an exercise):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">≥</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h4</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">calc</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">addarith</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">ring</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">x_le_0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span><span class=\"w\"> </span><span class=\"n\">x_le_0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"w\"> </span><span class=\"n\">h4</span>\n</code></pre></div>",
        "id": 444910513,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718485319
    },
    {
        "content": "<p>Thanks Adam and Kyle - I appreciate you trying to help.</p>\n<p>Given the course \"Mechanics of Proof\" is a linear course for beginners, at this early point in the book we don't know about \"exact\" or \"mul_le_mul\" so I will keep searching for a solution using only the few things we have learned.</p>\n<p>I conclude from the comment earlier that \"cancel\" might have a bug as we can't find a reason it should fail here.</p>",
        "id": 444921177,
        "sender_full_name": "rzeta0",
        "timestamp": 1718494492
    },
    {
        "content": "<p>This seems to work (but doesn't seem to need  <code>0&lt;y</code> as suggested bt the course author):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">≥</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"c1\">-- have h3 : 0 &lt; x * y := by addarith [h]</span>\n<span class=\"w\">  </span><span class=\"c1\">-- cancel x at h3 -- h3: 0 &lt; y</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h4</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">calc</span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">ring</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">ring</span>\n<span class=\"w\">  </span><span class=\"n\">cancel</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h4</span>\n</code></pre></div>\n<p>I think the problem was that <code>cancel</code> can only right-cancel, not left-cancel....</p>",
        "id": 444925463,
        "sender_full_name": "rzeta0",
        "timestamp": 1718499238
    },
    {
        "content": "<p>I think very highly of Heather's course, and I benefited from doing parts of it myself, but I think it can be a little bit slow, and and I think it has an additional agenda besides just teaching people lean. I think this additional agenda is some kind of compliance with curriculum guidelines in an American university. Or maybe it's the fact that it needs to build up towards future maths courses. I'm not sure if I have a correct read on this, we would have to ask her.</p>\n<p>If your objective is to learn lean as fast as possible, a good material to learn from is Kevin's Natural Number Game:</p>\n<p><a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/\">https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/</a></p>\n<p>It has the added benefit of being really, really fun to play! </p>\n<p>But I think in the current state of the educational materials for lean, your best bet is probably doing both Heather's course and playing Kevin's game. The course covers more ground.</p>\n<p>Of course if your objective is getting a good grade in Math 2001, you might want to just keep cracking with the \"Mechanics...\" -- it can be a bit of a grind at times -- but it will be good for you!</p>\n<p>Best of luck!</p>",
        "id": 444953582,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718524886
    },
    {
        "content": "<p>Teaching how to use Lean is clearly not the main goal of this book. Teaching mathematics is the main goal. I don't think it was ever meant to be a general introduction to Lean.</p>",
        "id": 444953802,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718525075
    },
    {
        "content": "<p>Sure, but if you're trying to learn lean without too much prior computer science/ mathematics background, you have limited options. \"Mechanics of proof\" is one of the available options, so regardless of the intended purpose, it will fulfil that role on occasion. Natural Numbers Game is the other option. Other options that I'm aware of are targeted at a more advanced reader.</p>",
        "id": 444954140,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718525409
    },
    {
        "content": "<p>One of the things I might do some day is essentially extend NNG to work up to the proof of infinitely many primes. I think that would fill a nice niche in the introductory material for lean.</p>",
        "id": 444954275,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718525533
    },
    {
        "content": "<p>I was only commenting on your \"additional agenda\" comment. I feel you made it sound way more mysterious than it is.</p>",
        "id": 444955238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718526460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> , this is pretty much ancient history at this point (I disappeared from the field for many years to create and exit a biotech software startup), but this thread on <a href=\"#narrow/stream/113488-general/topic/Teaching.20lean.20to.20high.20school.20students\">teaching lean to high schoolers</a> is still very much of interest to me. I think both <em>Mechanics of proof</em> and <em>Natural Number Game</em> moved us in the right direction since then, but I think there's still work to do to make it easier for learners that are early on in their mathematical/ compsci journey.</p>\n<p>No mystery intended with the \"additional agenda\" :)</p>",
        "id": 444955887,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718527003
    },
    {
        "content": "<p>I very much agree that trying to find something suitable for high school students is very worthwhile. The mechanics of proof is targeting the right level of mathematical sophistication here. It probably wouldn’t work for your still of workshop because it assumes more available time.</p>",
        "id": 444958611,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718529309
    },
    {
        "content": "<p>I also fear this book will be frustrating to rzeta0 who seems to be interested in understanding more about what Lean is doing under the hood, and asks questions going in the direction of a formal specification of the grammar etc. This is simply not what this great book is about.</p>",
        "id": 444958734,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718529404
    },
    {
        "content": "<p>Thanks everyone for helping.</p>\n<p>I am an adult who went to university 25+ years ago but didn't study mathematics (I did physics, then a masters in computer science). That means I didn't learn about proofs and logic. I am learning those now by working through Terence Tao's Analysis I - including attempting all the exercises (<a href=\"https://analysis-solutions.blogspot.com\">https://analysis-solutions.blogspot.com</a> - caution they might be wrong). I previously read through JD Hawkins Proof and the Art of Mathematics and J Cummings Proofs : A Long Form Textbook. </p>\n<p>So I am self-teaching basic mathematics which most undergraduates would learn - and I thought learning Lean at a beginner-medium level would help make my mathematical thinking more robust. The aim isn't to learn a new language. If I ask about its internals or design it is because over 25 years in tech and gazillions of programming languages I have learned the importance of user-centric design. </p>\n<p>So far I am benefiting from Heather's course because it isn't too fast for me - I am a slow learner! </p>\n<p>I do create courses (youtube, blog, sometimes printed books) for topics I feel could benefit from more accessible and friendly content than is currently available. I did this previously and people seem to like it. I'm not sure if I'll get to that point with Lean but it is an idea. The audience would be the someone with maths to age 18 or someone with a numerate degree but not mathematics but with an interest. </p>\n<p>My long term learning objectives are to understand number theory better - and as someone with no mathematics education beyond age 18, I have to teach myself logic, proof, and then topics like analysis and complex analysis - eventually.</p>\n<p>I previously embarked on this journey ( <a href=\"https://www.youtube.com/@PrimesToRiemann/videos\">https://www.youtube.com/@PrimesToRiemann/videos</a> ) but stopped when I realised I would have to learn maths more deeply!</p>",
        "id": 444965940,
        "sender_full_name": "rzeta0",
        "timestamp": 1718535338
    },
    {
        "content": "<p>Sounds like an interesting journey <span class=\"user-mention\" data-user-id=\"724904\">@rzeta0</span>!</p>\n<p>I'm also interested in formalising elementary number theory. Currently I'm working on formalising solutions to IMO problems, which I'm contributing here:</p>\n<p><a href=\"https://github.com/dwrensha/compfiles\">https://github.com/dwrensha/compfiles</a></p>\n<p>In addition to being good fun, there is a hope this will help with development of reasoning capabilities of AI models.</p>",
        "id": 444967295,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718536527
    },
    {
        "content": "<p>Ah one more thing <span class=\"user-mention\" data-user-id=\"724904\">@rzeta0</span>,</p>\n<p>If you've got a lot of experience with programming languages, you could also work with <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/title_page.html\">Theorem Proving in Lean 4</a>. I worked through half of the book (until chapter 7) in ~2017/2018. It got a bit too hard for me after that. The resource covers lean more from first principles and I think is generally targeted at a more advanced reader than <em>Mechanics of proof</em> or <em>Natural Number Game</em>.</p>\n<p>Again, best of luck!</p>",
        "id": 444971709,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718540470
    }
]