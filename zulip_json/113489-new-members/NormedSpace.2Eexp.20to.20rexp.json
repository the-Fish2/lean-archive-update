[
    {
        "content": "<p>I'm trying to prove that the pmf for the Poisson distribution sums to 1 in lean (I'm aware of <code>PMF</code>, but I want to check the summability condition first), but I'm having a bit of a hard time rewriting the HasSum statement: I know that the usual proof is just a matter of multiplying through by <code>rexp r</code> and writing out the exponential series, but in lean I get a <code>NormedSpace.exp</code> instead of <code>rexp</code>; is there a way to convert between these, or should I be using a different result? I couldn't find what I was looking for through Loogle &amp; Moogle! Thanks in advance! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Exponential</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ENNReal</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ProbabilityTheory</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">PoissonPmf</span>\n\n<span class=\"sd\">/-- The pmf of the Poisson distribution depending on its rate-/</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">poissonPmfReal</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">Nat.factorial</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">poissonPmfRealSum</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasSum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">poissonPmfReal</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">poissonPmfReal</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">NormedSpace.expSeries_div_hasSum_exp</span> <span class=\"n\">ℝ</span> <span class=\"n\">r</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">rexp</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">NormedSpace.exp</span> <span class=\"n\">ℝ</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 411740243,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704721349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  Real.exp, NormedSpace.exp</p>",
        "id": 411740517,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704721454
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecialFunctions/Exponential.html#Real.exp_eq_exp_%E2%84%9D\">Real.exp_eq_exp_ℝ</a></p>",
        "id": 411740521,
        "sender_full_name": "loogle",
        "timestamp": 1704721455
    },
    {
        "content": "<p>(I was too lazy to type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>)</p>",
        "id": 411740581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704721484
    },
    {
        "content": "<p>Thanks! I was using <code>rexp</code>, I should've used Real.exp in the Loogle search turns out!</p>",
        "id": 411740591,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704721488
    },
    {
        "content": "<p>They're the same thing :)</p>",
        "id": 411740619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704721499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/NormedSpace.2Eexp.20to.20rexp/near/411740619\">said</a>:</p>\n<blockquote>\n<p>They're the same thing :)</p>\n</blockquote>\n<p>Yeah, I meant in the Loogle search (or I failed horribly)</p>",
        "id": 411740725,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704721536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>, is there a way to run <code>open Real</code> in loogle before a search?</p>",
        "id": 411740837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704721569
    },
    {
        "content": "<p>my Loogle query was<br>\n<code>\"Real.exp\", \"NormedSpace.exp\" </code><br>\ninstead of <br>\n<code>Real.exp, NormedSpace.exp</code><br>\nthat was the problem apparently! Thanks!</p>",
        "id": 411740939,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704721608
    },
    {
        "content": "<p>Nope, at least not yet.</p>",
        "id": 411740971,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704721619
    },
    {
        "content": "<p><code>\"Real.exp\"</code> will find all lemmas with <code>Real.exp</code> somewhere in the name; <code>Real.exp</code> will find all lemmas that mention that constant in their type.</p>",
        "id": 411741106,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704721666
    },
    {
        "content": "<p>Perhaps it's worth a note in the help text along the lines of \"Note that <code>scoped</code> notations like <code>n !</code> or <code>rexp x</code> or <code>\\sum x, x^2</code> are not currently supported\"</p>",
        "id": 411741123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704721671
    },
    {
        "content": "<p>Ah, the <code>open Real</code> would not only affect name resolution!<br>\nRight now these give parse errors, right?</p>",
        "id": 411741321,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704721734
    },
    {
        "content": "<p>I guess I mean <code>open scoped Real</code></p>",
        "id": 411741853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704721923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (open scoped Real in rexp), NormedSpace.exp</p>",
        "id": 411741990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704721973
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecialFunctions/Exponential.html#Real.exp_eq_exp_%E2%84%9D\">Real.exp_eq_exp_ℝ</a></p>",
        "id": 411741994,
        "sender_full_name": "loogle",
        "timestamp": 1704721973
    },
    {
        "content": "<p>Expression-scoped <code>open</code> is great!</p>",
        "id": 411742071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704722005
    }
]