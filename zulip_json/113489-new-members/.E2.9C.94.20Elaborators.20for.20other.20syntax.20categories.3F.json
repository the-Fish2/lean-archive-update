[
    {
        "content": "<p>Hi all!</p>\n<p>I am trying to learn how to write DSLs, and I've been able to write one - <a href=\"https://github.com/edrx/LuaTreeLean\">here</a> and <a href=\"http://anggtwu.net/LuaTreeLean/Test1.lean.pyg.html\">here</a>, but warning: it's newbie code! - using a variant of the trick from the <a href=\"http://anggtwu.net/snarf/https/leanprover-community.github.io/lean4-metaprogramming-book/print.pdf#page=5\">page 5</a> of the Metaprogramming book, i.e., using <code>declare_syntax_cat</code> and <code>macro_rules</code>...</p>",
        "id": 444939239,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1718511537
    },
    {
        "content": "<p>Then today I was trying to translate some of my code from macros to elabs - see the <a href=\"http://anggtwu.net/snarf/https/leanprover-community.github.io/lean4-metaprogramming-book/print.pdf#page=11\">page 11</a> of the Metaprogramming book -, and I finally understood why the types involved in <code>elab ... : term =&gt; ...</code> are so different from the types in <code>elab ... : command =&gt; ...</code>. The details are here:</p>",
        "id": 444939284,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1718511599
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Term</span><span class=\"w\"> </span><span class=\"n\">Command</span>\n\n<span class=\"c1\">-- \": term\" and \": command\" work:</span>\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"nat2\"</span><span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\">    </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span><span class=\"w\"> </span><span class=\"ss\">``Nat</span><span class=\"w\"> </span><span class=\"o\">[])</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TermElabM</span><span class=\"w\"> </span><span class=\"n\">Expr</span><span class=\"o\">)</span>\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"say42\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"s2\">\"42\"</span><span class=\"w\">             </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CommandElabM</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- \": catB\" doesn't work:</span>\n<span class=\"n\">declare_syntax_cat</span><span class=\"w\"> </span><span class=\"n\">catB</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"s2\">\"fooB\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">catB</span>\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"fooB\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">catB</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\">  </span><span class=\"c1\">-- error: unsupported syntax category 'catB'</span>\n<span class=\"n\">elab_rules</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">catB</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fooB</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\">         </span><span class=\"c1\">-- error: unsupported syntax category 'catB'</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">elabElabRulesAux</span><span class=\"w\">   </span><span class=\"c1\">-- to see why, go to the source of this</span>\n<span class=\"w\">                          </span><span class=\"c1\">-- function, and search for \"if catName ==\"</span>\n<span class=\"w\">                          </span><span class=\"c1\">-- and for \"unsupported syntax category\" there</span>\n</code></pre></div>",
        "id": 444939325,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1718511609
    },
    {
        "content": "<p>In short: <code>elabElabRulesAux</code> only supports a few syntax categories, and it has a comment that says: \"We considered making the command extensible and support new user-defined categories. We think it is unnecessary. If users want this feature, they add their own <code>elab_rules</code> macro that uses this one as a fallback.\" So - apparently - <code>elab</code> and <code>elab_rules</code> don't support other syntax categories without heavy hacking...</p>",
        "id": 444939371,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1718511663
    },
    {
        "content": "<p>Question: what about <code>@[command_elab ...]</code> and <code>@[term_elab ...]</code>? Is it easy to define things like <code>@[catB_elab ...]</code>?</p>",
        "id": 444939391,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1718511684
    },
    {
        "content": "<p>What would you like the new syntax category to do?</p>",
        "id": 444947907,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718520027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Elaborators.20for.20other.20syntax.20categories.3F/near/444947907\">said</a>:</p>\n<blockquote>\n<p>What would you like the new syntax category to do?</p>\n</blockquote>\n<p>Hi, sorry for the delay in answering...</p>\n<p>I asked mostly by curiosity - the DSLs that I'm trying to implement are quite simple - but a few hours ago I stumbled on this chapter:</p>\n<p>\"Embedding DSLs By Elaboration\"<br>\n<a href=\"https://leanprover-community.github.io/lean4-metaprogramming-book/main/08_dsls.html\">https://leanprover-community.github.io/lean4-metaprogramming-book/main/08_dsls.html</a></p>\n<p>apparently it answers all the questions that I had, and lots more...<br>\nso problem solved! Sorry for the noise, cheers, etc...</p>",
        "id": 445717169,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1718838066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"381195\">Eduardo Ochs</span> has marked this topic as resolved.</p>",
        "id": 445717183,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718838076
    }
]