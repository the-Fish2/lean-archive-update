[
    {
        "content": "<p>Is there a better to write the commented line? I want to construct all <code>Thing</code>s such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≤</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">x \\leq 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Thing</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Thing</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">Thing.cons</span> <span class=\"n\">x.val</span> <span class=\"o\">(</span><span class=\"n\">x.prop.trans</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"bp\">//</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"c\">/-</span><span class=\"cm\"> { Thing.cons x h | x : ℕ s.t. h : x ≤ 3 } -/</span>\n</code></pre></div>",
        "id": 424567443,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709520523
    },
    {
        "content": "<p>I can't parse your question, but is this the answer?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Thing</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">Thing.cons</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h.trans</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 424567718,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709520743
    },
    {
        "content": "<p>Yes perfect! Sorry for the unclear question <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span></p>",
        "id": 424567754,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709520766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> has marked this topic as resolved.</p>",
        "id": 424568175,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709521054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> has marked this topic as unresolved.</p>",
        "id": 424572205,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709524080
    },
    {
        "content": "<p>Hope you don't mind me overloading this thread, since I don't want to spam with too many threads. Can you give some hint on how to construct this equivalence?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Point</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">liftX</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">Point.some</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux1</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">liftX</span> <span class=\"n\">x₀</span> <span class=\"bp\">≃</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The annoying thing is that the <code>Point</code> inductive has <code>none</code> (which I don't care) and <code>some</code>, and I can't \"extract\" the <code>y</code> easily</p>",
        "id": 424572302,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709524160
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">aux1</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">liftX</span> <span class=\"n\">x₀</span> <span class=\"bp\">≃</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">z</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">liftX</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hz</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">liftX</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hz</span>\n      <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">hz.1</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hz.2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">y.2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">z</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">liftX</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hz</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">liftX</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hz</span>\n      <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">hz.1</span>\n      <span class=\"n\">simp</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 424573515,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709525119
    },
    {
        "content": "<p>Thank you so much!</p>",
        "id": 424574122,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709525581
    },
    {
        "content": "<p>So this proof uses <code>Classical.choice</code> (from <code>#print axioms aux1</code>). Why is <code>noncomputable</code> not required?</p>",
        "id": 424574171,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709525636
    },
    {
        "content": "<p>Are you sure it's not just using choice to prove LEM or something like that?</p>",
        "id": 424574296,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709525722
    },
    {
        "content": "<p>No I'm not sure. Would that mean noncomputable is not required?</p>",
        "id": 424574330,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709525753
    },
    {
        "content": "<p>The data is not constructed using choice, so it is computable</p>",
        "id": 424574334,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709525759
    },
    {
        "content": "<p>Try replacing the proof fields by <code>sorry</code> and I'm sure the definition won't use choice anymore</p>",
        "id": 424574391,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709525786
    },
    {
        "content": "<p>For proof fields you mean <code>right_inv</code> and <code>left_inv</code>?</p>",
        "id": 424574436,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709525830
    },
    {
        "content": "<p>Yes, but possibly also the proofs fed to <code>Point.some</code></p>",
        "id": 424574473,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709525872
    },
    {
        "content": "<p>Okay now I'm just confused. I extracted the <code>toFun</code> into a separate definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">func</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">liftX</span> <span class=\"n\">x₀</span> <span class=\"bp\">→</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span><span class=\"cm\"> 'func' depends on axioms: [propext, Classical.choice, Quot.sound, sorryAx] -/</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">func</span>\n</code></pre></div>",
        "id": 424574693,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709526007
    },
    {
        "content": "<p>So just the type definition requires choice?</p>",
        "id": 424574711,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709526017
    },
    {
        "content": "<p>Oh hmm the definition of <code>Point</code> also requires it</p>",
        "id": 424574861,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709526084
    },
    {
        "content": "<p>Okay, that is quite strange</p>",
        "id": 424574896,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709526104
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/PRJcRwHpB35AnLa2o-gIKFTg/Screenshot-2024-03-04-at-04.22.09.png\">Screenshot-2024-03-04-at-04.22.09.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PRJcRwHpB35AnLa2o-gIKFTg/Screenshot-2024-03-04-at-04.22.09.png\" title=\"Screenshot-2024-03-04-at-04.22.09.png\"><img src=\"/user_uploads/3121/PRJcRwHpB35AnLa2o-gIKFTg/Screenshot-2024-03-04-at-04.22.09.png\"></a></div>",
        "id": 424574969,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709526143
    },
    {
        "content": "<p>Am I doing something stupid lol</p>",
        "id": 424574984,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709526159
    },
    {
        "content": "<p>Maybe the <code>y ^ 2</code> is the one requiring choice</p>",
        "id": 424574998,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709526177
    },
    {
        "content": "<p>Yes</p>",
        "id": 424575002,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709526180
    },
    {
        "content": "<p>Check instances of the form <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat.monoid#doc\">docs#Rat.monoid</a></p>",
        "id": 424575023,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709526200
    },
    {
        "content": "<p>It seems the <code>split</code> <a href=\"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/Rat/Lemmas.lean#L28\">here</a> is the source of most choice usage in <code>Rat</code>. Interesting</p>",
        "id": 424576212,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709526961
    },
    {
        "content": "<p>Obligatory link to <a href=\"https://github.com/leanprover/lean4/pull/2414\">lean4#2414</a> which would fix that but is controversial</p>",
        "id": 424581040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709530558
    },
    {
        "content": "<p>I think a PR to Std to remove that use of <code>split</code> would probably be accepted by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 424581135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709530603
    },
    {
        "content": "<p>I would still prefer that split be fixed, because otherwise working around the tactic will produce much worse results overall</p>",
        "id": 424581193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709530662
    },
    {
        "content": "<p>Is this a place where split_ifs would work instead?</p>",
        "id": 424581269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709530713
    },
    {
        "content": "<p>no, because split_ifs isn't in std</p>",
        "id": 424581285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709530728
    },
    {
        "content": "<p>Are there plans to upstream it? (Edit: <a href=\"https://github.com/leanprover/std4/pull/243\">std4#243</a>)</p>",
        "id": 424581314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709530762
    },
    {
        "content": "<p>Or is the idea to eliminate it? (Edit: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7891\">#7891</a>)</p>",
        "id": 424581325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709530774
    },
    {
        "content": "<p>The obvious counterargument is that it overlaps with <code>split</code></p>",
        "id": 424581336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709530783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Set.20notation.20with.20propositions/near/424581135\">said</a>:</p>\n<blockquote>\n<p>I think a PR to Std to remove that use of <code>split</code> would probably be accepted by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span></p>\n</blockquote>\n<p>I guess I take back this comment with the knowledge about where split_ifs is</p>",
        "id": 424581693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709530972
    },
    {
        "content": "<p>Is there any chance that <a href=\"https://github.com/leanprover/lean4/pull/2414\">lean4#2414</a> will ever be accepted <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span> it seems to be stalled since August</p>",
        "id": 424585975,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709533850
    },
    {
        "content": "<p>I am worried that it fell into a bit of a gap in our processes, there isn't any recourse after something like this</p>",
        "id": 424586034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709533901
    },
    {
        "content": "<p>Just to be clear, this is obviously not a thing that affects me practically in any way. I just get confused and slightly annoyed, and I imagine others (say beginners at Lean) might have the same confusion ^_^ hope one day the RFC will be reviewed, even if it’s low priority. I particularly agree with </p>\n<blockquote>\n<p>Just because it's a low priority doesn't mean it should just be closed, that's what you do to things that are unwanted not low priority.</p>\n</blockquote>\n<p>(Applied to the RFC, not the PR)</p>",
        "id": 424587175,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709534688
    }
]