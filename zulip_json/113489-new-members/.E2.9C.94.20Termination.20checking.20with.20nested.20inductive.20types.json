[
    {
        "content": "<p>I have a tree-like data type such as this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">leaf</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>I would like to define a standard recursive function over <code>Foo</code> like one that counts the leaves:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo.count</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">children</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">children.map</span> <span class=\"n\">Foo.count</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n</code></pre></div>\n<p>But the termination checker fails to prove termination. I am unsure how to write the <code>decreasing_by</code> proof because I can't use a standard <code>induction</code> tactic.</p>\n<p>I can work around this problem by writing an explicitly inductive function over lists:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">Foo.count</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Foo.leaf</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Foo.node</span> <span class=\"n\">children</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">countList</span> <span class=\"n\">children</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">countList</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.count</span> <span class=\"bp\">+</span> <span class=\"n\">countList</span> <span class=\"n\">xs</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But it would be really unfortunate if I can't use the standard library to work with <code>Foo</code>! Is there a way to make Lean understand that these two definitions are equivalent?</p>",
        "id": 425837597,
        "sender_full_name": "Will Crichton",
        "timestamp": 1710133206
    },
    {
        "content": "<p>Lean won’t know that <code>map</code> applies its argument only on subtree of <code>children</code>, but you can tell it to do so by using <code>children.attach.map (fun \\&lt;x, _\\&gt; =&gt; x.count)</code>, using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.attach#doc\">docs#List.attach</a>.</p>",
        "id": 425882788,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1710154474
    },
    {
        "content": "<p>Do I need to introduce some kind of auxiliary <code>have</code> fact? Simply using <code>.attach</code> does not seem to work. I couldn't get your exact suggestion to type-check, but this type-checks (while failing termination checking):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo.count</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.attach.map</span> <span class=\"n\">Foo.count</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n</code></pre></div>",
        "id": 425916343,
        "sender_full_name": "Will Crichton",
        "timestamp": 1710165978
    },
    {
        "content": "<p>Try using it this way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo.count</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Foo</span><span class=\"o\">):</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">children</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Foo.count</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"n\">children.attach</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">Foo.count</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">f</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">decreasing_trivial</span>\n</code></pre></div>\n<p>The elements of attach are a tuple of the element and the proof of it being in the list.  Writing it in the tuple way, you can still use x as a Foo element and have the proof available for termination.</p>",
        "id": 425957347,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1710175340
    },
    {
        "content": "<p>Ah got it, I understand the issue. For posterity, I was able to avoid the eta-expansion by expanding the <code>decreasing_by</code> proof like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo.count</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Foo</span><span class=\"o\">):</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">children</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">children.attach.map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">val.count</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">x</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">x.prop</span>\n  <span class=\"n\">decreasing_trivial</span>\n</code></pre></div>",
        "id": 425968494,
        "sender_full_name": "Will Crichton",
        "timestamp": 1710176142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"625391\">Will Crichton</span> has marked this topic as resolved.</p>",
        "id": 425968503,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710176146
    }
]