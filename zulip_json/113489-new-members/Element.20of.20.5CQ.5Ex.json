[
    {
        "content": "<p>How should I construct an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">Q</mi><mo lspace=\"0em\" rspace=\"0em\">×</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}^{\\times}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.938em;vertical-align:-0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">×</span></span></span></span></span></span></span></span></span></span></span></span>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>I can do it explicitly with <code>\\&lt;2, 1 / 2, by trivial, by trivial\\&gt;</code>, but I was wondering if there's a simpler way, especially since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> is a field</p>",
        "id": 424509157,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709472677
    },
    {
        "content": "<p>I think there's a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units.mk0#doc\">docs#Units.mk0</a></p>",
        "id": 424511033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709474017
    },
    {
        "content": "<p>That seems to work -- is there a plan to make those <code>h \\ne 0</code> goals default to <code>by positivity</code> eventually so you only need to write <code>def a : ℚˣ := .mk0 2</code>?</p>",
        "id": 424511231,
        "sender_full_name": "Julian Berman",
        "timestamp": 1709474184
    },
    {
        "content": "<p>Thanks</p>",
        "id": 424511280,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709474257
    },
    {
        "content": "<p>I think in this case we could consider an <code>ofNat</code> instance</p>",
        "id": 424511435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709474396
    },
    {
        "content": "<p>We can't make those side goals default to <code>positivity</code> (at least naively) because <code>positivity</code> requires a bunch more imports.</p>",
        "id": 424565743,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709519187
    }
]