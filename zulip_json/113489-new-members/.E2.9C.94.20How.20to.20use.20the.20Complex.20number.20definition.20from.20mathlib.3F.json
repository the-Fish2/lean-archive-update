[
    {
        "content": "<p>I am trying to formalise a solution to part of the hw for my complex analysis course, but I am not sure how or what to import from Mathlib to get the statement to make sense to Lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">question_3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I get the feeling I'll have to invoke some Lattice stuff, although I'm not very familiar with Lattices, but that's all my hunches used up.</p>\n<p>Any help would be appreciated (:</p>",
        "id": 412988133,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1705334492
    },
    {
        "content": "<p>The first step is to write down a <em>very detailed</em> pen and paper proof.</p>",
        "id": 412988543,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705334613
    },
    {
        "content": "<p>Then try to formalize it step by step.</p>",
        "id": 412988566,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705334625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20the.20Complex.20number.20definition.20from.20mathlib.3F/near/412988543\">said</a>:</p>\n<blockquote>\n<p>The first step is to write down a <em>very detailed</em> pen and paper proof.</p>\n</blockquote>\n<p>I think I have a very precise pen and paper proof: (let me figure out if I can write LaTeX). I want to prove it by irreflexivity of &lt; (using the reverse triangle inequality)</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>1</mn><mo>&lt;</mo><mi mathvariant=\"normal\">∣</mi><mn>1</mn><mo>−</mo><mn>2</mn><msqrt><mn>2</mn></msqrt><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>z</mi><mi mathvariant=\"normal\">∣</mi><mo>−</mo><mi mathvariant=\"normal\">∣</mi><mn>2</mn><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi mathvariant=\"normal\">∣</mi><mi>z</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1 &lt; |1 - 2\\sqrt{2}| = ||z| - |2(1 - i)|| \\leq |z - 2(1 - i)| = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2061em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9561em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.9161em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0839em;\"><span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣2</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mord\">∣∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>",
        "id": 412989419,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1705334903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634542\">Alex Brodbelt</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20the.20Complex.20number.20definition.20from.20mathlib.3F/near/412989419\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20the.20Complex.20number.20definition.20from.20mathlib.3F/near/412988543\">said</a>:</p>\n<blockquote>\n<p>The first step is to write down a <em>very detailed</em> pen and paper proof.</p>\n</blockquote>\n<p>I think I have a very precise pen and paper proof: (let me figure out if I can write LaTeX). I want to prove it by irreflexivity of &lt; (using the reverse triangle inequality)</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>1</mn><mo>&lt;</mo><mi mathvariant=\"normal\">∣</mi><mn>1</mn><mo>−</mo><mn>2</mn><msqrt><mn>2</mn></msqrt><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>z</mi><mi mathvariant=\"normal\">∣</mi><mo>−</mo><mi mathvariant=\"normal\">∣</mi><mn>2</mn><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi mathvariant=\"normal\">∣</mi><mi>z</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1 &lt; |1 - 2\\sqrt{2}| = ||z| - |2(1 - i)|| \\leq |z - 2(1 - i)| = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2061em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9561em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.9161em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0839em;\"><span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣2</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mord\">∣∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span><br>\n</p>\n</blockquote>\n<p>If I can get Lean to accept the statement then I think I can take it from there. Hopefully, my practice with Mathematics in Lean is sufficient <span aria-label=\"raised hands\" class=\"emoji emoji-1f64c\" role=\"img\" title=\"raised hands\">:raised_hands:</span></p>",
        "id": 412990388,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1705335224
    },
    {
        "content": "<p>Well, this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Abs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">question_3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>works. You missed <code>open Complex</code> (to get access to <code>Complex.I</code> for example) and an import.</p>",
        "id": 412991563,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705335629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20the.20Complex.20number.20definition.20from.20mathlib.3F/near/412991563\">said</a>:</p>\n<blockquote>\n<p>Well, this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Abs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">question_3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>works. You missed <code>open Complex</code> (to get access to <code>Complex.I</code> for example) and an import.</p>\n</blockquote>\n<p>Ahhh I see! Thank you</p>",
        "id": 413013883,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1705344548
    },
    {
        "content": "<p>I'm having trouble with coercing real to complex and small details (hopefully none of them are fatal). But if anyone has any advice for how to deal with these situations or how to avoid them that would be amazing!<br>\nNonetheless, thank you for the help so far! <br>\nThis is what I've hacked together</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Abs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">helper</span> <span class=\"o\">:</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- somehow evaluate the modulus of the complex number</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">_7_5_lt_sqrt_2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n  <span class=\"c1\">-- somehow use lt_abs.mp/r</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">reverse_triangle_inequality</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span>  <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"n\">w</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">question_3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">use</span> <span class=\"n\">z</span>\n    <span class=\"k\">calc</span>\n      <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"mi\">9</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">lt_abs.mpr</span>\n        <span class=\"n\">left</span>\n        <span class=\"n\">norm_num</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">norm_num</span>\n      <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">lt_abs.mpr</span>\n        <span class=\"n\">right</span>\n        <span class=\"n\">apply</span> <span class=\"n\">abs_lt.mpr</span>\n        <span class=\"n\">constructor</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_neg</span><span class=\"o\">]</span>\n          <span class=\"n\">apply</span> <span class=\"n\">sub_lt_sub_left</span>\n          <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">_7_5_lt_sqrt_2</span><span class=\"o\">]</span>\n        <span class=\"bp\">·</span> <span class=\"k\">calc</span>\n            <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n            <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n            <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">_7_5_lt_sqrt_2</span><span class=\"o\">]</span>\n            <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"c1\">-- coerce real abs to complex abs</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">((</span><span class=\"n\">abs</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hz.left</span><span class=\"o\">,</span> <span class=\"n\">helper</span><span class=\"o\">]</span>\n        <span class=\"c1\">-- coerce to the right types</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">((</span><span class=\"n\">Complex.abs</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hz.left</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">reverse_triangle_inequality</span> <span class=\"c1\">-- apply abs_abs_sub_abs_le_abs_sub</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hw</span><span class=\"o\">⟩</span>\n    <span class=\"c1\">-- apply lt_of_lt_of_eq</span>\n    <span class=\"c1\">-- apply hw</span>\n    <span class=\"c1\">-- apply hz.right</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_irrefl</span> <span class=\"mi\">1</span> <span class=\"n\">h₂</span>\n</code></pre></div>",
        "id": 413014256,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1705344768
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">question_3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">calc</span>\n      <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"mi\">9</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">lt_abs.mpr</span>\n        <span class=\"n\">left</span>\n        <span class=\"n\">norm_num</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">norm_num</span>\n      <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">lt_abs.mpr</span>\n        <span class=\"n\">right</span>\n        <span class=\"n\">apply</span> <span class=\"n\">abs_lt.mpr</span>\n        <span class=\"n\">constructor</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_neg</span><span class=\"o\">]</span>\n          <span class=\"n\">apply</span> <span class=\"n\">sub_lt_sub_left</span>\n          <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">_7_5_lt_sqrt_2</span><span class=\"o\">]</span>\n        <span class=\"bp\">·</span> <span class=\"k\">calc</span>\n            <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n            <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n            <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">_7_5_lt_sqrt_2</span><span class=\"o\">]</span>\n            <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"c1\">-- coerce real abs to complex abs</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">((</span><span class=\"n\">abs</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hz.left</span><span class=\"o\">,</span> <span class=\"n\">helper</span><span class=\"o\">]</span>\n        <span class=\"c1\">-- coerce to the right types</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">((</span><span class=\"n\">Complex.abs</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hz.left</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">reverse_triangle_inequality</span> <span class=\"c1\">-- apply abs_abs_sub_abs_le_abs_sub</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hz.right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span> <span class=\"n\">h₁</span>\n</code></pre></div>",
        "id": 413017018,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705346251
    },
    {
        "content": "<p>You had two problems there:</p>\n<ul>\n<li>Your <code>h₁</code> threw away the information that the witness <code>z</code> was the same <code>z</code> as before, so <code>hz.right</code> didn't match any more</li>\n<li><code>have h₂ : 1 &lt; 1</code> does not inform Lean which <code>1</code> you are using. If you do things in a different order, it will (correctly) guess for you</li>\n</ul>",
        "id": 413017188,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705346332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20the.20Complex.20number.20definition.20from.20mathlib.3F/near/413017188\">said</a>:</p>\n<blockquote>\n<p>You had two problems there:</p>\n<ul>\n<li>Your <code>h₁</code> threw away the information that the witness <code>z</code> was the same <code>z</code> as before, so <code>hz.right</code> didn't match any more</li>\n<li><code>have h₂ : 1 &lt; 1</code> does not inform Lean which <code>1</code> you are using. If you do things in a different order, it will (correctly) guess for you</li>\n</ul>\n</blockquote>\n<p>Huh, very interesting... I was not aware of these things. Thank you! One teeny tiny last thing (I'll keep trying to figure it out) but what is the triangle inequality (or better even for the reverse triangle inequality) for complex numbers in mathlib go by? I've searched on moogle and haven't found anything that my inexperienced eyes immediately see as useful.</p>\n<p>As I've got it to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Abs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n<span class=\"c1\">-- import PaperProof</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">computation_helper_1</span> <span class=\"o\">:</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_def</span><span class=\"o\">,</span> <span class=\"n\">normSq</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">norm_num</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lt_sqrt_2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">lt_sqrt</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n  <span class=\"n\">norm_num</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">computation_helper_2</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_abs.mpr</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">apply</span> <span class=\"n\">abs_lt.mpr</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_neg</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sub_lt_sub_left</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">lt_sqrt_2</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"k\">calc</span>\n      <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n      <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n      <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">lt_sqrt_2</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">reverse_triangle_inequality</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span>  <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"n\">w</span>\n  <span class=\"c1\">-- have h : Complex.abs (z + w) ≤ Complex.abs z  + Complex.abs w := by apply dist_triangle</span>\n  <span class=\"c1\">-- use it on w and (z-w) to get the reverse triangle inequality</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">question_3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">calc</span>\n      <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"mi\">9</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">lt_abs.mpr</span><span class=\"bp\">;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n      <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">computation_helper_2</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_def</span><span class=\"o\">,</span> <span class=\"n\">normSq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Real.sqrt_sq_eq_abs</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">((</span><span class=\"n\">abs</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hz.left</span><span class=\"o\">,</span> <span class=\"n\">computation_helper_1</span><span class=\"o\">,</span> <span class=\"n\">abs_def</span><span class=\"o\">,</span> <span class=\"n\">normSq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">((</span><span class=\"n\">Complex.abs</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hz.left</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">reverse_triangle_inequality</span> <span class=\"c1\">-- apply abs_abs_sub_abs_le_abs_sub</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hz.right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_irrefl</span> <span class=\"mi\">1</span> <span class=\"n\">h₁</span>\n</code></pre></div>",
        "id": 413175503,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1705417936
    },
    {
        "content": "<p>Could you phrase the question in lean?</p>",
        "id": 413176252,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705418142
    },
    {
        "content": "<p>(and then try <code>exact?</code> on what you have!)</p>",
        "id": 413176913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705418312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634542\">Alex Brodbelt</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20the.20Complex.20number.20definition.20from.20mathlib.3F/near/413175503\">said</a>:</p>\n<blockquote>\n<p>One teeny tiny last thing (I'll keep trying to figure it out) but what is the triangle inequality (or better even for the reverse triangle inequality) for complex numbers in mathlib go by? I've searched on moogle and haven't found anything that my inexperienced eyes immediately see as useful.</p>\n</blockquote>\n<p>You might want <code>AbsoluteValue.sub_le</code>. Try starting with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Abs</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">question_3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">abs.sub_le</span> <span class=\"mi\">0</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">))</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs.map_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 413204694,
        "sender_full_name": "A.",
        "timestamp": 1705426156
    },
    {
        "content": "<p>This is a common pattern in mathlib: there is no theorem that literally says \"the triangle inequality holds in <code>ℂ</code>\". This is because of the following: in mathematics there are a lot of \"context\" where the triangle inequality holds (for example in <code>ℂ</code>, but also in <code>ℝ</code>), and every time it holds it has a (long) list of consequence, whose proof is always the same, it follows \"formally\" by <code>|a + b| ≤ |a| + |b|</code>. We don't want to reprove all these consequence a lot of times, so we do the following:</p>\n<ul>\n<li>we define the notion of an absolute value in general, where the triangle inequality holds <em>by definition</em>.</li>\n<li>we prove that any time we have an absolute value we have certain properties</li>\n<li>we define an absolute value on <code>ℂ</code> (here we prove that the function we consider satisfies the triangular inequality, but this result is in some sense hidden).</li>\n</ul>",
        "id": 413206496,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705426692
    },
    {
        "content": "<p>For example, your reversed triangle inequality is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=abs_abs_sub_abs_le#doc\">docs#abs_abs_sub_abs_le</a>, that holds any time you have an absolute value.</p>",
        "id": 413206811,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705426807
    },
    {
        "content": "<p>(no it's not, because the complex numbers are not a lattice ordered group. You instead want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=abs_norm_sub_norm_le#doc\">docs#abs_norm_sub_norm_le</a>)</p>",
        "id": 413207172,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705426938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20the.20Complex.20number.20definition.20from.20mathlib.3F/near/413206496\">said</a>:</p>\n<blockquote>\n<p>This is a common pattern in mathlib: there is no theorem that literally says \"the triangle inequality holds in <code>ℂ</code>\". This is because of the following: in mathematics there are a lot of \"context\" where the triangle inequality holds (for example in <code>ℂ</code>, but also in <code>ℝ</code>), and every time it holds it has a (long) list of consequence, whose proof is always the same, it follows \"formally\" by <code>|a + b| ≤ |a| + |b|</code>. We don't want to reprove all these consequence a lot of times, so we do the following:</p>\n<ul>\n<li>we define the notion of an absolute value in general, where the triangle inequality holds <em>by definition</em>.</li>\n<li>we prove that any time we have an absolute value we have certain properties</li>\n<li>we define an absolute value on <code>ℂ</code> (here we prove that the function we consider satisfies the triangular inequality, but this result is in some sense hidden).</li>\n</ul>\n</blockquote>\n<p>Yes! I figured that I'd somehow have to know the \"barebones structure\" required for the triangle inequality to hold for complex numbers. So far, I figured out they were not a linear ordered commutative group, as there is no way to order to complex numbers with the same norm. But I wasn't sure if they were lattice, just because I don't know what a lattice is <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 416004924,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1705490110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634542\">Alex Brodbelt</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20the.20Complex.20number.20definition.20from.20mathlib.3F/near/416004924\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20the.20Complex.20number.20definition.20from.20mathlib.3F/near/413206496\">said</a>:</p>\n<blockquote>\n<p>This is a common pattern in mathlib: there is no theorem that literally says \"the triangle inequality holds in <code>ℂ</code>\". This is because of the following: in mathematics there are a lot of \"context\" where the triangle inequality holds (for example in <code>ℂ</code>, but also in <code>ℝ</code>), and every time it holds it has a (long) list of consequence, whose proof is always the same, it follows \"formally\" by <code>|a + b| ≤ |a| + |b|</code>. We don't want to reprove all these consequence a lot of times, so we do the following:</p>\n<ul>\n<li>we define the notion of an absolute value in general, where the triangle inequality holds <em>by definition</em>.</li>\n<li>we prove that any time we have an absolute value we have certain properties</li>\n<li>we define an absolute value on <code>ℂ</code> (here we prove that the function we consider satisfies the triangular inequality, but this result is in some sense hidden).</li>\n</ul>\n</blockquote>\n<p>Yes! I figured that I'd somehow have to know the \"barebones structure\" required for the triangle inequality to hold for complex numbers. So far, I figured out they were not a linear ordered commutative group, as there is no way to order to complex numbers with the same norm? but that's as far as I got <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>",
        "id": 416005088,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1705490178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20the.20Complex.20number.20definition.20from.20mathlib.3F/near/413176913\">said</a>:</p>\n<blockquote>\n<p>(and then try <code>exact?</code> on what you have!)</p>\n</blockquote>\n<p>good point... However, I tried this and it timed out <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 416006649,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1705490816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20the.20Complex.20number.20definition.20from.20mathlib.3F/near/413207172\">said</a>:</p>\n<blockquote>\n<p>(no it's not, because the complex numbers are not a lattice ordered group. You instead want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=abs_norm_sub_norm_le#doc\">docs#abs_norm_sub_norm_le</a>)</p>\n</blockquote>\n<p>After trying:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">reverse_triangle_inequality</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span>  <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"n\">w</span>\n  <span class=\"n\">apply</span> <span class=\"n\">abs_norm_sub_norm_le</span> <span class=\"n\">z</span> <span class=\"n\">w</span>\n  <span class=\"c1\">-- have h : Complex.abs (z + w) ≤ Complex.abs z  + Complex.abs w := by apply dist_triangle</span>\n  <span class=\"c1\">-- use it on w and (z-w) to get the reverse triangle inequality</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>if I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">SeminormedAddGroup</span> <span class=\"n\">ℂLean</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<p>does this mean I need to do further imports? these are my  imports</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Abs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Normed.Group.Basic</span>\n</code></pre></div>\n<p>that the complex numbers are not an semi-normed additive group?<br>\nor simply, that lean is confused? (could also be that I am confused tbh)</p>\n<p>sorry if this is dragging on... I'm only a newbie trying to learn...</p>",
        "id": 416008526,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1705491492
    },
    {
        "content": "<p>You can just <code>import Mathlib</code> if your computer does not explode.</p>",
        "id": 416011332,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705492652
    },
    {
        "content": "<p>The necessary import is <code>Mathlib.Analysis.Complex.Basic</code></p>",
        "id": 416012818,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705493201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20the.20Complex.20number.20definition.20from.20mathlib.3F/near/416012818\">said</a>:</p>\n<blockquote>\n<p>The necessary import is <code>Mathlib.Analysis.Complex.Basic</code></p>\n</blockquote>\n<p>(an import later...) HALLELLUJAH! It works! Thank you very much everyone! <span aria-label=\"raised hands\" class=\"emoji emoji-1f64c\" role=\"img\" title=\"raised hands\">:raised_hands:</span></p>",
        "id": 416023086,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1705496986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634542\">Alex Brodbelt</span> has marked this topic as resolved.</p>",
        "id": 416023306,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705497043
    }
]