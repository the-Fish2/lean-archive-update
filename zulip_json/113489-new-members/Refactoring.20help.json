[
    {
        "content": "<p>so currently I have the following function </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pAppl</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Parser</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Parser</span> <span class=\"n\">s</span> <span class=\"n\">a</span>\n  <span class=\"o\">:=</span>\n  <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">Parser.P</span> <span class=\"n\">p‚ÇÅ</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">Parser.P</span> <span class=\"n\">p‚ÇÇ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Parser.P</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">inp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p‚ÇÅ</span> <span class=\"n\">inp</span>\n      <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">ss‚ÇÅ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">p‚ÇÇ</span> <span class=\"n\">ss‚ÇÅ</span><span class=\"o\">))</span>\n      <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">lst</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lst.map</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">v‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">ss‚ÇÇ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">v‚ÇÅ</span> <span class=\"n\">v‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">ss‚ÇÇ</span><span class=\"o\">)))</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">head</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I want it to make it more readable, I don't know what changes I should make. I want to get better at writing readable lean code</p>",
        "id": 430810065,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1712070037
    },
    {
        "content": "<p>The first thing that jumps out at me is that instead of having something of the form <code>A -&gt; B -&gt; C</code> after the colon, put <code>(a : A) (b : B)</code> before the colon. Hard to demonstrate when it's not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, though.</p>",
        "id": 430849255,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712082343
    },
    {
        "content": "<p>I think the answer here is probably \"make an <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Applicative#doc\">docs#Applicative</a> instance\"</p>",
        "id": 430872492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712091561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113489-new-members/topic/Refactoring.20help/near/430849255\">said</a>:</p>\n<blockquote>\n<p>The first thing that jumps out at me is that instead of having something of the form <code>A -&gt; B -&gt; C</code> after the colon, put <code>(a : A) (b : B)</code> before the colon. Hard to demonstrate when it's not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, though.</p>\n</blockquote>\n<p>is putting a signature not the right way do it?</p>",
        "id": 431006795,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1712151847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Refactoring.20help/near/430872492\">said</a>:</p>\n<blockquote>\n<p>I think the answer here is probably \"make an <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Applicative#doc\">docs#Applicative</a> instance\"</p>\n</blockquote>\n<p>I was implementing an Applicative so that makes sense</p>",
        "id": 431006865,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1712151870
    },
    {
        "content": "<p>Thanks for the help, probably implementing an Applicative instance would be the best thing to do</p>",
        "id": 431008345,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1712152234
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar ü¶Ä (he/him)</span> <a href=\"#narrow/stream/113489-new-members/topic/Refactoring.20help/near/431006795\">said</a>:<br>\nis putting a signature not the right way do it?</p>\n</blockquote>\n<p>Here's how I read this advice:</p>\n<p>Consider these two examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">p</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n<span class=\"k\">#check</span> <span class=\"n\">bar</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>You'll notice how the type of <code>foo</code> and <code>bar</code> are similar. If the first thing you're doing is just introducing a variable for the antecedent, it's often cleaner to make the value an actual parameter instead of an antecedent.</p>",
        "id": 431115943,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1712156988
    },
    {
        "content": "<p>Also, you can do <code>bar (p := q)</code>, which you can't with <code>foo</code></p>",
        "id": 431116134,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712157042
    },
    {
        "content": "<p>So I can use named variables, I didn't know that. Tangential to the problem that is cool</p>",
        "id": 431116317,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1712157105
    },
    {
        "content": "<p>Ok so I do see the pro of using it. I like the usage of defining function signature before defining the function</p>",
        "id": 431116677,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1712157219
    },
    {
        "content": "<p>Maybe I'm used to it and in lean4 isn't the idiomatic. Good to know.</p>\n<p>Thanks!</p>",
        "id": 431116831,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1712157254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar ü¶Ä (he/him)</span> <a href=\"#narrow/stream/113489-new-members/topic/Refactoring.20help/near/431116317\">said</a>:</p>\n<blockquote>\n<p>I like the usage of defining function signature before defining the function</p>\n</blockquote>\n<p>If this preference were idiomatic, then dependent arrow types would start to feel a bit boilerplatey sometimes. </p>\n<p>This is a bit contrived, but if you look at foo and bar:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">b</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>For <code>foo</code>, you can see how the implementation sort of mirrors the type decl? To me it often feels cleaner to use parameters. Of course, that's not always desirable.</p>",
        "id": 431125113,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1712159634
    },
    {
        "content": "<p>Makes sense in this case, I haven't used lean to comment whether I like this in any scenario or not. It's ok that's the point of asking the question.</p>\n<p>I wanted to know what is idiomatic. I got the answer</p>",
        "id": 431126484,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1712160018
    },
    {
        "content": "<p>An example where my intuition is to do both styles at the same time:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inc</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">¬∑</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">dec</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">¬∑</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">inc</span> <span class=\"k\">else</span> <span class=\"n\">dec</span>\n</code></pre></div>",
        "id": 431128726,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1712160660
    },
    {
        "content": "<p>Yeah this is also something I have seen in lean and mathlib code. The definition of foldr for list uses this</p>",
        "id": 431129157,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1712160781
    },
    {
        "content": "<p>I think it's mostly to use init as a named value</p>",
        "id": 431129258,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1712160811
    },
    {
        "content": "<p>I am growing to like this hybrid approach</p>",
        "id": 431129294,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1712160822
    },
    {
        "content": "<p>Thanks for the suggestion <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 431129320,
        "sender_full_name": "Shubham Kumar ü¶Ä (he/him)",
        "timestamp": 1712160832
    }
]