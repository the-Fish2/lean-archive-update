[
    {
        "content": "<p>I'm at a stage (with Lean, Haskell, Idris, etc.)  where I find it helpful to translate <code>do</code> blocks into code that uses only <code>&gt;&gt;=</code>.  I want to see what the <code>do</code> code reduces to.  FPIL section 2.4 includes this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fileStream</span> <span class=\"o\">(</span><span class=\"n\">filename</span> <span class=\"o\">:</span> <span class=\"n\">System.FilePath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">IO.FS.Stream</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fileExists</span> <span class=\"bp\">←</span> <span class=\"n\">filename.pathExists</span>\n  <span class=\"k\">if</span> <span class=\"n\">not</span> <span class=\"n\">fileExists</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">stderr</span> <span class=\"bp\">←</span> <span class=\"n\">IO.getStderr</span>\n    <span class=\"n\">stderr.putStrLn</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"File not found: {filename}\"</span>\n    <span class=\"n\">pure</span> <span class=\"n\">none</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">handle</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.Handle.mk</span> <span class=\"n\">filename</span> <span class=\"n\">IO.FS.Mode.read</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">IO.FS.Stream.ofHandle</span> <span class=\"n\">handle</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>This type checks with my configuration, as expected, but my translation of it doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myFileStream</span> <span class=\"o\">(</span><span class=\"n\">filename</span> <span class=\"o\">:</span> <span class=\"n\">System.FilePath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">IO.FS.Stream</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">filename.pathExists</span> <span class=\"bp\">&gt;=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">fileExists</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">not</span> <span class=\"n\">fileExists</span> <span class=\"k\">then</span>\n                    <span class=\"n\">IO.getStderr</span> <span class=\"bp\">&gt;&gt;=</span>\n                    <span class=\"bp\">λ</span> <span class=\"n\">stderr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">stderr.putStrLn</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"File not found: {filename}\"</span>\n                  <span class=\"k\">else</span>\n                    <span class=\"n\">IO.FS.Handle.mk</span> <span class=\"n\">filename</span> <span class=\"n\">IO.FS.Mode.read</span> <span class=\"bp\">&gt;&gt;=</span>\n                    <span class=\"bp\">λ</span> <span class=\"n\">handle</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">IO.FS.Stream.ofHandle</span> <span class=\"n\">handle</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>There are two errors.  On <code>stderr.putStrLn s!\"File not found: {filename}\"</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">62</span><span class=\"o\">:</span><span class=\"mi\">33</span><span class=\"bp\">-</span><span class=\"mi\">62</span><span class=\"o\">:</span><span class=\"mi\">79</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">IO.FS.Stream.putStrLn</span> <span class=\"n\">stderr</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"s2\">\"File not found: \"</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"n\">filename</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">BaseIO</span> <span class=\"bp\">?</span><span class=\"n\">m.1830</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>On <code>IO.FS.Handle.mk filename IO.FS.Mode.read</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"mi\">21</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"mi\">61</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">IO.FS.Handle.mk</span> <span class=\"n\">filename</span> <span class=\"n\">IO.FS.Mode.read</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">IO.FS.Handle.mk</span> <span class=\"n\">filename</span> <span class=\"n\">IO.FS.Mode.read</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">IO</span> <span class=\"n\">IO.FS.Handle</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">BaseIO</span> <span class=\"bp\">?</span><span class=\"n\">m.2145</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>It seems relevant that in the original FPIL version with <code>do</code>, the types of <code>IO.getStderr</code> and <code>IO.FS.Handle.mk</code> are preceded by \"IO\" and a space.  In my version, the types of the same functions are preceded by \"BaseIO\" and a space.  Is therew some special Lean <code>do</code> magic going on here, or am I making a silly mistake (not unlikely)?</p>\n<p>I'm not sure what a keyword + space before a type means, but it seems as if without <code>do</code>, <code>BaseIO</code> is needed, but with <code>do</code>, <code>IO</code> is needed.</p>\n<p>(Feel free to answer by pointing me to an online text or another thread!  I tried searching here without success--not sure what search string to use.)</p>",
        "id": 429728104,
        "sender_full_name": "mars0i",
        "timestamp": 1711482530
    },
    {
        "content": "<p>This might not be the problem, but why did the <code>pure none</code> disappear in your translation?</p>",
        "id": 429728564,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711482725
    },
    {
        "content": "<p>Do you know you can <code>#print fileStream</code> to see what the <code>do</code> block reduces to?</p>",
        "id": 429728577,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711482731
    },
    {
        "content": "<p>Yeah, just noticed the missing <code>pure none</code>.  Hold on ....</p>",
        "id": 429728618,
        "sender_full_name": "mars0i",
        "timestamp": 1711482759
    },
    {
        "content": "<p>With <code>pure none</code> the first error changes, but seems similar.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myFileStream</span> <span class=\"o\">(</span><span class=\"n\">filename</span> <span class=\"o\">:</span> <span class=\"n\">System.FilePath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">IO.FS.Stream</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">filename.pathExists</span> <span class=\"bp\">&gt;=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">fileExists</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">not</span> <span class=\"n\">fileExists</span> <span class=\"k\">then</span>\n                    <span class=\"n\">IO.getStderr</span> <span class=\"bp\">&gt;&gt;=</span>\n                    <span class=\"bp\">λ</span> <span class=\"n\">stderr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">stderr.putStrLn</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"File not found: {filename}\"</span> <span class=\"bp\">&gt;&gt;=</span>\n                    <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n                  <span class=\"k\">else</span>\n                    <span class=\"n\">IO.FS.Handle.mk</span> <span class=\"n\">filename</span> <span class=\"n\">IO.FS.Mode.read</span> <span class=\"bp\">&gt;&gt;=</span>\n                    <span class=\"bp\">λ</span> <span class=\"n\">handle</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">IO.FS.Stream.ofHandle</span> <span class=\"n\">handle</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Here's the new error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">62</span><span class=\"o\">:</span><span class=\"mi\">33</span><span class=\"bp\">-</span><span class=\"mi\">62</span><span class=\"o\">:</span><span class=\"mi\">79</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">IO.FS.Stream.putStrLn</span> <span class=\"n\">stderr</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"s2\">\"File not found: \"</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"n\">filename</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"s2\">\"\"</span><span class=\"o\">))</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">IO.FS.Stream.putStrLn</span> <span class=\"n\">stderr</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"s2\">\"File not found: \"</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"n\">filename</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">BaseIO</span> <span class=\"bp\">?</span><span class=\"n\">m.1867</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 429729013,
        "sender_full_name": "mars0i",
        "timestamp": 1711482935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , no!  Didn't know.</p>",
        "id": 429729211,
        "sender_full_name": "mars0i",
        "timestamp": 1711483013
    },
    {
        "content": "<p>There are added <code>liftM</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">57</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"mi\">57</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"kd\">def</span> <span class=\"n\">fileStream</span> <span class=\"o\">:</span> <span class=\"n\">System.FilePath</span> <span class=\"bp\">→</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">IO.FS.Stream</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">filename</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fileExists</span> <span class=\"bp\">←</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">System.FilePath.pathExists</span> <span class=\"n\">filename</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"n\">fileExists</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">stderr</span> <span class=\"bp\">←</span> <span class=\"n\">liftM</span> <span class=\"n\">IO.getStderr</span>\n      <span class=\"n\">IO.FS.Stream.putStrLn</span> <span class=\"n\">stderr</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"s2\">\"File not found: \"</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"n\">filename</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span>\n      <span class=\"n\">pure</span> <span class=\"n\">none</span>\n    <span class=\"k\">else</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">handle</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.Handle.mk</span> <span class=\"n\">filename</span> <span class=\"n\">IO.FS.Mode.read</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">IO.FS.Stream.ofHandle</span> <span class=\"n\">handle</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>which converts from one monad to another (as I would put it) according to <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#liftM\"><code>liftM</code>'s documentation</a>.  But still, not sure I understand what's going on.</p>",
        "id": 429729470,
        "sender_full_name": "mars0i",
        "timestamp": 1711483095
    },
    {
        "content": "<p><code>BaseIO</code> is another monad which is like <code>IO</code> without exceptions. Maybe one of the API functions returns a value in <code>BaseIO</code> and the <code>do</code> notation was automatically inserting coercions using <code>MonadLift</code>?</p>",
        "id": 429730410,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711483426
    },
    {
        "content": "<p>That sounds reasonable <span class=\"user-mention\" data-user-id=\"500038\">@Timo Carlin-Burns</span>.  Thanks.  I'll look at it more later, then.   (I might not like it.  I know I'm in a minority, but in Haskell, I think <code>do</code> hides what is really happening from novices.  I was very confused by <code>do</code> at first.  As I said, it's a minority perspective.  But packing more syntactic sugar into <code>do</code> means it's harder to understand what it's doing.  Oh well.  Realistic, flexible IO is always going to be somewhat messy.)</p>",
        "id": 429732075,
        "sender_full_name": "mars0i",
        "timestamp": 1711484096
    },
    {
        "content": "<p>I'm trying to fix my <code>do</code>-less function by using what I am finding using <code>#print</code> on the original FPIL <code>do</code>-based definition.  This is making me hate Lean's <code>do</code>.  It causes what appears to be the same function appear to have different types when surrounded by <code>do</code> from the type it appears to have outside of <code>do</code>.  How is that a good thing?  It inserts additional calls in ways that I can't figure out how to reproduce in my code.  Granted, I'm a beginner, but I'm looking at the <code>#print</code> output and I can't figure out what it is doing.  It's easy to translate Haskell's <code>do</code> into what it is syntactic sugar for, but it's not easy to do that with Lean's <code>do</code>.  So what it is actually doing becomes confusing and mysterious.  If it works, great, but if it ever doesn't, it may be difficult to diagnose.  Functional programming is supposed to free us from side-effects that are not apparently on the face of the code.  Lean's <code>do</code> is doing something analogous to producing non-apparent side-effects, by rewriting code in ways that are not obvious. Saying this won't change anything.</p>",
        "id": 430067796,
        "sender_full_name": "mars0i",
        "timestamp": 1711632698
    },
    {
        "content": "<p>Did you take a look at <a href=\"https://lean-lang.org/papers/do.pdf\">https://lean-lang.org/papers/do.pdf</a>?</p>",
        "id": 430068299,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1711632848
    },
    {
        "content": "<p>No, didn't know about that.  Thanks <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> .  I'll look at it.</p>",
        "id": 430068390,
        "sender_full_name": "mars0i",
        "timestamp": 1711632883
    },
    {
        "content": "<p>I apologize for being so rant-ey in my earlier post.  I do appreciate the link to the article that Maurcio provided.  </p>\n<p>(I've skimmed the PDF, and feel it's not obvious that it clarifies what bothered me, but also that it wouldn't be worth my trouble at this stage to try to figure out whether the answer is there.  It's OK.  I can use <code>do</code> in the ways suggested in teaching materials without trying to understand it.  I didn't decide to learn Lean for the sake of <code>do</code>. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 430168242,
        "sender_full_name": "mars0i",
        "timestamp": 1711663126
    },
    {
        "content": "<p>I will say that copying <code>do</code> boilerplate for the sake of building up intuitive pattern intuitions is going to have to be part of my strategy with <code>do</code>.   That's OK. (<code>do</code>'s semantics in Haskell weren't clear to me until I learned how to translate away <code>do</code>.  I know many people think that <code>do</code> is easy to understand because \"it's just like imperative languages\", but I never felt that way, despite having more experience with imperative than functional languages--like most people. Everyone's different.)</p>",
        "id": 430169944,
        "sender_full_name": "mars0i",
        "timestamp": 1711664105
    },
    {
        "content": "<p>And it is good that I went through this experience with Lean's <code>do</code>.</p>",
        "id": 430172633,
        "sender_full_name": "mars0i",
        "timestamp": 1711665682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"617444\">mars0i</span> <a href=\"#narrow/stream/113489-new-members/topic/Error.20translating.20FPIL.20IO.20example.20from.20do.20to.20bind/near/430168242\">said</a>:</p>\n<blockquote>\n<p>I apologize for being so rant-ey in my earlier post.  I do appreciate the link to the article that Maurcio provided.  </p>\n<p>(I've skimmed the PDF, and feel it's not obvious that it clarifies what bothered me, but also that it wouldn't be worth my trouble at this stage to try to figure out whether the answer is there.  It's OK.  I can use <code>do</code> in the ways suggested in teaching materials without trying to understand it.  I didn't decide to learn Lean for the sake of <code>do</code>. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>\n</blockquote>\n<p>The point of the automated insertion of functions (namely the only automated insertion that is happening is lifting of monads) is that you don't want users to think about it. For example when I am doing meta programming I'm in <code>MetaM</code> which is a <code>StateT</code> + <code>ReaderT</code> + <code>CoreM</code>. When I call a function that operates just in <code>CoreM</code> I don't want to have to think about why I'm suddenly getting a type error and that I have to remember inserting a <code>liftM</code>. It should just work as its obvious that I can do this.</p>",
        "id": 430175082,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1711667102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"617444\">mars0i</span> <a href=\"#narrow/stream/113489-new-members/topic/Error.20translating.20FPIL.20IO.20example.20from.20do.20to.20bind/near/429732075\">said</a>:</p>\n<blockquote>\n<p>That sounds reasonable <span class=\"user-mention silent\" data-user-id=\"500038\">Timo Carlin-Burns</span>.  Thanks.  I'll look at it more later, then.   (I might not like it.  I know I'm in a minority, but in Haskell, I think <code>do</code> hides what is really happening from novices.  I was very confused by <code>do</code> at first.  As I said, it's a minority perspective.  But packing more syntactic sugar into <code>do</code> means it's harder to understand what it's doing.  Oh well.  Realistic, flexible IO is always going to be somewhat messy.)</p>\n</blockquote>\n<p>I also think that its fine for <code>do</code> to hide what's going on. With the <code>&lt;-</code> arrow you do not need to know at all that it is about some bind operation that is defined in some funky way. Instead the mental model of <code>&lt;-</code> can just be \"this performs some additional thing specific to the monad\" In IO thats running an IO action, in State that's accessing and potentially modifying the state etc. A user does not really need to know how to desugar into bind sequences in order for this to work out.</p>",
        "id": 430175353,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1711667238
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>.  That makes sense, and it's helpful to have that context. I kind of prefer to take a different approach, but this just isn't the best situation for my preferred strategy.  It won't be a big deal to go along with the standard Lean <code>do</code> procedure when I need IO, state, etc.  I could say more about what I prefer and why, but it's not very interesting. There's no point to me going on about it.</p>",
        "id": 430193853,
        "sender_full_name": "mars0i",
        "timestamp": 1711680889
    },
    {
        "content": "<p>Note that nobody forces you to use <code>do</code>.</p>",
        "id": 430194350,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711681198
    },
    {
        "content": "<p><code>set_option pp.notation false</code> causes the pretty printer to stop using <code>do</code> notation (among other notations)</p>",
        "id": 430197658,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711683850
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>.  That's extremely useful for what I was trying to understand.</p>",
        "id": 430279845,
        "sender_full_name": "mars0i",
        "timestamp": 1711728950
    }
]