[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Sort</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.PrimeFin</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">simplelemma</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n    <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≤</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n.primeFactors</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">n.primeFactors</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_sort</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>In this code for example,  Lean complains that it cannot synthesize IsAntiSymm of le for Natural numbers, but sometimes it can clearly synthesize similar things. Is there a reason sometimes it works but other times it doesn't? Is it intentional or a bug? Btw this last line was even suggested by \"exact?\". Thanks in advance!</p>",
        "id": 416492710,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1705550336
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_sort</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 416493454,
        "sender_full_name": "David Renshaw",
        "timestamp": 1705550738
    },
    {
        "content": "<p>(adding a type annotation to the lambda)</p>",
        "id": 416493458,
        "sender_full_name": "David Renshaw",
        "timestamp": 1705550746
    },
    {
        "content": "<p>or this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_sort</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 416493526,
        "sender_full_name": "David Renshaw",
        "timestamp": 1705550791
    },
    {
        "content": "<p>ooh thanks especially for teaching me how to specify just one implicit variable. I've been just doing the @ thing whenever I needed that before and had to specify all the time lol</p>",
        "id": 416493590,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1705550840
    },
    {
        "content": "<p>yeah, that's a pretty handy feature</p>",
        "id": 416493625,
        "sender_full_name": "David Renshaw",
        "timestamp": 1705550862
    },
    {
        "content": "<p>I see so Lean just needed the Nat type, thanks!</p>",
        "id": 416493636,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1705550876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"662620\">Andy Jiang</span> has marked this topic as resolved.</p>",
        "id": 416493642,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705550879
    }
]