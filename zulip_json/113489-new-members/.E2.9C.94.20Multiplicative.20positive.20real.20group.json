[
    {
        "content": "<p>Hello! Very new here and trying to create the group of positive real numbers under multiplication. From searching in mathlib I only found Reals and NNReals defined. Should I create a PReal-type, create a Submonoid of positive reals and go from there, or do something different?</p>",
        "id": 411383471,
        "sender_full_name": "Neo Dahlfors",
        "timestamp": 1704467000
    },
    {
        "content": "<p>If you're talking about putting something into mathlib, then you have to weigh up the advantages v disadvantages of making a new type: every definition comes with a cost (the API needed for the definition, and the cost of having a new \"fundamental object\" (which is related to lots more fundamental objects) to juggle with). </p>\n<p>If you're just talking about making this as an exercise, then sure go ahead and define the subtype (I would recommend you define it as a subtype of reals) and put the group structure on it. I think making it as a type (<code>PReal</code>) would be the easiest if you're a beginner.</p>",
        "id": 411384769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704467490
    },
    {
        "content": "<p>Thank you! Nothing for mathlib, just trying to get a feel for the language.</p>",
        "id": 411385090,
        "sender_full_name": "Neo Dahlfors",
        "timestamp": 1704467618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"678566\">Neo Dahlfors</span> has marked this topic as resolved.</p>",
        "id": 411385132,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704467634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"678566\">@Neo Dahlfors</span> , I think I would suggest just using the group of units <code>ℝ≥0ˣ</code> of the nonnegative reals. I think we have the API in Mathlib to use this easily.</p>",
        "id": 411387491,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704468545
    },
    {
        "content": "<p>For instance, if you have a nonzero <code>x : ℝ≥0</code>, you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units.mk0#doc\">docs#Units.mk0</a> to get a term of <code>ℝ≥0ˣ</code>.</p>",
        "id": 411388140,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704468784
    },
    {
        "content": "<p>This all works as long as you only really care about the group structure. It's not going to give you for free that the positive reals form a <code>NonUnitalCommSemiring</code>, for instance.</p>",
        "id": 411388582,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704468943
    },
    {
        "content": "<p>Coming back to this question: the positive reals as a multiplicative group could be very useful, e.g., in the theory of Mellin transforms, which are literally a special case of a Fourier transform, where the character is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mo>⋅</mo><msup><mi mathvariant=\"normal\">∣</mi><mi>s</mi></msup></mrow><annotation encoding=\"application/x-tex\">|\\cdot|^s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span></span></span> and Haar measure <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>x</mi><mi mathvariant=\"normal\">/</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">dx /x </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">x</span></span></span></span>. Would it be worthwhile to develop this API? (I see that we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mellin#doc\">docs#mellin</a>, which needs its own API, as opposed to using that coming directly from Fourier...?) Perhaps <span class=\"user-mention\" data-user-id=\"481963\">@David Loeffler</span> has an opinion one way or another?</p>",
        "id": 412574300,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1705075754
    },
    {
        "content": "<p>I'm not in favour of this, tbh. I feel that it would be painful to use this in actual concrete computations (where we are given a function on the reals and we want to compute its Mellin transform); it'd just be yet more coercions to keep track of.</p>",
        "id": 412575575,
        "sender_full_name": "David Loeffler",
        "timestamp": 1705076111
    },
    {
        "content": "<p>At some point in the remote future we might conceivably have a general theory of Fourier transforms for locally compact abelian groups, and then we can get the Mellin transform and the classical Fourier transform by specialising to either <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"double-struck\">R</mi><mrow><mo>&gt;</mo><mn>0</mn></mrow><mo>×</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}_{&gt;0}^\\times</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1051em;vertical-align:-0.2937em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8115em;\"><span style=\"top:-2.4337em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">&gt;</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.1031em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2937em;\"><span></span></span></span></span></span></span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>. But I feel that's a rather long way off, and without that, the benefits of introducing a <code>PositiveReal</code> type seem a bit dubious.</p>",
        "id": 412576159,
        "sender_full_name": "David Loeffler",
        "timestamp": 1705076292
    },
    {
        "content": "<p>The reason why the Mellin transform has its own API has more to do with the fact that we don't allow non-unitary characters in the Fourier transform on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> yet (so we don't have the Laplace transform). I wondered at the time when I was setting up the Mellin stuff whether it was possible to shortcut some parts by relating them to the Fourier transform API, and I concluded that it wasn't.</p>",
        "id": 412577581,
        "sender_full_name": "David Loeffler",
        "timestamp": 1705076665
    },
    {
        "content": "<p>Note that I am developing discrete Fourier analysis in LeanAPAP, so we might want the LCA generality sooner rather than later to avoid duplication.</p>",
        "id": 412614046,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705090648
    },
    {
        "content": "<p>Perhaps a better way of explaining why the Mellon transform needs its own separate API is that in the general theory of Fourier transforms on LCA groups, one always considers <em>unitary</em> characters. This is nice because taking unitary duals is an involution on LCA groups, and because the Fourier xfm of an L1 function is defined everywhere on the Pontryagin dual of G. But it doesn’t capture the kind of applications of Mellin transforms that analytic number theorists use, where the characters may be non-unitary and the domain of convergence depends on the function.</p>",
        "id": 412690123,
        "sender_full_name": "David Loeffler",
        "timestamp": 1705136277
    },
    {
        "content": "<p>I don’t know if there is a version of Fourier theory for general LCA groups allowing non-unitary characters, and my guess is that the space of non-unitary characters of a general LCA group is too pathological to say anything nontrivial about.</p>",
        "id": 412690371,
        "sender_full_name": "David Loeffler",
        "timestamp": 1705136449
    }
]