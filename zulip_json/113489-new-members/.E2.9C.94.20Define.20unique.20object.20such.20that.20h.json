[
    {
        "content": "<p>I have the following setup for my lean learning project (axiomatic geometry).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Logic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span><span class=\"c1\">--needed to use notation with local variables</span>\n\n<span class=\"c1\">-- Declare the primitive Types and Relations of axiomatic geometry</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">lies_on</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">line</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"c1\">--notation for lies_on</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span>    <span class=\"s2\">\" ∈ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lies_on</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">50</span>  <span class=\"n\">A</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∉ \"</span> <span class=\"n\">B</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">lies_on</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n\n<span class=\"c1\">--primitive Relation of a point being *between* to others</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">between</span><span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">point</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">50</span>  <span class=\"n\">A</span> <span class=\"s2\">\" ⋆ \"</span> <span class=\"n\">B</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\" ⋆ \"</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"mi\">65</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">between</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span>\n\n<span class=\"c1\">--Hilberts Axioms of Incidence</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">line</span><span class=\"o\">,</span> <span class=\"n\">lies_on</span> <span class=\"n\">A</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">lies_on</span> <span class=\"n\">B</span> <span class=\"n\">l</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">line</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I3</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">line</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I4</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">line</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">}</span>\n\n<span class=\"c1\">--definition of the unique line (by I2) such that A and B lie on it</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span>  <span class=\"n\">line_of</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">≠</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">I2</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"c1\">--notation ℓ(A,B) for this line</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">65</span>  <span class=\"s2\">\"ℓ(\"</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\",\"</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\")\"</span><span class=\"bp\">=&gt;</span> <span class=\"n\">line_of</span> <span class=\"n\">A</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>I want to define the unique line through A and B (given A\\neq B). I have looked around in mathlib a bit and i currently believe the best way to handle this would be to make a type that is a special line (so it should inherit from line?) that<br>\ncomes with its uniqueness property.</p>\n<p>For the above setup i cant use inherit because line isn't a structure.  What do you think is the best way?</p>\n<p>Edit: The current setup is a bit annoying, because l(A,B) doesnt come with its unqiueness property at the same time.</p>",
        "id": 433552641,
        "sender_full_name": "Moritz R",
        "timestamp": 1713281963
    },
    {
        "content": "<p>You can follow that up with some <code>theorem</code>s using <code>Classical.choose_spec</code> to get uniqueness</p>",
        "id": 433555632,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713282816
    },
    {
        "content": "<p>Though more annoying with the current setup is needing to pass in that <code>A ≠ B</code> proof.</p>",
        "id": 433555977,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713282911
    },
    {
        "content": "<p>Also, <code>variable</code> instead of <code>axiom</code> means you have to be sure you can pass all of these axioms around as arguments, which could be annoying too.</p>",
        "id": 433556302,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713283013
    },
    {
        "content": "<p>Here is a different formulation of <code>ℓ(A,B)</code> using <code>I1</code> instead, along with the theorem that this is the unique line.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Logic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span><span class=\"c1\">--needed to use notation with local variables</span>\n\n<span class=\"c1\">-- Declare the primitive Types and Relations of axiomatic geometry</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">Line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">lies_on</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Line</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"c1\">--notation for lies_on</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∈ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lies_on</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">50</span>  <span class=\"n\">A</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∉ \"</span> <span class=\"n\">B</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">lies_on</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n\n<span class=\"c1\">--primitive Relation of a point being *between* to others</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">between</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">50</span>  <span class=\"n\">A</span> <span class=\"s2\">\" ⋆ \"</span> <span class=\"n\">B</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\" ⋆ \"</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"mi\">65</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">between</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span>\n\n<span class=\"c1\">--Hilberts Axioms of Incidence</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">I1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">I2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">I3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">I4</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n\n<span class=\"sd\">/-- The line passing through `A` and `B`. If `A ≠ B`, then this line is unique. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">line_of</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">I1</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"sd\">/-- Notation `ℓ(A,B)` for a line passing through `A` and `B`. -/</span>\n<span class=\"kd\">notation</span>  <span class=\"s2\">\"ℓ(\"</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\",\"</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\")\"</span><span class=\"bp\">=&gt;</span> <span class=\"n\">line_of</span> <span class=\"n\">A</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">left_pt_mem_line_of</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">And.left</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose_spec</span> <span class=\"o\">(</span><span class=\"n\">I1</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">right_pt_mem_line_of</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">And.right</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose_spec</span> <span class=\"o\">(</span><span class=\"n\">I1</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">line_of_unique</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Line</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">ℓ</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">l'</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hA'</span><span class=\"o\">,</span> <span class=\"n\">hB'</span><span class=\"o\">⟩,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">I2</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span> <span class=\"n\">l</span> <span class=\"o\">⟨</span><span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span> <span class=\"n\">ℓ</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">left_pt_mem_line_of</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">right_pt_mem_line_of</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">⟩</span>\n  <span class=\"n\">subst_vars</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 433557867,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713283458
    },
    {
        "content": "<p>There's no reason to require that <code>ℓ(A,B)</code> only work if <code>A</code> and <code>B</code> are different points. When <code>A = B</code>, this gives <em>some</em> line passing through <code>A</code>.</p>",
        "id": 433558178,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713283551
    },
    {
        "content": "<p>Is a subtype of line a bad idea? It could have a unique_line.unique property which gives what your theorem gives</p>",
        "id": 433560523,
        "sender_full_name": "Moritz R",
        "timestamp": 1713284203
    },
    {
        "content": "<p>I think usually, if you have some way to define a partial function using some \"junk\" data, it's usually more ergonomic to do so.</p>",
        "id": 433560794,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713284280
    },
    {
        "content": "<p>Plus, some theorems are easier to prove if <code>ℓ(A,A)</code> is allowed. (At least, that's what I came to understand when I filled in for a colleague to give an axiomatic geometry lecture the other week.)</p>",
        "id": 433561076,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713284357
    },
    {
        "content": "<p>can you show me how to do a version with subtype? I want to try both approches and see. <br>\nBecause <code>extends</code> doesnt work when we dont have a structure, do i need to create a new type and define a cast to line?<br>\nEdit: i dont see how to get inline code blocks :/ ah i see i used the wrong \"tick\"</p>",
        "id": 433561770,
        "sender_full_name": "Moritz R",
        "timestamp": 1713284574
    },
    {
        "content": "<p>I'm not really sure how you'd want this subtype to work actually.</p>\n<p>(<a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>, last line. You do <code>the code `1 + 1` is inline</code>)</p>",
        "id": 433561973,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713284637
    },
    {
        "content": "<p>Is inheritance really more than a new type with a cast to the parent?</p>",
        "id": 433562150,
        "sender_full_name": "Moritz R",
        "timestamp": 1713284696
    },
    {
        "content": "<p>What would this new type be?</p>",
        "id": 433562340,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713284760
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> is a link, I didn't meant to suggest that <code>#</code> was part of the syntax)</p>",
        "id": 433562479,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713284796
    },
    {
        "content": "<p>I was thinking like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">unique_line</span> <span class=\"n\">where</span>\n  <span class=\"n\">intro</span><span class=\"o\">::</span>\n  <span class=\"n\">left</span><span class=\"o\">:</span> <span class=\"n\">point</span>\n  <span class=\"n\">right</span><span class=\"o\">:</span> <span class=\"n\">point</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Unique_line</span> <span class=\"n\">Line</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">ul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">I1</span> <span class=\"n\">ul.left</span> <span class=\"n\">ul.right</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and now i need to figure out how to attach the uniqueness property to it</p>",
        "id": 433563465,
        "sender_full_name": "Moritz R",
        "timestamp": 1713285095
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Unique_line.uniqueness</span> <span class=\"o\">(</span><span class=\"n\">ul</span><span class=\"o\">:</span> <span class=\"n\">Unique_line</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hC</span><span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hD</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">):</span> <span class=\"n\">ul.left</span> <span class=\"bp\">≠</span> <span class=\"n\">ul.right</span> <span class=\"bp\">→</span> <span class=\"n\">ul</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Why doesnt this compile?</p>",
        "id": 433567994,
        "sender_full_name": "Moritz R",
        "timestamp": 1713286540
    },
    {
        "content": "<p>Oh i see i wrote point in small ...</p>",
        "id": 433568310,
        "sender_full_name": "Moritz R",
        "timestamp": 1713286647
    },
    {
        "content": "<p>What do you think of this version?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Logic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span><span class=\"c1\">--needed to use notation with local variables</span>\n\n<span class=\"c1\">-- Declare the primitive Types and Relations of axiomatic geometry</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">Line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">lies_on</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Line</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"c1\">--notation for lies_on</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∈ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lies_on</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">50</span>  <span class=\"n\">A</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∉ \"</span> <span class=\"n\">B</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">lies_on</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n\n<span class=\"c1\">--primitive Relation of a point being *between* to others</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">between</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Point</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">50</span>  <span class=\"n\">A</span> <span class=\"s2\">\" ⋆ \"</span> <span class=\"n\">B</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\" ⋆ \"</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"mi\">65</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">between</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span>\n\n<span class=\"c1\">--Hilberts Axioms of Incidence</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">I1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">I2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">I3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">I4</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n\n<span class=\"sd\">/-- The line passing through `A` and `B`. If `A ≠ B`, then this line is unique. -/</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Unique_line</span> <span class=\"n\">where</span>\n  <span class=\"n\">intro</span><span class=\"o\">::</span>\n  <span class=\"n\">left</span><span class=\"o\">:</span> <span class=\"n\">Point</span>\n  <span class=\"n\">right</span><span class=\"o\">:</span> <span class=\"n\">Point</span>\n<span class=\"kd\">notation</span>  <span class=\"s2\">\"ℓ(\"</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\",\"</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\")\"</span><span class=\"bp\">=&gt;</span> <span class=\"n\">Unique_line</span> <span class=\"n\">A</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Unique_line</span> <span class=\"n\">Line</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">ul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">I1</span> <span class=\"n\">ul.left</span> <span class=\"n\">ul.right</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Unique_line.left_pt_mem</span> <span class=\"o\">(</span><span class=\"n\">ul</span><span class=\"o\">:</span> <span class=\"n\">Unique_line</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ul.left</span> <span class=\"bp\">∈</span> <span class=\"n\">ul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose_spec</span> <span class=\"o\">(</span><span class=\"n\">I1</span> <span class=\"n\">ul.left</span> <span class=\"n\">ul.right</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Unique_line.right_pt_mem</span> <span class=\"o\">(</span><span class=\"n\">ul</span><span class=\"o\">:</span> <span class=\"n\">Unique_line</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ul.right</span> <span class=\"bp\">∈</span> <span class=\"n\">ul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose_spec</span> <span class=\"o\">(</span><span class=\"n\">I1</span> <span class=\"n\">ul.left</span> <span class=\"n\">ul.right</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Unique_line.uniqueness</span> <span class=\"o\">(</span><span class=\"n\">ul</span><span class=\"o\">:</span> <span class=\"n\">Unique_line</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Line</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span><span class=\"o\">:</span> <span class=\"n\">ul.left</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">ul.right</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">):</span> <span class=\"n\">ul.left</span> <span class=\"bp\">≠</span> <span class=\"n\">ul.right</span> <span class=\"bp\">→</span> <span class=\"n\">ul</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">hunique</span>  <span class=\"o\">:=</span> <span class=\"n\">I2</span> <span class=\"n\">ul.left</span> <span class=\"n\">ul.right</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">lr_on_l</span> <span class=\"o\">:=</span> <span class=\"n\">And.intro</span> <span class=\"n\">hl</span> <span class=\"n\">hr</span>\n  <span class=\"k\">have</span> <span class=\"n\">lr_on_ul</span> <span class=\"o\">:=</span> <span class=\"n\">And.intro</span> <span class=\"n\">ul.left_pt_mem</span> <span class=\"n\">ul.right_pt_mem</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ExistsUnique.unique</span> <span class=\"n\">hunique</span> <span class=\"n\">lr_on_ul</span> <span class=\"n\">lr_on_l</span>\n</code></pre></div>",
        "id": 433572514,
        "sender_full_name": "Moritz R",
        "timestamp": 1713288204
    },
    {
        "content": "<p>I'm not sure what function <code>Unique_line</code> has, other than adding an extra step between <code>ℓ(A,B)</code> and a <code>Line</code>. This <code>Unique_line</code> type is the same as <code>Point × Point</code>, and it's just packaging up the arguments to the <code>ℓ(A,B)</code> notation.</p>\n<p>Thinking about it more, there's potentially a use, in that you can write <code>(ℓ(A,B)).uniqueness</code> and such (using generalized field notation), but you probably can put those functions into the <code>Line</code> namespace too.</p>",
        "id": 433573551,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713288605
    },
    {
        "content": "<p>One annoying thing is that <code>(ℓ(A,B)).uniqueness</code> refers to <code>(ℓ(A,B)).left</code> and <code>(ℓ(A,B)).right</code> rather than <code>A</code> and <code>B</code>, which can cause some mild problems here and there.</p>",
        "id": 433574119,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713288821
    },
    {
        "content": "<p><code>(ℓ(A,B)).uniqueness</code>  was my motivation for trying this style</p>",
        "id": 433574377,
        "sender_full_name": "Moritz R",
        "timestamp": 1713288924
    },
    {
        "content": "<p>i will see if it holds up, else i will switch to the style you proposed above</p>",
        "id": 433574670,
        "sender_full_name": "Moritz R",
        "timestamp": 1713289052
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 433574686,
        "sender_full_name": "Moritz R",
        "timestamp": 1713289064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"602461\">Moritz R</span> has marked this topic as resolved.</p>",
        "id": 433574782,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713289088
    },
    {
        "content": "<p>Instead of calling it <code>Unique_line</code>, I would suggest calling it <code>LineOf</code>, <code>LineOfPoints</code>, or <code>LineSpec</code>, something like these.</p>",
        "id": 433577585,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713290287
    }
]