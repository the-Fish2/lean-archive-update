[
    {
        "content": "<p>My friend sent me this code*, asking if I know how to remove the first sorry. I do not, but I have a suspicion that it might not even be true; it would make sense to me if declaring a Set U inhabited simply takes the same favored element from U.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">MunkresCh1Ex2PartB</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">U</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Inhabited</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Inhabited</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">⊆</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"bp\">∨</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">⊆</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">⊆</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"bp\">∪</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">hb</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">hc</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n<span class=\"w\">  </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">},</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">},</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>If this is provable as written, I'd be interested in how. If not, how would we go about constructing an example? Do we need to inform Lean somehow that U has at least two elements?<br>\n(* The second sorry was filled— we know how to finish the proof once B and C are different. Just asking about the construction.)</p>",
        "id": 441501552,
        "sender_full_name": "enstucky",
        "timestamp": 1717086640
    },
    {
        "content": "<p>What if B and C are the same one-element subset of U?</p>",
        "id": 441502782,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1717086964
    },
    {
        "content": "<p>Yeah, there's no reason to assume b and c are different</p>",
        "id": 441508439,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717088414
    },
    {
        "content": "<p>And it would be more typical to write the assumptions as <code>B.Nonempty</code></p>",
        "id": 441508804,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717088501
    },
    {
        "content": "<p>Sorry, but I feel these comments have missed the point. We want to show that there exist two sets B and C and a third set which A is not in either of them, but is in the union. Informally, this is clearly true as long as U has at least two elements, but we need a formal construction: if Nonempty/Inhabited are not strong enough to do it, I'd like to know what might be.</p>",
        "id": 441761806,
        "sender_full_name": "enstucky",
        "timestamp": 1717175789
    },
    {
        "content": "<p>[edit: golfed]</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">NotMunkresCh1Ex2PartB</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span><span class=\"o\">),</span>\n<span class=\"w\">      </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">⊆</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"bp\">∨</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">⊆</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">⊆</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"bp\">∪</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">push_neg</span>\n<span class=\"w\">  </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">tauto</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">tauto</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">C</span>\n<span class=\"w\">  </span><span class=\"n\">constructor</span>\n<span class=\"w\">  </span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">tauto</span>\n<span class=\"w\">  </span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">intro</span>\n<span class=\"w\">    </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">subset_singleton_iff_eq</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">subset_univ</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_eq</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">univ_unique</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"n\">aesop</span>\n</code></pre></div>\n<p><span class=\"user-mention silent\" data-user-id=\"713400\">enstucky</span> <a href=\"#narrow/stream/113489-new-members/topic/Same.20ground.20type.2C.20inhabited.20Sets.20.3D.3E.20same.20default.3F/near/441761806\">said</a>:</p>\n<blockquote>\n<p>If Nonempty/Inhabited are not strong enough to do it, I'd like to know what might be.</p>\n</blockquote>\n<p><code>[Nontrivial U]</code></p>",
        "id": 441766977,
        "sender_full_name": "Richard Copley",
        "timestamp": 1717177319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"713400\">enstucky</span> <a href=\"#narrow/stream/113489-new-members/topic/Same.20ground.20type.2C.20inhabited.20Sets.20.3D.3E.20same.20default.3F/near/441761806\">said</a>:</p>\n<blockquote>\n<p>Sorry, but I feel these comments have missed the point. We want to show that there exist two sets B and C and a third set which A is not in either of them, but is in the union. Informally, this is clearly true as long as U has at least two elements, but we need a formal construction: if Nonempty/Inhabited are not strong enough to do it, I'd like to know what might be.</p>\n</blockquote>\n<p>What is the intended meaning of <code>(B C : Set U) [hb : Inhabited B] [hc : Inhabited C]</code>? As written, <code>B</code> and <code>C</code> are arbitrary non-empty subsets of <code>U</code>, but I think you're thinking of <code>B</code> and <code>C</code> as elements.</p>",
        "id": 441784578,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1717182834
    },
    {
        "content": "<p>Informally it is not clearly true as long as U has at least two elements because there is nothing in your theorem which precludes B=C however many elements any of the sets have, and then your claim becomes the false assertion \"not (P or P iff P)\".</p>",
        "id": 441813342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717192190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113489-new-members/topic/Same.20ground.20type.2C.20inhabited.20Sets.20.3D.3E.20same.20default.3F/near/441784578\">said</a>:</p>\n<blockquote>\n<p>What is the intended meaning of <code>(B C : Set U) [hb : Inhabited B] [hc : Inhabited C]</code>? As written, <code>B</code> and <code>C</code> are arbitrary non-empty subsets of <code>U</code>, but I think you're thinking of <code>B</code> and <code>C</code> as elements.</p>\n</blockquote>\n<p>Thank you for this question, since it illuminated the point that everyone has been making. The intention is not that B and C are fixed, but rather that we are free to choose all three sets A, B, and C, so that the desired property holds. My best guess as to the reason for wanting these Inhabited in the problem statement was to get at this idea that we need to have enough elements running around to make this existence statement true, but I understand now that this way of going about it makes no sense.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/113489-new-members/topic/Same.20ground.20type.2C.20inhabited.20Sets.20.3D.3E.20same.20default.3F/near/441766977\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"713400\">enstucky</span> <a href=\"#narrow/stream/113489-new-members/topic/Same.20ground.20type.2C.20inhabited.20Sets.20.3D.3E.20same.20default.3F/near/441761806\">said</a>:</p>\n<blockquote>\n<p>If Nonempty/Inhabited are not strong enough to do it, I'd like to know what might be.</p>\n</blockquote>\n<p><code>[Nontrivial U]</code></p>\n</blockquote>\n<p>Thank you! This is exactly what we needed. I must admit, the idea that \"nontrivial\" means \"has at least two elements\" rather than \"has at least one element\" would never have crossed my mind &gt;_&lt;</p>",
        "id": 441920865,
        "sender_full_name": "enstucky",
        "timestamp": 1717255936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"713400\">enstucky</span> has marked this topic as resolved.</p>",
        "id": 441921339,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717256159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"713400\">enstucky</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Same.20ground.20type.2C.20inhabited.20Sets.20.3D.3E.20same.20default.3F/near/441920865\">said</a>:</p>\n<blockquote>\n<p>Thank you! This is exactly what we needed. I must admit, the idea that \"nontrivial\" means \"has at least two elements\" rather than \"has at least one element\" would never have crossed my mind &gt;_&lt;</p>\n</blockquote>\n<p>No worries.<br>\nWhen for example <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a (unitary) ring, <code>Nontrivial R</code> is equivalent to the usual meaning <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo mathvariant=\"normal\">≠</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0 \\ne 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> of \"nontrivial\" in that context. The generalization to arbitrary types turns out to be useful elsewhere, and <code>Nontrivial</code> is as good a name as any.</p>",
        "id": 441924441,
        "sender_full_name": "Richard Copley",
        "timestamp": 1717257486
    }
]