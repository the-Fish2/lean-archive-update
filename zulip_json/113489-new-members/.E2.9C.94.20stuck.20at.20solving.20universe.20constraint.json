[
    {
        "content": "<p>Hi the following example in TPIL §10 Typeclass:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Hidden</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span>  <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Hidden</span>\n</code></pre></div>\n<p>fails with the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.1059</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.1063</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">u.1062</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.1059</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.1063</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.1059</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.1063</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.1062</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.1062</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 422942486,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708657531
    },
    {
        "content": "<p>But </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Hidden</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Hidden</span>\n</code></pre></div>\n<p>works. Any hint for this please?</p>",
        "id": 422942568,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708657598
    },
    {
        "content": "<p>The following version</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Hidden</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Hidden</span>\n</code></pre></div>\n<p>changing <code>Type u</code> to <code>Sort u</code> works too, which is the same as the Standard Library.  Why would <code>Type u</code> reports \"stuck at solving universe constraint\" here?</p>",
        "id": 422942861,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708657842
    },
    {
        "content": "<p>In the first case, <code>(a : Sort u)</code> and <code>(b : Type v)</code> is implied. This means that the type <code>a -&gt; b</code> will be in universe <code>Sort (imax u (v + 1))</code>, which is the same as <code>Sort (max u (v + 1))</code>. However, as per <code>Inhabited</code>’s definition it requires something in <code>Type _</code> = <code>Sort (_ + 1)</code>. The problem is that <code>Sort (max u (v + 1))</code> cannot be unified with <code>Sort (_ + 1)</code>.</p>",
        "id": 422975795,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1708679423
    },
    {
        "content": "<p>If you change <code>u</code> to <code>u + 1</code> by requiring <code>a : Type u</code>, that fixes it: <code>Sort (max (u + 1) (v + 1)) = Sort (max u v + 1)</code>, which unifies with <code>Sort (_ + 1)</code> (<code>_ := max u v</code>)</p>",
        "id": 422976031,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1708679514
    },
    {
        "content": "<p>Similarly, only requiring <code>Sort _</code> instead of <code>Sort (_ + 1)</code> also fixes it</p>",
        "id": 422976141,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1708679539
    },
    {
        "content": "<p>Thank you for the explanation. Let me check this. I am still trying to understand the <code>Sort</code>s and <code>Type</code>s</p>",
        "id": 422979031,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708680473
    },
    {
        "content": "<p>Are you interested in universes? This is some technical issue coming from the behaviour of <code>imax</code>. When I teach lean to mathematics undergraduates I don't teach universes at all, I tell them that there are only two universes, <code>Prop</code> and <code>Type</code>, and we stick to the mathematics and don't get tangled up with issues like the above. But if your interests are more aligned with the foundations of type theory, or you're the sort of person who wants to understand everything, then you might want to mull over this phenomenon.</p>",
        "id": 422980099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708680860
    },
    {
        "content": "<p>The tl;dr is that universe arithmetic is fiddly.</p>",
        "id": 422980440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708680983
    },
    {
        "content": "<p>I think I am interested in Type Theory but I don't plan to learn it systematically at the moment. The most urgent for me still is learning Lean to assist the learning of abstract algebra/commutative algebra and so on.</p>",
        "id": 422982329,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708681681
    },
    {
        "content": "<p>It's just that when typing the examples in TPIL in an interactive Lean environment, if there is some error I will try to fix it like \"doing some indentation, renaming some funs, moving some implicit types back to explicit types, etc\".   Sometimes this strategy works and then I just want to know the reason for avoiding like \"manipulating a black box\"</p>",
        "id": 422982386,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708681696
    },
    {
        "content": "<p>But still, I think I can handle this case <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  I am still reading the comment from Sabrina and some content in TPIL related to this. It may take me some time.</p>",
        "id": 422982558,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708681770
    },
    {
        "content": "<blockquote>\n<p>The problem is that Sort (max u (v + 1)) cannot be unified with Sort (_ + 1).</p>\n</blockquote>\n<p>Hi may I ask why it connot be solved via \"_ = max u (v+1) - 1\" ? It seems there is a new concept called unification? Maybe I do should skip this part</p>",
        "id": 423003752,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708690232
    },
    {
        "content": "<p><code>- 1</code> is not an operation you can do on universe levels</p>",
        "id": 423005254,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708690839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560873\">Coriver Chen</span> has marked this topic as resolved.</p>",
        "id": 423013321,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708694026
    }
]