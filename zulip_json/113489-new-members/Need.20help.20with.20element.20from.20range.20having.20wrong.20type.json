[
    {
        "content": "<p>I am trying to do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Lean is complaining that <code>i</code> has incorrect type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">a</span> <span class=\"n\">i</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">i</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">TypeLean</span> <span class=\"mi\">4</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>To fix it, I could do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But is there a way to make the original version work?</p>",
        "id": 427939098,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1710944479
    },
    {
        "content": "<p>If you're going to coerce <code>range n</code> to a type anyway, you might use <code>∀ i : range n</code></p>",
        "id": 427940283,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710944764
    },
    {
        "content": "<p>It works. Thanks. But I am a bit confused about the difference. So how does <code>i ∈ range n</code> differ from <code>i : range n</code>?</p>",
        "id": 427943387,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1710945527
    },
    {
        "content": "<p>One is <code>i : Nat</code> with a separate membership hypothesis, the other has the membership bundled up in a <code>Subtype</code></p>",
        "id": 427951160,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710947442
    },
    {
        "content": "<p>Does that mean that in <code>∑ i in range 4, h i</code>,  the index <code>i</code> will be a <code>Nat</code> and the property that <code>i</code> satisfies (i.e. 0 &lt;= i &lt; 4) is inaccessible?</p>",
        "id": 428011948,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1710967113
    },
    {
        "content": "<p>In that context, yes. You can use <code>Finset.attach</code></p>",
        "id": 428012728,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710967465
    },
    {
        "content": "<p>I am working to make <code>∑ hi : i ∈ range 4, h i</code> notation be the version you want</p>",
        "id": 428022729,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710972172
    }
]