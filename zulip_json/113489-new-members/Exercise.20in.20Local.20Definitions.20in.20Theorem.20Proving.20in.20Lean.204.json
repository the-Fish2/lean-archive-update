[
    {
        "content": "<p>Towards the bottom of the <a href=\"https://lean-lang.org/theorem_proving_in_lean4/dependent_type_theory.html#definitions\">Local Definitions section of Theorem Proving in Lean 4</a>, it says \"Notice that the meaning of the expression let <code>a := t1; t2</code> is very similar to the meaning of <code>(fun a =&gt; t2) t1,</code> but the two are not the same...As an exercise, try to understand why the definition of <code>foo </code>below type checks, but the definition of <code>bar</code> does not\", where</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"bp\">;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>So, <code>foo</code> typechecks and <code>#eval foo 4</code> gives 6.   <code>bar</code> fails to typecheck with error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HAdd</span> <span class=\"n\">a</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.4065</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The difference between the two is that macro substitution of <code>Nat</code> for <code>a</code> in <code>fun x : a =&gt; x + 2</code> leads to a checkable expression, whereas letting <code>a</code> be a type variable in <code>fun x : a =&gt; x + 2</code> fails to work because the syntactically sugared \"x + 2\"  is an invocation of <code>HAdd</code>which has to have <code>a</code> resolved to a concrete type before it can synthesize an instance.   Types are first class, so it is not a problem with passing types, which might be the first guess.  The example can be changed, taking out the sugaring of <code>HAdd</code>, to make a plainer comparison</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Add2</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"bp\">;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Add2</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add2</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">â†’</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">add2</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">Nat</span> <span class=\"n\">Add2</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"mi\">4</span> <span class=\"c1\">-- gives 6</span>\n<span class=\"k\">#eval</span> <span class=\"n\">bar</span> <span class=\"mi\">4</span> <span class=\"c1\">-- gives 6</span>\n</code></pre></div>\n<p>So to achieve the effect of the macro substitution given by <code>let</code>, we need to introduce <code>a</code> as a <code>Type</code>-valued variable and  <code>add2</code> as a function variable and then supply an instance of <code>add2</code> which takes an <code>a</code> to an <code>a</code>.  This does the mechanics otherwise done by instance resolution of <code>HAdd</code>.</p>\n<p>The mechanics of <code>instance</code>s  and instance resolution are not presented at this stage in the text.  This material is covered in Functional Programming in Lean in the <a href=\"https://lean-lang.org/functional_programming_in_lean/type-classes/pos.html?highlight=instance#classes-and-instances\">Classes and Instances</a> section.  It seems like a beginner would need to bookmark this exercise, get through that section of Functional Programming in Lean, and then come back to it,  to fully complete the exercise.</p>",
        "id": 409845662,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1703455367
    },
    {
        "content": "<p>Typeclass search is not essential to this example, but it does obscure the error message. Here's the version of the exercise using your <code>Add2</code> function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Add2</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"bp\">;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Add2</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Add2</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 409863016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703470105
    }
]