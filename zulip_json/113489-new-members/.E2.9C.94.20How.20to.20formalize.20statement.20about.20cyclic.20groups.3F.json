[
    {
        "content": "<p>I'm still quite confused about how to deal with the language switch between Set and Type. I encountered problem in formalizing the proposition</p>\n<blockquote>\n<p>Show that a group with no proper nontrivial subgroups is cyclic.</p>\n</blockquote>\n<p>I checked the definition of <code>IsCyclic</code> in Mathlib and try to prove some thing like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">GisCyclic</span> <span class=\"o\">:</span>  <span class=\"n\">IsCyclic</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n    <span class=\"n\">exists_generator</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>However, I found it hard to formalize the hypothesis. To be concrete, how to describe a group with no proper nontrivial subgroups? I noticed in Mathlib <code>Subgroup</code> has <code>carrier</code> and can be treated as Set, but <code>Group</code> doesn't. I can't write something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>to describe every subgroup of G contains all of its elements. I'm thinking of using <code>by_contra</code> and let <code>g</code> be the generator, x be the element not in <code>Subgroup.zpowers g</code>and use the hypothesis to get a contradiction, but I don't know how to do it formally. Wishing for some guidance.</p>",
        "id": 423832193,
        "sender_full_name": "Yicheng Tao",
        "timestamp": 1709131247
    },
    {
        "content": "<p><code>Set G</code> means \"the type of all subsets of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>\". <code>x ∈ Set G</code> doesn't mean anything because <code>Set G</code> is a type, not a subset.</p>",
        "id": 423833651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709131631
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsCyclic</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 423834198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709131762
    },
    {
        "content": "<p>Thanks! I'll try to solve it.</p>",
        "id": 423839095,
        "sender_full_name": "Yicheng Tao",
        "timestamp": 1709132960
    },
    {
        "content": "<p>This is my solution to the question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsCyclic</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">by_cases</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Nontrivial</span> <span class=\"n\">G</span>\n    <span class=\"bp\">·</span> <span class=\"n\">by_contra</span> <span class=\"n\">h'</span>\n      <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n      <span class=\"k\">have</span> <span class=\"n\">exist_not_one</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">exists_ne</span> <span class=\"mi\">1</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">exist_not_one</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup.zpowers</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">Subgroup.zpowers</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.zpowers</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">h₀</span> <span class=\"bp\">|</span> <span class=\"n\">h₀</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h₀</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span>\n      <span class=\"bp\">·</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">push_neg</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₀</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nontrivial_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hg</span>\n      <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hg</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hg</span> <span class=\"n\">x</span> <span class=\"mi\">1</span>\n      <span class=\"n\">use</span> <span class=\"mi\">1</span>\n      <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">Exists.intro</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"n\">Nat.zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"n\">Nat.zero</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It's trickier than I thought.</p>",
        "id": 423851807,
        "sender_full_name": "Yicheng Tao",
        "timestamp": 1709136472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"646276\">Yicheng Tao</span> has marked this topic as resolved.</p>",
        "id": 423851848,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709136482
    },
    {
        "content": "<p>Formalising is trickier than everyone thinks! Well done for getting that one out!</p>",
        "id": 423870406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709142270
    }
]