[
    {
        "content": "<p>I am trying to understand the Lean syntax so I would like to define a <strong>formal</strong> derivative.<br>\nFrom what I see there's two ways to do this. Either an operator D which acts on functions R-&gt;R or an operator D which actions on some expression object f(x) with the second parameter being the independent variable x.</p>\n<p>Let's suppose I have D acting on a function <code>D(fun (x:Real)=&gt;f(x)+g(x))</code> I want to pattern match this and output is <code>D(fun (x:Real)=&gt;f(x)) + D(fun (x:Real)=&gt;g(x))</code> but I'm not really sure how to pattern match on functions.</p>\n<p>A second thing is <code>D( (x:Real)=&gt;c)</code> where c is not dependent on x, then this must become 0. But how can I tell that c does not depend on x? (It may depend on other variables like y and z).</p>\n<p>Any tips?</p>",
        "id": 446716009,
        "sender_full_name": "Mr Proof",
        "timestamp": 1719262353
    },
    {
        "content": "<p>Pattern matching on functions is impossible. They are not an inductive type but an entirely different construct instead</p>",
        "id": 446718753,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719263164
    },
    {
        "content": "<p>To do formal derivatives, you need to make a type of formal functions (expressions). This type would have a function to give an interpretation as actual Real -&gt; Real functions.</p>",
        "id": 446719900,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719263626
    },
    {
        "content": "<p>I see. Is there already a way to make formal expressions in Lean? Prop types already seem expression-like.</p>\n<p>In the HEPlean project they were defining the partial derivative as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"sd\">/-- partial derivative -/</span>\n<span class=\"kn\">noncomputable</span>\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">pderiv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">EuclideanSpace</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">EuclideanSpace</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">deriv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">h'</span><span class=\"w\"> </span><span class=\"bp\">•</span><span class=\"w\"> </span><span class=\"n\">basisFun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>I'm not sure if this is \"formal\" or not but seems to act on functions rather than formal expressions. I'm wondering how that is possible.</p>",
        "id": 446723405,
        "sender_full_name": "Mr Proof",
        "timestamp": 1719264599
    },
    {
        "content": "<p>The answer to your first question is inductive types, but <code>Type</code>-valued, not <code>Prop</code>-valued.</p>\n<p>For the second, it's not formal. The <code>deriv</code> function does not \"see\" the definition of the function passed to it.</p>",
        "id": 446724160,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719264767
    }
]