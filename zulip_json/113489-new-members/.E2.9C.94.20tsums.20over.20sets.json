[
    {
        "content": "<p>I'm trying to formalize a statement involving a sum over a set. Actually, the definition below is of a function returning a <code>Set \\N</code>. I can specify <code>\\sum' m : \\N</code> but I can't say <code>\\sum' m : Set \\N</code>? Is there a way to do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H2</span> <span class=\"o\">(</span><span class=\"n\">hxge</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxlt</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Real.log</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Inv</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">AddCommMonoid</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 437031932,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714838869
    },
    {
        "content": "<p>Answering myself. It seems that what I'm asking is possible. All the errors were about was the missing coercion to \\R.</p>",
        "id": 437032524,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714839477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"707242\">Ralf Stephan</span> has marked this topic as resolved.</p>",
        "id": 437032575,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714839494
    }
]