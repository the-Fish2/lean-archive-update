[
    {
        "content": "<p>Hello,</p>\n<p>I think that I understand <code>structure</code> quite well. I thought that <code>class</code> was just <code>structure</code> + the possibility of being inferred (and this could be achieved by adding <code>@[class]</code> to <code>structure</code>). But then I encounter this weird problem.</p>\n<p><code>structure</code> works fine.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">class</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Point</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">a.x</span> <span class=\"bp\">+</span> <span class=\"n\">b.x</span><span class=\"o\">,</span> <span class=\"n\">a.y</span> <span class=\"bp\">+</span> <span class=\"n\">b.y</span><span class=\"o\">,</span> <span class=\"n\">a.z</span> <span class=\"bp\">+</span> <span class=\"n\">b.z</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p><code>class</code> doesn't work fine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">Point</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">a.x</span> <span class=\"bp\">+</span> <span class=\"n\">b.x</span><span class=\"o\">,</span> <span class=\"n\">a.y</span> <span class=\"bp\">+</span> <span class=\"n\">b.y</span><span class=\"o\">,</span> <span class=\"n\">a.z</span> <span class=\"bp\">+</span> <span class=\"n\">b.z</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  a b : Point</span>\n<span class=\"cm\">  ⊢ { x := Point.x + Point.x, y := Point.y + Point.y, z := Point.z + Point.z } =</span>\n<span class=\"cm\">    { x := Point.x + Point.x, y := Point.y + Point.y, z := Point.z + Point.z }</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>gives the weird thing (in the comment).</p>\n<p>Thanks!</p>",
        "id": 409749517,
        "sender_full_name": "Tian Hsia",
        "timestamp": 1703365716
    },
    {
        "content": "<p>You're not supposed to have multiple terms of the same class lying around</p>",
        "id": 409749721,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703365937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Question.20about.20structures.20and.20classes/near/409749721\">said</a>:</p>\n<blockquote>\n<p>You're not supposed to have multiple terms of the same class lying around</p>\n</blockquote>\n<p>I am sorry I don't understand. The two pieces of code are executed separately on Lean 4 Web. I also tried renaming Point to Point1 but it still didn't work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">Point₁</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Point₁</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">a.x</span> <span class=\"bp\">+</span> <span class=\"n\">b.x</span><span class=\"o\">,</span> <span class=\"n\">a.y</span> <span class=\"bp\">+</span> <span class=\"n\">b.y</span><span class=\"o\">,</span> <span class=\"n\">a.z</span> <span class=\"bp\">+</span> <span class=\"n\">b.z</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  a b : Point₁</span>\n<span class=\"cm\">  ⊢ { x := Point₁.x + Point₁.x, y := Point₁.y + Point₁.y, z := Point₁.z + Point₁.z } =</span>\n<span class=\"cm\">    { x := Point₁.x + Point₁.x, y := Point₁.y + Point₁.y, z := Point₁.z + Point₁.z }</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 409749956,
        "sender_full_name": "Tian Hsia",
        "timestamp": 1703366189
    },
    {
        "content": "<p>The issue is that putting <code>class</code> on the definition makes <code>Point</code> be passed as an implicit argument to the fields (try <code>#check Point.x</code>), and simp will not simplify inside implicit arguments</p>",
        "id": 409750164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703366409
    },
    {
        "content": "<p>Wait, the heuristic is really \"only simplify in explicit arguments\"?</p>",
        "id": 409750289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703366558
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> . I see the implicit argument. But how is <code>x := Point.x + Point.x</code> even well-defined? Like two functions add up to a real number?</p>",
        "id": 409750436,
        "sender_full_name": "Tian Hsia",
        "timestamp": 1703366703
    },
    {
        "content": "<p>that's also because <code>Point.x</code> has an implicit argument</p>",
        "id": 409750451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703366725
    },
    {
        "content": "<p>it's not the function itself, it is being applied to <code>a</code> in one case and <code>b</code> in the second</p>",
        "id": 409750462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703366740
    },
    {
        "content": "<p>and this is why you shouldn't use typeclass arguments for something like a <code>Point</code> type</p>",
        "id": 409750476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703366760
    },
    {
        "content": "<p>because it's confusing and very much violates the \"there should only be one instance of the class in scope at any given time\" rule</p>",
        "id": 409750535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703366788
    },
    {
        "content": "<p>Oh I get it now. Thanks a lot!</p>",
        "id": 409750584,
        "sender_full_name": "Tian Hsia",
        "timestamp": 1703366847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"478462\">Tian Hsia</span> has marked this topic as resolved.</p>",
        "id": 409750587,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703366852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Question.20about.20structures.20and.20classes/near/409750289\">said</a>:</p>\n<blockquote>\n<p>Wait, the heuristic is really \"only simplify in explicit arguments\"?</p>\n</blockquote>\n<p>Unclear, I know that it doesn't simplify in typeclass arguments at least, but I think implicitness of the binder also plays a direct role</p>",
        "id": 409750654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703366904
    }
]