[
    {
        "content": "<p>This question came up during yesterday's Lean workshop in Berlin: it's easy to understand that <code>rfl</code> proves <code>2=2</code> --- but it confused the participants that <code>2+2=4</code> also holds by <code>rfl</code>, see MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2000</span> <span class=\"bp\">+</span> <span class=\"mi\">2000</span> <span class=\"bp\">=</span> <span class=\"mi\">4000</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span><span class=\"bp\">;</span>\n  <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">38</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Can you help me understand why? Some wild guesses are</p>\n<ul>\n<li>Does it matter that 2 and 4 are natural number literals? It seems not...</li>\n<li>So, this means the kernel would also check <code>1000+1000=2000</code> by <code>rfl</code>, just slower?</li>\n</ul>",
        "id": 438088721,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1715414039
    },
    {
        "content": "<p>In principle yes, <code>rfl</code> just unfolds the various definitions, of <code>2</code>, of <code>+</code> and so on, and at the end it gets to two things that equal by definition. (In Lean4 it is possible that it uses some clever algorithm to compute the sum, I am not completely sure.)</p>",
        "id": 438089209,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1715414529
    },
    {
        "content": "<p>When the kernel checks that two terms are defeq, it will do a bunch of unfolding. In particular, it will unfold the definition of <code>+</code> a bunch of times, and eventually see that the LHS is <code>4</code> by definition.</p>",
        "id": 438089225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715414559
    },
    {
        "content": "<p>As Riccardo says, for Nat's there is more magic. But the \"unfold until LHS = RHS\" is the basic algorithm / mental model that helps understanding why <code>rfl</code> works on goals that aren't syntactic equalities.</p>",
        "id": 438089267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715414618
    },
    {
        "content": "<p>Thanks for the elaboration (no pun intended)!</p>",
        "id": 438089887,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1715415259
    },
    {
        "content": "<p>Two more examples, for my future self: to some extend, having specific numbers <code>2</code> and <code>4</code> is useful, so Lean can unfold the definition far enough to obtain an actual defeq.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Addition is defined this way.</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- This is a theorem to show: as n is not a concrete number, Lean cannot show this.</span>\n<span class=\"c1\">-- example (n : Nat) : 0 + n = n := rfl -- fails</span>\n</code></pre></div>",
        "id": 438089954,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1715415359
    },
    {
        "content": "<p>This is because addition is defined by recursion on the second variable</p>",
        "id": 438090069,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1715415479
    }
]