[
    {
        "content": "<p>There is an absence of theorems containing \"sub\" in the <code>PNat</code> domain. Does this mean the following cannot be proven, even given the condition?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">PNat.sub_le_self</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Also if I add the following line, I get an ''ambigous\" error. If possible, how to resolve these?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"n\">ambiguous</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">interpretations</span>\n  <span class=\"n\">_root_.add_le_add</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n  <span class=\"n\">Nat.add_le_add</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">b</span>\n</code></pre></div>",
        "id": 435208426,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713970395
    },
    {
        "content": "<p>You can write <code>_root...</code> or <code>Nat....</code> as suggested by the error</p>",
        "id": 435211349,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713971026
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">PNat.sub_le_self</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">coe_le_coe</span><span class=\"o\">,</span> <span class=\"n\">PNat.sub_coe</span><span class=\"o\">]</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">NeZero.one_le</span>\n</code></pre></div>",
        "id": 435213675,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713971457
    },
    {
        "content": "<p>Completely missed <code>sub_coe</code>. But your code fails here with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"n\">NeZero</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.7842</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 435215200,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713971741
    },
    {
        "content": "<p><code>apply?</code> found that. <code>exact a.2</code> also works</p>",
        "id": 435218472,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713972539
    },
    {
        "content": "<p>Remarkable, thanks. So <code>sub_coe</code> does not specify which type/domain to coerce to, but leaves it open until later operations require a, e.g., <code>Sub</code>?</p>",
        "id": 435231180,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713976348
    },
    {
        "content": "<p>What makes you say that? Those two lemmas are specifically about the coercion from PNat to Nat, as far as I can tell</p>",
        "id": 435241851,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713980485
    },
    {
        "content": "<p>I tried several theorems from other domains but often got \"can't construct something N+\"(for reasons I can follow with time), and, since you use theorems from <code>Order.Sub</code> and <code>Order.Monoid</code> I somehow expected them not to work, either. But I only now notice that <code>Sub</code> and <code>LinearOrderedCancelCommMonoid</code>are part of <code>instance</code> statements in <code>PNat.Basic</code>.</p>\n<p>So, working with <code>PNat</code>, I should have first groked what is still possible by looking at what structures apply. But that gung-ho attitude is because of me more being a developer than a mathematician. Also why I suffer from these error messages, and would welcome any small improvement there.</p>",
        "id": 435246965,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713982346
    },
    {
        "content": "<p>But then, I'm only three weeks into it..</p>",
        "id": 435247727,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713982605
    },
    {
        "content": "<p>For what it's worth, I was surprised not to find anything nicer. I'm not sure if that's because PNat is just poorly behaved, so not many general results can apply to it, or there's just gaps in the development because people don't use PNat much. Maybe <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> knows</p>",
        "id": 435258424,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713986804
    },
    {
        "content": "<p>I think <code>PNat</code> simply didn't get(/doesn't deserve?) much love</p>",
        "id": 435259923,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713987452
    },
    {
        "content": "<p>Certainly I've come up with plenty of niche formalisms that cover only a few concrete types but cover them nicely, yet I have never been able to fit <code>PNat</code> in one of them (except for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SuccOrder#doc\">docs#SuccOrder</a>)</p>",
        "id": 435260111,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713987521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/PNat.20and.20sub/near/435259923\">said</a>:</p>\n<blockquote>\n<p>I think <code>PNat</code> simply didn't get(/doesn't deserve?) much love</p>\n</blockquote>\n<p>Ooooh surely everyone deserves love...</p>",
        "id": 435260146,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713987535
    }
]