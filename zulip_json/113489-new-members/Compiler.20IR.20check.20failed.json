[
    {
        "content": "<p>Hello, I don't understand why <code>Polynomial.C</code> is unknown declaration.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.RingQuot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.IsPrimary</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.LocalRing</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span> <span class=\"n\">Ideal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 435953320,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714365348
    },
    {
        "content": "<p>(Also, does this exist already? And is there a better way to writing it? It seems <code>Quot</code> and <code>Quotient</code> is a bit awkward to work with)</p>",
        "id": 435953378,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714365374
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"n\">Ideal.Quotient.mk</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Quot.lift</span> <span class=\"n\">Polynomial.constantCoeff</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">f</span>\n    <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">Submodule.quotientRel_r_def</span><span class=\"o\">,</span> <span class=\"n\">mem_span_singleton</span><span class=\"o\">,</span> <span class=\"n\">X_dvd_iff</span><span class=\"o\">,</span> <span class=\"n\">coeff_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">change</span> <span class=\"n\">constantCoeff</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Quotient.ind</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">f</span>\n    <span class=\"n\">intro</span> <span class=\"n\">f</span>\n    <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">Y</span><span class=\"o\">})</span> <span class=\"n\">f</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Ideal.Quotient.eq</span><span class=\"o\">,</span> <span class=\"n\">mem_span_singleton</span><span class=\"o\">,</span> <span class=\"n\">X_dvd_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>I finished the proof, plus I still don't understand the issue above. It seems to be related to the fact that I have to add <code>noncomputable</code> now</p>",
        "id": 435957549,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714368381
    },
    {
        "content": "<p>(In particular it would be nice for <code>induction</code> to work for <code>Quot</code> types using <code>Quotient.ind</code> - I think mathematically/type-theoretically it's incorrect, but still, it's literally called <code>.ind</code>)</p>",
        "id": 435957726,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714368488
    },
    {
        "content": "<p>The first one is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.quotientSpanXSubCAlgEquiv#doc\">docs#Polynomial.quotientSpanXSubCAlgEquiv</a></p>",
        "id": 435960110,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714369899
    },
    {
        "content": "<p>Or at least very close</p>",
        "id": 435960430,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714370061
    },
    {
        "content": "<p>It seems that <code>AlgEquiv</code> extends <code>A ≃ B, A ≃* B, A ≃+ B, A ≃+* B</code> so I should be able to extract the RingEquiv at the end. But</p>",
        "id": 435960761,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714370243
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.quotientSpanXSubCAlgEquiv</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">C_0</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  ▶ 45:9-45:28: error:</span>\n<span class=\"cm\">  synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized</span>\n<span class=\"cm\">    NonUnitalNonAssocRing.toMul</span>\n<span class=\"cm\">  inferred</span>\n<span class=\"cm\">    Equiv.mul this.toEquiv</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this.ringEquiv.symm</span>\n</code></pre></div>\n<p>Have I found a type diamond? Or is this a different issue?</p>",
        "id": 435960786,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714370261
    },
    {
        "content": "<p>What does <code>convert</code> say?</p>",
        "id": 435960930,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714370333
    },
    {
        "content": "<p>Actually I don't understand why it extends the earlier 3 classes either</p>",
        "id": 435960952,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714370343
    },
    {
        "content": "<p><code>convert</code> gives two goals, but also throws the same error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">NonUnitalNonAssocRing.toMul</span> <span class=\"bp\">=</span> <span class=\"n\">Equiv.mul</span> <span class=\"n\">this.toEquiv</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Distrib.toAdd</span> <span class=\"bp\">=</span> <span class=\"n\">Equiv.add</span> <span class=\"n\">this.toEquiv</span>\n</code></pre></div>",
        "id": 435961008,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714370376
    },
    {
        "content": "<p>Ah sorry, the error is at <code>rw</code></p>",
        "id": 435961010,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714370378
    },
    {
        "content": "<p>Right?</p>",
        "id": 435961024,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714370385
    },
    {
        "content": "<p>Nono</p>",
        "id": 435961027,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714370387
    },
    {
        "content": "<p>The <code>exact</code></p>",
        "id": 435961036,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714370392
    },
    {
        "content": "<p>My bad</p>",
        "id": 435961040,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714370394
    },
    {
        "content": "<p>Found something interesting.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this.ringEquiv</span> <span class=\"c\">/-</span><span class=\"cm\"> this is \"ok\", but gives</span>\n<span class=\"cm\">this : let add := Equiv.add this✝.toEquiv;</span>\n<span class=\"cm\">let mul := Equiv.mul this✝.toEquiv;</span>\n<span class=\"cm\">R[X] ⧸ span {Y - C 0} ≃+* R</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this.ringEquiv.symm</span> <span class=\"c\">/-</span><span class=\"cm\"> this fails with the same synthesizer error</span>\n</code></pre></div>",
        "id": 435961187,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714370442
    },
    {
        "content": "<p>Well, the problem is probably that <code>rw</code> is modifying the objects you are working on, but not all the instances, and this confuses Lean</p>",
        "id": 435961335,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714370502
    },
    {
        "content": "<p>I don't think it is a diamond.</p>",
        "id": 435961357,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714370516
    },
    {
        "content": "<p>No, the <code>rw</code> is irrelevant, see this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">asdf</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.quotientSpanXSubCAlgEquiv</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"mi\">37</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this.ringEquiv</span> <span class=\"c\">/-</span><span class=\"cm\"> works -/</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this.ringEquiv.symm</span> <span class=\"c\">/-</span><span class=\"cm\"> fails -/</span>\n</code></pre></div>",
        "id": 435961427,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714370536
    },
    {
        "content": "<p>I've got to go, but thanks for the help. I can dig around a bit more later but I don't know how far I can get <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span></p>",
        "id": 435961542,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714370601
    },
    {
        "content": "<p>Can you write a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? Anyway I need a computer to debug this (I will have access to one later today)</p>",
        "id": 435961554,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714370608
    },
    {
        "content": "<p>MWE is just this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.RingQuot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.IsPrimary</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.LocalRing</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span> <span class=\"n\">Ideal</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">asdf</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.quotientSpanXSubCAlgEquiv</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"mi\">37</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this.ringEquiv</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this.ringEquiv.symm</span>\n</code></pre></div>",
        "id": 435961770,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714370722
    },
    {
        "content": "<p>There are 2 <code>.ringEquiv</code></p>",
        "id": 435962545,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714371136
    },
    {
        "content": "<p>The <code>this</code> in the third <code>have</code> refers to the second <code>have</code>, not the first</p>",
        "id": 435962773,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714371271
    },
    {
        "content": "<p>My bad, but it's still not fixed :(</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">asdf</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">yael</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.quotientSpanXSubCAlgEquiv</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"mi\">37</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">yael.ringEquiv</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">yael.ringEquiv.symm</span>\n</code></pre></div>",
        "id": 435962844,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714371314
    },
    {
        "content": "<p>(I think {line 1}.ringEquiv = {line 2}.ringEquiv = {line 2} anyways)</p>",
        "id": 435962934,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714371360
    },
    {
        "content": "<p>You are using <code>have</code> instead of <code>let</code> maybe?</p>",
        "id": 435963974,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714371814
    },
    {
        "content": "<p>Yes, this is the problem.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.RingQuot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.IsPrimary</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.LocalRing</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span> <span class=\"n\">Ideal</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">asdf</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.quotientSpanXSubCAlgEquiv</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">C_0</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">f</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f.toRingEquiv.symm</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 435964375,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714371998
    },
    {
        "content": "<p>It's not really idiomatic since we try to avoid using tactic mode to write definitons, but still.</p>",
        "id": 435964410,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714372019
    },
    {
        "content": "<p>Ah but <code>.ringEquiv</code> still fails</p>",
        "id": 435964519,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714372080
    },
    {
        "content": "<p>It's called <code>toRingEquiv</code></p>",
        "id": 435964625,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714372114
    },
    {
        "content": "<p>Ah <code>.ringEquiv</code> just tries to access one of the underlying inherited typeclasses(?)' <code>ringEquiv</code>, which is just wrong. Okay, makes sense. Thanks!!</p>",
        "id": 435964736,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714372176
    },
    {
        "content": "<p>Learned a lot :D</p>",
        "id": 435964749,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714372182
    },
    {
        "content": "<p>I encountered a <a href=\"#narrow/stream/270676-lean4/topic/Type.20mismatch.20.60Iff.2Erfl.60.20in.20instance.20defintion/near/435705015\">similar problem recently</a>. I think it should be considered a bug for Lean to be able to say \"unknown declaration\" immediately after a <code>#check</code> statement that confirms the declaration is present in the context.</p>",
        "id": 436115400,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714416265
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1785\">lean4#1785</a> deals with this issue. I encourage people to upvote it if they agree it should be fixed.</p>",
        "id": 436116127,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714416529
    },
    {
        "content": "<blockquote>\n<p>IR check failed in presence of noncomputable</p>\n</blockquote>\n<p>Yep I think that's one of the problem originally, upvoted :)</p>",
        "id": 436195027,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714454382
    }
]