[
    {
        "content": "<p>I'm having some trouble understanding why <code>simp</code> is not finishing a goal even though explicitly rewriting and then using <code>simp</code> does. I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_1</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">AdjoinSqrt</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">x.a₁</span> <span class=\"bp\">+</span> <span class=\"n\">y.a₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_1</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">AdjoinSqrt</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Writing <code>rw [add_1, zero_1]; simp</code> solves my goal, but <code>simp [add_1, zero_1]</code> does not. Looking at the trace (with <code>set_option trace.Debug.Meta.Tactic.simp</code>) shows \"no theorems found for pre-rewriting (0 + a).a₁\", but it seems to me like <code>add_1</code> should apply here (and <code>rw</code> seems to agree).</p>\n<p>I'm not sure what I'm missing, any suggestions?</p>",
        "id": 435762226,
        "sender_full_name": "Michael George",
        "timestamp": 1714228496
    },
    {
        "content": "<p>Curiously, it seems to work if my proof is not in the context of the <code>instance</code> I'm trying to provide. Here's an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Numbers of the form a₁ + aₙ√n</span>\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span> <span class=\"kd\">structure</span> <span class=\"n\">AdjoinSqrt</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a₁</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n  <span class=\"n\">aₙ</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">AdjoinSqrt</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">zero_1</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">AdjoinSqrt</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">zero_n</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">AdjoinSqrt</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">aₙ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">AdjoinSqrt</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">x.a₁</span> <span class=\"bp\">+</span> <span class=\"n\">y.a₁</span><span class=\"o\">,</span> <span class=\"n\">x.aₙ</span> <span class=\"bp\">+</span> <span class=\"n\">y.aₙ</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">add_1</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">AdjoinSqrt</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">x.a₁</span> <span class=\"bp\">+</span> <span class=\"n\">y.a₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">add_n</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">AdjoinSqrt</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">aₙ</span> <span class=\"bp\">=</span> <span class=\"n\">x.aₙ</span> <span class=\"bp\">+</span> <span class=\"n\">y.aₙ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">AddSemigroup</span> <span class=\"n\">R</span><span class=\"o\">]:</span> <span class=\"n\">AddSemigroup</span> <span class=\"o\">(</span><span class=\"n\">AdjoinSqrt</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">add_assoc</span>\n\n<span class=\"c1\">-- set_option trace.Debug.Meta.Tactic.simp true</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sqrt_zero_add</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">AdjoinSqrt</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">R</span><span class=\"o\">]:</span> <span class=\"n\">AddMonoid</span> <span class=\"o\">(</span><span class=\"n\">AdjoinSqrt</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- works: zero_add := sqrt_zero_add</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">ext</span>\n    <span class=\"c1\">-- fails: simp</span>\n    <span class=\"c1\">-- fails: simp [add_1, zero_1]</span>\n    <span class=\"c1\">-- succeeds:</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_1</span><span class=\"o\">,</span> <span class=\"n\">zero_1</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_n</span><span class=\"o\">,</span> <span class=\"n\">zero_n</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Note that <code>simp</code> works fine in the proof of <code>sqrt_zero_add</code>, which I think is exactly the same as <code>zero_add</code>.</p>",
        "id": 435763933,
        "sender_full_name": "Michael George",
        "timestamp": 1714229841
    },
    {
        "content": "<p>Even more curiously, the <code>simp</code> works if I don't import one of my other files, the following class seems to be the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">SignedRing</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">Signed</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">sign_zero</span> <span class=\"o\">:</span> <span class=\"n\">sign</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">sign_one</span>  <span class=\"o\">:</span> <span class=\"n\">sign</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">sign_mul</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">sign</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sign</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">sign</span> <span class=\"n\">b</span>\n  <span class=\"n\">zero_sign</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">sign</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">sign_neg</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">sign</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">sign</span> <span class=\"n\">a</span>\n  <span class=\"n\">sign_plus</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">sign</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"bp\">→</span> <span class=\"n\">sign</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"bp\">→</span> <span class=\"n\">sign</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"bp\">.</span><span class=\"n\">neg</span>\n</code></pre></div>\n<p>I'm continuing to investigate.</p>",
        "id": 435766098,
        "sender_full_name": "Michael George",
        "timestamp": 1714231475
    },
    {
        "content": "<p>This seems quite bizarre to me; here is a complete MWE with imports.  Commenting out <code>Foo</code> allows the proof of <code>zero_add</code> to succeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Basic</span>\n\n<span class=\"c1\">-- commenting this out lets the proof go through, but currently it fails with `simp made no progress`:</span>\n<span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Ring</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n\n<span class=\"c1\">-- Numbers of the form a₁ + aₙ√n</span>\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span> <span class=\"kd\">structure</span> <span class=\"n\">AdjoinSqrt</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a₁</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n  <span class=\"n\">aₙ</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"kd\">]</span> <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">AdjoinSqrt</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"kd\">]</span> <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">AdjoinSqrt</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">x.a₁</span> <span class=\"bp\">+</span> <span class=\"n\">y.a₁</span><span class=\"o\">,</span> <span class=\"n\">x.aₙ</span> <span class=\"bp\">+</span> <span class=\"n\">y.aₙ</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">AddSemigroup</span> <span class=\"n\">R</span><span class=\"o\">]:</span> <span class=\"n\">AddSemigroup</span> <span class=\"o\">(</span><span class=\"n\">AdjoinSqrt</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">add_assoc</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">R</span><span class=\"o\">]:</span> <span class=\"n\">AddMonoid</span> <span class=\"o\">(</span><span class=\"n\">AdjoinSqrt</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- fails with \"simp made no progress\" unless `Foo` is commented out:</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 435774159,
        "sender_full_name": "Michael George",
        "timestamp": 1714237988
    },
    {
        "content": "<p>This works regardless of the presence of <code>Foo</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">R</span><span class=\"o\">]:</span> <span class=\"n\">AddMonoid</span> <span class=\"o\">(</span><span class=\"n\">AdjoinSqrt</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"n\">nsmulRec</span>\n</code></pre></div>\n<p>(Your version produces errors because fileds are missing.)</p>",
        "id": 435778947,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714241196
    },
    {
        "content": "<p>Yes, it looks like the errors you're seeing are caused by things like tactics failing to solve goals which you've not explicitly solved and hence are being auto-solved by algorithms which can't solve them.</p>",
        "id": 435785965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714248228
    },
    {
        "content": "<p>Copying in your version still gave me the same problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./././</span><span class=\"n\">Greeting</span><span class=\"bp\">/</span><span class=\"n\">Roots.lean</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"o\">:</span><span class=\"mi\">35</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">simp</span> <span class=\"n\">made</span> <span class=\"n\">no</span> <span class=\"n\">progress</span>\n<span class=\"bp\">./././</span><span class=\"n\">Greeting</span><span class=\"bp\">/</span><span class=\"n\">Roots.lean</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"o\">:</span><span class=\"mi\">35</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">simp</span> <span class=\"n\">made</span> <span class=\"n\">no</span> <span class=\"n\">progress</span>\n<span class=\"bp\">./././</span><span class=\"n\">Greeting</span><span class=\"bp\">/</span><span class=\"n\">Roots.lean</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n</code></pre></div>\n<p>(as before, commenting out <code>Foo</code> let it build).</p>",
        "id": 435793806,
        "sender_full_name": "Michael George",
        "timestamp": 1714256475
    },
    {
        "content": "<p>Are you not using an IDE? The issue is that your code has errors and you're unable to see what's causing them. Just to be clear, you've used your code and then replaced the instance with Michael's code? That also worked fine for me. Are you on some old version of mathlib or something?</p>",
        "id": 435794167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714256924
    },
    {
        "content": "<p>I'm using nvim (but I built with lake to check that my editor wasn't in some inconsistent state). You're correct - I got those errors by replacing my instance with Michael's. I don't think there's anything strange about my version of mathlib - I haven't updated it in a few weeks probably. How can I check that I have a reasonable one?</p>",
        "id": 435794365,
        "sender_full_name": "Michael George",
        "timestamp": 1714257165
    },
    {
        "content": "<p>That must have been it - I ran <code>lake update</code> and everything went through</p>",
        "id": 435795099,
        "sender_full_name": "Michael George",
        "timestamp": 1714258066
    },
    {
        "content": "<p>Thanks for your help</p>",
        "id": 435795100,
        "sender_full_name": "Michael George",
        "timestamp": 1714258072
    },
    {
        "content": "<p>Yeah mathlib moves fast :-)</p>",
        "id": 435795505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714258512
    }
]