[
    {
        "content": "<p>Hi everyone,</p>\n<p>I am running into some weird casting behavior when handling numbers in ZMod q. This is the MWE that showcases the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">q</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">two_pow_p_eq_one</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Nat.cast_pow</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"mi\">2</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"o\">((</span><span class=\"n\">ZMod.eq_iff_modEq_nat</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">two_pow_p_eq_one'</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.mp</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">)</span> <span class=\"n\">two_pow_p_eq_one</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">orderOf_eq_prime</span> <span class=\"n\">two_pow_p_eq_one'</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"c1\">-- this one works</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">orderOf_eq_prime</span> <span class=\"n\">two_pow_p_eq_one</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"c1\">-- this one doesn't</span>\n</code></pre></div>\n<p>I am also not quite sure when the casting arrow ↑ appears and when it does not, because there are elements 1 and 2 in ZMod q in the infoview that should be casted from Nat but appear without the arrow.</p>",
        "id": 426355591,
        "sender_full_name": "Christoph Spiegel",
        "timestamp": 1710340959
    },
    {
        "content": "<p>A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> should have the necessary import statements</p>",
        "id": 426355719,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710340997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Casting.20from.20N.20to.20ZMod.20q/near/426355719\">said</a>:</p>\n<blockquote>\n<p>A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> should have the necessary import statements</p>\n</blockquote>\n<p>Sorry, <code>import Mathlib.Data.ZMod.Basic</code> seems to be the only thing necessary .</p>",
        "id": 426362921,
        "sender_full_name": "Christoph Spiegel",
        "timestamp": 1710342776
    },
    {
        "content": "<p>Note that <code>12345 : ZMod q</code> makes sense for any <code>q</code> (<em>without</em> a cast from <code>ℕ</code>) due to the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OfNat#doc\">docs#OfNat</a> instance. So that's probably why there's no <code>↑</code>.</p>\n<p>If you actually want it to be casted from <code>ℕ</code>, you can write something like <code>((2 : ℕ) : ZMod q)</code>.</p>",
        "id": 426366208,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710343579
    },
    {
        "content": "<p>That being said, I think you probably <em>don't</em> want the <code>Nat.cast</code> to appear in the statements here.</p>",
        "id": 426366338,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710343614
    },
    {
        "content": "<p>So checking out the two versions of <code>two_pow_p_eq_one</code> in the infoview I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">two_pow_p_eq_one</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span>\n<span class=\"n\">two_pow_p_eq_one'</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>The entities with casting arrows are <code>@Nat.cast (ZMod q) </code> and the other ones are <code>@OfNat.ofNat (ZMod q) 2 </code>. </p>\n<p>What exactly do you mean by not wanting to use <code>Nat.cast</code>? The following would suggest that these three casting approaches should be interchangeable (and I would expect that preferably only the first is needed):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">5</span><span class=\"o\">)</span>  <span class=\"c1\">-- ZMod 5 := 2</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Nat.cast</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"mi\">2</span>  <span class=\"c1\">-- ZMod 5 := ↑2</span>\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"n\">_</span>  <span class=\"c1\">-- ZMod 5 := OfNat.ofNat 2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>But <code>orderOf_eq_prime</code> is not able to accept the output of <code>eq_iff_modEq_nat</code> without first using the <code>congrArg</code> trick (which I don't even exactly recall how I came up with).</p>",
        "id": 426371160,
        "sender_full_name": "Christoph Spiegel",
        "timestamp": 1710344914
    },
    {
        "content": "<p>Yes, they're provably equal (even definitionally equal), but in statements you'll want to prefer <code>(2 : ZMod 5)</code> in general, even if in the proof you need to convert it to a <code>Nat.cast</code>.</p>",
        "id": 426372371,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710345256
    },
    {
        "content": "<p>Also, note that <code>a</code> and <code>c</code> are <em>really</em> the same thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>The same doesn't work for <code>b</code>.</p>",
        "id": 426372988,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710345420
    },
    {
        "content": "<p>The theorem <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.cast_eq_ofNat#doc\">docs#Nat.cast_eq_ofNat</a> should help you convert between the two with <code>rw</code>.</p>",
        "id": 426373553,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710345584
    },
    {
        "content": "<p><code>Nat.cast_eq_ofNat</code> does take care of the conversion, but if I <code>#print</code> the proof terms, it's just the same <code>congrArg</code>proof in the background using <code>Nat.cast_one</code> (probably how I found that explicit coercion in the first place).</p>\n<p>I guess the following two things don't make sense to me:</p>\n<ol>\n<li>Why does <code>eq_iff_modEq_nat</code> return the 'undesirable' <code>@Nat.cast</code>, in particular since the Prop statement is <code>(a : ZMod n) = b ↔ a ≡ b [MOD n]</code>, indicating that it should return <code>@OfNat.ofNat</code>?</li>\n<li>If they are definitionally equal, why isn't <code>orderOf_eq_prime</code> able to coerce the input into the right form, in particular since even the following more modest variant of <code>two_pow_p_eq_one</code> that only replaces <code>↑1</code> with <code>1</code> works: <code> have := orderOf_eq_prime (@Nat.cast_one (ZMod q) _ ▸ two_pow_p_eq_one) (sorry)</code>.</li>\n</ol>",
        "id": 426381827,
        "sender_full_name": "Christoph Spiegel",
        "timestamp": 1710347836
    },
    {
        "content": "<p>There's two different things going on here, and I agree that it's somewhat confusing.</p>\n<p><code>Nat.cast</code> is just the general function that takes any element of Nat to some semiring (or weaker). This works for any natural number, no matter how you write it.</p>\n<p><code>OfNat</code> is for the specific case when you write an _explicit_ natural number, such as 23 or 37 or 12386902 or 1. This mechanism allows classes to define specifically what stuff that is parsed as a natural number can be parsed \"natively\" by the class. You can imagine, for example, a class like <code>TheNumbersFromThreeToFive</code> could only want to implement <code>OfNat</code> for 3, 4, 5, and not have a general <code>Nat.cast</code> instance.</p>\n<p>However, where it gets tricky is that for (iirc) everything (if not, then most things) that have a <code>Nat.cast</code> defined, we also define <code>OfNat R t</code> to just be equal to <code>Nat.cast t</code>. Therefore, these two are equal definitionally; we like this in general! There could be some argument that this is not always the best option (for example, you can write <code>7 : Fin 5</code>); however, what this means is that with numerals you can get these two things, that are <code>@OfNat (ZMod q) k</code>, and <code>@Nat.cast (ZMod q) (@OfNat Nat k)</code>.</p>",
        "id": 426384652,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1710348653
    },
    {
        "content": "<p>That makes some sense, thanks for the explanation!</p>\n<p>I re-read the error message from <code>orderOf_eq_prime</code> and realized that it never complained about the<code>2</code>, the issue is that it wants the identity element <code>1</code> in the Monoid, not the casted <code>↑1</code>. So I would say that replacing the <code>↑1</code> through <code>Nat.cast_one</code> is the 'correct' way of handling this, rather than just blanket rewriting everything with<code>Nat.cast_eq_ofNat</code>.</p>\n<p>What I still don't quite understand is why Lean seemingly can coerce <code>2 ^ p = 1</code> into <code>↑2 ^ p = 1</code> (that's what happens when too aggressively rewriting not just the <code>1</code> but also the <code>2</code>with <code>Nat.cast_eq_ofNat</code> or just through <code>simp</code>), but it cannot coerce  <code>↑2 ^ p =↑ 1</code> into <code>↑2 ^ p = 1</code>?</p>",
        "id": 426424416,
        "sender_full_name": "Christoph Spiegel",
        "timestamp": 1710363072
    },
    {
        "content": "<p><code>Nat.cast_eq_ofNat</code> requires a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.AtLeastTwo#doc\">docs#Nat.AtLeastTwo</a> instance. I <em>think</em> that's the reason for the behavior you're seeing, but maybe I'm misunderstanding.</p>",
        "id": 426425743,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710363596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Casting.20from.20N.20to.20ZMod.20q/near/426372988\">said</a>:</p>\n<blockquote>\n<p>Also, note that <code>a</code> and <code>c</code> are <em>really</em> the same thing:</p>\n</blockquote>\n<p>But they are not <em>really really</em> the same; <code>c</code> contains a second application of ofNat because it did not use <code>nat_lit 2</code></p>",
        "id": 426432160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710366501
    },
    {
        "content": "<p>Indeed, I had considered saying that, but thought better of it to avoid confusion.</p>",
        "id": 426432859,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710366826
    }
]