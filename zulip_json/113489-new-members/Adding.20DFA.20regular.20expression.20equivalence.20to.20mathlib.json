[
    {
        "content": "<p>Hello y'all, I'm Russell, an undergrad at CMU. I have a working proof of the equivalence of regular expressions to DFAs. I'd like to add my proof to the lean 3 mathlib. How should I start a PR? I'd also like some opinions on how to formulate the key theorems and organize parts of the proofs, more details if anyone asks. Thanks to everyone here for running such an awesome project!</p>",
        "id": 280816989,
        "sender_full_name": "Russell Emerine",
        "timestamp": 1651443343
    },
    {
        "content": "<p>Hey! <span class=\"user-mention\" data-user-id=\"267202\">@Fox Thomson</span> and I had work towards it, so please show us so we can compare.</p>",
        "id": 280817668,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651444391
    },
    {
        "content": "<p>Once the <span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> have given you write access, you will be able to open a PR <strong>from the mathlib repo</strong> (not a fork).</p>",
        "id": 280817675,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651444433
    },
    {
        "content": "<p>(we can't give write access without a github username!)</p>",
        "id": 280817807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651444580
    },
    {
        "content": "<p>Welcome! In case you haven't already seen it, we've got a page with some tips for new contributors: <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a></p>",
        "id": 280818438,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1651445533
    },
    {
        "content": "<p>Sorry, my github is just RussellEmerine</p>",
        "id": 280819162,
        "sender_full_name": "Russell Emerine",
        "timestamp": 1651446592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"497626\">Russell Emerine</span> <a href=\"#narrow/stream/113489-new-members/topic/Adding.20DFA.20regular.20expression.20equivalence.20to.20mathlib/near/280819162\">said</a>:</p>\n<blockquote>\n<p>Sorry, my github is just RussellEmerine</p>\n</blockquote>\n<p>Invite sent! <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 280820568,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1651449009
    },
    {
        "content": "<p>i promise i'm working on this lol, there'll be new stuff in a new branch soon</p>",
        "id": 281222130,
        "sender_full_name": "Russell Emerine",
        "timestamp": 1651699827
    },
    {
        "content": "<p>Ok, now what I had already is on the branch <code>RussellEmerine/DFA_equivalent_regular_expression</code>.  I'll be making some of the more obvious changes soon, please let me know if there's anything in particular that needs to be fixed or reorganized.</p>",
        "id": 281244646,
        "sender_full_name": "Russell Emerine",
        "timestamp": 1651717110
    },
    {
        "content": "<p>Hi there, after seeing the TODO in the Regular Expression documentation, I've been playing around with this recently, as well – in Lean4, though. Is this still being worked on? There doesn't seem to be a mathlib4 branch for it and the mathlib branch has been dormant for about two years now. In my own implementation, I only got as far as proving ripping to preserve the language and I started out with an unnecessarily complicated language definition, so I'd be starting mostly from scratch anyway. I'd be happy to work on whatever implementation's already there or make my own if the porting effort would not be worth it.</p>",
        "id": 435231037,
        "sender_full_name": "Tom Kranz",
        "timestamp": 1713976306
    },
    {
        "content": "<p>There's also this (which solves the mystery of what were supposed to be the “Regex-like operations”!), but mathlib4 doesn't seem to have received the branches mentioned.<br>\n<a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Regular.20expression.20reversal/near/283293183\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Regular.20expression.20reversal/near/283293183</a></p>",
        "id": 435233577,
        "sender_full_name": "Tom Kranz",
        "timestamp": 1713977204
    },
    {
        "content": "<p>No, nobody is working on it. Go wild <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 435246760,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713982275
    },
    {
        "content": "<p>I did a little bit of work outside of mathlib on automatons and regular expressions <a href=\"https://github.com/pthomas505/FOL/blob/b4d1ff4bcb140932b57747404b7d309e879e6451/FOL/Compute.lean\">here</a>, but got stuck on trying to define the language associated with closure (the sorry on line 204). I took the definitions I found in mathlib as inspiration, but I didn't make any plans to push it to mathlib. I recently started going through a textbook on LR parsing, and am playing a bit with formalizing that as I go, which is what is at the bottom of that file.</p>",
        "id": 435309977,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1714019163
    },
    {
        "content": "<p>Are you sure you don't want to build on top of Mathlib definitions?</p>",
        "id": 435338869,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714033871
    },
    {
        "content": "<p>Hello, I've also been working a bit on this recently. I've mainly been working on the translation from a regex to an NFA by building on and translating what was done on <a href=\"https://github.com/leanprover-community/mathlib/tree/regex_nfa\">branch#regex_nfa</a>. So, except for the concatenation and Kleene star operators (I'm halfway done with the proof for concatenation),  I've added the proofs for the correctness of the other \"Regex-like operations\" (that is, regex operations for NFAs) . I'm wondering if it might be worth to add the definitions for these operations into Mathlib so long?</p>",
        "id": 435558204,
        "sender_full_name": "Keegan Perry",
        "timestamp": 1714126991
    },
    {
        "content": "<p>Related to this, we are formalizing (part of) an undergraduate lecture at TU Dresden that covers grammars and automata. This is work in progress and mostly advances through student projects. So far, we decided to redefine DFAs (not using the mathlib definition). We established a correspondence between regular grammars and automata.<br>\n<a href=\"https://github.com/knowsys/Formale-Systeme-in-LEAN/tree/main/FormalSystems/Chomsky/Regular\">https://github.com/knowsys/Formale-Systeme-in-LEAN/tree/main/FormalSystems/Chomsky/Regular</a><br>\nWe did not formalize regular expressions though.</p>",
        "id": 435563907,
        "sender_full_name": "Lukas Gerlach",
        "timestamp": 1714129323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"645809\">@Lukas Gerlach</span> Cool! Do you use the project in your teaching?</p>",
        "id": 435613851,
        "sender_full_name": "Tom Kranz",
        "timestamp": 1714147007
    },
    {
        "content": "<p>We have student projects about the formalization but we do not use this in the lecture so far.<br>\nWe plan on doing so once a more substantial amount of content from the lecture has been formalized.<br>\nAlso, we dream of maybe having a game similar to the ones <a href=\"https://adam.math.hhu.de/\">here</a> but this is still a very long way :D</p>",
        "id": 435616238,
        "sender_full_name": "Lukas Gerlach",
        "timestamp": 1714147694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"645809\">Lukas Gerlach</span> <a href=\"#narrow/stream/113489-new-members/topic/Adding.20DFA.20regular.20expression.20equivalence.20to.20mathlib/near/435563907\">said</a>:</p>\n<blockquote>\n<p>Related to this, we are formalizing (part of) an undergraduate lecture at TU Dresden that covers grammars and automata. This is work in progress and mostly advances through student projects. So far, we decided to redefine DFAs (not using the mathlib definition). We established a correspondence between regular grammars and automata.<br>\n<a href=\"https://github.com/knowsys/Formale-Systeme-in-LEAN/tree/main/FormalSystems/Chomsky/Regular\">https://github.com/knowsys/Formale-Systeme-in-LEAN/tree/main/FormalSystems/Chomsky/Regular</a><br>\nWe did not formalize regular expressions though.</p>\n</blockquote>\n<p>There seems to be an overlap with my project:<br>\n<a href=\"https://github.com/madvorak/chomsky\">https://github.com/madvorak/chomsky</a></p>\n<p>We should perhaps collaborate!</p>",
        "id": 435983141,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714378784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Adding.20DFA.20regular.20expression.20equivalence.20to.20mathlib/near/435338869\">said</a>:</p>\n<blockquote>\n<p>Are you sure you don't want to build on top of Mathlib definitions?</p>\n</blockquote>\n<p>I think the issue that I ran into was that the use of the instances of <code>Add</code>, <code>Mul</code>, <code>One</code>, <code>Zero</code> and <code>Pow</code> for regular expressions became too abstract for me to follow.</p>",
        "id": 436184552,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1714447587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Adding.20DFA.20regular.20expression.20equivalence.20to.20mathlib/near/435246760\">schrieb</a>:</p>\n<blockquote>\n<p>No, nobody is working on it. Go wild <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>Since I found <span class=\"user-mention\" data-user-id=\"497626\">@Russell Emerine</span>'s implementation quite elegant, I ported it to Lean4 and now have it at a state where it typechecks and has computational content where possible. Would anybody like to take a look and give me some pointers for moving it towards inclusion in the mathlib? I've deliberately left most of the structure intact (from mathport's output) because I don't want to introduce my own biases before getting some feedback… except for simplifying inductions over the reverse of lists by using the appropriate induction principle.<br>\n<a href=\"https://github.com/TpmKranz/mathlib4/tree/rescueRegularExpressionNFAEquivalence\">https://github.com/TpmKranz/mathlib4/tree/rescueRegularExpressionNFAEquivalence</a></p>",
        "id": 436284929,
        "sender_full_name": "Tom Kranz",
        "timestamp": 1714487446
    },
    {
        "content": "<p>The proofs are longish, but nothing that can't be fixed by a PR review!</p>",
        "id": 436306687,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714493332
    },
    {
        "content": "<p>Definitely; I intend to overhaul them as soon as I get some pointers for what the result should look like. So I should just make a branch on the official repo and offer the current state as a PR to open it to wider feedback?</p>",
        "id": 436307701,
        "sender_full_name": "Tom Kranz",
        "timestamp": 1714493617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Adding.20DFA.20regular.20expression.20equivalence.20to.20mathlib/near/435983141\">said</a>:</p>\n<blockquote>\n<p>There seems to be an overlap with my project:<br>\n<a href=\"https://github.com/madvorak/chomsky\">https://github.com/madvorak/chomsky</a></p>\n<p>We should perhaps collaborate!</p>\n</blockquote>\n<p>Indeed, we came across your project recently and we would be happy to collaborate :)<br>\nI'll DM you!</p>",
        "id": 436469329,
        "sender_full_name": "Lukas Gerlach",
        "timestamp": 1714553102
    },
    {
        "content": "<p>What is the algorithm being used for the translation of regular expressions to a DFA/NFA? I started trying to implement <a href=\"https://swtch.com/~rsc/regexp/regexp1.html\">Thompson's algorithm</a>,  (work <a href=\"https://github.com/pthomas505/FOL/blob/392abd5e2718b57bb09a0ba7da30d771f33e8f50/FOL/Compute.lean#L464-L700\">here</a>), but I don't know if I am doing it correctly and what it is going to be like trying to prove that it is correct.</p>",
        "id": 436994858,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1714801872
    },
    {
        "content": "<p>I've set up the PR now; will I have to request a review or will the appropriate people just start on it?</p>",
        "id": 437005846,
        "sender_full_name": "Tom Kranz",
        "timestamp": 1714813635
    },
    {
        "content": "<p>Hopefully the latter, but feel free to request reviews if nothing happens within three days</p>",
        "id": 437006044,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714813807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"713261\">@Keegan Perry</span> the work I chose to inherit already <a href=\"https://github.com/leanprover-community/mathlib4/blob/72a30d53ca25ce341985a5638c74977319b1b142/Mathlib/Computability/RegularExpressionToNFA/Defs.lean\">implemented</a> and <a href=\"https://github.com/leanprover-community/mathlib4/blob/72a30d53ca25ce341985a5638c74977319b1b142/Mathlib/Computability/RegularExpressionToNFA/Basic.lean\">proved correct</a> the regular operations on (non-ε) NFA's – just in the context of Thompson's construction – but it should probably be extracted to avoid code duplication.</p>",
        "id": 437006047,
        "sender_full_name": "Tom Kranz",
        "timestamp": 1714813807
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 437178963,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1714960239
    },
    {
        "content": "<p>I have extracted the regular operations into NFAs now. Where would I ask for a review – in the mathlib4 stream?</p>",
        "id": 438633623,
        "sender_full_name": "Tom Kranz",
        "timestamp": 1715712439
    },
    {
        "content": "<p>Ask in <a class=\"stream\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews\">#PR reviews</a> or through the github interface</p>",
        "id": 438633665,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715712456
    },
    {
        "content": "<p>Thanks! I swear I did not see that stream when I was looking for it. <span aria-label=\"face with peeking eye\" class=\"emoji emoji-1fae3\" role=\"img\" title=\"face with peeking eye\">:face_with_peeking_eye:</span></p>",
        "id": 438634118,
        "sender_full_name": "Tom Kranz",
        "timestamp": 1715712604
    }
]