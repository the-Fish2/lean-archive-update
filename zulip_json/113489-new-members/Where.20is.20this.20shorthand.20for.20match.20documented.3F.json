[
    {
        "content": "<p>Hi all... I was reading the section \"<a href=\"https://leanprover-community.github.io/lean4-metaprogramming-book/main/05_syntax.html#matching-on-syntax\">Matching on Syntax</a>\" of the chapter on syntax of the Metaprogramming book and I stumbled on this,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isAdd11</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat.add</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>that has a shorthand for match/with that was new to me. Here are two ways to expand it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">N</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">z</span>         <span class=\"o\">:</span> <span class=\"n\">N</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">N.z</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">N.s</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"bp\">·</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">N.z</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">N.s</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">N.z</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">N.s</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>Questions:</p>\n<p>1) Is it mentioned in the docs? Where?</p>\n<p>2) I couldn't find a way to convert foo1 to a single line by replacing its newlines by semicolons and curly braces. How do I do that?</p>\n<p>3) Where is that abbreviation defined in the source? My best guess is that its definition uses <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Parser/Term.lean#L872\">matchExprAlt</a> indirectly...</p>",
        "id": 439402271,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1716089228
    },
    {
        "content": "<ol start=\"2\">\n<li>just remove the line breaks: <code>def foo1 : N → Bool | N.z   =&gt; true | N.s _ =&gt; false</code>.</li>\n</ol>\n<p>I do not know where this is documented/defined.</p>",
        "id": 439407495,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716093531
    },
    {
        "content": "<ol>\n<li>\n<p>It's demonstrated in TPIL <a href=\"https://lean-lang.org/theorem_proving_in_lean4/induction_and_recursion.html?highlight=match#pattern-matching\">here</a>, I don't know if it's explicitly mentioned. TPIL is one of the branches of the manual (the manual links to it near the beginning).</p>\n</li>\n<li>\n<p>It should be part of the command/declar syntax, I think it's the last part of this: <a href=\"https://github.com/leanprover/lean4/blob/239ade80dc6258f68b7ea92e52ef15066f58a791/src/Lean/Parser/Command.lean#L99C5-L99C16\">https://github.com/leanprover/lean4/blob/239ade80dc6258f68b7ea92e52ef15066f58a791/src/Lean/Parser/Command.lean#L99C5-L99C16</a></p>\n</li>\n</ol>",
        "id": 439438902,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1716125661
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>! I thought that I had tested that, but I hadn't... sorry!</p>",
        "id": 439451254,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1716137586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris Bailey</span>, perfect! Many thanks! =)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `declVal` matches the right-hand side of a declaration, one of:</span>\n<span class=\"sd\">* `:= expr` (a \"simple declaration\")</span>\n<span class=\"sd\">* a sequence of `| pat =&gt; expr` (a declaration by equations), shorthand for a `match`</span>\n<span class=\"sd\">* `where` and then a sequence of `field := value` initializers, shorthand for a structure constructor</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>",
        "id": 439451340,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1716137662
    }
]