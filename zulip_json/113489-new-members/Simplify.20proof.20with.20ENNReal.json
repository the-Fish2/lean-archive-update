[
    {
        "content": "<p>As part of working on PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/9163\">#9163</a>, I've had to introduce <a href=\"https://github.com/leanprover-community/mathlib4/blob/9c7e7a7a2d5d6b4f2d0a07bf76a1277de5bbe510/Mathlib/Data/ENNReal/Real.lean#L672\">a lemma</a> about <code>ENNReal</code>s. I've written a proof, but I think that due to my inexperience it came out a bit hacky. I suspect that with proper use of the simplification and automation tactics it could be made to look much nicer. Any suggestions/improvements welcome.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ENNReal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ENNReal.add_sub_add_comm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">ofReal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toReal</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ofReal_toReal</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"n\">_</span>               <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">ofReal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toReal</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">cast_goal</span>\n    <span class=\"n\">_</span>               <span class=\"bp\">=</span>          <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span>         <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ofReal_toReal</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">case</span> <span class=\"n\">cast_goal</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ofReal_eq_ofReal_iff</span> <span class=\"n\">toReal_nonneg</span> <span class=\"n\">toReal_nonneg</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">toReal_add</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">toReal_sub_of_le</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">]</span>\n    <span class=\"n\">linarith</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">tauto</span>\n    <span class=\"n\">exact</span> <span class=\"n\">add_le_add</span> <span class=\"n\">hac</span> <span class=\"n\">hbd</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">aesop</span>\n  <span class=\"n\">aesop</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>\n<p>There is a general lemma <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=add_sub_add_comm#doc\">docs#add_sub_add_comm</a>, but it doesn't apply to <code>ENNReal</code> since it fails some of the hypotheses. Perhaps not all the <code>≠ ∞</code> are really necessary.</p>",
        "id": 422815709,
        "sender_full_name": "Igor Khavkine",
        "timestamp": 1708608311
    },
    {
        "content": "<p>If you assume none of your ENNReals are infinite, you're secretly working in NNReal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NNReal.add_sub_add_comm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">NNReal</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Real.toNNReal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toReal</span> <span class=\"o\">:=</span> <span class=\"n\">Real.toNNReal_coe.symm</span>\n    <span class=\"n\">_</span>               <span class=\"bp\">=</span> <span class=\"n\">Real.toNNReal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toReal</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">cast_goal</span>\n    <span class=\"n\">_</span>               <span class=\"bp\">=</span>          <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span>         <span class=\"o\">:=</span> <span class=\"n\">Real.toNNReal_coe</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">NNReal.coe_add</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">NNReal.coe_sub</span> <span class=\"o\">(</span><span class=\"n\">add_le_add</span> <span class=\"n\">hac</span> <span class=\"n\">hbd</span><span class=\"o\">)]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">NNReal.coe_sub</span> <span class=\"n\">hac</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">NNReal.coe_sub</span> <span class=\"n\">hbd</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">NNReal.coe_add</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">NNReal.coe_add</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">_root_.add_sub_add_comm</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ENNReal</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"n\">ENNReal.coe_sub</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ENNReal.add_sub_add_comm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">lift</span> <span class=\"n\">a</span> <span class=\"n\">to</span> <span class=\"n\">NNReal</span> <span class=\"n\">using</span> <span class=\"n\">ha</span>\n  <span class=\"n\">lift</span> <span class=\"n\">b</span> <span class=\"n\">to</span> <span class=\"n\">NNReal</span> <span class=\"n\">using</span> <span class=\"n\">hb</span>\n  <span class=\"n\">lift</span> <span class=\"n\">c</span> <span class=\"n\">to</span> <span class=\"n\">NNReal</span> <span class=\"n\">using</span> <span class=\"n\">hc</span>\n  <span class=\"n\">lift</span> <span class=\"n\">d</span> <span class=\"n\">to</span> <span class=\"n\">NNReal</span> <span class=\"n\">using</span> <span class=\"n\">hd</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">exact</span> <span class=\"n\">NNReal.add_sub_add_comm</span> <span class=\"n\">hac</span> <span class=\"n\">hbd</span>\n</code></pre></div>",
        "id": 422820284,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708609871
    },
    {
        "content": "<p>Though you're correct that the assumptions are not minimal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ENNReal.add_sub_add_comm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">lift</span> <span class=\"n\">c</span> <span class=\"n\">to</span> <span class=\"n\">NNReal</span> <span class=\"n\">using</span> <span class=\"n\">hc</span>\n  <span class=\"n\">lift</span> <span class=\"n\">d</span> <span class=\"n\">to</span> <span class=\"n\">NNReal</span> <span class=\"n\">using</span> <span class=\"n\">hd</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">a</span> <span class=\"bp\">∞</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">b</span> <span class=\"bp\">∞</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n  <span class=\"n\">lift</span> <span class=\"n\">a</span> <span class=\"n\">to</span> <span class=\"n\">NNReal</span> <span class=\"n\">using</span> <span class=\"n\">ha</span>\n  <span class=\"n\">lift</span> <span class=\"n\">b</span> <span class=\"n\">to</span> <span class=\"n\">NNReal</span> <span class=\"n\">using</span> <span class=\"n\">hb</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">exact</span> <span class=\"n\">NNReal.add_sub_add_comm</span> <span class=\"n\">hac</span> <span class=\"n\">hbd</span>\n</code></pre></div>",
        "id": 422821767,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708610363
    },
    {
        "content": "<p>Great, thanks! I unsuccessfully experiment with <code>norm_cast</code> first, but I obviously didn't know how to use it properly.</p>",
        "id": 422823862,
        "sender_full_name": "Igor Khavkine",
        "timestamp": 1708611014
    }
]