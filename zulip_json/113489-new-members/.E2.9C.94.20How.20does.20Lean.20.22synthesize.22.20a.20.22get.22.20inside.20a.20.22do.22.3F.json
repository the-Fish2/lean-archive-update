[
    {
        "content": "<p>Hi all,</p>\n<p>in the screenshot below <code>foo2</code> runs a <code>do</code> in a \"normal\" monad, and <code>foo1</code> and <code>foo3</code> run <code>do</code>s inside <code>Monad</code>s that are also <code>MonadState</code>s; in <code>foo2</code> the <code>← get</code> gives an error - <code>failed to synthesize instance MonadState ?m.271 m</code> - but in <code>foo1</code> and <code>foo3</code> the <code>← get</code>s work. Here are the screenshot and the code:</p>",
        "id": 446320574,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719088299
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/GXcIOkwUcCDkjz5y-kTMev3f/sshot.png\">sshot.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/GXcIOkwUcCDkjz5y-kTMev3f/sshot.png\" title=\"sshot.png\"><img src=\"/user_uploads/3121/GXcIOkwUcCDkjz5y-kTMev3f/sshot.png\"></a></div>",
        "id": 446320737,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719088332
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"bp\">.</span><span class=\"n\">unusedVariables</span><span class=\"w\"> </span><span class=\"n\">false</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo1</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Monad</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MonadState</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span>\n<span class=\"w\">         </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">xxxxxxxx</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"--delimiter--\"</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\">      </span><span class=\"c1\">-- ok</span>\n<span class=\"w\">  </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">a</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo2</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Monad</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"c1\">-- [MonadState σ m]</span>\n<span class=\"w\">         </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">xxxxxxxx</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"--delimiter--\"</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\">      </span><span class=\"c1\">-- error: failed to synthesize...</span>\n<span class=\"w\">  </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">a</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo3</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">inst1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Monad</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">inst2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MonadState</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span>\n<span class=\"w\">         </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">xxxxxxxx</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"--delimiter--\"</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\">      </span><span class=\"c1\">-- ok</span>\n<span class=\"w\">  </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 446320844,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719088359
    },
    {
        "content": "<p>Where can I read more about how that works? My first guess was that the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">export</span><span class=\"w\"> </span><span class=\"n\">MonadState</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">modifyGet</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>in <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L3211\">Prelude.lean#L3211</a> would tell Lean that \"inside a <code>MonadState</code>\" references to <code>get</code> can be resolved \"by pointing to the current <code>MonadState</code> instance\"...</p>",
        "id": 446321084,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719088421
    },
    {
        "content": "<p>I am trying to understand more precisely the meanings of \"inside a <code>MonadState</code>\" and \"by pointing to the current <code>MonadState</code> instance\", and I thought that I would be able to find the \"<code>get</code>\" as a field of <code>inst2</code> in <code>foo3</code> - but I couldn't find it...</p>\n<p>Am I in the right direction? Pointers, please?...</p>\n<p>Btw, I was trying to solve this other question - \"<a href=\"#narrow/stream/113489-new-members/topic/A.20minimal.20state.20monad.3F/near/446269145\">A minimal state monad?</a>\" - and I think that the question in this thread will help me with the question in the other one...</p>",
        "id": 446321479,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719088513
    },
    {
        "content": "<p>Genuine question: What do you find weird about the behavior of the example? <code>foo1</code> and <code>foo3</code> are exactly the same (up to unused names for the instances), and they behave the same. In <code>foo2</code>, there's no extra assumption on the Monad, so it doesn't support <code>get</code>.</p>",
        "id": 446321898,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719088614
    },
    {
        "content": "<p><code>MonadState</code> really does contain a <code>get</code> field. From the source:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">MonadState</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">outParam</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"sd\">/-- `(← get) : σ` gets the state out of a monad `m`. -/</span>\n<span class=\"w\">  </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">σ</span>\n<span class=\"w\">  </span><span class=\"sd\">/-- `set (s : σ)` replaces the state with value `s`. -/</span>\n<span class=\"w\">  </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">PUnit</span>\n<span class=\"w\">  </span><span class=\"sd\">/-- `modifyGet (f : σ → α × σ)` applies `f` to the current state, replaces</span>\n<span class=\"sd\">  the state with the return value, and returns a computed value.</span>\n\n<span class=\"sd\">  It is equivalent to `do let (a, s) := f (← get); put s; pure a`, but</span>\n<span class=\"sd\">  `modifyGet f` may be preferable because the former does not use the state</span>\n<span class=\"sd\">  linearly (without sufficient inlining). -/</span>\n<span class=\"w\">  </span><span class=\"n\">modifyGet</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Prod</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">α</span>\n</code></pre></div>",
        "id": 446322122,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719088735
    },
    {
        "content": "<p>I started with foo1, and I included it here because it is \"more natural\" than foo3 in some sense. Then I added the \"inst1 :\" and \"inst2 :\", that some people may find weird...</p>",
        "id": 446322340,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719088841
    },
    {
        "content": "<p>Is the question \"Why can you write <code>get</code> instead of <code>inst2.get</code>\"?</p>",
        "id": 446322488,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719088907
    },
    {
        "content": "<p>By the way, note that the third example contains a typo (<code>return _</code> instead of <code>return a</code>), which might cause confusing errors</p>",
        "id": 446322645,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719088935
    },
    {
        "content": "<p>Yes! That's it!</p>",
        "id": 446322646,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719088935
    },
    {
        "content": "<p>Wait, does \"inst2.get\" work for you?</p>",
        "id": 446322719,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719088958
    },
    {
        "content": "<p>The \"return _\" is not a typo - I am using \"let\"s and the underscore in \"_\" to explore what is available inside the \"do\".</p>",
        "id": 446323023,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719089038
    },
    {
        "content": "<p>GAAAAH! \"inst2.get\" works! I thought that I had triple-checked that before writing my question...</p>",
        "id": 446323345,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719089114
    },
    {
        "content": "<p>New screenshot:</p>",
        "id": 446323817,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719089227
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/1txzIVNLgzi92-DhL8aux8S0/sshot.png\">sshot.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/1txzIVNLgzi92-DhL8aux8S0/sshot.png\" title=\"sshot.png\"><img src=\"/user_uploads/3121/1txzIVNLgzi92-DhL8aux8S0/sshot.png\"></a></div>",
        "id": 446323910,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719089253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"381195\">Eduardo Ochs</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20does.20Lean.20.22synthesize.22.20a.20.22get.22.20inside.20a.20.22do.22.3F/near/446323023\">said</a>:</p>\n<blockquote>\n<p>The \"return _\" is not a typo - I am using \"let\"s and the underscore in \"_\" to explore what is available inside the \"do\".</p>\n</blockquote>\n<p>The underscore asks Lean to synthesize a natural number via unification, and there's not enough information for Lean to deduce that any particular natural number should be \"the only one that fits\".</p>",
        "id": 446323977,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719089272
    },
    {
        "content": "<p>That's the error you're seeing in the minibuffer in the second screenshot</p>",
        "id": 446324092,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719089292
    },
    {
        "content": "<p>That's not an error for me - it's \"debugging info\" <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 446324301,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719089350
    },
    {
        "content": "<p>So in that context \"get\" and \"inst2.get\" yield the same result. That solves one of my questions...</p>",
        "id": 446324559,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719089438
    },
    {
        "content": "<p>Ah, sorry! I thought you were highlighting it in the second screenshot.</p>",
        "id": 446324600,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719089466
    },
    {
        "content": "<p>If you just <code>#print get</code> outside the functions, you can see that that's actually <code>MonadState,get</code> -- as you pointed out, get is exported</p>",
        "id": 446324659,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719089505
    },
    {
        "content": "<p>Yes, I started with that...</p>",
        "id": 446324722,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719089525
    },
    {
        "content": "<p>But its type is <code>get : {σ : outParam (Type u)} → {m : Type u → Type v} → [self : MonadState σ m] → m σ</code></p>",
        "id": 446324732,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719089531
    },
    {
        "content": "<p>So it works anywhere, but one of the arguments is the MonadState instance, to be found by typeclass search. If such an instance is not available in the context (as it isn't in the <code>foo2</code> case), Lean has no default way to synthesize it</p>",
        "id": 446324811,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719089591
    },
    {
        "content": "<p>(Which makes sense, since not every Monad \"is equipped with State capabilities\")</p>",
        "id": 446324865,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719089631
    },
    {
        "content": "<p>I still need to understand what is \"inside a MonadState\"... let me grep for \"typeclass search\" and try to build an example without a \"do\"...</p>",
        "id": 446324963,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719089691
    },
    {
        "content": "<p>...but that will take some time because doggy needs a walk. I'll post my solution here in some hours - I hope! Thanks! =)</p>",
        "id": 446325096,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719089776
    },
    {
        "content": "<p>Do you know about <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">#fpil</a>? Chapters 5, 6 and 7 are a wonderful introduction to monads and monad transformers.</p>",
        "id": 446325202,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719089866
    },
    {
        "content": "<p>Yes, I am trying to read it carefully... but many of its examples show 20 ideas in a single snippet, and I'm having to decompose its examples into smaller ones...</p>",
        "id": 446325530,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719090029
    },
    {
        "content": "<p>I couldn't follow some of its examples of monad transformers, and I tried to write a minimal-ish state monad without a transformer.</p>",
        "id": 446325761,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719090140
    },
    {
        "content": "<p>I had some problems to make my monad an instance of MonadState, and this thread was an attempt to understand some difficult points.</p>",
        "id": 446325932,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719090283
    },
    {
        "content": "<p>I'll go back to the other thread - \"<a href=\"#narrow/stream/113489-new-members/topic/A.20minimal.20state.20monad.3F/near/446269145\">A minimal state monad?</a>\" - soon!</p>",
        "id": 446326032,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719090352
    },
    {
        "content": "<p>Oh, sorry! I completely missed the context of the other thread. I should have clicked on it when you first posted it.</p>",
        "id": 446326430,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719090631
    },
    {
        "content": "<p>Maybe the Haskell wikibook doesn't introduce as many concepts at once? <a href=\"https://en.wikibooks.org/wiki/Haskell/Understanding_monads/State\">https://en.wikibooks.org/wiki/Haskell/Understanding_monads/State</a></p>",
        "id": 446326446,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719090650
    },
    {
        "content": "<p>By the way, the \"&lt;-\" arrow requires you to be \"inside the monad\" (that is, it desugars into monadic bind), but that's not the error in foo2. The error there comes from calling a function (<code>get</code>) for which one argument is to be filled in by typeclass search (the <code>[self: ...]</code> one). So maybe your question is just about calling functions with \"square bracket arguments\" instead of defining them</p>",
        "id": 446327595,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719091489
    },
    {
        "content": "<p>Done:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">Cla</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">met</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Cla</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">met</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"(string)\"</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Cla</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"w\">   </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">met</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"(bool)\"</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Cla</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\">    </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">met</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"(nat)\"</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Cla</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\">    </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">met</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"(int)\"</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Cla</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"bp\">.</span><span class=\"n\">met</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\">   </span><span class=\"mi\">42</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">42</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"s2\">\"abc\"</span>\n</code></pre></div>",
        "id": 446341391,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719097933
    },
    {
        "content": "<p>And the link to the wikibook on Haskell looks great!!!</p>",
        "id": 446341445,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1719097988
    },
    {
        "content": "<p>You should almost never need to use named instance arguments. This is more standard:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Cla</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Cla</span><span class=\"bp\">.</span><span class=\"n\">met</span><span class=\"w\"> </span><span class=\"n\">α</span>\n</code></pre></div>",
        "id": 446345389,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719101302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"381195\">Eduardo Ochs</span> has marked this topic as resolved.</p>",
        "id": 446349370,
        "sender_full_name": "Notification Bot",
        "timestamp": 1719104416
    }
]