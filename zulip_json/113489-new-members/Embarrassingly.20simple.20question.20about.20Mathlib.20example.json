[
    {
        "content": "<p>Hi - this really a two-part question. First, what is the best forum in which to ask simple questions about the Mathlib tutorial? Secondly, I am having difficulty with one example in the Rings section: it asks, show</p>\n<p>theorem add_left_cancel {a b c : R} (h : a + b = a + c) : b = c := by</p>\n<p>I think this should be done by a rw clause, but the first thing I want to do is to add -a to the left of each side of the hypothesis, but I can't work out how to express this. I'm sure this is a simple question, but don't yet have the conceptual mindset to do this.</p>\n<p>Thanks for any help! Martin</p>",
        "id": 410775147,
        "sender_full_name": "Martin Gilchrist",
        "timestamp": 1704156638
    },
    {
        "content": "<p>Hi! <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a>  is the right place for beginner's questions (perhaps you can move this thread to that channel). You can also use backtics to make your code more readable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">add_left_cancel</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>",
        "id": 410775722,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1704157055
    },
    {
        "content": "<p>One idea for this exercise (which actually belongs to Section 2, Basics, of MIL) is to start by rewriting the goal using one of the previous two  theorems.</p>\n<p>Working at the hypothesis <code>h</code> is also feasible, but you'll learn about that later on.</p>",
        "id": 410776506,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1704157487
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Embarrassingly.20simple.20question.20about.20Mathlib.20example\">#lean4 &gt; Embarrassingly simple question about Mathlib example</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 410778013,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704158651
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"500714\">@Martin Gilchrist</span> Moved!)</p>",
        "id": 410778077,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704158702
    },
    {
        "content": "<p>Hi - thanks, Pedro and Kyle - I am sorry, but I just don't understand what it means to \"rewrite the goal\"! Can you give me an example of how I would (left) add -a to h in order to start the re-writing process? Apologies for really dumb questions.</p>",
        "id": 410787178,
        "sender_full_name": "Martin Gilchrist",
        "timestamp": 1704164568
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_left_cancel'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">add_right_injective</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eq_iff</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 410788389,
        "sender_full_name": "Richard Copley",
        "timestamp": 1704165522
    },
    {
        "content": "<p>Richard, I think this uses too much compared to what the exercise is intending.</p>",
        "id": 410805620,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704180169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"500714\">@Martin Gilchrist</span>, you can start with <code>rw [← add_neg_cancel_right b a]</code>.</p>",
        "id": 410805679,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704180230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  Thanks - I have proved add_neg_cancel_right, and so I added the following with your hint:</p>\n<p><code>theorem add_left_cancel {a b c : R} (h : a + b = a + c) : b = c := by</code><br>\n<code> rw [← add_neg_cancel_right b a, add_assoc, zero_add]</code></p>\n<p>which I feel should give me three rewrites: -a + a + b = -a + a + c then (-a + a) + b = (-a + a) + c then 0 + b = 0 + c then b = c but instead I get an error that the tactic did not find instance of pattern (see screenshot). I think I must be missing some understanding here.</p>\n<p><a href=\"/user_uploads/3121/kzaVIVbb3x3p1jDpAzV_y6gv/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/kzaVIVbb3x3p1jDpAzV_y6gv/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/kzaVIVbb3x3p1jDpAzV_y6gv/image.png\"></a></div><p>Any help would be appreciated. Thanks, Martin</p>",
        "id": 410884686,
        "sender_full_name": "Martin Gilchrist",
        "timestamp": 1704218758
    },
    {
        "content": "<p>I can explain why you're getting that issue, but I'm curious why you're trying to rewrite the goal from <code>b = c</code> back to <code>b = c</code></p>",
        "id": 410886033,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704219392
    },
    {
        "content": "<p>if you click after each comma in the <code>rw</code> block, you can see the effect of each individual rewrite in the infoview, which might help clarify things</p>",
        "id": 410886872,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704219826
    },
    {
        "content": "<p>There's no <code>0 + ...</code> anywhere to be seen, so why do you think <code>zero_add</code>applies?</p>",
        "id": 410889089,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704220911
    },
    {
        "content": "<p>But also Matt's point</p>",
        "id": 410889162,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704220934
    },
    {
        "content": "<p>You need to get to a point where you can rewrite with <code>h</code>, so you need to get <code>a+b</code> in your goal somehow</p>",
        "id": 410889393,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704221063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> Hi, Matt - I would really appreciate your help here. Your comment about clicking after each comma is very useful, but as you can see from the following screenshot, I think I have got to the point <code>b = c</code>, but I still see a red underline under by indicating that I have not proved the theorem! I think I'm not clear about what you mean by trying to rewrite from <code>b = c</code> back to <code>b = c</code> because I think I am going from <code>a + b = a+ c</code> to <code>b = c</code> . Am I not?</p>\n<p><a href=\"/user_uploads/3121/x3CUK53iwGFlepheogpjVy7u/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/x3CUK53iwGFlepheogpjVy7u/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/x3CUK53iwGFlepheogpjVy7u/image.png\"></a></div>",
        "id": 410889460,
        "sender_full_name": "Martin Gilchrist",
        "timestamp": 1704221108
    },
    {
        "content": "<p>Yes, you managed to reduce <code>b = c</code> to proving <code>b = c</code>. As Ruben pointed out, this is not what you want to be doing.</p>",
        "id": 410889975,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704221401
    },
    {
        "content": "<blockquote>\n<p>I think I am going from <code>a + b = a+ c</code> to <code>b = c</code> . Am I not?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"500714\">@Martin Gilchrist</span> <code>rw []</code> operates on the goal, which is <code>b = c</code>... to rewrite the hypothesis <code>h : a + b = a + c</code>, you would use <code>rw [] at h</code></p>",
        "id": 410891029,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704221965
    },
    {
        "content": "<p>however, you don't necessarily need to rewrite <code>h</code>... you can also solve this by rewriting the goal <em>using</em> <code>h</code></p>",
        "id": 410891687,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704222207
    },
    {
        "content": "<p>the strategy that Ruben is suggesting is to rewrite the goal so that it includes <code>a + b</code>, and then do <code>rw [h]</code></p>",
        "id": 410893083,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704222905
    },
    {
        "content": "<p>also, I think you might have a misunderstanding of how the goal works in the info view... <code>⊢ b = c</code> doesn't mean that you've proved <code>b = c</code>, it means that <code>b = c</code> is the thing you need to prove</p>",
        "id": 410894221,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704223579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> and @Yael and <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>  I am really sorry, and I don't mean to be a pain, but I don't understand what you mean by use <code>rw [] at h</code>. I tried the following (see screenshot) in which I have <code>at h</code> at the end of the line, and I am trying to (I think) add -a to the left of each side of h, but try as I might, I cannot get the syntax right.</p>\n<p><a href=\"/user_uploads/3121/kS1MKafItQ41BwpYU64q5agM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/kS1MKafItQ41BwpYU64q5agM/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/kS1MKafItQ41BwpYU64q5agM/image.png\"></a></div><p>I have tried variations using the left arrow and using <code>a b</code> but I'm afraid that I am missing something syntactical about Lean. It might save time all around, if you can show me a simple solution, and then I can puzzle through the syntax by myself rather than take up your time?</p>",
        "id": 410897877,
        "sender_full_name": "Martin Gilchrist",
        "timestamp": 1704225427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"500714\">@Martin Gilchrist</span> No need to apologize! Here's a solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_left_cancel'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_neg_cancel_right</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">add_neg_cancel_right</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 410908628,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704231117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> Thanks, and I assume that the <code>h</code> in the rw clause is an example of \"using h\" that you mentioned earlier?</p>\n<p>Anyway, <span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> I do appreciate your patience with me. This has been a learning experience for me, and reconfirms my appreciation of the helpfulness and responsiveness of the Lean community!</p>",
        "id": 410911240,
        "sender_full_name": "Martin Gilchrist",
        "timestamp": 1704232678
    },
    {
        "content": "<blockquote>\n<p>I assume that the <code>h</code> in the rw clause is an example of \"using h\" that you mentioned earlier?</p>\n</blockquote>\n<p>yes, exactly... hypotheses can be used just like any other lemma or theorem</p>",
        "id": 410913218,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704233623
    },
    {
        "content": "<p>Essentially the proof here is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>=</mo><mn>0</mn><mo>+</mo><mi>b</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mi>a</mi><mo>+</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>b</mi><mo>=</mo><mo>−</mo><mi>a</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>−</mo><mi>a</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mi>a</mi><mo>+</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>c</mi><mo>=</mo><mn>0</mn><mo>+</mo><mi>c</mi><mo>=</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">b = 0 + b = (-a + a) + b = -a + (a + b) = -a + (a + c) = (-a + a) + c = 0 + c = c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span></p>",
        "id": 410914924,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704234711
    }
]