[
    {
        "content": "<p>This is Mathlib's definition of <code>Semigroup</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Semigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Multiplication is associative -/</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>When implementing my own semigroup from scratch for educational purposes, the <code>Semigroup_1</code> definition below is accepted by Lean, but the <code>Semigroup_2</code> definition fails.</p>\n<p>Note the difference in the multiplication associativity property: <code>Semigroup_1</code> uses explicit parentheses in <code>mul_assoc</code>, whereas <code>Semigroup_2</code> does not.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HasMul</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\" * \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HasMul.mul</span>\n<span class=\"kd\">class</span> <span class=\"n\">Magma</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">HasMul</span> <span class=\"n\">M</span>\n\n<span class=\"c1\">-- Accepted by Lean</span>\n<span class=\"kd\">class</span> <span class=\"n\">Semigroup_1</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Magma</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Not accepted by Lean (failed to synthesize instance: HMul S S ?m.2257)</span>\n<span class=\"kd\">class</span> <span class=\"n\">Semigroup_2</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Magma</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>How can I achieve a definition similar to Mathlib's <code>Semigroup</code>, which does not use parentheses on the left-hand side of the <code>mul_assoc</code> property?\"</p>",
        "id": 417321854,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1705960251
    },
    {
        "content": "<p>Make sure you do <code>infixl</code> or <code>infixr</code> instead of <code>infix</code> to get left-associative or right-associative rather than non-associative. The arithmetic operators are all <code>infixl</code>, which is why <code>g * h * k</code> parses as <code>(g * h) * k</code>.</p>",
        "id": 417349963,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705972560
    },
    {
        "content": "<p>I tried changing <code>infix</code> to <code>infixl</code> in the code above and still got the same error.</p>",
        "id": 417382505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705993333
    },
    {
        "content": "<p>It seems to also have to do with the precedence level being different from the core <code>*</code>. This fixes it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\" * \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HasMul.mul</span>\n</code></pre></div>",
        "id": 417387426,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705995841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"683979\">Isak Colboubrani</span> has marked this topic as resolved.</p>",
        "id": 417503178,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706034052
    }
]