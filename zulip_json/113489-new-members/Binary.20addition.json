[
    {
        "content": "<p>With the help of ChatGPT, I made some code that adds with binary numbers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">         Binary Numbers  Addition         -/</span>\n\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Binary</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">BIN</span><span class=\"o\">:=</span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">binaryRepr</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"w\"> </span><span class=\"bp\">â†’</span><span class=\"w\"> </span><span class=\"n\">String</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\">  </span><span class=\"n\">binaryRepr</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">binaryRepr</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"s2\">\"0\"</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"b\"</span>\n\n<span class=\"c1\">-- Define the Repr instance using the helper function</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Repr</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">reprPrec</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">binaryRepr</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"> Function to handle addition with carry -/</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">addWithCarry</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\">  </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\">  </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\">  </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">addWithCarry</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\">  </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">addWithCarry</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\">  </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">addWithCarry</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">addWithCarry</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\">  </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">addWithCarry</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\">  </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">addWithCarry</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">addWithCarry</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\">  </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">addWithCarry</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">addWithCarry</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\">  </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">addWithCarry</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Main addition function using the helper function -/</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">addWithCarry</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">false</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HAdd</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">hAdd</span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Binary</span><span class=\"bp\">.</span><span class=\"n\">add</span>\n\n<span class=\"c1\">-- Testing the function</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\">  </span><span class=\"n\">BIN</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">BIN</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"n\">one</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">BIN</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">BIN</span><span class=\"bp\">.</span><span class=\"n\">one</span>\n</code></pre></div>\n<p>Not sure if something like this is already in the Mathlib? (I assume so otherwise how did ChatGPT know how to write it?) Also, not sure what the point of it is. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>Is this good code or bad? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>Probably needs some proofs that it is equivalent to the Natural numbers</p>",
        "id": 446472900,
        "sender_full_name": "Mr Proof",
        "timestamp": 1719175930
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Num#doc\">docs#Num</a> is mathlib's binary number type</p>",
        "id": 446473314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719176320
    },
    {
        "content": "<p>But realistically you should probably just use <code>Nat</code> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.binaryRec#doc\">docs#Nat.binaryRec</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.binaryRec%27#doc\">docs#Nat.binaryRec'</a></p>",
        "id": 446473384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719176386
    },
    {
        "content": "<p>Is there any information about how Lean stores natural numbers. I assume a proof with a number like 12345 doesn't store it as SSSSSSSSSSSS.....SSSSSSSSSSO. Does it \"cheat\" a little by using things outside the minimal type theory? <br>\nOr does it store it in some kind of binary or decimal list with Lean rules for multiplication?</p>",
        "id": 446473945,
        "sender_full_name": "Mr Proof",
        "timestamp": 1719176674
    },
    {
        "content": "<p>According to the docstring of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat#doc\">docs#Nat</a>,</p>\n<blockquote>\n<p>This type is special-cased by both the kernel and the compiler:</p>\n<ul>\n<li>\n<p>The type of expressions contains \"<code>Nat</code> literals\" as a primitive constructor,<br>\n  and the kernel knows how to reduce zero/succ expressions to nat literals.</p>\n</li>\n<li>\n<p>If implemented naively, this type would represent a numeral <code>n</code> in unary as a<br>\n  linked list with <code>n</code> links, which is horribly inefficient. Instead, the<br>\n  runtime itself has a special representation for <code>Nat</code> which stores numbers up<br>\n  to 2^63 directly and larger numbers use an arbitrary precision \"bignum\"<br>\n  library (usually <a href=\"https://gmplib.org/\">GMP</a>).</p>\n</li>\n</ul>\n</blockquote>",
        "id": 446474381,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1719176990
    },
    {
        "content": "<p>Hmmm... kind of feels like cheating. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>I'm sure a \"bignum\" API could be implemented directly in Lean. But I guess there's bigger fish to fry.</p>",
        "id": 446475028,
        "sender_full_name": "Mr Proof",
        "timestamp": 1719177591
    },
    {
        "content": "<p>Lean3 used a binary representation where <code>12345</code> was represented as a series of nested <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=bit0#doc\">docs#bit0</a> s and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=bit1#doc\">docs#bit1</a> s, but this turned out to perform worse and be more confusing to manipulate in the goal view</p>",
        "id": 446476138,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719178160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"725689\">Mr Proof</span> <a href=\"#narrow/stream/113489-new-members/topic/Binary.20addition/near/446475028\">said</a>:</p>\n<blockquote>\n<p>Hmmm... kind of feels like cheating. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>I'm sure a \"bignum\" API could be implemented directly in Lean. But I guess there's bigger fish to fry.</p>\n</blockquote>\n<p>There is a series of Lean types that have special representation in the type theory and/or compiler, there isn't really something to be gained from making these things explicit in Lean and sometimes it's also just straight up impossible</p>",
        "id": 446476963,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1719178534
    },
    {
        "content": "<p>Well, one thing to be gained would be a smaller TCB. But lean has other priorities, and there are alternative ways to eliminate this from the TCB (although they are not likely in the near term)</p>",
        "id": 446750103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719277127
    },
    {
        "content": "<p>this video by Prof. Buzzard seems related.<br>\n<a href=\"https://www.youtube.com/watch?v=9f7WQkKd6x0\">https://www.youtube.com/watch?v=9f7WQkKd6x0</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"9f7WQkKd6x0\" href=\"https://www.youtube.com/watch?v=9f7WQkKd6x0\"><img src=\"https://uploads.zulipusercontent.net/9da377ef57d592482ec3725decdf894787b74e0d/68747470733a2f2f692e7974696d672e636f6d2f76692f39663757516b4b643678302f64656661756c742e6a7067\"></a></div>",
        "id": 446858811,
        "sender_full_name": "cairunze cairunze",
        "timestamp": 1719316303
    }
]