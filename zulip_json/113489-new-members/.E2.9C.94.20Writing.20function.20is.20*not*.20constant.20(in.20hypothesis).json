[
    {
        "content": "<p>Is it preferable to write it using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.const#doc\">docs#Function.const</a>, i.e. <code>hf :  ¬ ∃ c, f = Function.const c</code>, or just writing out the equivalent logical statement: ¬ (∃ c, ∀, f x = c)?</p>",
        "id": 438388918,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1715613667
    },
    {
        "content": "<p>Or \\ex x y, f x ≠ f y</p>",
        "id": 438392073,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715614545
    },
    {
        "content": "<p>Ah yes, that is definitely better</p>",
        "id": 438393511,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1715615003
    },
    {
        "content": "<p>I'm an idiot</p>",
        "id": 438393519,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1715615006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> has marked this topic as resolved.</p>",
        "id": 438394959,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715615433
    },
    {
        "content": "<p>No, it is a good question - there are often many \"clearly equivalent\" ways to state a problem in lean, but not all ways are equally easy to work with, and it's often only experience or trying it that lets you figure out which one is best</p>",
        "id": 438410559,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715620410
    },
    {
        "content": "<p>Adding to the list of phrasings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">not_constant</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nontrivial</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_constant_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">not_constant</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">not_constant</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"n\">use</span><span class=\"bp\">!</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 438420423,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715623798
    }
]