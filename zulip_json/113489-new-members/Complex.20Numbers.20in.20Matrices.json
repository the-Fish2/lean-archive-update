[
    {
        "content": "<p>I am trying to get into proving identities concerning matrices and complex numbers and walked into quite a weird issue. This code works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Hadamard</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Identity</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">HadamardSquared</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"bp\">•</span> <span class=\"n\">Hadamard</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">Identity</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Hadamard</span><span class=\"o\">,</span> <span class=\"n\">Identity</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Matrix.mul_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>As in, it simplifies to !![1, 0; 0, 1] and RFL is able to see that they are equivalent, while this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">vecHeadOfIMul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vecHead</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">vecHead</span><span class=\"o\">,</span> <span class=\"n\">Matrix.smul_apply</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">vecTailOfIMul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vecHead</span> <span class=\"o\">(</span><span class=\"n\">vecTail</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">vecTail</span><span class=\"o\">,</span> <span class=\"n\">Matrix.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">vecHead</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">OnePlusOneEqTwo</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">ComplexHadamard</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">I</span><span class=\"bp\">;</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CIdentity</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ComplexHadamardSquared</span> <span class=\"o\">:</span> <span class=\"n\">ComplexHadamard</span> <span class=\"bp\">•</span> <span class=\"n\">ComplexHadamard</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">CIdentity</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ComplexHadamard</span><span class=\"o\">,</span> <span class=\"n\">CIdentity</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Matrix.mul_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">vecHeadOfIMul</span><span class=\"o\">,</span> <span class=\"n\">vecTailOfIMul</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Matrix.smul_apply</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- rfl does not work due to the ℂ type</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>also does give back !![1, 0; 0, 1], but <code>rfl</code> now doesn't work anymore. I am confident it is because the numbers used now are of the \\C type instead of \\Z, but I do not know how to deal with that yet. Any suggestions?</p>",
        "id": 421636759,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1707997933
    },
    {
        "content": "<p>Yes, <code>rfl</code> is basically useless for complex numbers. Let me have a look, but in general <code>norm_num</code> can handle explicit equalities between complex numbers.</p>",
        "id": 421640877,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707999499
    },
    {
        "content": "<p>Also, can you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? With all the imports and stuff</p>",
        "id": 421641070,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707999577
    },
    {
        "content": "<p>Thank you, Riccardo, <code>norm_num</code> actually works in my case. Do you happen to know whether I can use it for square root things, as well? I'd love to make my Hadamard normalised. Here's a MWE of the previous thing, btw. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">QuantumGates</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Hadamard</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Identity</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">HadamardSquared</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"bp\">•</span> <span class=\"n\">Hadamard</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">Identity</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Hadamard</span><span class=\"o\">,</span> <span class=\"n\">Identity</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Matrix.mul_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">vecHeadOfIMul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vecHead</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">vecHead</span><span class=\"o\">,</span> <span class=\"n\">Matrix.smul_apply</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">vecTailOfIMul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vecHead</span> <span class=\"o\">(</span><span class=\"n\">vecTail</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">vecTail</span><span class=\"o\">,</span> <span class=\"n\">Matrix.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">vecHead</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ComplexHadamard</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">I</span><span class=\"bp\">;</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CIdentity</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ComplexHadamardSquared</span> <span class=\"o\">:</span> <span class=\"n\">ComplexHadamard</span> <span class=\"bp\">•</span> <span class=\"n\">ComplexHadamard</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">CIdentity</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ComplexHadamard</span><span class=\"o\">,</span> <span class=\"n\">CIdentity</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Matrix.mul_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">vecHeadOfIMul</span><span class=\"o\">,</span> <span class=\"n\">vecTailOfIMul</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Matrix.smul_apply</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- rfl does not work due to the ℂ type, thank you to Riccardo Brasca for the suggestion of using norm_num</span>\n    <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 421642043,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1707999904
    },
    {
        "content": "<p>And is it possible to automatically simplify these vecTail and vecHead parts?</p>",
        "id": 421642335,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1707999989
    },
    {
        "content": "<p>No, <code>norm_num</code> currently does not handle square roots. There are ideas around, but nothing concrete yet.</p>",
        "id": 421643729,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708000426
    },
    {
        "content": "<p>I am not sure I understand your question. A few comments: first of all I get two errors in the code you posted above, when writing a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> please try to post code without errors (unless the question is why there is an error): <code>sorry</code> are of course fine, no problem in asking how to replace them with a proof. Also, you redefine the identity matrix, but you can use <code>(1 : Matrix (Fin 2) (Fin 2))</code> and use the existent API.</p>",
        "id": 421644602,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708000717
    },
    {
        "content": "<p>Thanks, Yaël. I'll have to follow the development on that, then. </p>\n<p>Strange, I didn't get any errors in my own environment in VS Code. If I did, I would have fixed them on my end first, of course.<br>\nI am not quite sure how you intended me to use <code>(1 : Matrix (Fin 2) (Fin 2))</code>, to my mind it feels incomplete, requiring \\Z after the second Fin 2. Do you intend for me to replace the Identity usage in my theorems (e.g. <code>HadamardSquared</code>) with this usage, or my definition of Identity?</p>\n<p>Thank you for the help, I appreciate it :)</p>",
        "id": 421648067,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1708001905
    },
    {
        "content": "<p>Indeed Riccardo meant <code>(1 : Matrix (Fin 2) (Fin 2) ℤ)</code>. You can use it anywhere you would have used <code>CIdentity</code></p>",
        "id": 421648843,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708002132
    },
    {
        "content": "<p>Ops, sorry</p>",
        "id": 421649252,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708002272
    },
    {
        "content": "<p>No worries. I don't get working code substituting this, sadly. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Hadamard</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">HadamardSquared</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"bp\">•</span> <span class=\"n\">Hadamard</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Hadamard</span><span class=\"o\">]</span>  <span class=\"c1\">-- This gives me the goal: of ![![1, 1], ![1, -1]] • of ![![1, 1], ![1, -1]] = 2 • 1</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Matrix.mul_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>As annotated in the code, somehow, this notation is replaced with a single number instead of the I matrix. Is this intended behaviour?</p>",
        "id": 421650988,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1708002822
    },
    {
        "content": "<p>The number <em>is</em> the I matrix</p>",
        "id": 421651557,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708002988
    },
    {
        "content": "<p>Oh, huh. That will get some taking use to. <br>\nThe code doesn't solve the goal anymore—it now gets stuck at the goal <code>of ![![2, 0], ![0, 2]] = 2</code> when I replace <code>rfl</code> with <code>norm_num</code>. Do I need to do something to allow comparison between <code>![![2, 0], ![0, 2]]</code> and <code>!![2, 0; 0, 2]</code>?</p>",
        "id": 421652802,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1708003430
    },
    {
        "content": "<p>You shouldn't use <code>![![2, 0], ![0, 2]]</code> as a matrix. That's a tuple of tuples, not a matrix. <code>!![2, 0; 0, 2]</code> is the correct syntax for matrices</p>",
        "id": 421653018,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708003515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, do your reflection lemmas cover <code>of ![![2, 0], ![0, 2]] = !![2, 0; 0, 2]</code> and <code>!![2, 0; 0, 2] = 2</code>?</p>",
        "id": 421653137,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708003561
    },
    {
        "content": "<p>In the meantime we should add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ofNat_fin_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">n.AtLeastTwo</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">no_index</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>",
        "id": 421653364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708003636
    },
    {
        "content": "<p>That's what is generated by the simp, though. Not sure how I'd go about altering that, to be frank.</p>",
        "id": 421653388,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1708003645
    },
    {
        "content": "<p>(Pr incoming)</p>",
        "id": 421653413,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708003653
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10592\">#10592</a></p>",
        "id": 421654012,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708003876
    },
    {
        "content": "<p>Why are you using <code>•</code> instead of <code>*</code>?</p>",
        "id": 421654123,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708003919
    },
    {
        "content": "<p>And maybe <code>2 : Matrix...</code> is the matrix you want (but you should check it's not the matrix full of <code>2</code>)</p>",
        "id": 421654232,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708003946
    },
    {
        "content": "<p>Ah ok, it's eric's PR</p>",
        "id": 421654303,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708003972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"691918\">@Javernus</span> you can add lemmas like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Hadamard_apply</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"n\">j</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hadamard</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Hadamard_apply11</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hadamard</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Hadamard_apply01</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hadamard</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>so that <code>simp</code> becomes more powerful on your matrix.</p>",
        "id": 421654526,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708004054
    },
    {
        "content": "<p>For example this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Hadamard</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Hadamard_apply</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"n\">j</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hadamard</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Hadamard_apply11</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hadamard</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Hadamard_apply01</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hadamard</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">HadamardSquared</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"bp\">•</span> <span class=\"n\">Hadamard</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span>\n    <span class=\"bp\">·</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">mul_apply</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">mul_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>works (but it is not very elegant)</p>",
        "id": 421654691,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708004113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Complex.20Numbers.20in.20Matrices/near/421653137\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>, do your reflection lemmas cover <code>of ![![2, 0], ![0, 2]] = !![2, 0; 0, 2]</code></p>\n</blockquote>\n<p>This is a syntactic tautology</p>\n<blockquote>\n<p>and <code>!![2, 0; 0, 2] = 2</code>?</p>\n</blockquote>\n<p>No, but adding a <code>diagonalᵣ</code> to <code>Data.Matrix.Reflection</code> would be an easy project</p>",
        "id": 421654786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708004158
    },
    {
        "content": "<p>Is it really a tautology? Don't they have different types?</p>",
        "id": 421656943,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708004890
    },
    {
        "content": "<p>I think the • solved an issue for me once and I ended up replacing the rest of the * with it to avoid the issue, but I may have forgotten the initial issue. It seems to have no effect anymore.</p>",
        "id": 421656983,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1708004904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Complex.20Numbers.20in.20Matrices/near/421656943\">said</a>:</p>\n<blockquote>\n<p>Is it really a tautology? Don't they have different types?</p>\n</blockquote>\n<p>Watch out for the <code>of</code> in the LHS</p>",
        "id": 421657327,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708005030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Complex.20Numbers.20in.20Matrices/near/421654691\">said</a>:</p>\n<blockquote>\n<p>For example this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Hadamard</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Hadamard_apply</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"n\">j</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hadamard</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Hadamard_apply11</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hadamard</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Hadamard_apply01</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hadamard</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">HadamardSquared</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"bp\">•</span> <span class=\"n\">Hadamard</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">I</span> <span class=\"n\">j</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span>\n    <span class=\"bp\">·</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">mul_apply</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">mul_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>works (but it is not very elegant)</p>\n</blockquote>\n<p>I found this to work only when adding <code>&lt;;&gt; norm_num</code> at the end of both fin_cases. Does anyone know why I needed this while Riccardo did not?</p>",
        "id": 421657395,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1708005057
    },
    {
        "content": "<p>Relatedly, we're missing the pretty-printer that hides <code>of</code> in the goal view</p>",
        "id": 421657424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708005066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"691918\">Javernus</span> <a href=\"#narrow/stream/113489-new-members/topic/Complex.20Numbers.20in.20Matrices/near/421657395\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Complex.20Numbers.20in.20Matrices/near/421654691\">said</a>:</p>\n<blockquote>\n<p>For example this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Hadamard</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Hadamard_apply</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"n\">j</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hadamard</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Hadamard_apply11</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hadamard</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Hadamard_apply01</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hadamard</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">HadamardSquared</span> <span class=\"o\">:</span> <span class=\"n\">Hadamard</span> <span class=\"bp\">•</span> <span class=\"n\">Hadamard</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">I</span> <span class=\"n\">j</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span>\n    <span class=\"bp\">·</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">mul_apply</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">mul_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>works (but it is not very elegant)</p>\n</blockquote>\n<p>I found this to work only when adding <code>&lt;;&gt; norm_num</code> at the end of both fin_cases. Does anyone know why I needed this while Riccardo did not?</p>\n</blockquote>\n<p>This is weird, it works on <a href=\"http://live.lean-lang.org\">live.lean-lang.org</a></p>",
        "id": 421661251,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708006259
    },
    {
        "content": "<p>Did you replace <code>ℤ</code> by <code>ℂ</code>?</p>",
        "id": 421661534,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708006335
    },
    {
        "content": "<p>No, I copied the code verbatim. I am on v0.0.127 for the lean extension with version 4.5.0-rc1 of lean installed on my system.</p>",
        "id": 421666202,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1708007567
    },
    {
        "content": "<p>I can see it work on that website, though. Strange.</p>",
        "id": 421667501,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1708007937
    },
    {
        "content": "<p>Updating to stable, maybe that helps.</p>",
        "id": 421669409,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1708008403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Complex.20Numbers.20in.20Matrices/near/421653137\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>, do your reflection lemmas cover<code>!![2, 0; 0, 2] = 2</code>?</p>\n</blockquote>\n<p>Actually, yes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">etaExpand_eq</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 421671239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708008820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Complex.20Numbers.20in.20Matrices/near/421653413\">said</a>:</p>\n<blockquote>\n<p>(Pr incoming)</p>\n</blockquote>\n<p>Would you mind sharing a link once this is in PR? Then I can watch it :)</p>",
        "id": 421688463,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1708013256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Complex.20Numbers.20in.20Matrices/near/421654012\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10592\">#10592</a></p>\n</blockquote>\n<p>I already did :)</p>",
        "id": 421688629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708013293
    },
    {
        "content": "<p>I am so blind! Thank you very much :)</p>",
        "id": 421689516,
        "sender_full_name": "Jake Jongejans",
        "timestamp": 1708013542
    }
]