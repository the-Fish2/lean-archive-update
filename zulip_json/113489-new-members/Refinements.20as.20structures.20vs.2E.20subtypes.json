[
    {
        "content": "<p>I found it interesting that <code>Fin n</code> is represented as a structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span>  <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">isLt</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>And <code>NNReal</code> is represented as a <del>quotient</del> subtype:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">NNReal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>When would one pick one or the other kind of representation? Is there a good reason that <code>Fin</code> is not a <del>quotient</del> subtype, or that <code>NNReal</code> is not a structure?</p>",
        "id": 424789709,
        "sender_full_name": "Will Crichton",
        "timestamp": 1709610697
    },
    {
        "content": "<p>(I don't have an answer to your question but I would use the term \"subtype\" instead of \"quotient\")</p>",
        "id": 424790113,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709611040
    },
    {
        "content": "<p>(it's a good question though)</p>",
        "id": 424790143,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709611077
    },
    {
        "content": "<p><code>Fin</code> used to be a subtype, but it was changed at some point; the git history hopefully holds the answer.</p>",
        "id": 424801049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709618373
    },
    {
        "content": "<p>Hmm I went back 8 years and could only find a structure-based definition of <code>Fin</code>, unless there was a different <code>Fin</code> definition (like the inductive <code>Fin2</code>).</p>",
        "id": 424806790,
        "sender_full_name": "Will Crichton",
        "timestamp": 1709622030
    },
    {
        "content": "<p>It was changed in <a href=\"https://github.com/leanprover-community/lean3/pull/761\">leanprover-community/lean3#761</a></p>",
        "id": 424846641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709637406
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Turning.20.60Fin.60.20into.20a.20structure.20again/near/295831170\">Here</a>'s the discussion</p>",
        "id": 424846901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709637506
    },
    {
        "content": "<p>One reason for this is that a lot of the instances for <code>NNReal</code> are derived from generic ones about the subtype of nonnegative elements in ordered rings, or variations thereof. In contrast, there is no such general framework that would apply to <code>Fin</code>. </p>\n<p>Moreover, making <code>NNReal</code> a subtype gives automatic access to all the subtype API.</p>",
        "id": 424889537,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1709651161
    }
]