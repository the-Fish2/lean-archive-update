[
    {
        "content": "<p>Hi, I'm stuck on this level - <a href=\"https://adam.math.hhu.de/#/g/leanprover-community/NNG4/world/LessOrEqual/level/8\">https://adam.math.hhu.de/#/g/leanprover-community/NNG4/world/LessOrEqual/level/8</a></p>\n<p>Anyone can help? I've tried googling / using ChatGPT, but nothing seems to work.</p>",
        "id": 422540516,
        "sender_full_name": "CR",
        "timestamp": 1708488295
    },
    {
        "content": "<p>For clarity, the theorem I need to prove is - le_total: If x and y are numbers, then either x≤y or y≤x.</p>\n<p>I can use the following: <br>\napply, cases, contrapose, decide, exact, induction, intro, left, rfl, right, rw, simp, simp_add, symm, triv, use</p>\n<p>and the following inequalities: <br>\nle_antisymm, le_refl, le_succ_self, le_trans, le_zero, zero_le</p>\n<p>and these peano: <br>\nis_zero_succ, is_zero_zero, pred_succ, succ_inj, succ_ne_succ, succ_ne_zero, zero_ne_succ</p>",
        "id": 422540994,
        "sender_full_name": "CR",
        "timestamp": 1708488700
    },
    {
        "content": "<p>Yeah that's a tricky one. Don't I give hints for it? What happens if you follow them?</p>\n<p>The thing which springs to mind is induction of course. In the inductive step you'll have to use the c such that y=x+c and do a case split on it.</p>",
        "id": 422541694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708489244
    },
    {
        "content": "<p>Hi Kevin, Great to hear from you. <br>\nYes there are hints, but I am still stuck. </p>\n<p>I tried 'use c', but got the following error - unknown identifier 'c'</p>",
        "id": 422541915,
        "sender_full_name": "CR",
        "timestamp": 1708489413
    },
    {
        "content": "<p>If you use numbers which aren't in orange then you'll get that error</p>",
        "id": 422542031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708489482
    },
    {
        "content": "<p>I've done this so far:  <br>\ninduction y with d hd<br>\nright<br>\napply zero_le x<br>\ncases hd with h1 h2<br>\nleft</p>\n<p>and I'm stuck there.  The current goal is <br>\nObjects:<br>\nxd: ℕ<br>\nAssumptions:<br>\nh1: x ≤ d<br>\nGoal:<br>\nx ≤ succ d</p>",
        "id": 422542213,
        "sender_full_name": "CR",
        "timestamp": 1708489604
    },
    {
        "content": "<p>That looks good, get the c from h1 and use succ c for the goal. Or use transitivity directly</p>",
        "id": 422542405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708489710
    },
    {
        "content": "<p>Thanks! finally got it, I realise I didn't really understand what cases did. <br>\nI'm not sure I get it completely still, but I managed to do the level.</p>",
        "id": 422544610,
        "sender_full_name": "CR",
        "timestamp": 1708491099
    },
    {
        "content": "<p><code>x ≤ d</code> is internally encoded as <code>∃ c : ℕ, x + c = d</code>, and (here as an example) you would to take out of it that value for <code>c</code>, as well as a proof of <code>x + c = d</code>.<br>\nHistorically in Lean 3 this was done using the <code>cases</code> tactic (and that's also still the case in NNG), and the command for that looks like <code>cases h1 with c xc_eq_d</code>.<br>\nNowadays in Lean 4 we would usually do <code>let ⟨c, xc_eq_d⟩ := h1</code>; there are a few other slight differences between NNG and Lean 4 code you'd find in the wild, but <code>cases</code> is the biggest one.</p>",
        "id": 422605303,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708518253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"693293\">CR</span> has marked this topic as resolved.</p>",
        "id": 422705735,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708549928
    }
]