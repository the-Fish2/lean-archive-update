[
    {
        "content": "<p>For my Lean-learning project axiomatic geometry i have the following \"postulated\" types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">lies_on</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">line</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span>    <span class=\"s2\">\" ∈ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lies_on</span>\n</code></pre></div>\n<p>But the notation definition fails:</p>\n<blockquote>\n<p>unknown identifier 'lies_on' at quotation precheck; you can use <code>set_option quotPrecheck false</code> to disable this check.</p>\n</blockquote>",
        "id": 433533893,
        "sender_full_name": "Moritz R",
        "timestamp": 1713277244
    },
    {
        "content": "<p>It works with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span>    <span class=\"s2\">\" ∈ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lies_on</span>\n</code></pre></div>",
        "id": 433538214,
        "sender_full_name": "Moritz R",
        "timestamp": 1713278452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"602461\">Moritz R</span> has marked this topic as resolved.</p>",
        "id": 433539681,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713278871
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"602461\">Moritz R</span> has marked this topic as unresolved.</p>",
        "id": 433541210,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713279267
    },
    {
        "content": "<p>The Notation doesnt work correctly. The following inserts a sorry instead of the notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Logic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"c1\">-- Declare the types and the relation first</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">lies_on</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">line</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span>    <span class=\"s2\">\" ∈ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lies_on</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">line</span><span class=\"o\">,</span> <span class=\"n\">lies_on</span> <span class=\"n\">A</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span>  <span class=\"n\">line_of</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">I1</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">⊢ {point line : Type} →</span>\n<span class=\"cm\">  {lies_on : point → line → Prop} →</span>\n<span class=\"cm\">    {I1 : ∀ (A : point), point → ∃ l, lies_on A l ∧ sorryAx Prop true} → point → point → line</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span> <span class=\"n\">line_of</span>\n</code></pre></div>",
        "id": 433541862,
        "sender_full_name": "Moritz R",
        "timestamp": 1713279444
    },
    {
        "content": "<p>Does <a href=\"#narrow/stream/270676-lean4/topic/local.20notation.20in.20variable\">this thread</a> help?</p>",
        "id": 433545712,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713280405
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Logic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"c1\">-- Declare the types and the relation first</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">lies_on</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">line</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- this option should help</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span>    <span class=\"s2\">\" ∈ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lies_on</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">line</span><span class=\"o\">,</span> <span class=\"n\">lies_on</span> <span class=\"n\">A</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span>  <span class=\"n\">line_of</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">I1</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">)</span>\n\n<span class=\"c1\">--  no `sorry`s</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">line_of {point line : Type} {lies_on : point → line → Prop} {I1 : ∀ (A B : point), ∃ l, lies_on A l ∧ lies_on B l}</span>\n<span class=\"cm\">  (A B : point) : line</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span> <span class=\"n\">line_of</span>\n</code></pre></div>",
        "id": 433546119,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713280517
    },
    {
        "content": "<p>yes, thank you, i didnt find it in my search</p>",
        "id": 433547068,
        "sender_full_name": "Moritz R",
        "timestamp": 1713280778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"602461\">Moritz R</span> has marked this topic as resolved.</p>",
        "id": 433547113,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713280788
    },
    {
        "content": "<p>No worries: I only found it because I remembered about it.</p>",
        "id": 433547924,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713281036
    }
]