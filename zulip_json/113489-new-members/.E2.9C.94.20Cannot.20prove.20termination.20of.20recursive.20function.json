[
    {
        "content": "<p>Hello, I am trying to define a recursive function on a wrapper type around List Nat by following <a href=\"https://lean-lang.org/theorem_proving_in_lean4/induction_and_recursion.html#well-founded-recursion-and-induction\">this section</a> of the lean4 theorem proving manual. A minimal working example would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">where</span>\n  <span class=\"n\">list</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">not_empty</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NonEmptyList.tail</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.list.tail</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"o\">:=</span>\n  <span class=\"n\">NonEmptyList.mk</span> <span class=\"n\">l.list.tail</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NonEmptyList.length.F</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">l2.list.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.list.length</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.list.tail</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"k\">then</span>\n    <span class=\"mi\">1</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">l.tail</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">List.length</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">tail</span>\n      <span class=\"n\">aesop</span>\n    <span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">NonEmptyList.length</span> <span class=\"o\">:=</span> <span class=\"n\">WellFounded.fix</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"bp\">∘</span> <span class=\"n\">NonEmptyList.list</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">wf</span> <span class=\"n\">NonEmptyList.length.F</span>\n</code></pre></div>\n<p>However, this definition of NonEmptyList.length is very difficult to unfold, therefore I want to prove termination using decreasing_by:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">NonEmptyList.length</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.list.tail</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"k\">then</span>\n    <span class=\"mi\">1</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">(</span><span class=\"n\">l.tail</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">termination_by</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"bp\">∘</span> <span class=\"n\">NonEmptyList.list</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>However, the goal inside the decreasing_by block is unprovable. After the simp_wf tactic, the goal becomes False but there is no inconsistency in the context. What causes this and how do I prove that this recursion terminates?</p>",
        "id": 426852632,
        "sender_full_name": "Raunak Chhatwal",
        "timestamp": 1710556578
    },
    {
        "content": "<p>I think your current <code>termination_by</code> is a constant (the result of composing those two functions) so is in fact not decreasing. Does <code>termination_by l.list.length</code> work?</p>",
        "id": 426861501,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1710565365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"681344\">Raunak Chhatwal</span> has marked this topic as resolved.</p>",
        "id": 426861961,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710565888
    },
    {
        "content": "<p>Yes, that works. That was a very subtle catch, thanks a lot!</p>",
        "id": 426861964,
        "sender_full_name": "Raunak Chhatwal",
        "timestamp": 1710565895
    }
]