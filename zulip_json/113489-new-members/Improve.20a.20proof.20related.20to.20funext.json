[
    {
        "content": "<p>Hi I proved a theorem kind of related to <code>funext</code>, <code>cast</code> and <code>Heq</code>, which the background maybe from caregory theory:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">heq_funext3.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">β</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">a''</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"n\">b''</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b'</span> <span class=\"n\">b''</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"n\">b''</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span>\n            <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">p</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">p</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n      <span class=\"o\">:</span> <span class=\"n\">HEq</span> <span class=\"n\">h</span> <span class=\"n\">i</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">funext</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span>\n    <span class=\"n\">apply</span> <span class=\"n\">funext</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y</span>\n    <span class=\"n\">exact</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">cases</span> <span class=\"n\">k</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a'</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a''</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span>\n  <span class=\"n\">apply</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 435774247,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1714238093
    },
    {
        "content": "<p>any way to improve it? the repeated <code>funext</code> seems a little ugly</p>",
        "id": 435774336,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1714238181
    },
    {
        "content": "<p>You're looking for the <code>ext</code> tactic</p>",
        "id": 435779744,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714241906
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">heq_funext3.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">β</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">a''</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"n\">b''</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b'</span> <span class=\"n\">b''</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"n\">b''</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span>\n            <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">p</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">p</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n      <span class=\"o\">:</span> <span class=\"n\">HEq</span> <span class=\"n\">h</span> <span class=\"n\">i</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n    <span class=\"n\">apply</span> <span class=\"n\">q</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">cast_eq</span><span class=\"o\">,</span> <span class=\"n\">heq_eq_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">ext</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">apply</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 435779747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714241909
    },
    {
        "content": "<p>Ah I don’t know ext can be used in this way. Thank you very much Eric. Your proof is extremely clean<span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 435801377,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1714264942
    },
    {
        "content": "<p>Here's essentially the same proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">heq_funext3.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">β</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">a''</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"n\">b''</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b'</span> <span class=\"n\">b''</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"n\">b''</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span>\n            <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">p</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">p</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n      <span class=\"o\">:</span> <span class=\"n\">HEq</span> <span class=\"n\">h</span> <span class=\"n\">i</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">funext₂</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">j</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">heq_eq_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">apply</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 435804403,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714266776
    },
    {
        "content": "<p>Eric's <code>obtain rfl : f = g := ...</code> trick is neat. I guess you can write <code>obtain rfl : f = g := funext₂ q</code> as well.</p>",
        "id": 435804435,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714266829
    },
    {
        "content": "<p>By the way, the <code>ext</code> tactic's original purpose (or at least I think so, I don't actually know) is to do <code>apply funext; intro</code> for you repeatedly, but it's generalized to handle all sorts of extentionality arguments.</p>",
        "id": 435804514,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714266911
    },
    {
        "content": "<p>Wow this is extremely nice too. Yeah <code>ext</code> and the related tactics are much more powerful than I expected <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 435804798,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1714267218
    },
    {
        "content": "<p>Isn't there also a <code>funext</code> tactic, which does that without any extra features? Or was that finally removed?</p>",
        "id": 435876567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714312790
    }
]