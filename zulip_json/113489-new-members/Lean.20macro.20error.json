[
    {
        "content": "<p>I am trying to define a very rough/bad version of Dirac's notation in Lean just to get familiar with macros, however I encountered an error that I don't understand.</p>\n<p>Here is the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"| \"</span> <span class=\"n\">term</span> <span class=\"s2\">\"⟩\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"c1\">-- Ket</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"⟨\"</span> <span class=\"n\">term</span> <span class=\"s2\">\" |\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"c1\">-- Bra</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"⟨\"</span> <span class=\"n\">term</span> <span class=\"s2\">\" |\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"⟩\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"c1\">-- Inner product</span>\n\n<span class=\"sd\">/-- The set of pure Qudits of dimension d -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Qudit</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">ψ</span> <span class=\"bp\">|</span> <span class=\"n\">ψ</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">ψ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">⟩)</span><span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(⟨</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"bp\">ᴴ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(⟨</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">⟩)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(⟨</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"o\">⟩</span> <span class=\"bp\">*</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>The error happens in the 2nd last line at the <code>)</code> right after <code>$bra:term |</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unexpected</span> <span class=\"n\">token</span> <span class=\"sc\">')'</span><span class=\"bp\">;</span> <span class=\"n\">expected</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>I think I followed the macro guide, what is the problem here?</p>",
        "id": 418757534,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706582307
    },
    {
        "content": "<p>This is a precedence level problem. When it sees <code>|</code>, I think it's trying to start parsing a Ket (or maybe an absolute value)</p>\n<p>This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"| \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟩\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"c1\">-- Ket</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟨\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\" |\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"c1\">-- Bra</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟨\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟩\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"c1\">-- Inner product</span>\n\n<span class=\"sd\">/-- The set of pure Qudits of dimension d -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Qudit</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">ψ</span> <span class=\"bp\">|</span> <span class=\"n\">ψ</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">ψ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">⟩)</span><span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(⟨</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"bp\">ᴴ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(⟨</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">⟩)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(⟨</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"o\">⟩</span> <span class=\"bp\">*</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 418764505,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706588026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean.20macro.20error/near/418764505\">said</a>:</p>\n<blockquote>\n<p>This is a precedence level problem. When it sees <code>|</code>, I think it's trying to start parsing a Ket (or maybe an absolute value)</p>\n<p>This seems to work:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"| \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟩\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"c1\">-- Ket</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟨\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\" |\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"c1\">-- Bra</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟨\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟩\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"c1\">-- Inner product</span>\n\n<span class=\"sd\">/-- The set of pure Qudits of dimension d -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Qudit</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">ψ</span> <span class=\"bp\">|</span> <span class=\"n\">ψ</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">ψ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">⟩)</span><span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(⟨</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"bp\">ᴴ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(⟨</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">⟩)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(⟨</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"o\">⟩</span> <span class=\"bp\">*</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">⟩)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks! The difference I see is <code>syntax</code> -&gt; <code>syntax:arge</code> and <code>term</code> -&gt; <code>term:arg</code>, will try to check it out!</p>",
        "id": 418765304,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706588611
    },
    {
        "content": "<p>Interesting, I try to update the definition of <code>Qudit</code>, it still doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Qudit2</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">ψ</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">ψ</span> <span class=\"bp\">|</span> <span class=\"n\">ψ</span> <span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Before trying the new def of <code>Qudit</code>, I corrected several minor mistakes above that I made:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"| \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟩\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"c1\">-- Ket</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟨\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\" |\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"c1\">-- Bra</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟨\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟩\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"c1\">-- Inner product</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">⟩)</span><span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(⟨</span> <span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"bp\">ᴴ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(⟨</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">⟩)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"o\">)</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 418765757,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706588931
    },
    {
        "content": "<p><del>You may need to add some explicit precedences on the various literals.</del></p>\n<p>Could you post your current <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 419157056,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706752495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> </p>\n<p>This is my current <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"| \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟩\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"c1\">-- Ket</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟨\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\" |\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"c1\">-- Bra</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟨\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟩\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"c1\">-- Inner product</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">⟩)</span><span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(⟨</span> <span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"bp\">ᴴ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(⟨</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">⟩)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">bra</span><span class=\"o\">)</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ket</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- Example 1</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">⟨</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"o\">⟩</span> <span class=\"c1\">-- This line works.</span>\n\n<span class=\"c1\">-- Example 2</span>\n<span class=\"kd\">def</span> <span class=\"n\">Qudit</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"bp\">//</span> <span class=\"o\">⟨</span><span class=\"n\">ψ</span> <span class=\"bp\">|</span> <span class=\"n\">ψ</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"c1\">-- This line gives an error: \"unexpected token '}'; expected '⟩'\"</span>\n</code></pre></div>\n<p>Indeed, lack of explicit precedences might be the reason...</p>",
        "id": 419163889,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706756681
    }
]