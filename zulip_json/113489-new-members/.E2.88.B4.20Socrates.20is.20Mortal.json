[
    {
        "content": "<p>This is a question about aesthetics and the natural ways to encode things. I think what I'm doing is hopefully fine, but it feels a little hacky.</p>\n<p>So I've been coding up a murder mystery in Lean as a fun/gentle introduction to Predicates and Relations and such. </p>\n<p>Here's a bit of a minimal example of my setup:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- identifier stops detectives from doing case analysis over every object ☺</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Object</span>\n  <span class=\"bp\">|</span> <span class=\"n\">socrates</span>\n  <span class=\"bp\">|</span> <span class=\"n\">identifier</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Object</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Object</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">existsPred</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Object</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">True</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">man</span> <span class=\"o\">:=</span> <span class=\"n\">existsPred.choose</span>\n<span class=\"kd\">def</span> <span class=\"n\">mortal</span> <span class=\"o\">:=</span> <span class=\"n\">existsPred.choose</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">man</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">mortal</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">man</span> <span class=\"n\">socrates</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">mortal</span> <span class=\"n\">socrates</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span> <span class=\"n\">socrates</span> <span class=\"n\">h₂</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">man</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">mortal</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">man</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mortal</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">isMan</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">use</span> <span class=\"n\">m</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"n\">m</span> <span class=\"n\">isMan</span>\n</code></pre></div>\n<p>Some of the stuff I'm not sure about: </p>\n<ol>\n<li><code>existsPred.choose</code> should be fine, right? It's my way of saying \"You're not allowed to look at the definition of this predicate, you can only use what's given in the hypotheses\".  I'm guessing there's a more idiomatic way to go about this.</li>\n<li><code>inductive Object</code> sort of mimics real life  denotative semantics. Socrates is the object denoted by that label. The other approach might be to make <code>def Object := ℕ</code> since there are countably many objects in a murder mystery. Then the example would need <code>socrates : Object</code> as an hypothesis. I could even just drop Object altogether and just use one of the universes instead... though my feeling is that something like <code>man ℕ</code> should be a type error instead of a proposition.</li>\n</ol>",
        "id": 424285366,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1709311405
    },
    {
        "content": "<blockquote>\n<p>existsPred.choose should be fine, right? It's my way of saying \"You're not allowed to look at the definition of this predicate, you can only use what's given in the hypotheses\"</p>\n</blockquote>\n<p>If all you want is to use predicates without using their definitions, why not just declare them as <code>axiom</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">man</span> <span class=\"o\">:</span> <span class=\"n\">Object</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">mortal</span> <span class=\"o\">:</span> <span class=\"n\">Object</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>With respect to your second question, without knowing much about what you intend to do,  if you want there to be a distinguished kind of <code>Object</code> named <code>socrates</code>, which is distinct from all other kinds of <code>Object</code>, you should use inductive. If you don't need such a distinction and just want a countable set of objects you can probably use <code>def Object := ℕ</code>.</p>",
        "id": 424297513,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1709315201
    },
    {
        "content": "<p>there's also <code>opaque</code>... I think that might be more appropriate</p>",
        "id": 424298231,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709315478
    },
    {
        "content": "<p>this is how I would do it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"n\">opaque</span> <span class=\"n\">Object</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"n\">opaque</span> <span class=\"n\">man</span> <span class=\"o\">:</span> <span class=\"n\">Object</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">opaque</span> <span class=\"n\">mortal</span> <span class=\"o\">:</span> <span class=\"n\">Object</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">man</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">mortal</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">man</span> <span class=\"n\">socrates</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">mortal</span> <span class=\"n\">socrates</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span> <span class=\"n\">socrates</span> <span class=\"n\">h₂</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">man</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">mortal</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">man</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mortal</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">isMan</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">use</span> <span class=\"n\">m</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"n\">m</span> <span class=\"n\">isMan</span>\n</code></pre></div>",
        "id": 424298940,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709315755
    },
    {
        "content": "<p>AH! opaque is an awesome solution</p>",
        "id": 424304120,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1709317857
    }
]