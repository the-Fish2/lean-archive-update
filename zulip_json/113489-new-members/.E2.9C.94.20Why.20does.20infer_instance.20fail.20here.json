[
    {
        "content": "<p>Hi, I'm a bit surprised about the following: the first works (as T35Space extends T1Space and CompletelyRegularSpace, and T0Space + CompletelyRegularSpace give T1Space). The second doesn't, and so do the third and fourth. I would've guessed that it should be able to infer those instances, (in particular the fourth one), could someone explain intuitively why this fails? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompletelyRegularSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">T0Space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">T35Space</span> <span class=\"n\">X</span>\n <span class=\"o\">:=</span> <span class=\"n\">T35Space.mk</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompletelyRegularSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">T1Space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">T35Space</span> <span class=\"n\">X</span>\n <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompletelyRegularSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">T0Space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">T35Space</span> <span class=\"n\">X</span>\n <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">T1Space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n  <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompletelyRegularSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">T1Space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">T35Space</span> <span class=\"n\">X</span>\n <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 421711678,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708020226
    },
    {
        "content": "<p>I assume that's because it would causes an instance loop, which was catastrophic in Lean 3, and is now mildly bad in Lean 4</p>",
        "id": 421715675,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708021735
    },
    {
        "content": "<p>Thank you! There is no trick to get this to work with infer_instance automatically? My approach for tracking the results in pi-base is now to just try to check if all results are formalized by doing ‘by infer_instance’ for each one, but if that doesn’t work, I’ll need to think of an alternative approach. Perhaps doing ‘.mk’ exactly in the cases of such loops would suffice?</p>",
        "id": 421716765,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708022140
    },
    {
        "content": "<p>Using <code>infer_instance</code> is not a scalable approach. You should rather use a json recording each declaration name.</p>",
        "id": 421717104,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708022256
    },
    {
        "content": "<p>Again, Eric's matrix cookbook formalisation repo is state of the art here</p>",
        "id": 421717231,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708022291
    },
    {
        "content": "<p>Okay! Thank you, I’ll try to look into that soon then!</p>",
        "id": 421717352,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708022345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> has marked this topic as resolved.</p>",
        "id": 421717402,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708022367
    },
    {
        "content": "<p>For what it is worth: on the subset of theorems in pi-base for which all involved spaces have been defined (and my naming algorithm gets the names right), I can close all of them for which we have some result in Mathlib by <code>:= by exact?</code> now, which is a nice intermediate way of dealing with this, until I know enough Lean programming to adopt Eric's code to this database.</p>",
        "id": 421817742,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708074590
    },
    {
        "content": "<p>Instead of <code>infer_instance</code>, you could try <code>by exact?</code>, which manages to find <code>T35Space.mk</code> since it runs through the whole library.</p>",
        "id": 421895859,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708101181
    },
    {
        "content": "<p>Yes, that’s what I’m doing now! Thank you’</p>",
        "id": 421896558,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708101376
    },
    {
        "content": "<p>Perhaps I should read all messages before responding :-)</p>",
        "id": 421897577,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708101704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Why.20does.20infer_instance.20fail.20here/near/421897577\">said</a>:</p>\n<blockquote>\n<p>Perhaps I should read all messages before responding :-)</p>\n</blockquote>\n<p>No worries, I appreciate the input anyway, it suggests that that approach is reasonable!</p>",
        "id": 421898561,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708102056
    },
    {
        "content": "<p>You might still miss some things here and there, but it <em>should</em> work to find all the non-<code>instance</code> instances out there in mathlib.</p>",
        "id": 421899662,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708102435
    }
]