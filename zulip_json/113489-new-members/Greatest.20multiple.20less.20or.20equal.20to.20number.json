[
    {
        "content": "<p>I want to compute the greatest multiple of <code>n</code> less or equal to <code>m</code>. And I find it surprisingly hard to proof the correctness of the result.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">greatestMultiple</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">greatestMultipleLt_greatest</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">greatestMultiple</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is there an easy proof for this?</p>",
        "id": 434301604,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1713511464
    },
    {
        "content": "<p>Here's one way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">greatestMultipleLt_greatest</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">greatestMultiple</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.mul_div_cancel'</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">greatestMultiple</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.mul_div_cancel'</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_sub_mod</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n    <span class=\"bp\">←</span> <span class=\"n\">Nat.div_eq_sub_mod_div</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.mul_le_mul_left</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.div_le_div_right</span> <span class=\"n\">hk</span>\n</code></pre></div>",
        "id": 434307958,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1713513506
    },
    {
        "content": "<p>Thank you. I think I underestimated the power of <code>rw</code> (opting for <code>simp</code> most of the time).</p>\n<p>Is there any trick how you found the relevent theorems? Did you just use loogle?</p>",
        "id": 434312953,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1713515137
    },
    {
        "content": "<p>I used a combination of Loogle, typing things like <code>Nat.div_le</code> and seeing what autocomplete suggests, and scrolling around in the div section of <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Nat/Defs.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Nat/Defs.html</a></p>",
        "id": 434314059,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1713515542
    },
    {
        "content": "<p>You know <code>grep</code>?. I found <code>grep -ri 'theorem.*some pattern' .lake/packages/mathlib/Mathlib |less</code> quite effective.</p>",
        "id": 434326178,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713519967
    },
    {
        "content": "<p>Are there times when this is more powerful than just using the API docs and searching there?</p>",
        "id": 434328982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713520884
    },
    {
        "content": "<p>One advantage might be that it's on your own machine</p>",
        "id": 434329197,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713520950
    },
    {
        "content": "<p>I often combine this with grep regexes, as well.</p>",
        "id": 434329267,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713520987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Gretest.20multiple.20less.20or.20equal.20to.20number/near/434328982\">said</a>:</p>\n<blockquote>\n<p>Are there times when this is more powerful than just using the API docs and searching there?</p>\n</blockquote>\n<p>For example, when you want context right away, instead of clicking on \"source\" in the API docs, then use <code>grep</code> with the <code>-C</code> option, like <code>grep -ir -C3 ...</code>.</p>",
        "id": 434331240,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713521710
    },
    {
        "content": "<p>Also, how would you find without <code>grep</code> where a specific theorem is <em>used</em>?</p>",
        "id": 434371981,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713536115
    },
    {
        "content": "<p>This specific information is stored in the <code>.ilean</code> files, so you could query it from within Lean. Try eg to click F2 on a declaration's name and rename it to <code>foo</code>. You will see that all occurrences within the library have been rewritten.</p>",
        "id": 434373389,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713536537
    }
]