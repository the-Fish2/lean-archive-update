[
    {
        "content": "<p>How do I create this type that's just <code>s</code> with the <code>hp</code> proof attached?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 439607166,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1716222105
    },
    {
        "content": "<p>What I want is something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">x.val</span><span class=\"o\">,</span> <span class=\"n\">hp</span> <span class=\"n\">x.val</span> <span class=\"n\">x.prop</span><span class=\"o\">⟩)</span> <span class=\"bp\">''</span> <span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">})</span>\n</code></pre></div>\n<p>But I was wondering if this construct exists already, similar to <code>Finset.attach</code> or something</p>",
        "id": 439609229,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1716222718
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Subtype.val</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>The hypothesis <code>hp</code> is not necessary for the definition.</p>",
        "id": 439609499,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1716222786
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 439610263,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1716223009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> has marked this topic as resolved.</p>",
        "id": 439610275,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716223013
    }
]