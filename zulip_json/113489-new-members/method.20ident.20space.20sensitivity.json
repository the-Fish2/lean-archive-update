[
    {
        "content": "<p>I do not understand the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- incorrect</span>\n<span class=\"c1\">-- errors</span>\n<span class=\"c1\">-- type mismatch</span>\n<span class=\"c1\">--   List.all as</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   (Nat → Bool) → Bool : Type</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   Bool : TypeLean 4</span>\n<span class=\"kd\">def</span> <span class=\"n\">method_without_space</span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">as.all</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- correct</span>\n<span class=\"kd\">def</span> <span class=\"n\">method_with_space</span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">as.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 424758723,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709591180
    },
    {
        "content": "<p>Why a space is needed after as.all</p>",
        "id": 424758751,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709591198
    },
    {
        "content": "<p>to apply a function you write the function name and then the arguments seperated by spaces</p>",
        "id": 424761107,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709592186
    },
    {
        "content": "<p>I see</p>",
        "id": 424761162,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709592214
    },
    {
        "content": "<p>So if not spaced, what will the compiler see it as? Maybe this is not an interesting question</p>",
        "id": 424761210,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709592237
    },
    {
        "content": "<p>i found this book very useful as a reference<a href=\"https://lean-lang.org/functional_programming_in_lean/getting-to-know/functions-and-definitions.html\">Functional Programming Book</a></p>",
        "id": 424761522,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709592360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466120\">Xiyu Zhai</span> <a href=\"#narrow/stream/113489-new-members/topic/method.20ident.20space.20sensitivity/near/424761210\">said</a>:</p>\n<blockquote>\n<p>So if not spaced, what will the compiler see it as? Maybe this is not an interesting question</p>\n</blockquote>\n<p>I also get the message: unexpected token '('; expected command, so i guess its simply not valid to omit the space</p>",
        "id": 424761784,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709592459
    },
    {
        "content": "<p>Oh, I didn't notice that<br>\nIt seems that type error and syntax error get mixed up and I only saw the type error.</p>",
        "id": 424762054,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709592586
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">List.all</span> <span class=\"n\">allocations</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">BareMetalMemoryAllocation</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"n\">TypeLean</span> <span class=\"mi\">4</span>\n<span class=\"n\">unexpected</span> <span class=\"n\">token</span> <span class=\"sc\">'('</span><span class=\"bp\">;</span> <span class=\"n\">expected</span> <span class=\"n\">commandLean</span> <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 424762145,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709592617
    },
    {
        "content": "<p>I would suggest it's better to have a original/derived error system. Only show those errors that are original.</p>",
        "id": 424762186,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709592649
    },
    {
        "content": "<p>In CPP, the error system is notorious because it's too hard to find the original one.</p>",
        "id": 424762232,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709592679
    },
    {
        "content": "<p>seeing only the type error would be indeed confusing<br>\nif youre using VSCode the Lean Info view shows 2 seperate messages in this case</p>",
        "id": 424763824,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709593558
    },
    {
        "content": "<p>Indeed I’m using Vscode</p>",
        "id": 424763985,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709593611
    },
    {
        "content": "<p>But I only see the type error if I’m not hovering my mouse over the ‘(‘</p>",
        "id": 424764046,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709593654
    },
    {
        "content": "<p>btw i think it just ignores the part after '('  for the type error, since  \"as.all\" has type (Nat → Bool) → Bool</p>",
        "id": 424764528,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709593916
    }
]