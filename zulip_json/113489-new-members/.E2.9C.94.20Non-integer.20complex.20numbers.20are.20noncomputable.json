[
    {
        "content": "<p>I got an error when trying to define simple complex numbers like <code>0.8 * I</code>.</p>\n<p>Here is the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test_state1</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"bp\">;</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"c1\">-- This works</span>\n<span class=\"kd\">def</span> <span class=\"n\">test_state2</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"c1\">-- This gives an error.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_comp</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>  <span class=\"bp\">*</span> <span class=\"n\">Complex.I</span> <span class=\"c1\">-- This also gives an error.</span>\n</code></pre></div>\n<p>The error is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">compile</span> <span class=\"kd\">definition</span><span class=\"o\">,</span> <span class=\"n\">consider</span> <span class=\"n\">marking</span> <span class=\"n\">it</span> <span class=\"n\">as</span> <span class=\"bp\">'</span><span class=\"kd\">noncomputable</span><span class=\"bp\">'</span> <span class=\"n\">because</span> <span class=\"n\">it</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"bp\">'</span><span class=\"n\">Complex.instField'</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">it</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">executable</span> <span class=\"n\">code</span>\n</code></pre></div>\n<p>Why are non-integer complex numbers noncomputable?</p>",
        "id": 417537583,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706047637
    },
    {
        "content": "<p>real number division is not computable because it has to decide equality to zero</p>",
        "id": 417538109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706047846
    },
    {
        "content": "<p>and division is used in the desugaring of non-integer real/complex number literals</p>",
        "id": 417538214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706047909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Non-integer.20complex.20numbers.20are.20noncomputable/near/417538214\">said</a>:</p>\n<blockquote>\n<p>and division is used in the desugaring of non-integer real/complex number literals</p>\n</blockquote>\n<p>Thanks!</p>\n<p>I guess the solution is just to mark it as <code>noncomputable</code>? I can still \"compute\" them in proofs, right?</p>",
        "id": 417538368,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706047967
    },
    {
        "content": "<p>Yes, that's correct</p>",
        "id": 417538978,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706048249
    },
    {
        "content": "<p>you can also put <code>noncomputable section</code> at the top of the file and then you don't have to worry about noncomputable markings</p>",
        "id": 417539456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706048473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671093\">Yunong Shi</span> has marked this topic as resolved.</p>",
        "id": 417539528,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706048517
    },
    {
        "content": "<p>This feels a bit wonky:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>  <span class=\"c1\">-- not computable</span>\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- computable</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- but they're equal by definition!</span>\n</code></pre></div>",
        "id": 417549364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706053762
    },
    {
        "content": "<p>I claim <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DivisionRing.toOfScientific#doc\">docs#DivisionRing.toOfScientific</a> should be refactored to consume only <code>RatCast</code></p>",
        "id": 417549490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706053822
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9947\">#9947</a> tries that out</p>",
        "id": 417549713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706053953
    }
]