[
    {
        "content": "<p><a href=\"/user_uploads/3121/MPe151kTiQUqDmp2s5OFW0am/image.png\">image.png</a><br>\nHow to prove something is true in \"#eval\" ?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/MPe151kTiQUqDmp2s5OFW0am/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/MPe151kTiQUqDmp2s5OFW0am/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">_h2_2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">*</span> <span class=\"n\">G1Perm</span> <span class=\"bp\">*</span> <span class=\"n\">F'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">permute</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n            <span class=\"o\">:=</span>\n            <span class=\"c1\">-- done -- 这个直接看计算结果就知道了。</span>\n            <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 426367297,
        "sender_full_name": "chenjulang",
        "timestamp": 1710343849
    },
    {
        "content": "<p>Can you provide an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 426368220,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710344100
    },
    {
        "content": "<p>Of course</p>",
        "id": 426368314,
        "sender_full_name": "chenjulang",
        "timestamp": 1710344124
    },
    {
        "content": "<p>In general, the answer to \"how can I use <code>#eval</code> to prove something?\" is: you can't.</p>",
        "id": 426368322,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710344129
    },
    {
        "content": "<p>But sometimes there are other things you can use in its place.</p>",
        "id": 426368349,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710344138
    },
    {
        "content": "<p>Oh</p>",
        "id": 426368354,
        "sender_full_name": "chenjulang",
        "timestamp": 1710344139
    },
    {
        "content": "<p>For example?</p>",
        "id": 426368478,
        "sender_full_name": "chenjulang",
        "timestamp": 1710344167
    },
    {
        "content": "<p>e.g., <code>norm_num</code>, <code>decide</code></p>",
        "id": 426368521,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710344179
    },
    {
        "content": "<p>It depends on the problem at hand.</p>",
        "id": 426368536,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710344184
    },
    {
        "content": "<p>My question is exactly : \"In #eval some Prop A is true, why can't A proved by rfl?\"</p>",
        "id": 426368663,
        "sender_full_name": "chenjulang",
        "timestamp": 1710344220
    },
    {
        "content": "<p>I'll try</p>",
        "id": 426368715,
        "sender_full_name": "chenjulang",
        "timestamp": 1710344234
    },
    {
        "content": "<p>Again, we'll need an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> to diagnose your problem.</p>",
        "id": 426368781,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710344247
    },
    {
        "content": "<p>OK</p>",
        "id": 426368813,
        "sender_full_name": "chenjulang",
        "timestamp": 1710344256
    },
    {
        "content": "<p>#eval something that is true means something is DecidableEq in Lean, but that doesn't mean  it's PropositionEq. I think rfl may not always work in problems like this. (Though it work well in proving <code>1 + 1 = 2</code>)</p>",
        "id": 426369355,
        "sender_full_name": "Yicheng Tao",
        "timestamp": 1710344411
    },
    {
        "content": "<p>I see</p>",
        "id": 426369435,
        "sender_full_name": "chenjulang",
        "timestamp": 1710344440
    },
    {
        "content": "<p>Maybe you should check the term's definition?</p>",
        "id": 426369439,
        "sender_full_name": "Yicheng Tao",
        "timestamp": 1710344442
    },
    {
        "content": "<p>I'll try to give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> later</p>",
        "id": 426369573,
        "sender_full_name": "chenjulang",
        "timestamp": 1710344490
    },
    {
        "content": "<p><code>#eval</code> can't be (unconditionally) trusted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">ohno</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">isFalse</span> <span class=\"n\">lcProof</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">implemented_by</span> <span class=\"n\">ohno</span><span class=\"kd\">]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">decide</span> <span class=\"n\">True</span>  <span class=\"c1\">-- false</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">decide</span> <span class=\"n\">True</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 426376739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710346423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 426385532,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710348891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20eval.20is.20true.2C.20how.20to.20use.3F/near/426376739\">said</a>:</p>\n<blockquote>\n<p><code>#eval</code> can't be (unconditionally) trusted:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">ohno</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">isFalse</span> <span class=\"n\">lcProof</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">implemented_by</span> <span class=\"n\">ohno</span><span class=\"kd\">]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">decide</span> <span class=\"n\">True</span>  <span class=\"c1\">-- false</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">decide</span> <span class=\"n\">True</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>what if no \"unsafe\" exists in my code?</p>",
        "id": 426385673,
        "sender_full_name": "chenjulang",
        "timestamp": 1710348937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20eval.20is.20true.2C.20how.20to.20use.3F/near/426368663\">said</a>:</p>\n<blockquote>\n<p>My question is exactly : \"In #eval some Prop A is true, why can't A proved by rfl?\"</p>\n</blockquote>\n<p>There are many propositions which aren't equality.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"mi\">200</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">100</span> <span class=\"c1\">-- true</span>\n<span class=\"c1\">-- Can't be solved with rfl</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"mi\">200</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>\n<p>There are many equalities which are not definitionally true.</p>\n<p>Example from Natural Number Game:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 426390346,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1710350238
    },
    {
        "content": "<p>Thanks</p>",
        "id": 426390548,
        "sender_full_name": "chenjulang",
        "timestamp": 1710350295
    },
    {
        "content": "<p>In #eval some Prop A is true, why can't A proved by rfl or decide or norm_num (notice:None \"unsafe\" exists)?</p>",
        "id": 426390749,
        "sender_full_name": "chenjulang",
        "timestamp": 1710350373
    },
    {
        "content": "<p>I'll be the next to ask for an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 426391393,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710350570
    },
    {
        "content": "<p>Check this sorry:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Equiv</span>\n<span class=\"kn\">open</span> <span class=\"n\">Equiv</span> <span class=\"n\">Perm</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span><span class=\"n\">reprPrec</span> <span class=\"bp\">∘</span> <span class=\"n\">Equiv.toFun</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mk.injEq</span> <span class=\"n\">a.toFun</span> <span class=\"n\">a.invFun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">b.toFun</span> <span class=\"n\">b.invFun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">▸</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">PieceState</span> <span class=\"o\">(</span><span class=\"n\">pieces</span> <span class=\"n\">orientations</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">permute</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">pieces</span><span class=\"o\">)</span>\n  <span class=\"n\">orient</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">pieces</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">orientations</span> <span class=\"c1\">-- 这里应该是增加量，不是绝对量</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ps_mul</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">a2.permute</span> <span class=\"bp\">*</span> <span class=\"n\">a1.permute</span> <span class=\"c1\">-- *先运算右，再运算左。</span>\n      <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a2.orient</span> <span class=\"bp\">∘</span> <span class=\"n\">a1.permute</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a1.orient</span> <span class=\"c1\">-- ∘是右边的函数作用到左边的对象</span>\n    <span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">a2.permute</span> <span class=\"bp\">*</span> <span class=\"n\">a1.permute</span>\n    <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a2.orient</span> <span class=\"bp\">∘</span> <span class=\"n\">a1.permute</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a1.orient</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">permute_mul</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"n\">a2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">permute</span> <span class=\"bp\">=</span> <span class=\"n\">a2.permute</span> <span class=\"bp\">*</span> <span class=\"n\">a1.permute</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">orient_mul</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"n\">a2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">orient</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a2.orient</span> <span class=\"bp\">∘</span> <span class=\"n\">a1.permute</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a1.orient</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ps_mul_assoc</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">),</span>\n  <span class=\"n\">ps_mul</span> <span class=\"o\">(</span><span class=\"n\">ps_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">ps_mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">ps_mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_mul</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- simp only [invFun_as_coe]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">PieceState.mk.injEq</span><span class=\"o\">]</span> <span class=\"c1\">-- 两同类型对象相等，等价于，各分量相等。</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Perm.mul_def</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Equiv.trans_assoc</span><span class=\"o\">]</span> <span class=\"c1\">-- A.trans B 指的是映射先看A，再看B</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_left_inj</span><span class=\"o\">]</span>\n      <span class=\"n\">rfl</span>\n    <span class=\"n\">done</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ps_one_mul</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">),</span>\n  <span class=\"n\">ps_mul</span> <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">a</span>  <span class=\"bp\">=</span>  <span class=\"n\">a</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_one</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_id</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">done</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ps_mul_one</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">),</span>\n<span class=\"n\">ps_mul</span> <span class=\"n\">a</span> <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">one_symm</span><span class=\"o\">,</span> <span class=\"n\">coe_one</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_id</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">zero_comp</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ps_inv</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span>\n  <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">ps</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">ps.permute</span><span class=\"bp\">⁻¹</span>\n      <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">ps.orient</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ps.permute</span><span class=\"bp\">⁻¹</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"o\">(</span><span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">permute</span> <span class=\"n\">orient</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">permute</span><span class=\"bp\">⁻¹</span>\n        <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">orient</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">permute</span><span class=\"bp\">⁻¹</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ps_mul_left_inv</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">),</span>\n  <span class=\"n\">ps_mul</span> <span class=\"o\">(</span><span class=\"n\">ps_inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_inv</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">invFun_as_coe</span><span class=\"o\">,</span> <span class=\"n\">PieceState.mk.injEq</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_right_inv</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a.permute</span><span class=\"bp\">⁻¹.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"n\">a.permute</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">a.orient</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">a.permute</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">a.permute.symm</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a.orient</span><span class=\"o\">)</span>\n      <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">comp_symm_eq</span> <span class=\"n\">a.permute</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a.orient</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">a.orient</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"bp\">⇑</span><span class=\"n\">a.permute</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">neg_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">neg_eq_iff_add_eq_zero.mp</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">PieceGroup</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">ps_mul</span> <span class=\"c1\">-- 第一种运算，记为*</span>\n    <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">ps_mul_assoc</span> <span class=\"c1\">-- *的结合律</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"c1\">-- *的单位1</span>\n    <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">ps_one_mul</span> <span class=\"c1\">-- 1 * ? = ?</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">ps_mul_one</span> <span class=\"c1\">-- ? * 1 = ?</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">ps_inv</span> <span class=\"c1\">-- (?)⁻¹ = ps_inv p o</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">ps_mul_left_inv</span> <span class=\"c1\">-- (?)⁻¹ * (?) = 单位1</span>\n  <span class=\"o\">}</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">CornerType</span> <span class=\"o\">:=</span> <span class=\"n\">PieceState</span> <span class=\"mi\">8</span> <span class=\"mi\">3</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">EdgeType</span> <span class=\"o\">:=</span> <span class=\"n\">PieceState</span> <span class=\"mi\">12</span> <span class=\"mi\">2</span>\n\n\n<span class=\"n\">abbrev</span> <span class=\"n\">RubiksSuperType</span> <span class=\"o\">:=</span> <span class=\"n\">CornerType</span> <span class=\"bp\">×</span> <span class=\"n\">EdgeType</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"c1\">-- 这里如何文字上理解也是个问题，输入旧位置，得到新位置？</span>\n<span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Perm</span> <span class=\"n\">α</span>\n<span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">list</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">List.formPerm</span> <span class=\"n\">list</span>\n<span class=\"kd\">def</span> <span class=\"n\">Orient</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pairs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">((</span><span class=\"n\">Fin</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">o</span><span class=\"o\">)))</span>\n<span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">o</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">pairs.lookup</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Solved</span>\n<span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">},</span>\n      <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n    <span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span>\n    <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span>\n    <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"n\">Orient</span> <span class=\"mi\">8</span> <span class=\"mi\">3</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)]},</span>\n    <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"n\">Orient</span> <span class=\"mi\">12</span> <span class=\"mi\">2</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span> <span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">1</span> <span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">1</span> <span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">1</span> <span class=\"o\">)]}</span>\n  <span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span>\n    <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"n\">Orient</span> <span class=\"mi\">8</span> <span class=\"mi\">3</span> <span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)]},</span>\n    <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span> <span class=\"o\">,</span><span class=\"mi\">11</span> <span class=\"o\">,</span><span class=\"mi\">7</span> <span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"n\">Orient</span> <span class=\"mi\">12</span> <span class=\"mi\">2</span> <span class=\"o\">[(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">1</span> <span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">11</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)]}</span>\n  <span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span>\n    <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span> <span class=\"o\">,</span><span class=\"mi\">5</span> <span class=\"o\">,</span><span class=\"mi\">4</span> <span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"n\">Orient</span> <span class=\"mi\">8</span> <span class=\"mi\">3</span> <span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)]},</span>\n    <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">,</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span>  <span class=\"n\">Orient</span> <span class=\"mi\">12</span> <span class=\"mi\">2</span> <span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)]}</span>\n  <span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span>\n    <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">6</span> <span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"n\">Orient</span> <span class=\"mi\">8</span> <span class=\"mi\">3</span> <span class=\"o\">[(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)]},</span>\n    <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">cyclePieces</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">,</span><span class=\"mi\">6</span> <span class=\"o\">],</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"n\">Orient</span> <span class=\"mi\">12</span> <span class=\"mi\">2</span> <span class=\"o\">[(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)]}</span>\n  <span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">U2</span> <span class=\"o\">:=</span> <span class=\"n\">U</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">D2</span> <span class=\"o\">:=</span> <span class=\"n\">D</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">R2</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">L2</span> <span class=\"o\">:=</span> <span class=\"n\">L</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">F2</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">B2</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">U'</span> <span class=\"o\">:=</span> <span class=\"n\">U</span><span class=\"bp\">⁻¹</span>\n<span class=\"kd\">def</span> <span class=\"n\">D'</span> <span class=\"o\">:=</span> <span class=\"n\">D</span><span class=\"bp\">⁻¹</span>\n<span class=\"kd\">def</span> <span class=\"n\">R'</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"bp\">⁻¹</span>\n<span class=\"kd\">def</span> <span class=\"n\">L'</span> <span class=\"o\">:=</span> <span class=\"n\">L</span><span class=\"bp\">⁻¹</span>\n<span class=\"kd\">def</span> <span class=\"n\">F'</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">⁻¹</span>\n<span class=\"kd\">def</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"bp\">⁻¹</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">G1Perm_element</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span>\n  <span class=\"o\">:=</span> <span class=\"n\">R'</span> <span class=\"bp\">*</span> <span class=\"n\">D</span> <span class=\"bp\">*</span> <span class=\"n\">D</span> <span class=\"bp\">*</span> <span class=\"n\">R</span> <span class=\"bp\">*</span> <span class=\"n\">B'</span> <span class=\"bp\">*</span> <span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"n\">B</span>\n<span class=\"kd\">def</span> <span class=\"n\">G1Perm</span> <span class=\"o\">:</span> <span class=\"n\">RubiksSuperType</span>\n  <span class=\"o\">:=</span> <span class=\"n\">G1Perm_element</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">*</span> <span class=\"n\">G1Perm</span> <span class=\"bp\">*</span> <span class=\"n\">F'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">permute</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"c1\">-- true</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Test001</span>\n<span class=\"o\">:(</span><span class=\"n\">F</span> <span class=\"bp\">*</span> <span class=\"n\">G1Perm</span> <span class=\"bp\">*</span> <span class=\"n\">F'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">permute</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- rfl</span>\n  <span class=\"c1\">-- decide</span>\n  <span class=\"c1\">-- norm_num</span>\n  <span class=\"c1\">-- apply?</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 426393325,
        "sender_full_name": "chenjulang",
        "timestamp": 1710351148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20eval.20is.20true.2C.20how.20to.20use.3F/near/426391393\">said</a>:</p>\n<blockquote>\n<p>I'll be the next to ask for an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n</blockquote>\n<p>Check this <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, a little bit long.</p>",
        "id": 426393388,
        "sender_full_name": "chenjulang",
        "timestamp": 1710351178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as unresolved.</p>",
        "id": 426393631,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710351254
    },
    {
        "content": "<p>For <code>decide</code>, the error</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>tactic 'decide' failed for proposition\n  (F * G1Perm * F').1.permute = 1\nsince its 'Decidable' instance reduced to\n  ⋯ ▸ inferInstance\nrather than to the 'isTrue' constructor.\n</code></pre></div>\n<p>is indicating that reducing the <code>Decidable</code> instance got stuck. Furthermore, it got stuck on <code>▸</code>.</p>\n<p>This indicates that someone defined a <code>Decidable</code> instance using <code>▸</code>, or using tactics, using <code>simp</code> or <code>rw</code>.</p>",
        "id": 426394735,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710351630
    },
    {
        "content": "<p><code>#eval</code> throws out everything that's not necessary for computation, including types and proofs, and <code>Eq.rec</code> (<code>▸</code>) has nothing to do so it's no problem.</p>\n<p><code>decide</code> does not throw these things out, and <code>Eq.rec</code> can sometimes make it get stuck.</p>",
        "id": 426395115,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710351760
    },
    {
        "content": "<p>There was no need to define <code>instance (n : Nat) : DecidableEq (Perm (Fin n))</code>. You can verify that <code>instance (n : Nat) : DecidableEq (Perm (Fin n)) := inferInstance</code> works, so it can be deleted.</p>\n<p>This is the source of <code>decide</code> not working. Once that's gone, you can use <code>set_option maxRecDepth 2000 in decide</code> as the proof.</p>",
        "id": 426395857,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710351992
    },
    {
        "content": "<p>Benefits a lot</p>",
        "id": 426396384,
        "sender_full_name": "chenjulang",
        "timestamp": 1710352141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 426396405,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710352149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"665035\">@chenjulang</span> notice how by providing an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> you got an answer to your question in 14 minutes instead of several hours. This is not a criticism, just a reminder for future reference. I can't promise the turn around will always be that fast, but it was going to be hard for any of us to diagnose your problem without it.</p>",
        "id": 426408208,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710356523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20eval.20is.20true.2C.20how.20to.20use.3F/near/426394735\">said</a>:</p>\n<blockquote>\n<p>For <code>decide</code>, the error</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>tactic 'decide' failed for proposition\n  (F * G1Perm * F').1.permute = 1\nsince its 'Decidable' instance reduced to\n  ⋯ ▸ inferInstance\nrather than to the 'isTrue' constructor.\n</code></pre></div>\n<p>is indicating that reducing the <code>Decidable</code> instance got stuck. Furthermore, it got stuck on <code>▸</code>.</p>\n<p>This indicates that someone defined a <code>Decidable</code> instance using <code>▸</code>, or using tactics, using <code>simp</code> or <code>rw</code>.</p>\n</blockquote>\n<p>Can we make the error message say this?</p>",
        "id": 426411428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710357748
    },
    {
        "content": "<p>Maybe even it could deduce which instance the bad <code>Eq.mp</code>, or whatever the arrow is, came from</p>",
        "id": 426411542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710357798
    },
    {
        "content": "<p>It's something I've been thinking about. In one version of this feature, I tried making it reduce all <code>Decidable</code> instances that appear in the expression before reporting, but it was mis-coded so I didn't include it. (And also, unfolding things like it does, you can lose out on this context of what's the bad instance.)</p>\n<p>We could make a version of whnf that keeps track of which head definitions were unfolded at least (it wouldn't give <em>all</em> definitions though, since some definitions in arguments might incidentally be unfolded during the unfolding), and report those that are decidable instances.</p>",
        "id": 426418089,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710360385
    }
]