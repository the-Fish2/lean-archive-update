[
    {
        "content": "<p>Hello! I've just started working through \"Theorem Proving in LEAN 4\". I've done the exercises in chapter 3, but I often feel like my solutions are quite ugly. For example, I felt like I should be able to move the lambda <code>fun f</code> to the left of the <code>:=</code> in this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">nq</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">nq</span>\n</code></pre></div>\n<p>but I couldn't figure out the syntax. I'm also curious if there is better syntax for some of the other exercises, perhaps using features like <code>match</code>? For example, this is very ugly but works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">fwd</span><span class=\"o\">,</span> <span class=\"n\">bwd</span> <span class=\"o\">⟩</span>\n  <span class=\"n\">where</span>\n    <span class=\"n\">fwd</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span> <span class=\"o\">⟩</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hr</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hr</span> <span class=\"o\">⟩</span> <span class=\"o\">)</span>\n    <span class=\"n\">bwd</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span> <span class=\"n\">hpq</span><span class=\"o\">,</span> <span class=\"n\">hpr</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hpq.elim</span> <span class=\"n\">Or.inl</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hpr.elim</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">⟨</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hr</span> <span class=\"o\">⟩</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>I'd love some suggestions on how these could be written idiomatically - has anyone done tidy, \"best-practice\" solutions to chapter exercises?</p>",
        "id": 437099843,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1714904774
    },
    {
        "content": "<p>Moving <code>f</code> left of the colon:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">nq</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">nq</span>\n</code></pre></div>",
        "id": 437102305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714907075
    },
    {
        "content": "<p>I don't know about “idiomatic”, but you could golf the first example to something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nq</span> <span class=\"o\">:</span><span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">flip</span> <span class=\"n\">absurd</span> <span class=\"n\">nq</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>I'm not too experienced with Lean myself, but in general it is good practice to choose a representation that brings across the idea of what you're trying to program/prove and that can be rather subjective.<br>\nAt a quick glance, I don't see another way to use matching in your second example than in <code>bwd</code>. One could argue that it maintains symmetry  with <code>fwd</code> if you squint and disregard the <code>|</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">fwd</span><span class=\"o\">,</span> <span class=\"n\">bwd</span> <span class=\"o\">⟩</span>\n  <span class=\"n\">where</span>\n    <span class=\"n\">fwd</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span> <span class=\"o\">⟩</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hr</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hr</span> <span class=\"o\">⟩</span> <span class=\"o\">)</span>\n    <span class=\"n\">bwd</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">hpq</span><span class=\"o\">,</span> <span class=\"n\">hpr</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hpq.elim</span> <span class=\"n\">Or.inl</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hpr.elim</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">⟨</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hr</span> <span class=\"o\">⟩</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 437102331,
        "sender_full_name": "Tom Kranz",
        "timestamp": 1714907104
    },
    {
        "content": "<p>For these logic goals I am not sure you can do much better than what you have, although of course tactics blast through results like this instantly, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n</code></pre></div>\n<p>(although probably you'll have to import mathlib to get these goodies)</p>",
        "id": 437102441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714907190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20do.20I.20make.20my.20code.20less.20ugly.3F/near/437102441\">said</a>:</p>\n<blockquote>\n<p>For these logic goals I am not sure you can do much better than what you have, although of course tactics blast through results like this instantly, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n</code></pre></div>\n<p>(although probably you'll have to import mathlib to get these goodies)</p>\n</blockquote>\n<p>This makes sense, I was hoping to avoid tactics for now though just to get a better sense of the basic language features</p>",
        "id": 437102497,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1714907259
    },
    {
        "content": "<p>OK! Here's a language feature:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">fwd</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span> <span class=\"o\">⟩</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hr</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hr</span> <span class=\"o\">⟩</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>You don't need the <code>Or</code> in <code>Or.inl</code> because Lean knows that the type of the output is <code>Or X Y</code> so will supply <code>Or</code> for you if you just start with <code>.</code>.</p>",
        "id": 437102679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714907435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"712641\">Tom Kranz</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20do.20I.20make.20my.20code.20less.20ugly.3F/near/437102331\">said</a>:</p>\n<blockquote>\n<p>I don't know about “idiomatic”, but you could golf the first example to something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nq</span> <span class=\"o\">:</span><span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">flip</span> <span class=\"n\">absurd</span> <span class=\"n\">nq</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>I'm not too experienced with Lean myself, but in general it is good practice to choose a representation that brings across the idea of what you're trying to program/prove and that can be rather subjective.<br>\nAt a quick glance, I don't see another way to use matching in your second example than in <code>bwd</code>. One could argue that it maintains symmetry  with <code>fwd</code> if you squint and disregard the <code>|</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">fwd</span><span class=\"o\">,</span> <span class=\"n\">bwd</span> <span class=\"o\">⟩</span>\n  <span class=\"n\">where</span>\n    <span class=\"n\">fwd</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span> <span class=\"o\">⟩</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hr</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hr</span> <span class=\"o\">⟩</span> <span class=\"o\">)</span>\n    <span class=\"n\">bwd</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">hpq</span><span class=\"o\">,</span> <span class=\"n\">hpr</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hpq.elim</span> <span class=\"n\">Or.inl</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hpr.elim</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">⟨</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hr</span> <span class=\"o\">⟩</span> <span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ah, this is super helpful- I couldn't figure out a way to get the <code>\\&lt; hpq, hpr \\&gt;</code> to the left of the <code>:=</code>! Am I right in thinking that <code>|</code> is basically the same as Haskell's guards?</p>",
        "id": 437102703,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1714907469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> awesome, that's way better, thanks!</p>",
        "id": 437102840,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1714907636
    },
    {
        "content": "<p>IIRC, guards in Haskell worked on Bools, while the guard-like pipes in Lean are explicitly just shorthand for pattern matching on not-yet introduced arguments/premises.</p>",
        "id": 437102914,
        "sender_full_name": "Tom Kranz",
        "timestamp": 1714907693
    },
    {
        "content": "<p>A tutorial with \"N ways to write the same proof\" might be worth having</p>",
        "id": 437103756,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714908553
    },
    {
        "content": "<p>Something like <a href=\"https://willamette.edu/~fruehr/haskell/evolution.html\">Evolution of a Haskell Programmer</a> but not as a joke :-)</p>",
        "id": 437103981,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1714908776
    },
    {
        "content": "<p>Oh interesting, I just found out you can use | to make branches more explicit too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">fwd</span><span class=\"o\">,</span> <span class=\"n\">bwd</span> <span class=\"o\">⟩</span>\n  <span class=\"n\">where</span>\n    <span class=\"n\">fwd</span> <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">hr</span><span class=\"o\">)</span>\n    <span class=\"n\">bwd</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hqr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hqr.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">hq</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hr</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Is there a way to nest the matches? I want to match the argument of <code>Or.inl</code> in <code>fwd</code>.</p>",
        "id": 437124385,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1714920285
    },
    {
        "content": "<p>This way feels a bit nicer to me because it makes the branching structure very explicit</p>",
        "id": 437124540,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1714920319
    },
    {
        "content": "<p>Why not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mp</span> <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span>\n     <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n     <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">hr</span><span class=\"o\">)</span>\n  <span class=\"n\">mpr</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hqr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hqr.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">hq</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hr</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>?</p>",
        "id": 437128380,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714921236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20do.20I.20make.20my.20code.20less.20ugly.3F/near/437128380\">said</a>:</p>\n<blockquote>\n<p>Why not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mp</span> <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span>\n     <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n     <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">hr</span><span class=\"o\">)</span>\n  <span class=\"n\">mpr</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hqr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hqr.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">hq</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hr</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>?</p>\n</blockquote>\n<p>How do you know to use the names <code>mp</code> and <code>mpr</code>?</p>",
        "id": 437271115,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1715004677
    },
    {
        "content": "<p>That's the names of the fields of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Iff#doc\">docs#Iff</a></p>",
        "id": 437271219,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715004708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20do.20I.20make.20my.20code.20less.20ugly.3F/near/437271219\">said</a>:</p>\n<blockquote>\n<p>That's the names of the fields of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Iff#doc\">docs#Iff</a></p>\n</blockquote>\n<p>Is there a way to get this information using <code>#check</code> or something? (i.e., without using a web browser!)</p>",
        "id": 437675806,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1715182503
    },
    {
        "content": "<p>If you don't know what something is at all, your editor's \"Go to definition\" command is usually a good bet, or you can try <code>#check</code>, <code>#print</code>, <code>#show</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">Iff</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>structure Iff : Prop → Prop → Prop\nnumber of parameters: 2\nconstructor:\nIff.intro : ∀ {a b : Prop}, (a → b) → (b → a) → (a ↔ b)\nfields:\nmp : a → b\nmpr : b → a\n</code></pre></div>",
        "id": 437682371,
        "sender_full_name": "Richard Copley",
        "timestamp": 1715184518
    },
    {
        "content": "<p>Also if you type <code>example : (p ∨ q) ∨ r ↔ p ∨ (q ∨ r) where</code>, lean will tell you <code>fields missing: 'mp', 'mpr'</code>.</p>",
        "id": 437683567,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1715184869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"715809\">Paul Wilson</span> has marked this topic as resolved.</p>",
        "id": 437813994,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715259111
    }
]