[
    {
        "content": "<p>Hello. I am trying to define the typeclass, which characterises a set with an additional operation that picks a member of type <code>α</code>. I have the following lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">Sel</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">γ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">outParam</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">γ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">Set_Choose</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">γ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Membership</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">γ</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">EmptyCollection</span><span class=\"w\"> </span><span class=\"n\">γ</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Sel</span><span class=\"w\"> </span><span class=\"n\">γ</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">not_empty_implies_in</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">γ</span><span class=\"o\">}:</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">emptyCollection</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">Sel</span><span class=\"bp\">.</span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">γ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">lookup</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">γ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">delete</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">Lawful_Map</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">γ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"n\">γ</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">delete_imp_not_in</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">lookup</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">delete</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span>\n\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">Graph</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">adjacency</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">vertex</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">neighb</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set_Choose</span><span class=\"w\"> </span><span class=\"n\">vertex</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n</code></pre></div>\n<p>I get the following error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">synthesize</span>\n<span class=\"w\">  </span><span class=\"n\">Sel</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">623</span><span class=\"w\"> </span><span class=\"n\">vertex</span>\n<span class=\"n\">use</span><span class=\"w\"> </span><span class=\"ss\">`set_option</span><span class=\"w\"> </span><span class=\"n\">diagnostics</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"bp\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">diagnostic</span><span class=\"w\"> </span><span class=\"n\">information</span>\n</code></pre></div>\n<p>I have tried to play around with the annotations and type parameters, by making some explicit and some implicit.</p>\n<p>Another question: Is it possible to set this option in the VSCode extension?</p>",
        "id": 443503158,
        "sender_full_name": "David Wang",
        "timestamp": 1717868750
    },
    {
        "content": "<p>Lean can't figure out what <code>γ</code> should be in <code>[@Set_Choose α γ _ _ _]</code>, and also it's failing because <code>Set_Choose</code> expects there to be an instance of <code>Sel γ α</code> (which it can't find because you haven't declared any instances, and also it doesn't know what <code>γ</code> is and uses <code>γ</code> to determinant <code>α</code>)</p>",
        "id": 443503809,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1717869070
    },
    {
        "content": "<p>When you write <code>Set_Choose vertex</code> in <code>neighb : Set_Choose vertex</code>, what's your intended value of <code>γ</code>?</p>",
        "id": 443503963,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1717869138
    },
    {
        "content": "<p>On the second point. Is there a way to reason about typeclasses without providing any instance?</p>",
        "id": 443503966,
        "sender_full_name": "David Wang",
        "timestamp": 1717869140
    },
    {
        "content": "<p>The intended value of <code>\\gamma</code> is <code>Set vertex</code></p>",
        "id": 443504078,
        "sender_full_name": "David Wang",
        "timestamp": 1717869184
    },
    {
        "content": "<p>You can assume an instance exists, so eg prove something of the form <code>example mylemma (α γ) [Sel γ α] : True := by trivial</code></p>",
        "id": 443504086,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1717869191
    },
    {
        "content": "<p>But it sounds like you have a specific <code>Sel (Set α) α</code> instance you want to use</p>",
        "id": 443504137,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1717869224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20inference.20and.20polymorphism/near/443504086\">said</a>:</p>\n<blockquote>\n<p>You can assume an instance exists, so eg prove something of the form <code>example mylemma (α γ) [Sel γ α] : True := by trivial</code></p>\n</blockquote>\n<p>Thank you. I have no specific instance.</p>",
        "id": 443504283,
        "sender_full_name": "David Wang",
        "timestamp": 1717869289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"727336\">David Wang</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20inference.20and.20polymorphism/near/443504078\">said</a>:</p>\n<blockquote>\n<p>The intended value of <code>\\gamma</code> is <code>Set vertex</code></p>\n</blockquote>\n<p>That makes sense. Unfortunately lean no has no idea this is what you want, there's nowhere in the code that pins down <code>γ</code> as this. Is <code>Set_Choose</code> supposed to be for sets or for an arbitrary <code>γ</code>? If it's the latter it should probably be an explicit argument, because there's no way to infer it's value from just <code>Set_Choose α</code></p>",
        "id": 443504302,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1717869300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20inference.20and.20polymorphism/near/443504302\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"727336\">David Wang</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20inference.20and.20polymorphism/near/443504078\">said</a>:</p>\n<blockquote>\n<p>The intended value of <code>\\gamma</code> is <code>Set vertex</code></p>\n</blockquote>\n<p>That makes sense. Unfortunately lean no has no idea this is what you want, there's nowhere in the code that pins down <code>γ</code> as this. Is <code>Set_Choose</code> supposed to be for sets or for an arbitrary <code>γ</code>? If it's the latter it should probably be an explicit argument</p>\n</blockquote>\n<p>The naming is perhaps confusing. Set_Choose should characterise a collection, which has the membership operation and can be empty, and if it is not empty has an operation which picks an arbitrary value from it. I have no idea how I would implement it for Set, but for Lists, <code>sel</code> could be <code>head</code></p>",
        "id": 443504650,
        "sender_full_name": "David Wang",
        "timestamp": 1717869480
    },
    {
        "content": "<p>Right, then <code>γ</code> should definitely be explicit. If you write <code>Set_Choose α</code>, how is Lean (or the reader) supposed to know you're talking about <code>Set α</code> or about <code>List α</code>?</p>",
        "id": 443504755,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1717869540
    },
    {
        "content": "<p>And then additionally you need to implement an instance of <code>[Sel (Set α) α]</code> or assume one exists</p>",
        "id": 443504776,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1717869566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20inference.20and.20polymorphism/near/443504755\">said</a>:</p>\n<blockquote>\n<p>Right, then <code>γ</code> should definitely be explicit. If you write <code>Set_Choose α</code>, how is Lean (or the reader) supposed to know you're talking about <code>Set α</code> or about <code>List α</code>?</p>\n</blockquote>\n<p>They are not. They should be able to plug in the type later on.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20inference.20and.20polymorphism/near/443504776\">said</a>:</p>\n<blockquote>\n<p>And then additionally you need to implement an instance of <code>[Sel (Set α) α]</code> or assume one exists</p>\n</blockquote>\n<p>This is what I needed, I think.</p>",
        "id": 443504959,
        "sender_full_name": "David Wang",
        "timestamp": 1717869648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"727336\">David Wang</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20inference.20and.20polymorphism/near/443504959\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20inference.20and.20polymorphism/near/443504755\">said</a>:</p>\n<blockquote>\n<p>Right, then <code>γ</code> should definitely be explicit. If you write <code>Set_Choose α</code>, how is Lean (or the reader) supposed to know you're talking about <code>Set α</code> or about <code>List α</code>?</p>\n</blockquote>\n<p>They are not. They should be able to plug in the type later on.<br>\n</p>\n</blockquote>\n<p>But there's no γ argument in Graph, so they can't set it</p>",
        "id": 443505924,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1717870134
    }
]