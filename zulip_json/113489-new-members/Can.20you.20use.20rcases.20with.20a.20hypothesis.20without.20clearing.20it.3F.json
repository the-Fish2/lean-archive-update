[
    {
        "content": "<p>Hello! In chapter 6 of Mathematics in Lean, there's an example involving this structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">StandardTwoSimplex</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">x_nonneg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n  <span class=\"n\">y_nonneg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span>\n  <span class=\"n\">z_nonneg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span>\n  <span class=\"n\">sum_eq</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>One of the problems is to write a function to take the weighted average of two elements of the standard two-simplex given a parameter lambda between 0 and 1. This is what I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">weightedAverage</span> <span class=\"o\">(</span><span class=\"n\">lambda</span> <span class=\"o\">:</span> <span class=\"n\">Real</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lambda_nonneg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">lambda</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lambda_le</span> <span class=\"o\">:</span> <span class=\"n\">lambda</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">StandardTwoSimplex</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StandardTwoSimplex</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">lambda</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"n\">exact</span> <span class=\"o\">{</span>\n    <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">lambda</span> <span class=\"bp\">*</span> <span class=\"n\">a.x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">lambda</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b.x</span><span class=\"o\">,</span>\n    <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">lambda</span> <span class=\"bp\">*</span> <span class=\"n\">a.y</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">lambda</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b.y</span><span class=\"o\">,</span>\n    <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">lambda</span> <span class=\"bp\">*</span> <span class=\"n\">a.z</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">lambda</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b.z</span><span class=\"o\">,</span>\n    <span class=\"n\">x_nonneg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">positivity</span><span class=\"o\">,</span>\n    <span class=\"n\">y_nonneg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">positivity</span><span class=\"o\">,</span>\n    <span class=\"n\">z_nonneg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">positivity</span><span class=\"o\">,</span>\n    <span class=\"n\">sum_eq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">lambda</span> <span class=\"bp\">*</span> <span class=\"n\">a.sum_eq</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">lambda</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b.sum_eq</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>This works, but it is slightly unsatisfying. I use <code>cases a; cases b;</code> in order to add <code>a.x_nonneg</code> (etc.) to the list of hypotheses so that the <code>positivity</code> tactic can use them. I would like to be able to move the <code>cases a</code> and <code>cases b</code> before the <code>exact</code> so that those lines do not have to be repeated three times. Unfortunately, doing so would clear the hypotheses <code>a</code> and <code>b</code> and make it impossible to refer to <code>a.x</code>(etc.). Is there a way around this?</p>",
        "id": 424187655,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1709284486
    },
    {
        "content": "<p>You can use <code>cases id a</code>, but that probably gives the wrong hypotheses</p>",
        "id": 424190097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709285111
    },
    {
        "content": "<p>Yeah, it doesn't work, unfortunately. I get the following state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mk</span>\n  <span class=\"n\">lambda</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">lambda_nonneg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">lambda</span>\n  <span class=\"n\">lambda_le</span> <span class=\"o\">:</span> <span class=\"n\">lambda</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n  <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">StandardTwoSimplex</span>\n  <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">lambda</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>\n  <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"n\">y</span><span class=\"bp\">✝</span> <span class=\"n\">z</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">x_nonneg</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n  <span class=\"n\">y_nonneg</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"bp\">✝</span>\n  <span class=\"n\">z_nonneg</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"bp\">✝</span>\n  <span class=\"n\">sum_eq</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">✝</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">⊢</span> <span class=\"n\">StandardTwoSimplex</span>\n</code></pre></div>\n<p>So the hypotheses don't say anything about a.x, a.y, a.z. I do like the \"cases id\" trick though.</p>",
        "id": 424191893,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1709285810
    },
    {
        "content": "<p>How do you feel about:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">ax</span><span class=\"o\">,</span> <span class=\"n\">ay</span><span class=\"o\">,</span> <span class=\"n\">az</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">as</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">bx</span><span class=\"o\">,</span> <span class=\"kd\">by</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"n\">bz</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>?</p>",
        "id": 424194543,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709286756
    },
    {
        "content": "<p>The non-beginner solution to your original question is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n<span class=\"kd\">@[</span><span class=\"n\">positivity</span> <span class=\"n\">StandardTwoSimplex.x</span> <span class=\"n\">_</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">xPos</span> <span class=\"o\">:</span> <span class=\"n\">Mathlib.Meta.Positivity.PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">StandardTwoSimplex.x</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">assertInstancesCommute</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">StandardTwoSimplex.x_nonneg</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">failure</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">positivity</span> <span class=\"n\">StandardTwoSimplex.y</span> <span class=\"n\">_</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">yPos</span> <span class=\"o\">:</span> <span class=\"n\">Mathlib.Meta.Positivity.PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">StandardTwoSimplex.y</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">assertInstancesCommute</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">StandardTwoSimplex.y_nonneg</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">failure</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">positivity</span> <span class=\"n\">StandardTwoSimplex.z</span> <span class=\"n\">_</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">zPos</span> <span class=\"o\">:</span> <span class=\"n\">Mathlib.Meta.Positivity.PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">StandardTwoSimplex.z</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">assertInstancesCommute</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">StandardTwoSimplex.z_nonneg</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">failure</span>\n</code></pre></div>\n<p>which means you can just drop the <code>cases</code> entirely!</p>",
        "id": 424196234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709287311
    },
    {
        "content": "<p>Thanks for the replies. I hope that one day I will understand the non-beginner solution.</p>\n<p>I have noticed that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">a.x</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">a.y</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">a.z</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">a.x_nonneg</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">a.y_nonneg</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">a.z_nonneg</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">a.sum_eq</span>\n</code></pre></div>\n<p>gives exactly the proof state I want, with <code>this✝²: 0 ≤ a.x</code> in the hypothesis list, even if I permute the seven lines or put an underscore before one or more of the <code>:=</code> signs. However,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>does not. It gives <code>x_nonneg✝: 0 ≤ x✝</code> instead. To be honest, I do not quite understand this.</p>",
        "id": 424198903,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1709288309
    },
    {
        "content": "<p>The simplest I have so far now is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">weightedAverage</span> <span class=\"o\">(</span><span class=\"n\">lambda</span> <span class=\"o\">:</span> <span class=\"n\">Real</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lambda_nonneg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">lambda</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lambda_le</span> <span class=\"o\">:</span> <span class=\"n\">lambda</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">StandardTwoSimplex</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StandardTwoSimplex</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">lambda</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">a.x_nonneg</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">a.y_nonneg</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">a.z_nonneg</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">b.x_nonneg</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">b.y_nonneg</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">b.z_nonneg</span>\n  <span class=\"n\">exact</span> <span class=\"o\">{</span>\n    <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">lambda</span> <span class=\"bp\">*</span> <span class=\"n\">a.x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">lambda</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b.x</span><span class=\"o\">,</span>\n    <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">lambda</span> <span class=\"bp\">*</span> <span class=\"n\">a.y</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">lambda</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b.y</span><span class=\"o\">,</span>\n    <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">lambda</span> <span class=\"bp\">*</span> <span class=\"n\">a.z</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">lambda</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b.z</span><span class=\"o\">,</span>\n    <span class=\"n\">x_nonneg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">,</span>\n    <span class=\"n\">y_nonneg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">,</span>\n    <span class=\"n\">z_nonneg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">,</span>\n    <span class=\"n\">sum_eq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">lambda</span> <span class=\"bp\">*</span> <span class=\"n\">a.sum_eq</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">lambda</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b.sum_eq</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Maybe it's not reasonable to expect anything better.</p>",
        "id": 424199280,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1709288427
    },
    {
        "content": "<p>That looks pretty reasonable to me</p>",
        "id": 424199386,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709288448
    },
    {
        "content": "<p>You could probably inline the <code>have</code>s before the positivity, since each one only needs the <code>have</code>s for one variable at a time</p>",
        "id": 424199639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709288502
    },
    {
        "content": "<p>I guess technically this is actually longer than my original solution</p>",
        "id": 424200063,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1709288638
    },
    {
        "content": "<p>Yeah, you're right; inlining them would make it more readable</p>",
        "id": 424200172,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1709288672
    }
]