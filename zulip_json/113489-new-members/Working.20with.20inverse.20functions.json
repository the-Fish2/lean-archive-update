[
    {
        "content": "<p>I am currently working through MIL, and I find the definition of inverse functions rather difficult. So as an exercise I wanted to proof <code>(g ∘ f)⁻¹ = f⁻¹ ∘ g⁻¹</code>, and while the proof works, the definition of all inverses (following the example from MIL) is quite lengthy and I would like to know if there is a better way to approach this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">inverse_f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">↦</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">Classical.choose</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">default</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">inverse_spec_f</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">inverse_f</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">inverse_f</span><span class=\"o\">]</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Classical.choose_spec</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">inverse_g</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">↦</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"k\">then</span> <span class=\"n\">Classical.choose</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">default</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">inverse_spec_g</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">inverse_g</span> <span class=\"n\">g</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">inverse_g</span><span class=\"o\">]</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Classical.choose_spec</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inverse_gf</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">↦</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"k\">then</span> <span class=\"n\">Classical.choose</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">default</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">inverse_spec_gf</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">inverse_gf</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">inverse_gf</span><span class=\"o\">]</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Classical.choose_spec</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hf</span><span class=\"o\">:</span> <span class=\"n\">Bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"n\">Bijective</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hgf</span> <span class=\"o\">:</span> <span class=\"n\">Bijective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)):</span> <span class=\"n\">inverse_gf</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">inverse_f</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">inverse_g</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">z</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Bijective</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hgf.1</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">comp</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span>\n  <span class=\"k\">have</span> <span class=\"n\">hsurj_gf</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">hgf.2</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">hsurj_gf</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">inverse_spec_gf</span> <span class=\"n\">z</span> <span class=\"n\">hsurj_gf</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">hsurj_g</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">hg.2</span> <span class=\"n\">z</span>\n  <span class=\"k\">have</span> <span class=\"n\">hsurj_f</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">inverse_g</span> <span class=\"n\">g</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hf.2</span> <span class=\"o\">(</span><span class=\"n\">inverse_g</span> <span class=\"n\">g</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">inverse_spec_f</span> <span class=\"o\">(</span><span class=\"n\">inverse_g</span> <span class=\"n\">g</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">hsurj_f</span><span class=\"o\">]</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">inverse_spec_g</span> <span class=\"n\">z</span> <span class=\"n\">hsurj_g</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 425781265,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1710083767
    },
    {
        "content": "<p>Use <code>Equiv</code> and not <code>Bijective</code> and everything's going to be much easier.</p>",
        "id": 425784205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710086483
    },
    {
        "content": "<p>How exactly can I use <code>Equiv</code>? Is there small example to see how it is used in Lean?</p>",
        "id": 427085426,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1710673015
    },
    {
        "content": "<p>To expand on Kevin's comment: what you are looking for is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.symm_trans_apply#doc\">docs#Equiv.symm_trans_apply</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.symm#doc\">docs#Equiv.symm</a> is the inverse of an <code>Equiv</code> (again as an <code>Equiv</code>) and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.trans#doc\">docs#Equiv.trans</a> is the composition. The page <code>Mathlib.Logic.Equiv.Defs</code> should also give ample examples on how <code>Equiv</code>s are used, but if you have more specific questions, please ask.</p>",
        "id": 427115676,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1710681226
    },
    {
        "content": "<p>Thanks a lot! One more question what exactly is the difference between f.invFun and f.symm? E.g here I had to rewrite f.invFun to f.symm using <code>Equiv.invFun_as_coe</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">l_BB</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f.invFun</span>\n<span class=\"k\">#check</span> <span class=\"n\">f.symm</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">f.invFun</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">l_BB</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">comp</span><span class=\"o\">]</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">l_BB</span><span class=\"o\">]</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Equiv.invFun_as_coe</span><span class=\"o\">]</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Equiv.apply_symm_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 427139647,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1710687611
    },
    {
        "content": "<p><code>f.symm</code> is an <code>Equiv</code> and <code>f.invFun</code> is just the bare inverse. You almost always want to use the object with more structure, so using <code>f.invFun</code> is probably not the right way of doing things. fyi your lemma is a combination of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.self_comp_symm#doc\">docs#Equiv.self_comp_symm</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.invFun_as_coe#doc\">docs#Equiv.invFun_as_coe</a> (and there you see that <code>simp</code> wants to change <code>f.invFun</code> to <code>f.symm</code>)</p>",
        "id": 427146483,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1710689362
    },
    {
        "content": "<p>F.invFun is the inverse function, without any property.<br>\nF.symm is the inverse equivalence, that contains the inverse function as the main object, its inverse F.toFun, and the fact that they're left/right inverses.</p>",
        "id": 427146548,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710689379
    },
    {
        "content": "<p>Perhaps a more useful description is \"<code>e.toFun</code> and <code>e.invFun</code> are implementation details that you should never use\"</p>",
        "id": 427164647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710694087
    },
    {
        "content": "<p>Thanks everyone, that was super helpful! (I would resolve this thread, but I cannot do it anymore since there are \"messages older than 7 days in this organisation. Contact a moderator to resolve this topic.\")</p>",
        "id": 427224181,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1710710252
    },
    {
        "content": "<p>we prefer that you don't resolve threads, actually... it changes the name of the thread which can screw up links</p>",
        "id": 427288874,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1710727222
    }
]