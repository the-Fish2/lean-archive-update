[
    {
        "content": "<p>Here's an example of a simple proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exSmallNat</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"mi\">3</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.le.step</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.le.refl</span>\n</code></pre></div>\n<p>When I step through this proof in vscode, the fact that a proof of <code>3 &lt; 5</code> is defined as proof of <code>4 ≤ 5</code> is obscured by <code>step</code>. Is there a tactic that expands that for me?</p>",
        "id": 413024414,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1705350419
    },
    {
        "content": "<p>How did you come up with that proof?</p>",
        "id": 413024901,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705350616
    },
    {
        "content": "<p>Because I can think of no reason to have either of those in a finished proof</p>",
        "id": 413025006,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705350700
    },
    {
        "content": "<p>I'm not sure what you mean? I was just playing around with <code>Nat</code> and logical predicates to wrap my head around what's happening. I don't have any real purpose in mind.</p>",
        "id": 413025195,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1705350808
    },
    {
        "content": "<p>Here are some tactics for exploration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exSmallNat</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"mi\">3</span>\n  <span class=\"n\">whnf</span>\n  <span class=\"c1\">-- Nat.le (Nat.succ 3) 5</span>\n  <span class=\"n\">reduce</span>\n  <span class=\"c1\">-- Nat.le 4 5</span>\n</code></pre></div>",
        "id": 413025310,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705350870
    },
    {
        "content": "<p><code>whnf</code> is \"weak-head normal form\", and it's for reducing just the head of an expression, unfolding definitions as they come. <code>reduce</code> does this to everything in the entire expression.</p>",
        "id": 413025371,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705350907
    },
    {
        "content": "<p>Those are mathlib tactics.</p>",
        "id": 413025385,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705350920
    },
    {
        "content": "<p>Ah! Nice. That works!</p>",
        "id": 413025760,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1705351139
    },
    {
        "content": "<p>I suppose this is a follow up question in the same line. Is there some deeper reason that definitional equality isn't recognized by the rw tactic?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">smallNat</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"c1\">-- this line doesn't compile as it's not a proof of `n = 2` or `n ↔ 2`</span>\n    <span class=\"n\">trivial</span>\n  <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 413026533,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1705351593
    },
    {
        "content": "<p><code>rw</code> isn't what you use for substituting local variables, it's for rewriting using equalities or iffs. You could try <code>simp only [n]</code> or the mathlib tactic <code>unfold_let n</code></p>",
        "id": 413026947,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705351854
    },
    {
        "content": "<p>If you must use <code>rw</code>, you can wrap the whole thing in tactic mode and use <code>set ... with</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">smallNat</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"k\">with</span> <span class=\"n\">hn</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 413069688,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1705373680
    }
]