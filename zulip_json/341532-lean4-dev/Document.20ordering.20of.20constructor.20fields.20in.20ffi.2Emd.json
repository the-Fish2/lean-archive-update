[
    {
        "content": "<p>Hey yall!! I'm just posting a message here to ask whether it'd be okay to submit an issue/PR regarding documenting the ordering of constructor fields in ffi.md.</p>\n<p>I was writing some FFI bindings and had to go digging through the lean sources for ages before stumbling upon the relevant comment, almost entirely by luck:<br>\n<a href=\"https://github.com/leanprover/lean4/blob/6e731b4370000a8e7a5cfb675a7f3d7635d21f58/src/library/compiler/llnf.cpp#L296\">https://github.com/leanprover/lean4/blob/6e731b4370000a8e7a5cfb675a7f3d7635d21f58/src/library/compiler/llnf.cpp#L296</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"bp\">/*</span> <span class=\"n\">Remark</span><span class=\"o\">:</span>\n       <span class=\"bp\">-</span> <span class=\"n\">usize</span> <span class=\"n\">fields</span> <span class=\"n\">are</span> <span class=\"n\">stored</span> <span class=\"n\">after</span> <span class=\"n\">object</span> <span class=\"n\">fields.</span>\n       <span class=\"bp\">-</span> <span class=\"n\">regular</span> <span class=\"n\">scalar</span> <span class=\"n\">fields</span> <span class=\"n\">are</span> <span class=\"n\">stored</span> <span class=\"n\">after</span> <span class=\"n\">object</span> <span class=\"n\">and</span> <span class=\"n\">usize</span> <span class=\"n\">fields</span><span class=\"o\">,</span>\n         <span class=\"n\">and</span> <span class=\"n\">are</span> <span class=\"n\">sorted</span> <span class=\"kd\">by</span> <span class=\"n\">size.</span> <span class=\"bp\">*/</span>\n</code></pre></div>\n<p>I understand that the FFI itself of lean is in an experimental status, and maybe this has been deliberately omitted to avoid people depending on it, but I feel like it doesn't expose any more internal/unstable stuff than is already exposed in FFI.md</p>\n<p>I'd propose adding the following lines at line 58 of FFI.md to clarify the memory representation of the fields, following the comment and the corresponding code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Furthemore</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">memory</span> <span class=\"n\">representation</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">fields</span> <span class=\"n\">of</span> <span class=\"n\">any</span> <span class=\"n\">constructor</span> <span class=\"n\">adhere</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">rules</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">usize</span> <span class=\"n\">fields</span> <span class=\"n\">are</span> <span class=\"n\">stored</span> <span class=\"n\">after</span> <span class=\"n\">object</span> <span class=\"n\">fields.</span>\n  <span class=\"bp\">-</span> <span class=\"n\">regular</span> <span class=\"n\">scalar</span> <span class=\"n\">fields</span> <span class=\"n\">are</span> <span class=\"n\">stored</span> <span class=\"n\">after</span> <span class=\"n\">object</span> <span class=\"n\">and</span> <span class=\"n\">usize</span> <span class=\"n\">fields</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">are</span> <span class=\"n\">sorted</span> <span class=\"kd\">by</span> <span class=\"n\">size</span><span class=\"o\">,</span> <span class=\"n\">largest</span> <span class=\"n\">to</span> <span class=\"n\">smallest.</span>\n  <span class=\"bp\">-</span> <span class=\"k\">in</span> <span class=\"n\">both</span> <span class=\"n\">cases</span><span class=\"o\">,</span> <span class=\"n\">for</span> <span class=\"n\">fields</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">same</span> <span class=\"n\">size</span><span class=\"o\">,</span> <span class=\"n\">they</span> <span class=\"n\">occur</span> <span class=\"k\">in</span> <span class=\"n\">memory</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">order</span> <span class=\"n\">they</span> <span class=\"n\">are</span> <span class=\"n\">present</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">constructor</span> <span class=\"kd\">definition</span>\n</code></pre></div>",
        "id": 436285403,
        "sender_full_name": "Kiran",
        "timestamp": 1714487574
    },
    {
        "content": "<p>There is an open PR for this, <a href=\"https://github.com/leanprover/lean4/pull/3915\">lean4#3915</a></p>",
        "id": 436342231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714506319
    },
    {
        "content": "<p>Oh awesome!! I should have looked there first!!</p>",
        "id": 436370218,
        "sender_full_name": "Kiran",
        "timestamp": 1714520003
    }
]