[
    {
        "content": "<p>I have a complicated function with callbacks that runs in <code>MetaM</code>, but I now want to use it at <code>StateT … MetaM</code>, so I am trying to generalize it. It works with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">transform</span>\n    <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MonadLiftT</span> <span class=\"n\">MetaM</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadControlT</span> <span class=\"n\">MetaM</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadError</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadEnv</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadLog</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">AddMessageContext</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadOptions</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n    <span class=\"bp\">…</span>\n</code></pre></div>\n<p>but it seems a bit of an excessive list of constraints, some redundant. Is that fine, or should I approach it differently?</p>\n<p>(Here is <a href=\"https://github.com/leanprover/lean4/pull/3762/files#diff-ff9d2c127bd942724ea2641051b5b384a0386013a98da28eca79d48782e67ca0L211\">the actual change</a>)</p>",
        "id": 429357550,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711365485
    },
    {
        "content": "<p>I guess that the first three (<code>MonadLiftT</code>, <code>MonadControlT</code>, <code>Monad</code>) are sufficient if you write, e.g., <code>show MetaM _ from getEnv</code> instead of <code>getEnv</code>. Not sure whether that's an improvement though...</p>",
        "id": 429388274,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1711371060
    },
    {
        "content": "<p>Yeah, or just <code>MonadControlT</code> is enough if I wrap every operation that I need to specialize in some <code>lift</code> operations, but then the code gets much uglier…</p>",
        "id": 429390172,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711371364
    },
    {
        "content": "<p>Have you seen how <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.forallTelescope#doc\">docs#Lean.Meta.forallTelescope</a> works? It takes a continuation in a different monad, but the underlying implementation takes a MetaM continuation. It uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.map2MetaM#doc\">docs#Lean.Meta.map2MetaM</a>, which I haven't understood yet.</p>",
        "id": 429490328,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711393768
    },
    {
        "content": "<p>I had a look, but I think the <code>map2MetaM</code>-family only works when there is a single continuation that is called exactly once; my <code>MatcherApp.transform</code> function is more complicated than that.</p>\n<p>I could probably try to thread through the <code>ControlMonadT</code>’s <code>stM</code> state manually in <code>MatcherApp</code>. I briefly tried, but it seemed differently, but similarly annoying than the plethora of type class constraints.</p>",
        "id": 429493085,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711394846
    }
]