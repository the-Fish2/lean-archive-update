[
    {
        "content": "<p>Would you want to have a version of kabstract in lean that can also match with bound variables? This would be especially useful for rewriting under binders. I've made a function like this, so I thought I should share. I was not quite sure what the return type should be, because abstracting a term with bound variables work nicely.</p>\n<p>What I did was to still abstract the instances of the pattern as usual, and to specify a <code>SubExpr.Pos</code> at which all used bound variables have been bound, and a list of <code>FVarDecl</code> for the bound variables introduced at this <code>Pos</code>. So to do a substitution, I edit the subexpression at this <code>Pos</code> by first instantiating it with these free variables, and then instantiating with the pattern that I want (which is allowed to contain these free variables), and then abstract these free variables again. Here's my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The result of `patternAbstract`. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">PatternAbstractResult</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The position closest to the root such that all bound variables appearing in the</span>\n<span class=\"sd\">  instantiated pattern are bound at this position. -/</span>\n  <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">SubExpr.Pos</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">root</span>\n  <span class=\"sd\">/-- The original expression with instances of the pattern abstracted. -/</span>\n  <span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n  <span class=\"sd\">/-- The declarations of the free variables introduced by viewing position `pos` in `expr`. -/</span>\n  <span class=\"n\">fvarDecls</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">LocalDecl</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"sd\">/-- replace the  `LocalContext` of each mvar with the current `LocalContext`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">updateMVarLCtxs</span> <span class=\"o\">(</span><span class=\"n\">mvarIds</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n  <span class=\"k\">let</span> <span class=\"n\">mctx</span> <span class=\"bp\">←</span> <span class=\"n\">getMCtx</span>\n  <span class=\"k\">let</span> <span class=\"n\">updateDecls</span> <span class=\"n\">decls</span> <span class=\"n\">mvarId</span> <span class=\"o\">:=</span> <span class=\"n\">decls.insert</span> <span class=\"n\">mvarId</span> <span class=\"o\">{</span> <span class=\"n\">decls.find</span><span class=\"bp\">!</span> <span class=\"n\">mvarId</span> <span class=\"k\">with</span> <span class=\"n\">lctx</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">decls</span> <span class=\"o\">:=</span> <span class=\"n\">mvarIds.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">mctx.decls</span><span class=\"o\">)</span> <span class=\"n\">updateDecls</span>\n  <span class=\"n\">setMCtx</span> <span class=\"o\">{</span> <span class=\"n\">mctx</span> <span class=\"k\">with</span> <span class=\"n\">decls</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">abbrev</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">ReaderT</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">FVarId</span><span class=\"o\">)</span> <span class=\"n\">StateRefT</span> <span class=\"n\">PatternProgress</span> <span class=\"n\">StateRefT</span> <span class=\"n\">Nat</span> <span class=\"n\">MetaM</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Find all occurence of a pattern, abstracting the locations of this pattern,</span>\n<span class=\"sd\">also allowing for bound variables. The bound variables are replaced by free variables</span>\n<span class=\"sd\">which are recorded in the field `.fvarDecls`.</span>\n<span class=\"sd\">These are exactly the variables introduced in the returned outer expression.</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">PatternAbstract</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">AbstractMVarsResult</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">occs</span> <span class=\"o\">:</span> <span class=\"n\">Occurrences</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">all</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">PatternAbstractResult</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span>\n  <span class=\"n\">withNewMCtxDepth</span> <span class=\"k\">do</span>\n  <span class=\"n\">withReducible</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvars</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">openAbstractMVarsResult</span> <span class=\"n\">p</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarIds</span> <span class=\"o\">:=</span> <span class=\"n\">mvars.map</span> <span class=\"n\">Expr.mvarId</span><span class=\"bp\">!</span>\n  <span class=\"k\">if</span> <span class=\"n\">p.isFVar</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">occs</span> <span class=\"bp\">==</span> <span class=\"n\">Occurrences.all</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"o\">({</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">e.abstract</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">},</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">pHeadIdx</span> <span class=\"o\">:=</span> <span class=\"n\">p.toHeadIndex</span>\n    <span class=\"k\">let</span> <span class=\"n\">pNumArgs</span> <span class=\"o\">:=</span> <span class=\"n\">p.headNumArgs</span>\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">visit</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">SubExpr.Pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n\n      <span class=\"k\">let</span> <span class=\"n\">introFVar</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">SubExpr.Pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n        <span class=\"n\">withLocalDeclD</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"k\">fun</span> <span class=\"n\">fvar</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">withReader</span> <span class=\"o\">(</span><span class=\"n\">fvar.fvarId</span><span class=\"bp\">!</span> <span class=\"o\">::</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n          <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">get</span><span class=\"o\">)</span> <span class=\"n\">matches</span> <span class=\"n\">PatternProgress.noMatch</span> <span class=\"k\">then</span>\n            <span class=\"n\">updateMVarLCtxs</span> <span class=\"n\">mvarIds</span>\n            <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">pos</span> <span class=\"o\">(</span><span class=\"n\">b.instantiate1</span> <span class=\"n\">fvar</span><span class=\"o\">)</span>\n            <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">get</span> <span class=\"k\">with</span>\n            <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">noMatch</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">return</span> <span class=\"n\">b</span>\n            <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">someMatch</span> <span class=\"n\">pattern</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"k\">if</span> <span class=\"n\">pattern.containsFVar</span> <span class=\"n\">fvar.fvarId</span><span class=\"bp\">!</span> <span class=\"k\">then</span>\n                <span class=\"k\">let</span> <span class=\"n\">fvarDecls</span> <span class=\"bp\">←</span> <span class=\"n\">liftM</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"n\">FVarId.getDecl</span>\n                <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">PatternProgress.finished</span> <span class=\"n\">pattern</span> <span class=\"n\">pos</span> <span class=\"n\">fvarDecls</span><span class=\"o\">)</span>\n              <span class=\"n\">return</span> <span class=\"n\">e.abstract</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">fvar</span><span class=\"o\">]</span>\n            <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">finished</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">return</span> <span class=\"n\">e.abstract</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">fvar</span><span class=\"o\">]</span>\n\n          <span class=\"k\">else</span>\n            <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">pos</span> <span class=\"o\">(</span><span class=\"n\">b.instantiate1</span> <span class=\"n\">fvar</span><span class=\"o\">)</span>\n            <span class=\"n\">return</span> <span class=\"n\">e.abstract</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">fvar</span><span class=\"o\">]</span>\n\n      <span class=\"k\">let</span> <span class=\"n\">visitChildren</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"n\">a</span>         <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e.updateApp</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">pos.pushAppFn</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">pos.pushAppArg</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mdata</span> <span class=\"n\">_</span> <span class=\"n\">b</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e.updateMData</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">pos</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">proj</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">b</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e.updateProj</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">pos.pushProj</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">letE</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">v</span> <span class=\"n\">b</span> <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e.updateLet</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">pos.pushLetVarType</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">pos.pushLetValue</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">introFVar</span> <span class=\"n\">pos.pushLetBody</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">b</span> <span class=\"n\">_</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e.updateLambdaE</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">pos.pushBindingDomain</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">introFVar</span> <span class=\"n\">pos.pushBindingBody</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e.updateForallE</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">pos.pushBindingDomain</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">introFVar</span> <span class=\"n\">pos.pushBindingBody</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">e</span>                <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e</span>\n\n      <span class=\"k\">let</span> <span class=\"n\">progress</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n      <span class=\"k\">if</span> <span class=\"n\">progress</span> <span class=\"n\">matches</span> <span class=\"bp\">.</span><span class=\"n\">finished</span> <span class=\"bp\">..</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">e</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">e.toHeadIndex</span> <span class=\"bp\">!=</span> <span class=\"n\">pHeadIdx</span> <span class=\"bp\">||</span> <span class=\"n\">e.headNumArgs</span> <span class=\"bp\">!=</span> <span class=\"n\">pNumArgs</span> <span class=\"k\">then</span>\n        <span class=\"n\">visitChildren</span> <span class=\"o\">()</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"n\">mctx</span> <span class=\"bp\">←</span> <span class=\"n\">getMCtx</span>\n        <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">e</span> <span class=\"n\">p</span> <span class=\"k\">then</span>\n          <span class=\"k\">if</span> <span class=\"n\">progress</span> <span class=\"n\">matches</span> <span class=\"bp\">.</span><span class=\"n\">noMatch</span> <span class=\"k\">then</span>\n            <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">PatternProgress.someMatch</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n          <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">Nat</span>\n          <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n          <span class=\"k\">if</span> <span class=\"n\">occs.contains</span> <span class=\"n\">i</span> <span class=\"k\">then</span>\n            <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n          <span class=\"k\">else</span>\n            <span class=\"n\">setMCtx</span> <span class=\"n\">mctx</span>\n            <span class=\"n\">visitChildren</span> <span class=\"o\">()</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">visitChildren</span> <span class=\"o\">()</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"o\">,</span> <span class=\"n\">progress</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">SubExpr.Pos.root</span> <span class=\"n\">e</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"o\">[]</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"bp\">.</span><span class=\"n\">noMatch</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run'</span> <span class=\"mi\">0</span>\n    <span class=\"k\">match</span> <span class=\"n\">progress</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">finished</span> <span class=\"n\">pattern</span> <span class=\"n\">pos</span> <span class=\"n\">fvarDecls</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"o\">({</span> <span class=\"n\">expr</span><span class=\"o\">,</span> <span class=\"n\">pos</span><span class=\"o\">,</span> <span class=\"n\">fvarDecls</span> <span class=\"o\">},</span> <span class=\"n\">pattern</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">someMatch</span> <span class=\"n\">pattern</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"o\">({</span> <span class=\"n\">expr</span> <span class=\"o\">},</span> <span class=\"n\">pattern</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">noMatch</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>And the code for instantiating:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> This section follows the definition of `Lean.Meta.replaceSubexpr` -/</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadLiftT</span> <span class=\"n\">MetaM</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadControlT</span> <span class=\"n\">MetaM</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadError</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Given a constructor index for Expr, runs `g` on the value of that subexpression and replaces it.</span>\n<span class=\"sd\">Mdata is ignored. An index of 3 is interpreted as the type of the expression. An index of 3 will throw since we can't replace types.</span>\n\n<span class=\"sd\">See also `Lean.Meta.transform`, `Lean.Meta.traverseChildren`. -/</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">lensCoordRaw</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Expr.app</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>         <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e.updateApp</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Expr.app</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>         <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e.updateApp</span><span class=\"bp\">!</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Expr.lam</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">)</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e.updateLambdaE</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Expr.lam</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">)</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e.updateLambdaE</span><span class=\"bp\">!</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Expr.forallE</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e.updateForallE</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Expr.forallE</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e.updateForallE</span><span class=\"bp\">!</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Expr.letE</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e.updateLet</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Expr.letE</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e.updateLet</span><span class=\"bp\">!</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Expr.letE</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e.updateLet</span><span class=\"bp\">!</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Expr.proj</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">b</span><span class=\"o\">)</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">e.updateProj</span><span class=\"bp\">!</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">g</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Expr.mdata</span> <span class=\"n\">_</span> <span class=\"n\">a</span><span class=\"o\">)</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">e.updateMData</span><span class=\"bp\">!</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">lensCoordRaw</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">_</span>                        <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Lensing on types is not supported\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">e</span>                        <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Invalid coordinate {c} for {e}\"</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">lensRawAux</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>        <span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">head</span><span class=\"o\">::</span><span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lensCoordRaw</span> <span class=\"o\">(</span><span class=\"n\">lensRawAux</span> <span class=\"n\">g</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"n\">head</span> <span class=\"n\">e</span>\n\n<span class=\"sd\">/-- Run the given `replace` function to replace the expression at the subexpression position.</span>\n<span class=\"sd\">If the subexpression is invalid or points to a type then this will throw. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">replaceSubexprRaw</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">SubExpr.Pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">replace</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">subexpr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"n\">lensRawAux</span> <span class=\"n\">replace</span> <span class=\"n\">p.toArray.toList</span> <span class=\"n\">root</span>\n\n<span class=\"sd\">/-- instantiate the `PatternAbstractResult` with `e`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">PatternAbstractResult.instantiate</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">PatternAbstractResult</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"n\">replaceSubexprRaw</span> <span class=\"n\">p.pos</span> <span class=\"n\">p.expr</span> <span class=\"k\">fun</span> <span class=\"n\">subexpr</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">fvars</span> <span class=\"o\">:=</span> <span class=\"n\">p.fvarDecls.toArray.reverse.map</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"bp\">·.</span><span class=\"n\">fvarId</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"o\">((</span><span class=\"n\">subexpr.instantiateRev</span> <span class=\"n\">fvars</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">instantiate1</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">abstract</span> <span class=\"n\">fvars</span>\n</code></pre></div>",
        "id": 418257093,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1706268397
    }
]