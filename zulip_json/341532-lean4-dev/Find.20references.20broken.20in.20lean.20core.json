[
    {
        "content": "<p>For a little while now I have not been able to use the \"Find references\" / \"call hierarchy\" feature across files inside lean core. I can only assume the .ilean files are broken or misplaced in some way. Could this be related to the lakefile-for-core work <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> ?</p>",
        "id": 437051935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714856859
    },
    {
        "content": "<p>There is no lakefile in core yet (and I have not added any new features to for it), so no, that cannot be the cause.</p>",
        "id": 437052004,
        "sender_full_name": "Mac Malone",
        "timestamp": 1714856903
    },
    {
        "content": "<p>How does the server configuration for core get set up in the first place?</p>",
        "id": 437052048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714856970
    },
    {
        "content": "<p>I guess it must still be using the <code>lean --server</code> fallback</p>",
        "id": 437052116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714857017
    },
    {
        "content": "<p>running <code>#eval IO.getEnv \"LEAN_PATH\"</code> and <code>#eval IO.getEnv \"LEAN_SRC_PATH\"</code> in core files returns <code>none</code>, not sure if I should expect that to work</p>",
        "id": 437052170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714857098
    },
    {
        "content": "<p>I figured out the issue, cc: <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> . <code>initializeWorker</code> uses <a href=\"https://github.com/leanprover/lean4/blob/e362b50fa95d6823e59dd706803a93c25e888535/src/Lean/Server/FileWorker.lean#L319\"><code>moduleNameOfFileName path none</code></a> to initialize the <code>mainModuleName</code>, which uses <code>IO.currentDir</code> as the root. Because I have the lean4 repo root open in vscode, this means that <code>src/Lean/Server/FileWorker.lean</code> will get a main module name of <code>src.Lean.Server.FileWorker</code>, and this ends up in the ilean outputs, resulting in lookup failures when attempting cross-file IDE queries like Find References.</p>",
        "id": 437064200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714869994
    },
    {
        "content": "<p>it seems to be nontrivial to fix this though, because it should be using <code>searchModuleNameOfFileName</code> but this needs <code>srcSearchPath</code> and this is the result of a promise that has not yet been resolved</p>",
        "id": 437064927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714870878
    },
    {
        "content": "<p>PR'd a fix as <a href=\"https://github.com/leanprover/lean4/pull/4066\">lean4#4066</a></p>",
        "id": 437066463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714872720
    },
    {
        "content": "<p>You should follow <a href=\"https://lean-lang.org/lean4/doc/dev/index.html#vs-code\">https://lean-lang.org/lean4/doc/dev/index.html#vs-code</a></p>",
        "id": 437078193,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714885362
    },
    {
        "content": "<p>I did use that for some time but it had other annoying behaviors, like not showing the main folder in the title</p>",
        "id": 437078334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714885474
    },
    {
        "content": "<p>...also it doesn't fix the headline issue</p>",
        "id": 437078510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714885634
    },
    {
        "content": "<p>That surprises me, because I use those features every day</p>",
        "id": 437078584,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714885705
    },
    {
        "content": "<p>never mind, I was holding it wrong</p>",
        "id": 437078750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714885862
    },
    {
        "content": "<p>(it's still a bug though)</p>",
        "id": 437078776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714885910
    },
    {
        "content": "<p>the C++ config is broken in this workspace</p>",
        "id": 437078906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714886015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/Find.20references.20broken.20in.20lean.20core/near/437064200\">said</a>:</p>\n<blockquote>\n<p>I figured out the issue, cc: <span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> . <code>initializeWorker</code> uses <a href=\"https://github.com/leanprover/lean4/blob/e362b50fa95d6823e59dd706803a93c25e888535/src/Lean/Server/FileWorker.lean#L319\"><code>moduleNameOfFileName path none</code></a> to initialize the <code>mainModuleName</code>, which uses <code>IO.currentDir</code> as the root. Because I have the lean4 repo root open in vscode, this means that <code>src/Lean/Server/FileWorker.lean</code> will get a main module name of <code>src.Lean.Server.FileWorker</code>, and this ends up in the ilean outputs, resulting in lookup failures when attempting cross-file IDE queries like Find References.</p>\n</blockquote>\n<p>Oh, I wonder if this is why go-to-def does not work in the <code>lake</code> directory on machine but works in Init/Lean. It may be looking for <code>lake.Lake.*</code>?</p>",
        "id": 437082881,
        "sender_full_name": "Mac Malone",
        "timestamp": 1714889367
    }
]