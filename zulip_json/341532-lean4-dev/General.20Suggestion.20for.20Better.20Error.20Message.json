[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">my_lemma2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ε</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span>\n  <span class=\"k\">calc</span>\n    <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">section</span>\n</code></pre></div>\n<p>The above code give the error <code>unexpected token 'section'; expected ':='</code> at the word <code>section</code>.</p>\n<p>However it's confusing for first timers, because it's too sketchy to tell obviously what's causing the problem and shown at a location far away from the actual problem (the calc block).</p>\n<p>I suggest that add more information into the error message about why ':=' is expected, such as <code>unexpected token 'section'; expected ':=' for calc block. A calc block is expected to have more than one lines</code>. And it should be shown under the whole calc block.</p>\n<p>In general, an error message shall be detailed enough so that it's obvious what's causing the problem and how to fix it and shown in the right location.</p>\n<p>People think parsing is easy. Actually it's quite the opposite. It takes great effort to implement a user-friendly error-reporting system. As Lean community is grow larger and larger, I believe this problem is increasingly important. Don't end up like Ocaml, end up like Rust with great focus on user experience.</p>",
        "id": 424944559,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709667683
    },
    {
        "content": "<p>If you're able, then I think the devs would welcome a PR.</p>",
        "id": 424956116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709672325
    },
    {
        "content": "<p>I’m now familiar myself with Lean4. Probably starting from June, I could attempt to start working on some improvements.</p>",
        "id": 424960611,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709674318
    },
    {
        "content": "<p>Lean cares a great deal about UX,  so there is little danger of the ocaml vs rust scenario you have mentioned. This particular error reporting issue is a long standing one that has been resolved for some cases. The basic issue is how to accommodate the flexibility that lean  allows in its syntax with good error reporting. There have already been discussions about solutions to this issue.</p>",
        "id": 424964316,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1709675745
    },
    {
        "content": "<p>I'm reading through the source code.</p>\n<p>One thing I find could possibly improve is that there could be more elaborate Error type.</p>\n<p>Now it seems that Error is just abbreviated for String type.</p>\n<p>If we make Error an inductive type and delay the actually printing, it could benefit many things, including:</p>\n<ol>\n<li>Separation of concerns. No need to worry  about pretty printing in the parsing stage.</li>\n<li>Handy for code fix suggestions. Later one could pattern match these errors to give user possible fixes for their code. If errors are reduced to string early in the stage, it's not easy.</li>\n<li>Decide for Error originality. Some errors can be a derivative from other errors and need not be displayed to the user.</li>\n</ol>",
        "id": 425249066,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709799246
    },
    {
        "content": "<p>I know this could mean a major overhaul. But one could first do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Error</span>\n<span class=\"bp\">|</span> <span class=\"n\">TypeMismatch</span>\n<span class=\"bp\">|</span> <span class=\"n\">Other</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Error</span>\n</code></pre></div>\n<p>with other absorbing all the unhandled cases.</p>",
        "id": 425249281,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709799338
    },
    {
        "content": "<p>In Rust which I'm most familiar, it's common that one use a different Error type for each code unit, and there are rules specifying error conversions.</p>",
        "id": 425249473,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709799415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466120\">@Xiyu Zhai</span>, if you're interested in contributing to Lean, suggesting major changes or new features is not the way to go. Bugfixes (see open issues!) (or documentation!) are the place to start.</p>",
        "id": 425265953,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709805384
    }
]