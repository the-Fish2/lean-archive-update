[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258922\">@Anton Lorenzen</span>   and I have been experimenting with Lean's reference counting algorithms,<br>\nand we're now trying to change Lean's <code>Compiler.IR</code>. In doing so, we have stage1 build failures.<br>\nI am unsure as to whether these build failures are because we missed something in the implementation,<br>\nor if it necessicitates a <code>update-stage0</code>. </p>\n<p>Here's the <a href=\"https://gist.github.com/bollu/4bec4b52a489f08c1deaeb9a4eae2c89\">change we made, and failing test cases on <code>stage1</code></a>:</p>\n<p>I'm worried that an <code>update-stage0</code> might mask a bug that we've made in the implementation, leading to a corrupt stage0 compiler that silently builds a seemingly correct stage1/2 compiler.</p>\n<hr>\n<p>If we do need to update stage0,  are there any caveats in <em>how</em> we perform <code>update-stage0</code>?<br>\nIn particular, I am worried about <a href=\"https://lean-lang.org/lean4/doc/dev/bootstrap.html#further-bootstrapping-complications\">the issues mentioned in \"Further bootstrapping complications\"</a>. Do I need to set <code>interpreter.prefer_native</code>? </p>\n<hr>\n<p>Here's the <a href=\"https://gist.github.com/bollu/4bec4b52a489f08c1deaeb9a4eae2c89\">change we made, and failing test cases on <code>stage1</code></a>:</p>\n<h4><a href=\"https://github.com/opencompl/lean4/actions/runs/8559908974/job/23457714973#step:17:3703\">Failing debug build test</a></h4>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">99</span><span class=\"bp\">%</span> <span class=\"n\">tests</span> <span class=\"n\">passed</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"n\">tests</span> <span class=\"n\">failed</span> <span class=\"n\">out</span> <span class=\"n\">of</span> <span class=\"mi\">1837</span>\n\n<span class=\"n\">Total</span> <span class=\"n\">Test</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1946</span><span class=\"bp\">.</span><span class=\"mi\">25</span> <span class=\"n\">sec</span>\n\n<span class=\"n\">The</span> <span class=\"n\">following</span> <span class=\"n\">tests</span> <span class=\"n\">FAILED</span><span class=\"o\">:</span>\n  <span class=\"mi\">1127</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_evalBuiltinInit.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n</code></pre></div>\n<h4><a href=\"https://github.com/opencompl/lean4/actions/runs/8559908974/job/23457714340#step:17:3948\">Failing release build test</a></h4>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">99</span><span class=\"bp\">%</span> <span class=\"n\">tests</span> <span class=\"n\">passed</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"n\">tests</span> <span class=\"n\">failed</span> <span class=\"n\">out</span> <span class=\"n\">of</span> <span class=\"mi\">1953</span>\n\n<span class=\"n\">Total</span> <span class=\"n\">Test</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">326</span><span class=\"bp\">.</span><span class=\"mi\">50</span> <span class=\"n\">sec</span>\n\n<span class=\"n\">The</span> <span class=\"n\">following</span> <span class=\"n\">tests</span> <span class=\"n\">FAILED</span><span class=\"o\">:</span>\n  <span class=\"mi\">1127</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_evalBuiltinInit.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n  <span class=\"mi\">1952</span> <span class=\"bp\">-</span> <span class=\"n\">leanlaketest_toml</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Our baseline lean commit is <code>9cb114eb8389d104fd69da2d289f768979b543f5</code>, and here's the (two) commits<br>\nwe have on top of this: <a href=\"https://github.com/opencompl/lean4/commits/2024-borrowing-baseline-NOBENCH/\">https://github.com/opencompl/lean4/commits/2024-borrowing-baseline-NOBENCH/</a></p>",
        "id": 431401071,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1712264355
    },
    {
        "content": "<p>You adjusted the interpreter but the IR it is loading is still the unchanged one built by the stage 0 compiler. So indeed you need to update-stage0 and then use prefer_native in order to build stage 1 without depending on the interpreter</p>",
        "id": 431509422,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1712318622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> thanks for the confirmation!</p>",
        "id": 431522986,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1712323294
    },
    {
        "content": "<p>I was wondering: where does the interpreter load the old (stage0) IR from?</p>",
        "id": 431523048,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1712323315
    },
    {
        "content": "<p>The .oleans, which were created by stage 0</p>",
        "id": 431523160,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1712323337
    },
    {
        "content": "<p>Right. I was wondering where in the codebase this loading happens.</p>",
        "id": 431523251,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1712323364
    },
    {
        "content": "<p>(a pointer to a file / function name would be super <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 431523335,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1712323387
    },
    {
        "content": "<p>The interpreter gets passed the environment, the IR is in an environment extension</p>",
        "id": 431523426,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1712323415
    },
    {
        "content": "<p>Super, danke!</p>",
        "id": 431524148,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1712323624
    }
]