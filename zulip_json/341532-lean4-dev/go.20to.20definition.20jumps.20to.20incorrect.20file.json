[
    {
        "content": "<p>I'm a newbie trying to help by starting from bug fixes.<br>\nI'm looking at a 2yr old issue <a href=\"https://github.com/leanprover/lean4/issues/1170\">https://github.com/leanprover/lean4/issues/1170</a>.<br>\nThe issue is<br>\n\"If there are two different files that contain declarations with the same name, the go to definition feature will sometimes jump to the declaration in the wrong file. This seems to happen consistently if the offending files are all open in a particular editor group (in tabs).\"<br>\nOn my computer, I can easily replicate this bug.<br>\nI'm a newbie so I'm just trying to understand the situation.<br>\nIt seems to me that it could be caused by Environment sharing.<br>\nThe following code finds location links from decl given uri.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Elab</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">locationLinksFromDecl</span> <span class=\"o\">(</span><span class=\"n\">srcSearchPath</span> <span class=\"o\">:</span> <span class=\"n\">SearchPath</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">uri</span> <span class=\"o\">:</span> <span class=\"n\">DocumentUri</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">originRange</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Range</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">LocationLink</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mod</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">findModuleOf</span><span class=\"bp\">?</span> <span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">modUri</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">mod</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">modName</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">documentUriFromModule</span> <span class=\"n\">srcSearchPath</span> <span class=\"n\">modName</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>         <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">some</span> <span class=\"n\">uri</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">ranges</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">findDeclarationRanges</span><span class=\"bp\">?</span> <span class=\"n\">n</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">ranges</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">modUri</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ranges</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">modUri</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">ll</span> <span class=\"o\">:</span> <span class=\"n\">LocationLink</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">originSelectionRange</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">originRange</span><span class=\"bp\">?</span>\n      <span class=\"n\">targetUri</span> <span class=\"o\">:=</span> <span class=\"n\">modUri</span>\n      <span class=\"n\">targetRange</span> <span class=\"o\">:=</span> <span class=\"n\">ranges.range.toLspRange</span>\n      <span class=\"n\">targetSelectionRange</span> <span class=\"o\">:=</span> <span class=\"n\">ranges.selectionRange.toLspRange</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">return</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ll</span><span class=\"o\">]</span>\n  <span class=\"n\">return</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n</code></pre></div>\n<p>function <code>findModuleOf?</code> is invoked, defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">findModuleOf</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadEnv</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadError</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">declName</span> <span class=\"c1\">-- ensure declaration exists</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getModuleIdxFor</span><span class=\"bp\">?</span> <span class=\"n\">declName</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">modIdx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">allImportedModuleNames</span><span class=\"o\">[</span><span class=\"n\">modIdx.toNat</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>, which calls <code>getModuleIdxFor</code> defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getModuleIdxFor</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">ModuleIdx</span> <span class=\"o\">:=</span>\n  <span class=\"n\">env.const2ModIdx.find</span><span class=\"bp\">?</span> <span class=\"n\">declName</span>\n</code></pre></div>\n<p>which uses <code>env.const2ModIdx</code>.</p>\n<p><code>env.const2ModIdx</code> is of type <code>HashMap Name ModuleIdx</code>, which map each name to a module.</p>\n<p>Now it seems to me that for different files, we are using the same environment, and thus unavoidably there could be name clashing.</p>\n<p>My experiments show that if only one file is open, there is no such issue. Partially convinces me this is the issue.</p>\n<p>I guess there should be a separate <code>Environment</code> for each file?</p>\n<p>I'm just trying to see if my understanding of the origin of the bug is correct. Fixing the bug could be an overhaul though.</p>",
        "id": 425366998,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709835372
    },
    {
        "content": "<p>Technically I only started looking at the source code seriously today, so I could be totally wrong</p>",
        "id": 425368271,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709835831
    },
    {
        "content": "<p>I guess this is not a problem occurring in compilation because in compilation there is no sharing of <code>Environment</code>?</p>",
        "id": 425368407,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709835886
    },
    {
        "content": "<p>(This is my first time looking at this LSP server code.) There's not necessarily anything wrong with <code>locationLinksFromDecl</code> itself, since part of <code>MetaM</code> is the environment state. So long as the function is called with the <code>Environment</code> set correctly, it's looks like it should work fine.</p>",
        "id": 425368767,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709836006
    },
    {
        "content": "<p>I'm not suggesting <code>locationLinksFromDecl</code> is wrong though. I'm suggesting that <code>Environment</code>'s field <code>const2ModIdx</code> is not detailed enough. Maybe <code>HashMap (ModuleIdx, Name) ModuleIdx</code>?</p>",
        "id": 425369131,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709836148
    },
    {
        "content": "<p>Not only is there a separate <code>Environment</code> per file, but there are multiple checkpoints of the environment, from between every command, all saved in various <code>Lean.Elab.Command.State</code> objects.</p>",
        "id": 425369172,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709836169
    },
    {
        "content": "<p>I see.</p>",
        "id": 425369195,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709836180
    },
    {
        "content": "<p>Thanks a lot</p>",
        "id": 425369208,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709836187
    },
    {
        "content": "<p>Then the bug should be somewhere else</p>",
        "id": 425369331,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709836228
    },
    {
        "content": "<p>To help you with the search, in a function like <code>locationLinksOfInfo</code>, you can see code like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofTermInfo</span> <span class=\"n\">ti</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">ti.expr</span>\n    <span class=\"bp\">...</span>\n    <span class=\"k\">match</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Expr.const</span> <span class=\"n\">n</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">ci.runMetaM</span> <span class=\"n\">i.lctx</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">locationLinksFromDecl</span> <span class=\"n\">i</span> <span class=\"n\">n</span>\n    <span class=\"bp\">...</span>\n</code></pre></div>\n<p>The <code>runMetaM</code> function is what is setting up the Environment, among other things, from the data in <code>ci</code>.</p>",
        "id": 425369742,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709836388
    },
    {
        "content": "<p>Wow, thank you so much! I guess I need to figure out a way to print debug the lean server. I'm a newbie, lol.</p>",
        "id": 425369804,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709836427
    },
    {
        "content": "<p>Maybe it's worth logging information about <code>infoWithCtx</code> in <code>Lean.Server.FileWorker.handleDefinition</code>. For example, you could use the <code>map₂</code> field of <code>constants</code> in the context's <code>Environment</code> to deduce which environment you're looking at. The <code>map₂</code> field is for locally defined constants, rather than imported ones. There are probably better ways to debug this, but that's something that came to mind.</p>",
        "id": 425372356,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709837348
    },
    {
        "content": "<p>Thanks a lot! That’s extremely helpful!</p>",
        "id": 425372414,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709837374
    },
    {
        "content": "<p>Seems that I've found out the culprit. The server uses a global variable references to handle the request, thus causing the trouble.<br>\n<code>handleDefinition</code> is not the function actually being called.<br>\nIn <code>Watchdog.lean</code> the function <code>handleRequest</code> is called, then in the wierd if statement before the match statement</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">method</span> <span class=\"bp\">==</span> <span class=\"s2\">\"textDocument/definition\"</span> <span class=\"bp\">||</span> <span class=\"n\">method</span> <span class=\"bp\">==</span> <span class=\"s2\">\"textDocument/declaration\"</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">params</span> <span class=\"bp\">←</span> <span class=\"n\">parseParams</span> <span class=\"n\">TextDocumentPositionParams</span> <span class=\"n\">params</span>\n      <span class=\"k\">let</span> <span class=\"n\">definitions</span> <span class=\"bp\">←</span> <span class=\"n\">findDefinitions</span> <span class=\"n\">params</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"handleRequest method = {method} params = {params} defns = {ToJson.toJson definitions}\"</span>\n      <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">definitions.isEmpty</span> <span class=\"k\">then</span>\n        <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hOut.writeLspResponse</span> <span class=\"o\">⟨</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">definitions</span><span class=\"o\">⟩</span>\n        <span class=\"n\">return</span>\n    <span class=\"k\">match</span> <span class=\"n\">method</span> <span class=\"k\">with</span>\n</code></pre></div>\n<p>Just look at the invokation of <code>findDefinitions</code>, which goes to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">findDefinitions</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">TextDocumentPositionParams</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ServerM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Array</span> <span class=\"n\">Location</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">definitions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">path</span> <span class=\"o\">:=</span> <span class=\"n\">fileUriToPath</span><span class=\"bp\">?</span> <span class=\"n\">p.textDocument.uri</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">srcSearchPath</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">srcSearchPath</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">module</span> <span class=\"bp\">←</span> <span class=\"n\">searchModuleNameOfFileName</span> <span class=\"n\">path</span> <span class=\"n\">srcSearchPath</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">references</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">references.get</span>\n      <span class=\"n\">for</span> <span class=\"n\">ident</span> <span class=\"k\">in</span> <span class=\"n\">references.findAt</span> <span class=\"n\">module</span> <span class=\"n\">p.position</span> <span class=\"o\">(</span><span class=\"n\">includeStop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">definitionLocation</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">references.definitionOf</span><span class=\"bp\">?</span> <span class=\"n\">ident</span> <span class=\"n\">srcSearchPath</span> <span class=\"k\">then</span>\n          <span class=\"n\">definitions</span> <span class=\"o\">:=</span> <span class=\"n\">definitions.push</span> <span class=\"n\">definitionLocation</span>\n  <span class=\"n\">return</span> <span class=\"n\">definitions</span>\n</code></pre></div>\n<p>Notice that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">let</span> <span class=\"n\">references</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">references.get</span>\n      <span class=\"n\">for</span> <span class=\"n\">ident</span> <span class=\"k\">in</span> <span class=\"n\">references.findAt</span> <span class=\"n\">module</span> <span class=\"n\">p.position</span> <span class=\"o\">(</span><span class=\"n\">includeStop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">definitionLocation</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">references.definitionOf</span><span class=\"bp\">?</span> <span class=\"n\">ident</span> <span class=\"n\">srcSearchPath</span> <span class=\"k\">then</span>\n          <span class=\"n\">definitions</span> <span class=\"o\">:=</span> <span class=\"n\">definitions.push</span> <span class=\"n\">definitionLocation</span>\n</code></pre></div>\n<p>, the references are got from server context, the type of which is defined by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ServerContext</span> <span class=\"n\">where</span>\n    <span class=\"n\">hIn</span>            <span class=\"o\">:</span> <span class=\"n\">FS.Stream</span>\n    <span class=\"n\">hOut</span>           <span class=\"o\">:</span> <span class=\"n\">FS.Stream</span>\n    <span class=\"n\">hLog</span>           <span class=\"o\">:</span> <span class=\"n\">FS.Stream</span>\n    <span class=\"sd\">/-- Command line arguments. -/</span>\n    <span class=\"n\">args</span>           <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span>\n    <span class=\"n\">fileWorkersRef</span> <span class=\"o\">:</span> <span class=\"n\">IO.Ref</span> <span class=\"n\">FileWorkerMap</span>\n    <span class=\"sd\">/-- We store these to pass them to workers. -/</span>\n    <span class=\"n\">initParams</span>     <span class=\"o\">:</span> <span class=\"n\">InitializeParams</span>\n    <span class=\"n\">workerPath</span>     <span class=\"o\">:</span> <span class=\"n\">System.FilePath</span>\n    <span class=\"n\">srcSearchPath</span>  <span class=\"o\">:</span> <span class=\"n\">System.SearchPath</span>\n    <span class=\"n\">references</span>     <span class=\"o\">:</span> <span class=\"n\">IO.Ref</span> <span class=\"n\">References</span>\n</code></pre></div>\n<p>So references is a global variable, shared by all files (I believe with high confidence), then definitions are collected from this references global variable. The type of this global variable is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">References</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- References loaded from ilean files -/</span>\n  <span class=\"n\">ileans</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">Name</span> <span class=\"o\">(</span><span class=\"n\">System.FilePath</span> <span class=\"bp\">×</span> <span class=\"n\">Lsp.ModuleRefs</span><span class=\"o\">)</span>\n  <span class=\"sd\">/-- References from workers, overriding the corresponding ilean files -/</span>\n  <span class=\"n\">workers</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">Name</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Lsp.ModuleRefs</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>See the fields <code>ileans</code>,  a name is mapped to a file path and a collection of references.<br>\nHence, if two different set of compilations with clashing names exist for the same time, it causes problems.</p>",
        "id": 425464431,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709884047
    },
    {
        "content": "<p>Good diagnosis! Yes, that's one of the known issues with the References data structure. I was going to fix this until the next rc1 release :-)</p>",
        "id": 425467076,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1709885233
    },
    {
        "content": "<p>Lol. You know all along. But I did learn a lot.</p>",
        "id": 425468155,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709885725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466120\">Xiyu Zhai</span> has marked this topic as resolved.</p>",
        "id": 425468437,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709885859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> mentioned it to me recently. I hadn't diagnosed the issue myself yet!</p>\n<p>By the way, the original reason for why we prefer to use .ileans for go-to-definition was that we want go-to-definition to jump to the current location if the definition is from a file that the user edited, but hasn't saved or compiled yet (i.e. the current data isn't available via .oleans). Since we need to synchronize up-to-date .ilean data from the file workers to the watchdog anyways for other \"global\" requests, we also re-use them for go-to-definition if we have them available.</p>",
        "id": 425468901,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1709886053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466120\">Xiyu Zhai</span> has marked this topic as unresolved.</p>",
        "id": 425468997,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709886092
    },
    {
        "content": "<p>I understand the problem as user might use the same server to analyze two totally separate compilations, where there could be name clashes. There should be separate data for each \"package\".</p>",
        "id": 425469207,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709886172
    },
    {
        "content": "<p>In my own programming lauguage, basically everything is localized to a certain package, crate or module. I believe this is the same for rust-analyzer.</p>",
        "id": 425469321,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709886235
    },
    {
        "content": "<p>Btw, I'm curious about any plan of introducing fine-grained incremental computation system into the compilation system. In a fine-grained incremental computation compilation, change in each function affects others in a minimal sense. But this could be very complicated to implement.</p>",
        "id": 425469566,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709886345
    },
    {
        "content": "<p>This is on our <a href=\"https://lean-fro.org/about/roadmap/\">roadmap</a> and <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> continues to work on this topic. The first PR of several is at <a href=\"https://github.com/leanprover/lean4/pull/3014\">lean4#3014</a> :-)</p>",
        "id": 425470013,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1709886546
    }
]