[
    {
        "content": "<p>Hihi, just wanted to share a small little lean plugin I'd made recently, that implements Rocq's Deriving Such That mechanism in Lean: <a href=\"https://github.com/Gopiandcode/deriving-such-that\">https://github.com/Gopiandcode/deriving-such-that</a></p>\n<p>The idea is that you can construct a term and a proof that some property holds on that term simultaneously:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"n\">derive</span> <span class=\"n\">p</span> <span class=\"n\">such</span> <span class=\"n\">that</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">as</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">instantiate</span> <span class=\"bp\">?</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_add</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"c1\">-- produces 9</span>\n</code></pre></div>\n<p>(Lean doesn't seem to have tactics for instantiating MVars directly so I added one in this library)</p>\n<p>The corresponding page on Rocq's deriving mechanism: <a href=\"https://coq.inria.fr/doc/V8.18.0/refman/addendum/miscellaneous-extensions.html\">https://coq.inria.fr/doc/V8.18.0/refman/addendum/miscellaneous-extensions.html</a></p>",
        "id": 434380899,
        "sender_full_name": "Kiran",
        "timestamp": 1713538857
    },
    {
        "content": "<p>Is <code>case p =&gt; exact k * (n + m)</code> the same as your <code>instantiate</code> tactic?</p>",
        "id": 434607720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713722663
    },
    {
        "content": "<p>Ah, almost, the p is an mvar so case wouldn't work (unbound id p), so I wrote a tactic to allow instantiating mvars directly</p>",
        "id": 434638674,
        "sender_full_name": "Kiran",
        "timestamp": 1713752856
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"241754\">Kiran Gopinathan</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Port.20of.20Rocq's.20Deriving.20such.20that.20tactic/near/434638674\">said</a>:</p>\n<blockquote>\n<p>the p is an mvar so case wouldn't work (unbound id p)</p>\n</blockquote>\n<p>I'm pretty sure <code>case</code> usually operates on mvars. Are you confusing it with <code>cases</code>? <a href=\"https://github.com/haruhisa-enomoto/mathlib4-all-tactics/blob/main/all-tactics.md#case\">Here is some tactic documentation for <code>case</code>..</a></p>",
        "id": 434646899,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1713759359
    },
    {
        "content": "<p>I think Kiran is right that this syntax won't work if it's an mvar which is not a goal</p>",
        "id": 434647074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713759473
    },
    {
        "content": "<p>although that's pretty rare</p>",
        "id": 434647125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713759486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Port.20of.20Rocq's.20Deriving.20such.20that.20tactic/near/434647074\">said</a>:</p>\n<blockquote>\n<p>I think Kiran is right that this syntax won't work if it's an mvar which is not a goal</p>\n</blockquote>\n<p>Okay, so I've updated the plugin so that the mvar is added to the goals, and so that <code>case</code> is supported! </p>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  for the suggestion.</p>\n<p>Actually adding the generated mvar was a little bit of a challenge and took a couple of tries, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> could I ask if there was an easier way of doing this?</p>",
        "id": 434718073,
        "sender_full_name": "Kiran",
        "timestamp": 1713783669
    },
    {
        "content": "<p>I'm not sure what you did, the usual thing is to just call <code>setGoals [mvar]</code> or otherwise add it to the list of goals in some way</p>",
        "id": 434718492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713783812
    },
    {
        "content": "<p>I was adding the mvar to the list of goals, but case p would still not work and complain that the identifier was not found</p>",
        "id": 434736762,
        "sender_full_name": "Kiran",
        "timestamp": 1713789197
    },
    {
        "content": "<p>(to be clear, I think your <code>instantiate</code> notation is quite nice despite the fact we have an existing spelling, similar to how we have both <code>obtain pat := val</code> as well as <code>rcases val with pat</code>)</p>",
        "id": 434737126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713789284
    },
    {
        "content": "<p>My command was expanding into a definition of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"bp\">...</span><span class=\"o\">:</span> <span class=\"kd\">by</span>\n    <span class=\"n\">add_to_goal</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"c1\">-- (adds mvar with matching name to goals)</span>\n     <span class=\"n\">exact</span> <span class=\"bp\">$</span><span class=\"n\">proof</span>\n</code></pre></div>\n<p>Where $proof is a term containing the proof, maybe case-ing on id</p>",
        "id": 434737459,
        "sender_full_name": "Kiran",
        "timestamp": 1713789377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Port.20of.20Rocq's.20Deriving.20such.20that.20tactic/near/434737126\">said</a>:</p>\n<blockquote>\n<p>(to be clear, I think your <code>instantiate</code> notation is quite nice despite the fact we have an existing spelling, similar to how we have both <code>obtain pat := val</code> as well as <code>rcases val with pat</code>)</p>\n</blockquote>\n<p>Mhh yes, thanks! I wanted to get rid of it though as it seems like people don't instantiate mvars directly, but now that you mention it, it might be a nice tactic by itself.</p>",
        "id": 434879036,
        "sender_full_name": "Kiran",
        "timestamp": 1713834507
    },
    {
        "content": "<p>Could <code>where</code> be a tactic?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"n\">myLemma</span> <span class=\"n\">arg1</span> <span class=\"n\">arg2</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">x</span> <span class=\"n\">arg3</span> <span class=\"bp\">?</span><span class=\"n\">y</span>\n<span class=\"n\">where</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">longish</span> <span class=\"n\">expr</span>\n<span class=\"n\">where</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">thing</span> <span class=\"k\">else</span>\n</code></pre></div>",
        "id": 434894767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1713843233
    },
    {
        "content": "<p>For that you should be able to do <code>case x =&gt; exact some longish expr</code> in place of <code>where x := ...</code></p>",
        "id": 434894978,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713843328
    },
    {
        "content": "<p>Right, but I like the look of <code>where</code>. It is closer to what you would say informally</p>",
        "id": 434895106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1713843386
    },
    {
        "content": "<p>I think this is closely related to the <code>on_sides</code> discussion about side-goals</p>",
        "id": 434918720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713856591
    }
]