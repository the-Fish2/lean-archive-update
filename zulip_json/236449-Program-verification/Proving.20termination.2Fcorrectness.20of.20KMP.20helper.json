[
    {
        "content": "<p>I'm trying out Lean4 so I'm proving some stuff as practice. I'm trying to implementing KMP, but for now it's just the function that calculates how much to jump forward while string searching. Below is what I tried.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">Implementation details:</span>\n<span class=\"cm\">(boundary W i) gives the length of the longest prefix which is also a proper suffix of W[0:i].</span>\n<span class=\"cm\">(boundary W 0) is defined to be -1</span>\n\n<span class=\"cm\">Note that (boundary W i) &gt;= (boundary W (i-1)) + 1</span>\n\n<span class=\"cm\">(boundary helper W i j) gives the length of the longest prefix which is also a proper suffix of W[0:i],</span>\n<span class=\"cm\">given that</span>\n<span class=\"cm\">- j is the length of some prefix which is also a suffix of W[0:i-1]</span>\n<span class=\"cm\">- we tried extending all prefixes which are also suffixes of W[0:i-1], longer than j, and it didn't work</span>\n\n<span class=\"cm\">(boundary W 0) is defined to be -1</span>\n<span class=\"cm\">(boundary W 1) is calculatable as 0</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">boundary</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">W.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">boundary_zero_eq_neg_one</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">boundary</span> <span class=\"n\">W</span> <span class=\"n\">Nat.zero</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"n\">W.length</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"c1\">-- boundary.casesOn</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"k\">have</span> <span class=\"n\">boundary_loop_inv</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">W.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">boundary</span> <span class=\"n\">W</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> induction' i with zero succ</span>\n<span class=\"cm\">      rw [boundary_zero_eq_neg_one W]</span>\n<span class=\"cm\">      linarith-/</span>\n      <span class=\"gr\">sorry</span>\n      <span class=\"c\">/-</span><span class=\"cm\">have hyp : boundary W (Nat.succ a) h + 1 ≤ (Nat.succ a) := by</span>\n<span class=\"cm\">        exact (ha h)-/</span>\n    <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span> <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">boundary_hyp</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">W.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">linarith</span>\n      <span class=\"k\">have</span> <span class=\"n\">boundary_helper_hyp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">boundary</span> <span class=\"n\">W</span> <span class=\"n\">k</span> <span class=\"n\">boundary_hyp</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span>  <span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">have</span> <span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">boundary</span> <span class=\"n\">W</span> <span class=\"n\">k</span> <span class=\"n\">boundary_hyp</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"k\">have</span> <span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">boundary</span> <span class=\"n\">W</span> <span class=\"n\">k</span> <span class=\"n\">boundary_hyp</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">boundary_loop_inv</span> <span class=\"n\">W</span> <span class=\"n\">k</span> <span class=\"n\">boundary_hyp</span><span class=\"o\">)</span>\n          <span class=\"n\">linarith</span>\n        <span class=\"k\">have</span> <span class=\"n\">hyp2</span> <span class=\"o\">:</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"gr\">sorry</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hyp</span> <span class=\"n\">hyp2</span><span class=\"o\">)</span>\n      <span class=\"n\">boundary_helper</span> <span class=\"n\">W</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">boundary</span> <span class=\"n\">W</span> <span class=\"n\">k</span> <span class=\"n\">boundary_hyp</span><span class=\"o\">)</span> <span class=\"n\">boundary_helper_hyp</span>\n    <span class=\"o\">}</span>\n  <span class=\"kd\">def</span> <span class=\"n\">boundary_helper</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">W.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">W.take</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"n\">W.take</span> <span class=\"o\">(</span><span class=\"n\">Int.toNat</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span> <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">W.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"k\">have</span> <span class=\"n\">boundary_helper_hyp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">boundary</span> <span class=\"n\">W</span> <span class=\"n\">k</span> <span class=\"n\">hyp</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"n\">boundary_helper</span> <span class=\"n\">W</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">boundary</span> <span class=\"n\">W</span> <span class=\"n\">k</span> <span class=\"n\">hyp</span><span class=\"o\">)</span> <span class=\"n\">boundary_helper_hyp</span>\n    <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">termination_by</span>\n  <span class=\"n\">boundary</span> <span class=\"n\">W</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">boundary_helper</span> <span class=\"n\">W</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Int.toNat</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"k\">have</span> <span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"c\">/-</span><span class=\"cm\">have termination_hyp1 (k : Nat) : (k, k) &lt; (Nat.succ k, Nat.succ k) := by</span>\n<span class=\"cm\">    sorry</span>\n<span class=\"cm\">  have termination_hyp2 : (Nat.succ k, Int.toNat (boundary W k boundary_hyp)) &lt; (Nat.succ k, Nat.succ k) := by</span>\n<span class=\"cm\">    sorry</span>\n<span class=\"cm\">  have termination_hyp3 : (boundary W k hyp) + 1 ≤ k := by</span>\n<span class=\"cm\">    sorry-/</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I tried running the definition with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"s2\">\"123123123\"</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">#eval</span> <span class=\"n\">boundary</span> <span class=\"s2\">\"123123123\"</span> <span class=\"mi\">4</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>expected value: 1, actual value: 0</p>\n<p>Also, in the decreasing_by block I'm getting a goal of the following (Prod.Lex):<br>\n<a href=\"/user_uploads/3121/hfl_DvqxhfBStU5w66LdqnL9/image.png\">image.png</a><br>\nI'm confused because I'm not sure why Lean is getting me to prove (0, 0) &lt; (i, i). It's false because i could be 0.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hfl_DvqxhfBStU5w66LdqnL9/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/hfl_DvqxhfBStU5w66LdqnL9/image.png\"></a></div>",
        "id": 418415592,
        "sender_full_name": "Clarence Chew",
        "timestamp": 1706359997
    },
    {
        "content": "<p>Update: I rewrote it in this form, it seems more promising to prove the required results to demonstrate termination.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">boundary</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">W.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">...</span>\n<span class=\"n\">where</span> <span class=\"n\">boundary_helper</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">W.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">...</span>\n<span class=\"n\">termination_by</span>\n  <span class=\"bp\">...</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 418597215,
        "sender_full_name": "Clarence Chew",
        "timestamp": 1706521335
    }
]