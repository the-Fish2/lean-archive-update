[
    {
        "content": "<p>I have been stuck on this for a few days.  I'm trying to prove that the length of a cycle walk must be at least 3, and I've approached this by cases and contradiction.  I'm having trouble getting a contradiction in the case where the length of the cycle is 2.  Here is a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.AdjMatrix</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">Walk</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">G.Adj</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isCycle_length_ge_three</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.Walk</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.IsCycle</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">p.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">isCycle_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">p.length</span> <span class=\"o\">:=</span> <span class=\"n\">zero_le</span> <span class=\"n\">p.length</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p.length</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">by_cases</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">p.length</span>\n  <span class=\"bp\">.</span> <span class=\"n\">by_contra</span> <span class=\"n\">h3</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_le</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_iff</span><span class=\"o\">,</span> <span class=\"n\">LE.le.ge_iff_eq</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n    <span class=\"k\">have</span> <span class=\"n\">hv0</span> <span class=\"o\">:</span> <span class=\"n\">p.getVert</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">p.getVert_zero</span>\n    <span class=\"k\">have</span> <span class=\"n\">hv2</span> <span class=\"o\">:</span> <span class=\"n\">p.getVert</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">p.getVert_of_length_le</span> <span class=\"o\">(</span><span class=\"n\">Eq.ge</span> <span class=\"n\">h3</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">p.IsTrail</span> <span class=\"o\">:=</span> <span class=\"n\">h.1</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">isTrail_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ht</span>\n    <span class=\"k\">have</span> <span class=\"n\">hadj1</span> <span class=\"o\">:</span> <span class=\"n\">G.Adj</span> <span class=\"o\">(</span><span class=\"n\">p.getVert</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p.getVert</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n     <span class=\"n\">p.adj_getVert_succ</span> <span class=\"o\">(</span><span class=\"n\">LT.lt.trans_le</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">h1</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hv0</span><span class=\"o\">,</span> <span class=\"n\">adj_iff_exists_edge</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hadj1</span>\n    <span class=\"k\">have</span> <span class=\"n\">hadj2</span> <span class=\"o\">:</span> <span class=\"n\">G.Adj</span> <span class=\"o\">(</span><span class=\"n\">p.getVert</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p.getVert</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n     <span class=\"n\">p.adj_getVert_succ</span> <span class=\"o\">(</span><span class=\"n\">LT.lt.trans_le</span> <span class=\"n\">one_lt_two</span> <span class=\"n\">h2</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hv2</span><span class=\"o\">,</span> <span class=\"n\">adj_iff_exists_edge</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hadj2</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- I don't know how to continue here, I've tried accumulating as many seemingly helpful hyptheses as I can.</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The idea is to prove that there must be duplicates in the edges of the walk <code>p</code>, which would contradict <code>ht</code>, but I have no idea how to express this idea in lean.</p>\n<p>Any help is appreciated!</p>",
        "id": 426651047,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1710461411
    },
    {
        "content": "<p>I have some old Lean 3 code for this that I never got around to contributing... <a href=\"https://github.com/leanprover-community/mathlib/compare/kmill_hamiltonian#diff-8cbd1334f64a439bb58db4d1ae499ef68521aa7547630fec172e6b7b01b11b77R508\">https://github.com/leanprover-community/mathlib/compare/kmill_hamiltonian#diff-8cbd1334f64a439bb58db4d1ae499ef68521aa7547630fec172e6b7b01b11b77R508</a></p>",
        "id": 426655858,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710464516
    },
    {
        "content": "<p>That's awesome! Do you mind if I port it to mathlib4?</p>",
        "id": 426656156,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1710464731
    },
    {
        "content": "<p>Go ahead!</p>",
        "id": 426656765,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710465101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"580947\">Rida Hamadani</span> has marked this topic as resolved.</p>",
        "id": 426656880,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710465164
    },
    {
        "content": "<p>Actually, here's a port, sorry:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">IsCycle.three_le_length</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G.Walk</span> <span class=\"n\">v</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c.IsCycle</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">c.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨⟨</span><span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hc'</span><span class=\"o\">⟩,</span> <span class=\"n\">hc''</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hc</span>\n  <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hc'</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hc</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">SimpleGraph.Walk.length_cons</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">omega</span>\n</code></pre></div>\n<p>I thought it would be nice to clean it up for Lean 4.</p>",
        "id": 426657272,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710465424
    },
    {
        "content": "<p>This is much better than what I would have written</p>",
        "id": 426657395,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1710465508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/252551-graph-theory/topic/.E2.9C.94.20Cycles.20lengths.20is.20at.20least.203/near/426657272\">said</a>:</p>\n<blockquote>\n<p>Actually, here's a port, sorry:</p>\n</blockquote>\n<p>Do you plan to PR this into mathlib? I've been using it in multiple proofs, I think it would be useful there.</p>",
        "id": 429638308,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1711454067
    },
    {
        "content": "<p>I will talk for Kyle here, but when a Lean guru gives you working idiomatic code you are usually more than welcome to PR it yourself.</p>\n<ol>\n<li>You know it's good code, so you will go through the PR review process without worrying about the \"quality\" part</li>\n<li>Said Lean guru is usually very busy with their own stuff, so won't PR it in any reasonable time frame</li>\n</ol>",
        "id": 429645140,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711456560
    },
    {
        "content": "<p>In that case, Kyle is employed by the FRO to work on improving Lean and I haven't managed to get him to review any of my PRs in several months.</p>",
        "id": 429645238,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711456592
    },
    {
        "content": "<p>Great! Thank you for clarifying, I wasn't sure about the etiquette surrounding this.</p>",
        "id": 429645502,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1711456692
    },
    {
        "content": "<p>Thanks for contributing it! (Once I manage to get through grading this giant stack of calculus final exams, I hope to finally get around to reviewing some of the backlog this week...)</p>",
        "id": 429696535,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711471254
    },
    {
        "content": "<p>You can use <code>Co-authored-by</code> to give credit. I believe the pull request template has instructions for this.</p>",
        "id": 429763333,
        "sender_full_name": "Chris Wong",
        "timestamp": 1711500955
    },
    {
        "content": "<p>Thanks, I didn't know about that, I'll keep it in mind!</p>",
        "id": 429793745,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1711521744
    }
]