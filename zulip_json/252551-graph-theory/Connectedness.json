[
    {
        "content": "<p>Why is <code>SimpleGraph.Connected</code> not a class?</p>",
        "id": 446916796,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1719329318
    },
    {
        "content": "<p>Why would it be?</p>",
        "id": 446917541,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719329478
    },
    {
        "content": "<p>The one reason I see for it to be a typeclass would be if you reasoned about the metric space induced by the simple graph. We don't have this yet, and it would need to go on a type synonym, so I'm not sure having <code>SimpleGraph.Connected</code> being a typeclass (rather than using <code>Fact G.Connected</code>) is particularly advised</p>",
        "id": 446918105,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719329595
    },
    {
        "content": "<p>I'm trying to define, for each <code>G : SimpleGraph V</code> and  vertex  <code>a : V</code>, a partial ordering on (a type synonym for) <code>V</code>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≤</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\le y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> means that there is a shortest path from <code>a</code> to <code>y</code> that contains <code>x</code>. I'd like to use all the typeclass machinery for orderings (This is a Nat-graded order where covering implies adjacency etc etc), but things are only nice if the graph is connected.</p>",
        "id": 446918167,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1719329608
    },
    {
        "content": "<p><code>Fact</code> works of course, but what is the downside to it being a class?</p>",
        "id": 446918306,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1719329636
    },
    {
        "content": "<p>An argument against it is that graphs tend to be manipulated using algebraic rules, but the typeclass system doesn't carry instances across equalities automatically. You can lose instances after rewriting.</p>\n<p>Another argument against is that theorems that take Connected instances would only apply if you actually have a Connected instance in context. For example, if you <code>apply</code> such a theorem you wouldn't get a Connected goal, it would just fail.</p>\n<p>On the other hand, <em>some</em> graphs are special, and it makes sense to permanently associate the fact it is Connected to it.</p>",
        "id": 446962460,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719339776
    },
    {
        "content": "<p>For you application, can't your type synonym include the hypothesis that G is connected?</p>",
        "id": 446962537,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719339798
    }
]