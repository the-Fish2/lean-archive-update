[
    {
        "content": "<p>Hello,<br>\nI would like to formalize the Hoffman-Singleton Theorem, statement and proof.  I don't have any experience writing proofs through lean other than very simple statements, and have no idea what are the best practices, so I was wondering if there is any problem or room for improvement with my current statement of the theorem, before I jump into writing a proof for it.</p>\n<p>Here is the statement so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">hoffman_singleton</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">G.Adj</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">G.IsRegularOfDegree</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">G.girth</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">57</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 420804891,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1707575919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> has marked this topic as resolved.</p>",
        "id": 420809062,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707579327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> has marked this topic as unresolved.</p>",
        "id": 420809070,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707579331
    },
    {
        "content": "<p>Is this related to strongly regular graphs? There's some strongly regular graph stuff but it's very minimal</p>",
        "id": 420813773,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1707583056
    },
    {
        "content": "<p>That looks like the statement of a theorem (although I can't comment on whether it's the Hoffmann-Singleton theorem until you give me a maths statement of that theorem) -- of course you shouldn't just leap straight into a proof of it, there's an art to all this :-) It's far better to have twenty lemmas with five line proofs than one lemma with a 100 line proof which gets very tedious to write. So your next step is to break the proof up into small chunks. This is a mathematical exercise, not a lean one.</p>",
        "id": 420816891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707585254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303889\">Alena Gusakov</span> <a href=\"#narrow/stream/252551-graph-theory/topic/Hoffman-Singleton.20Theorem/near/420813773\">said</a>:</p>\n<blockquote>\n<p>Is this related to strongly regular graphs? There's some strongly regular graph stuff but it's very minimal</p>\n</blockquote>\n<p>Yes, the first step of the proof is to show that G is strongly regular, I'll make use of mathlib's strongly regular graphs, thank you.</p>",
        "id": 420822458,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1707589872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/252551-graph-theory/topic/Hoffman-Singleton.20Theorem/near/420816891\">said</a>:</p>\n<blockquote>\n<p>I can't comment on whether it's the Hoffmann-Singleton theorem until you give me a maths statement of that theorem</p>\n</blockquote>\n<p>The theorem states that if a regular graph of degree r and girth 5 has r²+1 vertices, then r ∈ {2, 3, 7, 57}.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/252551-graph-theory/topic/Hoffman-Singleton.20Theorem/near/420816891\">said</a>:</p>\n<blockquote>\n<p>So your next step is to break the proof up into small chunks. This is a mathematical exercise, not a lean one.</p>\n</blockquote>\n<p>Thank you, I will do that.  In fact, we show the graph to be strongly regular first, it is convenient that the definition is already implemented in mathlib!</p>",
        "id": 420823057,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1707590385
    },
    {
        "content": "<p>As a lemma to the Hoffman-Singleton theorem, I'm trying to state and proof the fact that </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>I</mi><mi>n</mi></msub><mo>+</mo><mtext>Adj</mtext><mrow><mo fence=\"true\">(</mo><mi>G</mi><mo fence=\"true\">)</mo></mrow><mo>+</mo><mtext>Adj</mtext><mrow><mo fence=\"true\">(</mo><msup><mi>G</mi><mi>c</mi></msup><mo fence=\"true\">)</mo></mrow><mo>=</mo><msub><mi>J</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">I_n + \\text{Adj}\\left(G\\right) + \\text{Adj}\\left(G^c\\right) = J_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Adj</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Adj</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>(which sounds like something mathlib should have), this mwe represents how I stated it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.AdjMatrix</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">G.Adj</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">allOnes</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">adjMatrix_plus_adjMatrix_compl_eq</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">+</span> <span class=\"n\">G.adjMatrix</span> <span class=\"n\">ℕ</span> <span class=\"bp\">+</span> <span class=\"n\">compl</span> <span class=\"o\">(</span><span class=\"n\">G.adjMatrix</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">allOnes</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But the problem here is that:</p>\n<ul>\n<li>I had to define the all-ones and the unit matrices myself.  Ideally, I would like to use such definitions from mathlib.</li>\n<li>I don't like the fact that the theorem is defined as addition between <code>Matrix V V ℕ</code>'s instead of  <code>Matrix n n ℕ</code>'s where <code>n = Fintype.card V</code>, it doesn't feel \"natural\".</li>\n</ul>\n<p>What is the best way to address these problems?</p>",
        "id": 421555219,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1707955369
    },
    {
        "content": "<p>The unit matrix is simply written <code>1</code>. I'm not sure if we have the all-ones matrix...</p>",
        "id": 421571126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707965888
    },
    {
        "content": "<p>the all ones matrix is <code>fun _ _ =&gt; 1</code>, I didn't see a definition for this in a quick skim</p>",
        "id": 421571333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707966032
    },
    {
        "content": "<p>To address your other point: if you use <code>n</code>, then you need to explain which vertex corresponds to row/column 1,2,3,...</p>",
        "id": 421571370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707966065
    },
    {
        "content": "<p>People tend to gloss over this on paper. You can choose an ordering of the vertices, but that quickly becomes annoying</p>",
        "id": 421571492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707966134
    },
    {
        "content": "<p>I see, that makes sense.  Thank you!</p>",
        "id": 421594953,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1707981512
    },
    {
        "content": "<p>Note that <code>instance allOnes...</code> is wrong because <code>Matrix</code> isn't a <code>class</code>. Use <code>abbrev</code> instead</p>",
        "id": 421595097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707981605
    },
    {
        "content": "<p>I skimmed quickly through the \"Theorem Proving in Lean4\" Manual and couldn't find anything about <code>abbrev</code>.  So to ask for a fishing rod instead of a fish, is there a documentation that explains things such as <code>abbrev</code>, <code>class</code>, <code>notation</code>, etc.</p>",
        "id": 421597318,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1707982992
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> certainly has stuff about classes and notation. <code>abbrev</code> is a reducible inline definition</p>",
        "id": 421600148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707984498
    },
    {
        "content": "<p>I proved that</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>I</mi><mi>n</mi></msub><mo>+</mo><mtext>Adj</mtext><mrow><mo fence=\"true\">(</mo><mi>G</mi><mo fence=\"true\">)</mo></mrow><mo>+</mo><mtext>Adj</mtext><mrow><mo fence=\"true\">(</mo><msup><mi>G</mi><mi>c</mi></msup><mo fence=\"true\">)</mo></mrow><mo>=</mo><msub><mi>J</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">I_n + \\text{Adj}\\left(G\\right) + \\text{Adj}\\left(G^c\\right) = J_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Adj</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Adj</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>Is this statement in scope of mathlib? I feel like it belongs to the <code>Compl</code> section of this file:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Combinatorics/SimpleGraph/AdjMatrix.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Combinatorics/SimpleGraph/AdjMatrix.lean</a></p>\n<p>If yes, I would like to request write access to non-master branches, and I'll send my proof here in order to get feedback on it before doing any PRs.</p>",
        "id": 422059168,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1708222964
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 423042730,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1708703407
    },
    {
        "content": "<p>What is your GitHub username? Don't hesitate to open a (draft ?) PR right away, it's much easier to review code on GitHub than on Zulip.</p>",
        "id": 423043468,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708703619
    },
    {
        "content": "<p>Ah, it's in your profile. Give me a second</p>",
        "id": 423043531,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708703636
    },
    {
        "content": "<p>Invitation sent!</p>",
        "id": 423043718,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708703697
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 423043812,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1708703727
    }
]