[
    {
        "content": "<p>I am playing around with <code>RepresentationTheory.FdRep</code>, which defines (finite dimensional) representations as a (bundled) action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> on a finitely generated module <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mi mathvariant=\"normal\">/</mi><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">V/k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, so in Lean code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">FdRep</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How should I construct/define the type of a subrepresentation, i.e. a submodule of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mi mathvariant=\"normal\">/</mi><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">V/k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> compatible with the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>-action? I was guessing to do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">FdRep</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hW</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsSubmodule</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But there is no mix-in (I think that's what it's called) for <code>IsSubmodule</code>. \\subset doesn't work since I also need to preserve the module structure right, and defining <code>W</code> as a <code>: Submodule k V</code> plus it's <code>G</code>-stable means well I can't use the FdRep API I think.</p>",
        "id": 442933800,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1717634084
    },
    {
        "content": "<p>I can't find any \"sub-action\" either, unless it's some abstract nonsense hidden in CategoryTheory.&lt;10 folders deep&gt;.&lt;5 namespace deep&gt;</p>",
        "id": 442933889,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1717634132
    },
    {
        "content": "<p>I tried <code>W : Action (Subobject V.V) (MonCat.of G)</code> (just guessing), and while <code>Subobject V.V</code> is a <code>Category</code>, it's not a <code>LargeCategory</code>.</p>",
        "id": 442934673,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1717634498
    },
    {
        "content": "<p>I should have Zulip'ed harder, but there was <a href=\"#narrow/stream/116395-maths/topic/Subrepresentations/near/287513987\">this thread</a> which defined <code>subrepresentation</code> (Lean 3) but was never pushed upstream.</p>",
        "id": 442936000,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1717635078
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/compare/master...representation_theory_winstonyin\">https://github.com/leanprover-community/mathlib/compare/master...representation_theory_winstonyin</a> There are 3000 lines of un-upstreamed code here</p>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> <span class=\"user-mention\" data-user-id=\"329754\">@Antoine Labelle</span> pinging because you two are the main author of the RepresentationTheory library.</p>",
        "id": 442936370,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1717635213
    },
    {
        "content": "<p>I just looked at the proof of Maschke's Theorem, and I realised that (if I understand correctly) a subrepresentation is written as <code>Submodule (MonoidAlgebra k G) V</code>, i.e. a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>G</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[G]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">G</span><span class=\"mclose\">]</span></span></span></span>-submodule. Is that correct?</p>",
        "id": 442946451,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1717639494
    },
    {
        "content": "<p>Okay I kind of understand, so this \"works\" because <code>[Module (MonoidAlgebra k G) V]</code>, and there is <code>equivalenceModuleMonoidAlgebra</code> to convert between this hypothesis and <code>... V : Rep k G</code></p>",
        "id": 442947874,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1717640200
    },
    {
        "content": "<p>The issue with representation theory is that there are two ways to set it up -- either as the theory of kG-modules via <code>[Module kG V]</code> or using the language of category theory via <code>Rep</code> and <code>fdRep</code>, and we went with category theory and now every undergraduate who comes along is confused by it. In set theory there's such a thing as a subset. In type theory we emulate this via <code>Set</code> and make second-class citizens (terms not types) which we then coerce to types if we want to think of them as modules and not submodules. In category theory an exact translation of the concept doesn't exist because objects of categories don't have elements as far as the theory is concerned so the literal concept of subset makes no sense. However if you're thinking categorically, which many undergraduates aren't, you realise that you can just get away with a monic morphism because up to isomorphism (which is all you can talk about in category theory anyway) a submodule is the same thing as a monic morphism in this category.</p>",
        "id": 442977170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717654723
    },
    {
        "content": "<p>Basically category theory is dropping enough structure to make the theory the same as far as an expert is concerned but making the basics impenetrable for undergraduates. I've seen this with my own eyes before (representation theory projects in my class usually end up being given up on)</p>",
        "id": 442977615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717654951
    },
    {
        "content": "<p>Thanks for the explanation about the set ups for rep theory, it's kind of inevitable due to Mathlib's philosophy I guess. But I think the issue about undergraduates finding it confusing can be (hopefully) resolved by writing better API to translate between the two set ups, plus having a tutorial on how to translate statements, e.g. a chapter on MIL. I can try to help with that once (1) I understand the math theory a bit better and (2) I understand the Mathlib setup a lot better</p>",
        "id": 443076054,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1717684643
    },
    {
        "content": "<p>Integrals are set up as Borel integrals (I think?) but <code>IntervalIntegral</code> makes them usable for say number theory lol</p>",
        "id": 443076791,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1717684840
    }
]