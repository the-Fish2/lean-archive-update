[
    {
        "content": "<p>How to do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">magic_apply</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- α β : Type</span>\n  <span class=\"c1\">-- f : α → β</span>\n  <span class=\"c1\">-- a b : α</span>\n  <span class=\"c1\">-- h : f a = f b</span>\n</code></pre></div>\n<p>Right now I have to do: <code>have h' : (h a = h b) := by rw [h]; clear h.</code> but when <code>a</code> and <code>b</code> is very long this is not very pretty.</p>",
        "id": 430920942,
        "sender_full_name": "Casavaca",
        "timestamp": 1712121358
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ApplyFun</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- α β : Type</span>\n  <span class=\"c1\">-- f : α → β</span>\n  <span class=\"c1\">-- a b : α</span>\n  <span class=\"c1\">-- h : f a = f b</span>\n</code></pre></div>",
        "id": 430922099,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712122265
    },
    {
        "content": "<p>Maybe also <code>apply f at h</code>?</p>",
        "id": 430925160,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712124328
    },
    {
        "content": "<p>You can also use <code>replace h := congr(f $h)</code>. Personally, I think this is more flexible.</p>\n<blockquote>\n<p>Maybe also <code>apply f at h</code>?</p>\n</blockquote>\n<p>No, this doesn't work; <code>apply f at h</code> is the same as <code>replace h := f h</code> which is not correct.</p>",
        "id": 431198682,
        "sender_full_name": "Jz Pan",
        "timestamp": 1712189479
    },
    {
        "content": "<p><code>apply_fun</code> looks very useful... in term mode you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=congrArg#doc\">docs#congrArg</a></p>",
        "id": 431202638,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712192177
    },
    {
        "content": "<p><code>apply_fun</code> can handle some dependent situations that <code>congrArg</code> can't, like if there's a <code>DecidableEq</code> or <code>Fintype</code> argument that comes after. (In term mode, <code>congr(f $h)</code> can handle similar things as <code>apply_fun</code>. In simpler cases, it's the same as <code>congrArg f h</code>. This <code>congr(...)</code> thing also generalizes, for example <code>congr($h1 + $h2 + $h3)</code> to get <code>a1 + a2 + a3 = b1 + b2 + b3</code> for <code>h1 : a1 = b1</code>, etc.)</p>",
        "id": 431203825,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712193051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tactic.20for.20applying.20a.20function.20to.20equation.20in.20hypothesis.3F/near/431203825\">said</a>:</p>\n<blockquote>\n<p>for example <code>congr($h1 + $h2 + $h3)</code> to get <code>a1 + a2 + a3 = b1 + b2 + b3</code> for <code>h1 : a1 = b1</code>, etc.)</p>\n</blockquote>\n<p>So <code>congr</code> can do the things <code>linear_combination</code> can do?</p>",
        "id": 431694127,
        "sender_full_name": "Jz Pan",
        "timestamp": 1712427691
    },
    {
        "content": "<p>I think <code>linear_combination</code> also moves stuff between the left and right hand sides, e.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linear_combination</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 431694264,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712427830
    },
    {
        "content": "<p><code>congr(...)</code> and <code>linear_combination</code> do have a slightly intertwined history. When <code>linear_combination</code>'s syntax was being designed a few years ago, there were thoughts about what the general congruence syntax could be, but <code>linear_combination</code> can take advantage of what linear combinations look like, to be able to use proofs right in the term without any special syntax. Heather Macbeth then were talking about this again last year, inspired by the metaprogramming possibilities of Lean 4, and we thought about whether we could get a general congruence syntax to work (imagine <code>congr(h1 + h2 + h3)</code>) and maybe use this to implement other tactics, but eventually it was clear it would be much more reliable to write it with <code>$</code> prefixes. Unlike <code>linear_combination</code>, the <code>congr(...)</code> term aims to be able to handle arbitrary Lean expressions.</p>\n<p>By the way, the <code>congrm</code> tactic uses <code>congr(...)</code> under the hood, where <code>congrm ?_ + ?_ + ?_</code> turns into <code>refine congr($?_ + $?_ + $?_)</code>.</p>",
        "id": 431695348,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712428569
    },
    {
        "content": "<p>The familiar <code>$</code> prefix reminds me of environmental variables in bash script <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 431699212,
        "sender_full_name": "Jz Pan",
        "timestamp": 1712431323
    },
    {
        "content": "<p>The reason that <code>congr(...)</code> uses it is to have uniformity with antiquotations in syntax quotations and in <code>Qq</code> expression quotations (re-using <code>$</code> also saves us from needing to introduce our own global notation). I'm not sure why Lean chose <code>$</code> for antiquotations, but it's certainly used in a number of languages as a variable sigil! It's helpful leaning on that familiarity.</p>",
        "id": 431699516,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712431600
    }
]