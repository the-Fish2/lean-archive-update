[
    {
        "content": "<p>Suppose L is a vector space of two dimension.I am trying to prove that with generators x,y,the Lie bracket is defined as either trivial or [x,y]=y,i.e,(L is a Lie algebra) . and for the latter case,i want to apply a decomposition,such that [x,y]=r_1<em>x+r_2</em>y,that is,I need to obtain precise r_1 and r_2,how can i do it?</p>",
        "id": 417401103,
        "sender_full_name": "Eddy Liu",
        "timestamp": 1706001253
    },
    {
        "content": "<p>Can you formalise the <em>statement</em> of what you're trying to do in Lean? See <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 417402192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706001609
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basis.VectorSpace</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Dimension.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Lie.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LieRing</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LieAlgebra</span> <span class=\"n\">V</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"n\">L</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"bp\">⁅</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I have checked the document and formalise my proposition for one dimension.but for 2 it seems hard to formalise and prove?</p>",
        "id": 417404572,
        "sender_full_name": "Eddy Liu",
        "timestamp": 1706002400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"685351\">@Eddy Liu</span> Nice question! The Lean code you give is for dim=1.</p>\n<p>To apply the decomposition into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>r</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><msub><mi>r</mi><mn>2</mn></msub><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">r_1 x + r_2 y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> you will need to use the API for <code>Basis</code>. It might not be completely trivial, because we very rarely work with explicit low-dimensional vector spaces.</p>",
        "id": 417410469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706004290
    },
    {
        "content": "<p>Also, minor nitpick about notation, but why do you call the field <code>V</code> instead of <code>K</code> or <code>F</code>? Because <code>V</code> sounds like vector space to me.</p>",
        "id": 417410594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706004336
    },
    {
        "content": "<p>For two vectors we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submodule.mem_span_pair#doc\">docs#Submodule.mem_span_pair</a> that is probably enough</p>",
        "id": 417410922,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706004430
    },
    {
        "content": "<p>Anyway, before discussing more about how to prove this, I would like to see the way you state the dim=2 case in Lean. Because it's maybe not completely obvious what the statement could be.</p>",
        "id": 417410924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706004431
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> who is our local Lie algebra expert</p>",
        "id": 417411341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706004560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"685351\">@Eddy Liu</span> Note that <code>Fin 1</code>has 1 element, not two. But you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FiniteDimensional.finrank#doc\">docs#FiniteDimensional.finrank</a></p>",
        "id": 417411643,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706004643
    },
    {
        "content": "<p>Nice to see someone interested in Lie theory, let me see if I can formalise what I understand by your question.</p>",
        "id": 417412890,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706005018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"685351\">@Eddy Liu</span> is this what you have in mind:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basis.VectorSpace</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Dimension.Finrank</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Lie.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LieRing</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LieAlgebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"bp\">⁅</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"bp\">⁅</span><span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 417413766,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706005304
    },
    {
        "content": "<p>This is really an exercise in using the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Basis#doc\">docs#Basis</a> API</p>",
        "id": 417413939,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706005354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Lie.20algebra.20classification/near/417410922\">said</a>:</p>\n<blockquote>\n<p>For two vectors we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submodule.mem_span_pair#doc\">docs#Submodule.mem_span_pair</a> that is probably enough</p>\n</blockquote>\n<p>omg!it is definitely helpful...I will try to use it  for the proof of dimension 2</p>",
        "id": 417414682,
        "sender_full_name": "Eddy Liu",
        "timestamp": 1706005590
    },
    {
        "content": "<p>You're welcome. Feel free to ask more questions (sometimes I'll be slower to answer but that doesn't mean I won't).</p>",
        "id": 417414851,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706005657
    },
    {
        "content": "<p>Oops, I now realise you were talking to Riccardo, but my remark still applies ;-)</p>",
        "id": 417415022,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706005704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Lie.20algebra.20classification/near/417410924\">said</a>:</p>\n<blockquote>\n<p>Anyway, before discussing more about how to prove this, I would like to see the way you state the dim=2 case in Lean. Because it's maybe not completely obvious what the statement could be.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basis.VectorSpace</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Dimension.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Lie.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LieRing</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LieAlgebra</span> <span class=\"n\">V</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"n\">L</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"bp\">⁅</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"bp\">⁅</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I write this myself but unfortunately the proof ends with \"sorry\",i will try the method <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> has provided</p>",
        "id": 417415320,
        "sender_full_name": "Eddy Liu",
        "timestamp": 1706005804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Lie.20algebra.20classification/near/417415022\">said</a>:</p>\n<blockquote>\n<p>Oops, I now realise you were talking to Riccardo, but my remark still applies ;-)</p>\n</blockquote>\n<p>the finiterank is helpful to us too!!thanks for comment:)</p>",
        "id": 417415719,
        "sender_full_name": "Eddy Liu",
        "timestamp": 1706005940
    },
    {
        "content": "<p>Eddy, what you just wrote confuses elements of L with Lie algebra generators of L. The former is written <code>x y : L</code> correctly but the latter uses <code>Basis</code> as in Oliver’s answer.</p>",
        "id": 417415746,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1706005951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin (尹維晨)</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Lie.20algebra.20classification/near/417415746\">said</a>:</p>\n<blockquote>\n<p>Eddy, what you just wrote confuses elements of L with Lie algebra generators of L. The former is written <code>x y : L</code> correctly but the latter uses <code>Basis</code> as in Oliver’s answer.</p>\n</blockquote>\n<p>oops.I made a mistake.Thanks!</p>",
        "id": 417417242,
        "sender_full_name": "Eddy Liu",
        "timestamp": 1706006467
    },
    {
        "content": "<p>If you want to avoid <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Basis#doc\">docs#Basis</a> you could also take this as the statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basis.VectorSpace</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Dimension.Finrank</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Lie.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LieRing</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LieAlgebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"bp\">⁅</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">K</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"bp\">∧</span> <span class=\"bp\">⁅</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 417418021,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706006702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Lie.20algebra.20classification/near/417418021\">said</a>:</p>\n<blockquote>\n<p>If you want to avoid <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Basis#doc\">docs#Basis</a> you could also take this as the statement:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basis.VectorSpace</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Dimension.Finrank</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Lie.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LieRing</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LieAlgebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"bp\">⁅</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">K</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"bp\">∧</span> <span class=\"bp\">⁅</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>got it.I will try.</p>",
        "id": 417418922,
        "sender_full_name": "Eddy Liu",
        "timestamp": 1706007019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"685351\">@Eddy Liu</span> Let me know if you want a hint.</p>",
        "id": 417489695,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706029361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Lie.20algebra.20classification/near/417489695\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"685351\">Eddy Liu</span> Let me know if you want a hint.</p>\n</blockquote>\n<p>well actually i am confused,i have try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--by cases</span>\n<span class=\"c1\">--constructor</span>\n</code></pre></div>\n<p>this two tactics.but there will be so many \"sorry\" exists...<br>\nI think a hint for proof can be very useful:)</p>",
        "id": 417564014,
        "sender_full_name": "Eddy Liu",
        "timestamp": 1706063046
    },
    {
        "content": "<p>I claim that the following lemma is a useful prerequisite.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basis.VectorSpace</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Dimension.Finrank</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.FiniteDimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Lie.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LieRing</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LieAlgebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linearIndependent_of_lie_ne_zero</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"bp\">⁅</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⁆</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearIndependent</span> <span class=\"n\">K</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 417572782,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706069531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Lie.20algebra.20classification/near/417572782\">said</a>:</p>\n<blockquote>\n<p>I claim that the following lemma is a useful prerequisite.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basis.VectorSpace</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Dimension.Finrank</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.FiniteDimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Lie.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LieRing</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LieAlgebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linearIndependent_of_lie_ne_zero</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"bp\">⁅</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⁆</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearIndependent</span> <span class=\"n\">K</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I have checked documents and find <code>linearIndependent_iff</code>,but it still confuses me how to use it to prove <code>x</code>and <code>y</code> is independent...</p>",
        "id": 417589903,
        "sender_full_name": "Eddy Liu",
        "timestamp": 1706082412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Lie.20algebra.20classification/near/417411643\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"685351\">Eddy Liu</span> Note that <code>Fin 1</code>has 1 element, not two. But you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FiniteDimensional.finrank#doc\">docs#FiniteDimensional.finrank</a></p>\n</blockquote>\n<p>I met with a new questions.i have finish the proof of decomposition,actually,the existence of decomposition.the code is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Set.range</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Fin.range_fin_succ</span><span class=\"o\">]</span>\n        <span class=\"n\">rfl</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"n\">b.span_eq</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ω</span> <span class=\"bp\">∈</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Set.mem_univ</span> <span class=\"n\">_</span>\n       <span class=\"k\">have</span> <span class=\"n\">decomposition_exis</span> <span class=\"o\">:</span>  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span><span class=\"n\">u</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">ω</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Submodule.mem_span_pair.1</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">foo</span><span class=\"o\">]</span>\n        <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>however,i want to obtain the precise value.just like the lemma under...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">decomposition_pre</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b.repr</span> <span class=\"n\">ω</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b.repr</span> <span class=\"n\">ω</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">ω</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>how can i achieve it?<br>\n(the indentation is messy,just ignore it...)</p>",
        "id": 417598367,
        "sender_full_name": "Eddy Liu",
        "timestamp": 1706086322
    },
    {
        "content": "<p>For the linear independence, note that there is <code>linearIndependent_fin2</code>.</p>",
        "id": 417617664,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706092699
    },
    {
        "content": "<p>I don't really understand your other question. Can you please post complete code?</p>",
        "id": 417617728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706092719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Classification.20of.20two-dimensional.20Lie.20algebras/near/417617728\">said</a>:</p>\n<blockquote>\n<p>I don't really understand your other question. Can you please post complete code?</p>\n</blockquote>\n<p>well,first I formalise my question as below</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"bp\">⁅</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"bp\">⁅</span><span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>then for the left</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"bp\">⁅</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">·</span> <span class=\"n\">left</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>now what i only to finish is the right one<code> ∃ b : Basis (Fin 2) K L, ⁅b 0, b 1⁆ = b 1</code>,hence i need to apply a decomposition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"k\">let</span> <span class=\"n\">ω</span> <span class=\"o\">:=</span> <span class=\"bp\">⁅</span><span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"bp\">⁆</span>  <span class=\"c1\">--- ∈ L</span>\n      <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Set.range</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Fin.range_fin_succ</span><span class=\"o\">]</span>\n        <span class=\"n\">rfl</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"n\">b.span_eq</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ω</span> <span class=\"bp\">∈</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Set.mem_univ</span> <span class=\"n\">_</span>\n      <span class=\"k\">have</span> <span class=\"n\">decomposition_exis</span> <span class=\"o\">:</span>  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span><span class=\"n\">u</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">ω</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Submodule.mem_span_pair.1</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">foo</span><span class=\"o\">]</span>\n        <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>the code shows that i can certainly assure the \"existence\",however,can not obtain the precise values of <code>u</code> and <code>v</code>,is there any method that i can get the values and use them directly?hope this time the explanation is clear</p>",
        "id": 417655970,
        "sender_full_name": "Eddy Liu",
        "timestamp": 1706106342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"685351\">@Eddy Liu</span> Aha, now I understand what you want. You can try <code>cases</code> on <code>decomposition_exis</code>. But also look at the <code>rcases</code> and <code>obtain</code> tactics.<br>\nInstead of <code>have decomposition_exis</code>, you could write <code>obtain \\&lt;u, v, huv\\&gt; : \\exists ...</code></p>",
        "id": 417659830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706107492
    },
    {
        "content": "<p>the problem has been solved,thanks:)</p>",
        "id": 418091266,
        "sender_full_name": "Eddy Liu",
        "timestamp": 1706192998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"685351\">Eddy Liu</span> has marked this topic as resolved.</p>",
        "id": 418091329,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706193004
    }
]