[
    {
        "content": "<p>Idle weekend thought, without much behind, but I just wondered if we have a tactic, or should have a tactic, that floats eliminators (<code>match</code>, <code>if</code>…) to the top, duplicating the context into each alternative, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|-</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">foo</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>(where <code>foo</code> could be a more complex context, and <code>if</code> could be a matcher).</p>\n<p>I guess this could even be a simpproc. I think I ran into proofs where this would allow me to solve a goal with just simplification, no need for <code>split</code>.</p>\n<p>Of course it can only float it out as far as the condition (or the scrutinee of a matcher) ’s local variables allow.</p>\n<p>(There is some similarity to Isabelle’s _splitter_ feature in the Simplifier, only that it's simpler and nicer in our case because we can put propositions into the branches.)</p>",
        "id": 437097154,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714902108
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=apply_ite#doc\">docs#apply_ite</a> ?</p>",
        "id": 437098072,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714903072
    },
    {
        "content": "<p>Right, that’s the lemma that one could use when doing this to <code>ite</code>, but for arbitrary <code>match</code> expressions, you’d have to generate that on the fly, and I am not sure how well just using this as a <code>simp</code> lemma  would work, with the higher-order <code>f</code> pattern variable.</p>",
        "id": 437099652,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714904637
    },
    {
        "content": "<p>Yes it would be great to have that because <code>apply_ite</code>/<code>apply_dite</code> is really hard to use without passing the motive explicitly</p>",
        "id": 437110420,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714914776
    },
    {
        "content": "<p>So you have encountered the need for that transformation before?</p>",
        "id": 437111340,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714915498
    },
    {
        "content": "<p>A handful of times, yes.</p>",
        "id": 437111410,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714915548
    },
    {
        "content": "<p>At least for <code>if</code>s, it might be good to think about this as <code>if</code> normalization (like in <a href=\"#narrow/stream/113488-general/topic/Rustan's.20challenge/near/398566772\">this challenge</a>), with the floating step corresponding to turning a more functional programming style into a procedural one.</p>",
        "id": 437142916,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714925877
    }
]