[
    {
        "content": "<p>What is the way to build a sequence inductively using all previous term? My secrete goal is to build a sequence with no converging subsequence in a metric space which is not precompact. But here is an easier minimal example (in Lean 3...):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">example1</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">A</span><span class=\"o\">)):</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">&lt;</span><span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"n\">u</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>How do I build the witness sequence u in this context?</p>",
        "id": 434677027,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1713771786
    },
    {
        "content": "<p>Here's an option, using a recursive definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">sets</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">sets</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">s.cons</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">Exists.some_spec</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">sets</span> <span class=\"n\">X</span> <span class=\"n\">H</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">some</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">example1</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">A</span><span class=\"o\">)):</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">&lt;</span><span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"n\">u</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">X</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 434684505,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713773828
    },
    {
        "content": "<p>Here's a lemma to help work with <code>sets</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sets_succ</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sets</span> <span class=\"n\">X</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sets</span> <span class=\"n\">X</span> <span class=\"n\">H</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">X</span> <span class=\"n\">H</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Exists.some_spec</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">sets</span> <span class=\"n\">X</span> <span class=\"n\">H</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sets</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 434685335,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713774047
    },
    {
        "content": "<p>This might work, if you want to avoid making an auxiliary definition like that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">example1</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">A</span><span class=\"o\">)):</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">&lt;</span><span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"n\">u</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">next</span> <span class=\"n\">hnext</span> <span class=\"n\">using</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">sets</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat.iterate</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">∅</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">next</span> <span class=\"bp\">∘</span> <span class=\"n\">sets</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 434686345,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713774304
    },
    {
        "content": "<p>Many thanks!!</p>",
        "id": 434694935,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1713776586
    }
]