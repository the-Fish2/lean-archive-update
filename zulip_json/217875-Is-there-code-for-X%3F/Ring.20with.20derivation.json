[
    {
        "content": "<p>Is there a (commutative) ring with derivation? Here derivation means an operator <code>D: R \\to R</code> satisfying Leibniz rule <code>D(ab) = (Da)b + a(Db)</code> and additive <code>D(a+b) = Da + Db</code>. While I was trying to add Wronskian for polynomials in mathlib4, I realized that Wronskian <code>W(a,b) = a(Db) - (Da)b</code> can be defined any ring with derivation and still satisfy nice properties, such as <code>W(a, b) = W(b, c)</code> when <code>a + b + c = 0</code>.  cc. <span class=\"user-mention\" data-user-id=\"242240\">@Jineon Baek</span></p>",
        "id": 447378869,
        "sender_full_name": "Seewoo Lee",
        "timestamp": 1719458939
    },
    {
        "content": "<p>There are many ways to search mathlib for things. Asking here is one way, but there are other ways which are sometimes far more efficient! For example if you go to the mathlib docs page <a href=\"https://leanprover-community.github.io/mathlib4_docs/index.html\">https://leanprover-community.github.io/mathlib4_docs/index.html</a> and type derivation into the search box, you will see about 20 functions all called Derivation.something . I'm sure you can take it from there :-) An alternative is using <a href=\"https://www.moogle.ai\">moogle</a> which will also give you plenty of leads if you type derivation into the search box. </p>\n<p>Let me know if I misunderstood your question.</p>",
        "id": 447404900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719472936
    },
    {
        "content": "<p>I'm working on this right now, as part of a proof of Liouville's theorem, but I'm not sure if it's quite ready for Mathlib yet.<br>\nI'm using</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">CommDifferentialRing</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">extends</span><span class=\"w\"> </span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">deriv</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Derivation</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">R</span>\n\n<span class=\"kn\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"s2\">\"′\"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">CommDifferentialRing</span><span class=\"bp\">.</span><span class=\"n\">deriv</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">PrettyPrinter</span><span class=\"w\"> </span><span class=\"n\">Delaborator</span><span class=\"w\"> </span><span class=\"n\">SubExpr</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kd\">@[</span><span class=\"n\">delab</span><span class=\"w\"> </span><span class=\"n\">app</span><span class=\"bp\">.</span><span class=\"n\">DFunLike</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">delabDeriv</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Delab</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getExpr</span>\n<span class=\"w\">  </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">isAppOfArity'</span><span class=\"w\"> </span><span class=\"ss\">``DFunLike.coe</span><span class=\"w\"> </span><span class=\"mi\">6</span>\n<span class=\"w\">  </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">getArg!'</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isAppOf'</span><span class=\"w\"> </span><span class=\"ss\">``CommDifferentialRing.deriv</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">withAppArg</span><span class=\"w\"> </span><span class=\"n\">delab</span>\n<span class=\"w\">  </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">arg</span><span class=\"bp\">′</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>if it helps</p>",
        "id": 447495883,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1719498867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thank you for pointing this out! I searched documentation first but I simply missed <code>Derivation</code> there for no reason..</p>",
        "id": 447498195,
        "sender_full_name": "Seewoo Lee",
        "timestamp": 1719499476
    },
    {
        "content": "<p>Also thanks <span class=\"user-mention\" data-user-id=\"690858\">@Daniel Weber</span> for letting me know!</p>",
        "id": 447498265,
        "sender_full_name": "Seewoo Lee",
        "timestamp": 1719499500
    },
    {
        "content": "<p>Based on the current status, I think one way I can try to make a new file <code>Wronskian.lean</code> in <code>RingTheory/Derivation</code> directory and prove some properties there. This might be better than defining only for polynomial derivations (which is enough for our purpose though)</p>",
        "id": 447498993,
        "sender_full_name": "Seewoo Lee",
        "timestamp": 1719499709
    },
    {
        "content": "<p>We realized that the above property I mentioned (<code>a + b + c = 0 =&gt; W(a, b) = W(b, c)</code> actually holds for any anti-symmetric bilinear form, but I couldn't find the thing in from documentation or moogle. We tried to search with antisymm, anticomm, symplectic, ..., but couldn't locate any. Nothing under the directory <code>BilinearForm</code> too.</p>",
        "id": 447845128,
        "sender_full_name": "Seewoo Lee",
        "timestamp": 1719599832
    },
    {
        "content": "<p>Here's a PR - only for polynomials over commutative rings for now <a href=\"https://github.com/leanprover-community/mathlib4/pull/14243\">https://github.com/leanprover-community/mathlib4/pull/14243</a></p>",
        "id": 447888516,
        "sender_full_name": "Seewoo Lee",
        "timestamp": 1719615295
    },
    {
        "content": "<p>It would be great to prove this for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.BilinForm.IsAlt#doc\">docs#LinearMap.BilinForm.IsAlt</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.IsAlt#doc\">docs#LinearMap.IsAlt</a></p>",
        "id": 448039445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719698788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"690858\">@Daniel Weber</span> Which theorem of Liouville are you formalizing?</p>",
        "id": 448265112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1719823538
    },
    {
        "content": "<p>The one in differential algebra</p>",
        "id": 448265304,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1719823586
    }
]