[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9847\">#9847</a> proves John Machin's 1706 formula for œÄ, but that's just the formula. What he then did was exploit the Taylor series of the arctangent (Taylor was Machin's contemporary) to compute œÄ to 100 decimal places.</p>\n<p>Suppose we reproduced his calculation in mathlib. At some point we would be using the following well-known three-part theorem:</p>\n<ol>\n<li>Any alternating series where the term magnitude strictly decreases is convergent.</li>\n<li>Every partial sum ending at a negative term is a lower bound on the limiting value.</li>\n<li>Every partial sum ending at a positive term is an upper bound on the limiting value.</li>\n</ol>\n<p>Do we have any of these three parts in mathlib, for <em>general</em> alternating series?</p>",
        "id": 416739957,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705656957
    },
    {
        "content": "<p>we have the leibniz formula for pi, which should contain all the same components</p>",
        "id": 416742242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705657845
    },
    {
        "content": "<p>I remember that there was a PR about alternating series. I don't remember if it landed.</p>",
        "id": 416848332,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705691060
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monotone.cauchySeq_alternating_series_of_tendsto_zero#doc\">docs#Monotone.cauchySeq_alternating_series_of_tendsto_zero</a> and the next few lemmas for the first item.</p>",
        "id": 416848830,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705691239
    },
    {
        "content": "<p>AFAICS, we don't have the other two.</p>",
        "id": 416849240,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705691396
    },
    {
        "content": "<p>Though it's probably hidden inside the proof.</p>",
        "id": 416849320,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705691415
    },
    {
        "content": "<p>The Taylor series for arctan is hidden inside the proof; we don't have it as a separate theorem. (I've previously suggested that the Leibniz formula for pi should be deduced by combining the Taylor series for arctan with Abel's theorem, neither of which we currently have as a separate theorem in mathlib.)</p>",
        "id": 416938975,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1705712630
    },
    {
        "content": "<p>In any case I wrote <a href=\"https://github.com/leanprover-community/mathlib4/pull/9889\">#9889</a> which defines the complex arctangent and shows its Taylor series expansion</p>",
        "id": 417133997,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705881464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> is this a correct statement of Abel's theorem?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Set</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Topology</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">abels_theorem</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&lt;</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 417266742,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705940487
    },
    {
        "content": "<p>There is also a version for functions on the complex unit disk; see <a href=\"https://en.wikipedia.org/wiki/Abel%27s_theorem\">Wikipedia</a>. The convergence within the \"Stolz sector\" can be conveniently expressed via a <code>nhdsWithin</code> filter, I think.</p>",
        "id": 417268303,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705940933
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Set</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Topology</span> <span class=\"n\">Real</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">stolzSector</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">‚ÑÇ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">nhdsWithin</span> <span class=\"mi\">1</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"bp\">‚Äñ</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">z</span><span class=\"bp\">‚Äñ</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">abels_theorem</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">z</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">z</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n    <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">stolzSector</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 417272433,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705942103
    },
    {
        "content": "<p>I think this does not exactly capture the assumptions. I would perhaps write it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Set</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Topology</span> <span class=\"n\">Real</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">stolzSector</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">‚ÑÇ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">nhdsWithin</span> <span class=\"mi\">1</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"bp\">‚Äñ</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">z</span><span class=\"bp\">‚Äñ</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">abels_theorem</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">tsum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">stolzSector</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The assumption is that the power series converges at <code>z = 1</code> (which implies that it converges absolutely on the open unit disk), and the statement is that one can swap the two limits involved.</p>",
        "id": 417273726,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705942490
    },
    {
        "content": "<p>Your formulation is begging the question with regards to replacing the ad-hoc proof in <code>Data.Real.Pi.Leibniz</code>. The central theorem there is precisely your hypothesis <code>h</code></p>",
        "id": 417278533,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705943922
    },
    {
        "content": "<p>Abel's theorem is intended to give you <code>l</code>, not ask <code>l</code> from you at the start</p>",
        "id": 417278713,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705943994
    },
    {
        "content": "<p>Perhaps you swapped the hypothesis and statement?</p>",
        "id": 417278873,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705944038
    },
    {
        "content": "<p>I think what I wrote is a faithful translation of the statement as given on the Wikipedia page.<br>\nTo use it, you only need the <em>existence</em> of <code>l</code> (I don't think we have an analogue of <code>Summable</code> (yet?) in this context; otherwise one could write the hypothesis in terms of that). You can then define <code>g</code> as the value of the power series (on the open unit disk), and then the theorem tells you that its limit (within a Stolz sector) is the same as the value of the power series at 1 (which was <code>l</code>). I.e., with the right notions, we could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">abels_theorem</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Summable'</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">tsum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">stolzSector</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">tsum'</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>where <code>Summable'</code> says that the series with terms <code>f n</code> converges (conditionally) and <code>tsum' f</code> is the value of the series.</p>",
        "id": 417289722,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705947767
    },
    {
        "content": "<p>And so, if you know that <code>Tendsto g (stolzSector M) (ùìù l)</code>, you can conclude that <code>tsum' f = l</code>.</p>",
        "id": 417290234,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705947959
    },
    {
        "content": "<p>(Note that a hypothesis <code>(h :  ‚àÉ x : T, P x)</code> is completely equivalent to <code>(x : T) (h : P x)</code>, and <code>g</code> can be eliminated from your statement, since it can be defined in terms of <code>f</code>.)</p>",
        "id": 417293937,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705949257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Bounds.20on.20alternating.20convergent.20series/near/417289722\">said</a>:</p>\n<blockquote>\n<p>I.e., with the right notions, we could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">abels_theorem</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Summable'</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">tsum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">stolzSector</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">tsum'</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>where <code>Summable'</code> says that the series with terms <code>f n</code> converges (conditionally) and <code>tsum' f</code> is the value of the series.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">abels_theorem</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">CauchySeq</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚àë'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stolzSector</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">cauchySeq_tendsto_of_complete</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 417358481,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705977616
    },
    {
        "content": "<p>Since <code>‚ÑÇ</code> is complete, the <code>CauchySeq</code> hypothesis is equivalent to conditional convergence</p>",
        "id": 417358645,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705977749
    },
    {
        "content": "<p>Apparently I need to show this theorem first</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.ArctanDeriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Asymptotics</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Finset</span> <span class=\"n\">Complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">yyz</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n    <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">z</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 417432538,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1706011918
    },
    {
        "content": "<p>I think the way to get that is to first show that <code>f</code> is bounded (from <code>h</code>) and then use comparison with the geometric series.</p>",
        "id": 417449323,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706017797
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.isBigO_one#doc\">docs#Filter.Tendsto.isBigO_one</a>, multiply it by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Asymptotics.isBigO_refl#doc\">docs#Asymptotics.isBigO_refl</a>, then use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=summable_of_isBigO_nat#doc\">docs#summable_of_isBigO_nat</a></p>",
        "id": 417458745,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706020547
    },
    {
        "content": "<p>You may want to add <code>IsBigO.smul_summable</code> to the library.</p>",
        "id": 417459022,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706020612
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecificLimits.Normed</span>\n\n<span class=\"c1\">-- https://planetmath.org/proofofabelslimittheorem</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Finset</span> <span class=\"n\">Complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">stolzSector</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">‚ÑÇ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">nhdsWithin</span> <span class=\"mi\">1</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"bp\">‚Äñ</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">z</span><span class=\"bp\">‚Äñ</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/-- The term norms of any convergent series are bounded by some universal constant. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">norm_bounded_of_tendsto</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">cauchySeq_iff_le_tendsto_0.mp</span> <span class=\"n\">h.cauchySeq</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">‚ü®</span><span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">_</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">replace</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">key</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">dist_partial_sum'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">key</span>\n\n<span class=\"sd\">/-- The power series associated with any convergent series is _absolutely_ convergent</span>\n<span class=\"sd\">in the open unit disc. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">summable_mul_geometric_of_tendsto</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">z</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hC</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">norm_bounded_of_tendsto</span> <span class=\"n\">h</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">Summable.of_norm_bounded</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">z</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"n\">summable_geometric_of_abs_lt_1</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mul_left</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">norm_mul</span><span class=\"o\">,</span> <span class=\"n\">norm_pow</span><span class=\"o\">]</span>\n  <span class=\"n\">gcongr</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hC</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 417487880,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1706028829
    },
    {
        "content": "<p>It would be nice to also have the version for general radius of convergence (which can either be reduced to your special case or proved directly). I.e., convergence of the power series at some <code>w</code> implies absolute convergence at all <code>z</code> such that <code>‚Äñz‚Äñ &lt; ‚Äñw‚Äñ</code>.</p>",
        "id": 417490087,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706029484
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecificLimits.Normed</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span> <span class=\"n\">Complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"sd\">/-- The power series associated with any convergent series is _absolutely_ convergent</span>\n<span class=\"sd\">in the open unit disc. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">summable_power_of_cauchy_series</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">CauchySeq</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚àë</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">z</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hC</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">norm_bounded_of_cauchy_series</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">summable_iff_cauchySeq_finset</span><span class=\"o\">]</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">cauchySeq_finset_of_geometric_bound</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">hz</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">norm_mul</span><span class=\"o\">,</span> <span class=\"n\">norm_pow</span><span class=\"o\">]</span>\n  <span class=\"n\">gcongr</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hC</span> <span class=\"n\">n</span>\n\n<span class=\"sd\">/-- If a power series converges at `w`, it converges _absolutely_ for all `z` of lesser norm. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">summable_power_of_norm_lt</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">CauchySeq</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">z</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">w</span><span class=\"bp\">‚Äñ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"o\">(</span><span class=\"n\">norm_nonneg</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eq_or_gt</span> <span class=\"k\">with</span> <span class=\"n\">hw</span> <span class=\"n\">hw</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"o\">((</span><span class=\"n\">norm_nonneg</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">hz</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">summable_power_of_cauchy_series</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">norm_div</span><span class=\"o\">,</span> <span class=\"n\">div_lt_one</span> <span class=\"n\">hw</span><span class=\"o\">])</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">AbsoluteValue.pos_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hw</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel'</span> <span class=\"n\">_</span> <span class=\"n\">hw</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 417504820,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1706034686
    },
    {
        "content": "<p>The above two lemmas are now at <a href=\"https://github.com/leanprover-community/mathlib4/pull/9955\">#9955</a></p>",
        "id": 417569534,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1706067226
    },
    {
        "content": "<p>This looks good to me. Maybe someone better versed in the naming conventions can have a look at the lemma names? There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=cauchy_series_of_le_geometric#doc\">docs#cauchy_series_of_le_geometric</a>, so I would think the \"cauchy_series\" part is OK. We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PowerSeries#doc\">docs#PowerSeries</a>, so I would think that \"powerSeries\" instead of just \"power\" would be more appropriate in the names (even though the lemmas do not talk about terms of type <code>PowerSeries</code>).</p>\n<p>Do we have the radius of convergence of a (univariate) power series and API for it?<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> PowerSeries, HasSum</p>",
        "id": 418035912,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706174016
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 418035914,
        "sender_full_name": "loogle",
        "timestamp": 1706174017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> PowerSeries, Summable</p>",
        "id": 418036020,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706174050
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 418036023,
        "sender_full_name": "loogle",
        "timestamp": 1706174050
    },
    {
        "content": "<p>Maybe not <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 418036112,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706174092
    },
    {
        "content": "<p>I should have proven Abel's limit theorem as you stated it at <a href=\"https://github.com/leanprover-community/mathlib4/tree/abellimit\">branch#abellimit</a></p>",
        "id": 418038633,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1706174930
    },
    {
        "content": "<p>(haven't made a PR for it because I want that to be <a href=\"https://github.com/leanprover-community/mathlib4/pull/10000\">#10000</a>)</p>",
        "id": 418038720,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1706174968
    },
    {
        "content": "<p>I wonder whether there might not be a more elegant proof using filters instead of epsilons...</p>",
        "id": 418047619,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706177837
    },
    {
        "content": "<p>Probably not <span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span>. Anyway, <a href=\"https://github.com/leanprover-community/mathlib4/pull/10000\">#10000</a> it is</p>",
        "id": 418244604,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1706263616
    },
    {
        "content": "<p>I've extended <a href=\"https://github.com/leanprover-community/mathlib4/pull/10000\">#10000</a> to cover the real case</p>",
        "id": 418387997,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1706331469
    },
    {
        "content": "<p>But surely there's a simpler way to prove this sub-theorem?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">((</span><span class=\"bp\">‚Üë</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"bp\">‚Üë</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Filter.mem_map'</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.mem_nhds_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span> <span class=\"bp\">‚ä¢</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">Œµ</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">Œµpos</span><span class=\"o\">,</span> <span class=\"n\">hŒµ</span><span class=\"o\">‚ü©‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span>\n    <span class=\"n\">use</span> <span class=\"n\">Œµ</span><span class=\"o\">,</span> <span class=\"n\">Œµpos</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.subset_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hŒµ</span>\n    <span class=\"n\">replace</span> <span class=\"n\">hŒµ</span> <span class=\"o\">:=</span> <span class=\"n\">hŒµ</span> <span class=\"n\">x</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.mem_ball</span><span class=\"o\">,</span> <span class=\"n\">dist_eq_norm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hŒµ</span> <span class=\"n\">hx</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">hŒµ</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Complex.norm_real</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hŒµ</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hŒµ</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 418388665,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1706332188
    },
    {
        "content": "<p>Combine <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.ofRealCLM#doc\">docs#Complex.ofRealCLM</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.continuous#doc\">docs#ContinuousLinearMap.continuous</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Continuous.tendsto#doc\">docs#Continuous.tendsto</a> ? (This does not give exactly what you want, but is maybe close to what you actually need).<br>\n(I have some other commitments now and cannot think about that in more detail.)</p>",
        "id": 418403766,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706348002
    },
    {
        "content": "<p>Well now that you mentioned the CLM, it's a two-liner</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">ofRealCLM.continuous.tendsto</span> <span class=\"n\">l</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"bp\">‚áë</span><span class=\"n\">ofRealCLM</span> <span class=\"bp\">=</span> <span class=\"n\">ofReal'</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">tendsto_iff_comap</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">map_le_iff_le_comap</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 418413321,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1706357540
    },
    {
        "content": "<p>There's still <a href=\"https://github.com/leanprover-community/mathlib4/pull/10000/files#diff-35646e039986d92194e3a69478b379c60384711e9bb937bee97d74e1dcb73439R73\">https://github.com/leanprover-community/mathlib4/pull/10000/files#diff-35646e039986d92194e3a69478b379c60384711e9bb937bee97d74e1dcb73439R73</a> though</p>",
        "id": 418417818,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1706362159
    },
    {
        "content": "<p>I've suggested a shorter proof of <code>nhdsWithin_lt_le_nhdsWithin_stolzSet</code>.</p>",
        "id": 418437897,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706380752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Bounds.20on.20alternating.20convergent.20series/near/418413321\">said</a>:</p>\n<blockquote>\n<p>Well now that you mentioned the CLM, it's a two-liner</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">ofRealCLM.continuous.tendsto</span> <span class=\"n\">l</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"bp\">‚áë</span><span class=\"n\">ofRealCLM</span> <span class=\"bp\">=</span> <span class=\"n\">ofReal'</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">tendsto_iff_comap</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">map_le_iff_le_comap</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">m</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>In fact, <code>Tendsto</code> is defeq to <code>map _ ‚â§ _</code>, so it's just <code>ofRealCLM.continuous.tendsto</code></p>",
        "id": 418461235,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706404870
    },
    {
        "content": "<p>I finally proved the thing I <em>originally</em> wanted to prove at <a href=\"https://github.com/leanprover-community/mathlib4/pull/10120\">#10120</a></p>",
        "id": 418770183,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1706592338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> I have absolutely no idea how to address <span class=\"user-mention\" data-user-id=\"110050\">@S√©bastien Gou√´zel</span>'s comment on <a href=\"https://github.com/leanprover-community/mathlib4/pull/10000\">#10000</a>, regarding turning the Stolz set filter into a cone filter. Please help</p>",
        "id": 421383357,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1707894959
    },
    {
        "content": "<p>Apparently I have to import Euclidean geometry in order to show that every cone filter lies below some Stolz set filter</p>",
        "id": 421383526,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1707895028
    },
    {
        "content": "<p>(which would be importing too much)</p>",
        "id": 421383564,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1707895050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> I'm at a conference until Friday and won't have much time before the weekend, but I'll try to have a look then.</p>",
        "id": 421444247,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707917189
    },
    {
        "content": "<p>Well I actually <em>did</em> prove the cone version... using <strong>a ton</strong> of Euclidean geometry</p>",
        "id": 421565531,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1707962638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> ummm...</p>",
        "id": 422053912,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1708216655
    },
    {
        "content": "<p>Here is an alternative approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Complex.Basic</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">StolzSet</span>\n\n<span class=\"c1\">-- This (or a more general version with real exponent `0 ‚â§ r ‚â§ 1`) seems to be missing in Mathlib.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Real.sqrt_one_add_le</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">sqrt_le_iff.mpr</span> <span class=\"o\">‚ü®</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">‚ü©</span>\n  <span class=\"k\">calc</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n    <span class=\"n\">_</span> <span class=\"bp\">‚â§</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">le_add_of_nonneg_right</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">sq_nonneg</span> <span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n\n<span class=\"c1\">-- An ugly technical lemma</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span> <span class=\"k\">in</span>\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">Complex.stolzCone'_subset_StolzSet_aux</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚àÉ</span> <span class=\"n\">M</span> <span class=\"n\">Œµ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span> <span class=\"bp\">‚àß</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">|</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">‚Üí</span>\n      <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">sqrt</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">,</span>\n    <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx‚ÇÄ</span> <span class=\"n\">hx‚ÇÅ</span> <span class=\"n\">hy</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">‚ü©</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">sqrt</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">¬∑</span> <span class=\"k\">calc</span> <span class=\"n\">sqrt</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n      <span class=\"n\">_</span> <span class=\"bp\">‚â§</span> <span class=\"n\">sqrt</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sqrt_le_sqrt</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">_root_.sq_abs</span> <span class=\"n\">y</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">gcongr</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n      <span class=\"n\">_</span> <span class=\"bp\">‚â§</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sqrt_le_sqrt</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">gcongr</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n      <span class=\"n\">_</span> <span class=\"bp\">‚â§</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">neg_div</span><span class=\"o\">]</span>\n        <span class=\"n\">refine</span> <span class=\"n\">sqrt_one_add_le</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">neg_le_neg_iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">hx‚ÇÅ.trans_le</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_le_one</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">le_add_of_nonneg_right</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">sq_nonneg</span> <span class=\"n\">s</span>\n  <span class=\"k\">calc</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span> <span class=\"bp\">‚â§</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sqrt_le_sqrt</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">_root_.sq_abs</span> <span class=\"n\">y</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">gcongr</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">sqrt</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sqrt_mul'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">sq_nonneg</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">sqrt_sq</span> <span class=\"n\">hx‚ÇÄ.le</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">gcongr</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">lt_add_one</span> <span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">‚â§</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">gcongr</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">le_sub_comm.mpr</span> <span class=\"n\">H</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Complex</span>\n\n<span class=\"c1\">-- This seems to be missing in Mathlib.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">abs_eq_sqrt_sq_add_sq</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"n\">z.re</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_apply</span><span class=\"o\">,</span> <span class=\"n\">normSq_apply</span><span class=\"o\">,</span> <span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"n\">sq</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- The Stolz set for a given `M`, roughly teardrop-shaped with the tip at 1 but tending to the</span>\n<span class=\"sd\">open unit disc as `M` tends to infinity. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">stolzSet</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">‚ÑÇ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">z</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚Äñ</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">z</span><span class=\"bp\">‚Äñ</span><span class=\"o\">)}</span>\n\n<span class=\"c1\">-- /-- The cone around 1 with angle `2Œ∏`. -/</span>\n<span class=\"c1\">-- def stolzCone (Œ∏ : ‚Ñù) : Set ‚ÑÇ := {z | ‚Äñ1 - z‚Äñ ‚â† 0 ‚àß |arg (1 - z)| &lt; Œ∏}</span>\n\n<span class=\"sd\">/-- The cone to the left of `1` with angle `2 Œ∏` such that `tan Œ∏ = s`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">stolzCone'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">‚ÑÇ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"bp\">|</span><span class=\"n\">z.im</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z.re</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">stolzCone'_subset_StolzSet_aux'</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚àÉ</span> <span class=\"n\">M</span> <span class=\"n\">Œµ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span> <span class=\"bp\">‚àß</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚àß</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">Œµ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z.re</span><span class=\"o\">}</span> <span class=\"bp\">‚à©</span> <span class=\"n\">stolzCone'</span> <span class=\"n\">s</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">stolzSet</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">peel</span> <span class=\"n\">stolzCone'_subset_StolzSet_aux</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">M</span> <span class=\"n\">Œµ</span> <span class=\"n\">hM</span> <span class=\"n\">hŒµ</span> <span class=\"n\">H</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">z</span> <span class=\"o\">‚ü®</span><span class=\"n\">hzl</span><span class=\"o\">,</span> <span class=\"n\">hzr</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">,</span> <span class=\"n\">sub_lt_comm</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">one_re</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">sub_re</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hzl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">stolzCone'</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">one_re</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">sub_re</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hzr</span>\n  <span class=\"n\">replace</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n    <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"n\">z.im</span> <span class=\"o\">((</span><span class=\"n\">mul_pos_iff_of_pos_left</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">abs_nonneg</span> <span class=\"n\">z.im</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"n\">hzr</span><span class=\"o\">)</span> <span class=\"n\">hzl</span> <span class=\"n\">hzr</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z.im</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sub_im</span><span class=\"o\">,</span> <span class=\"n\">one_im</span><span class=\"o\">,</span> <span class=\"n\">zero_sub</span><span class=\"o\">,</span> <span class=\"n\">even_two</span><span class=\"o\">,</span> <span class=\"n\">neg_sq</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">abs_eq_sqrt_sq_add_sq</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">norm_eq_abs</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">sub_re</span><span class=\"o\">,</span> <span class=\"n\">one_re</span><span class=\"o\">,</span> <span class=\"n\">sub_sub_cancel</span><span class=\"o\">,</span>\n    <span class=\"bp\">‚Üê</span> <span class=\"n\">abs_eq_sqrt_sq_add_sq</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">norm_eq_abs</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span>\n  <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">sub_pos.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">mul_pos_iff_of_pos_left</span> <span class=\"n\">hM</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">norm_nonneg</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">lemma</span>  <span class=\"n\">nhdsWithin_stolzCone'_le_nhdsWithin_stolzSet</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚àÉ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"n\">stolzCone'</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"n\">stolzSet</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Œµ</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hŒµ</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">stolzCone'_subset_StolzSet_aux'</span> <span class=\"n\">hs</span>\n  <span class=\"n\">use</span> <span class=\"n\">M</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nhdsWithin_le_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_nhdsWithin</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®{</span><span class=\"n\">w</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">Œµ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">w.re</span><span class=\"o\">},</span> <span class=\"n\">isOpen_lt</span> <span class=\"n\">continuous_const</span> <span class=\"n\">continuous_re</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">,</span> <span class=\"n\">one_re</span><span class=\"o\">,</span> <span class=\"n\">sub_lt_self_iff</span><span class=\"o\">,</span> <span class=\"n\">hŒµ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 422125092,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708286984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 422191239,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708334323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> done!</p>",
        "id": 423326479,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1708925847
    },
    {
        "content": "<p>Is there anyone else available to review <a href=\"https://github.com/leanprover-community/mathlib4/pull/10000\">#10000</a>?</p>",
        "id": 423734293,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1709086798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266253\">Joseph Myers</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Bounds.20on.20alternating.20convergent.20series/near/416938975\">said</a>:</p>\n<blockquote>\n<p>The Taylor series for arctan is hidden inside the proof; we don't have it as a separate theorem. (I've previously suggested that the Leibniz formula for pi should be deduced by combining the Taylor series for arctan with Abel's theorem, neither of which we currently have as a separate theorem in mathlib.)</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11098\">#11098</a></p>",
        "id": 424374871,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1709364464
    },
    {
        "content": "<p>And <a href=\"https://github.com/leanprover-community/mathlib4/pull/11098\">#11098</a> is merged. I have now merged everything I initially wanted to merge</p>",
        "id": 424533541,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1709491444
    }
]