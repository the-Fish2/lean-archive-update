[
    {
        "content": "<p>Hi, I couldn't find any code that establishes the above (see below for MWE). Do we have this? If not, I'm not too familiar/comfortable with working with uniformities, so if there is anyone who knows how to prove this neatly, that is more than welcome! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">UniformSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">TotallyBounded</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.IsSeparable</span> <span class=\"n\">s</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 435170428,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713959158
    },
    {
        "content": "<p>I was able to prove this under a slightly stronger assumption (see below). I'll make a PR. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">aux3</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">TotallyBounded</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.IsSeparable</span> <span class=\"n\">s</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.totallyBounded_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">Nat.one_div_pos_of_nat</span>\n  <span class=\"n\">choose</span><span class=\"bp\">!</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">hfb</span> <span class=\"n\">using</span> <span class=\"n\">this</span>\n  <span class=\"n\">use</span> <span class=\"bp\">⋃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Set.countable_iUnion</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">countable</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.mem_closure_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_nat_one_div_lt</span> <span class=\"n\">hε</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hfb</span> <span class=\"n\">n</span> <span class=\"n\">hx</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Set.mem_iUnion.mp</span> <span class=\"n\">this</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_iUnion</span><span class=\"o\">,</span> <span class=\"n\">Metric.mem_ball</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hi</span>\n      <span class=\"n\">use</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi.1</span>\n      <span class=\"n\">apply</span> <span class=\"n\">lt_trans</span> <span class=\"n\">hi.2</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inv_eq_one_div</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hn</span>\n    <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 435211223,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713971000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> has marked this topic as resolved.</p>",
        "id": 435211231,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713971002
    },
    {
        "content": "<p>I don't think this is true in general uniform spaces BTW. For example there are compact non-separable uniform spaces</p>",
        "id": 435239934,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1713979719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464202\">Felix Weilacher</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20TotallyBounded.20implies.20IsSeparable/near/435239934\">said</a>:</p>\n<blockquote>\n<p>I don't think this is true in general uniform spaces BTW. For example there are compact non-separable uniform spaces</p>\n</blockquote>\n<p>Yes, I think you are right. I was working from a source on metric spaces and somehow wrote it up for UniformSpace… thanks for pointing it out!</p>",
        "id": 435240917,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713980101
    },
    {
        "content": "<p>PR is <a href=\"https://github.com/leanprover-community/mathlib4/pull/12404\">#12404</a> by the way</p>",
        "id": 435246425,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713982157
    }
]