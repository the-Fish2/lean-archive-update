[
    {
        "content": "<p>How would one go about defining this so that it type checks: <code>def blah (α : Type) (R S : List α) := { r ++ s : List α | r ∈ R ∧ s ∈ S }</code>? That is, the set of all concatenations of lists from two sets of lists, where the list that is first comes from the first set.</p>\n<p>I get \"invalid patterns, <code>r</code> is an explicit pattern variable, but it only occurs in positions that are inaccessible to pattern matching  .(List.append r s)\"</p>",
        "id": 418573359,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1706510486
    },
    {
        "content": "<p>First step would be to correct the types of R and S</p>",
        "id": 418573838,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706510877
    },
    {
        "content": "<p>Then try <code>(r ++ s)</code> including the parentheses</p>",
        "id": 418573951,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706510926
    },
    {
        "content": "<p><code>def blah (α : Type) (R S : Set (List α)) := { (r ++ s) : List α | r ∈ R ∧ s ∈ S }</code><br>\ngives the same error.</p>",
        "id": 418574135,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1706510998
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">blah</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"bp\">++</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)}</span>\n</code></pre></div>",
        "id": 418574305,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706511066
    },
    {
        "content": "<p>Thanks Kyle, I knew it was something with parentheses</p>",
        "id": 418574349,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706511103
    },
    {
        "content": "<p>huh, ok. I'm not sure what is going on there.</p>",
        "id": 418574383,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1706511116
    },
    {
        "content": "<p>what does it mean without the <code>∧</code>?</p>",
        "id": 418574477,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1706511157
    },
    {
        "content": "<p>because this also fails <code>def blah (α : Type) (R S : Set (List α)) := {(r ++ s) : List α | (r ∈ R) ∧ (s ∈ S)}</code>.</p>",
        "id": 418574587,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1706511250
    },
    {
        "content": "<p>It's like <code>\\forall (r ∈ R) (s ∈ S), ...</code></p>",
        "id": 418574940,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706511503
    },
    {
        "content": "<p>I see. And it looks like the issue was that I put parentheses around the <code>r ++ s</code>, which I was doing in order to give the type to satisfy the type inference.</p>",
        "id": 418575108,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1706511608
    },
    {
        "content": "<p>among other things</p>",
        "id": 418575144,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1706511634
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 418575161,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1706511645
    },
    {
        "content": "<p>Is there a way to define the same thing but using <code>Finset</code>?</p>",
        "id": 418762634,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1706586410
    },
    {
        "content": "<p>I'm trying to check that these definitions are what I want, but I can't <code>#eval</code> a <code>Set</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">blah</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"bp\">++</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">blah_n</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">R</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">blah</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">blah_n</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">blah_n</span> <span class=\"o\">{[(</span><span class=\"sc\">'a'</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)]}</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 418765041,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1706588427
    },
    {
        "content": "<p>And this is because I am trying to define a more concrete instance of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RegularExpression#doc\">docs#RegularExpression</a> and I'm having trouble defining the language of the closure operator (Kleene star).</p>",
        "id": 418765393,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1706588653
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">RegExp</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">char</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">RegExp</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">epsilon</span> <span class=\"o\">:</span> <span class=\"n\">RegExp</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">RegExp</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">union</span> <span class=\"o\">:</span> <span class=\"n\">RegExp</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">RegExp</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">RegExp</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">concat</span> <span class=\"o\">:</span> <span class=\"n\">RegExp</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">RegExp</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">RegExp</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">closure</span> <span class=\"o\">:</span> <span class=\"n\">RegExp</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">RegExp</span> <span class=\"n\">α</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">RegExp.languageOf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RegExp</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">char</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">epsilon</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"o\">[]</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∅</span>\n  <span class=\"bp\">|</span> <span class=\"n\">union</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">R.languageOf</span> <span class=\"bp\">∪</span> <span class=\"n\">S.languageOf</span>\n  <span class=\"bp\">|</span> <span class=\"n\">concat</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"bp\">++</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">R.languageOf</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S.languageOf</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">closure</span> <span class=\"n\">R</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 418765418,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1706588683
    },
    {
        "content": "<p>(unfolding the XY problem)</p>",
        "id": 418765493,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1706588757
    }
]