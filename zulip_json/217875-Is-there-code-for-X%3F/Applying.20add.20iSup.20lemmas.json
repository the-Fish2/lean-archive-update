[
    {
        "content": "<p>Is there a relevant lemma that could be helpful in proving example below? I found lemmas about supremum of an (bounded) indexed family in the Real, Language, and Cardinality packages, but I haven't been able to connect them directly to this problem.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Finset</span> <span class=\"n\">Algebra</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hi</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.size</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"k\">calc</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- by rw [add_ciSup]</span>\n</code></pre></div>",
        "id": 433058657,
        "sender_full_name": "Vlad",
        "timestamp": 1713024777
    },
    {
        "content": "<p>What do you want to prove?</p>",
        "id": 433059192,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713025277
    },
    {
        "content": "<p>Since you're talking about a finite <code>iSup</code>, you may want to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sup%27#doc\">docs#Finset.sup'</a> with <code>s  = (Finset.univ : Finset (Fin i))</code></p>",
        "id": 433059212,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713025301
    },
    {
        "content": "<p>If you want to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=iSup#doc\">docs#iSup</a>, then what's wrong with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=add_ciSup#doc\">docs#add_ciSup</a> ?</p>",
        "id": 433059362,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713025406
    },
    {
        "content": "<p><del>Your code above has a syntax error when I try to run it</del></p>",
        "id": 433061216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713027184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Applying.20add.20iSup.20lemmas/near/433059362\">said</a>:</p>\n<blockquote>\n<p>If you want to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=iSup#doc\">docs#iSup</a>, then what's wrong with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=add_ciSup#doc\">docs#add_ciSup</a> ?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12113\">#12113</a> is one problem with it</p>",
        "id": 433061693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713027638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> perhaps there's a way to make <code>add_ciSup</code> work, but when I apply it as a rewrite rule (as in the commented section), then the goal changes to<br>\n<code>⊢ ⨆ i_1, xs[i] + ⨆ (_ : i_1 ∈ range i), xs[i_1] = ⨆ a ∈ range i, xs[i] + xs[a]</code> <br>\nwhich is not the same as the RHS.</p>\n<p>This is the kind of transformations I often deal with when solving programming problems (e.g. finding min/max of segment/pairs of elements of an array etc.).  <br>\nI would appreciate if someone could show how apply iSup lemmas for the example above just as a learning exercise.</p>",
        "id": 433062562,
        "sender_full_name": "Vlad",
        "timestamp": 1713028541
    },
    {
        "content": "<p>You need to apply the lemma twice, but unfortunately you need the correction from <a href=\"https://github.com/leanprover-community/mathlib4/pull/12113\">#12113</a> first</p>",
        "id": 433062750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713028736
    },
    {
        "content": "<p>Using <code>⨆ a : Fin i,</code> instead should fix that, and will make your <code>sorry</code>s easier</p>",
        "id": 433062771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713028777
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>!</p>",
        "id": 433063039,
        "sender_full_name": "Vlad",
        "timestamp": 1713028985
    },
    {
        "content": "<p>I'm still missing something. Here's a revised example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Finset</span> <span class=\"n\">Algebra</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hi</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.size</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"k\">calc</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">])</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">])</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_ciSup</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span><span class=\"bp\">;</span>  <span class=\"n\">existsi</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h0</span>\n</code></pre></div>\n<p>which results in error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 433065878,
        "sender_full_name": "Vlad",
        "timestamp": 1713031163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Nonempty (Fin ?i)</p>",
        "id": 433066277,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1713031438
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Fin/Lemmas.html#Fin.size_pos%27\">Fin.size_pos'</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Fin/Lemmas.html#Fin.pos_iff_nonempty\">Fin.pos_iff_nonempty</a>, and <a href=\"https://loogle.lean-lang.org/?q=Nonempty%20%28Fin%20%3Fi%29\">1 more</a></p>",
        "id": 433066279,
        "sender_full_name": "loogle",
        "timestamp": 1713031440
    },
    {
        "content": "<p>you can supply the instance manually using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.pos_iff_nonempty#doc\">docs#Fin.pos_iff_nonempty</a></p>",
        "id": 433066411,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1713031520
    },
    {
        "content": "<p>That's a nice trick with loogle. Thanks!</p>",
        "id": 433067200,
        "sender_full_name": "Vlad",
        "timestamp": 1713032123
    },
    {
        "content": "<p>on a side note, how does that syntax work? is the type of the example implicit? a <code>def</code> with an implicit return type makes sense to me, but a proof with an implicit return type is confusing... like your goal is to just prove anything</p>",
        "id": 433073406,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1713037653
    },
    {
        "content": "<p>The secret is that <code>example</code> is really a <code>def</code></p>",
        "id": 433076269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713040114
    }
]