[
    {
        "content": "<p>I'm currently trying to prove the uniqueness of Wedderburn-Artin theorem and I'm stuck at a proposition as below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span>\n\n<span class=\"kn\">local</span><span class=\"w\"> </span><span class=\"kn\">notation</span><span class=\"w\"> </span><span class=\"s2\">\"M[\"</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"w\"> </span><span class=\"s2\">\",\"</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"s2\">\"]\"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"w\"> </span><span class=\"n\">R</span>\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">](</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\">  </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">End</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">    </span><span class=\"n\">smul</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">algebraMap</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">•</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">      </span><span class=\"n\">map_add'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"w\"> </span><span class=\"n\">m2</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">      </span><span class=\"n\">map_smul'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">        </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">LinearMapClass</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">RingHom</span><span class=\"bp\">.</span><span class=\"n\">id_apply</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">MulAction</span><span class=\"bp\">.</span><span class=\"n\">mul_smul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">commutes</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MulAction</span><span class=\"bp\">.</span><span class=\"n\">mul_smul</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">algebraMap</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">•</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">      </span><span class=\"n\">map_add'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"w\"> </span><span class=\"n\">m2</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">      </span><span class=\"n\">map_smul'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"w\"> </span><span class=\"n\">m2</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">        </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">RingHom</span><span class=\"bp\">.</span><span class=\"n\">id_apply</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">MulAction</span><span class=\"bp\">.</span><span class=\"n\">mul_smul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">commutes</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MulAction</span><span class=\"bp\">.</span><span class=\"n\">mul_smul</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"n\">map_one'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">map_one</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">one_smul</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">    </span><span class=\"n\">map_mul'</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">AddHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">mul_apply</span><span class=\"o\">,</span>\n<span class=\"w\">        </span><span class=\"n\">LinearMapClass</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">MulAction</span><span class=\"bp\">.</span><span class=\"n\">mul_smul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">commutes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MulAction</span><span class=\"bp\">.</span><span class=\"n\">mul_smul</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">map_zero'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">map_zero</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">zero_smul</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">    </span><span class=\"n\">map_add'</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">map_add</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">add_smul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">AddHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">commutes'</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">RingHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MonoidHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">OneHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">mul_apply</span><span class=\"o\">,</span>\n<span class=\"w\">        </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">AddHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LinearMapClass</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">smul_def'</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">      </span><span class=\"n\">change</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">RingHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MonoidHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">OneHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span>\n<span class=\"w\">        </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">mul_apply</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">AddHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">]</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">test'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hm</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">Wdb</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">[</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">IsSimpleModule</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">End</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>And the math proof is on stack project lemma 11.5.1 <a href=\"https://stacks.math.columbia.edu/tag/074J\">https://stacks.math.columbia.edu/tag/074J</a></p>",
        "id": 446586150,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719227266
    },
    {
        "content": "<p>A little help on <code>test'</code> would be appreciated</p>",
        "id": 446586749,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719227451
    },
    {
        "content": "<p>Just noting that for your first instance you can generalize all the way to </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommSemiring</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">](</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Semiring</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\">  </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">End</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n</code></pre></div>",
        "id": 446587323,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719227627
    },
    {
        "content": "<p>I'm very surprised this doesn't already exist!</p>",
        "id": 446587368,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719227637
    },
    {
        "content": "<p>The stacks link you gave isn't exactly the statement you're trying to prove. How about you write out an informal proof first?</p>",
        "id": 446587829,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719227784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/A.20question.20about.20module/near/446587368\">said</a>:</p>\n<blockquote>\n<p>I'm very surprised this doesn't already exist!</p>\n</blockquote>\n<p>Yes so do I</p>",
        "id": 446587935,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719227824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/A.20question.20about.20module/near/446587829\">said</a>:</p>\n<blockquote>\n<p>The stacks link you gave isn't exactly the statement you're trying to prove. How about you write out an informal proof first?</p>\n</blockquote>\n<p>sorry for the confusion the proof should be in <a href=\"https://stacks.math.columbia.edu/tag/074E\">https://stacks.math.columbia.edu/tag/074E</a> here, lemma 11.4.6 (4)</p>",
        "id": 446588516,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719228036
    },
    {
        "content": "<p>Do you have the equivalence from <a href=\"https://stacks.math.columbia.edu/tag/074D\">11.4.5</a> set up?</p>",
        "id": 446590767,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719228757
    },
    {
        "content": "<p>[Quoting…]</p>\n<p>Yes it's morita equivalence I have a file for that</p>",
        "id": 446614866,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719235598
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/_5QZ-dlTxuMDBKtDqLNxAXJX/MoritaEquivalence.lean\">MoritaEquivalence.lean</a></p>",
        "id": 446615518,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719235787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/A.20question.20about.20module/near/446587368\">said</a>:</p>\n<blockquote>\n<p>I'm very surprised this doesn't already exist!</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Algebra _ (Module.End _ _)</p>",
        "id": 446709419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719260619
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Algebra/Basic.html#Module.End.instAlgebra\">Module.End.instAlgebra</a></p>",
        "id": 446709423,
        "sender_full_name": "loogle",
        "timestamp": 1719260620
    },
    {
        "content": "<p>Is that not sufficiently general here?</p>",
        "id": 446709576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719260644
    },
    {
        "content": "<p>I think the issue here is that you should resist the urge to construct new actions via composition with <code>algebraMap</code>, and instead assume the action already exists, and enforce it is precisely this action via IsScalarTower</p>",
        "id": 446710149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719260753
    },
    {
        "content": "<p>That is ... unintuitive but helpful!</p>",
        "id": 446751252,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719277735
    }
]