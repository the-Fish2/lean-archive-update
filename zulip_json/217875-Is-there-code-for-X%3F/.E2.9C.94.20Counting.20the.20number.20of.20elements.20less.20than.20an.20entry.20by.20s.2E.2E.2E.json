[
    {
        "content": "<p>Is there existing code for showing that the nth term of Finset.sort of a finset is the only element such that there are n+1 elements le that term? (or similar if there are exactly n elements less than that term)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">finset_le_sort_get</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTrans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAntisymm</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTotal</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">s.card</span><span class=\"o\">)}:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.length_sort</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Fin.prop</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">s.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 416648839,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1705611620
    },
    {
        "content": "<p>pretty sure we don't</p>",
        "id": 416649232,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705611751
    },
    {
        "content": "<p>In case anyone else wants it, I implemented it (but probably not good enough for PR quality)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list_take_mem_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n    <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l.take</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">l.length</span><span class=\"o\">,</span> <span class=\"n\">k.val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">l.get</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_iff_get</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"k\">let</span> <span class=\"n\">hk₁</span> <span class=\"o\">:=</span> <span class=\"n\">k.isLt</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hk₁</span>\n  <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">⟩</span>\n  <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n  <span class=\"n\">tauto</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.get_take</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">:=</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">:=</span><span class=\"n\">n</span><span class=\"o\">)]</span>\n  <span class=\"n\">tauto</span>\n  <span class=\"n\">tauto</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">hk₁</span><span class=\"o\">,</span><span class=\"n\">hk₂</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_iff_get</span><span class=\"o\">]</span>\n  <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span><span class=\"n\">omega</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.get_take'</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">tauto</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list_drop_mem_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n    <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l.drop</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">l.length</span><span class=\"o\">,</span> <span class=\"n\">k.val</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">l.get</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_iff_get</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"k\">let</span> <span class=\"n\">hk₁</span> <span class=\"o\">:=</span> <span class=\"n\">k.isLt</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hk₁</span>\n  <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">⟩</span>\n  <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.get_drop</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:=</span><span class=\"n\">n</span><span class=\"o\">)]</span>\n  <span class=\"n\">tauto</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">hk₁</span><span class=\"o\">,</span><span class=\"n\">hk₂</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">hk₃</span> <span class=\"o\">:=</span> <span class=\"n\">k.isLt</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_iff_get</span><span class=\"o\">]</span>\n  <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"n\">k.val</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span><span class=\"n\">omega</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.get_drop'</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">k.val</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">tauto</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finset_le_sort_get</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTrans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAntisymm</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTotal</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">s.card</span><span class=\"o\">)}:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.length_sort</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Fin.prop</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">s.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">List.take</span> <span class=\"o\">(</span><span class=\"n\">n.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">u</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">subset1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">List.take</span> <span class=\"o\">(</span><span class=\"n\">n.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">simp</span>\n    <span class=\"k\">have</span> <span class=\"n\">hx₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_sort</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Finset.mem_of_mem_filter</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">hx₃</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span>\n    <span class=\"k\">let</span> <span class=\"n\">hx₄</span> <span class=\"o\">:=</span> <span class=\"n\">hx₁</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.take_append_drop</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">hx₄</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">hxnot</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_append</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx₄</span>\n    <span class=\"k\">have</span> <span class=\"n\">hxindrop</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">List.drop</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list_drop_mem_iff</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">n.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">hxindrop</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">hk₁</span><span class=\"o\">,</span><span class=\"n\">hk₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hxindrop</span>\n    <span class=\"k\">let</span> <span class=\"n\">hk₃</span> <span class=\"o\">:=</span> <span class=\"n\">k.isLt</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hk₃</span>\n    <span class=\"k\">have</span> <span class=\"n\">hrux</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">u</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n      <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"n\">k</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hk₂</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">List.Sorted.rel_get_of_le</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:=</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:=</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:=</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:=</span><span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Finset.sort_sorted</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n      <span class=\"n\">exact</span> <span class=\"n\">LT.lt.le</span> <span class=\"n\">hk₁</span>\n    <span class=\"k\">have</span> <span class=\"n\">hequx</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">antisymm'</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:=</span><span class=\"n\">r</span><span class=\"o\">)</span>\n      <span class=\"n\">tauto</span>\n      <span class=\"n\">tauto</span>\n\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hequx</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hk₂</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hequx</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.Nodup.get_inj_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hequx</span>\n    <span class=\"k\">let</span> <span class=\"n\">heqind</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.veq_of_eq</span> <span class=\"n\">hequx</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">heqind</span>\n    <span class=\"n\">omega</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Finset.sort_nodup</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">subset2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List.take</span> <span class=\"o\">(</span><span class=\"n\">n.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">s.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">hy</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hy</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">List.mem_of_mem_take</span> <span class=\"n\">hy</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_sort</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">this</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list_take_mem_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">hk₁</span><span class=\"o\">,</span><span class=\"n\">hk₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hk₂</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">List.Sorted.rel_get_of_le</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Finset.sort_sorted</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Fin.val_fin_le</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">omega</span>\n\n  <span class=\"n\">exact</span> <span class=\"n\">Finset.Subset.antisymm</span> <span class=\"n\">subset1</span> <span class=\"n\">subset2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list_sort_sublist</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTrans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAntisymm</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTotal</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List.Sublist</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">List.Sorted</span> <span class=\"n\">r</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">List.Sorted</span> <span class=\"n\">r</span> <span class=\"n\">l₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">List.Pairwise.sublist</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finset_le_sort_get_card</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTrans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAntisymm</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTotal</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">s.card</span><span class=\"o\">)}:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.length_sort</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Fin.prop</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">s.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx₀</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hx</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset_le_sort_get</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:=</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"n\">n</span><span class=\"o\">)]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.card_toFinset</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.Nodup.dedup</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"k\">let</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"n\">n.isLt</span>\n  <span class=\"n\">omega</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">List.Nodup.sublist</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">List.take_sublist</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Finset.sort_nodup</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hx</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_sort</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hx₀</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_iff_get</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hk</span><span class=\"o\">]</span>\n\n  <span class=\"n\">congr</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Finset.length_sort</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.heq_ext_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">swap</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Finset.length_sort</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">let</span> <span class=\"n\">hk₁</span> <span class=\"o\">:=</span> <span class=\"n\">k.isLt</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hk₁</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset_le_sort_get</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:=</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=⟨</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">hk₁</span><span class=\"o\">⟩)]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.card_toFinset</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.Nodup.dedup</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">k.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">s.card</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">tauto</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">List.Nodup.sublist</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.take_sublist</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:=</span><span class=\"n\">Finset.sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Finset.sort_nodup</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 416848903,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1705691267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"662620\">Andy Jiang</span> has marked this topic as resolved.</p>",
        "id": 416849511,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705691511
    }
]