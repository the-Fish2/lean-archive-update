[
    {
        "content": "<p>Do we have something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">finite_ofLocalizationSpanTarget</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ht</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⊤</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Localization</span><span class=\"bp\">.</span><span class=\"n\">Away</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">LocalizedModule</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Submonoid</span><span class=\"bp\">.</span><span class=\"n\">powers</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Probably <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> knows this?</p>",
        "id": 446397103,
        "sender_full_name": "Christian Merten",
        "timestamp": 1719135503
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finite_ofLocalizationSpan#doc\">docs#finite_ofLocalizationSpan</a>, but I'm not sure how easy it is to massage it into this.</p>",
        "id": 446397444,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1719135800
    },
    {
        "content": "<p>Ah thanks, I was looking in <code>RingTheory/RingHom/Finite</code>.</p>",
        "id": 446397582,
        "sender_full_name": "Christian Merten",
        "timestamp": 1719135912
    },
    {
        "content": "<p>To mimic <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finite_ofLocalizationSpan#doc\">docs#finite_ofLocalizationSpan</a>, I probably have to mimic <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsLocalization.finsetIntegerMultiple#doc\">docs#IsLocalization.finsetIntegerMultiple</a> first.</p>",
        "id": 446398159,
        "sender_full_name": "Christian Merten",
        "timestamp": 1719136447
    },
    {
        "content": "<p>Yeah we should move them into <code>RingTheory/RingHom/Finite</code>.</p>",
        "id": 446400274,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1719137681
    },
    {
        "content": "<p>It should follow easily once the localisation refactors land, but currently they are a performance hazard and I've yet to try all the suggestions by Matthew.</p>",
        "id": 446400317,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1719137696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/module.20finite.20if.20localizations.20are.20finite/near/446400317\">said</a>:</p>\n<blockquote>\n<p>It should follow easily once the localisation refactors land, but currently they are a performance hazard and I've yet to try all the suggestions by Matthew.</p>\n</blockquote>\n<p>To unxy: This is the last step to show that finite presentation is a local ring hom property. So I think I'll try to finish it for the time being.</p>",
        "id": 446400681,
        "sender_full_name": "Christian Merten",
        "timestamp": 1719137823
    },
    {
        "content": "<p>Sounds good!<br>\nIn case it wasn't clear, that comment wasn't meant to block new development, and instead just another reason for me to resume the refactor work.</p>",
        "id": 446400942,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1719138049
    }
]