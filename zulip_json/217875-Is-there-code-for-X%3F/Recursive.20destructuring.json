[
    {
        "content": "<p>Working in <code>Mathlib.CategoryTheory</code>, I often find myself opening proofs with lines like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">⟨⟨⟨⟨</span><span class=\"bp\">?</span><span class=\"n\">prod</span><span class=\"o\">,</span>\n      <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">pt</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">pi</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">nat</span><span class=\"o\">⟩,</span>\n      <span class=\"bp\">?</span><span class=\"n\">commutes</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">⟨</span>\n      <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">pt</span> <span class=\"o\">:=</span> <span class=\"n\">P'</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">univ</span><span class=\"o\">,</span>\n      <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">pt</span> <span class=\"o\">:=</span> <span class=\"n\">P'</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">spec</span><span class=\"o\">,</span>\n      <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">pt</span> <span class=\"o\">:=</span> <span class=\"n\">P'</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"o\">}</span> <span class=\"n\">hom'</span> <span class=\"n\">spec'</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">unique</span><span class=\"o\">⟩⟩⟩⟩⟩</span>\n</code></pre></div>\n<p>Aside from being somewhat hard to read, it's also very mechanical and seems like it ought to be easily automated -- like <code>rcongr</code>, except instead of alternating between <code>congr</code> and <code>ext</code> we alternate between <code>fconstructor</code> and <code>ext</code>, maybe taking a <code>using n</code> modifier in case we want to stop halfway down. But <code>rcases</code> won't do it because many of these types aren't inductive, being instead some mix of quantifiers (Nonempty instances and forall/arrow types),  and I didn't see any other tactics that seemed appropriate.</p>\n<p>... There's an issue here with knowing where to stop, but it at least <em>seems</em> only tricky and not entirely insoluble (and if nothing else we could take the <code>rcases</code> approach and only expand as far as the user provides metavariables). I thought I'd at least check to see if I was missing anything before taking a crack at a <code>rconstructor</code> tactic myself.</p>",
        "id": 430530351,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1711940055
    }
]