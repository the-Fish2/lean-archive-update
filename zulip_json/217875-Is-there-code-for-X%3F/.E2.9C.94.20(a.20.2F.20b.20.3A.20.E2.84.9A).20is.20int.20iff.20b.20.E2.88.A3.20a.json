[
    {
        "content": "<p>Do we / should we have anything like the following?</p>\n<p>(edit: found it I think: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat.den_div_cast_eq_one_iff#doc\">docs#Rat.den_div_cast_eq_one_iff</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Rat.natCast_div_eq_divInt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Rat.divInt</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Rat.intCast_div_eq_divInt</span> <span class=\"n\">n</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Rat.den_natCast_div_natCast_eq_one_iff_dvd</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">den</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">Rat.den_eq_one_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_cast</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">Int.ofNat_dvd.mp</span> <span class=\"o\">(</span><span class=\"n\">Dvd.intro_left</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">Rat.natCast_div</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 438080276,
        "sender_full_name": "llllvvuu",
        "timestamp": 1715404051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> has marked this topic as resolved.</p>",
        "id": 438081535,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715405504
    },
    {
        "content": "<p>I think mathlib should have both int and nat versions of that lemma</p>",
        "id": 438090214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715415594
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12814\">https://github.com/leanprover-community/mathlib4/pull/12814</a></p>",
        "id": 438096916,
        "sender_full_name": "llllvvuu",
        "timestamp": 1715421009
    },
    {
        "content": "<p>(you can write <a href=\"https://github.com/leanprover-community/mathlib4/pull/12814\">#12814</a>)</p>",
        "id": 438097104,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715421066
    }
]