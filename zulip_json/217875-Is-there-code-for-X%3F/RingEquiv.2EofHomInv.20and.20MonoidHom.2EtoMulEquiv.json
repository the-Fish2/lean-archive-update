[
    {
        "content": "<p>We have both <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingEquiv.ofHomInv#src\">src#RingEquiv.ofHomInv</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidHom.toMulEquiv#src\">src#MonoidHom.toMulEquiv</a>, seemingly inconsistently named. I was looking for the corresponding fact for linear equivalences, but couldn't find it.</p>\n<ol>\n<li>Where is the result for linear equivalences?</li>\n<li>Shall we add <code>RingHom.toRingEquiv</code> and/or <code>MulEquiv.ofHomInv</code> (if they don't already exist in hiding)?</li>\n<li>Shall we deprecate either of the existing functions in favour of anything added in 2?</li>\n</ol>",
        "id": 418745259,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706574069
    },
    {
        "content": "<ol>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearEquiv.ofLeftInverse#doc\">docs#LinearEquiv.ofLeftInverse</a> ? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearEquiv.ofInjective#doc\">docs#LinearEquiv.ofInjective</a> ?</li>\n</ol>",
        "id": 418746558,
        "sender_full_name": "Richard Copley",
        "timestamp": 1706574776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/RingEquiv.2EofHomInv.20and.20MonoidHom.2EtoMulEquiv/near/418746558\">said</a>:</p>\n<blockquote>\n<ol>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearEquiv.ofLeftInverse#doc\">docs#LinearEquiv.ofLeftInverse</a> ? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearEquiv.ofInjective#doc\">docs#LinearEquiv.ofInjective</a> ?</li>\n</ol>\n</blockquote>\n<p>Nope.  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearEquiv.ofLinear#doc\">docs#LinearEquiv.ofLinear</a></p>",
        "id": 418746769,
        "sender_full_name": "Richard Copley",
        "timestamp": 1706574915
    },
    {
        "content": "<p>Thanks, that's the one. What an interesting variety of names! :-)</p>",
        "id": 418746810,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706574942
    },
    {
        "content": "<p>To make matters more fun, <code>LinearEquiv.ofLinear</code> takes its 3rd and 4th arguments in the opposite order than <code>RingHom.ofHomInv</code> and <code>MonoidHom.toMulEquiv</code>.</p>",
        "id": 418747119,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706575150
    },
    {
        "content": "<p>I seem to recall <code>ofLinear</code> being hard to find, and it's clear that I found it hard to remember. What say <code>ofInverse</code> for everything, with the arguments always in the same order? (I'd say \"it has a left inverse\" first, \"it has a right inverse\" second, so the same as <code>RingHom.ofHomInv</code> and <code>MonoidHom.toMulEquiv</code> and the opposite of <code>LinearEquiv.ofInverse</code>.)</p>",
        "id": 418747526,
        "sender_full_name": "Richard Copley",
        "timestamp": 1706575421
    },
    {
        "content": "<p>How about:</p>\n<ul>\n<li><code>XEquiv.ofInverse</code> for each <code>X</code></li>\n<li>aliased as <code>XHom.toXEquiv</code> as well?</li>\n</ul>",
        "id": 418747705,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706575535
    },
    {
        "content": "<p>I think the name should contain both <code>XEquiv</code> and <code>XHom</code>.</p>",
        "id": 418788389,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706603552
    },
    {
        "content": "<p>I don't think we need it in the <code>XHom</code> namespace now that dot constructor notation is a thing, though I guess <code>alias</code> is harmless enough</p>",
        "id": 418916718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706647380
    },
    {
        "content": "<p>(does alias on definitions make the alias reducible? If not, then we should pretty much never use it)</p>",
        "id": 418916766,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706647404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/RingEquiv.2EofHomInv.20and.20MonoidHom.2EtoMulEquiv/near/418788389\">said</a>:</p>\n<blockquote>\n<p>I think the name should contain both <code>XEquiv</code> and <code>XHom</code>.</p>\n</blockquote>\n<p>So <code>XEquiv.ofXHom</code> or <code>XEquiv.ofXHomInverse</code>?</p>",
        "id": 418929762,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706652999
    },
    {
        "content": "<p>I think the <code>Inverse</code> doesn't add anything. It might even hinder comprehension since the entire point of the constructor is that you are <em>not</em> providing an inverse!</p>",
        "id": 418930411,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706653294
    },
    {
        "content": "<p>I thought the entire point of the constructor was that you get to use nice ext lemmas to prove the maps compose to the identity</p>",
        "id": 418931154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706653622
    },
    {
        "content": "<p>We're taking about <code>XEquiv.ofXHom someXHom invXHom h1 h2</code>, right?</p>",
        "id": 418931281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706653674
    },
    {
        "content": "<p>Ghu yes you're right and indeed the <code>Inverse</code> belongs there to disambiguate it from the other constructor I had in mind.</p>",
        "id": 418931408,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706653712
    },
    {
        "content": "<p>Which one were you thinking of?</p>",
        "id": 418932431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706654156
    },
    {
        "content": "<p>The one which takes in a bijective hom</p>",
        "id": 418933556,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706654700
    },
    {
        "content": "<p>That's <code>ofBijective</code></p>",
        "id": 418934683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706655230
    },
    {
        "content": "<p>Okay, <code>XEquiv.ofXHomInverse</code>!</p>",
        "id": 418941518,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706658622
    },
    {
        "content": "<p><code>RingEquiv.ofRingHomInverse</code>, <code>MulEquiv.ofMonoidHomInverse</code>, <code>LinearEquiv.ofLinearMapInverse</code></p>\n<ul>\n<li>One of these things is not like the others</li>\n<li>That aside, does the <code>XHom</code> add anything?</li>\n</ul>",
        "id": 418942000,
        "sender_full_name": "Richard Copley",
        "timestamp": 1706658901
    },
    {
        "content": "<p>I would be happy to drop the <code>XHom</code>.</p>",
        "id": 418943081,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706659406
    },
    {
        "content": "<p>Oh. What I was getting at is that <code>MonoidHom.toMulEquiv</code> doesn't actually use <code>map_one'</code>, and I assumed the below would go through. But it doesn't. It would be unfortunate to have <code>MulEquiv.ofInverse</code> that takes a <code>MonoidHom</code> and not a <code>MulHom</code>, so maybe that's an argument for keeping the <code>XHom</code>. Or just for keeping it when the Xs aren't the same in the <code>XHom</code> and <code>XEquiv</code> parts?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Equiv.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MulEquiv.ofMulHomInverse</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">g.comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">MulHom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">f.comp</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">MulHom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃*</span> <span class=\"n\">N</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">DFunLike.congr_fun</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">DFunLike.congr_fun</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">f.map_mul</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→*</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">g.comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">MonoidHom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">f.comp</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">MonoidHom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃*</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n  <span class=\"n\">MulEquiv.ofMulHomInverse</span> <span class=\"n\">f.toMulHom</span> <span class=\"n\">g.toMulHom</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n<span class=\"c1\">--                                        ~~</span>\n<span class=\"c1\">-- application type mismatch</span>\n<span class=\"c1\">--   MulEquiv.ofMulHomInverse (↑f) (↑g) h₁</span>\n<span class=\"c1\">-- argument</span>\n<span class=\"c1\">--   h₁</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   MonoidHom.comp g f = MonoidHom.id M : Prop</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   MulHom.comp ↑g ↑f = MulHom.id M : Prop</span>\n</code></pre></div>",
        "id": 418944242,
        "sender_full_name": "Richard Copley",
        "timestamp": 1706660048
    },
    {
        "content": "<p>The point of the <code>XHom</code> is for you to discover the function when you type <code>XHom</code> in the docs</p>",
        "id": 418980934,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706685788
    }
]