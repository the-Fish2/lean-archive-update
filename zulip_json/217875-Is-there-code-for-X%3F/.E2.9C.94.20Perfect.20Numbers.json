[
    {
        "content": "<p>Is there code formalizing Perfect numbers in Mathlib? Something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List_sumHelper</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">soFar</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">soFar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List_sumHelper</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">soFar</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List_sum</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List_sumHelper</span> <span class=\"o\">(</span><span class=\"n\">Zero.zero</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PerfectNumber</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">List_sum</span> <span class=\"o\">(</span><span class=\"n\">Nat.factors</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sixSmallestPerfect</span> <span class=\"o\">:</span> <span class=\"n\">PerfectNumber</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"mi\">6</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">by_contra</span> <span class=\"n\">hn</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">rcases</span> <span class=\"n\">hn</span><span class=\"bp\">;</span><span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">PerfectNumber</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span><span class=\"n\">rename_i</span> <span class=\"n\">hn</span><span class=\"bp\">;</span><span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 419112514,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1706730307
    },
    {
        "content": "<p>It's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Perfect#doc\">docs#Nat.Perfect</a> but we don't have the connection with Mersenne primes, apparently.</p>",
        "id": 419112824,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1706730463
    },
    {
        "content": "<p>Okay thanks</p>",
        "id": 419112902,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1706730491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"628490\">Colin Jones ⚛️</span> has marked this topic as resolved.</p>",
        "id": 419112925,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706730508
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.sum#doc\">docs#List.sum</a> already exists</p>",
        "id": 419112996,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1706730549
    },
    {
        "content": "<p>Also, the decidable instance does not seem to be there, but it gives an alternative proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Divisors</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"n\">Nat.Perfect</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n.casesOn</span>\n  <span class=\"o\">(</span><span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">not_and_of_not_right</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Nat.not_lt_zero</span> <span class=\"mi\">0</span><span class=\"o\">)))</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decidable_of_iff'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Nat.perfect_iff_sum_properDivisors</span> <span class=\"n\">n.succ_pos</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sixSmallestPerfect</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n.Perfect</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">6</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span>\n  <span class=\"n\">revert</span> <span class=\"n\">n</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 419120174,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706733753
    },
    {
        "content": "<p>Here is another fact:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sixSmallestPerfect</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">27</span><span class=\"o\">),</span> <span class=\"n\">n.Perfect</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>\n<p>and this reaches the limit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">153</span><span class=\"o\">),</span> <span class=\"n\">n.Perfect</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">28</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 419121952,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706734620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Perfect.20Numbers/near/419112824\">said</a>:</p>\n<blockquote>\n<p>It's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Perfect#doc\">docs#Nat.Perfect</a> but we don't have the connection with Mersenne primes, apparently.</p>\n</blockquote>\n<p>Oops, don't have the complete characterization of even perfect numbers yet?</p>",
        "id": 419231791,
        "sender_full_name": "Jz Pan",
        "timestamp": 1706789024
    },
    {
        "content": "<p>It's all in Archive. <a href=\"https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Archive/Wiedijk100Theorems/PerfectNumbers.lean\">https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Archive/Wiedijk100Theorems/PerfectNumbers.lean</a></p>",
        "id": 419262949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706799138
    },
    {
        "content": "<p>Great find! I shouldn't make the claim without looking beyond the file <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Perfect#doc\">docs#Nat.Perfect</a> is defined ...</p>",
        "id": 419264290,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1706799519
    },
    {
        "content": "<p>(I knew it was there somewhere and I was also surprised not to find it in the Nat.Perfect file, but because I knew it was there somewhere I kept looking :-) )</p>",
        "id": 419281668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706804231
    },
    {
        "content": "<p>Maybe we should include archive to loogle search results.</p>",
        "id": 419289845,
        "sender_full_name": "Jz Pan",
        "timestamp": 1706806424
    },
    {
        "content": "<p>And maybe this result shouldn't be in the archive in the first place</p>",
        "id": 419315371,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706814645
    }
]