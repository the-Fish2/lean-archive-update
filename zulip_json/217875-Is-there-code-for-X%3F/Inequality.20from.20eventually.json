[
    {
        "content": "<p>Is something like this in Mathlib? Presumably with a more elegant proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">le_of_eventually_nhdsWithin</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_of_forall_lt'</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eventually_of_mem</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"n\">Iio</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_nhdsWithin</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">Iio</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">isOpen_Iio</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">inter_subset_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h.and</span> <span class=\"n\">key</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 431382276,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712256811
    },
    {
        "content": "<p>It’s probably not the easiest way, but in general all of those things can be obtained from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=le_of_tendsto_of_tendsto#doc\">docs#le_of_tendsto_of_tendsto</a></p>",
        "id": 431387696,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1712258965
    }
]