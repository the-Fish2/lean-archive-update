[
    {
        "content": "<p>Is there code for it? If not, I suspect it should be possible to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.nth</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>using <code>not_prime_zero</code>, <code>not_prime_one</code>, and <code>prime_two</code>, but I have no idea how. Can you please help?</p>",
        "id": 437145915,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714927771
    },
    {
        "content": "<p>Does <code>rfl</code> do it?</p>",
        "id": 437145946,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714927802
    },
    {
        "content": "<p>I would check myself, but you haven't provided a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 437145994,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714927813
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Iff.rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.7574</span> <span class=\"bp\">↔</span> <span class=\"bp\">?</span><span class=\"n\">m.7574</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">nth</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 437146045,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714927866
    },
    {
        "content": "<p>added the import above, sorry</p>",
        "id": 437146155,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714927966
    },
    {
        "content": "<p>Here's getting it into a different form that's more computational, but <code>rfl</code> still doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.nth</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.nth_zero</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Set.Nonempty</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">Nat.prime_two</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sInf_def</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ⊢ Nat.find this = 2</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 437146648,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714928350
    },
    {
        "content": "<p>Here's one way</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.nth</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">suffices</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">Nat.nth</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Nat.nth</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.count_le_iff_le_nth</span> <span class=\"n\">Nat.infinite_setOf_prime</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.lt_nth_iff_count_lt</span> <span class=\"n\">Nat.infinite_setOf_prime</span><span class=\"o\">]</span>\n    <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 437148299,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1714929597
    },
    {
        "content": "<p>Thanks. I guess this is worth a PR? I just have the time.</p>",
        "id": 437149087,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714930102
    },
    {
        "content": "<p>Yes, this seems fine to add</p>",
        "id": 437149344,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714930377
    },
    {
        "content": "<p>Here's a potentially better way to do it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nth_eq_iff_of_ne_zero</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nat.nth</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">Nat.count</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.nth</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nth_eq_iff_of_ne_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">decide</span>\n  <span class=\"bp\">·</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 437149542,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1714930554
    },
    {
        "content": "<p>Another approach along those lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.nth_eq_iff_of_infinite</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Infinite</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nat.nth</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">Nat.count</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.count_nth_of_infinite</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">Nat.nth_mem_of_infinite</span> <span class=\"n\">hi</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.nth_count</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.nth</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.nth_eq_iff_of_infinite</span> <span class=\"n\">Nat.infinite_setOf_prime</span><span class=\"o\">]</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 437150049,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714930961
    },
    {
        "content": "<p>It turns out that's more powerful than needed. This suffices:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.nth</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert_to</span> <span class=\"n\">Nat.nth</span> <span class=\"n\">Nat.Prime</span> <span class=\"o\">(</span><span class=\"n\">Nat.count</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.nth_count</span> <span class=\"n\">Nat.prime_two</span>\n</code></pre></div>",
        "id": 437150279,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714931219
    },
    {
        "content": "<p>Or rather</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.nth</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.nth_count</span> <span class=\"n\">Nat.prime_two</span>\n</code></pre></div>",
        "id": 437150310,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714931273
    },
    {
        "content": "<p>Here's a way to make it all decidable</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Infinite</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">Nat.nth</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">Nat.count</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.count</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.lt_nth_iff_count_lt</span> <span class=\"n\">hp.elim</span><span class=\"o\">,</span> <span class=\"n\">Nat.count_le_iff_le_nth</span> <span class=\"n\">hp.elim</span><span class=\"o\">,</span>\n      <span class=\"n\">Nat.lt_succ_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.le_antisymm_iff</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">])</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"n\">Nat.Prime</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Infinite</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.infinite_setOf_prime</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.nth</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.nth</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.nth</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.nth</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 437150635,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1714931605
    },
    {
        "content": "<p>So this is more general, thus more preferred I guess.</p>",
        "id": 437150770,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714931757
    },
    {
        "content": "<p>That kind of decidable instance isn't the best, since it only applies to <code>Nat.nth Nat.Prime n = m</code>, and it can't be used to evaluate <code>Nat.nth Nat.prime n</code> inside of other expressions. (Plus, we generally don't want to add global <code>Fact</code>s if we can help it. That <code>Fact</code> might be ok since it has no hypotheses.)</p>",
        "id": 437150848,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714931813
    },
    {
        "content": "<p>The zeroth case suffices for me so'll first PR the one-liner.</p>",
        "id": 437151093,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714932032
    },
    {
        "content": "<p>There could one day either be a <code>norm_num</code> plugin or a <code>simproc</code> to calculate <code>Nat.nth Nat.prime n</code> in general</p>",
        "id": 437151599,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714932501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/2.20is.20the.20first.20prime/near/437150310\">said</a>:</p>\n<blockquote>\n<p>Or rather</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.nth</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.nth_count</span> <span class=\"n\">Nat.prime_two</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">DecidablePred</span> <span class=\"n\">Prime</span>\n</code></pre></div>",
        "id": 437151736,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714932627
    },
    {
        "content": "<p>Hmm.. simply adding it and an import of Nth to Nat/Prime will give me this error, but a plain mwe will not.<br>\nAh, I inserted too high in the file.</p>",
        "id": 437152163,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714933035
    },
    {
        "content": "<p>I think a good way to write the decidable instance would be to have a class <code>Productive p</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Nth</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Productive</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">next</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">next_least</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">next</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">next</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.nth'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Productive</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Productive.next</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.nth'</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nth_eq_nth'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Productive</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.nth</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.nth'</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Productive</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">Nat.nth</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">Nat.nth'</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nth_eq_nth'</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 437152281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714933138
    },
    {
        "content": "<p>Is it possible to write an efficient implementation of <code>Productive Nat.Prime</code>? <code>next</code> only gives you the largest prime you've generated so far, but you want to test divisibility against <em>all</em> the primes you've generated so far.</p>",
        "id": 437477313,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1715095507
    }
]