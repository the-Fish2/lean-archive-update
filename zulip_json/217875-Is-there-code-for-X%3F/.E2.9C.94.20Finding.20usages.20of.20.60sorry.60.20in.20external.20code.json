[
    {
        "content": "<p>I have some theorem I proved, but now that I do <code>#print axioms</code> I see <code>sorryAx</code> there. I checked that there's no <code>sorry</code> or <code>admit</code> in my code, so I suspect it's due to LeanAPAP, which I depend quite heavily on. Is there a quick way to find the path (preferably all paths) of how <code>sorryAx</code> arrived to my code?</p>",
        "id": 430475721,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711890488
    },
    {
        "content": "<p>(sorry...)</p>",
        "id": 430477195,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711892025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finding.20usages.20of.20.60sorry.60.20in.20external.20code/near/430477195\">said</a>:</p>\n<blockquote>\n<p>(sorry...)</p>\n</blockquote>\n<p>It's fine, this is still much better than having to do everything from scratch <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>. I just want to know where the relevant ones are so I could help fix them <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 430478080,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711892879
    },
    {
        "content": "<p>I think I managed to locate them by guessing and replacing <code>sorry</code>s with a new axiom - the <code>sorry</code>s are in NNRat.Cast.Defs and Expect.Basic. Regarding the theorems in <code>NNRat.Cast.Defs</code> I see there is a commented version below them which gives an error. What's going on there?<br>\nRegarding <code>Expect.Basic</code>, I'm not sure if the typeclass assumptions are enough - is there anything relating the field structure and the order other than <code>PosMulMono</code> for the first one, for example?</p>",
        "id": 430479429,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711894103
    },
    {
        "content": "<p>This should also move somewhere else, I guess. Where? How do I move it?</p>",
        "id": 430479449,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711894127
    },
    {
        "content": "<p>Ah okay, those sorries you won't be able to solve/it would be a waste of time to try. What's happening is that I need to change the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Semifield#doc\">docs#Semifield</a> to include the data of the canonical embedding from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NNRat#doc\">docs#NNRat</a>. This is done in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11203\">#11203</a>, but there are many prerequisites (awaiting review!)</p>",
        "id": 430485406,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711898910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690858\">Daniel Weber</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finding.20usages.20of.20.60sorry.60.20in.20external.20code/near/430479449\">said</a>:</p>\n<blockquote>\n<p>This should also move somewhere else, I guess. Where? How do I move it?</p>\n</blockquote>\n<p>There's no stream dedicated to LeanAPAP but I guess a maintainer could move it to <a class=\"stream\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general\">#general</a></p>",
        "id": 430485463,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711898959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finding.20usages.20of.20.60sorry.60.20in.20external.20code/near/430485406\">said</a>:</p>\n<blockquote>\n<p>Ah okay, those sorries you won't be able to solve/it would be a waste of time to try. What's happening is that I need to change the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Semifield#doc\">docs#Semifield</a> to include the data of the canonical embedding from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NNRat#doc\">docs#NNRat</a>. This is done in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11203\">#11203</a>, but there are many prerequisites (awaiting review!)</p>\n</blockquote>\n<p>I see. Is there anything I can do until it's merged? Depend on that branch on mathlib, maybe?</p>",
        "id": 430485816,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711899201
    },
    {
        "content": "<p>I guess you could, but it's all work that you will have to scrape soon, so probably just wait</p>",
        "id": 430485977,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711899380
    },
    {
        "content": "<p>There haven't been many reviews in the past two weeks because people were busy with LFTCM and <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> started a full time job, but I'm sure it will get in soon enough</p>",
        "id": 430486155,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711899580
    },
    {
        "content": "<p>Alright. Thanks!</p>",
        "id": 430488078,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711901282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690858\">Daniel Weber</span> has marked this topic as resolved.</p>",
        "id": 430488092,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711901284
    },
    {
        "content": "<p>You can always review the PRs, but I must say those are unusually technical <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 430496060,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711908503
    },
    {
        "content": "<p>The initial question remains though, is there a way to see where the sorries are coming from without having to guess ?</p>",
        "id": 430503311,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1711915293
    },
    {
        "content": "<p>I'm using a mathlib with the nightly Lean, so to use this you need to switch <code>realizeGlobalConstNoOverloadWithInfo</code> to <code>resolveGlobalConstNoOverloadWithInfo</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"sd\">/-- Whether the lemma has a name of the form produced by `Lean.Meta.mkAuxLemma`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Name.isAuxLemma</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"n\">matches</span> <span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"n\">_</span> <span class=\"s2\">\"_auxLemma\"</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Name.isProof</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String.isPrefixOf</span> <span class=\"s2\">\"proof_\"</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CollectAxiomBlame</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">State</span> <span class=\"n\">where</span>\n  <span class=\"n\">visited</span> <span class=\"o\">:</span> <span class=\"n\">NameSet</span>      <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n  <span class=\"kd\">axioms</span>  <span class=\"o\">:</span> <span class=\"n\">NameMap</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">ReaderT</span> <span class=\"n\">Environment</span> <span class=\"bp\">$</span> <span class=\"n\">StateM</span> <span class=\"n\">State</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">collect</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">collectExpr</span> <span class=\"o\">(</span><span class=\"n\">src'</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">e.getUsedConstants.forM</span> <span class=\"o\">(</span><span class=\"n\">collect</span> <span class=\"n\">src'</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n  <span class=\"n\">unless</span> <span class=\"n\">s.visited.contains</span> <span class=\"n\">c</span> <span class=\"k\">do</span>\n    <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">visited</span> <span class=\"o\">:=</span> <span class=\"n\">s.visited.insert</span> <span class=\"n\">c</span> <span class=\"o\">}</span>\n    <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n    <span class=\"k\">let</span> <span class=\"n\">src'</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">c.isAuxLemma</span> <span class=\"bp\">||</span> <span class=\"n\">c.isProof</span> <span class=\"k\">then</span> <span class=\"n\">src</span> <span class=\"k\">else</span> <span class=\"n\">c</span>\n    <span class=\"k\">match</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.axiomInfo</span> <span class=\"n\">_</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"kd\">axioms</span> <span class=\"o\">:=</span> <span class=\"n\">s.axioms.insert</span> <span class=\"n\">c</span> <span class=\"n\">src</span> <span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.defnInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.thmInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.opaqueInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.quotInfo</span> <span class=\"n\">_</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.ctorInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.recInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.inductInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">v.ctors.forM</span> <span class=\"o\">(</span><span class=\"n\">collect</span> <span class=\"n\">src'</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>                             <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CollectAxiomBlame</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#axiom_blame \"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.realizeGlobalConstNoOverloadWithInfo</span> <span class=\"n\">id</span>\n  <span class=\"n\">Elab.addCompletionInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">id</span> <span class=\"n\">id.getId</span> <span class=\"o\">(</span><span class=\"n\">danglingDot</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">{}</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">CollectAxiomBlame.collect</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">env</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">{}</span>\n  <span class=\"k\">if</span> <span class=\"n\">s.axioms.isEmpty</span> <span class=\"k\">then</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{n}' does not depend on any axioms\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">msgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">ax</span><span class=\"o\">,</span> <span class=\"n\">decl</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s.axioms</span> <span class=\"k\">do</span>\n      <span class=\"n\">msgs</span> <span class=\"o\">:=</span> <span class=\"n\">msgs.push</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{ax} (due to {decl})\"</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{n}' depends on axioms: {MessageData.joinSep msgs.toList \"</span><span class=\"o\">,</span> <span class=\"s2\">\"}\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">axiom_blame</span> <span class=\"n\">norm_add_mul_self_real</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">'norm_add_mul_self_real' depends on axioms: Quot.sound (due to funext),</span>\n<span class=\"cm\">Classical.choice (due to Classical.propDecidable), propext (due to Nat.gcd._unary)</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 430505651,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711917479
    },
    {
        "content": "<p>There's an example at the end, posted again here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">axiom_blame</span> <span class=\"n\">norm_add_mul_self_real</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">'norm_add_mul_self_real' depends on axioms: Quot.sound (due to funext),</span>\n<span class=\"cm\">Classical.choice (due to Classical.propDecidable), propext (due to Nat.gcd._unary)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 430505704,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711917498
    },
    {
        "content": "<p>It just finds <em>some</em> explanation for the axiom being present, but I added a bit of code so that it skips mentioning auxLemmas (which are produced by <code>simp</code>) and abstracted <code>proof_nnn</code> lemmas (which come from how definitions are processed). With some more work, you can modify this to record an actual chain of declarations that go to the axiom.</p>",
        "id": 430505739,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711917540
    },
    {
        "content": "<p>(This code is adapted from the code for <code>#print axioms</code>)</p>",
        "id": 430505908,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711917685
    },
    {
        "content": "<p>Here's a version that gives paths to the axioms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CollectAxiomBlame</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">State</span> <span class=\"n\">where</span>\n  <span class=\"n\">visited</span> <span class=\"o\">:</span> <span class=\"n\">NameSet</span>      <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n  <span class=\"kd\">axioms</span>  <span class=\"o\">:</span> <span class=\"n\">NameMap</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">ReaderT</span> <span class=\"n\">Environment</span> <span class=\"bp\">$</span> <span class=\"n\">StateM</span> <span class=\"n\">State</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">collect</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">collectExpr</span> <span class=\"o\">(</span><span class=\"n\">src'</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">e.getUsedConstants.forM</span> <span class=\"o\">(</span><span class=\"n\">collect</span> <span class=\"n\">src'</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n  <span class=\"n\">unless</span> <span class=\"n\">s.visited.contains</span> <span class=\"n\">c</span> <span class=\"k\">do</span>\n    <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">visited</span> <span class=\"o\">:=</span> <span class=\"n\">s.visited.insert</span> <span class=\"n\">c</span> <span class=\"o\">}</span>\n    <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n    <span class=\"k\">let</span> <span class=\"n\">src'</span> <span class=\"o\">:=</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">src</span>\n    <span class=\"k\">match</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.axiomInfo</span> <span class=\"n\">_</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"kd\">axioms</span> <span class=\"o\">:=</span> <span class=\"n\">s.axioms.insert</span> <span class=\"n\">c</span> <span class=\"n\">src'</span> <span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.defnInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.thmInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.opaqueInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.quotInfo</span> <span class=\"n\">_</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.ctorInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.recInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.inductInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">v.ctors.forM</span> <span class=\"o\">(</span><span class=\"n\">collect</span> <span class=\"n\">src'</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>                             <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CollectAxiomBlame</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#axiom_blame \"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.realizeGlobalConstNoOverloadWithInfo</span> <span class=\"n\">id</span>\n  <span class=\"n\">Elab.addCompletionInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">id</span> <span class=\"n\">id.getId</span> <span class=\"o\">(</span><span class=\"n\">danglingDot</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">{}</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">CollectAxiomBlame.collect</span> <span class=\"o\">[]</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">env</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">{}</span>\n  <span class=\"k\">if</span> <span class=\"n\">s.axioms.isEmpty</span> <span class=\"k\">then</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{n}' does not depend on any axioms\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">msgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">ax</span><span class=\"o\">,</span> <span class=\"n\">decls</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s.axioms</span> <span class=\"k\">do</span>\n      <span class=\"n\">msgs</span> <span class=\"o\">:=</span> <span class=\"n\">msgs.push</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"* {ax}: {MessageData.joinSep decls.reverse \"</span> <span class=\"bp\">→</span> <span class=\"s2\">\"}\"</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{n}' depends on axioms:</span><span class=\"se\">\\n\\n</span><span class=\"s2\">{MessageData.joinSep msgs.toList \"</span><span class=\"bp\">\\</span><span class=\"n\">n</span><span class=\"bp\">\\</span><span class=\"n\">n</span><span class=\"s2\">\"}\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">axiom_blame</span> <span class=\"n\">norm_add_mul_self_real</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">'norm_add_mul_self_real' depends on axioms:</span>\n\n<span class=\"cm\">* Quot.sound: norm_add_mul_self_real → NormedAddCommGroup → NormedAddCommGroup.mk → Norm → Norm.mk →</span>\n<span class=\"cm\">Real → Real.ofCauchy → CauSeq.Completion.Cauchy → StrictOrderedCommSemiring.toOrderedCommSemiring →</span>\n<span class=\"cm\">StrictOrderedSemiring.toOrderedSemiring → StrictOrderedSemiring.toOrderedSemiring.proof_1 →</span>\n<span class=\"cm\">Classical.decRel → Classical.propDecidable → Classical.propDecidable.proof_1 → Classical.em →</span>\n<span class=\"cm\">funext → Quot.sound</span>\n\n<span class=\"cm\">* Classical.choice: norm_add_mul_self_real → NormedAddCommGroup → NormedAddCommGroup.mk → Norm →</span>\n<span class=\"cm\">Norm.mk → Real → Real.ofCauchy → CauSeq.Completion.Cauchy →</span>\n<span class=\"cm\">StrictOrderedCommSemiring.toOrderedCommSemiring → StrictOrderedSemiring.toOrderedSemiring →</span>\n<span class=\"cm\">StrictOrderedSemiring.toOrderedSemiring.proof_1 → Classical.decRel → Classical.propDecidable →</span>\n<span class=\"cm\">Classical.choice</span>\n\n<span class=\"cm\">* propext: norm_add_mul_self_real → NormedAddCommGroup → NormedAddCommGroup.mk → Norm → Norm.mk →</span>\n<span class=\"cm\">Real → Real.ofCauchy → CauSeq.Completion.Cauchy → LinearOrderedField → LinearOrderedField.mk →</span>\n<span class=\"cm\">RatCast → RatCast.mk → Rat → Rat.mk' → Nat.Coprime → Nat.gcd → Nat.gcd._unary →</span>\n<span class=\"cm\">Nat.gcd._unary.proof_2 → Init.Core._auxLemma.7 → propext</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 430509619,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711921239
    },
    {
        "content": "<p>Example with <code>sorryAx</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">foo.elim</span>\n\n<span class=\"bp\">#</span><span class=\"n\">axiom_blame</span> <span class=\"n\">foo'</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">'foo'' depends on axioms:</span>\n\n<span class=\"cm\">* sorryAx: foo' → foo → sorryAx</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 430509765,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711921357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Finding.20usages.20of.20.60sorry.60.20in.20external.20code/near/430509619\">said</a>:</p>\n<blockquote>\n<p>Here's a version that gives paths to the axioms:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CollectAxiomBlame</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">State</span> <span class=\"n\">where</span>\n  <span class=\"n\">visited</span> <span class=\"o\">:</span> <span class=\"n\">NameSet</span>      <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n  <span class=\"kd\">axioms</span>  <span class=\"o\">:</span> <span class=\"n\">NameMap</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">ReaderT</span> <span class=\"n\">Environment</span> <span class=\"bp\">$</span> <span class=\"n\">StateM</span> <span class=\"n\">State</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">collect</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">collectExpr</span> <span class=\"o\">(</span><span class=\"n\">src'</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">e.getUsedConstants.forM</span> <span class=\"o\">(</span><span class=\"n\">collect</span> <span class=\"n\">src'</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n  <span class=\"n\">unless</span> <span class=\"n\">s.visited.contains</span> <span class=\"n\">c</span> <span class=\"k\">do</span>\n    <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">visited</span> <span class=\"o\">:=</span> <span class=\"n\">s.visited.insert</span> <span class=\"n\">c</span> <span class=\"o\">}</span>\n    <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n    <span class=\"k\">let</span> <span class=\"n\">src'</span> <span class=\"o\">:=</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">src</span>\n    <span class=\"k\">match</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.axiomInfo</span> <span class=\"n\">_</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"kd\">axioms</span> <span class=\"o\">:=</span> <span class=\"n\">s.axioms.insert</span> <span class=\"n\">c</span> <span class=\"n\">src'</span> <span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.defnInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.thmInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.opaqueInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.quotInfo</span> <span class=\"n\">_</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.ctorInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.recInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.inductInfo</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">collectExpr</span> <span class=\"n\">src'</span> <span class=\"n\">v.type</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">v.ctors.forM</span> <span class=\"o\">(</span><span class=\"n\">collect</span> <span class=\"n\">src'</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>                             <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CollectAxiomBlame</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#axiom_blame \"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.realizeGlobalConstNoOverloadWithInfo</span> <span class=\"n\">id</span>\n  <span class=\"n\">Elab.addCompletionInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">id</span> <span class=\"n\">id.getId</span> <span class=\"o\">(</span><span class=\"n\">danglingDot</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">{}</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">CollectAxiomBlame.collect</span> <span class=\"o\">[]</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">env</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">{}</span>\n  <span class=\"k\">if</span> <span class=\"n\">s.axioms.isEmpty</span> <span class=\"k\">then</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{n}' does not depend on any axioms\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">msgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">ax</span><span class=\"o\">,</span> <span class=\"n\">decls</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s.axioms</span> <span class=\"k\">do</span>\n      <span class=\"n\">msgs</span> <span class=\"o\">:=</span> <span class=\"n\">msgs.push</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"* {ax}: {MessageData.joinSep decls.reverse \"</span> <span class=\"bp\">→</span> <span class=\"s2\">\"}\"</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{n}' depends on axioms:</span><span class=\"se\">\\n\\n</span><span class=\"s2\">{MessageData.joinSep msgs.toList \"</span><span class=\"bp\">\\</span><span class=\"n\">n</span><span class=\"bp\">\\</span><span class=\"n\">n</span><span class=\"s2\">\"}\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">axiom_blame</span> <span class=\"n\">norm_add_mul_self_real</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">'norm_add_mul_self_real' depends on axioms:</span>\n\n<span class=\"cm\">* Quot.sound: norm_add_mul_self_real → NormedAddCommGroup → NormedAddCommGroup.mk → Norm → Norm.mk →</span>\n<span class=\"cm\">Real → Real.ofCauchy → CauSeq.Completion.Cauchy → StrictOrderedCommSemiring.toOrderedCommSemiring →</span>\n<span class=\"cm\">StrictOrderedSemiring.toOrderedSemiring → StrictOrderedSemiring.toOrderedSemiring.proof_1 →</span>\n<span class=\"cm\">Classical.decRel → Classical.propDecidable → Classical.propDecidable.proof_1 → Classical.em →</span>\n<span class=\"cm\">funext → Quot.sound</span>\n\n<span class=\"cm\">* Classical.choice: norm_add_mul_self_real → NormedAddCommGroup → NormedAddCommGroup.mk → Norm →</span>\n<span class=\"cm\">Norm.mk → Real → Real.ofCauchy → CauSeq.Completion.Cauchy →</span>\n<span class=\"cm\">StrictOrderedCommSemiring.toOrderedCommSemiring → StrictOrderedSemiring.toOrderedSemiring →</span>\n<span class=\"cm\">StrictOrderedSemiring.toOrderedSemiring.proof_1 → Classical.decRel → Classical.propDecidable →</span>\n<span class=\"cm\">Classical.choice</span>\n\n<span class=\"cm\">* propext: norm_add_mul_self_real → NormedAddCommGroup → NormedAddCommGroup.mk → Norm → Norm.mk →</span>\n<span class=\"cm\">Real → Real.ofCauchy → CauSeq.Completion.Cauchy → LinearOrderedField → LinearOrderedField.mk →</span>\n<span class=\"cm\">RatCast → RatCast.mk → Rat → Rat.mk' → Nat.Coprime → Nat.gcd → Nat.gcd._unary →</span>\n<span class=\"cm\">Nat.gcd._unary.proof_2 → Init.Core._auxLemma.7 → propext</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 430535235,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711943496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Finding.20usages.20of.20.60sorry.60.20in.20external.20code/near/430485406\">said</a>:</p>\n<blockquote>\n<p>Ah okay, those sorries you won't be able to solve/it would be a waste of time to try. What's happening is that I need to change the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Semifield#doc\">docs#Semifield</a> to include the data of the canonical embedding from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NNRat#doc\">docs#NNRat</a>. This is done in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11203\">#11203</a>, but there are many prerequisites (awaiting review!)</p>\n</blockquote>\n<p>Is this also the case for the sorries in <code>Discrete.DFT.Basic</code> and <code>Discrete.DFT.Compact</code>?</p>",
        "id": 430535503,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711943659
    },
    {
        "content": "<p>No, those you could solve</p>",
        "id": 430553231,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711955047
    },
    {
        "content": "<p>Kyle, could we axiom-blame for a specific axiom?</p>",
        "id": 430554266,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711955768
    },
    {
        "content": "<p>Just came to say that <code>#axiom_blame</code> from Kyle above is amazing <span aria-label=\"heart eyes cat\" class=\"emoji emoji-1f63b\" role=\"img\" title=\"heart eyes cat\">:heart_eyes_cat:</span> Some months ago I saw <code>print_sorry_in</code> for Lean 3 <a href=\"https://github.com/leanprover-community/mathlib/pull/16911/files\">here</a> and was afraid it would not be ported. But this one here works super nicely in my project.</p>\n<p>A small change I made is to replace the full <code>import Lean</code> with only  <code>import Lean.Elab.Command</code> and <code>import Lean.Util.FoldConsts</code>. For <code>import Mathlib</code> I have not figured out yet what a more minimal dependency would be, as I get errors about <code>decls.reverse</code> with anything smaller.</p>",
        "id": 442229261,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1717415200
    },
    {
        "content": "<p>Does  #minimize_imports work?</p>",
        "id": 442234336,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717416500
    },
    {
        "content": "<p>It says</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lake</span><span class=\"bp\">.</span><span class=\"n\">Util</span><span class=\"bp\">.</span><span class=\"n\">Lift</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lake</span><span class=\"bp\">.</span><span class=\"n\">Util</span><span class=\"bp\">.</span><span class=\"n\">Name</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">Recall</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Init</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">Instances</span>\n</code></pre></div>",
        "id": 442236376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717417102
    },
    {
        "content": "<p>It seems <code>import Mathlib.Init.Data.List.Instances</code> by itself is enough</p>",
        "id": 442237727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717417470
    },
    {
        "content": "<p>Because it needs <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.instMonad#doc\">docs#List.instMonad</a></p>",
        "id": 442238026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717417557
    },
    {
        "content": "<p>That was very unexpected. It turns out that instance enabled a coercion for <code>decls.reverse</code>, but you can avoid it by writing <code>(decls.reverse.map toMessageData)</code> instead.</p>",
        "id": 442242526,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717418649
    },
    {
        "content": "<p>Ah, I did not even know minimize_imports yet. Thanks!</p>",
        "id": 442252911,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1717421244
    }
]