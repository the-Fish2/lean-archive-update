[
    {
        "content": "<p>I need that a non-zero element of a Dedekind domain only has finitely many prime divisors. The variant I need is this, but is there anything close?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"n\">v.intValuation</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">Finite</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 439621687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716226948
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.finite_factors#doc\">docs#Ideal.finite_factors</a> is promising</p>",
        "id": 439629028,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1716229626
    },
    {
        "content": "<p>That file also has some stuff about fractional ideals which would be more appropriate if you want to do this for elements of the fraction field as well</p>",
        "id": 439629329,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1716229724
    },
    {
        "content": "<p>This holds for all 1D noetherian domains: <a href=\"https://math.stackexchange.com/a/3930565/12932\">https://math.stackexchange.com/a/3930565/12932</a></p>",
        "id": 439752385,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1716277742
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.DedekindDomain.AdicValuation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.DedekindDomain.Factorization</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">IsDedekindDomain</span> <span class=\"n\">IsDedekindDomain.HeightOneSpectrum</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"n\">v.intValuation</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">Finite</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"n\">v.intValuationDef</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">Finite</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">int_valuation_lt_one_iff_dvd</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Ideal.finite_factors</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Submodule.zero_eq_bot</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">Ideal.span_singleton_eq_bot</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 439780940,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1716286891
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 439797122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716291340
    },
    {
        "content": "<p>Wow, the naming around <code>intValuationDef</code> is a mess:</p>\n<ul>\n<li>IsDedekindDomain.HeightOneSpectrum.intValuationDef_if_pos</li>\n<li>IsDedekindDomain.HeightOneSpectrum.int_valuation_le_pow_iff_dvd</li>\n<li>IsDedekindDomain.HeightOneSpectrum.IntValuation.map_zero'</li>\n</ul>",
        "id": 439799212,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716292109
    },
    {
        "content": "<p>OK, I agree. It probably calls for a fixing PR... I might try this later on unless <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> you're already on it.</p>",
        "id": 439801574,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1716292982
    },
    {
        "content": "<p>I'm perfectly happy for someone else to take it on :)</p>",
        "id": 439803356,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716293618
    },
    {
        "content": "<p>(Please apply the new <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> convention around namespaced declarations <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span>)</p>",
        "id": 439803490,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716293655
    },
    {
        "content": "<p>So what I actually want is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">v.valuation</span> <span class=\"n\">k</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">Finite</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but I had reduced it to the integral case using some slightly painful arithmetic in <code>ℤₘ₀</code> (in particular I had to prove some inequalities which were a bit painful because of a lack of tactic which would do it for me). Can this example be done directly without reducing to the integral case?</p>",
        "id": 439896859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716322698
    },
    {
        "content": "<p>You could use <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/DedekindDomain/Factorization.html#FractionalIdeal.finite_factors\">FractionalIdeal.finite_factors</a></p>",
        "id": 439900053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1716323736
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/DedekindDomain/Factorization.html#FractionalIdeal.finite_factors'\">FractionalIdeal.finite_factors'</a> (with this one I hope that Filippo's argument could be modified to work)</p>",
        "id": 439900233,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1716323790
    },
    {
        "content": "<p>That would give you finiteness of the support of <code>k</code> (i.e. those valuations where <code>k</code> is not a unit at the valuation ring), and you could get finiteness of the set you want because it's a subset of the support.</p>",
        "id": 439900525,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1716323889
    },
    {
        "content": "<p>Ok my reduction to the integral case is now less painful but I'll take a look at this too because it's the right way to do it (although you need a case split on whether k=0 in this route)</p>",
        "id": 439901069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716324111
    },
    {
        "content": "<p>Honestly I'm surprised we don't have a better API for such supports</p>",
        "id": 439901487,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1716324249
    },
    {
        "content": "<p>Yeah I know Anne and Maria Ines did a bunch of work here, but this is the first time I'm using it myself and I'm still finding my feet.</p>",
        "id": 439908384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716326758
    },
    {
        "content": "<p>Just because I got trapped into this, I post one solution, that \" reduces to the integral case but only a little bit\". At any rate I still agree we lack a good API.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HeightOneSpectrum</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">v.intValuation</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"n\">change</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HeightOneSpectrum</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">v.intValuationDef</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">Finite</span>\n<span class=\"w\">  </span><span class=\"n\">simp_rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">int_valuation_lt_one_iff_dvd</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Ideal.finite_factors</span>\n<span class=\"w\">  </span><span class=\"n\">simpa</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Submodule.zero_eq_bot</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ne_eq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Ideal.span_singleton_eq_bot</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">IsFractionRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hk₀</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HeightOneSpectrum</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">v.valuation</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"n\">obtain</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"n\">s₀</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hs₀</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">⟩⟩</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">IsFractionRing.div_surjective</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">k</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hr₀</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">    </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">abs</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">abs</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">map_zero</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">zero_div</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ne_eq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">not_true_eq_false</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">hk₀</span>\n<span class=\"w\">  </span><span class=\"n\">simp_rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IsFractionRing.mk'_mk_eq_div</span><span class=\"w\"> </span><span class=\"n\">hs₀</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">valuation_of_mk'</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">suffices</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HeightOneSpectrum</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">v.intValuation</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">v.intValuation</span><span class=\"w\"> </span><span class=\"n\">s₀</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"bp\">⊆</span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HeightOneSpectrum</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">v.intValuation</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">    </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Set.Finite.subset</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">hr₀</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hr_val</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">v.intValuation</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">int_valuation_ne_zero</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">hr₀</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hs_val</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">v.intValuation</span><span class=\"w\"> </span><span class=\"n\">s₀</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">int_valuation_ne_zero</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nonZeroDivisors.ne_zero</span><span class=\"w\"> </span><span class=\"n\">hs₀</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">WithZero.coe_unzero</span><span class=\"w\"> </span><span class=\"n\">hr_val</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">WithZero.coe_one</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">WithZero.coe_unzero</span><span class=\"w\"> </span><span class=\"n\">hs_val</span><span class=\"o\">,</span>\n<span class=\"w\">    </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">WithZero.coe_div</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">WithZero.coe_lt_coe</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">WithZero.coe_unzero</span><span class=\"w\"> </span><span class=\"n\">hr_val</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">WithZero.coe_one</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">WithZero.coe_lt_coe</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">lt_of_le_of_lt</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">le_div_self_iff</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">WithZero.coe_le_coe</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">WithZero.coe_one</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">WithZero.coe_unzero</span><span class=\"w\"> </span><span class=\"n\">hs_val</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">int_valuation_le_one</span>\n\n<span class=\"kd\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">IsFractionRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hk₀</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HeightOneSpectrum</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">v.valuation</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inv_ne_zero</span><span class=\"w\"> </span><span class=\"n\">hk₀</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">v</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hvk</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v.valuation</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">simpa</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">map_eq_zero</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">map_inv₀</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">coe_one</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">gt_iff_lt</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">WithZero.coe_unzero</span><span class=\"w\"> </span><span class=\"n\">hvk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">WithZero.coe_one</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">WithZero.coe_lt_coe</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">WithZero.coe_inv</span><span class=\"o\">,</span>\n<span class=\"w\">    </span><span class=\"n\">WithZero.coe_lt_coe</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">one_lt_inv'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">inv_inv</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 440286918,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1716457809
    },
    {
        "content": "<p>In our project with <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> we improve the API for the type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mrow><mi>m</mi><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_{m0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, see in particular the file <a href=\"https://github.com/mariainesdff/LocalClassFieldTheory/blob/master/LocalClassFieldTheory/ForMathlib/WithZero.lean\">https://github.com/mariainesdff/LocalClassFieldTheory/blob/master/LocalClassFieldTheory/ForMathlib/WithZero.lean</a><br>\nthat will soon be PR'd.</p>",
        "id": 440291243,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1716459387
    },
    {
        "content": "<p>I think that a bunch of stuff there (e.g. <code>withZeroMultIntToNNReal_pos</code>) just follows from general lemmas like <code>mul_pos</code> once <a href=\"https://github.com/leanprover-community/mathlib4/pull/13111\">#13111</a> is merged.</p>",
        "id": 440296248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716461316
    },
    {
        "content": "<p>Oh sure, thanks for the hint!</p>",
        "id": 440300096,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1716462851
    },
    {
        "content": "<p>By the way <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> I used your original argument to prove that the finite adeles were a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>-algebra in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13021\">#13021</a></p>",
        "id": 440300981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716463181
    },
    {
        "content": "<p>I might have a round of review to both these PR's.</p>",
        "id": 440301135,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1716463229
    },
    {
        "content": "<p>Note that <a href=\"https://github.com/leanprover-community/mathlib4/pull/13111\">#13111</a> is awaiting-author</p>",
        "id": 440301137,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716463230
    },
    {
        "content": "<p>Having a look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/13020\">#13020</a></p>",
        "id": 440301174,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716463245
    },
    {
        "content": "<p>Yeah I changed it to that a couple of hours ago myself, because Yael told me I should move it to a new file, and then I realised that probably I should add the symmetric versions of both instances as well (except that I have a meeting in ten minutes :-/ )</p>",
        "id": 440301310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716463307
    },
    {
        "content": "<p>Having a look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/13021\">#13021</a></p>",
        "id": 440301811,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1716463482
    },
    {
        "content": "<p>OK I just made it. Sorry about the code duplication :-)</p>",
        "id": 440302342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716463672
    },
    {
        "content": "<p>Also, <a href=\"https://github.com/leanprover-community/mathlib4/pull/13111\">#13111</a> currently has some build issue.</p>",
        "id": 440310634,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1716466852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Element.20of.20a.20Dedekind.20domain.20only.20has.20finitely.20many.20divisors/near/440310634\">said</a>:</p>\n<blockquote>\n<p>Also, <a href=\"https://github.com/leanprover-community/mathlib4/pull/13111\">#13111</a> currently has some build issue.</p>\n</blockquote>\n<p>I pushed a fix, Yaël moved a file that you imported :)</p>",
        "id": 440311690,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716467227
    }
]