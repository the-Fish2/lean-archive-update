[
    {
        "content": "<p>Hello, is there a way of manipulating fields of sets? In the sense defined here: <a href=\"https://en.wikipedia.org/wiki/Field_of_sets\">https://en.wikipedia.org/wiki/Field_of_sets</a><br>\nIn particular the field generated by some collection of subsets.</p>",
        "id": 430429690,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711843322
    },
    {
        "content": "<p>if we don't have it, I'm sure you could define something similar to the way we define <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasurableSpace#doc\">docs#MeasurableSpace</a> but with the countable union condition replaced with binary unions</p>",
        "id": 430431165,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711844778
    },
    {
        "content": "<p>All right thanks, I thought I would do that.<br>\nIt’s just that I need a property (the field generated by a countable family is countable) and I didn’t think a lot about it but it seems to be painful <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 430459687,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711873796
    },
    {
        "content": "<p>Also, should it be defined as a <code>Set X → Prop</code> function like in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasurableSpace#doc\">docs#MeasurableSpace</a> or rather as a <code>Set (Set X)</code> like in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter#doc\">docs#Filter</a> for example? I don't really get what are the advantages and drawbacks of these two methods.</p>",
        "id": 430463415,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711877818
    },
    {
        "content": "<p>We have rings of sets (= field that may not contain univ if I recall correctly) here: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.IsSetRing#doc\">docs#MeasureTheory.IsSetRing</a><br>\nThis is a recent addition and there is almost nothing about them.</p>",
        "id": 430464293,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711878663
    },
    {
        "content": "<p>Oh thanks! Indeed there's a lot to add</p>",
        "id": 430464803,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711879190
    },
    {
        "content": "<p>I am planning to add a bit more about them because I have material about Caratheodory's and Kolmogorov's extension theorems that I want to PR (and IsSetSemiring and IsSetRing were added for that use)... but that progress has stalled for now.</p>",
        "id": 430465435,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711879770
    },
    {
        "content": "<p>I see, indeed it would be interesting to have those!</p>",
        "id": 430465789,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711880122
    },
    {
        "content": "<blockquote>\n<p>It’s just that I need a property (the field generated by a countable family is countable) and I didn’t think a lot about it but it seems to be painful <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>I think you can mimic the proof using W-types in <a href=\"https://github.com/leanprover-community/mathlib4/blob/9158f323bd15bc3bab5209558cb9bffa1f9f03ec/Mathlib/SetTheory/Cardinal/Subfield.lean#L82-L84\">this file</a> which is for subfields of a field or division ring (the algebraic structure). Alternatively you can convert the problem to one about Boolean algebras, where we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.adjoin_eq_range#doc\">docs#Algebra.adjoin_eq_range</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.cardinal_mk_eq_max#doc\">docs#MvPolynomial.cardinal_mk_eq_max</a>.</p>",
        "id": 430495521,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1711908070
    },
    {
        "content": "<p>All right thank you, I'll look that up.</p>",
        "id": 430500506,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711912843
    }
]