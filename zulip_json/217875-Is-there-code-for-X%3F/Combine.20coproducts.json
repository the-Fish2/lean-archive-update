[
    {
        "content": "<p>Is there something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span> <span class=\"n\">Functor</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">comb</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ColimitCocone</span> <span class=\"o\">(</span><span class=\"n\">Discrete.functor</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ColimitCocone</span> <span class=\"o\">(</span><span class=\"n\">Discrete.functor</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cocone.pt</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cocone</span> <span class=\"o\">(</span><span class=\"n\">Discrete.functor</span> <span class=\"o\">(</span><span class=\"n\">Sigma.uncurry</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>i.e. given a family of coproduct diagrams indexed over some type <code>α</code> and a coproduct of the cone points, is there one big coproduct on <code>Sigma f</code>?<br>\nI tried to formulate this for arbitrary functors first (indead of restricting to <code>Discrete.functor</code>) but I struggled to emulate the dependence on the value of <code>f</code>.<br>\nThere is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.combineCocones#doc\">docs#CategoryTheory.Limits.combineCocones</a> but there the index categories are the same for every diagram (i.e. <code>f</code> above would have to be constant).</p>",
        "id": 401441241,
        "sender_full_name": "Christian Merten",
        "timestamp": 1699653180
    },
    {
        "content": "<p>I prove something similar in PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/8242\">#8242</a>:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/8242/files#diff-872c679954b062c45a489c6ba4184c58b3220532467f779d8859dcc80692358dR435-R444\">https://github.com/leanprover-community/mathlib4/pull/8242/files#diff-872c679954b062c45a489c6ba4184c58b3220532467f779d8859dcc80692358dR435-R444</a></p>",
        "id": 401444404,
        "sender_full_name": "Joël Riou",
        "timestamp": 1699655547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span>  To clean up some code, I tried to replace my ad-hoc proof of the sorry above by using the <code>GradedObject</code> API, in particular I tried to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.GradedObject.isColimitCofanMapObjComp#doc\">docs#CategoryTheory.GradedObject.isColimitCofanMapObjComp</a> that you added in the above mentioned PR.</p>\n<p>This is the very much horrible result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">blaequiv1</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Discrete</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">↦</span> <span class=\"o\">())</span><span class=\"bp\">⁻¹'</span> <span class=\"o\">{()})</span> <span class=\"bp\">≌</span> <span class=\"n\">Discrete</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">blaequiv2</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">blaequiv1</span> <span class=\"n\">ι</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">functor</span> <span class=\"bp\">⋙</span> <span class=\"n\">Discrete.functor</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n    <span class=\"bp\">≅</span>\n    <span class=\"n\">Discrete.functor</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∘</span> <span class=\"n\">Subtype.val</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">blaequiv3</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">GradedObject.CofanMapObjFun</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"o\">())</span> <span class=\"o\">()</span>\n    <span class=\"bp\">≌</span> <span class=\"n\">Cofan</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">symm</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Cocones.equivalenceOfReindexing</span> <span class=\"o\">(</span><span class=\"n\">blaequiv1</span> <span class=\"n\">ι</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">blaequiv2</span> <span class=\"n\">ι</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fooequiv1</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Discrete</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"n\">x.fst</span><span class=\"o\">)</span><span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"bp\">≌</span> <span class=\"n\">Discrete</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fooequiv2</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">fooequiv1</span> <span class=\"n\">ι</span> <span class=\"n\">t</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">functor</span> <span class=\"bp\">⋙</span> <span class=\"n\">Discrete.functor</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"bp\">≅</span> <span class=\"n\">Discrete.functor</span> <span class=\"o\">(</span><span class=\"n\">Sigma.uncurry</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">Subtype.val</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fooequiv3</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">GradedObject.CofanMapObjFun</span> <span class=\"o\">(</span><span class=\"n\">Sigma.uncurry</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">Sigma.fst</span> <span class=\"n\">i</span>\n    <span class=\"bp\">≌</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">symm</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Cocones.equivalenceOfReindexing</span> <span class=\"o\">(</span><span class=\"n\">fooequiv1</span> <span class=\"n\">ι</span> <span class=\"n\">t</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fooequiv2</span> <span class=\"n\">ι</span> <span class=\"n\">t</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">combCofans</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">cf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">cg</span> <span class=\"o\">:</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">cf</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pt</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"n\">Sigma.uncurry</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Sigma</span> <span class=\"n\">t</span>\n  <span class=\"k\">let</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">GradedObject</span> <span class=\"n\">I</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">Sigma.uncurry</span> <span class=\"n\">f</span>\n  <span class=\"k\">let</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ι</span>\n  <span class=\"k\">let</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">J</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">i</span>\n  <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"o\">()</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">q</span> <span class=\"bp\">∘</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpqr</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">GradedObject.CofanMapObjFun</span> <span class=\"n\">X</span> <span class=\"n\">p</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">fooequiv3</span> <span class=\"n\">ι</span> <span class=\"n\">t</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inverse.obj</span> <span class=\"o\">(</span><span class=\"n\">cf</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">})</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pt</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">blaequiv3</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pt</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">inverse.obj</span> <span class=\"n\">cg</span>\n  <span class=\"k\">let</span> <span class=\"n\">cfm</span> <span class=\"o\">:=</span> <span class=\"n\">X.cofanMapObjComp</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">hpqr</span> <span class=\"n\">k</span> <span class=\"n\">c</span> <span class=\"n\">c'</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">blaequiv3</span> <span class=\"n\">_</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">functor.obj</span> <span class=\"n\">cfm</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">combCofansIsColimit</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">cf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hcf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IsColimit</span> <span class=\"o\">(</span><span class=\"n\">cf</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">cg</span> <span class=\"o\">:</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">cf</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pt</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hcg</span> <span class=\"o\">:</span> <span class=\"n\">IsColimit</span> <span class=\"n\">cg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsColimit</span> <span class=\"o\">(</span><span class=\"n\">combCofans</span> <span class=\"n\">ι</span> <span class=\"n\">t</span> <span class=\"n\">f</span> <span class=\"n\">cf</span> <span class=\"n\">cg</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Sigma</span> <span class=\"n\">t</span>\n  <span class=\"k\">let</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">GradedObject</span> <span class=\"n\">I</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">Sigma.uncurry</span> <span class=\"n\">f</span>\n  <span class=\"k\">let</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ι</span>\n  <span class=\"k\">let</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">J</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">i</span>\n  <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"o\">()</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">q</span> <span class=\"bp\">∘</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpqr</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">GradedObject.CofanMapObjFun</span> <span class=\"n\">X</span> <span class=\"n\">p</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">fooequiv3</span> <span class=\"n\">ι</span> <span class=\"n\">t</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inverse.obj</span> <span class=\"o\">(</span><span class=\"n\">cf</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">})</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pt</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">blaequiv3</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pt</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">inverse.obj</span> <span class=\"n\">cg</span>\n  <span class=\"k\">let</span> <span class=\"n\">cfm</span> <span class=\"o\">:=</span> <span class=\"n\">X.cofanMapObjComp</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">hpqr</span> <span class=\"n\">k</span> <span class=\"n\">c</span> <span class=\"n\">c'</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">IsColimit</span> <span class=\"n\">cfm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">GradedObject.isColimitCofanMapObjComp</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">j</span> <span class=\"n\">h</span>\n      <span class=\"k\">show</span> <span class=\"n\">IsColimit</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">IsColimit.ofCoconeEquiv</span> <span class=\"o\">(</span><span class=\"n\">fooequiv3</span> <span class=\"n\">ι</span> <span class=\"n\">t</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">hcf</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">IsColimit</span> <span class=\"o\">((</span><span class=\"n\">blaequiv3</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pt</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">inverse.obj</span> <span class=\"n\">cg</span><span class=\"o\">)</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">IsColimit.ofCoconeEquiv</span> <span class=\"o\">(</span><span class=\"n\">blaequiv3</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pt</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">hcg</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">IsColimit.ofCoconeEquiv</span> <span class=\"o\">(</span><span class=\"n\">blaequiv3</span> <span class=\"n\">_</span> <span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 420440762,
        "sender_full_name": "Christian Merten",
        "timestamp": 1707393217
    },
    {
        "content": "<p>I made it extra verbose to see what's going on. Do you think this can be optimized (more on a global scale, of course this can be golfed)? Or should I simply go with a direct implementation (which is not hard and definitely shorter than the above (even if one golfs away all the verboseness).</p>",
        "id": 420441077,
        "sender_full_name": "Christian Merten",
        "timestamp": 1707393338
    },
    {
        "content": "<p>If I had to do this, I think would first prove the following variant of <code>GradedObject.isColimitCofanMapObjComp</code>, and then deduce the case of sigma types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">j</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"n\">IsColimit</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pt</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hc'</span> <span class=\"o\">:</span> <span class=\"n\">IsColimit</span> <span class=\"n\">c'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cofanCombine</span> <span class=\"o\">:</span> <span class=\"n\">Cofan</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Cofan.mk</span> <span class=\"n\">c'.pt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">≫</span> <span class=\"n\">c'.inj</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isColimitCofanCombine</span> <span class=\"o\">:</span> <span class=\"n\">IsColimit</span> <span class=\"o\">(</span><span class=\"n\">cofanCombine</span> <span class=\"n\">X</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Actually, this variant could be added first in <code>CategoryTheory.GradedObject</code> because this would basically show how <code>GradedObject.total</code> interacts with <code>GradedObject.map</code>.</p>",
        "id": 420456653,
        "sender_full_name": "Joël Riou",
        "timestamp": 1707398760
    },
    {
        "content": "<p>Thanks!<br>\n<span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Combine.20coproducts/near/420456653\">said</a>:</p>\n<blockquote>\n<p>Actually, this variant could be added first in <code>CategoryTheory.GradedObject</code> because this would basically show how <code>GradedObject.total</code> interacts with <code>GradedObject.map</code>.</p>\n</blockquote>\n<p>Are you saying that <code>GradedObject.isColimitCofanMapObjComp</code> should be deduced from the variant you gave above?</p>",
        "id": 420489173,
        "sender_full_name": "Christian Merten",
        "timestamp": 1707408115
    },
    {
        "content": "<p>And this is the code for the sigma types using your <code>combineCofan</code> from above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"n\">IsColimit</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pt</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hc'</span> <span class=\"o\">:</span> <span class=\"n\">IsColimit</span> <span class=\"n\">c'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">fooequiv0</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Sigma.fst</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">a</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fooequiv2</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">Discrete.equivalence</span> <span class=\"o\">(</span><span class=\"n\">fooequiv0</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">functor</span> <span class=\"bp\">⋙</span> <span class=\"n\">Discrete.functor</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"bp\">≅</span> <span class=\"n\">Discrete.functor</span> <span class=\"o\">(</span><span class=\"n\">Sigma.uncurry</span> <span class=\"n\">X</span> <span class=\"bp\">∘</span> <span class=\"n\">Subtype.val</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Discrete.natIso</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eqToIso</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fooequiv3</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≌</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(⟨⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Sigma.fst</span><span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"n\">j</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Cocones.equivalenceOfReindexing</span> <span class=\"o\">(</span><span class=\"n\">Discrete.equivalence</span> <span class=\"o\">(</span><span class=\"n\">fooequiv0</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fooequiv2</span> <span class=\"n\">t</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cofanCombine'</span> <span class=\"o\">:</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"n\">Sigma.uncurry</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cofanCombine</span> <span class=\"o\">(</span><span class=\"n\">Sigma.uncurry</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">fooequiv3</span> <span class=\"n\">t</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">functor.obj</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">c'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isColimitCofanCombine'</span> <span class=\"o\">:</span> <span class=\"n\">IsColimit</span> <span class=\"o\">(</span><span class=\"n\">cofanCombine'</span> <span class=\"n\">t</span> <span class=\"n\">X</span> <span class=\"n\">c</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">isColimitCofanCombine</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">j</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">IsColimit.ofCoconeEquiv</span> <span class=\"o\">(</span><span class=\"n\">fooequiv3</span> <span class=\"n\">t</span> <span class=\"n\">X</span> <span class=\"n\">j</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hc'</span>\n</code></pre></div>\n<p>I still need some auxiliary equivs, can this be avoided? The issue is that <code>Cocones.equivalenceOfReindexing</code> seems to be quite slow.</p>",
        "id": 420490367,
        "sender_full_name": "Christian Merten",
        "timestamp": 1707408434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648495\">Christian Merten</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Combine.20coproducts/near/420489173\">said</a>:</p>\n<blockquote>\n<p>Are you saying that <code>GradedObject.isColimitCofanMapObjComp</code> should be deduced from the variant you gave above?</p>\n</blockquote>\n<p>If it is convenient to do so, this could be a good idea.</p>\n<p>The ingredients you suggest all seem relevant to me. However, I ended up with a more simple definition of <code>cofanCombine'</code> which is not defeq to yours:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"n\">IsColimit</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pt</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hc'</span> <span class=\"o\">:</span> <span class=\"n\">IsColimit</span> <span class=\"n\">c'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cofanCombine'</span> <span class=\"o\">:</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"n\">Sigma.uncurry</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Cofan.mk</span> <span class=\"n\">c'.pt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">x.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">x.2</span> <span class=\"bp\">≫</span> <span class=\"n\">c'.inj</span> <span class=\"n\">x.1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>As the definition here is quite basic, it would make sense to put the necessary auxiliary definitions inside the definition of <code>isColimitCofanCombine' </code>.</p>",
        "id": 420518191,
        "sender_full_name": "Joël Riou",
        "timestamp": 1707417076
    },
    {
        "content": "<p>The reason why I defined <code>cofanCombine'</code> as above, was because then <code>isColimitCofanCombine</code> applies directly. With your <code>cofanCombine'</code> I need to show an isomorphism with my version to apply <code>isColimitCofanCombine</code>. All of this makes we wonder if its worth the going back and forth with equivalences, because this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"n\">IsColimit</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pt</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hc'</span> <span class=\"o\">:</span> <span class=\"n\">IsColimit</span> <span class=\"n\">c'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">cofanCombine'</span> <span class=\"o\">:</span> <span class=\"n\">Cofan</span> <span class=\"o\">(</span><span class=\"n\">Sigma.uncurry</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Cofan.mk</span> <span class=\"n\">c'.pt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">x.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">x.2</span> <span class=\"bp\">≫</span> <span class=\"n\">c'.inj</span> <span class=\"n\">x.1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isColimitCofanCombine''</span> <span class=\"o\">:</span> <span class=\"n\">IsColimit</span> <span class=\"o\">(</span><span class=\"n\">cofanCombine'</span> <span class=\"n\">t</span> <span class=\"n\">X</span> <span class=\"n\">c</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mkCofanColimit</span> <span class=\"n\">_</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Cofan.IsColimit.desc</span> <span class=\"n\">hc'</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Cofan.IsColimit.desc</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">s.inj</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩))</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Cofan.IsColimit.hom_ext</span> <span class=\"n\">hc'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Cofan.IsColimit.hom_ext</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">Cofan.IsColimit.fac</span><span class=\"o\">,</span> <span class=\"n\">cofanCombine'</span><span class=\"o\">,</span> <span class=\"n\">cofan_mk_inj</span><span class=\"o\">,</span> <span class=\"n\">Category.assoc</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>is shorter than anything I have done before using <code>isColimitCofanCombine</code>.</p>",
        "id": 420538219,
        "sender_full_name": "Christian Merten",
        "timestamp": 1707424915
    },
    {
        "content": "<p>This looks good to me.</p>",
        "id": 420547512,
        "sender_full_name": "Joël Riou",
        "timestamp": 1707428836
    }
]