[
    {
        "content": "<p>Is there a slick way to prove this? If two real numbers differ by at least 1, then either there's an integer strictly between them, or they're consecutive integers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 429730653,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1711483528
    },
    {
        "content": "<p>Take <code>k</code> as the ceiling of <code>a</code> and case on whether <code>a = k</code> or not?</p>",
        "id": 429730867,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711483601
    },
    {
        "content": "<p>OK; there is a secondary case when <code>a = k</code> ... But it should not be too cumbersome.</p>",
        "id": 429730957,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711483644
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_sub_iff_add_le'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hab</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">ha</span> <span class=\"bp\">|</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Int.le_ceil</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gt_or_eq</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Int.ceil_lt_add_one</span> <span class=\"n\">a</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">⟨</span><span class=\"bp\">⌈</span><span class=\"n\">a</span><span class=\"bp\">⌉</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hab</span> <span class=\"o\">:=</span> <span class=\"n\">hab.eq_or_lt</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">⟨</span><span class=\"bp\">⌈</span><span class=\"n\">a</span><span class=\"bp\">⌉</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">⟨</span><span class=\"bp\">⌈</span><span class=\"n\">a</span><span class=\"bp\">⌉</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">push_cast</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 429732496,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711484265
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"bp\">⌈</span><span class=\"n\">a</span><span class=\"bp\">⌉</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">k</span>\n  <span class=\"bp\">·</span> <span class=\"n\">by_cases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">Int.lt_succ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n      <span class=\"n\">push_cast</span>\n      <span class=\"n\">linarith</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">splitNe</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">Int.le_ceil</span> <span class=\"n\">a</span>\n    <span class=\"k\">have</span> <span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Int.ceil_lt_add_one</span> <span class=\"n\">a</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">&lt;;&gt;</span>\n      <span class=\"n\">linarith</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">splitNe</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>This can certainly be golfed somewhat...</p>",
        "id": 429733281,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711484569
    },
    {
        "content": "<p>I think we have basically the same solution</p>",
        "id": 429733339,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711484598
    },
    {
        "content": "<p>Yeah, I guess the informal proof is quite clear...</p>",
        "id": 429733413,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711484628
    }
]