[
    {
        "content": "<p>Often when I'm proving a conjunction <code>A ∧ B</code>, I find that I need <code>A</code> in the proof of <code>B</code>. One way to handle this is to first do <code>have h : A := ...</code> and then do <code>refine ⟨h, ?_⟩</code>. However, that can be annoying if <code>A</code> is long to write out. Another thing that works is to write <code>refine ⟨?x1, let h := ?x1; ?_⟩</code>, but that's annoying because <code>x1</code> is then a global metavariable name, so copy-paste compositionality is broken. Is there a nicer way to proceed?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">htn</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n     <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"c1\">-- We're proving A ∧ B and we want to use A in the proof of B.</span>\n  <span class=\"c1\">-- Is there a nicer way to do this?</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">x1</span><span class=\"bp\">;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Int.mul_eq_mul_left_iff</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">))]</span>\n    <span class=\"n\">linear_combination</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">htn</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ht</span><span class=\"bp\">;</span> <span class=\"n\">linear_combination</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">ht</span>\n</code></pre></div>",
        "id": 432759463,
        "sender_full_name": "David Renshaw",
        "timestamp": 1712858329
    },
    {
        "content": "<p>funnily enough, this is also my problem in <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/using.20a.20proven.20goal.20in.20another.20goal\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/using.20a.20proven.20goal.20in.20another.20goal</a></p>",
        "id": 432760079,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712858526
    },
    {
        "content": "<p>How about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">q</span> <span class=\"n\">p</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 432761656,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712859141
    },
    {
        "content": "<p>Alternatively we could write a \"telescoping_constructor\" tactic.</p>",
        "id": 432761715,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712859166
    },
    {
        "content": "<p>yeah this works (and reorders the subgoals):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">htn</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n     <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">htn</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ht</span><span class=\"bp\">;</span> <span class=\"n\">linear_combination</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">ht</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Int.mul_eq_mul_left_iff</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">))]</span>\n    <span class=\"n\">linear_combination</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>It avoids the need to manually name a metavariable. But I wouldn't say that <code>suffices</code> line is very readable.</p>",
        "id": 432764564,
        "sender_full_name": "David Renshaw",
        "timestamp": 1712860177
    },
    {
        "content": "<p>Is this related to <code>peel</code>?</p>",
        "id": 433072951,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713037115
    },
    {
        "content": "<p><code>And</code>-specific: <code>rw [← and_congr_right imp_iff_right]; constructor</code></p>",
        "id": 433078766,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713042523
    },
    {
        "content": "<p>How about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exists_prop#doc\">docs#exists_prop</a> ?</p>",
        "id": 433081818,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713045724
    }
]