[
    {
        "content": "<p>Is there a predicate that says a List (of an ordered type) is increasing? Is there a function from a Finset (of an ordered type) to the increasing List of its elements?</p>",
        "id": 432899625,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1712927022
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/List/Sort.html#List.Sorted\"><code>List.Sorted</code></a><br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Sort.html#Finset.sort\"><code>Finset.sort</code></a></p>",
        "id": 432900010,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1712927129
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"569722\">@Pol'tta / Miyahara Kō</span>, that's very helpful!</p>",
        "id": 433121583,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713088762
    },
    {
        "content": "<p>When I look at List.Sorted, it say that it's equivalent to Pairwise, but that seems strange: I wouldn't think of a list being sorted as equivalent to any two elements being comparable. How are these equivalent?</p>",
        "id": 433121702,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713088840
    },
    {
        "content": "<p>The link in the docstring is bogus</p>",
        "id": 433122119,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713089245
    },
    {
        "content": "<p>It should refer to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.Pairwise#doc\">docs#List.Pairwise</a>, not <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pairwise#doc\">docs#Pairwise</a></p>",
        "id": 433122138,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713089261
    },
    {
        "content": "<p>\"<a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/List/Basic.html#List.Pairwise\"><code>List.Pairwise</code></a> R l means that all the elements with earlier indexes are <code>R</code>-related to all the elements with later indexes.\"<br>\n\"For example if <code>R = (·≠·)</code> then it asserts <code>l</code> has no duplicates, and if <code>R = (·&lt;·)</code> then it asserts that <code>l</code> is (strictly) sorted.\"</p>",
        "id": 433122227,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713089324
    },
    {
        "content": "<p>That makes so much more sense!</p>",
        "id": 433122261,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713089377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> <br>\nThank you, I fixed.</p>",
        "id": 433122267,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1713089387
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12123\">#12123</a></p>",
        "id": 433122379,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713089476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432565\">Jeremy Kahn</span> has marked this topic as resolved.</p>",
        "id": 433122717,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713089766
    }
]