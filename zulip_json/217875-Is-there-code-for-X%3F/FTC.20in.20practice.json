[
    {
        "content": "<p>What's the simplest way to prove things like the following (basically fundamental theorem of calculus, plus continuity)? (Maybe I need more than just <code>ContinuousAt</code>; feel free to add more assumptions...)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousAt</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"bp\">‚à´</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">x..y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousAt</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"bp\">‚à´</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">x..y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 410428146,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1703853316
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span></p>",
        "id": 410457293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703871214
    },
    {
        "content": "<p>Isn't it <code>HasDerivAt</code>?</p>",
        "id": 410457522,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703871304
    },
    {
        "content": "<p>Let me find the theorem</p>",
        "id": 410457581,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703871329
    },
    {
        "content": "<p>The first example is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_hasDerivAt_right#doc\">docs#intervalIntegral.integral_hasDerivAt_right</a></p>",
        "id": 410457879,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703871460
    },
    {
        "content": "<p>I think that <code>ContinuousAt f b</code> should imply <code>StronglyMeasurableAtFilter f (nhds b)</code>, let me try to prove it.</p>",
        "id": 410457986,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703871494
    },
    {
        "content": "<p>Is there a typo in the second example? Substituting <code>t = y</code> gives <code>f (2y - x)</code>, probably not what you want.</p>",
        "id": 410458176,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703871585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/FTC.20in.20practice/near/410457986\">said</a>:</p>\n<blockquote>\n<p>I think that <code>ContinuousAt f b</code> should imply <code>StronglyMeasurableAtFilter f (nhds b)</code>, let me try to prove it.</p>\n</blockquote>\n<p>No, it doesn't. But <code>‚àÄ·∂† a in ùìù x, ContinuousAt f a</code> does, see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousAt.stronglyMeasurableAtFilter#doc\">docs#ContinuousAt.stronglyMeasurableAtFilter</a></p>",
        "id": 410458867,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703871861
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ContinuousAt</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"bp\">‚à´</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">x..y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">IntervalIntegrable</span> <span class=\"n\">f</span> <span class=\"n\">volume</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">intervalIntegrable_iff</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">hmeas</span> <span class=\"o\">:</span> <span class=\"n\">StronglyMeasurableAtFilter</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">ContinuousAt.stronglyMeasurableAtFilter</span> <span class=\"n\">isOpen_interior</span> <span class=\"n\">interior_subset</span> <span class=\"n\">_</span>\n      <span class=\"o\">(</span><span class=\"n\">mem_interior_iff_mem_nhds.2</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:=</span> <span class=\"n\">intervalIntegral.integral_hasDerivAt_right</span> <span class=\"n\">hi</span> <span class=\"n\">hmeas</span> <span class=\"n\">h.self_of_nhds</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">sub_mul</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hd.isLittleO</span>\n</code></pre></div>",
        "id": 410459812,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703872282
    },
    {
        "content": "<p>We should add lemmas for the first 2 <code>have</code>s. IMHO, we should replace the existing <code>ContinuousAt.stronglyMeasurableAtFilter</code> with the new lemma.</p>",
        "id": 410459898,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703872321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> What do you think about it? I mean, assuming <code>‚àÄ·∂† a in ùìù x, ContinuousAt f a</code> in <code>ContinuousAt.stronglyMeasurableAtFilter</code>.</p>",
        "id": 410460053,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703872371
    },
    {
        "content": "<p>I think the assumption <code>‚àÄ·∂† a in ùìù x, ContinuousAt f a</code> is very convoluted: it is a complicated way of saying that there is a neighborhood of <code>x</code> on which <code>f</code> is continuous. I am not sure that it would be more usable than the version we have currently. The best assumptions for the example, I think, would be to assume continuous just at <code>a</code>, and global measurability.</p>",
        "id": 410460789,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1703872676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/FTC.20in.20practice/near/410458176\">said</a>:</p>\n<blockquote>\n<p>Is there a typo in the second example? Substituting <code>t = y</code> gives <code>f (2y - x)</code>, probably not what you want.</p>\n</blockquote>\n<p>Yes exactly, and when <code>y</code> is in a neighborhood of <code>x</code>, <code>f(2 y - x)</code> should be close to <code>f x</code>... I just want to use continuity once more inside the integrand... (But I now think I can figure out how to do that...) Thanks!!</p>",
        "id": 410472475,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1703879823
    },
    {
        "content": "<p>You can rewrite the integral as <code>‚à´ t in y..(2*y-x), f t</code>, right?</p>",
        "id": 410472653,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703879981
    },
    {
        "content": "<p>They you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_hasFDerivAt#doc\">docs#intervalIntegral.integral_hasFDerivAt</a></p>",
        "id": 410472751,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703880028
    },
    {
        "content": "<p>Moreover, you have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_hasStrictFDerivAt#doc\">docs#intervalIntegral.integral_hasStrictFDerivAt</a></p>",
        "id": 410472841,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703880074
    },
    {
        "content": "<p>Probably, we should add combinators like <code>HasFDerivAt.intervalIntegral</code></p>",
        "id": 410472900,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703880105
    },
    {
        "content": "<p>I can have a look in a few days.</p>",
        "id": 410472924,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703880117
    },
    {
        "content": "<p>Great thanks!</p>",
        "id": 410480157,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1703885259
    }
]