[
    {
        "content": "<p>I have couple of questions about following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. How can I fix the errors? Also, is there any way to define <code>dom_B</code> function?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dom_A</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">L'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">dom_A</span> <span class=\"n\">L'</span><span class=\"o\">)</span> <span class=\"c1\">-- Error message: failed to synthesize instance Union (Finset A)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dom_B</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">dom_A</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Error message:</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  dom_A L</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  L</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  List (A × B) : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Type : Type 1-/</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 409844675,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1703454341
    },
    {
        "content": "<p>It's probably that you need <code>DecidableEq A</code> to get the <code>Union</code> for <code>Finset </code>A`.</p>",
        "id": 409844732,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703454385
    },
    {
        "content": "<p>For the second error, notice that you made <code>A</code> and <code>B</code> be explicit</p>",
        "id": 409844744,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703454417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  In my real code, I don't have the second error. This was for <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, but I see the reason, thanks. I got it the first one. What about <code>dom_B</code> definition? Do you have any suggestion?</p>",
        "id": 409844855,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1703454576
    },
    {
        "content": "<p>This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dom_A</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">L.map</span> <span class=\"n\">Prod.fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dom_B</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">dom_A</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dom_A</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"k\">then</span>\n      <span class=\"n\">b</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">dom_B</span> <span class=\"n\">L</span> <span class=\"o\">⟨</span><span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">dom_A</span><span class=\"o\">,</span> <span class=\"n\">Ne.symm</span> <span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 409845445,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703455218
    },
    {
        "content": "<p>Your <code>dom_A</code> is fine, but it's worth using builtin functions I think.</p>",
        "id": 409845465,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703455232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  It worked perfectly, thanks.</p>",
        "id": 409846276,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1703456066
    }
]