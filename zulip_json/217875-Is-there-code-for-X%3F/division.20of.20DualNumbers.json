[
    {
        "content": "<p>Is there any code or division of DualNumbers? More specifically Div (DualNumber F) where F is a field. If not, would it be possible for me to get a pull request from formalizing it? Right now I working on some proofs about negative binomials that geometric sequences on DualNumbers would really help with.</p>",
        "id": 431632452,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712372505
    },
    {
        "content": "<p>If <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> doesn't have it then nobody has it</p>",
        "id": 431649127,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712387809
    },
    {
        "content": "<p>You can work with <code>Units (DualNumber _)</code> to get division of invertible elements. If you also want support for non-invertible elements; what do you intend to define <code>1/eps</code> as?</p>",
        "id": 431654016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712392114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"676310\">Frederick Pu</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/431632452\">said</a>:</p>\n<blockquote>\n<p>Is there any code or division of DualNumbers? More specifically Div (DualNumber F) where F is a field. If not, would it be possible for me to get a pull request from formalizing it? Right now I working on some proofs about negative binomials that geometric sequences on DualNumbers would really help with.</p>\n</blockquote>\n<p>Here's a quick demo of what I've done so far with division: </p>\n<p>Definition of division: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Div</span> <span class=\"o\">(</span><span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">div</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">⟩</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Basic lemmas to make proofs easier</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">div_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">a.fst</span> <span class=\"bp\">/</span> <span class=\"n\">b.fst</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a.snd</span> <span class=\"bp\">*</span> <span class=\"n\">b.fst</span> <span class=\"bp\">-</span> <span class=\"n\">a.fst</span> <span class=\"bp\">*</span> <span class=\"n\">b.snd</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b.fst</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">a.fst</span> <span class=\"bp\">+</span> <span class=\"n\">b.fst</span><span class=\"o\">,</span> <span class=\"n\">a.snd</span> <span class=\"bp\">+</span> <span class=\"n\">b.snd</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">diff_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">a.fst</span> <span class=\"bp\">-</span> <span class=\"n\">b.fst</span><span class=\"o\">,</span> <span class=\"n\">a.snd</span> <span class=\"bp\">-</span> <span class=\"n\">b.snd</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Basic arithmetic equations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sum_one_div</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a.fst</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b.fst</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"bp\">...</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">diff_one_div</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a.fst</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b.fst</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Projection equations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fst_one_div_real</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">TrivSqZeroExt.inl</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">snd_one_div_real</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">TrivSqZeroExt.inl</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Putting it all together into a usage example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">TrivSqZeroExt.inl</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">TrivSqZeroExt.inl</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">DualNumber.eps</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">TrivSqZeroExt.inl</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_arg₂</span>\n\n  <span class=\"n\">simp</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span>\n  <span class=\"n\">rfl</span>\n\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fst_one_div_real</span><span class=\"o\">,</span> <span class=\"n\">snd_one_div_real</span><span class=\"o\">]</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span><span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 431710631,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712442512
    },
    {
        "content": "<p>Something to watch out for here; you should not use <code>.1</code>(<code>Prod.fst</code>) on dual numbers; you should use <code>.fst</code> (<code>TrivSqZeroExt.fst</code>) instead</p>",
        "id": 431710669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712442594
    },
    {
        "content": "<p>Similarly, using <code>⟨re, dual⟩</code> will get you into trouble because this is <code>Prod.mk</code>; the API assumes you will write <code>algebraMap _ _ re + dual*eps</code> instead (or <code>inl re + inr dual</code>)</p>",
        "id": 431710758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712442694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/431654016\">said</a>:</p>\n<blockquote>\n<p>You can work with <code>Units (DualNumber _)</code> to get division of invertible elements. If you also want support for non-invertible elements; what do you intend to define <code>1/eps</code> as?</p>\n</blockquote>\n<p>I'm thinking of treating division as the deriv operator. That is if the division exists than it is well defined but otherwise it'll give a garbage output of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>+</mo><mn>0</mn><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">0 + 0\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mord mathnormal\">ϵ</span></span></span></span>.</p>",
        "id": 432107861,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712631905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/431710669\">said</a>:</p>\n<blockquote>\n<p>Something to watch out for here; you should not use <code>.1</code>(<code>Prod.fst</code>) on dual numbers; you should use <code>.fst</code> (<code>TrivSqZeroExt.fst</code>) instead</p>\n</blockquote>\n<p>Please correct me if I'm wrong but it feels like using the Prod notation makes a lot of elementary proofs easier to do using simp.</p>\n<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fst_one_div_real</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">TrivSqZeroExt.inl</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">snd_one_div_real</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">TrivSqZeroExt.inl</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 432108118,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712632093
    },
    {
        "content": "<p>If you're only looking to divide by units then I would define Inv to be inverse on units and 0 off them, I would consider using IsUnit rather than <code>a.1 != 0</code> as your normal form, and I would define Div to be a * b^{-1}.</p>",
        "id": 432175059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712653847
    },
    {
        "content": "<blockquote>\n<p>Please correct me if I'm wrong but it feels like using the Prod notation makes a lot of elementary proofs easier to do using simp.</p>\n</blockquote>\n<p>The rest of the TrivSqZeroExt API is <em>not</em> written with <code>Prod.fst</code> and <code>Prod.snd</code>, so if you use these functions then Mathlib has nothing to offer you</p>",
        "id": 432175719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712654051
    },
    {
        "content": "<p>I think those lemmas are a bad example, because you should just prove them with <code>rfl</code> anyway</p>",
        "id": 432175844,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712654092
    },
    {
        "content": "<p>Anyway, I think this is close enough to iterate on; could you make a PR adding <code>Div</code> for <code>TrivSqZeroExt</code>?</p>",
        "id": 432176492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712654276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/432175844\">said</a>:</p>\n<blockquote>\n<p>I think those lemmas are a bad example, because you should just prove them with <code>rfl</code> anyway</p>\n</blockquote>\n<p>Yeah I would love to. I don't think I have access to any of the mathlib sub-branches though</p>",
        "id": 432367001,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712709927
    },
    {
        "content": "<p>What do you mean by sub-branches?</p>",
        "id": 432744801,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712852871
    },
    {
        "content": "<p>I conjecture that Frederick might mean that they would like push access to non-master branches? What's your GitHub userid Frederick? It's not in your profile.</p>\n<p>Or tell us what you actually meant :-)</p>",
        "id": 432747475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712853740
    },
    {
        "content": "<p>Yeah that's what I meant. In the the \"how to contribute to mathlib\" page it said that you should get accesss to a non-master branch. Also, should I develop a lot of the lemma for it first or just start by commiting the definition?</p>",
        "id": 432770624,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712862607
    },
    {
        "content": "<p>Well you can't do any of those things until you answer the question about your GitHub userid. I think a reasonable PR would be the definition of Inv and Div, and some basic lemmas. As a general rule I wouldn't go over 100 lines for the first PR.</p>",
        "id": 432771225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712862874
    },
    {
        "content": "<p>You need to tell us your github username (or put it in your zulip profile) for us to give you access :)</p>",
        "id": 432771305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712862909
    },
    {
        "content": "<p>Ok my user id for github is FrederickPu</p>",
        "id": 432771332,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712862922
    },
    {
        "content": "<p>Invite sent!</p>",
        "id": 432771774,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712863128
    },
    {
        "content": "<p>Regarding the generalization to <code>TrivSqZeroExt</code>; I think it's something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">tsze</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x.fst</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x.fst</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•&gt;</span> <span class=\"n\">x.snd</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">x.fst</span><span class=\"bp\">⁻¹</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 432771844,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712863156
    },
    {
        "content": "<p>Created the pull request. I just did it using HDiv instead of inverses since I feel like it would be weird to assume that the internal division of M and R sepereatly should have anything to do with how they interact with eachother. Although this may lead to some compatibility issue in the future since I was mainly thinking about TrivExtZero R R</p>",
        "id": 432777738,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712865456
    },
    {
        "content": "<p>The case to be careful of is <code>TrivSqZeroExt R R</code> when <code>R</code> is non-commutativie</p>",
        "id": 432779820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712866229
    },
    {
        "content": "<p>In the non-commutative case, division is a pretty useless operator, since it only lets you write <code>a * inv b</code> not <code>inv a * b</code>. So I think it is better to approach this thinking about defining the inverse; and then define division such that <code>a / b = a * inv b</code>, perhaps with a slightly nicer implementation.</p>\n<p>The important thing is to prove a <code>div_eq_mul_inv</code> lemma!</p>",
        "id": 432780593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712866580
    },
    {
        "content": "<p>Oh sorry should I redo it and submit another PR or wait till you reject my current one first?</p>",
        "id": 432782000,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712867201
    },
    {
        "content": "<p>You can edit the PR in place, no need to redo it or delete it; just make another commit with the changes and push again</p>",
        "id": 432783053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712867635
    },
    {
        "content": "<p>Ah sorry, you do need to redo this</p>",
        "id": 432783381,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712867770
    },
    {
        "content": "<p>Because you pushed to <code>origin</code>, not <code>upstream</code></p>",
        "id": 432783402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712867779
    },
    {
        "content": "<p>Also it seems like the definition of inv should be more like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">inv</span> <span class=\"o\">[</span><span class=\"n\">HSub</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inv</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">tsze</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">b.1</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b.1</span> <span class=\"bp\">-</span> <span class=\"n\">b.2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"o\">(</span><span class=\"n\">b.1</span> <span class=\"bp\">*</span> <span class=\"n\">b.1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 432783549,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712867862
    },
    {
        "content": "<p>But HSub R M M is a bit sketch</p>",
        "id": 432783626,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712867884
    },
    {
        "content": "<p>ok. Can I get some feed back of my definition before I submit a PR?</p>",
        "id": 432784894,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712868486
    },
    {
        "content": "<p>The best place for feedback is in the PR itself!</p>",
        "id": 432784921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712868503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"676310\">Frederick Pu</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/432783549\">said</a>:</p>\n<blockquote>\n<p>Also it seems like the definition of inv should be more like this: </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">inv</span> <span class=\"o\">[</span><span class=\"n\">HSub</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inv</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">tsze</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">b.1</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b.1</span> <span class=\"bp\">-</span> <span class=\"n\">b.2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"o\">(</span><span class=\"n\">b.1</span> <span class=\"bp\">*</span> <span class=\"n\">b.1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)⟩</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>But I can tell you that your hunch is right, <code>HSub R M M</code> is too sketchy for this to be reasonable</p>",
        "id": 432784960,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712868525
    },
    {
        "content": "<p>I think you made an error when substituting <span class=\"tex-error\">$$1 + 0\\eps$$</span>, and that <code>b.1</code> should be <code>0</code>.</p>",
        "id": 432785004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712868546
    },
    {
        "content": "<p>Which of these do you think is better?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">inv</span> <span class=\"o\">[</span><span class=\"n\">HSub</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">tsze</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">b.1</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b.1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b.1</span> <span class=\"bp\">*</span> <span class=\"n\">b.1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>  <span class=\"bp\">•&gt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b.2</span> <span class=\"bp\">&lt;•</span> <span class=\"o\">(</span><span class=\"n\">b.1</span> <span class=\"bp\">*</span> <span class=\"n\">b.1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))⟩</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">inv</span> <span class=\"o\">[</span><span class=\"n\">HSub</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inv</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">tsze</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">b.1</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b.1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b.1</span> <span class=\"bp\">*</span> <span class=\"n\">b.1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>  <span class=\"bp\">•&gt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b.2</span> <span class=\"bp\">&lt;•</span> <span class=\"o\">(</span><span class=\"n\">b.1</span> <span class=\"bp\">*</span> <span class=\"n\">b.1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))⟩</span>\n</code></pre></div>",
        "id": 432785056,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712868571
    },
    {
        "content": "<p>I feel like the Field and Semiring conditions nicely encapsulate the requirements but might be too restrictive if someone wants to go crazy</p>",
        "id": 432785211,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712868632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/432771844\">said</a>:</p>\n<blockquote>\n<p>Regarding the generalization to <code>TrivSqZeroExt</code>; I think it's something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">tsze</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x.fst</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x.fst</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•&gt;</span> <span class=\"n\">x.snd</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">x.fst</span><span class=\"bp\">⁻¹</span><span class=\"o\">)⟩</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I'm pretty sure this one is right, as it matches <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=fderiv_inv%27#doc\">docs#fderiv_inv'</a></p>",
        "id": 432785261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712868660
    },
    {
        "content": "<p><code>1 : M</code> is suspicious in your code above too; remember that <code>(1 : tsze R M) =  inl (1 : R) + inr (0 : M)</code></p>",
        "id": 432785625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712868812
    },
    {
        "content": "<p>So if you take your division formula for <code>fun ⟨a, b⟩ ⟨c, d⟩ =&gt; ⟨a/c, (b*c - a*d)/c^2⟩</code>, you should be subsituting <code>a = 1</code> and <code>b = 0</code>.</p>",
        "id": 432785763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712868866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"676310\">Frederick Pu</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/432785211\">said</a>:</p>\n<blockquote>\n<p>I feel like the Field and Semiring conditions nicely encapsulate the requirements but might be too restrictive if someone wants to go crazy</p>\n</blockquote>\n<p>I am afraid that a lot of the design of TrivSqZeroExt is precise because someone wanted to go crazy with non-commutative rings (such as the dual quaternions); that someone is me.</p>",
        "id": 432786037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712868995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/432785261\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/432771844\">said</a>:</p>\n<blockquote>\n<p>Regarding the generalization to <code>TrivSqZeroExt</code>; I think it's something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">tsze</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x.fst</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x.fst</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•&gt;</span> <span class=\"n\">x.snd</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">x.fst</span><span class=\"bp\">⁻¹</span><span class=\"o\">)⟩</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I'm pretty sure this one is right, as it matches <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=fderiv_inv%27#doc\">docs#fderiv_inv'</a></p>\n</blockquote>\n<p>Wait so M is responsible for the negativeness? also why not group the inverses together?</p>",
        "id": 432786396,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712869170
    },
    {
        "content": "<p>Because grouping together inverses in the derivative of <code>x⁻¹</code> is a lie told to you by <em>commutative</em> algebraists <span aria-label=\"devil\" class=\"emoji emoji-1f47f\" role=\"img\" title=\"devil\">:devil:</span></p>",
        "id": 432786650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712869268
    },
    {
        "content": "<blockquote>\n<p>Wait so M is responsible for the negativeness?</p>\n</blockquote>\n<p>I don't think it really matters; in any real situation <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=neg_smul#doc\">docs#neg_smul</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=smul_neg#doc\">docs#smul_neg</a> applies anyway</p>",
        "id": 432786738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712869310
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simps</span> <span class=\"n\">apply</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">inlHom</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">tsze</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>It seems like <code>R</code> usually carries more ring structure</p>",
        "id": 432786946,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712869388
    },
    {
        "content": "<p>In that example, neither <code>R</code> nor <code>M</code> have negation</p>",
        "id": 432786985,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712869406
    },
    {
        "content": "<p>so might as well put the negative in <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 432786987,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712869407
    },
    {
        "content": "<p>The version with negation is <code>[Ring R] [AddCommGroup M]</code>, in which case <em>both</em> have negation</p>",
        "id": 432787033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712869429
    },
    {
        "content": "<p>Oh sorry</p>",
        "id": 432787099,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712869443
    },
    {
        "content": "<p>Here's an argument for why it should be <code>M</code> and not <code>R</code>; if you assume some kind of derivative model, then maybe <code>R</code> is the space of positive reals; the derivative of a function that's always positive can sometimes be negative, so arguably it's the differential piece (M) that should be carrying the negation</p>",
        "id": 432787158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712869469
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">snd_list_prod</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">SMulCommClass</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">tsze</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 432787164,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712869471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/432787158\">said</a>:</p>\n<blockquote>\n<p>Here's an argument for why it should be <code>M</code> and not <code>R</code>; if you assume some kind of derivative model, then maybe <code>R</code> is the space of positive reals; the derivative of a function that's always positive can sometimes be negative, so arguably it's the differential piece (M) that should be carrying the negation</p>\n</blockquote>\n<p>that's a good point, but why is always somethign R over M?</p>",
        "id": 432787234,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712869509
    },
    {
        "content": "<p>What do you mean by \"over\"?</p>",
        "id": 432787329,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712869549
    },
    {
        "content": "<p>Never mind, I thought that semirings had inverses for some reason</p>",
        "id": 432787535,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712869633
    },
    {
        "content": "<p>It's an easy mistake to make, mathlib is full of generalizations you don't usually have to think about</p>",
        "id": 432787743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712869705
    },
    {
        "content": "<p>The interface is actually pretty clean i think: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">inv</span> <span class=\"o\">[</span><span class=\"n\">Neg</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inv</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">tsze</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">b.1</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>  <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b.1</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•&gt;</span> <span class=\"n\">b.2</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">b.1</span><span class=\"bp\">⁻¹</span><span class=\"o\">))⟩</span>\n</code></pre></div>",
        "id": 432787796,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712869737
    },
    {
        "content": "<p>Also how do you motivate using <code>b.1⁻¹ •&gt; b.2 &lt;• b.1⁻¹</code> vs <code>b.2 &lt;• b.1⁻¹  &lt;•  b.1⁻¹</code></p>",
        "id": 432787982,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712869814
    },
    {
        "content": "<p>Now you should define <code>Div</code> as well, and prove that the two agree</p>",
        "id": 432787984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712869815
    },
    {
        "content": "<p>The motivation will appear when you try to prove that <code>x * x⁻¹ = 1</code> for <code>[DivisionRing R]</code> and <code>x.fst \\ne 0</code></p>",
        "id": 432788022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712869835
    },
    {
        "content": "<p>but if you're doing DivisionRing don't you have commutivity?</p>",
        "id": 432788180,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712869918
    },
    {
        "content": "<p>Nope, a division ring is a field <em>without</em> commutativity!</p>",
        "id": 432788549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712870057
    },
    {
        "content": "<p>ahhhhh</p>",
        "id": 432788571,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712870071
    },
    {
        "content": "<p>(I think in French the words are swapped in some way, though I might be misremembering)</p>",
        "id": 432788729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712870148
    },
    {
        "content": "<p>I'm not french tho, just a dumb undergrad</p>",
        "id": 432788809,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712870173
    },
    {
        "content": "<p>If you're writing lean code as an undergrad you're probably not dumb :)</p>",
        "id": 432789277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712870386
    },
    {
        "content": "<p>Perhaps it's worth considering a more fun way to play this game:</p>\n<ul>\n<li>Define division and inverses in a way that works on fields and vector spaces, prove they work well with multiplication</li>\n<li>Once you have that working, try to remove commutativity</li>\n</ul>",
        "id": 432789452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712870436
    },
    {
        "content": "<p>here's what I got so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_inv</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">tsze</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">fst</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fst_mul</span><span class=\"o\">,</span> <span class=\"n\">fst_inv</span><span class=\"o\">,</span> <span class=\"n\">fst_one</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">snd_mul</span><span class=\"o\">,</span> <span class=\"n\">snd_inv</span><span class=\"o\">,</span> <span class=\"n\">smul_neg</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">smul_assoc</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"n\">fst_inv</span><span class=\"o\">,</span> <span class=\"n\">add_left_neg</span><span class=\"o\">,</span> <span class=\"n\">snd_one</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 432792089,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712871588
    },
    {
        "content": "<p>it's tough because you need the module to bring the negative to the outside</p>",
        "id": 432792175,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712871618
    },
    {
        "content": "<p>actually no you don't I don't know what was requiring me to have a Module</p>",
        "id": 432792350,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712871677
    },
    {
        "content": "<p>I think it's fine to assume a module if you need it</p>",
        "id": 432792476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712871733
    },
    {
        "content": "<p>But module requires addcommgroup</p>",
        "id": 432792509,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712871750
    },
    {
        "content": "<p>One again, no it doesn't; at least, not in mathlib!</p>",
        "id": 432792619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712871816
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/S8tBtFsCiGapyvXbUMbKLFcw/Screenshot-2024-04-11-174407.png\">Screenshot-2024-04-11-174407.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/S8tBtFsCiGapyvXbUMbKLFcw/Screenshot-2024-04-11-174407.png\" title=\"Screenshot-2024-04-11-174407.png\"><img src=\"/user_uploads/3121/S8tBtFsCiGapyvXbUMbKLFcw/Screenshot-2024-04-11-174407.png\"></a></div>",
        "id": 432792709,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712871859
    },
    {
        "content": "<p>So you still need commutivity on M no?</p>",
        "id": 432792743,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712871875
    },
    {
        "content": "<p>This is referring to <em>additive</em> commutativity, a + b = b + a</p>",
        "id": 432792775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712871897
    },
    {
        "content": "<p>so you dont care about addcommgroup?</p>",
        "id": 432792807,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712871917
    },
    {
        "content": "<p>Only <em>really</em> crazy people care about non-commutative addition</p>",
        "id": 432792834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712871937
    },
    {
        "content": "<p>the thing is don't really need addcommgroup in the proof. You're never swapping terms</p>",
        "id": 432792861,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712871961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"676310\">Frederick Pu</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/432792807\">said</a>:</p>\n<blockquote>\n<p>so you dont care about addcommgroup?</p>\n</blockquote>\n<p>What you've written looks good to me</p>",
        "id": 432792906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712871968
    },
    {
        "content": "<p>is there a semimodule or smth</p>",
        "id": 432792915,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712871977
    },
    {
        "content": "<p>Yes, but in mathlib it's written <code>Module</code></p>",
        "id": 432792951,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712872008
    },
    {
        "content": "<p>A semimodule is just a module without negation, but we established you need negation on M anyway</p>",
        "id": 432792994,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712872040
    },
    {
        "content": "<p>how can they have the exact same name?</p>",
        "id": 432792995,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712872040
    },
    {
        "content": "<p>oh cause no mul comm i see what u mean</p>",
        "id": 432793074,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712872084
    },
    {
        "content": "<p>Ok, submitting the PR</p>",
        "id": 432793238,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712872197
    },
    {
        "content": "<p>How do I run the linter on my local machine</p>",
        "id": 432794745,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712872947
    },
    {
        "content": "<p>Can you write the PR number here after a # so that it auto-Links?</p>",
        "id": 432797785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712874495
    },
    {
        "content": "<p>The style linter can be run with <code>scripts/lint-style.sh</code></p>",
        "id": 432799760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712875722
    },
    {
        "content": "<p>The other linter can be run by writing <code>#lint</code> in the file (and deleting it when you're done)</p>",
        "id": 432799796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712875745
    },
    {
        "content": "<p>95 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/making.20pull.20requests\">#new members &gt; making pull requests</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 432800010,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712875893
    },
    {
        "content": "<p>Do you know where I can find proofs of the following lemmas?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">op_smul_smul</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;•</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">fst</span> <span class=\"n\">x</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">((</span><span class=\"n\">snd</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;•</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">have</span> <span class=\"n\">op_smul_assoc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;•</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;•</span> <span class=\"o\">((</span><span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">have</span> <span class=\"n\">op_smul_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">snd</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 432808870,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712882069
    },
    {
        "content": "<p>The first one needs <code>[SMulCommClass R Rᵐᵒᵖ M]</code>, then is <code>smul_comm</code></p>",
        "id": 432809900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712882905
    },
    {
        "content": "<p><code>simp?</code> or <code>rw?</code> can maybe help find the others</p>",
        "id": 432809942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712882959
    },
    {
        "content": "<p>I got the first and the third one but the second one is giving me grief</p>",
        "id": 432813515,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712885249
    },
    {
        "content": "<p>Actually I don't think this second equation holds</p>",
        "id": 432926081,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712934978
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> if you want other people to think about your question?</p>",
        "id": 432934001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712937319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/432934001\">said</a>:</p>\n<blockquote>\n<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> if you want other people to think about your question?</p>\n</blockquote>\n<p>I should have used op_smul_op_smul instead</p>",
        "id": 432939491,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712939095
    },
    {
        "content": "<p>How long do you think until I will be able to use this on dual numbers?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">tsum_geometric_of_norm_lt_one</span><span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedField</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">ξ</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ξ</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">ξ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n</code></pre></div>",
        "id": 432948127,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712942419
    },
    {
        "content": "<p>You won't be able to use that theorem as written, because dual numbers don't form a field or even a division ring (<code>eps</code> has no invers)</p>",
        "id": 432948286,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712942485
    },
    {
        "content": "<p>so will we need to reprove the theorem but for whatever the dual numbers are?</p>",
        "id": 432948408,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712942524
    },
    {
        "content": "<p>Maybe NormedRing, and it holds for all units</p>",
        "id": 432948476,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712942552
    },
    {
        "content": "<p>I feel like if you know convergence then u don't really use any field properties to prove the geometric series, just dividing by the common ratio, which is ok if it's not eps</p>",
        "id": 432948649,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712942621
    },
    {
        "content": "<p>I think a good goal would be to prove that lemma for just DualNumbers, then work out the generalizatoin when you have the proof</p>",
        "id": 432948756,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712942652
    },
    {
        "content": "<p>Yeah, but I'm gonna need the fact that the geometric sequence is summable in the first place. Which is some metric space stuff</p>",
        "id": 432948867,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712942697
    },
    {
        "content": "<p>We _do_ have a metric space on the dual numbers</p>",
        "id": 432948904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712942710
    },
    {
        "content": "<p>should be fine then</p>",
        "id": 432948979,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712942742
    },
    {
        "content": "<p>Do u think I need anymore api stuff on TrivEqZeroExt inorder to get started?</p>",
        "id": 432949120,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712942788
    },
    {
        "content": "<p>I think it would be great to polish the PR on Inv and DIv first; then embark on that larger goal</p>",
        "id": 432949465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712942945
    },
    {
        "content": "<p>Ok, should I edit my actual pull request comment?</p>",
        "id": 432949518,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712942969
    },
    {
        "content": "<p>also did you see my latest pull request, I proved all the lemmas u asked (except for 1/eps because I can't find that in Triv)</p>",
        "id": 432949737,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712943051
    },
    {
        "content": "<p>No, I didn't! looking at <a href=\"https://github.com/leanprover-community/mathlib4/pull/12075\">#12075</a> now</p>",
        "id": 432950063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712943165
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">summable_iff_vanishing_norm</span><span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">Summable</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">Disjoint</span> <span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">‖</span><span class=\"n\">Finset.sum</span> <span class=\"n\">t</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n</code></pre></div>\n<p>just so i remember</p>",
        "id": 432950659,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712943387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"676310\">Frederick Pu</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/432949737\">said</a>:</p>\n<blockquote>\n<p>also did you see my latest pull request, I proved all the lemmas u asked (except for 1/eps because I can't find that in Triv)</p>\n</blockquote>\n<p>That would go in the <code>DualNumber.lean</code> file; it's fine to edit multiple files in the same PR if the changes are closely related.</p>",
        "id": 432953877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712944741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"676310\">Frederick Pu</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/432792995\">said</a>:</p>\n<blockquote>\n<p>how can they have the exact same name?</p>\n</blockquote>\n<p>In Mathlib, the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module#doc\">docs#Module</a> structure just adds the scalar action of R on M and how it interacts with addition. The interaction with negation, if there is some negation on M by way of a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCommGroup#doc\">docs#AddCommGroup</a> structure on M, the interaction of scalar multiplication with neg or subtraction comes for free.</p>",
        "id": 433023535,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1712992335
    },
    {
        "content": "<p>Can anyone explain why tsum_mul_left isn't solvling this goal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.DualNumber</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.InfiniteSum.Ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"o\">(</span><span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">T2Space</span> <span class=\"o\">(</span><span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"o\">{</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">tsum_mul_left</span>\n<span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">tsum_mul_left</span>\n</code></pre></div>",
        "id": 433056375,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713022656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"676310\">Frederick Pu</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/433056375\">said</a>:</p>\n<blockquote>\n<p>Can anyone explain why tsum_mul_left isn't solvling this goal?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.DualNumber</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.InfiniteSum.Ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"o\">(</span><span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">T2Space</span> <span class=\"o\">(</span><span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"o\">{</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">tsum_mul_left</span>\n<span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">tsum_mul_left</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Oh my bad, DualNumbers arent a DivisionRing. Seem like we need to basically redo a lot of the tsum lemmas</p>",
        "id": 433056762,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713023024
    },
    {
        "content": "<p>Actually Summable.tsum_mul_left seems fine</p>",
        "id": 433057022,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713023281
    },
    {
        "content": "<p>Note hat instead of assuming <code>TopologicalSpace (DualNumber R)</code> you should import the TrivSqZeroExt file in analysis</p>",
        "id": 433155508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713119870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> NormedSpace, TrivSqZeroExt</p>",
        "id": 433155578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713119899
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/NormedSpace/TrivSqZeroExt.html#TrivSqZeroExt.instL1NormedSpace\">TrivSqZeroExt.instL1NormedSpace</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/NormedSpace/TrivSqZeroExt.html#TrivSqZeroExt.instL1NormedAlgebra\">TrivSqZeroExt.instL1NormedAlgebra</a></p>",
        "id": 433155579,
        "sender_full_name": "loogle",
        "timestamp": 1713119900
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/433155508\">said</a>:</p>\n<blockquote>\n<p>Note hat instead of assuming <code>TopologicalSpace (DualNumber R)</code> you should import the TrivSqZeroExt file in analysis</p>\n</blockquote>\n<p>Just to be clear here -- Eric is saying that writing <code>[TopologicalSpace (DualNumber R)]</code> is <em>mathematically wrong</em>, because it means \"put a completely arbitrary topology on the dual numbers which is completely unrelated to the algebraic structure\".</p>",
        "id": 433160378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713124451
    },
    {
        "content": "<p>I guess you can fix \"completely unrelated\"by adding <code>[TopologicalRing (DualNumber R)]</code>, but that's still probably \"related but not in the ways you would expect\"</p>",
        "id": 433161612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713125597
    },
    {
        "content": "<p>yeah I noticed that the typeclasses required for tsum_left_mul and summable_of_vanishing_norm seem to really not like eachother for some reason</p>",
        "id": 433163566,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713127464
    },
    {
        "content": "<p>Can you show what you wrote?</p>",
        "id": 433163689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713127570
    },
    {
        "content": "<p>This sounds a bit like \"Semiring and AddCommGroup don't like each other\", for which the answer is \"of course not, that has two different +s; use Ring instead\"</p>",
        "id": 433163731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713127617
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/K9PaN7AOpP327HZtEXEK44Yl/Screenshot-2024-04-14-164702.png\">Screenshot-2024-04-14-164702.png</a><br>\n<a href=\"/user_uploads/3121/Et_eKHEvpY6XaPwf2XXKSMmv/Screenshot-2024-04-14-164719.png\">Screenshot-2024-04-14-164719.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/K9PaN7AOpP327HZtEXEK44Yl/Screenshot-2024-04-14-164702.png\" title=\"Screenshot-2024-04-14-164702.png\"><img src=\"/user_uploads/3121/K9PaN7AOpP327HZtEXEK44Yl/Screenshot-2024-04-14-164702.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Et_eKHEvpY6XaPwf2XXKSMmv/Screenshot-2024-04-14-164719.png\" title=\"Screenshot-2024-04-14-164719.png\"><img src=\"/user_uploads/3121/Et_eKHEvpY6XaPwf2XXKSMmv/Screenshot-2024-04-14-164719.png\"></a></div>",
        "id": 433163828,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713127687
    },
    {
        "content": "<p>Please paste code (as a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>) not images!</p>",
        "id": 433163837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713127705
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bruh.</span><span class=\"o\">{</span><span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SeminormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"o\">(</span><span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"o\">{</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\">ι : Type u_1</span>\n<span class=\"sd\">R : Type u_3</span>\n<span class=\"sd\">inst✝¹ : SeminormedAddCommGroup (DualNumber R)</span>\n<span class=\"sd\">inst✝ : CompleteSpace (DualNumber R)</span>\n<span class=\"sd\">f : ι → DualNumber R</span>\n<span class=\"sd\">x : DualNumber R</span>\n<span class=\"sd\">⊢ ∀ ε &gt; 0, ∃ s, ∀ (t : Finset ℕ), Disjoint t s → ‖Finset.sum t fun i ↦ x‖ &lt; ε</span>\n<span class=\"sd\">--/</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">summable_iff_vanishing_norm</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>works but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bruh.</span><span class=\"o\">{</span><span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SeminormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)]</span>\n\n  <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"o\">(</span><span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n<span class=\"o\">{</span>\n<span class=\"bp\">/</span> <span class=\"c1\">--</span>\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">Summable</span> <span class=\"bp\">?</span><span class=\"n\">m.9232</span>\n<span class=\"c1\">--/</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">summable_iff_vanishing_norm</span><span class=\"o\">]</span>\n\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>doesn't</p>",
        "id": 433163978,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713127833
    },
    {
        "content": "<p>so adding <code>[Ring (DualNumber R)]</code> breaks the type inference</p>",
        "id": 433163996,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713127859
    },
    {
        "content": "<p>Please read <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 433164007,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713127866
    },
    {
        "content": "<p>And you should never have a <code>[Ring (Concrete type)]</code> argument</p>",
        "id": 433164026,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713127891
    },
    {
        "content": "<p>okay, let's go back to this example then:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.DualNumber</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.InfiniteSum.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Normed.Group.InfiniteSum</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">extracted_1.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">DivisionRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"o\">(</span><span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSemiring</span> <span class=\"o\">(</span><span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">T2Space</span> <span class=\"o\">(</span><span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 433164411,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713128257
    },
    {
        "content": "<p>I think we need to be able to infer <code>TopologicalSpace (DualNumber R)</code> from  <code>TopologicalSpace R</code></p>",
        "id": 433164492,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713128315
    },
    {
        "content": "<p>Shouldn't this be from the product topology?</p>",
        "id": 433164513,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713128344
    },
    {
        "content": "<p>Like I said above, you're missing an import</p>",
        "id": 433164929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713128703
    },
    {
        "content": "<p>I have a mathematical question. You seem to want to put a topology on the dual numbers. What topology do you want to put on it?</p>",
        "id": 433165560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713129265
    },
    {
        "content": "<p>You also seem to want a norm (from an earlier message); what norm do you want?</p>",
        "id": 433165904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713129589
    },
    {
        "content": "<p>The topology for R^2, since we want to treat it like a normed vector space</p>",
        "id": 433165909,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713129596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> TrivSqZeroExt, TopologicalSpace</p>",
        "id": 433166029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713129673
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Instances/TrivSqZeroExt.html#TrivSqZeroExt.instTopologicalSpace\">TrivSqZeroExt.instTopologicalSpace</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Instances/TrivSqZeroExt.html#TrivSqZeroExt.continuous_fst\">TrivSqZeroExt.continuous_fst</a>, and <a href=\"https://loogle.lean-lang.org/?q=TrivSqZeroExt%2C%20TopologicalSpace\">44 more</a></p>",
        "id": 433166031,
        "sender_full_name": "loogle",
        "timestamp": 1713129674
    },
    {
        "content": "<p>That is the topology that matches R²; but you have to import that file for Lean to find it automatically</p>",
        "id": 433166047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713129691
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/NormedSpace/TrivSqZeroExt.html#TrivSqZeroExt.instL1NormedAddCommGroup\">TrivSqZeroExt.instL1NormedAddCommGroup</a></p>",
        "id": 433166322,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713129957
    },
    {
        "content": "<p>I think that's pretty good, also matches the signature of our inverse lemmas</p>",
        "id": 433166383,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713129981
    },
    {
        "content": "<p>So I asked you which topology, and you replied \"I have a specific topology in mind\", and that's why stuff like <code>[inst_1 : TopologicalSpace (DualNumber R)]</code> <em>must</em> be wrong, because there you're saying \"put an arbitrary topology on it\" (you can see it must be wrong becuase there is no mention of the topology you want). And I don't understand your answer -- R is just a random division ring. What is \"the topology for R^2\"?</p>",
        "id": 433167456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713131015
    },
    {
        "content": "<p>Those instances were just to test the lemmas I was using. I think I'm gonna have R be topological ring and then take the the product topology</p>",
        "id": 433173396,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713136267
    },
    {
        "content": "<p>I guess I am a bit confused about what you're trying to achieve at this point.</p>",
        "id": 433173933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713136905
    },
    {
        "content": "<p>That the theorem for geometric series applies for DualNumbers. that is:<br>\n1 + p + p^2 + p^3 +.... = 1/(1 - p) for $p.snd \\neq 0$</p>",
        "id": 433174603,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713137625
    },
    {
        "content": "<p>That's not true -- for example it's not true if p=1+eps or if p=37+eps.</p>",
        "id": 433206931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713161260
    },
    {
        "content": "<p>I think you need the additional condition of ||p|| &lt; 1</p>",
        "id": 433321746,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713194972
    },
    {
        "content": "<p>Basically I'm trying have the geo_normed_field thing work for rings with units</p>",
        "id": 433323064,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713195287
    },
    {
        "content": "<p>IIRC <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> had some ideas about generalizing this to certain topological rings, but maybe I'm misremembering and it was about <code>exp</code> instead.</p>",
        "id": 433339691,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713199608
    },
    {
        "content": "<p>What's a \"geo_normed_field\"?</p>",
        "id": 433346967,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713201524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"676310\">@Frederick Pu</span> , are you looking for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NormedRing.tsum_geometric_of_norm_lt_one#doc\">docs#NormedRing.tsum_geometric_of_norm_lt_one</a> ?</p>",
        "id": 433381706,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713213307
    },
    {
        "content": "<p>Ah no, that's not the statement I expected</p>",
        "id": 433381783,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713213339
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">tsum_geometric_of_norm_lt_one</span><span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedField</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">ξ</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ξ</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">ξ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n</code></pre></div>",
        "id": 433384463,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713214364
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">geom_series_mul_neg</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 433384600,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713214418
    },
    {
        "content": "<p>the second one should be easy to use for dualnumbers</p>",
        "id": 433384649,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713214436
    },
    {
        "content": "<p>I made <a href=\"https://github.com/leanprover-community/mathlib4/pull/12164\">#12164</a> which generalizes the first lemma to <code>DivisionRing</code>, but indeed that doesn't help you here</p>",
        "id": 433386134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713214950
    },
    {
        "content": "<p>Here's the minimum you need for it to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.DualNumber</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.TrivSqZeroExt</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecificLimits.Normed</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">geom_series_mul_neg</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 433388651,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713215780
    },
    {
        "content": "<p>i think u get NormedRing (DualNumber R) and CompleteSpace (DualNumber R) for free because of products or smth</p>",
        "id": 433388741,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713215817
    },
    {
        "content": "<p>Mathlib indeed has both of those instances already</p>",
        "id": 433390080,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713216255
    },
    {
        "content": "<p>(You get it for free because I contributed it to mathlib as a very small part of my PhD!)</p>",
        "id": 433390250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713216326
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">geom_series_of_fst_ne_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedDivisionRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x.fst</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">geom_series_mul_neg</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">TrivSqZeroExt.mul_inv_cancel</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">TrivSqZeroExt.fst_sub</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sub_ne_zero_of_ne</span> <span class=\"n\">h1.symm</span>\n</code></pre></div>",
        "id": 433390392,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713216378
    },
    {
        "content": "<p>Are you sure you need <code>‖x‖ &lt; 1</code>? Is <code>‖x.fst‖ &lt; 1</code> enough?</p>",
        "id": 433390522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713216429
    },
    {
        "content": "<p>isnt ||a + bε|| = sqrt(a^2 + b^2)</p>",
        "id": 433390726,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713216505
    },
    {
        "content": "<p>The one in mathlib is <code>‖a + bε‖ = ‖a‖ + ‖b‖</code></p>",
        "id": 433391663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713216890
    },
    {
        "content": "<p>then how is ||x.fst|| &lt; 1 enough?</p>",
        "id": 433391784,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713216938
    },
    {
        "content": "<p>intuitively i don't think you can just ignore the derivative component</p>",
        "id": 433391814,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713216955
    },
    {
        "content": "<p>The derivative component is <code>n*x.fst^(n-1)* x.snd</code> (at least, in the commutative case), which should converge irrespective of the value of <code>x.snd</code></p>",
        "id": 433391984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713217027
    },
    {
        "content": "<p>yee that makes sense</p>",
        "id": 433392211,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713217120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"676310\">Frederick Pu</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/433384600\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">geom_series_mul_neg</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>So this won't actually help for that stronger result; but it would be great to prove it anyway</p>",
        "id": 433392309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713217167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/433392309\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"676310\">Frederick Pu</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/433384600\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">geom_series_mul_neg</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>So this won't actually help for that stronger result; but it would be great to prove it anyway</p>\n</blockquote>\n<p>wdym. That's already in mahthlib</p>",
        "id": 433392486,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713217236
    },
    {
        "content": "<p>Oh! Usually people write <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=geom_series_mul_neg#doc\">docs#geom_series_mul_neg</a> (which creates an automatic link) to talk about things that already exist</p>",
        "id": 433392612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713217296
    },
    {
        "content": "<p>sorry I didn't know</p>",
        "id": 433392779,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713217363
    },
    {
        "content": "<p>No worries, good job on finding it</p>",
        "id": 433392828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713217389
    },
    {
        "content": "<p>I think this lemma is missing from DualNumber.lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">x.fst</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x.fst</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x.snd</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 433392916,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713217435
    },
    {
        "content": "<p>is it in TrivSqZeroExt?</p>",
        "id": 433392991,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713217457
    },
    {
        "content": "<p>I think generally the API tries to avoid writing lemmas like that right now</p>",
        "id": 433393048,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713217491
    },
    {
        "content": "<p>Instead it has <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TrivSqZeroExt.fst_pow#doc\">docs#TrivSqZeroExt.fst_pow</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TrivSqZeroExt.snd_pow#doc\">docs#TrivSqZeroExt.snd_pow</a></p>",
        "id": 433393091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713217505
    },
    {
        "content": "<p>The expectation is that if you're going to split it into components, you want to handle them separately rather than double the number of terms in the expression</p>",
        "id": 433393143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713217524
    },
    {
        "content": "<p>so is there tsum x = inl (tsum.fst) + inr (tsum.snd)</p>",
        "id": 433393377,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713217630
    },
    {
        "content": "<p>No, but there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TrivSqZeroExt.fst_tsum#doc\">docs#TrivSqZeroExt.fst_tsum</a></p>",
        "id": 433393557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713217713
    },
    {
        "content": "<p>... or not</p>",
        "id": 433393572,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713217721
    },
    {
        "content": "<p>I guess I only added <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TrivSqZeroExt.hasSum_fst#doc\">docs#TrivSqZeroExt.hasSum_fst</a></p>",
        "id": 433393647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713217770
    },
    {
        "content": "<p>also on a side note, can loogle search based on doc comments? seems like that would make it a lot easier to find stuff</p>",
        "id": 433393669,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713217783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"676310\">Frederick Pu</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/433393377\">said</a>:</p>\n<blockquote>\n<p>so is there tsum x = inl (tsum.fst) + inr (tsum.snd)</p>\n</blockquote>\n<p>This is false, because if only the <code>fst</code> part converges the LHS is 0 and the rhs is <code>inl (tsum _)</code></p>",
        "id": 433393742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713217804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F/near/433393557\">said</a>:</p>\n<blockquote>\n<p>No, but there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TrivSqZeroExt.fst_tsum#doc\">docs#TrivSqZeroExt.fst_tsum</a></p>\n</blockquote>\n<p>This would be false for the same reason</p>",
        "id": 433393778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713217824
    },
    {
        "content": "<p>the thing is those go in the wrong direction. We need to show if  fst and snd converge than the sequence converges</p>",
        "id": 433393869,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713217882
    },
    {
        "content": "<p>The secret is that you rarely want to show \"the sequence converges\"; \"the sequence converges to <code>x</code>\" is much more interesting, and this is what <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasSum#doc\">docs#HasSum</a> means</p>",
        "id": 433394113,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713217991
    },
    {
        "content": "<p>I think you want <code>(TrivSqZeroExt.hasSum_inl _).add (TrivSqZeroExt.hasSum_inr _)</code></p>",
        "id": 433394308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713218073
    },
    {
        "content": "<p>I guess it's probably reasonable to add something like <code>HasSum (fun x =&gt; (f x).fst) a.fst -&gt; HasSum (fun x =&gt; (f x).snd) a.snd -&gt; HasSum f a</code></p>",
        "id": 433394452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713218154
    },
    {
        "content": "<p>Which should follow fairly immediately from my <code>.add</code> message above.</p>",
        "id": 433394519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713218173
    },
    {
        "content": "<p>It's probably even true as an <code>Iff</code></p>",
        "id": 433394559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713218190
    },
    {
        "content": "<p>There's a lot missing here because I developed just as much as I needed for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TrivSqZeroExt.fst_exp#doc\">docs#TrivSqZeroExt.fst_exp</a> (and the rest of that file) and little else.</p>",
        "id": 433394714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713218265
    },
    {
        "content": "<p>what about something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">hasSum_inl_inr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasSum</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">HasSum</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">HasSum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">inr</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span>\n  <span class=\"n\">apply</span> <span class=\"n\">HasSum.add</span>\n  <span class=\"n\">apply</span> <span class=\"n\">TrivSqZeroExt.hasSum_inl</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hf</span>\n  <span class=\"n\">apply</span> <span class=\"n\">TrivSqZeroExt.hasSum_inr</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hg</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 433395791,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713218725
    },
    {
        "content": "<p>For this type of thing it's often more useful to have the free variable in the conclusion</p>",
        "id": 433395917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713218769
    },
    {
        "content": "<p>lean seems to get really confused when u tryy to use hasSum_inl directly</p>",
        "id": 433395929,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713218774
    },
    {
        "content": "<p><code>(TrivSqZeroExt.hasSum_inl _ hf).add (TrivSqZeroExt.hasSum_inr _ hg)</code> should work for that?</p>",
        "id": 433395978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713218802
    },
    {
        "content": "<p>it doesnt</p>",
        "id": 433396057,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713218847
    },
    {
        "content": "<p>Edited: see if you can see how I worked out the fix from the error message</p>",
        "id": 433396272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713218962
    },
    {
        "content": "<p>oh the extra _</p>",
        "id": 433396310,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713218983
    },
    {
        "content": "<p>but why tho, the lemma only takes 1 input</p>",
        "id": 433396424,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713219024
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Is.20there.20any.20code.20or.20division.20of.20DualNumbers.3F\">#general &gt; Is there any code or division of DualNumbers?</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 433396495,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713219061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"676310\">Frederick Pu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/division.20of.20DualNumbers/near/433396424\">said</a>:</p>\n<blockquote>\n<p>but why tho, the lemma only takes 1 input</p>\n</blockquote>\n<p>What makes you say that?</p>",
        "id": 433396675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713219137
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">hasSum_inr</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HasSum</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 433396763,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713219185
    },
    {
        "content": "<p>only 1 non implicit argument right?</p>",
        "id": 433396789,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713219200
    },
    {
        "content": "<p>Nope, there's a <code>variable</code> line higher up that adds more</p>",
        "id": 433396816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713219215
    },
    {
        "content": "<p>You can read off the variables by hovering over <code>hasSum_inr</code> and reading the tooltip instead of the source</p>",
        "id": 433396868,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713219238
    },
    {
        "content": "<p>I feel like in this case it's better to prove that the sequence converges and then get the value this converges to afterward. Since evaluating the sum of i * x^{i - 1} is very nasty</p>",
        "id": 433422673,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713233015
    },
    {
        "content": "<p>It's just the derivative of the sum of x^i which is 1/(1-x)</p>",
        "id": 433446666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713247029
    },
    {
        "content": "<p>Yeah but the whole point of using dual numbers was to bypass using derivatives</p>",
        "id": 433532794,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713276948
    },
    {
        "content": "<p>Another approach is just to multiply by (1-x)^2 and observe that a miracle occurs</p>",
        "id": 433555353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713282724
    },
    {
        "content": "<p>But wouldn't that trick still require you to assume convergence in the first place?</p>",
        "id": 433601229,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713299915
    },
    {
        "content": "<p>The only trick like that I know is from kumon where you multiply by x, and when u subtract the two sequences you get a geoemtric sequence or smth</p>",
        "id": 433601335,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713299961
    },
    {
        "content": "<p>anyhow I'm stuck with this chonker for now that I'll have to golf later</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx1</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">x.fst</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx2</span> <span class=\"o\">:</span> <span class=\"n\">x.fst</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n  <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"o\">{</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">x.fst</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">inr</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x.fst</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i.pred</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x.snd</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fst_pow</span><span class=\"o\">,</span> <span class=\"n\">fst_add</span><span class=\"o\">,</span> <span class=\"n\">fst_inl</span><span class=\"o\">,</span> <span class=\"n\">fst_inr</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">snd_pow</span><span class=\"o\">,</span> <span class=\"n\">snd_add</span><span class=\"o\">,</span> <span class=\"n\">snd_inl</span><span class=\"o\">,</span> <span class=\"n\">snd_inr</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">smul_assoc</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Summable.add</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span>  <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.fst</span> <span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n      <span class=\"n\">exact</span> <span class=\"n\">TrivSqZeroExt.hasSum_inl</span> <span class=\"n\">_</span> <span class=\"n\">ht</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">summable_geometric_iff_norm_lt_one</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hx1</span>\n\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span>  <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fst</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">Nat.pred</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">snd</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n      <span class=\"n\">exact</span> <span class=\"n\">TrivSqZeroExt.hasSum_inr</span> <span class=\"n\">_</span> <span class=\"n\">ht</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Summable.mul_right</span>\n  <span class=\"c1\">-- apply summable_of_ratio_test_tendsto_lt_one _</span>\n  <span class=\"c1\">-- sorry</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fst</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">Nat.pred</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">‖</span> <span class=\"bp\">/</span> <span class=\"bp\">‖↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">fst</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">Nat.pred</span> <span class=\"n\">n</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"bp\">‖</span><span class=\"n\">x.fst</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Filter.EventuallyEq</span> <span class=\"o\">(</span><span class=\"n\">Filter.atTop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"bp\">‖</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"n\">x.fst</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">‖↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fst</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">Nat.pred</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">‖</span> <span class=\"bp\">/</span> <span class=\"bp\">‖↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x.fst</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n.pred</span><span class=\"o\">)</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Filter.EventuallyEq</span><span class=\"o\">,</span> <span class=\"n\">Filter.eventually_atTop</span><span class=\"o\">]</span>\n      <span class=\"n\">use</span> <span class=\"mi\">1</span>\n      <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"n\">linarith</span>\n      <span class=\"o\">}</span>\n      <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"n\">simp</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n          <span class=\"n\">apply</span> <span class=\"n\">mul_ne_zero</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">abs_eq_zero</span><span class=\"o\">]</span>\n          <span class=\"n\">intro</span> <span class=\"n\">_</span>\n          <span class=\"n\">linarith</span>\n\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">pow_eq_zero_iff'</span><span class=\"o\">,</span> <span class=\"n\">abs_eq_zero</span><span class=\"o\">]</span>\n          <span class=\"n\">tauto</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">field_simp</span>\n        <span class=\"n\">ring</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Filter.tendsto_congr'</span> <span class=\"n\">this.symm</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">Filter.atTop</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Filter.EventuallyEq</span><span class=\"o\">,</span> <span class=\"n\">Filter.eventually_atTop</span><span class=\"o\">]</span>\n          <span class=\"n\">use</span> <span class=\"mi\">1</span>\n          <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n          <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Real.norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_of_pos</span><span class=\"o\">]</span>\n          <span class=\"n\">field_simp</span>\n          <span class=\"n\">apply</span> <span class=\"n\">div_pos</span>\n          <span class=\"n\">push_cast</span>\n          <span class=\"n\">linarith</span>\n          <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_le</span><span class=\"o\">]</span>\n            <span class=\"n\">exact</span> <span class=\"n\">hb</span>\n          <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n          <span class=\"n\">linarith</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Filter.tendsto_congr'</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n\n        <span class=\"k\">have</span> <span class=\"n\">crux1</span> <span class=\"o\">:</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n          <span class=\"n\">tendsto_const_nhds</span>\n        <span class=\"k\">have</span> <span class=\"n\">crux2</span> <span class=\"o\">:</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n          <span class=\"n\">tendsto_inverse_atTop_nhds_zero_nat</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Filter.Tendsto.add</span> <span class=\"n\">crux1</span> <span class=\"n\">crux2</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n        <span class=\"n\">exact</span> <span class=\"n\">this</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Filter.Tendsto.mul_const</span> <span class=\"o\">(</span><span class=\"bp\">‖</span><span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"n\">this</span>\n      <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n      <span class=\"n\">exact</span> <span class=\"n\">this</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">exact</span> <span class=\"n\">summable_of_ratio_test_tendsto_lt_one</span> <span class=\"n\">hx1</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Filter.eventually_atTop</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"mi\">1</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n    <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hb</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">linarith</span>\n      <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">hx2</span> <span class=\"n\">r.left</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">})</span> <span class=\"n\">this</span>\n\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 433601394,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713299987
    },
    {
        "content": "<p>Here's the golfed version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">wow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x.fst</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fst</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">Nat.pred</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">‖</span> <span class=\"bp\">/</span> <span class=\"bp\">‖↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">fst</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">Nat.pred</span> <span class=\"n\">n</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"bp\">‖</span><span class=\"n\">x.fst</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Filter.EventuallyEq</span> <span class=\"o\">(</span><span class=\"n\">Filter.atTop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"bp\">‖</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"n\">x.fst</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">‖↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fst</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">Nat.pred</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">‖</span> <span class=\"bp\">/</span> <span class=\"bp\">‖↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x.fst</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n.pred</span><span class=\"o\">)</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Filter.EventuallyEq</span><span class=\"o\">,</span> <span class=\"n\">Filter.eventually_atTop</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"mi\">1</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">linarith</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">mul_ne_zero</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">abs_eq_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">pow_eq_zero_iff'</span><span class=\"o\">,</span> <span class=\"n\">abs_eq_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span>\n      <span class=\"n\">field_simp</span>\n      <span class=\"n\">ring</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Filter.tendsto_congr'</span> <span class=\"n\">this.symm</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">Filter.atTop</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Filter.EventuallyEq</span><span class=\"o\">,</span> <span class=\"n\">Filter.eventually_atTop</span><span class=\"o\">]</span>\n      <span class=\"n\">use</span> <span class=\"mi\">1</span>\n      <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Real.norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_of_pos</span><span class=\"o\">]</span>\n      <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">div_pos</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">push_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.one_le_cast.mpr</span> <span class=\"n\">hb</span><span class=\"o\">])</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Filter.tendsto_congr'</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">crux1</span> <span class=\"o\">:</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">tendsto_const_nhds</span>\n    <span class=\"k\">have</span> <span class=\"n\">crux2</span> <span class=\"o\">:</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">tendsto_inverse_atTop_nhds_zero_nat</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Filter.Tendsto.add</span> <span class=\"n\">crux1</span> <span class=\"n\">crux2</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Filter.Tendsto.mul_const</span> <span class=\"o\">(</span><span class=\"bp\">‖</span><span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"n\">this</span>\n  <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx1</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">x.fst</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx2</span> <span class=\"o\">:</span> <span class=\"n\">x.fst</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n      <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">x.fst</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">inr</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x.fst</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i.pred</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x.snd</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fst_pow</span><span class=\"o\">,</span> <span class=\"n\">fst_add</span><span class=\"o\">,</span> <span class=\"n\">fst_inl</span><span class=\"o\">,</span> <span class=\"n\">fst_inr</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">snd_pow</span><span class=\"o\">,</span> <span class=\"n\">snd_add</span><span class=\"o\">,</span> <span class=\"n\">snd_inl</span><span class=\"o\">,</span> <span class=\"n\">snd_inr</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">smul_assoc</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Summable.add</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span>  <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.fst</span> <span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"kd\">by</span>\n    <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n      <span class=\"n\">exact</span> <span class=\"n\">TrivSqZeroExt.hasSum_inl</span> <span class=\"n\">_</span> <span class=\"n\">ht</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">summable_geometric_iff_norm_lt_one</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hx1</span>\n\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span>  <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fst</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">Nat.pred</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">snd</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"kd\">by</span>\n    <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n      <span class=\"n\">exact</span> <span class=\"n\">TrivSqZeroExt.hasSum_inr</span> <span class=\"n\">_</span> <span class=\"n\">ht</span>\n\n  <span class=\"n\">exact</span> <span class=\"n\">Summable.mul_right</span> <span class=\"n\">x.snd</span> <span class=\"bp\">&lt;|</span>\n   <span class=\"n\">summable_of_ratio_test_tendsto_lt_one</span> <span class=\"n\">hx1</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Filter.eventually_atTop</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"mi\">1</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n    <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hb</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">linarith</span>\n      <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">hx2</span> <span class=\"n\">r.left</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">wow</span> <span class=\"n\">x</span> <span class=\"n\">hx2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>wow  just prooves that u can atlually use ratio test</p>",
        "id": 433607216,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713301600
    },
    {
        "content": "<p>also  smth like this should take us home</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">NormedRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">CompleteSpace</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">this</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this.hasSum.mul_right</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">tendsto_nhds_unique</span> <span class=\"n\">this.tendsto_sum_nat</span> <span class=\"n\">_</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">tendsto_const_nhds.sub</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n    <span class=\"n\">convert</span><span class=\"bp\">←</span> <span class=\"n\">this</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">geom_sum_mul_neg</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_mul</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 433611357,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713303364
    },
    {
        "content": "<p>I think that last one is true much more generally, it doesn't need a norm at all</p>",
        "id": 433614175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713304676
    },
    {
        "content": "<p>Can you have tsum without norm</p>",
        "id": 433614469,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713304811
    },
    {
        "content": "<p>Yes, <code>T2Space</code> and <code>TopologicalAddGroup</code> is enough</p>",
        "id": 433614600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713304884
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">womp</span>  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">T2Space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h1.hasSum.mul_right</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">tendsto_nhds_unique</span> <span class=\"n\">this.tendsto_sum_nat</span> <span class=\"n\">_</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">tendsto_const_nhds.sub</span> <span class=\"n\">h2</span>\n    <span class=\"n\">convert</span><span class=\"bp\">←</span> <span class=\"n\">this</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">geom_sum_mul_neg</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_mul</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 433615228,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713305217
    },
    {
        "content": "<p>here's a rough sketch of the final proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx1</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">x.fst</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx2</span> <span class=\"o\">:</span> <span class=\"n\">x.fst</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">womp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">summable_geom_dual_real</span> <span class=\"n\">x</span> <span class=\"n\">hx1</span> <span class=\"n\">hx2</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">x.fst</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">inr</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x.fst</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i.pred</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x.snd</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">ext</span> <span class=\"n\">i</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fst_pow</span><span class=\"o\">,</span> <span class=\"n\">fst_add</span><span class=\"o\">,</span> <span class=\"n\">fst_inl</span><span class=\"o\">,</span> <span class=\"n\">fst_inr</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">snd_pow</span><span class=\"o\">,</span> <span class=\"n\">snd_add</span><span class=\"o\">,</span> <span class=\"n\">snd_inl</span><span class=\"o\">,</span> <span class=\"n\">snd_inr</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">smul_assoc</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">inl</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">inr</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.add</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.comp</span> <span class=\"o\">(</span><span class=\"n\">continuous_inl.tendsto</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n      <span class=\"n\">exact</span> <span class=\"n\">tendsto_pow_atTop_nhds_zero_of_norm_lt_one</span> <span class=\"n\">hx1</span>\n    <span class=\"o\">}</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.comp</span> <span class=\"o\">(</span><span class=\"n\">continuous_inr.tendsto</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">x.snd</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.mul_const</span>\n      <span class=\"k\">suffices</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">Nat</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">fst</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">exact</span> <span class=\"n\">tendsto_self_mul_const_pow_of_abs_lt_one</span> <span class=\"n\">hx1</span>\n    <span class=\"o\">}</span>\n\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 433615599,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713305430
    },
    {
        "content": "<p>Here's <code>womp</code> with even fewer assumptions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Summable.hasSum_geom_sries_mul_sub</span>\n    <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasSum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hasSum_nat_add_iff'</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_range_one</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx'</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hx.sub</span> <span class=\"n\">hx'</span>\n</code></pre></div>",
        "id": 433615776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713305557
    },
    {
        "content": "<p>(you can use <code>HasSum.tsum_eq</code> to get the tsum version)</p>",
        "id": 433615832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713305603
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Summable.hasSum_geom_sries_mul_sub</span>\n\n    <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n\n    <span class=\"n\">HasSum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hasSum_nat_add_iff'</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_range_one</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx'</span>\n\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span>\n\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hx.sub</span> <span class=\"n\">hx'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">womp</span>  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">T2Space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n\n  <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span>  <span class=\"bp\">→</span>  <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span>\n\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h1.hasSum.mul_right</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n    <span class=\"k\">have</span> <span class=\"o\">:</span>   <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- tsum_mul_right</span>\n\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n\n    <span class=\"n\">exact</span> <span class=\"n\">HasSum.tsum_eq</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Summable.hasSum_geom_sries_mul_sub</span> <span class=\"n\">x</span> <span class=\"n\">h1</span>\n\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">DualNumber</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx1</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">x.fst</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx2</span> <span class=\"o\">:</span> <span class=\"n\">x.fst</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n\n      <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n\n  <span class=\"n\">womp</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">summable_geom_dual_real</span> <span class=\"n\">x</span> <span class=\"n\">hx1</span> <span class=\"n\">hx2</span>\n</code></pre></div>",
        "id": 433617360,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713306562
    },
    {
        "content": "<p>You can show the summability by using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=hasSum_coe_mul_geometric_of_norm_lt_one#doc\">docs#hasSum_coe_mul_geometric_of_norm_lt_one</a></p>",
        "id": 433658071,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1713330624
    },
    {
        "content": "<p>We started with that but the side z-condition is too strong I think?</p>",
        "id": 433675257,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713335296
    },
    {
        "content": "<p>Right, nilpotent things should have norm infinitesimally small (ie however big the value of r is, r * epsilon should have norm less than 1)</p>",
        "id": 433677183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713335762
    },
    {
        "content": "<p>That's not possible with our signature for norms, right? The closest we could do is set the norm to zero, but then we don't have a t2 space and our sums don't converge to a single value</p>",
        "id": 433677634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713335971
    },
    {
        "content": "<p>Yes that's right, this is a higher rank valuation, not a rank one (aka real-valued) valuation (aka norm).</p>",
        "id": 433678696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713336536
    },
    {
        "content": "<p>I don't even know if it works in the Archimedean case to be honest! In my examples the underlying norm on the base ring R is nonarchimedean and then the extension to infinitesimals is untroublesome</p>",
        "id": 433678873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713336652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/division.20of.20DualNumbers/near/433675257\">said</a>:</p>\n<blockquote>\n<p>We started with that but the side z-condition is too strong I think?</p>\n</blockquote>\n<p>What does that mean?</p>\n<p>I am just pointing out that it seems Frederick was using the ratio test to prove the convergence of a certain series of real numbers, when the convergence of that series (and its value) is already in mathlib.</p>",
        "id": 433689789,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1713338444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/division.20of.20DualNumbers/near/433678696\">said</a>:</p>\n<blockquote>\n<p>Yes that's right, this is a higher rank valuation, not a rank one (aka real-valued) valuation (aka norm).</p>\n</blockquote>\n<p>If you put a topology on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">[</mo><mi>ϵ</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><msup><mi>ϵ</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}[\\epsilon]/\\epsilon^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">ϵ</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\">ϵ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> using this higher rank norm, wouldn't that make <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mord mathnormal\">ϵ</span></span></span></span> open? Then it would be difficult for anything to converge.</p>",
        "id": 433697409,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1713341303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/division.20of.20DualNumbers/near/433677183\">said</a>:</p>\n<blockquote>\n<p>Right, nilpotent things should have norm infinitesimally small (ie however big the value of r is, r * epsilon should have norm less than 1)</p>\n</blockquote>\n<p>Why should they? Nilpotent operators usually don't have a zero operator norm.</p>",
        "id": 433730607,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1713352607
    },
    {
        "content": "<p>They do for the supremum seminorm on an affinoid</p>",
        "id": 433732911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713353465
    },
    {
        "content": "<p>But actually I'm confused about this for two reasons -- first that the reals aren't nonarchimedean and secondly that valuations are supposed to be multiplicative</p>",
        "id": 433733121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713353547
    },
    {
        "content": "<p>The dual numbers have L_p norm, so both the real and derivative components are equally important. The thing is that (a + b\\e) ^n = a^n + a^(n-1)b\\e. So you can consider the sums seperately.</p>",
        "id": 433809589,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713367003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/division.20of.20DualNumbers/near/433733121\">said</a>:</p>\n<blockquote>\n<p>But actually I'm confused about this for two reasons -- first that the reals aren't nonarchimedean and secondly that valuations are supposed to be multiplicative</p>\n</blockquote>\n<p>It seems that in mathlib, the norm of a normed ring is only required to be submultiplicative. (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NormedRing#doc\">docs#NormedRing</a>) The definition of a normed field requires the norm to be (exactly) multiplicative, though. (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NormedField#doc\">docs#NormedField</a>)</p>\n<p>It wouldn't be possible to put an (exactly) multiplicative norm on the dual numbers, because they are not a domain.</p>",
        "id": 433819402,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1713368415
    },
    {
        "content": "<p>Also, it is possible I am misunderstanding something, but I don't think it is desirable for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∥</mi><mi>ϵ</mi><mi mathvariant=\"normal\">∥</mi></mrow><annotation encoding=\"application/x-tex\">\\|\\epsilon\\|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">ϵ</span><span class=\"mord\">∥</span></span></span></span> to be infinitesimal. If it were, then the sequence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo separator=\"true\">,</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo separator=\"true\">,</mo><mfrac><mn>1</mn><mn>3</mn></mfrac><mo separator=\"true\">,</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">1, \\frac{1}{2}, \\frac{1}{3}, \\ldots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span></span></span></span> wouldn't converge, because it never comes within <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∥</mi><mi>ϵ</mi><mi mathvariant=\"normal\">∥</mi></mrow><annotation encoding=\"application/x-tex\">\\|\\epsilon\\|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">ϵ</span><span class=\"mord\">∥</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>. So the inclusion <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">[</mo><mi>ϵ</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><msup><mi>ϵ</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R} \\to \\mathbb{R}[\\epsilon]/\\epsilon^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">ϵ</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\">ϵ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> would not be continuous. This is a problem even if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> is replaced by a nonarchimedean ring.</p>\n<p>I think the coefficientwise product topology on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">[</mo><mi>ϵ</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><msup><mi>ϵ</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}[\\epsilon]/\\epsilon^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">ϵ</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\">ϵ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> is the \"correct\" one.</p>",
        "id": 433827902,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1713370878
    },
    {
        "content": "<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">R</mi><mo stretchy=\"false\">[</mo><mi>ε</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mi>ε</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf R[\\varepsilon]/(\\varepsilon^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathbf\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">ε</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">ε</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is endowed with the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">ℓ</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\ell^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span>-norm, one gets a normed algebra structure (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mi>ε</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>+</mo><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>ε</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>+</mo><mo stretchy=\"false\">(</mo><mi>x</mi><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>+</mo><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>y</mi><mo stretchy=\"false\">)</mo><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">(x+y\\varepsilon)(x&#x27;+y&#x27;\\varepsilon)=xx&#x27;+(xy&#x27;+x&#x27;y)\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">ε</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">ε</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8352em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">ε</span></span></span></span> has norm <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>x</mi><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi mathvariant=\"normal\">∣</mi><mo>+</mo><mi mathvariant=\"normal\">∣</mi><mi>x</mi><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>+</mo><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>y</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><mi mathvariant=\"normal\">∣</mi><mi>y</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∣</mi><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi mathvariant=\"normal\">∣</mi><mo>+</mo><mi mathvariant=\"normal\">∣</mi><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">|xx&#x27;|+|xy&#x27;+x&#x27;y| \\leq (|x|+|y|)(|x&#x27;|+|y&#x27;|)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mclose\">)</span></span></span></span>),  and the geometric series <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mi>ε</mi><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\sum (x+y\\varepsilon)^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">ε</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> is summable provided the (necessary) condition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">|x|&lt;1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> holds.</p>",
        "id": 433874258,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1713387695
    },
    {
        "content": "<p>That normed algebra structure is in mathlib</p>",
        "id": 433883787,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713392454
    },
    {
        "content": "<p>yeah... how does lean know which norm to inherit?</p>",
        "id": 433891565,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713397321
    },
    {
        "content": "<p>Lean just finds the only norm that mathlib provides, which for dual numbers is the L1 norm</p>",
        "id": 433891791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713397456
    }
]