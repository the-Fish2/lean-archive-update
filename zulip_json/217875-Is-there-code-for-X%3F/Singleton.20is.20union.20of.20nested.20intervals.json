[
    {
        "content": "<p>Is this a slightly unorthodox request: I have a lemma - I'm wondering if mathlib has it, and more important, <em>where it would belong</em>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">singleton_eq_inter_Ioo</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Subset.antisymm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">subset_iInter_iff</span><span class=\"o\">,</span> <span class=\"n\">singleton_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">tsub_le_iff_right</span><span class=\"o\">,</span>\n      <span class=\"n\">le_add_iff_nonneg_right</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">↦</span> <span class=\"n\">hi.le</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">mem_iInter</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">tsub_le_iff_right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_singleton_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_forall_pos_le_add</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">hr</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_forall_pos_le_add</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">hr</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>#find_home gave me wildly different answers, including <code>Data.Real.Basic</code> (which works, but where it doesn't fit in). Doing so on the playground yields five options; can one of the more seasoned people suggest if any of these <em>is</em> in fact reasonable?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">[</span><span class=\"n\">Mathlib.Analysis.NormedSpace.HomeomorphBall</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Analysis.Normed.Order.UpperLower</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Analysis.RCLike.Basic</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Analysis.Normed.Group.Quotient</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Analysis.Seminorm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 433306966,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1713191522
    },
    {
        "content": "<p>Should be true for any complete metric space. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsComplete.nonempty_iInter_of_nonempty_biInter#doc\">docs#IsComplete.nonempty_iInter_of_nonempty_biInter</a> seems relevant.</p>",
        "id": 433313313,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1713192964
    },
    {
        "content": "<p>Heres a proof via the fact that closed balls are a basis</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">singleton_eq_inter_Ioo</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Real.Icc_eq_closedBall</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">biInter_basis_nhds</span> <span class=\"n\">Metric.nhds_basis_closedBall</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 433325953,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1713195992
    }
]