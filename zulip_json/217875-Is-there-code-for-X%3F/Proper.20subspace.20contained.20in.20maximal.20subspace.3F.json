[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">-- let k be a field</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n<span class=\"c1\">-- let V be a fdvs over k</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"c1\">-- let W be a proper subspace of V</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hW</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span>\n\n\n<span class=\"c1\">-- Then W is contained in a hyperplane</span>\n<span class=\"c1\">-- I don't care how to say this, I could work with anything</span>\n<span class=\"kn\">open</span> <span class=\"n\">Submodule</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span>\n    <span class=\"n\">W</span> <span class=\"bp\">≤</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Disjoint</span> <span class=\"n\">W</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">k</span> <span class=\"o\">{</span><span class=\"n\">z</span><span class=\"o\">})</span> <span class=\"bp\">∧</span> <span class=\"n\">W</span> <span class=\"bp\">⊔</span> <span class=\"n\">span</span> <span class=\"n\">k</span> <span class=\"o\">{</span><span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">W</span> <span class=\"bp\">≤</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"n\">finrank</span> <span class=\"n\">k</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- attempt to apply some fancy Zorn thing</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">IsCoatomic</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"c1\">-- fails :-(</span>\n</code></pre></div>",
        "id": 424417648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709391234
    },
    {
        "content": "<p>what if you add that <code>V</code> is nontrivial ?</p>",
        "id": 424421403,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709394007
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">-- let k be a field</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n<span class=\"c1\">-- let V be a vector space over k</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsCoatomic</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">isCoatomic_of_isAtomic_of_complementedLattice_of_isModular</span>\n</code></pre></div>",
        "id": 424422612,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709395000
    },
    {
        "content": "<p>The proof does not use finite dimensionality, but the semisimplicity of vector spaces !!</p>",
        "id": 424422692,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709395062
    },
    {
        "content": "<p>Aah of course -- I had \"added the nontriviality\" with the existence of <code>W</code> but of course typeclass inference can't see this. Thanks!</p>",
        "id": 424423138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709395362
    },
    {
        "content": "<p>Over a ring, you need the hypothesis that the module is noetherian.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">k</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">IsNoetherian</span> <span class=\"n\">k</span> <span class=\"n\">M</span><span class=\"o\">):</span> <span class=\"n\">IsCoatomic</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">isNoetherian_iff_wellFounded</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hM</span>\n  <span class=\"n\">exact</span> <span class=\"n\">isCoatomic_of_orderTop_gt_wellFounded</span> <span class=\"n\">hM</span>\n</code></pre></div>",
        "id": 424423523,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709395648
    },
    {
        "content": "<p>I've come back to this and realised that I can't find any results linking coatoms in finite-dimensional vector spaces to codimension 1 subspaces. I've come up with the following horrible proof that an n+1-dimensional space contains an n-dimensional subspace. How should I have done this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">finrank</span> <span class=\"n\">k</span> <span class=\"n\">W</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">IsNoetherian.finsetBasis</span> <span class=\"n\">k</span> <span class=\"n\">V</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">FiniteDimensional.finrank_eq_card_basis</span> <span class=\"n\">B</span>\n  <span class=\"k\">let</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">Basis.reindex</span> <span class=\"n\">B</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Fintype.equivOfCardEq</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">i.1</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">i.2</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_range</span><span class=\"o\">]</span>\n      <span class=\"n\">omega</span><span class=\"o\">⟩</span>\n    <span class=\"n\">use</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">))</span>\n    <span class=\"k\">suffices</span> <span class=\"n\">finrank</span> <span class=\"n\">k</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">Submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"kd\">by</span>\n      <span class=\"n\">convert</span> <span class=\"n\">this</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card_fin</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finrank_span_eq_card</span> <span class=\"n\">_</span>\n    <span class=\"n\">apply</span> <span class=\"n\">LinearIndependent.comp</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Basis.linearIndependent</span> <span class=\"n\">C</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">hx1</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">hx2</span><span class=\"o\">⟩</span> <span class=\"n\">h</span>\n      <span class=\"n\">simp_all</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hV</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 424701564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709571173
    },
    {
        "content": "<p>I used noetherian, but finitely generated was all that was needed. Now, if you have a maximal submodule, you have to use that the quotient is a simple module and know about them. In particular any nonzero element is a generator. For vector spaces, that means dim 1.</p>",
        "id": 424702117,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709571360
    },
    {
        "content": "<p>Yes I'm sure that's a more elegant way to do it. <span class=\"user-mention\" data-user-id=\"685134\">@Lucas Whitfield</span> instead of that horrible proof we just constructed, you might want to prove that the quotient by a coatom is simple and go that way.</p>",
        "id": 424714576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709575306
    },
    {
        "content": "<blockquote>\n<p>I can't find any results linking coatoms in finite-dimensional vector spaces to codimension 1 subspaces</p>\n</blockquote>\n<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isSimpleModule_iff_isCoatom#doc\">docs#isSimpleModule_iff_isCoatom</a> and we should make <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/FiniteDimensional.html#is_simple_module_of_finrank_eq_one\">docs#is_simple_module_of_finrank_eq_one</a> an iff (edit: when K = A)</p>",
        "id": 424715716,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709575698
    },
    {
        "content": "<p>Oh nice! Yeah this approach is much more elegant:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IsCoatomic</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">isCoatomic_of_isAtomic_of_complementedLattice_of_isModular</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finrank_eq_one_of_isSimpleModule</span> <span class=\"o\">[</span><span class=\"n\">IsSimpleModule</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Nontrivial</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">IsSimpleModule.nontrivial</span> <span class=\"n\">k</span> <span class=\"n\">V</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_ne</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finrank_eq_one_iff_of_nonzero</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">]</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eq_bot_or_eq_top</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">Submodule.span_singleton_eq_bot</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">≤</span> <span class=\"n\">W</span> <span class=\"bp\">∧</span> <span class=\"n\">finrank</span> <span class=\"n\">k</span> <span class=\"n\">W</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">hW1</span><span class=\"o\">,</span> <span class=\"n\">hW2</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">eq_top_or_exists_le_coatom</span> <span class=\"n\">X</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span>\n  <span class=\"n\">use</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">hW2</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">isSimpleModule_iff_isCoatom</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hW1</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finrank_eq_one_of_isSimpleModule</span> <span class=\"n\">at</span> <span class=\"n\">hW1</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">W.finrank_quotient_add_finrank</span>\n  <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 424726858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709579593
    },
    {
        "content": "<p>I've added</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isSimpleModule_iff_finrank_eq_one</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsSimpleModule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">↔</span> <span class=\"n\">FiniteDimensional.finrank</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>to <a href=\"https://github.com/leanprover-community/mathlib4/pull/10808/commits/9bc6eef63d70080b219ba97c6f7a2f55b380a614#diff-95d7011cee766c6bd49b18c53feddf48cac70fc5b1a206eafa18d54b5bb6f5c0R179-R183\">#10808</a>.</p>",
        "id": 424773440,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709599034
    }
]