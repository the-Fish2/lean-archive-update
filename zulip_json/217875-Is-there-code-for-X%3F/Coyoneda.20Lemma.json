[
    {
        "content": "<p>Is there a convenient way to obtain the following <em>co</em>yoneda lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coyonedaSections</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">coyoneda.obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">uliftFunctor.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">F.obj</span> <span class=\"n\">X.unop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.yonedaSections#doc\">docs#CategoryTheory.yonedaSections</a>, and by some arrow reversing this version should be obtainable from that. But since <code>Cᵒᵖᵒᵖ</code> is not def-eq to <code>C</code>, this gets a bit messy.</p>",
        "id": 432293192,
        "sender_full_name": "Christian Merten",
        "timestamp": 1712681950
    },
    {
        "content": "<p>can you use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.unopUnop#doc\">docs#CategoryTheory.unopUnop</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.opOp#doc\">docs#CategoryTheory.opOp</a> ?</p>",
        "id": 432297284,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712683138
    },
    {
        "content": "<p>I tried, but that's what I meant by it gets messy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">≌</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">⥤</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">help0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⟶</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">H.functor</span> <span class=\"bp\">⋙</span> <span class=\"n\">F</span> <span class=\"bp\">⟶</span> <span class=\"n\">H.functor</span> <span class=\"bp\">⋙</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">help1</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">coyoneda.obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">unopUnop</span> <span class=\"n\">C</span> <span class=\"bp\">⋙</span> <span class=\"n\">coyoneda.obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">unopUnop</span> <span class=\"n\">C</span> <span class=\"bp\">⋙</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">help0</span> <span class=\"o\">(</span><span class=\"n\">opOpEquivalence</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">coyoneda.obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">aux'</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">yoneda.obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">unopUnop</span> <span class=\"n\">C</span> <span class=\"bp\">⋙</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">coyoneda.obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">trans</span>\n  <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">yoneda.obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">unopUnop</span> <span class=\"n\">C</span> <span class=\"bp\">⋙</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">unopUnop</span> <span class=\"n\">C</span> <span class=\"bp\">⋙</span> <span class=\"n\">coyoneda.obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">unopUnop</span> <span class=\"n\">C</span> <span class=\"bp\">⋙</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n    <span class=\"gr\">admit</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">help1</span> <span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coyonedaLemma</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">coyoneda.obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">uliftFunctor.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">F.obj</span> <span class=\"n\">X.unop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">trans</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Iso.symm</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Equiv.toIso</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">aux'</span> <span class=\"n\">F</span> <span class=\"n\">X</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">yonedaSections</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">unopUnop</span> <span class=\"n\">C</span> <span class=\"bp\">⋙</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I also tried to construct <code>aux'</code> by hand, which also gets annoying very fast.</p>",
        "id": 432306957,
        "sender_full_name": "Christian Merten",
        "timestamp": 1712685864
    },
    {
        "content": "<p>bah, at this point maybe you should just do it by hand!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coyonedaSections</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">coyoneda.obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">uliftFunctor.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">F.obj</span> <span class=\"n\">X.unop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hom</span> <span class=\"n\">η</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">up</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">η.app</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span>\n  <span class=\"n\">inv</span> <span class=\"n\">ξ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">Y</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F.map</span> <span class=\"n\">x</span> <span class=\"n\">ξ.down</span> <span class=\"o\">}</span>\n  <span class=\"n\">hom_inv_id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">η</span> <span class=\"n\">Y</span> <span class=\"n\">t</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">η.naturality</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 432310449,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712686643
    },
    {
        "content": "<p>Thank you! Should we just copy the respective section in <code>CategoryTheory.Yoneda</code> and dualize all results?</p>",
        "id": 432311043,
        "sender_full_name": "Christian Merten",
        "timestamp": 1712686789
    },
    {
        "content": "<p>Probably yeah</p>",
        "id": 432311136,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712686803
    },
    {
        "content": "<p>I wish someday there is a <code>@[reverse_arrows]</code>.</p>",
        "id": 432311403,
        "sender_full_name": "Christian Merten",
        "timestamp": 1712686865
    },
    {
        "content": "<p>I did that in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12041\">#12041</a>.</p>",
        "id": 432331422,
        "sender_full_name": "Christian Merten",
        "timestamp": 1712693322
    },
    {
        "content": "<p>I was just looking for that ^.^;</p>",
        "id": 432619456,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712804047
    }
]