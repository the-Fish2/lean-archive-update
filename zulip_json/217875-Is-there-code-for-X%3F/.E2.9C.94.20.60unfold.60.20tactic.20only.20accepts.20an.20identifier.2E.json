[
    {
        "content": "<p>How can I be sure in code that an <code>unfold</code> tactic only accepts identifiers?</p>",
        "id": 448076609,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719727856
    },
    {
        "content": "<p>Of course <code>(tactic| unfold (· + ·))</code> will result in an error, but I want to sanitise that error.</p>",
        "id": 448076726,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719728008
    },
    {
        "content": "<p><code>unfold</code> already only accepts identifiers... that syntax quotation does not parse</p>",
        "id": 448077116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719728392
    },
    {
        "content": "<p>Is the 'cannot parse' error unsanitisable?</p>",
        "id": 448077217,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719728466
    },
    {
        "content": "<p>I don't know what you mean</p>",
        "id": 448077311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719728561
    },
    {
        "content": "<p>This is sanitised example which shows <code>#print</code> accepts only ident</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">error: application type mismatch</span>\n<span class=\"sd\">  a.raw</span>\n<span class=\"sd\">argument</span>\n<span class=\"sd\">  a</span>\n<span class=\"sd\">has type</span>\n<span class=\"sd\">  TSyntax `term : Type</span>\n<span class=\"sd\">but is expected to have type</span>\n<span class=\"sd\">  TSyntax [`ident, `str] : Type</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"o\">(</span><span class=\"n\">error</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">Lean.Elab.Term.TermElabM</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span><span class=\"w\"> </span><span class=\"n\">Nat.zero</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">_b</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#print</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 448077317,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719728570
    },
    {
        "content": "<p>If you want to explicitly check whether something parses or not, without messing up the rest of the file if it doesn't, I would suggest you put the code in a string literal and call the parser directly</p>",
        "id": 448077385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719728644
    },
    {
        "content": "<blockquote>\n<p>I don't know what you mean</p>\n</blockquote>\n<p>Sanitisation refers to the transformation of error-prone code into error-free code.</p>",
        "id": 448077443,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719728721
    },
    {
        "content": "<blockquote>\n<p>I would suggest you put the code in a string literal and call the parser directly</p>\n</blockquote>\n<p>can I call the parser directly?? I don't know the way.</p>",
        "id": 448077463,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719728745
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Parser</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">checkParse</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Name</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MetaM</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">runParserCategory</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"n\">throwError</span><span class=\"w\"> </span><span class=\"n\">s</span>\n\n<span class=\"n\">run_meta</span><span class=\"w\"> </span><span class=\"n\">checkParse</span><span class=\"w\"> </span><span class=\"ss\">`tactic</span><span class=\"w\"> </span><span class=\"s2\">\"unfold foo\"</span><span class=\"w\"> </span><span class=\"c1\">-- ok</span>\n<span class=\"n\">run_meta</span><span class=\"w\"> </span><span class=\"n\">checkParse</span><span class=\"w\"> </span><span class=\"ss\">`tactic</span><span class=\"w\"> </span><span class=\"s2\">\"unfold (· + ·)\"</span><span class=\"w\"> </span><span class=\"c1\">-- fail</span>\n</code></pre></div>",
        "id": 448078065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719729263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> wao....awesome. Thank you very much!!!</p>",
        "id": 448078252,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719729472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 448078346,
        "sender_full_name": "Notification Bot",
        "timestamp": 1719729542
    }
]