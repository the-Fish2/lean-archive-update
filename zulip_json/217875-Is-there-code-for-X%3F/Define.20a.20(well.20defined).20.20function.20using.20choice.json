[
    {
        "content": "<p>I want to define a function whose construction depends on several auxiliary choices, but does not depend on them, such as this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">has_lift</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">lift_indep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb'</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>  <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">b'</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b'</span> <span class=\"n\">hb'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I tried something for <code>g</code>, involving a lot of <code>choose</code> and <code>choose_spec</code>, but I can't prove the example afterwards.</p>\n<p>NB. My actual situation is the following (it says that an element of a tensor product comes from something small, and<br>\nand two choices coincide in something small) :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n    <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">hasLift</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">S'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">S'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">S'</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">S'</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n    <span class=\"n\">LinearMap.rTensor</span> <span class=\"n\">M</span> <span class=\"n\">j.toLinearMap</span> <span class=\"n\">x'</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isLiftUnique</span>\n    <span class=\"o\">(</span><span class=\"n\">S'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">S'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">S'</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">S'</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">S''</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">S''</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S''</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">j''</span> <span class=\"o\">:</span> <span class=\"n\">S''</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">x''</span> <span class=\"o\">:</span> <span class=\"n\">S''</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">LinearMap.rTensor</span> <span class=\"n\">M</span> <span class=\"n\">j'.toLinearMap</span> <span class=\"n\">x'</span> <span class=\"bp\">=</span> <span class=\"n\">LinearMap.rTensor</span> <span class=\"n\">M</span> <span class=\"n\">j''.toLinearMap</span> <span class=\"n\">x''</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"o\">:</span> <span class=\"n\">S'</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k''</span> <span class=\"o\">:</span> <span class=\"n\">S''</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">),</span>\n      <span class=\"n\">j.comp</span> <span class=\"n\">k'</span> <span class=\"bp\">=</span> <span class=\"n\">j'</span> <span class=\"bp\">∧</span> <span class=\"n\">j.comp</span> <span class=\"n\">k''</span> <span class=\"bp\">=</span><span class=\"n\">j''</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">LinearMap.rTensor</span> <span class=\"n\">M</span> <span class=\"n\">k'.toLinearMap</span> <span class=\"n\">x'</span> <span class=\"bp\">=</span> <span class=\"n\">LinearMap.rTensor</span> <span class=\"n\">M</span> <span class=\"n\">k''.toLinearMap</span> <span class=\"n\">x''</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">liftAux</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">S'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">S'</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">S'</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">LinearMap.rTensor</span> <span class=\"n\">M</span> <span class=\"n\">j.toLinearMap</span> <span class=\"n\">x'</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n  <span class=\"n\">LinearMap.rTensor</span> <span class=\"n\">N</span> <span class=\"n\">j.toLinearMap</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">S'</span> <span class=\"n\">hC</span> <span class=\"n\">hA</span> <span class=\"n\">x'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">S'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hasLift</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span>\n    <span class=\"k\">let</span> <span class=\"n\">hCS'</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">S'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hasLift</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose_spec.choose</span>\n    <span class=\"k\">let</span> <span class=\"n\">hAS'</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hasLift</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose_spec.choose_spec.choose</span>\n    <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">S'</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hasLift</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose_spec.choose_spec.choose_spec.choose</span>\n    <span class=\"k\">let</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">S'</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hasLift</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose_spec.choose_spec.choose_spec.choose_spec.choose</span>\n    <span class=\"k\">let</span> <span class=\"n\">hx'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hasLift</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose_spec.choose_spec.choose_spec.choose_spec.choose_spec</span>\n    <span class=\"n\">exact</span> <span class=\"n\">liftAux</span> <span class=\"n\">f</span> <span class=\"n\">S</span> <span class=\"n\">x</span> <span class=\"n\">S'</span> <span class=\"n\">hCS'</span> <span class=\"n\">hAS'</span> <span class=\"n\">j</span> <span class=\"n\">x'</span> <span class=\"n\">hx'</span>\n</code></pre></div>",
        "id": 424105648,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709239814
    },
    {
        "content": "<p>Probably not the best solution, but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">has_lift</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">lift_indep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb'</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>  <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">b'</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b'</span> <span class=\"n\">hb'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.indefiniteDescription</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">has_lift</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">has_lift</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Classical.indefiniteDescription</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">has_lift</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">hb'</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">lift_indep</span> <span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"n\">hb</span> <span class=\"n\">hb'</span> <span class=\"n\">h.symm</span>\n</code></pre></div>",
        "id": 424113726,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1709243043
    },
    {
        "content": "<p>Have you had a look at the <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Choose.html\">choose</a> tactic? I am not sure it applies here, but it can help.</p>",
        "id": 424115460,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709243692
    },
    {
        "content": "<p>I'll have a look. For the moment, I'm trying to understand <code>Quot</code> (and there's a bug in mathlib4_docs that when you click on <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quot.lift#doc\">docs#Quot.lift</a>, you go nowhere, because the <code>opaque</code> definition has no link).<br>\nAnd I'm stuck with the definition of a Sigma type on which my relation would live:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"bp\">Σ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>I expected the failing type to be a choice of <code>b</code> such that <code>c b</code> holds, but…</p>",
        "id": 424118371,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709244845
    },
    {
        "content": "<p>This is really strange : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Sigma</span> <span class=\"c1\">-- Sigma.{u, v} {α : Type u} (β : α → Type v) : Type (max u v)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">c</span> <span class=\"c1\">-- c : β → Prop</span>\n<span class=\"k\">#check</span> <span class=\"n\">Sigma</span> <span class=\"n\">c</span> <span class=\"c1\">-- type mismatch  c b has type  Prop : Type</span>\n  <span class=\"c1\">-- but is expected to have type   Type ?u.165704 : Type (?u.165704 + 1)</span>\n</code></pre></div>",
        "id": 424119521,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709245335
    },
    {
        "content": "<p>i suppose the error itself does make sense, as <code>Prop</code> is not the same as <code>Type u</code> for some <code>u</code>. it seems like you actually want <code>setOf c</code>? see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=setOf#doc\">docs#setOf</a></p>",
        "id": 424122454,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709246634
    },
    {
        "content": "<p>in that case, you will be able to turn <code>x:setOf c</code> into <code>b:β</code> and <code>hb:c b</code> using <code>obtain ⟨b,hb⟩ := x</code></p>",
        "id": 424123194,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709246998
    },
    {
        "content": "<blockquote>\n<p>a choice of <code>b</code> such that <code>c b</code> holds</p>\n</blockquote>\n<p>you want <code>Subtype</code>, not <code>Sigma</code></p>",
        "id": 424123279,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709247021
    },
    {
        "content": "<p>isn't that basically the same thing?</p>",
        "id": 424123537,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709247141
    },
    {
        "content": "<p>as <code>setOf</code>, i mean?</p>",
        "id": 424123573,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709247159
    },
    {
        "content": "<p>Well, my minimal example was too minimal, for my <code>c</code> is really <code>Type</code>-valued. I made it <code>Prop</code> for the sake of minimizing my example and got into an additional problem. With <code>Type</code>, the sigma type problem that you explained disappears and I need something such as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">has_lift</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">lift_indep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb'</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>  <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">b'</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b'</span> <span class=\"n\">hb'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">g_comp_p</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 424123787,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709247265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Define.20a.20.28well.20defined.29.20.20function.20using.20choice/near/424119521\">said</a>:</p>\n<blockquote>\n<p>This is really strange : </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Sigma</span> <span class=\"c1\">-- Sigma.{u, v} {α : Type u} (β : α → Type v) : Type (max u v)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">c</span> <span class=\"c1\">-- c : β → Prop</span>\n<span class=\"k\">#check</span> <span class=\"n\">Sigma</span> <span class=\"n\">c</span> <span class=\"c1\">-- type mismatch  c b has type  Prop : Type</span>\n  <span class=\"c1\">-- but is expected to have type   Type ?u.165704 : Type (?u.165704 + 1)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>If the strangeness is supposed to be the <code>c b</code> in the final output then I can't reproduce -- did you have a <code>b</code> later on in the file?</p>",
        "id": 424123876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709247317
    },
    {
        "content": "<p>(yes, many things later on, I probably should have <code>section</code>ed it…)</p>",
        "id": 424124145,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709247461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Define.20a.20.28well.20defined.29.20.20function.20using.20choice/near/424115460\">said</a>:</p>\n<blockquote>\n<p>Have you had a look at the <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Choose.html\">choose</a> tactic? I am not sure it applies here, but it can help.</p>\n</blockquote>\n<p>In my toy example, I could do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">has_lift</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">lift_indep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hb'</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">b'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>  <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">b'</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b'</span> <span class=\"n\">hb'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">choose</span> <span class=\"n\">lift</span> <span class=\"n\">cond_lift</span> <span class=\"n\">proj_lift</span> <span class=\"n\">using</span> <span class=\"n\">has_lift</span>\n  <span class=\"n\">use</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cond_lift</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">↦</span> <span class=\"n\">lift_indep</span> <span class=\"o\">(</span><span class=\"n\">proj_lift</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Now, I'll try with my real life application.</p>",
        "id": 424174309,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709278681
    },
    {
        "content": "<p>Before you try -- can you prove anything about this definition?</p>",
        "id": 424181171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709282066
    },
    {
        "content": "<p>Yes, because the out-type of <code>G</code>contains the property that characterizes <code>g</code>.</p>",
        "id": 424301899,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709316969
    }
]