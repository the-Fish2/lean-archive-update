[
    {
        "content": "<p>I have the following Lean3 code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">fintype</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">bitvec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">vector.fintype</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>which I've ported to Lean4 as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">fintype</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Vector.fintype</span>\n</code></pre></div>\n<p>However, <code>BitVec</code> is no longer reduced to <code>Vector</code>, so the ported code doesn't work as-is.  Is there any code that supports <code>BitVec</code> as an instance of <code>Fintype</code> in some capacity?</p>",
        "id": 436540259,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1714583841
    },
    {
        "content": "<p><code>deriving instance Fintype for BitVec</code> will do it</p>",
        "id": 436564454,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714593888
    },
    {
        "content": "<p>Hm... <code>default handlers have not been implemented yet, class: 'Fintype' types: [BitVec]</code>. There is a reference to this error in <a href=\"https://lean-lang.org/functional_programming_in_lean/type-classes/standard-classes.html?highlight=default%20handlers#messages-you-may-meet\">Functional Programming in Lean</a>, but I'm otherwise not sure what/where I would find said handlers.</p>",
        "id": 436567077,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1714595077
    },
    {
        "content": "<p>You are missing an <code>import</code>, but I cannot tell you which one because you didn't tell me which ones you have already! (<code>import</code>s are an important part of <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> s)</p>",
        "id": 436567294,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714595181
    },
    {
        "content": "<p>Adding <code>import Mathlib.Tactic</code> fixes it, but is surely overkill</p>",
        "id": 436567434,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714595258
    },
    {
        "content": "<p>MWE is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Distributions.Uniform</span>\n\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Fintype</span> <span class=\"n\">for</span> <span class=\"n\">BitVec</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">uniformBitvec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">PMF</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">PMF.uniformOfFintype</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 436568988,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1714595978
    },
    {
        "content": "<p>Does this help track down where the handler is captured along <code>Mathlib.tactic</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">IsSimpleOrder.instFintype</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Unique.fintype</span><span class=\"o\">,</span> <span class=\"n\">BitVec.fintype</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">instFintypeBitVec</span><span class=\"o\">,</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"n\">to</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">[]</span> <span class=\"n\">result</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Zero.instNonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">One.instNonempty</span><span class=\"o\">,</span> <span class=\"n\">infSet_to_nonempty</span><span class=\"o\">,</span> <span class=\"n\">supSet_to_nonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">IrreducibleSpace.toNonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">ConnectedSpace.toNonempty</span><span class=\"o\">,</span> <span class=\"n\">top_nonempty</span><span class=\"o\">,</span> <span class=\"n\">bot_nonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddTorsor.nonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Nontrivial.to_nonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">instNonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">instForAllNonemptyNonempty</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instForAllNonemptyNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.2675</span> <span class=\"bp\">?</span><span class=\"n\">m.2676</span><span class=\"o\">)</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">BitVec.instInhabitedBitVec</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"n\">result</span> <span class=\"n\">instNonempty</span>\n</code></pre></div>",
        "id": 436569290,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1714596107
    },
    {
        "content": "<p>You need to add <code>import Mathlib.Tactic.DeriveFintype</code></p>",
        "id": 436574861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714598457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, do you think it would be easy enough to improve the error message from</p>\n<blockquote>\n<p>default handlers have not been implemented yet, class: 'Fintype' types: [BitVec]</p>\n</blockquote>\n<p>to something like</p>\n<blockquote>\n<p>No handled found for class: 'Fintype' types: [BitVec]. Perhaps you are missing an import?</p>\n</blockquote>",
        "id": 436575019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714598531
    }
]