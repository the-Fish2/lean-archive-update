[
    {
        "content": "<p>Couldn't find something like this in the library ... did I miss it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">beq_list_diamond</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"bp\">=</span> <span class=\"n\">l2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">List.beq</span> <span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 410649468,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704044979
    },
    {
        "content": "<p>AFAIR, there were plans to redefine <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Decidable#doc\">docs#Decidable</a> to prevent diamonds like this (going from a boolean to <code>Decidable</code> and back again is not defeq). I don't know what happened to these plans.</p>",
        "id": 410649777,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704045318
    },
    {
        "content": "<p>I think the plans were Gabriel's, and MSR losing interest in Lean seems to have caused them to go on hold</p>",
        "id": 410649853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704045378
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2038\">lean4#2038</a> has a trial implementation</p>",
        "id": 410649878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704045412
    },
    {
        "content": "<p>That's a huge <code>diff</code></p>",
        "id": 410650980,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704046464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Do you plan working on <a href=\"https://github.com/leanprover/lean4/pull/2038\">lean4#2038</a>? If not, then I'll see if I can pick it up next week.</p>",
        "id": 410654100,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704049965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Something I noticed and mentioned in <a href=\"https://github.com/leanprover/lean4/pull/2038#issuecomment-1821551234\">this PR comment</a> is that there seems to be a lower-impact change to <code>Decidable</code> (and one that seems to have nicer definitional equalities). I got as far as seeing it'll take also looking through assumptions about <code>Decidable</code> that are hard-coded into the compiler.</p>\n<p>Here's the possible re-definition reproduced here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The truth value of the proposition `p` as a `Bool`.</span>\n<span class=\"sd\">  If `true` then `p` is true, and if `false` then `p` is false. -/</span>\n  <span class=\"n\">decide</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n  <span class=\"sd\">/-- `decide p` evaluates to the Boolean `true` if and only if `p` is a true proposition.  -/</span>\n  <span class=\"n\">cond_decide</span> <span class=\"o\">:</span> <span class=\"n\">cond</span> <span class=\"n\">decide</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Not</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Prove that `p` is decidable by supplying a proof of `p` -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">match_pattern</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">Decidable.isTrue</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span> <span class=\"n\">where</span>\n  <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">cond_decide</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n\n<span class=\"sd\">/-- Prove that `p` is decidable by supplying a proof of `¬p` -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">match_pattern</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">Decidable.isFalse</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Not</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span> <span class=\"n\">where</span>\n  <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"n\">cond_decide</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 410654479,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704050424
    },
    {
        "content": "<p>I'm not sure where adjusting <code>Decidable</code> is on the Lean roadmap. It would be good figuring that out before you spend a lot of time on this -- though if it can be carried out in a low-impact way without a huge diff, that would be great to know.</p>",
        "id": 410654693,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704050671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/List.2FBEq.20diamond/near/410654479\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> Something I noticed and mentioned in <a href=\"https://github.com/leanprover/lean4/pull/2038#issuecomment-1821551234\">this PR comment</a> is that there seems to be a lower-impact change to <code>Decidable</code> (and one that seems to have nicer definitional equalities). I got as far as seeing it'll take also looking through assumptions about <code>Decidable</code> that are hard-coded into the compiler.</p>\n<p>Here's the possible re-definition reproduced here:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The truth value of the proposition `p` as a `Bool`.</span>\n<span class=\"sd\">  If `true` then `p` is true, and if `false` then `p` is false. -/</span>\n  <span class=\"n\">decide</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n  <span class=\"sd\">/-- `decide p` evaluates to the Boolean `true` if and only if `p` is a true proposition.  -/</span>\n  <span class=\"n\">cond_decide</span> <span class=\"o\">:</span> <span class=\"n\">cond</span> <span class=\"n\">decide</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Not</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Prove that `p` is decidable by supplying a proof of `p` -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">match_pattern</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">Decidable.isTrue</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span> <span class=\"n\">where</span>\n  <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">cond_decide</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n\n<span class=\"sd\">/-- Prove that `p` is decidable by supplying a proof of `¬p` -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">match_pattern</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">Decidable.isFalse</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Not</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span> <span class=\"n\">where</span>\n  <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"n\">cond_decide</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>With this definition a Decidable instance would end up being an unboxed bool by our natural FFI definitions I think. That should make it rather easy to handle in the compiler, maybe even without special casing?</p>",
        "id": 410654915,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1704050937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> There are some assumptions about <code>Decidable</code> here and there. I got some assertion violations in <code>erase_irrelevant.cpp</code> in particular.</p>",
        "id": 410655742,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704051850
    },
    {
        "content": "<p>Right but the code in erase_irrelevant.cpp that deals with decidables is concerned with turning decidable things into Bool things. But since that would just naturally happen with the FFI rules I would hope we might just be able to get rid of it without performance penalty?</p>",
        "id": 410655867,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1704051993
    },
    {
        "content": "<p>But that's just a hope, I don't know for sure of course</p>",
        "id": 410655872,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1704052003
    },
    {
        "content": "<p>Oh, ok, I thought you were saying something else. It'd be neat if all we'd need to do to make this work is rip out the special casing.</p>",
        "id": 410656053,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704052195
    },
    {
        "content": "<p>If you do rip it out you might also want to either do that or add a note in the new compiler directory which deals with this as well but is disabled right now.</p>",
        "id": 410656143,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1704052266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/List.2FBEq.20diamond/near/410650980\">said</a>:</p>\n<blockquote>\n<p>That's a huge <code>diff</code></p>\n</blockquote>\n<p>It's not that huge once you ignore everything under <code>stage0</code>.</p>",
        "id": 410704141,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704098289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Unfortunately I don't have time to resume work on that PR.  IIRC the Lean PR was technically finished, but it wasn't merged because it would cause work for the mathlib port.</p>",
        "id": 410773490,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1704155676
    },
    {
        "content": "<p>I like Kyle's proposal.  It should be enough to just make that change on top of my PR.  I'd already ripped out all the special casing in the compiler.</p>",
        "id": 410773555,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1704155721
    },
    {
        "content": "<p>I will read instructions on bootstrapping Lean 4 tomorrow.</p>",
        "id": 410779383,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704159585
    }
]