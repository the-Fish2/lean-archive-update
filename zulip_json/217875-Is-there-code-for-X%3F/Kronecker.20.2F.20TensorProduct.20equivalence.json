[
    {
        "content": "<p>I'm looking for a linear equivalence like<br>\n<code>(Matrix B B R ⊗[R] Matrix D D R) ≃ₗ[R] Matrix (B × B) (D × D) R</code><br>\nor <br>\n<code>(Matrix B B R ⊗[R] Matrix D D R) ≃ₗ[R] Matrix (B × D) (B × D) R</code><br>\nbut I'm admittedly having a hard time understanding some statements like <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/TensorProduct/Matrix.html#Matrix.toLin_kronecker\">Matrix.toLin_kronecker</a> and friends. </p>\n<p>Actually, is it possible that I don't want tensor products here at all?<br>\nMy end goal is that I want to say \"here's one linear map A from matrices of shape W to matrices of shape X, here's another linear map B from matrices Y to matrices Z, here's their product which maps matrices of shape (W ⊗ Y) to (X ⊗ Z), where ⊗ is the kronecker product.</p>",
        "id": 437671367,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1715181120
    },
    {
        "content": "<p>I was able to write this definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">MatrixMap_prod</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">Matrix</span> <span class=\"n\">B</span> <span class=\"n\">B</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">C</span> <span class=\"n\">C</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">Matrix</span> <span class=\"n\">D</span> <span class=\"n\">D</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n    <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.toMatrix</span> <span class=\"o\">(</span><span class=\"n\">Basis.tensorProduct</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"n\">C</span> <span class=\"n\">C</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">Basis.tensorProduct</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"n\">D</span> <span class=\"n\">D</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">TensorProduct.map</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">r₁</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.prodProdProdComm</span> <span class=\"n\">B</span> <span class=\"n\">B</span> <span class=\"n\">D</span> <span class=\"n\">D</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">r₂</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.prodProdProdComm</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"n\">C</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">Matrix.reindex</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"n\">h₁</span><span class=\"bp\">;</span>\n  <span class=\"n\">Matrix.toLin</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">D</span><span class=\"o\">))</span> <span class=\"n\">h₂</span>\n</code></pre></div>\n<p>which is, honestly, quite a mess. h₁ can equivalently be written</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">LinearMap.toMatrix</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"n\">M₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₖ</span> <span class=\"o\">((</span><span class=\"n\">LinearMap.toMatrix</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"n\">C</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"n\">D</span> <span class=\"n\">D</span><span class=\"o\">))</span> <span class=\"n\">M₂</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(the equality of these is is precisely <code>TensorProduct.toMatrix_map</code>), but that's not really any cleaner or better.</p>",
        "id": 437680477,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1715184040
    },
    {
        "content": "<p>What's the equation that you want the result to satisfy? <code>MatrixMap_prod M₁ M₂ M (b₁, d₁) (b₂, d₂) = _</code>?</p>",
        "id": 437699863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715190253
    },
    {
        "content": "<p>I think these are the (equivalent) properties that I want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A `MatrixMap` is a linear map between squares matrices of size A to size B, over R. -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">MatrixMap</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">Matrix</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">Matrix</span> <span class=\"n\">B</span> <span class=\"n\">B</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">MatrixMap_Prod</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"o\">:</span> <span class=\"n\">MatrixMap</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"n\">MatrixMap</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MatrixMap</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.toMatrix</span> <span class=\"o\">(</span><span class=\"n\">Basis.tensorProduct</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"n\">C</span> <span class=\"n\">C</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">Basis.tensorProduct</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"n\">D</span> <span class=\"n\">D</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">TensorProduct.map</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">r₁</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.prodProdProdComm</span> <span class=\"n\">B</span> <span class=\"n\">B</span> <span class=\"n\">D</span> <span class=\"n\">D</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">r₂</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.prodProdProdComm</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"n\">C</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">Matrix.reindex</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"n\">h₁</span><span class=\"bp\">;</span>\n  <span class=\"n\">Matrix.toLin</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">D</span><span class=\"o\">))</span> <span class=\"n\">h₂</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">MatrixMap_Prod_def</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"o\">:</span> <span class=\"n\">MatrixMap</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"n\">MatrixMap</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MatrixMap_Prod</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">d₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"n\">d₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">c₁</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">c₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasisMatrix</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasisMatrix</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">d₁</span> <span class=\"n\">d₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">c₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">c₂</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Kronecker</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">MatrixMap_Prod_kron</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"o\">:</span> <span class=\"n\">MatrixMap</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"n\">MatrixMap</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MA</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MC</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">C</span> <span class=\"n\">C</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MatrixMap_Prod</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"o\">(</span><span class=\"n\">MA</span> <span class=\"bp\">⊗ₖ</span> <span class=\"n\">MC</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"n\">MA</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₖ</span> <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"n\">MC</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>the <code>MatrixMap_Prod_def</code> could be used as an alternate definition. The <em>real</em> defining property that I want is <code>MatrixMap_Prod_kron</code>, which fully defines the map by linear combination, but not in a way that immediately yields an actual definition. But given <code>MatrixMap_Prod_kron</code>, I'm hoping there's some way to state the original thing in a cleaner way (maybe without needing to mention <code>Matrix.stdBasisMatrix</code> and <code>Matrix.stdBasis</code>, which feel hacky here.)</p>",
        "id": 437706499,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1715192625
    }
]