[
    {
        "content": "<p>I have this proof about powersets and proper divisors for the number 70.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.powerset</span> <span class=\"o\">(</span><span class=\"n\">Nat.properDivisors</span> <span class=\"mi\">70</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">70</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">properDivisors</span> <span class=\"mi\">70</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">14</span><span class=\"o\">,</span> <span class=\"mi\">35</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">powerset</span> <span class=\"o\">(</span><span class=\"n\">properDivisors</span> <span class=\"mi\">70</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is it possible to proof without stating the output of the <code>#eval</code> in the theorem as a have statement?</p>",
        "id": 422288121,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1708367207
    },
    {
        "content": "<p>Similar to how hp is defined, but I'd rather not do that for the powerset of properDivisors</p>",
        "id": 422288192,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1708367248
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Finset.powerset_singleton</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Finset.powerset</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{{</span><span class=\"n\">a</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">singleton_ne_empty</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Eq.symm</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.powerset</span> <span class=\"o\">(</span><span class=\"n\">Nat.properDivisors</span> <span class=\"mi\">70</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">70</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">properDivisors</span> <span class=\"mi\">70</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">14</span><span class=\"o\">,</span> <span class=\"mi\">35</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.powerset_insert</span><span class=\"o\">,</span> <span class=\"n\">Finset.powerset_singleton</span><span class=\"o\">,</span> <span class=\"n\">image_union</span><span class=\"o\">,</span> <span class=\"n\">Finset.cons_eq_insert</span><span class=\"o\">,</span> <span class=\"n\">image_insert</span><span class=\"o\">,</span> <span class=\"n\">image_singleton</span><span class=\"o\">,</span> <span class=\"n\">insert_empty</span><span class=\"o\">,</span> <span class=\"n\">insert_union</span><span class=\"o\">,</span> <span class=\"n\">union_insert</span><span class=\"o\">,</span>\n  <span class=\"bp\">←</span><span class=\"n\">insert_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n</code></pre></div>",
        "id": 422289606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708368070
    },
    {
        "content": "<p>Did you use <code>simp?</code> or <code>aesop?</code> to find that sequence?</p>",
        "id": 422290134,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1708368374
    },
    {
        "content": "<p>No, I did it by looking at the goal and using <code>apply?</code> to find the lemmas I couldn't guess the names of</p>",
        "id": 422290551,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708368652
    },
    {
        "content": "<p>Here's a nasty hack that really uses <code>eval</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">HasInstance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Expr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasInstance</span> <span class=\"o\">(</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstanceAs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">ℕ</span><span class=\"o\">)⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasInstance</span> <span class=\"o\">(</span><span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstanceAs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">DecidableEq</span>  <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">))⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasInstance</span> <span class=\"o\">(</span><span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstanceAs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">DecidableEq</span>  <span class=\"o\">(</span><span class=\"n\">Finset</span>  <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)))⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ToLevel.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">Lean.ToExpr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasInstance</span> <span class=\"o\">(</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Lean.ToExpr</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">u'</span> <span class=\"o\">:</span> <span class=\"n\">Level</span> <span class=\"o\">:=</span> <span class=\"n\">ToLevel.toLevel.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"k\">have</span> <span class=\"n\">α'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.ToExpr.toTypeExpr</span> <span class=\"n\">α</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">DecidableEq</span> <span class=\"bp\">$</span><span class=\"n\">α'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">HasInstance.expr</span> <span class=\"o\">(</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span> <span class=\"n\">toTypeExpr</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"bp\">$</span><span class=\"n\">α'</span><span class=\"o\">)</span>\n    <span class=\"n\">toExpr</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"bp\">$</span><span class=\"n\">α'</span><span class=\"o\">)</span> <span class=\"k\">from</span>\n      <span class=\"k\">match</span> <span class=\"n\">x.val.unquot.reverse</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∅</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">x0</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">x0'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">toExpr</span> <span class=\"n\">x0</span><span class=\"bp\">;</span>\n        <span class=\"n\">List.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">toExpr</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"bp\">$</span><span class=\"n\">x'</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">q</span><span class=\"o\">({</span><span class=\"bp\">$</span><span class=\"n\">x0'</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"bp\">$</span><span class=\"n\">α'</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">eval_expr</span><span class=\"o\">)</span> <span class=\"s2\">\"eval% \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"kd\">@[</span><span class=\"n\">term_elab</span> <span class=\"n\">eval_expr</span><span class=\"kd\">]</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">elabExprElab</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Term.TermElab</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"n\">eval</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">exp</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Term.elabTermAndSynthesize</span> <span class=\"n\">stx</span> <span class=\"n\">exp</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.evalExpr</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"n\">e</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">Lean.toExpr</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">exp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"nope\"</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.powerset</span> <span class=\"o\">(</span><span class=\"n\">Nat.properDivisors</span> <span class=\"mi\">70</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">70</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Finset.powerset</span> <span class=\"o\">(</span><span class=\"n\">Nat.properDivisors</span> <span class=\"mi\">70</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">Finset.powerset</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">14</span><span class=\"o\">,</span> <span class=\"mi\">35</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422294189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708370627
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> can tell me a better way to write it</p>",
        "id": 422294203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708370636
    },
    {
        "content": "<p>Wow that's really cool! I don't understand it but it works!</p>",
        "id": 422303948,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1708375063
    },
    {
        "content": "<p>Trust me, most people don't understand that code...</p>",
        "id": 422304094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708375139
    },
    {
        "content": "<p>So I proved the <code>sorry</code> after the hp in hp2, but how do I go through each <code>s \\in powerset (Nat.properDivisors 70</code> to show that the sum over s doesn't equal 70?</p>\n<p>For example if I had <code>s \\in {1,2,3}</code> with a goal such as <code>\\forall s \\in {1,2,3}, s\\= 4</code>, what tactic would I use?</p>\n<p>I tried <code>cases</code> and <code>rcases</code> but they both reduce the set into a list and a jumbled mess of computer science stuff.</p>\n<p>Here is what I have so far expanding off of Eric Wieser.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"mi\">1000000000000</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">HasInstance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Expr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasInstance</span> <span class=\"o\">(</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstanceAs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">ℕ</span><span class=\"o\">)⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasInstance</span> <span class=\"o\">(</span><span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstanceAs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">DecidableEq</span>  <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">))⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasInstance</span> <span class=\"o\">(</span><span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstanceAs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">DecidableEq</span>  <span class=\"o\">(</span><span class=\"n\">Finset</span>  <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)))⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ToLevel.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">Lean.ToExpr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasInstance</span> <span class=\"o\">(</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Lean.ToExpr</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">u'</span> <span class=\"o\">:</span> <span class=\"n\">Level</span> <span class=\"o\">:=</span> <span class=\"n\">ToLevel.toLevel.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"k\">have</span> <span class=\"n\">α'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.ToExpr.toTypeExpr</span> <span class=\"n\">α</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">DecidableEq</span> <span class=\"bp\">$</span><span class=\"n\">α'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">HasInstance.expr</span> <span class=\"o\">(</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span> <span class=\"n\">toTypeExpr</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"bp\">$</span><span class=\"n\">α'</span><span class=\"o\">)</span>\n    <span class=\"n\">toExpr</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"bp\">$</span><span class=\"n\">α'</span><span class=\"o\">)</span> <span class=\"k\">from</span>\n      <span class=\"k\">match</span> <span class=\"n\">x.val.unquot.reverse</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∅</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">x0</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">x0'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">toExpr</span> <span class=\"n\">x0</span><span class=\"bp\">;</span>\n        <span class=\"n\">List.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">toExpr</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"bp\">$</span><span class=\"n\">x'</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">q</span><span class=\"o\">({</span><span class=\"bp\">$</span><span class=\"n\">x0'</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"bp\">$</span><span class=\"n\">α'</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">eval_expr</span><span class=\"o\">)</span> <span class=\"s2\">\"eval% \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"kd\">@[</span><span class=\"n\">term_elab</span> <span class=\"n\">eval_expr</span><span class=\"kd\">]</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">elabExprElab</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Term.TermElab</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"n\">eval</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">exp</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Term.elabTermAndSynthesize</span> <span class=\"n\">stx</span> <span class=\"n\">exp</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.evalExpr</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"n\">e</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">Lean.toExpr</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">exp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"nope\"</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.powerset</span> <span class=\"o\">(</span><span class=\"n\">Nat.properDivisors</span> <span class=\"mi\">70</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">70</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp1</span> <span class=\"o\">:</span> <span class=\"n\">Nat.properDivisors</span> <span class=\"mi\">70</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">14</span><span class=\"o\">,</span> <span class=\"mi\">35</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"n\">Finset.powerset</span> <span class=\"o\">(</span><span class=\"n\">Nat.properDivisors</span> <span class=\"mi\">70</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">Finset.powerset</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">14</span><span class=\"o\">,</span> <span class=\"mi\">35</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hp1</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422305378,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1708375899
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"mi\">2000</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.powerset</span> <span class=\"o\">(</span><span class=\"n\">Nat.properDivisors</span> <span class=\"mi\">70</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">70</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">hs</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 422305721,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708376095
    },
    {
        "content": "<p><code>fin_cases</code> operates by reduction instead of using eval. It does <code>cases</code> for you in a controlled way.</p>",
        "id": 422305965,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708376214
    },
    {
        "content": "<p>(Eric's idea makes me wonder if there should be an <code>eval</code> tactic that tries to simplify by evaluation and then post-hoc come up with a proof? Not sure how that would work though, since if you can only find the value by evaluation, without extra cleverness, like what <code>norm_num</code> provides, I'm not sure what you could do reduction couldn't, except maybe create nicer normal forms, like what Eric generated.)</p>",
        "id": 422306299,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708376381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/How.20to.20simplify.20this.20proof.20without.20using.20a.20have.20statement.3F/near/422306299\">said</a>:</p>\n<blockquote>\n<p>(Eric's idea makes me wonder if there should be an <code>eval</code> tactic that tries to simplify by evaluation and then post-hoc come up with a proof? Not sure how that would work though, since if you can only find the value by evaluation, without extra cleverness, like what <code>norm_num</code> provides, I'm not sure what you could do reduction couldn't, except maybe create nicer normal forms, like what Eric generated.)</p>\n</blockquote>\n<p>That's is what I was hoping for.  Something where I could prove <code>s ∈ {1,2,3} → powerset s = {∅, {1}, {2}, {3}, {1,2}, {2,3}, {1,3}, {1,2,3}}</code> using a #eval kind of tactic.</p>",
        "id": 422307307,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1708376982
    },
    {
        "content": "<p>Note that that tactics that use eval aren't actually very useful, as your example stops working as soon as you generalize away from Nat to <code>a, b, c</code></p>",
        "id": 422307410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708377027
    },
    {
        "content": "<p>I'm out of time for now, but I think the solution to my reflection issues above is to... add another layer of code generation</p>",
        "id": 422307469,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708377064
    },
    {
        "content": "<p>There could still be \"<code>norm_num</code> for collections\", among other sorts of evaluators. (I'm curious what the tactic landscape is going to look like now that we have simprocs.)</p>",
        "id": 422307584,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708377126
    },
    {
        "content": "<p>Here's a better version of <code>eval%</code>that doesn't hardcode <code>Finset (Finest Nat)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">term_elab</span> <span class=\"n\">eval_expr</span><span class=\"kd\">]</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">elabExprElab</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Term.TermElab</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"n\">eval</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">exp</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Term.elabTermAndSynthesize</span> <span class=\"n\">stx</span> <span class=\"n\">exp</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"n\">ee</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Lean.toExpr</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">e.toSyntax</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Expr</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.evalExpr</span> <span class=\"n\">Expr</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"n\">ee</span> <span class=\"o\">(</span><span class=\"n\">safety</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">unsafe</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.throwUnsupportedSyntax</span>\n</code></pre></div>",
        "id": 422356881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708411783
    },
    {
        "content": "<p>PR'd as <a href=\"https://github.com/leanprover-community/mathlib4/pull/10742\">#10742</a></p>",
        "id": 422359000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708413197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/How.20to.20simplify.20this.20proof.20without.20using.20a.20have.20statement.3F/near/422307584\">said</a>:</p>\n<blockquote>\n<p>There could still be \"<code>norm_num</code> for collections\", among other sorts of evaluators. (I'm curious what the tactic landscape is going to look like now that we have simprocs.)</p>\n</blockquote>\n<p>I think you mean computer algebra system modules to Lean.</p>",
        "id": 422521217,
        "sender_full_name": "Jz Pan",
        "timestamp": 1708473338
    }
]