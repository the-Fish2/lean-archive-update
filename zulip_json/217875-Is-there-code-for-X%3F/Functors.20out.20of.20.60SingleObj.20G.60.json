[
    {
        "content": "<p>Are there <code>SingleObj</code> analogs of <code>Discrete.functor</code> and <code>Discrete.natTrans</code>? I.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SingleObj.functor</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→*</span> <span class=\"n\">End</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">SingleObj</span> <span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">X</span>\n  <span class=\"n\">map</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n  <span class=\"n\">map_id</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MonoidHom.map_one</span><span class=\"o\">]</span>\n  <span class=\"n\">map_comp</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MonoidHom.map_mul</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SingleObj.natTrans</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SingleObj</span> <span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">SingleObj.star</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">G.obj</span> <span class=\"o\">(</span><span class=\"n\">SingleObj.star</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">F.map</span> <span class=\"n\">a</span> <span class=\"bp\">≫</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">≫</span> <span class=\"n\">G.map</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">⟶</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">u</span>\n  <span class=\"n\">naturality</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 411828859,
        "sender_full_name": "Christian Merten",
        "timestamp": 1704753646
    },
    {
        "content": "<p>It looks like we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidHom.toFunctor#doc\">docs#MonoidHom.toFunctor</a> but not this version.</p>",
        "id": 411829540,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704753987
    },
    {
        "content": "<p>Should this be in the <code>MonoidHom</code> namespace, i.e. <code>MonoidHom.functor</code> or as in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Discrete#doc\">docs#CategoryTheory.Discrete</a> <code>SingleObj.functor</code>?</p>",
        "id": 411831399,
        "sender_full_name": "Christian Merten",
        "timestamp": 1704755003
    },
    {
        "content": "<p><code>MonoidHom.functor</code> would make it possible to use dot notation, so I would go for that.</p>",
        "id": 411876974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704784095
    },
    {
        "content": "<p>The downside is that it might be easily confused with <code>MonoidHom.toFunctor</code>.</p>",
        "id": 411877071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704784170
    },
    {
        "content": "<p>Also, your <code>SingleObj.natTrans</code> doesn't really make sense in the <code>MonoidHom</code> namespace. So maybe your current names are in fact the best.</p>",
        "id": 411877272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704784272
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9586\">#9586</a></p>",
        "id": 411893016,
        "sender_full_name": "Christian Merten",
        "timestamp": 1704791900
    },
    {
        "content": "<p>It looks like this file could at some point also use a little clean up, introducing some <code>variable</code> lines.</p>",
        "id": 411910227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704797619
    },
    {
        "content": "<p>Once the definition is in place, there should just be a monoid <code>M</code>, a group <code>G</code>, and a category <code>C</code> in scope.</p>",
        "id": 411910333,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704797650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Functors.20out.20of.20.60SingleObj.20G.60/near/411910227\">said</a>:</p>\n<blockquote>\n<p>It looks like this file could at some point also use a little clean up, introducing some <code>variable</code> lines.</p>\n</blockquote>\n<p>See <a href=\"https://github.com/leanprover-community/mathlib4/pull/9696\">#9696</a></p>",
        "id": 412576955,
        "sender_full_name": "Christian Merten",
        "timestamp": 1705076468
    }
]