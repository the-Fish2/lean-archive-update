[
    {
        "content": "<p>I was looking for interactions of <code>MvPolynomial</code> and <code>TensorProduct</code> but could not find any. Did I miss something? For example, I was looking for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">MvPolynomial.baseChangeAux</span> <span class=\"o\">:</span>\n    <span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Algebra.TensorProduct.lift</span>\n    <span class=\"o\">(</span><span class=\"n\">Algebra.ofId</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">mapAlgHom</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Algebra.ofId</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">P</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Algebra.commutes</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">eval₂</span> <span class=\"o\">(</span><span class=\"n\">RingHom.comp</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">X</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">MvPolynomial.baseChangeAuxInv</span> <span class=\"o\">:</span>\n    <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">MvPolynomial.aeval</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">MvPolynomial.baseChange</span> <span class=\"o\">:</span>\n    <span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">AlgEquiv.ofAlgHom</span>\n  <span class=\"o\">(</span><span class=\"n\">baseChangeAux</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">baseChangeAuxInv</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">baseChangeAux</span><span class=\"o\">,</span> <span class=\"n\">baseChangeAuxInv</span><span class=\"o\">])</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">baseChangeAux</span><span class=\"o\">,</span> <span class=\"n\">baseChangeAuxInv</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 429939566,
        "sender_full_name": "Christian Merten",
        "timestamp": 1711570545
    },
    {
        "content": "<p>Maybe it's work in progress: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10824\">#10824</a></p>",
        "id": 429940540,
        "sender_full_name": "Jz Pan",
        "timestamp": 1711570773
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11635/files#diff-f90e54615344457929d844f0abe9739d4aec60d840ad487d6a1ce5578f66fe06R42-R44\">This</a> gives the LinearEquiv (up to defeq) but not AlgEquiv</p>",
        "id": 429951572,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1711574458
    },
    {
        "content": "<p>Thanks for the pointers!</p>",
        "id": 429959090,
        "sender_full_name": "Christian Merten",
        "timestamp": 1711578258
    }
]