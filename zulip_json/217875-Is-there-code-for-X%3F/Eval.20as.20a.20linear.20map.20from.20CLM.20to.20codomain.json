[
    {
        "content": "<p>Does the following definition exist somewhere? I would be shocked if not, but I could not find it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">evalLM</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"bp\">𝕜</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"n\">a</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 427612631,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1710817941
    },
    {
        "content": "<p>How does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.apply%27#doc\">docs#ContinuousLinearMap.apply'</a> work for you?</p>",
        "id": 427614398,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710819286
    },
    {
        "content": "<p>If the hypotheses of that are too strong, then I'm betting we don't have the version you want.</p>",
        "id": 427614534,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710819388
    },
    {
        "content": "<p>I don't want to assume that <code>E</code> is a normed space</p>",
        "id": 427614540,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1710819396
    },
    {
        "content": "<p>We also have <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/LinearMap/End.html#LinearMap.apply%E2%82%97'\">docs#LinearMap.applyₗ'</a></p>",
        "id": 427614545,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710819406
    },
    {
        "content": "<p>You could compose that with a forgetful morphism.</p>",
        "id": 427614693,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710819533
    },
    {
        "content": "<p>Yes, that sounds very reasonable. The context is that I want to prove continuity of the evaluation for the pointwise convergence topology:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">PointwiseConvergenceCLM.eval_continuous</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">Lₛ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">v</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and the proof uses that the map is linear (to reduce everything to 0 nhds). Also I want to bundle this definition (and the corresponding one for the weak dual)</p>",
        "id": 427614855,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1710819684
    },
    {
        "content": "<p>Ah crap, I think I have to define my own <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.coeLM#doc\">docs#ContinuousLinearMap.coeLM</a> variant</p>",
        "id": 427615426,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1710820151
    },
    {
        "content": "<p>Yes, that would be nice to refactor this stuff so that they hold for arbitrary topological vector spaces.</p>",
        "id": 427660061,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710843854
    }
]