[
    {
        "content": "<p>We have <code>Finset.sum</code> that allows one to write things like <code>∑ n in Finset.Icc 1 100</code>, and we have <code>tsum</code> that sums over a whole type <code>∑' (n : ℕ)</code>. Do we have tsums on sets, like <code>∑' (n : ℕ) in Set.Ici 1</code>...? Thanks!</p>",
        "id": 424348313,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1709339793
    },
    {
        "content": "<p>(I realize this can be implemented by shifting the indices; just wondering if there's a more \"natural-looking\" way to do it?)</p>",
        "id": 424348378,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1709339865
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Mathlib/Topology/Algebra/InfiniteSum/Basic.lean#L615-L639\">Here</a> and <a href=\"https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Mathlib/Topology/Algebra/InfiniteSum/Basic.lean#L777-L791\">here</a> it is spelled like <code>∑' (n : Set.Ici 1)</code></p>",
        "id": 424350798,
        "sender_full_name": "llllvvuu",
        "timestamp": 1709342097
    },
    {
        "content": "<p>This is not great though, because that means you can't always rewrite the set as it's also a type</p>",
        "id": 424354314,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709345142
    },
    {
        "content": "<p>Shouldn't we change <code>tsum</code> to be about sums restricted on a set, then have the current <code>tsum</code> become the new <code>tsum</code> on <code>univ</code>?</p>",
        "id": 424354389,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709345212
    },
    {
        "content": "<p>This is how <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum#doc\">docs#Finset.sum</a> does it and it works great</p>",
        "id": 424354402,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709345228
    },
    {
        "content": "<p>Hmm yeah I’m already hitting coercion hell… I imagine that refactoring <code>tsum</code> will also not be pleasant..?</p>",
        "id": 424361950,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1709352338
    },
    {
        "content": "<p>In the meantime, we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum_congr_set_coe#doc\">docs#tsum_congr_set_coe</a></p>",
        "id": 424367332,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709357758
    },
    {
        "content": "<p>I'm not sure refactoring it is hard. But I have no time to try doing it.</p>",
        "id": 424399335,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709374898
    },
    {
        "content": "<p>Another approach is to do the same trick we did for <code>finsum</code> to allow <code>∑' k ∈ s, f k</code></p>",
        "id": 424428891,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709399918
    },
    {
        "content": "<p>I'd be happy with any such refactor. But, e.g., using something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Set.Ici</span> <span class=\"n\">N</span><span class=\"o\">)),</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"bp\">↑↑</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>gets very painful.  Here <code>n</code> is of type <code>↑(Set.Ici N)</code>, which is the coercion from the set <code>Set.Ici N</code> to a Type. Then <code>↑n </code> coerces <code>n</code> \"back\" to <code>ℕ</code>, and finally <code>↑↑n</code> is the coercion from <code>ℕ</code> to <code>ℂ</code>. Yuck!...</p>",
        "id": 424434320,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1709404278
    },
    {
        "content": "<p>You could try to use <code>∑' (n : ℕ), Set.indicator (Set.Ici N) (fun n ↦ 1 / (n : ℂ) ^ s)</code> instead. My experience is that this is less painful.</p>",
        "id": 424435400,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709405059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/how.20to.20spell.20tsum.20in.20a.20set.3F/near/424428891\">said</a>:</p>\n<blockquote>\n<p>Another approach is to do the same trick we did for <code>finsum</code> to allow <code>∑' k ∈ s, f k</code></p>\n</blockquote>\n<p>What's that trick?</p>",
        "id": 424436907,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709406198
    },
    {
        "content": "<p>If <code>tsum</code> could be generalized to support indexing types in <code>Prop</code> so that <code>∑' n : ℕ, ∑' (hn : n ∈ Set.Icc 1 100), 1 / (n : ℂ) ^ s</code> typechecked, that would be another way of spelling this</p>",
        "id": 424444296,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1709412050
    },
    {
        "content": "<p>I guess that's the trick Yury is talking about.</p>",
        "id": 424444441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709412191
    },
    {
        "content": "<p>Presumably that solution is immune to the issues that appear with ⨆ on conditionally complete lattices? Here that would manifest as a sum that converges as a Subtype but not as nested sums</p>",
        "id": 424444460,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709412218
    },
    {
        "content": "<p>Timo, this is not a good solution because we want Lean to know for sure that the body of the sum doesn't depend on <code>hn</code> (that's what's needed to get <code>rw</code> to play ball). Your solution doesn't ensure that (things can get weird after a few rewrites).</p>",
        "id": 424447026,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709414798
    },
    {
        "content": "<p>Being able to depend on hn sounds like a feature to me</p>",
        "id": 424447749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709415453
    },
    {
        "content": "<p>No, it's really not. This is how you get into rewriting hell. If you want to depend on <code>hn</code> you do the same thing as we do for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum#doc\">docs#Finset.sum</a>, namely you write <code>∑' i : s</code> (or maybe <code>∑' i (hi : i ∈ s)</code>, I haven't yet convinced myself it's equivalent).</p>",
        "id": 424450505,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709418210
    },
    {
        "content": "<p>I was about to advocate for the trick (I’ve been using it with <code>finsum</code> and I like it a lot), but the problem is that doesn’t work great with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasSum#doc\">docs#HasSum</a>, which is generally more useful than <code>tsum</code>. So I’m not sure it’s a good idea to</p>",
        "id": 424453583,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1709421314
    },
    {
        "content": "<p>The <code>Set.indicator</code> version works well with <code>HasSum</code> and <code>Summable</code>, I think.</p>",
        "id": 424484444,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709451950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/how.20to.20spell.20tsum.20in.20a.20set.3F/near/424453583\">said</a>:</p>\n<blockquote>\n<p>I was about to advocate for the trick (I’ve been using it with <code>finsum</code> and I like it a lot), but the problem is that doesn’t work great with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasSum#doc\">docs#HasSum</a>, which is generally more useful than <code>tsum</code>. So I’m not sure it’s a good idea to</p>\n</blockquote>\n<p>I guess you could have <code>HasSum f n a</code> where <code>n</code> is the number of arguments to sum over</p>",
        "id": 424486095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709453289
    },
    {
        "content": "<p>Note that <code>∑' (h : p), f h</code>, where <code>p : Prop</code> is equal to (more precisely, will be equal to if we define it) <code>if h : p then f h else 0</code>.</p>",
        "id": 424565940,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709519372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/how.20to.20spell.20tsum.20in.20a.20set.3F/near/424484444\">said</a>:</p>\n<blockquote>\n<p>The <code>Set.indicator</code> version works well with <code>HasSum</code> and <code>Summable</code>, I think.</p>\n</blockquote>\n<p>Then, a mere notation for that version could probably be useful.</p>",
        "id": 424603074,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709541738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/how.20to.20spell.20tsum.20in.20a.20set.3F/near/424565940\">said</a>:</p>\n<blockquote>\n<p>Note that <code>∑' (h : p), f h</code>, where <code>p : Prop</code> is equal to (more precisely, will be equal to if we define it) <code>if h : p then f h else 0</code>.</p>\n</blockquote>\n<p>Yes, but while this is quite natural in a <code>tsum</code> expression, it isn't in a <code>HasSum</code> statement.</p>",
        "id": 424617625,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1709546725
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib4/pull/11189\">#11189</a> for an example using the <code>Set.indicator s f</code> spelling.</p>",
        "id": 425377581,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709839045
    }
]