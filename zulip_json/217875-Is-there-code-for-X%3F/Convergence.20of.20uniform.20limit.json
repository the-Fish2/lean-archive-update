[
    {
        "content": "<p>Is this somewhere in Mathlib (probably in much higher generality)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">TendstoUniformly</span> <span class=\"n\">F</span> <span class=\"n\">f</span> <span class=\"n\">atTop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It tastes a bit like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TendstoUniformly.continuous#doc\">docs#TendstoUniformly.continuous</a> but I couldn't find it.</p>",
        "id": 431988625,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712587682
    },
    {
        "content": "<p>The closest I can find is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TendstoUniformlyOnFilter.tendsto_at#doc\">docs#TendstoUniformlyOnFilter.tendsto_at</a></p>",
        "id": 431996866,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1712589185
    },
    {
        "content": "<p>Here is what I ended up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Uniformity</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">UniformSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NeBot</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">TendstoUniformlyOnFilter</span> <span class=\"n\">F</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">L</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">ℓ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"c1\">-- Rewrite the convergence in terms of uniformities</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Uniform.tendsto_nhds_left</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n\n  <span class=\"c1\">-- Cut the uniformity in three parts</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">hts</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">comp3_mem_uniformity</span> <span class=\"n\">hs</span>\n\n  <span class=\"c1\">-- First part : make `L i` `t`-close to `ℓ`</span>\n  <span class=\"k\">have</span> <span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Uniform.tendsto_nhds_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h3</span> <span class=\"n\">ht</span>\n\n  <span class=\"c1\">-- Second part : make `F i` `t`-close to `L i`</span>\n  <span class=\"k\">have</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">h2</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Uniform.tendsto_nhds_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h2</span> <span class=\"n\">ht</span>\n\n  <span class=\"c1\">-- Third part : make `F i x` close to `f x`</span>\n  <span class=\"k\">have</span> <span class=\"n\">l3</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">r1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"n\">r2</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">eventually_prod_iff.mp</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">)</span>\n    <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">r1</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">r1</span>\n    <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">r2</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">r2</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"n\">r1</span> <span class=\"n\">r2</span>\n\n  <span class=\"c1\">-- Combine the three parts</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">l4</span><span class=\"o\">,</span> <span class=\"n\">l5</span><span class=\"o\">,</span> <span class=\"n\">l6</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">l1.and</span> <span class=\"o\">(</span><span class=\"n\">l2.and</span> <span class=\"n\">l3</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">exists</span>\n  <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">l5</span><span class=\"o\">,</span> <span class=\"n\">l6</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">l5</span> <span class=\"n\">l6</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hts</span> <span class=\"o\">⟨</span><span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">l6</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">l5</span><span class=\"o\">,</span> <span class=\"n\">l4</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>It can probably be golfed down to a one-liner, but it was fun to do :-)</p>",
        "id": 432202911,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712660679
    },
    {
        "content": "<p>Any hint about making this nicer?</p>",
        "id": 432204424,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712661090
    }
]