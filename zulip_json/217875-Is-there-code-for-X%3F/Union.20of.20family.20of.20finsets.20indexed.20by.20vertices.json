[
    {
        "content": "<p>Is there code for the indexed union of a family of finsets (instead of sets), which yields a finset?</p>\n<p>I'm trying to prove that a regular graph of degree <code>r</code> and girth 5, will have at least <code>1 + r^2</code>.<br>\nThe proof is straightforward: take  a vertex <code>a</code>, it has <code>r</code> vertices in its neighborhood, each of which have <code>r - 1</code> other vertices in their neighborhood, all of which are distinct (otherwise we would have a triangle, contradicting girth = 5), so in total we counted <code>1 + r + r * (r - 1) = 1 + r^2</code> distinct vertices.</p>\n<p>But when I tried to implement this proof in lean, the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Girth</span>\n<span class=\"kn\">open</span> <span class=\"n\">SimpleGraph</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">G.Adj</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">G.IsRegularOfDegree</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">G.girth</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_vertices_ge_degree_squared_plus_one</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hna</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">G.IsAcyclic</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">girth_eq_top</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">]</span>\n    <span class=\"n\">nofun</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">exists_girth_eq_length</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hna</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hna</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">G.neighborFinset</span> <span class=\"n\">a</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">G.neighborFinset</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">G.neighborFinset</span> <span class=\"n\">v</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Gives this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">neighborFinset</span> <span class=\"n\">G</span> <span class=\"n\">a</span> <span class=\"bp\">∪</span> <span class=\"bp\">⋃</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">m.90012</span> <span class=\"n\">v</span>\n<span class=\"n\">argument</span>\n  <span class=\"bp\">⋃</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">m.90012</span> <span class=\"n\">v</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Set</span> <span class=\"bp\">?</span><span class=\"n\">m.89582</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Finset</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n</code></pre></div>\n<p>Is there a way to convert this set into a finset? It is a finite union of finite sets afterall.</p>",
        "id": 429271760,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1711332283
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.biUnion#doc\">docs#Finset.biUnion</a> should work</p>",
        "id": 429272937,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711332970
    },
    {
        "content": "<p><code>Finset.biUnion (G.neighborFinset a) fun v =&gt; G.neighborFinset v</code></p>",
        "id": 429273478,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711333355
    },
    {
        "content": "<p>That worked, thank you! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 429273527,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1711333404
    },
    {
        "content": "<p>no problem!</p>",
        "id": 429273638,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711333478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"580947\">Rida Hamadani</span> has marked this topic as resolved.</p>",
        "id": 429273647,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711333489
    },
    {
        "content": "<p>Please use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FInset.sup#doc\">docs#FInset.sup</a> rather! <code>Finset.biUnion</code> will be deleted at some point in the future.</p>",
        "id": 429295350,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711347129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Union.20of.20family.20of.20finsets.20indexed.20by.20vertices/near/429295350\">said</a>:</p>\n<blockquote>\n<p>Please use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FInset.sup#doc\">docs#FInset.sup</a> rather!</p>\n</blockquote>\n<p>Doesn't this mean \"the maximum of the finset\", which is different from its union?</p>",
        "id": 429340965,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1711361343
    },
    {
        "content": "<p>If you have <code>S : Finset (Finset α)</code>, then <code>S.sup id</code> is the supremum, aka union, of all <code>s ∈ S</code>.</p>",
        "id": 429342307,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711361701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"580947\">Rida Hamadani</span> has marked this topic as unresolved.</p>",
        "id": 429352387,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711364125
    },
    {
        "content": "<p>I'm trying to use <a href=\"https://leanprover-community.github.io/mathlib4_docs\">#docs</a>.Finset.sup, but it seems that I will need to:</p>\n<ul>\n<li>Define the set containing the <code>G.neighborFinset v</code> for each v in <code>G.neighborFinset a</code> as a Finset (recursively?) using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.cons#doc\">docs#Finset.cons</a>, removing duplicates if necessary.</li>\n<li>Find a way to talk about the cardinality of the <code>Finset.sup</code>. Skimming through the docs, I couldn't find an easy way to do so, ideally, it should be just the sum of the card of the Finsets, given that all these Finsets are disjoined.</li>\n<li>If there is a way to do that, I'll need to prove that these sets are disjoined.</li>\n</ul>\n<p>Is this correct so far?  Can you guide me to where I can do these steps (or any better procedures) in the docs?</p>",
        "id": 429352415,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1711364135
    },
    {
        "content": "<ul>\n<li>No, it's already defined for you. I think the finset you want is <code>(G.neighborFinset a).sup G.neighborFinset</code></li>\n<li>Annoyingly, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.card_sup#doc\">docs#Finset.card_sup</a> doesn't exist, so you will have to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sup_eq_biUnion#doc\">docs#Finset.sup_eq_biUnion</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.card_biUnion#doc\">docs#Finset.card_biUnion</a></li>\n<li>That will be fiddly because you need to use your girth hypothesis</li>\n</ul>",
        "id": 429353283,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711364335
    },
    {
        "content": "<p>Since we are going to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sup_eq_biUnion#doc\">docs#Finset.sup_eq_biUnion</a>, this makes me wonder, is it okay to just define the finset to be like Matt suggested:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Finset.sup</span> <span class=\"o\">(</span><span class=\"n\">G.neighborFinset</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">G.neighborFinset</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>I couldn't get <code>(G.neighborFinset a).sup G.neighborFinset</code> to compile (tried many variations), and Matt's definition seems convenient for when I'll need to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.card_biUnion#doc\">docs#Finset.card_biUnion</a>.<br>\nAlso, since <code>Finset.biUnion</code> will get deleted at some point, does this mean that <code>Finset.card_sup</code> is a TODO?</p>",
        "id": 429357730,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1711365543
    },
    {
        "content": "<p>Sorry, I don't understand your message. What is Matt's suggestion?</p>",
        "id": 429358756,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711365801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Union.20of.20family.20of.20finsets.20indexed.20by.20vertices/near/429273478\">said</a>:</p>\n<blockquote>\n<p><code>Finset.biUnion (G.neighborFinset a) fun v =&gt; G.neighborFinset v</code></p>\n</blockquote>\n<p>This, but replacing <code>Finset.biUnion</code> by <code>Finset.sup</code>.</p>",
        "id": 429359019,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1711365857
    },
    {
        "content": "<p>Can you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? <code>Finset.sup</code> and <code>Finset.biUnion</code> really are the same function, so it's strange that you can use one but not the other</p>",
        "id": 429359206,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711365917
    },
    {
        "content": "<p>Sorry I think I miscommunicated, what I meant is that this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Finset.sup</span> <span class=\"o\">(</span><span class=\"n\">G.neighborFinset</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">G.neighborFinset</span> <span class=\"n\">v</span>\n</code></pre></div>\n<p>worked, but I couldn't get this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">G.neighborFinset</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"n\">G.neighborFinset</span>\n</code></pre></div>\n<p>to work.<br>\nHere is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of the version that is not working (actually, is it an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> if it is not working?):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Girth</span>\n<span class=\"kn\">open</span> <span class=\"n\">SimpleGraph</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">G.Adj</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">G.IsRegularOfDegree</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">G.girth</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_vertices_ge_degree_squared_plus_one</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hna</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">G.IsAcyclic</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">girth_eq_top</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">]</span>\n    <span class=\"n\">nofun</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">exists_girth_eq_length</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hna</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hna</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Finset.sup</span> <span class=\"o\">(</span><span class=\"n\">G.neighborFinset</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"n\">G.neighborFinset</span> <span class=\"n\">Id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Meanwhile, this version is working, but it doesn't use <code>S.sup id</code>, so I don't really understand how it is considered the \"union\" and not the \"supremum\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Girth</span>\n<span class=\"kn\">open</span> <span class=\"n\">SimpleGraph</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">G.Adj</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">G.IsRegularOfDegree</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">G.girth</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_vertices_ge_degree_squared_plus_one</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hna</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">G.IsAcyclic</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">girth_eq_top</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">]</span>\n    <span class=\"n\">nofun</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">exists_girth_eq_length</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hna</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hna</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Finset.sup</span> <span class=\"o\">(</span><span class=\"n\">G.neighborFinset</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">G.neighborFinset</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 429361135,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1711366337
    },
    {
        "content": "<p>Ah yes of course. That's because there is an extra argument to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph.neighborFinset#doc\">docs#SimpleGraph.neighborFinset</a> after the explicit <code>(v : V)</code></p>",
        "id": 429361337,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711366401
    }
]