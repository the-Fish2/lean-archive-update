[
    {
        "content": "<p>I need to use the maximal separable subextension in the work of separable closure. Thus I need to prove that the sum, difference and product of two separable elements is also separable. This is not in mathlib4 yet. I check the standard textbook and it looks like that the separability degree is needed.</p>\n<ul>\n<li>If <code>L/K</code> is finite algebraic extension of fields, define the separability degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>K</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\"> [L:K]_s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to be the number of embeddings of <code>L</code> to a fixed algebraic closure <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>K</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\"> \\overline{K} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span> of <code>K</code> which is compatible with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>→</mo><mi>L</mi></mrow><annotation encoding=\"application/x-tex\"> K\\to L </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>→</mo><mover accent=\"true\"><mi>K</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\"> K\\to\\overline{K} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span>.</li>\n</ul>",
        "id": 392670620,
        "sender_full_name": "Jz Pan",
        "timestamp": 1695462102
    },
    {
        "content": "<p>It has the following properties:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>K</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub><mo>≤</mo><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>K</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [L:K]_s\\leq [L:K] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">]</span></span></span></span>.</li>\n<li>multiplicative: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>M</mi><mo>:</mo><mi>K</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub><mo>=</mo><mo stretchy=\"false\">[</mo><mi>M</mi><mo>:</mo><mi>L</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>K</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\"> [M:K]_s=[M:L]_s[L:K]_s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</li>\n<li>An element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo>∈</mo><mi>L</mi></mrow><annotation encoding=\"application/x-tex\"> \\alpha\\in L </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> is separable over <code>K</code> if and only if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>K</mi><mo stretchy=\"false\">(</mo><mi>α</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mi>K</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub><mo>=</mo><mo stretchy=\"false\">[</mo><mi>K</mi><mo stretchy=\"false\">(</mo><mi>α</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mi>K</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [K(\\alpha):K]_s=[K(\\alpha):K] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">]</span></span></span></span>.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>K</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub><mo>=</mo><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>K</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [L:K]_s=[L:K] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">]</span></span></span></span> if and only if every element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo>∈</mo><mi>L</mi></mrow><annotation encoding=\"application/x-tex\"> \\alpha\\in L </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> is separable over <code>K</code>, i.e. <code>L/K</code> is a separable field extension.</li>\n<li>As a corollary, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>α</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>α</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\"> \\alpha_1,\\cdots,\\alpha_n </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are separable elements over <code>K</code>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">(</mo><msub><mi>α</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>α</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\"> K(\\alpha_1,\\cdots,\\alpha_n)/K </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is a separable field extension.</li>\n</ul>\n<p>Are these in mathlib4 yet?</p>",
        "id": 392671022,
        "sender_full_name": "Jz Pan",
        "timestamp": 1695462216
    },
    {
        "content": "<p>Besides, if <code>L/K</code> is an algebraic extension of characteristic <code>p</code> fields, <code>x</code> is an element of <code>L</code>, then <code>x</code> is separable over <code>K</code> if and only if <code>K(x)=K(x^p)</code>. This is relatively easy to proof. Is it in mathlib4 yet?</p>",
        "id": 392671343,
        "sender_full_name": "Jz Pan",
        "timestamp": 1695462328
    },
    {
        "content": "<p>Is this related to the separable degree of a polynomial <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.HasSeparableContraction.degree#doc\">docs#Polynomial.HasSeparableContraction.degree</a> ?</p>",
        "id": 392672480,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695462771
    },
    {
        "content": "<p>Really we want the separable degree of a finite extension of fields. If the extension is simple <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">(</mo><mi>α</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K(\\alpha)/K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> then I suspect that the separable degree of the extension is just the degree of the separable contraction of the min poly of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>, but there are non-simple extensions all over the place when you drop separability assumptions.</p>",
        "id": 392680659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695466783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/392680659\">said</a>:</p>\n<blockquote>\n<p>If the extension is simple <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">(</mo><mi>α</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K(\\alpha)/K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> then I suspect that the separable degree of the extension is just the degree of the separable contraction of the min poly of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span></p>\n</blockquote>\n<p>Yes I think that's true. The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>K</mi><mo stretchy=\"false\">(</mo><mi>α</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mi>K</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\"> [K(\\alpha):K]_s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> should be just the number of <em>distinct</em> roots of the minimal polynomial of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\"> \\alpha </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> over <code>K</code>. Is it equal to the degree of the separable contraction?</p>\n<blockquote>\n<p>but there are non-simple extensions all over the place when you drop separability assumptions.</p>\n</blockquote>\n<p>We may use the multiplicity. The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>K</mi><mo stretchy=\"false\">(</mo><msub><mi>α</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>α</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>:</mo><mi>K</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\"> [K(\\alpha_1,\\cdots,\\alpha_n):K]_s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the product of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>K</mi><mo stretchy=\"false\">(</mo><msub><mi>α</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>α</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>:</mo><mi>K</mi><mo stretchy=\"false\">(</mo><msub><mi>α</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>α</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\"> [K(\\alpha_1,\\cdots,\\alpha_i):K(\\alpha_1,\\cdots,\\alpha_{i-1})]_s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> over all <code>1&lt;=i&lt;=n</code>.</p>",
        "id": 392707757,
        "sender_full_name": "Jz Pan",
        "timestamp": 1695481685
    },
    {
        "content": "<p>I think you have a good plan! The items you listed are not in mathlib4 as far as I know, but should be relatively straightforward from what's already there. For example, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.adjoin.finrank#doc\">docs#IntermediateField.adjoin.finrank</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.card_algHom_adjoin_integral#doc\">docs#IntermediateField.card_algHom_adjoin_integral</a> give you one direction of the third item.</p>\n<p>The trickiest one is probably multiplicativity, where you need to switch from the algebraic closure of K to that of L, so it would be easier if you prove any IsAlgClosed extension of the base field gives you the same separable degree.</p>",
        "id": 392725759,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695491588
    },
    {
        "content": "<p>I found <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=cardinal_mk_algHom#doc\">docs#cardinal_mk_algHom</a> which gives the first item easily (the RHS is obviously equal to <code>finrank K V</code>); otherwise it would take some effort (induction) to prove.</p>\n<p>(I found these by looking at files that import Mathlib.FieldTheory.Separable)</p>",
        "id": 392727134,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695492831
    },
    {
        "content": "<p>Such general result <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=linearIndependent_toLinearMap#doc\">docs#linearIndependent_toLinearMap</a> should probably be moved much earlier ...<br>\nInteresting that what mathlib attributes to Dedekind (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=linearIndependent_monoidHom#doc\">docs#linearIndependent_monoidHom</a>) is also <a href=\"https://math.stackexchange.com/questions/3886660/intuition-of-artins-linear-independence-theorem\">attributed to Artin</a>.</p>",
        "id": 392727634,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695493318
    },
    {
        "content": "<p>Let me post the first WIP draft here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.AlgebraicClosure</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">v'</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Field</span>\n\n<span class=\"sd\">/-- If `E / F` is an algebraic extension, then the separable degree of `E / F`</span>\n<span class=\"sd\">is the number of `F`-algebra homomorphisms from `E` to the algebraic closure of `E`.</span>\n<span class=\"sd\">Note that if `E / F` is not algebraic, then this definition makes no mathematical sense,</span>\n<span class=\"sd\">for example `sepDegree ℚ ℚ(X)` is countably infinite,</span>\n<span class=\"sd\">whereas `sepDegree ℚ ℝ` is one (!).</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">sepDegree</span> <span class=\"o\">:=</span> <span class=\"n\">Cardinal.mk</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finSepDegree</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Cardinal.toNat</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Adhoc</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">i.comp</span> <span class=\"o\">(</span><span class=\"n\">AlgEquiv.ofInjectiveField</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.toAlgHom</span> <span class=\"bp\">=</span> <span class=\"n\">i.fieldRange.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test3</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsAlgClosed</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsAlgClosed</span> <span class=\"n\">i.fieldRange</span> <span class=\"n\">where</span>\n  <span class=\"n\">splits</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test4</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsAlgClosed</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">i.fieldRange</span> <span class=\"bp\">≤</span> <span class=\"n\">E'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test5</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAlgClosed</span> <span class=\"n\">E'</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">E'</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">i.fieldRange</span> <span class=\"bp\">≤</span> <span class=\"n\">i'.fieldRange</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">IsAlgClosed</span> <span class=\"n\">i'.fieldRange</span> <span class=\"o\">:=</span> <span class=\"n\">test3</span> <span class=\"n\">i'</span>\n  <span class=\"n\">exact</span> <span class=\"n\">test4</span> <span class=\"n\">halg</span> <span class=\"n\">i</span> <span class=\"n\">i'.fieldRange</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Adhoc</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sepDegree_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nonempty.intro</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IsScalarTower.toAlgHom</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sepDegree_nezero</span> <span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">NeZero.mk</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">sepDegree_nonempty</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sepDegree</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Cardinal.mk_ne_zero</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finSepDegree_nezero_of_finiteDimensional</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">NeZero.mk</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">minpoly.AlgHom.fintype</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">sepDegree_nonempty</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finSepDegree</span><span class=\"o\">,</span> <span class=\"n\">sepDegree</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.mk_toNat_eq_card</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Fintype.card_ne_zero</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sepDegree_equiv_of_equiv</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v'</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E'</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sepDegree_eq_of_equiv</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v'</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">Equiv.ulift.</span><span class=\"o\">{</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n    <span class=\"o\">(</span><span class=\"n\">sepDegree_equiv_of_equiv</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">E'</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n      <span class=\"o\">(</span><span class=\"n\">Equiv.ulift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">E'</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E'</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.mk_uLift</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">this.cardinal_eq</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_eq_of_equiv</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v'</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.toNat_lift</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">congr_arg</span> <span class=\"n\">Cardinal.toNat</span>\n    <span class=\"o\">(</span><span class=\"n\">sepDegree_eq_of_equiv</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">E'</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sepDegree_equiv_of_isAlgClosed</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAlgClosed</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hac</span> <span class=\"o\">:=</span> <span class=\"n\">IsAlgClosure.ofAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">halg</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">IsAlgClosed.lift</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">hac.algebraic</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">i.comp</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">let</span> <span class=\"n\">i'</span> <span class=\"o\">:=</span> <span class=\"n\">AlgEquiv.ofInjectiveField</span> <span class=\"n\">i</span>\n  <span class=\"k\">let</span> <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"n\">i.comp</span> <span class=\"n\">f</span>\n  <span class=\"k\">let</span> <span class=\"n\">invFun</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"n\">i'.symm.toAlgHom.comp</span> <span class=\"o\">(</span><span class=\"n\">IntermediateField.inclusion</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"n\">test5</span> <span class=\"n\">halg</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">comp</span> <span class=\"n\">f.rangeRestrict</span>\n  <span class=\"k\">have</span> <span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"n\">Function.RightInverse</span> <span class=\"n\">invFun</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">AlgHom.comp_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">AlgHom.comp_assoc</span><span class=\"o\">,</span> <span class=\"n\">test1</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"k\">have</span> <span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"n\">Function.LeftInverse</span> <span class=\"n\">invFun</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h2</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">right_inv</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">i.comp</span> <span class=\"n\">f</span>\n  <span class=\"n\">exact</span> <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">toFun</span><span class=\"o\">,</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">invFun</span><span class=\"o\">,</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">left_inv</span><span class=\"o\">,</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">right_inv</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sepDegree_eq_of_isAlgClosed</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAlgClosed</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cardinal.mk</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.mk_uLift</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">((</span><span class=\"n\">Equiv.ulift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n    <span class=\"o\">(</span><span class=\"n\">sepDegree_equiv_of_isAlgClosed</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">halg</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">cardinal_eq</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_eq_of_isAlgClosed</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAlgClosed</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">Cardinal.toNat</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.toNat_lift</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">congr_arg</span> <span class=\"n\">Cardinal.toNat</span>\n    <span class=\"o\">(</span><span class=\"n\">sepDegree_eq_of_isAlgClosed</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">halg</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sepDegree_self</span> <span class=\"o\">:</span> <span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">le_antisymm</span>\n    <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"k\">from</span> <span class=\"n\">Cardinal.le_one_iff_subsingleton.2</span> <span class=\"n\">AlgHom.subsingleton</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">Cardinal.one_le_iff_ne_zero.2</span> <span class=\"o\">(</span><span class=\"n\">sepDegree_nezero</span> <span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_self</span> <span class=\"o\">:</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finSepDegree</span><span class=\"o\">,</span> <span class=\"n\">sepDegree_self</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.one_toNat</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sepDegree_bot</span> <span class=\"o\">:</span> <span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">sepDegree_eq_of_equiv</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">IntermediateField.botEquiv</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">sepDegree_self</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.lift_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Cardinal.lift_one.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"n\">Cardinal.lift_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_bot</span> <span class=\"o\">:</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finSepDegree</span><span class=\"o\">,</span> <span class=\"n\">sepDegree_bot</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.one_toNat</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sepDegree_top</span> <span class=\"o\">:</span> <span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.lift_id</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">sepDegree_eq_of_equiv</span> <span class=\"n\">F</span> <span class=\"n\">_</span> <span class=\"n\">E</span> <span class=\"n\">IntermediateField.topEquiv</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_top</span> <span class=\"o\">:</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finSepDegree</span><span class=\"o\">,</span> <span class=\"n\">sepDegree_top</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sepDegree_bot'</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sepDegree_eq_of_equiv</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">((</span><span class=\"n\">IntermediateField.botEquiv</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrictScalars</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_bot'</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.toNat_lift</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">congr_arg</span> <span class=\"n\">Cardinal.toNat</span> <span class=\"o\">(</span><span class=\"n\">sepDegree_bot'</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sepDegree_top'</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.lift_id</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">sepDegree_eq_of_equiv</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"o\">((</span><span class=\"n\">IntermediateField.topEquiv</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">restrictScalars</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_top'</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finSepDegree</span><span class=\"o\">,</span> <span class=\"n\">sepDegree_top'</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- theorem sepDegree_le_rank : sepDegree F E ≤ Module.rank F E := by sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lift_sepDegree_mul_lift_sepDegree_of_isAgebraic_of_adjoin_simple</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">halga</span> <span class=\"o\">:</span> <span class=\"n\">IsAlgebraic</span> <span class=\"n\">E</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">E</span> <span class=\"n\">E</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- If `E / F` is an algebraic extension, `K / E` is a finite extension, then</span>\n<span class=\"sd\">$[K:F]_s = [E:F]_s [K:E]_s$. See also `lift_rank_mul_lift_rank`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lift_sepDegree_mul_lift_sepDegree_of_isAgebraic_of_finiteDimensional</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">E</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">L</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">E</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sepDegree_bot'</span><span class=\"o\">,</span> <span class=\"n\">sepDegree_self</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.lift_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">⟮</span><span class=\"n\">x</span><span class=\"bp\">⟯.</span><span class=\"n\">restrictScalars</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">L</span> <span class=\"n\">α</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">IsScalarTower.of_algebraMap_eq</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">halgL</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">lift_sepDegree_mul_lift_sepDegree_of_isAgebraic_of_adjoin_simple</span>\n      <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"n\">K</span> <span class=\"n\">halgL</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">isAlgebraic_of_finite</span> <span class=\"n\">L</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"c1\">-- sepDegree ... restrictScalars</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sepDegree_top'</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">induction_on_adjoin</span> <span class=\"n\">P</span> <span class=\"n\">base</span> <span class=\"n\">ih</span> <span class=\"bp\">⊤</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_le_finrank_of_adjoin_simple</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_le_finrank</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">K</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">K</span>\n  <span class=\"k\">have</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finSepDegree_bot</span><span class=\"o\">,</span> <span class=\"n\">IntermediateField.finrank_bot</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"bp\">⟮</span><span class=\"n\">x</span><span class=\"bp\">⟯.</span><span class=\"n\">restrictScalars</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">induction_on_adjoin</span> <span class=\"n\">P</span> <span class=\"n\">base</span> <span class=\"n\">ih</span> <span class=\"bp\">⊤</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">finrank_top</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">finSepDegree_top</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Field</span>\n</code></pre></div>",
        "id": 399280757,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698664755
    },
    {
        "content": "<p>The first goal is to prove:</p>\n<ul>\n<li>Multiplicativity: If <code>E / F</code> is an algebraic extension, <code>K / E</code> is a finite extension, then<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>K</mi><mo>:</mo><mi>F</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub><mo>=</mo><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>F</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub><mo stretchy=\"false\">[</mo><mi>K</mi><mo>:</mo><mi>E</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\"> [K:F]_s = [E:F]_s [K:E]_s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. This should be proved by induction on <code>K / E</code>. When <code>K = E(x)</code>, we should have a non-canonical bijection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><mi>F</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo separator=\"true\">,</mo><mover accent=\"true\"><mi>E</mi><mo stretchy=\"true\">‾</mo></mover><mo stretchy=\"false\">)</mo><mo>×</mo><msub><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><mi>E</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mover accent=\"true\"><mi>E</mi><mo stretchy=\"true\">‾</mo></mover><mo stretchy=\"false\">)</mo><mover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mo lspace=\"0em\" rspace=\"0em\">∼</mo></mpadded></mover><msub><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><mi>F</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mover accent=\"true\"><mi>E</mi><mo stretchy=\"true\">‾</mo></mover><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> \\operatorname{Hom}_{F}(E,\\overline E)\\times\\operatorname{Hom}_E(E(x),\\overline E)\\xrightarrow\\sim\\operatorname{Hom}_F(E(x),\\overline E) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1333em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1333em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8788em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mrel mtight\">∼</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.011em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1333em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>",
        "id": 399281408,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698665021
    },
    {
        "content": "<p>Note that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><mi>E</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mover accent=\"true\"><mi>E</mi><mo stretchy=\"true\">‾</mo></mover><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> \\operatorname{Hom}_E(E(x),\\overline E) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1333em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is 1-to-1 correspondence to the distinct roots in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>E</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\"> \\overline{E} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span> of the minimal polynomial <code>f</code> of <code>x</code> over <code>E</code>, and the above bijection maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>ϕ</mi><mo separator=\"true\">,</mo><mi>β</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> (\\phi,\\beta) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ϕ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mclose\">)</span></span></span></span> to a ring homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mover accent=\"true\"><mi>E</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\"> E(x)\\to\\overline E </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span> whose restriction on <code>E</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\"> \\phi </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span></span></span></span>, and maps <code>x</code> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\"> \\beta </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span>.</p>",
        "id": 399282115,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698665262
    },
    {
        "content": "<ul>\n<li>Then we can prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>F</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub><mo>≤</mo><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [E:F]_s\\leq [E:F] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span></span></span></span> for finite extension <code>E / F</code> by induction, using the simple extension case and the above multiplicativity.</li>\n</ul>",
        "id": 399282577,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698665441
    },
    {
        "content": "<p>Should these be put inside <code>Mathlib.FieldTheory.SeparableDegree</code>, or in a new file?</p>",
        "id": 399282945,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698665608
    },
    {
        "content": "<p>You mean <code>Mathlib.FieldTheory.Separable</code>? I think that file is long enough to warrant a new file.</p>",
        "id": 399329979,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698680911
    },
    {
        "content": "<blockquote>\n<p>we should have a non-canonical bijection </p>\n</blockquote>\n<p>Rather than that, it may work nicer to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.sigmaFiberEquiv#doc\">docs#Equiv.sigmaFiberEquiv</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Cardinal.mk_sigma#doc\">docs#Cardinal.mk_sigma</a>.</p>",
        "id": 399337056,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698683141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/399329979\">said</a>:</p>\n<blockquote>\n<p>You mean <code>Mathlib.FieldTheory.Separable</code>? I think that file is long enough to warrant a new file.</p>\n</blockquote>\n<p>No, I mean this <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/SeparableDegree.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/SeparableDegree.html</a></p>",
        "id": 399370624,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698696856
    },
    {
        "content": "<p>Oh sorry I forgot about that file ... It's short enough and you may want to relate your new results with polynomials' separable degree, so it would be reasonable to put them in the same file. If you start a new file, I'm not sure what it should be named: maybe move the polynomial file to Mathlib/RingTheory/Polynomial/SeparableDegree so you can name your new file Mathlib/FieldTheory/SeparableDegree.</p>",
        "id": 399409703,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698718380
    },
    {
        "content": "<p>I'm going to advocate for starting a new file, because the existing file imports much less. My rule of thumb for splitting a file is either when it would grow past 500 - 1000 lines, or when the imports would change.</p>",
        "id": 399439355,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698735480
    },
    {
        "content": "<p>(Does <a href=\"https://tqft.net/mathlib4files/Mathlib\">file#Mathlib</a>.FieldTheory.SeparableDegree work?)</p>",
        "id": 399439431,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698735519
    },
    {
        "content": "<p>Yes, please don't add imports to existing files, essentially ever. (And reviewers, please be <em>very</em> skeptical of this, maybe to the point we want a robot to complain about it.) It is a major cause of rot.</p>",
        "id": 399443853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698737834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/399439431\">said</a>:</p>\n<blockquote>\n<p>(Does <a href=\"https://tqft.net/mathlib4files/Mathlib\">file#Mathlib</a>.FieldTheory.SeparableDegree work?)</p>\n</blockquote>\n<p>I think it has to be separated by <code>/</code> not <code>.</code>: <a href=\"https://tqft.net/mathlib4files/Mathlib/FieldTheory/SeparableDegree\">file#Mathlib/FieldTheory/SeparableDegree</a></p>",
        "id": 399444532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698738186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/399443853\">said</a>:</p>\n<blockquote>\n<p>Yes, please don't add imports to existing files, essentially ever. (And reviewers, please be <em>very</em> skeptical of this, maybe to the point we want a robot to complain about it.) It is a major cause of rot.</p>\n</blockquote>\n<p>I see. Fortunately, <a href=\"https://tqft.net/mathlib4files/Mathlib/FieldTheory/SeparableDegree\">file#Mathlib/FieldTheory/SeparableDegree</a> is not imported by any other files. So I assume it's OK for this special case? Except for external projects.</p>",
        "id": 399510881,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698755285
    },
    {
        "content": "<p>I would still just create a new file: it's much better to have many small files than one huge file, and the best time to split is when writing new things.</p>",
        "id": 399511743,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698755577
    },
    {
        "content": "<p>I see. So is the current plan to</p>\n<ul>\n<li>rename current <code>Mathlib/FieldTheory/SeparableDegree</code> to <code>Mathlib/RingTheory/Polynomial/SeparableDegree</code></li>\n<li>... and create new <code>Mathlib/FieldTheory/SeparableDegree</code>?</li>\n</ul>",
        "id": 399517881,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698757753
    },
    {
        "content": "<p>Sounds good to me!</p>",
        "id": 399517921,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698757768
    },
    {
        "content": "<p>It's tempted to define the notation <code>Field.Emb E F</code> to be <code>E →ₐ[F] (AlgebraicClosure E)</code>, which is used in several textbooks. Is it a good idea?</p>",
        "id": 399937800,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698932245
    },
    {
        "content": "<p>BTW, I made a draft pull request <a href=\"https://github.com/leanprover-community/mathlib4/pull/8117\">#8117</a></p>",
        "id": 399937864,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698932267
    },
    {
        "content": "<blockquote>\n<p>... just the number of <em>distinct</em> roots of the minimal polynomial of <code>α</code> over <code>K</code></p>\n</blockquote>\n<p>... and that's the definition of the separable degree of a polynomial in Stacks <a href=\"https://stacks.math.columbia.edu/tag/09H5\">https://stacks.math.columbia.edu/tag/09H5</a> . It should be equal to the degree of the separable contraction.</p>\n<p>However, currently we lack the definition of the separable degree of a general polynomial; the definition of separable contraction requires the character to be known in advance. So maybe we should add that definition?</p>",
        "id": 400006498,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698952833
    },
    {
        "content": "<p>Certainly when I've lectured this material, your <code>Field.Emb</code> has played a prominent role in discussions of separability.</p>",
        "id": 400029151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698964760
    },
    {
        "content": "<p>Added <code>Emb F E</code> as well as some basic properties to <a href=\"https://github.com/leanprover-community/mathlib4/pull/8117\">#8117</a></p>",
        "id": 400039585,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698971887
    },
    {
        "content": "<p>I don't think so, because that definition singles one particular algebraic closure. And any algebraically closed extension suffices.</p>",
        "id": 400678776,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1699341307
    },
    {
        "content": "<p>But for a definition we use a fixed algebraic closure, and then prove a theorem saying it's the same for any alg closed extension, right? You can't make a definition saying \"for all alg closures it's this number which might a priori depend on the choice\".</p>",
        "id": 400686854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699345013
    },
    {
        "content": "<p>Currently the newly added code in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8117\">#8117</a> is more than 300 lines. Should I submit the PR now or should I add more codes to it?</p>",
        "id": 401735807,
        "sender_full_name": "Jz Pan",
        "timestamp": 1699871859
    },
    {
        "content": "<p>It is already a long PR, so you shouldn't add more stuff. Of course we look forward for more results in others PRs!</p>",
        "id": 401735979,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699871920
    },
    {
        "content": "<p>I also finished another 300 (<span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>) lines of code about the basic results of separable degree of polynomials.</p>",
        "id": 402599967,
        "sender_full_name": "Jz Pan",
        "timestamp": 1700187993
    },
    {
        "content": "<p>What is the current progress of <a href=\"https://github.com/leanprover-community/mathlib4/pull/8117\">#8117</a>? It was \"ready-to-merge\" for several days, but no further automatic processes taking action.</p>",
        "id": 404664287,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701186573
    },
    {
        "content": "<p>Hmm. I didn't notice it's not merged. Probably a bors glitch. Could <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> please call bors again?</p>",
        "id": 404665025,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701186793
    },
    {
        "content": "<p>I kicked it on the queue again. Hopefully no glitches this time round!</p>",
        "id": 404665441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701186929
    },
    {
        "content": "<p>By the way, currently the following things are finished (only stay in my computer for now):</p>\n<ul>\n<li>basic results of separable degree of polynomials</li>\n<li>relation of separable degree of field extensions to that of polynomials</li>\n<li>separable degree of field extensions divides (and hence smaller or equal to) the degree of field extensions</li>\n<li>(relative) separable closure, or called maximal separable subextension, proved that it forms an<code>IntermediateField</code></li>\n</ul>\n<p>The next thing is to prove some separably closed and purely inseparable properties of (relative) separable closure. But I think these two files are not imported by the separable degree file yet.</p>\n<p>Is it OK to add these two imports to separable degree file, or it's better to create a new files for (relative) separable closure, and add these two files for import?</p>",
        "id": 404667287,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701187419
    },
    {
        "content": "<p>Do you wan to add imports to FieldTheory/SeparableDegree or RingTheory/Polynomial/SeparableDegree? <del>Both are leaf files so I wouldn't mind.</del> Edit: I think AlgebraicClosure is a somewhat heavy import, so maybe the SepClosed file should import the SeparableDegree file(s), not the other way around?</p>\n<blockquote>\n<p>(relative) separable closure, or called maximal separable subextension, proved that it forms anIntermediateField</p>\n</blockquote>\n<p>I have defined the relative algebraic closure as an intermediate field in a branch, and <a href=\"https://github.com/leanprover-community/mathlib4/compare/master...IntermediateField_algClosure#diff-426d60d7e9edc9e20379127612410ad633864c2d5a9cd001729d128f0993b00eR444-R448\">this lemma</a> might be useful to you.</p>",
        "id": 404672261,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701188996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/404672261\">said</a>:</p>\n<blockquote>\n<p>Do you wan to add imports to FieldTheory/SeparableDegree or RingTheory/Polynomial/SeparableDegree? <del>Both are leaf files so I wouldn't mind.</del> Edit: I think AlgebraicClosure is a somewhat heavy import, so maybe the SepClosed file should import the SeparableDegree file(s), not the other way around?</p>\n</blockquote>\n<p>Currently the <code>FieldTheory/SeparableDegree</code> already imports <code>AlgebraicClosure</code> since the <code>Emb</code> is already defined to be the type of embeddings into  <code>AlgebraicClosure</code>. What I want to do is also import <code>IsSepClosed</code> to <code>FieldTheory/SeparableDegree</code>, but only used for stating properties of relative separable closure. But maybe the other way around is better? Or perhaps create a new file <code>SeparableClosure</code> which imports <code>IsSepClosed</code> and <code>SeparableDegree</code>?</p>\n<p>PS: I remembered that there seems to be purely inseparable in mathlib, but I didn't find them. Maybe there are no such definitions yet. The only one is <code>Polynomial.contraction_degree_eq_or_insep</code> which mentions <code>insep</code>.</p>\n<blockquote>\n<blockquote>\n<p>(relative) separable closure, or called maximal separable subextension, proved that it forms anIntermediateField</p>\n</blockquote>\n<p>I have defined the relative algebraic closure as an intermediate field in a branch, and <a href=\"https://github.com/leanprover-community/mathlib4/compare/master...IntermediateField_algClosure#diff-426d60d7e9edc9e20379127612410ad633864c2d5a9cd001729d128f0993b00eR444-R448\">this lemma</a> might be useful to you.</p>\n</blockquote>\n<p>No worries, I already proved that if <code>x</code> is a separable element, then <code>F(x) / F</code> is a separable extension. In particular <code>1/x</code> is also a separable element.</p>",
        "id": 404713970,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701203883
    },
    {
        "content": "<blockquote>\n<p>By the way, currently the following things are finished (only stay in my computer for now)</p>\n</blockquote>\n<p>I will create a (draft) PR soon. <span aria-label=\"yum\" class=\"emoji emoji-1f60b\" role=\"img\" title=\"yum\">:yum:</span></p>",
        "id": 404714299,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701204023
    },
    {
        "content": "<p>Oh indeed! If it already import AlgebraicClosure, importing IsSepClosed adds very little, since IsSepClosed only imports AlgebraicClosure. (IsSepClosed doesn't currently use AlgebraicClosure, but your TODOs will need it.)</p>",
        "id": 404716567,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701205016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/404716567\">said</a>:</p>\n<blockquote>\n<p>(IsSepClosed doesn't currently use AlgebraicClosure, but your TODOs will need it.)</p>\n</blockquote>\n<p>My plan is some of the remaining TODOs will be implemented in other files <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 404721668,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701207005
    },
    {
        "content": "<p>I created a new draft PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/8696\">#8696</a>. Comments are welcomed.</p>",
        "id": 404752008,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701220688
    },
    {
        "content": "<p>I suspect that there are some redundant codes, for example, it's possible that I used some lengthy code in earlier theorems, but in later theorems I found a simpler way to write code, but I forgot to adapt it to earlier codes.</p>",
        "id": 404752997,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701221035
    },
    {
        "content": "<p>I want to prove that the degree of the relative separable closure <code>L</code> of a finite extension <code>E/F</code> over the base field <code>F</code> is equal to the separable degree of <code>E/F</code>. But I found that maybe it's harder than what I think before.</p>\n<p>As usual, it should be proved by induction:</p>\n<ul>\n<li>If <code>E=F(x)</code>, let <code>f</code> be the minimal polynomial of <code>x</code>, with <code>f(X)=g(X^(p^n))</code> where <code>g</code> is separable. Then I claim that <code>L=F(x^(p^n))</code>. To prove it is indeed the relative separable closure, I should prove that <code>L/F</code> is separable while <code>E/L</code> is <strong>purely inseparable</strong>, and then I should prove that such characterization is equivalent to <code>L</code> being the relative separable closure. <strong>(Note that currently purely inseparable is not defined yet.)</strong></li>\n<li>If <code>K/E/F</code> is a field extension tower, <code>L1, L2, L3</code> are relative separable closures of <code>E/F, K/E, K/F</code>, respectively, then I should prove that <code>[L3:F] = [L1:F] * [L2:E]</code>. To prove this, first I claim that <code>L3</code> is indeed equal to the relative separable closure of <code>K/L1</code>. Secondly, I claim that <code>[L3:L1] = [L2:E]</code>, which should be proved via that <code>E/L1</code> is purely inseparable, while <code>L3/L1</code> is separable, hence they are <strong>linearly disjoint</strong> over <code>L1</code>. <strong>(I think linearly disjoint is not in mathlib yet.)</strong> Lastly, <code>L2</code> should be equal to the compositum of <code>E</code> and <code>L3</code> over <code>L1</code>, which gives my second claim.</li>\n</ul>\n<p>Any suggestions to a simpler proof?</p>",
        "id": 405222746,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701384993
    },
    {
        "content": "<p>I think it's easy to show [E:L] must be purely inseparable in general (not just in the E=F(x) case). (If the minimal polynomial of some element x in E has more than 1 root, you contract it to a separable irreducible polynomial with more than 1 root, and adjoining such a root (which exists in E, of the form x^(p^n)) gives you a larger separable subextension of E/F.) By the tower law you've proven, you just need to show the separable degree of a purely inseparable extension is 1, but that easily follows from the definition + induction, as the minimal polynomials have only one root.</p>",
        "id": 405225759,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701386336
    },
    {
        "content": "<p>Oh, you also need the separable degree of a separable extension is equal to its degree. Maybe it's in your PRs, didn't look yet ...</p>",
        "id": 405225960,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701386423
    },
    {
        "content": "<p>Oh, thanks! It's great <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 405227434,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701387269
    },
    {
        "content": "<p>I made a mistake in defining <code>sepDegree F E</code>. Currently it is defined to be the cardinality of <code>Emb F E</code>. Originally I want to prove that it is equal to <code>Module.rank E (separableClosure F E)</code> if <code>E / F</code> is algebraic. It turns out that this is true only when <code>sepDegree F E</code> is finite. When it is infinite, it behaves badly.</p>",
        "id": 405898201,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701718275
    },
    {
        "content": "<p>For example, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">H</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mrow><mi mathvariant=\"double-struck\">Q</mi><mtext>-alg</mtext></mrow></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>μ</mi><msup><mi>p</mi><mi mathvariant=\"normal\">∞</mi></msup></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mover accent=\"true\"><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"true\">‾</mo></mover><mo stretchy=\"false\">)</mo><mo>≅</mo><msubsup><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi><mo>×</mo></msubsup></mrow><annotation encoding=\"application/x-tex\"> \\mathrm{Hom}_{\\mathbb{Q}\\text{-alg}}(\\mathbb{Q}(\\mu_{p^\\infty}),\\overline{\\mathbb{Q}})\\cong\\mathbb{Z}_p^\\times </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.175em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">Q</span><span class=\"mord text mtight\"><span class=\"mord mtight\">-alg</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2655em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span><span style=\"top:-3.8089em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1667em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1544em;vertical-align:-0.3831em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-2.453em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3831em;\"><span></span></span></span></span></span></span></span></span></span> which is uncountable, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>μ</mi><msup><mi>p</mi><mi mathvariant=\"normal\">∞</mi></msup></msub><mo stretchy=\"false\">)</mo><mo>:</mo><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [\\mathbb{Q}(\\mu_{p^\\infty}):\\mathbb{Q}] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2655em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mclose\">]</span></span></span></span> is only countable. So it's possible that the separable degree of an infinite field extension is larger than the degree of the field extension itself <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>Anyone has suggestions? Currently I tend to remove the <code>sepDegree</code>, but only leave <code>Emb</code> and <code>finSepDegree</code>. Then I redefine <code>sepDegree F E</code> to be <code>Module.rank F (separableClosure F E)</code>, and I can prove that when <code>Emb</code> is finite, it coincides with the previous definition.</p>",
        "id": 405898648,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701718455
    },
    {
        "content": "<p>Indeed, it happens for any algebraic extension of infinite separable degree, where you make infinitely many choices to define an embedding. I suspect <code>#(Emb F E) = 2^Module.rank F (separableClosure F E)</code> is always true in the infinite case (&lt;= is easy but &gt;= may require transfinite induction), and I agree <code>sepDegree</code> should be redefined and <code>finSepDegree</code> can be kept.</p>",
        "id": 405902140,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701719951
    },
    {
        "content": "<p>OK. I managed to remove <code>sepDegree</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8696\">#8696</a>.</p>\n<p>By the way, it seems that the file <code>SeparableDegree</code> gets too long. Perhaps the new contents should be split into 3 files:</p>\n<ul>\n<li>results directly related to separable degree should be keep in <code>SeparableDegree</code> file</li>\n<li><code>SeparableClosure</code> should have results related to (relative) separable closure and its properties not involving purely inseparable</li>\n<li><code>PurelyInseparable</code>should have the definition of purely inseparable, its properties and its relation to separable closure</li>\n</ul>\n<p>I still need to figure out how to organize the latter two files since I found that these properties are usually mixed together. Do you have any suggestions?</p>",
        "id": 405945490,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701738364
    },
    {
        "content": "<p>Haven't looked at the PR close enough to form educated suggestions about organization, unfortunately.</p>\n<p>Just sharing a random observation: the integrality condition in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSeparable#doc\">docs#IsSeparable</a> is redundant when the base ring is nontrivial, because of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=minpoly.eq_zero#doc\">docs#minpoly.eq_zero</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.not_separable_zero#doc\">docs#Polynomial.not_separable_zero</a> :)</p>",
        "id": 405981619,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701756524
    },
    {
        "content": "<p>Couldn't you just define the inseparable degree of an algebraic extension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>→</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\"> E \\to F </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>F</mi><mo>:</mo><msub><mi>E</mi><mi>s</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [F : E_s] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\"> E_s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the separable closure of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\"> E </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>. And prove the coincidence in the finite case?</p>",
        "id": 405997754,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1701763336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/405997754\">said</a>:</p>\n<blockquote>\n<p>Couldn't you just define the inseparable degree of an algebraic extension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>→</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\"> E \\to F </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>F</mi><mo>:</mo><msub><mi>E</mi><mi>s</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [F : E_s] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\"> E_s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the separable closure of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\"> E </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>. And prove the coincidence in the finite case?</p>\n</blockquote>\n<p>This is my plan. Currently inseparable degree is not defined yet; only separable degree is defined.</p>\n<p>I prefer to keep current <code>finSepDegree F E := Cardinal.toNat (Cardinal.mk (Emb F E))</code> definition since it's crucial to develop the theory of separable closure; without it you can't even prove that the set of separable elements form a field. Then I can define <code>sepDegree F E := Module.rank F (separableClosure F E)</code>, and I can prove that <code>finSepDegree F E = Cardinal.toNat (sepDegree F E)</code>, namely, they are both finite or infinite, and if they are finite, they coincide.</p>",
        "id": 406049479,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701780646
    },
    {
        "content": "<p>Why not use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.card#doc\">docs#Nat.card</a> then? Does anyone care about the cardinality if it's infinite? With Nat.card you just get the answer 0 for infinite sets, and as the degree can't actually be 0 this seems like a really nice use case.</p>",
        "id": 406060259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701784128
    },
    {
        "content": "<p>You're right. <code>Nat.card α := Cardinal.toNat (Cardinal.mk α)</code> and that's what I'm exactly looking for. Sorry I overlooked it before. I'll change it later.</p>",
        "id": 406061371,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701784507
    },
    {
        "content": "<p>Don't apologise -- I'm just trying to help :-)</p>",
        "id": 406061489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701784550
    },
    {
        "content": "<p>I rapidly looked at Bourbaki's algebra, and saw they make finiteness assumptions here and there, and couldn't find a general definition by browsing the web. Using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.card#doc\">docs#Nat.card</a> is nice because that does not assert that the number might be relevant when infinite. In math, we may add an hypothesis to a definition,but that is less natural in Lean.</p>",
        "id": 406168167,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1701814322
    },
    {
        "content": "<p>Sure. Now the definition uses <code>Nat.card</code> instead.</p>",
        "id": 406192823,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701826302
    },
    {
        "content": "<p>Now I'm stuck with a stupid question: if a vector space is not <code>FiniteDimensional</code>, and given any natural number <code>n</code>, how can I choose <code>n</code> linearly independent elements of it?</p>",
        "id": 406193072,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701826436
    },
    {
        "content": "<p>More specifically, if <code>E / F</code> is an infinite algebraic extension, for any natural number <code>n</code>, I want to find an intermediate field <code>L</code> such that <code>L / F</code> is finite of degree <code>&gt;= n</code>.</p>\n<p>[EDIT] OK, I think induction by <code>n</code> should work. Suppose <code>L / F</code>is finite of degree <code>&gt;= n</code>, choose any <code>x</code> not in <code>L</code>, then <code>L(x) / F</code> is finite of degree <code>&gt;= n + 1</code> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 406194118,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701827024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/406193072\">said</a>:</p>\n<blockquote>\n<p>Now I'm stuck with a stupid question: if a vector space is not <code>FiniteDimensional</code>, and given any natural number <code>n</code>, how can I choose <code>n</code> linearly independent elements of it?</p>\n</blockquote>\n<p>The easiest way I can think of uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsNoetherian.iff_rank_lt_aleph0#doc\">docs#IsNoetherian.iff_rank_lt_aleph0</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsNoetherian.iff_fg#doc\">docs#IsNoetherian.iff_fg</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.rank_def#doc\">docs#Module.rank_def</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=lt_iSup_iff#doc\">docs#lt_iSup_iff</a></p>",
        "id": 406226549,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701839196
    },
    {
        "content": "<p>OK, finally I'm stuck with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_root_.IntermediateField.eq_of_le_of_finrank_le''</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h_le</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_finrank</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This is same as <code>IntermediateField.eq_of_le_of_finrank_le</code> but with <code>FiniteDimensional K L</code> replaced by <code>FiniteDimensional K E</code>. It must be correct. Why is it not in mathlib yet? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 406318883,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701873293
    },
    {
        "content": "<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">_root_.IntermediateField.eq_of_le_of_finrank_le''</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h_le</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_finrank</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">IntermediateField.toSubalgebra_injective</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Subalgebra.toSubmodule_injective</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra.toSubmodule</span> <span class=\"n\">E.toSubalgebra</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hfin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">FiniteDimensional.eq_of_le_of_finrank_le</span> <span class=\"n\">h_le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 406323560,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701874823
    },
    {
        "content": "<p>And I think it is a better statement than <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.eq_of_le_of_finrank_le#doc\">docs#IntermediateField.eq_of_le_of_finrank_le</a> (it is more general)</p>",
        "id": 406323691,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701874843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/406323691\">said</a>:</p>\n<blockquote>\n<p>And I think it is a better statement than <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.eq_of_le_of_finrank_le#doc\">docs#IntermediateField.eq_of_le_of_finrank_le</a> (it is more general)</p>\n</blockquote>\n<p>I think so. Same as other three similar statements (in two of them, replace <code>FiniteDimensional K L</code> by <code>FiniteDimensional F L</code>).</p>\n<p>The problem is that does this change make the existing code works seamlessly, namely, can we get <code>FiniteDimensional K E</code> from <code>FiniteDimensional K L</code> automatically via typeclass inference. But the answer is \"no\" I think? Therefore we need to add four new statements, otherwise the existing code breaks?</p>",
        "id": 406361023,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701886759
    },
    {
        "content": "<p>Oh, I see that in <code>FiniteDimensional.eq_of_le_of_finrank_le</code> the condition corresponds to <code>FiniteDimensional K E</code>. So the problem is the <code>IntermediateField</code> version being not general enough.</p>",
        "id": 406361644,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701886988
    },
    {
        "content": "<p>Yeah the instance from <code>FiniteDimensional K L</code> to <code>FiniteDimensional K E</code> should be safe (where <code>E : IntermediateField K L</code>). If it's not there we should just add it.</p>",
        "id": 406361845,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701887062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/406361845\">said</a>:</p>\n<blockquote>\n<p>Yeah the instance from <code>FiniteDimensional K L</code> to <code>FiniteDimensional K E</code> should be safe (where <code>E : IntermediateField K L</code>). If it's not there we should just add it.</p>\n</blockquote>\n<p>I found them. They are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.finiteDimensional_left#doc\">docs#IntermediateField.finiteDimensional_left</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.finiteDimensional_right#doc\">docs#IntermediateField.finiteDimensional_right</a>.</p>",
        "id": 406375329,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701892347
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/blob/561ab0981d6df710afb3d34423378152195e3440/Mathlib/FieldTheory/IntermediateField.lean#L710C77-L710C77\">https://github.com/leanprover-community/mathlib4/blob/561ab0981d6df710afb3d34423378152195e3440/Mathlib/FieldTheory/IntermediateField.lean#L710C77-L710C77</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nonrec</span> <span class=\"kd\">theorem</span> <span class=\"n\">eq_of_le_of_finrank_le</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h_le</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_finrank</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"n\">toSubalgebra_injective</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">Subalgebra.toSubmodule.injective</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">eq_of_le_of_finrank_le</span> <span class=\"n\">h_le</span> <span class=\"n\">h_finrank</span>\n</code></pre></div>\n<p>What does the <code>nonrec</code> mean?</p>",
        "id": 406376131,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701892642
    },
    {
        "content": "<p>It means that <code>eq_of_le_of_finrank_le</code> is non-recursive, ie it won't refer to itself (as it would if it were a proof by induction). Without it, Lean would think <code>eq_of_le_of_finrank_le</code> is referring to itself in <code>eq_of_le_of_finrank_le h_le h_finrank</code> even though it's referring to a different theorem (they look the same here because some namespaces have been opened) because of how name resolution works.</p>",
        "id": 406376397,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701892752
    },
    {
        "content": "<p>I see. Is it not necessary if it's written as <code>FiniteDimensional.eq_of_le_of_finrank_le</code> in the proof?</p>",
        "id": 406377501,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701893116
    },
    {
        "content": "<p>Assuming you got the namespaces right, yes <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 406377887,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701893286
    },
    {
        "content": "<p>I tried to generalize the second statement without success, because its proof uses the first statement, so I have to convert these intermediate fields back and forth :(</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IntermediateField</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Adjoin</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">_root_.IntermediateField.eq_of_le_of_finrank_le''</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h_le</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_finrank</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra.toSubmodule</span> <span class=\"n\">E.toSubalgebra</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hfin</span>\n  <span class=\"n\">IntermediateField.toSubalgebra_injective</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Subalgebra.toSubmodule_injective</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">FiniteDimensional.eq_of_le_of_finrank_le</span> <span class=\"n\">h_le</span> <span class=\"n\">h_finrank</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">_root_.IntermediateField.eq_of_le_of_finrank_le''''</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h_le</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_finrank</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">E</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"n\">h_le</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAlgebra</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toSMul</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">IsScalarTower.of_algebraMap_eq</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">FiniteDimensional.left</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">FiniteDimensional.right</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span>\n  <span class=\"k\">let</span> <span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">IsScalarTower.toAlgHom</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fieldRange</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E'</span> <span class=\"o\">:=</span> <span class=\"n\">Subalgebra.algebra</span> <span class=\"n\">E'.toSubalgebra</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">E'</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">F</span> <span class=\"n\">E'</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toSMul</span>\n  <span class=\"k\">have</span> <span class=\"n\">hE</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">restrictScalars</span> <span class=\"n\">K</span> <span class=\"n\">E'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">eq_of_le_of_finrank_le''</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"n\">bot_le</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IntermediateField.finrank_bot</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">finrank_mul_finrank</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">E'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"c1\">-- rw [hE] -- this doesn't work</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">finrank</span> <span class=\"n\">E</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">finrank_pos</span>\n    <span class=\"n\">nlinarith</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">restrictScalars</span> <span class=\"n\">K</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hE</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">restrictScalars_bot_eq_self</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 406387421,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701896399
    },
    {
        "content": "<p>Currently, in mathlib, the proof of the second statement uses the first one. But I suspect there are other proofs?<br>\n(PS: Fortunately, I only need to use the generalization of the first statement.)</p>",
        "id": 406388319,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701896606
    },
    {
        "content": "<p>I tried that the changes to <code>IntermediateField.eq_of_le_of_finrank_le</code> won't break mathlib (<a href=\"https://github.com/leanprover-community/mathlib4/pull/8696/files#diff-136515d94d81377fde45d93d4247bec3ef961127a852be2706600dd0c2424c08\">https://github.com/leanprover-community/mathlib4/pull/8696/files#diff-136515d94d81377fde45d93d4247bec3ef961127a852be2706600dd0c2424c08</a>). <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> , would you like to open a PR for these changes? Or should I open a PR?</p>",
        "id": 406413950,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701908553
    },
    {
        "content": "<p>Feel free to open the PR!</p>",
        "id": 406484729,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701934829
    },
    {
        "content": "<p>Here's a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_root_.IntermediateField.eq_of_le_of_finrank_le''''</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h_le</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_finrank</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">E</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"n\">h_le</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAlgebra</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"k\">from</span> <span class=\"n\">h_le.antisymm</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">hx'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this.ge</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">trivial</span> <span class=\"o\">:</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"bp\">∈</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span>\n    <span class=\"n\">convert</span> <span class=\"bp\">←</span> <span class=\"n\">x'.prop</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Subtype.ext_iff.mp</span> <span class=\"n\">hx'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subalgebra.bot_eq_top_iff_finrank_eq_one</span><span class=\"o\">]</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toSMul</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">IsScalarTower.of_algebraMap_eq</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">left</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">right</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_mul_le_mul_left</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">finrank_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">finrank</span> <span class=\"n\">E</span> <span class=\"n\">L</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"n\">finrank_pos</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">finrank_mul_finrank'</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Feel free to PR. I think with some effort we may remove the finiteness conditions from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FiniteDimensional.finrank_mul_finrank#doc\">docs#FiniteDimensional.finrank_mul_finrank</a> (and this proof would become a little shorter), and maybe the primed version (with finite free modules) as well.</p>",
        "id": 406698076,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702019244
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/406698076\">said</a>:</p>\n<blockquote>\n<p>Here's a proof: ...</p>\n</blockquote>\n<p>Thank you very much, but <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>  already came up with a proof at <a href=\"https://github.com/leanprover-community/mathlib4/pull/8873#discussion_r1419362683\">https://github.com/leanprover-community/mathlib4/pull/8873#discussion_r1419362683</a> . I forgot to mention it here.</p>",
        "id": 406771938,
        "sender_full_name": "Jz Pan",
        "timestamp": 1702046232
    },
    {
        "content": "<p>Currently I'm splitting my PR into small parts, here is the part one: <a href=\"https://github.com/leanprover-community/mathlib4/pull/9041\">#9041</a> which consists of the results before separable closure.</p>",
        "id": 407831474,
        "sender_full_name": "Jz Pan",
        "timestamp": 1702511663
    },
    {
        "content": "<p>It's mostly ready for review.</p>",
        "id": 407831506,
        "sender_full_name": "Jz Pan",
        "timestamp": 1702511684
    },
    {
        "content": "<p>Now I'm stuck with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Adjoin</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">biSup_adjoin_simple</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">iSup_subtype''</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hx'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_finset_of_mem_iSup</span> <span class=\"n\">hx</span>\n  <span class=\"k\">let</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">s.map</span> <span class=\"o\">⟨</span><span class=\"n\">Subtype.val</span><span class=\"o\">,</span> <span class=\"n\">Subtype.val_injective</span><span class=\"o\">⟩</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">s.coe_map_subset_range</span> <span class=\"o\">⟨</span><span class=\"n\">Subtype.val</span><span class=\"o\">,</span> <span class=\"n\">Subtype.val_injective</span><span class=\"o\">⟩</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">Subtype.range_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I have no idea how to transfer <code>hx'</code> back to <code>T</code> using <code>iSup_subtype''</code>, etc.</p>",
        "id": 409958932,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703555040
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">biSup_adjoin_simple</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">iSup_subtype''</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hx'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_finset_of_mem_iSup</span> <span class=\"n\">hx</span>\n  <span class=\"k\">let</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">s.map</span> <span class=\"o\">⟨</span><span class=\"n\">Subtype.val</span><span class=\"o\">,</span> <span class=\"n\">Subtype.val_injective</span><span class=\"o\">⟩</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">SetLike.le_def.mp</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hx'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.coe_map</span><span class=\"o\">,</span> <span class=\"n\">Function.Embedding.coeFn_mk</span><span class=\"o\">,</span> <span class=\"n\">iSup_le_iff</span><span class=\"o\">,</span> <span class=\"n\">adjoin_le_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">Set.le_eq_subset</span><span class=\"o\">,</span> <span class=\"n\">Set.singleton_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">SetLike.mem_coe</span><span class=\"o\">]</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subset_adjoin</span>\n  <span class=\"n\">simpa</span>\n</code></pre></div>",
        "id": 409959934,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703555787
    },
    {
        "content": "<p>(I believe you need <code>open IntermediateField</code>?)</p>",
        "id": 409959953,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703555804
    },
    {
        "content": "<p>The <code>simp</code> comes from <code>simp? [-Subtype.forall]</code> by the way.</p>",
        "id": 409960011,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703555858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/409959953\">said</a>:</p>\n<blockquote>\n<p>(I believe you need <code>open IntermediateField</code>?)</p>\n</blockquote>\n<p>Oh sorry. I just copied from a larger file which <code>open IntermediateField</code>.</p>",
        "id": 409960093,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703555899
    },
    {
        "content": "<p>I think this result could be called <code>IntermediateField.exists_finset_of_mem_adjoin</code>; I need to use it somewhere in purely inseparable.</p>",
        "id": 409961326,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703556776
    },
    {
        "content": "<p>I'm stuck (mathematically) at the following result (which is a lemma used to prove the multiplicity of (infinite) separable degree):</p>\n<blockquote>\n<p>If <code>K / E / F</code> is a field extension tower, such that <code>E / F</code> is algebraic, then <code>separableClosure E K = adjoin E (separableClosure F K)</code>.</p>\n</blockquote>\n<p>I have a proof, but it is quite lengthy, and it must involve <code>LinearlyDisjoint</code> (<a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/409430232\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/409430232</a>). Here are the steps:</p>\n<ul>\n<li>It's easy to prove that <code>adjoin E (separableClosure F K)</code> is contained in <code>separableClosure E K</code>.</li>\n<li>So we only need to prove the opposite side: <code>separableClosure E K</code> is contained in <code>adjoin E (separableClosure F K)</code>.</li>\n<li>The first step is: we may assume that <code>E / F</code> is finite. Suppose <code>x</code> is in <code>separableClosure E K</code>, consider <code>E'</code> which is <code>F</code> adjoin the coefficients of the minimal polynomial of <code>x</code> over <code>E</code>. Then <code>E' / F</code> is finite, and <code>x</code> is contained in <code>separableClosure E' K</code>. Now it's easy to see that we only need to show the result for <code>K / E' / F</code>.</li>\n<li>The second step is: we may assume that <code>E / F</code> is finite purely inseparable. It's easy to prove the result when <code>E / F</code> is separable. Then we may consider <code>K / E / S / F</code> where <code>S = separableClosure F E</code>, so that <code>S / F</code> is finite separable and <code>E / S</code> is finite purely inseparable. If the result is true for <code>K / S / F</code> and <code>K / E / S</code>, then it's also true for <code>K / E / F</code>.</li>\n<li>The last step is to prove the result for <code>E / F</code> finite purely inseparable. Suppose <code>x</code> is in <code>separableClosure E K</code>, then <code>E(x) / F</code> is finite separable, hence in this case we can use the product formula of (finite) separable degree. Let <code>S = separableClosure F E(x)</code>, then we have <code>[S : F] = [E(x) : F]_s = [E(x) : E]_s [E : F]_s = [E(x) : E]</code>, hence <code>[E(x) : F] = [E(x) : E] [E : F] = [S : F] [E : F]</code>. On the other hand, <code>S</code> and <code>E</code> are <strong>linearly disjoint</strong> over <code>F</code>, hence <code>[E(S) : F] = [S : F] [E : F]</code>, while <code>E(S)</code> is contained in <code>E(x)</code>. Therefore <code>E(S) = E(x)</code>, in particular <code>x</code> is contained in <code>E(S)</code>, thus is contained in <code>adjoin E (separableClosure F K)</code>.</li>\n</ul>",
        "id": 410081810,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703636612
    },
    {
        "content": "<p>Any suggestions for a simpler proof without involving linear disjoint?</p>",
        "id": 410081904,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703636654
    },
    {
        "content": "<p>PS: linearly disjoint is also used from this lemma to the multiplicity of (infinite) separable degree. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 410082472,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703636959
    },
    {
        "content": "<p>If you just want to find (in your last bullet point) a basis of S over F that is also a basis of E(S) over E rather than develop the full theory of linear disjointness, you can follow the argument on Cohn's Algebra:<br>\n<a href=\"/user_uploads/3121/HJC48LNw_jF5hSnlmSmQg2pP/image.png\">image.png</a><br>\n<a href=\"/user_uploads/3121/Czyrc-TMdqNiBaNtSCCRgkou/image.png\">image.png</a><br>\n<del>Lang's Corollary V.6.10 is pretty similar.</del><br>\nCohn also proves that if one of the extensions is separable and one (possibly the same) is normal, then they are linearly disjoint if their intersection is the base field. This applies to our situation since a purely inseparable extension is always normal.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/HJC48LNw_jF5hSnlmSmQg2pP/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/HJC48LNw_jF5hSnlmSmQg2pP/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Czyrc-TMdqNiBaNtSCCRgkou/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Czyrc-TMdqNiBaNtSCCRgkou/image.png\"></a></div>",
        "id": 410095817,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703645945
    },
    {
        "content": "<p>Lang's Corollary V.6.9 gives a pretty different and arguably simpler argument for <code>[ES : F] = [S : F] [E : F]</code>. The idea is that S/F being separable implies that ES/E is also separable, and E/F being purely inseparable implies ES/S is also purely inseparable. The separable degree of ES/E/F must all be contributed by ES/E and the separable degree of ES/S/F must all be contributed by S/F, so [ES:E]=[S:F].</p>",
        "id": 410100103,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703649767
    },
    {
        "content": "<p>Not sure what the definition you are using but isn't the easiest way to show the multiplicativity of separable degree is to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><mi>K</mi></msub><mo stretchy=\"false\">(</mo><mi>F</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>→</mo><msub><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><mi>K</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Hom}_K(F, A) \\to \\operatorname{Hom}_K(E, A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span> is surjective with fibers isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><mi>E</mi></msub><mo stretchy=\"false\">(</mo><mi>F</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Hom}_E(F, A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 410100681,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703650437
    },
    {
        "content": "<p>That's already in mathlib as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Field.finSepDegree_mul_finSepDegree_of_isAlgebraic#doc\">docs#Field.finSepDegree_mul_finSepDegree_of_isAlgebraic</a>. \"E/F being purely inseparable implies ES/S is also purely inseparable\" will require some characterization of inseparable elements in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9041\">#9041</a> though.</p>",
        "id": 410102630,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703652383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/410100681\">said</a>:</p>\n<blockquote>\n<p>Not sure what the definition you are using but isn't the easiest way to show the multiplicativity of separable degree is to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><mi>K</mi></msub><mo stretchy=\"false\">(</mo><mi>F</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>→</mo><msub><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><mi>K</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Hom}_K(F, A) \\to \\operatorname{Hom}_K(E, A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span> is surjective with fibers isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><mi>E</mi></msub><mo stretchy=\"false\">(</mo><mi>F</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Hom}_E(F, A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span></p>\n</blockquote>\n<p>Oh I just realized you're referring to multiplicativity of the infinite separable degree. The answer is that the Hom definition doesn't work in the infinite case, because Hom_K(F,A) have cardinality equal to the continuum when F is a countably-infinite dimensional algebraic extension of K. (Original observed <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/405898201\">here</a>)</p>\n<p>We are now (re-)defining the general separable degree to be the dimension of the relative separable closure over the base field. (Similarly, we could define the inseparable degree to be the dimension of the extension field over the separable closure, and I think it's multiplicative as well.)</p>",
        "id": 410112648,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703661019
    },
    {
        "content": "<p>Back to the original question, I think this gives an easy proof of the desired fact: to show that <code>separableClosure E K = adjoin E (separableClosure F K)</code> we just need to show the LHS is simultaneously a separable and a purely inseparable extension of the RHS. It's separable because it's separable over E and therefore also separable over the larger field <code>adjoin E _</code>. It's purely inseparable because <code>K</code> is purely inseparable over <code>separableClosure F K</code> and therefore any intermediate field is also purely inseparable over the bigger field <code>adjoin E (separableClosure F K)</code>.</p>",
        "id": 410116014,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703663563
    },
    {
        "content": "<p>A useful thing to show is that the separable closure of K/F is the minimal intermediate field L such that K/L is purely inseparable. (We already know it's the maximal intermediate field separable over F.) For any such intermediate field L, if (for contradiction) it doesn't contain the separable closure, then its intersection with the sep closure is strictly smaller than the sep closure. K can't be purely inseparable over the intersection because there are (separable) elements in the sep closure that is not in the intersection. Therefore L can't be purely inseparable over the intersection, and we may pick a separable element not in the intersection, i.e. not in the sep closure. But by transitivity of separability this element must lie in the sep closure, leading to a contradiction.</p>",
        "id": 410119355,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703665749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/410100681\">said</a>:</p>\n<blockquote>\n<p>Not sure what the definition you are using but isn't the easiest way to show the multiplicativity of separable degree is to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><mi>K</mi></msub><mo stretchy=\"false\">(</mo><mi>F</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>→</mo><msub><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><mi>K</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Hom}_K(F, A) \\to \\operatorname{Hom}_K(E, A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span> is surjective with fibers isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><mi>E</mi></msub><mo stretchy=\"false\">(</mo><mi>F</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Hom}_E(F, A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span></p>\n</blockquote>\n<p>That is also already in mathlib as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Field.embProdEmbOfIsAlgebraic#doc\">docs#Field.embProdEmbOfIsAlgebraic</a>. However, I'm currently in redefining separable degree in infinite case (<a href=\"https://github.com/leanprover-community/mathlib4/pull/9041\">#9041</a>), so this does not imply the multiplicity for (infinite) separable degree.</p>",
        "id": 410168162,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703690352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/410119355\">said</a>:</p>\n<blockquote>\n<p>A useful thing to show is that the separable closure of K/F is the minimal intermediate field L such that K/L is purely inseparable.</p>\n</blockquote>\n<p>I already have this: <a href=\"https://github.com/leanprover-community/mathlib4/blob/c0775a3744e3b5c473405ce86350edc97aaca2a7/Mathlib/FieldTheory/PurelyInseparable.lean#L256\">separableClosure_le_iff</a>, but it requires that <code>K/F</code> is algebraic.</p>",
        "id": 410174419,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703693410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/410116014\">said</a>:</p>\n<blockquote>\n<p>Back to the original question, I think this gives an easy proof of the desired fact: to show that <code>separableClosure E K = adjoin E (separableClosure F K)</code> we just need to show the LHS is simultaneously a separable and a purely inseparable extension of the RHS. It's separable because it's separable over E and therefore also separable over the larger field <code>adjoin E _</code>. It's purely inseparable because <strong><code>K</code> is purely inseparable over <code>separableClosure F K</code></strong> and therefore any intermediate field is also purely inseparable over the bigger field <code>adjoin E (separableClosure F K)</code>.</p>\n</blockquote>\n<p>Fantastic! The bold part only works when <code>K / F</code> is algebraic, though. A slight modification makes it works for general cases: let <code>S4 := separableClosure F (separableClosure E K)</code>, then <code>separableClosure E K / S4</code> is purely inseparable, since <code>separableClosure E K / F</code> is algebraic. Now <code>S4 ≤ separableClosure F K ≤ adjoin E _ ≤ separableClosure E K</code>, hence <code>separableClosure E K / adjoin E _</code> is purely inseparable.</p>",
        "id": 410175799,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703694214
    },
    {
        "content": "<p>This proof does not require <code>E / F</code> being finite, hence I can avoid \"adjoin the coefficients of the minimal polynomial\" (<code>frange</code>) part of proof.</p>",
        "id": 410176003,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703694340
    },
    {
        "content": "<p>I think we even have <code>S4.map (separableClosure E K).val = separableClosure F K</code> but you may not need that :)</p>\n<p>Aside: when we add the general definition of separability of possibly transcendental extensions, should we name it TranscSeparable, or rename the current Separable to AlgSeparable? (The usual definition of the general case depends on the algebraic case.)</p>",
        "id": 410202992,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703712019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/410202992\">said</a>:</p>\n<blockquote>\n<p>Aside: when we add the general definition of separability of possibly transcendental extensions, should we name it TranscSeparable, or rename the current Separable to AlgSeparable? (The usual definition of the general case depends on the algebraic case.)</p>\n</blockquote>\n<p>Hmm, frankly I never used that concept. From <a href=\"https://en.wikipedia.org/wiki/Transcendental_extension\">https://en.wikipedia.org/wiki/Transcendental_extension</a> it's usually called <em>has separating transcendence basis</em>, or called <em>separably generated</em>.</p>",
        "id": 410204316,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703713032
    },
    {
        "content": "<p>In Pete Clark's <a href=\"http://alpha.math.uga.edu/~pete/FieldTheory.pdf\">Field Theory</a> p.115-116:</p>\n<blockquote>\n<p>A separating transcendence basis for a field extension K/F is an algebraically independent subset S of K such that K/F (S) is separable algebraic.<br>\nWe say that a field extension K/F is separably generated if it admits a separating transcendence basis.<br>\nAn arbitrary field extension K/F is separable if every finitely generated subextension admits a separating transcendence basis.</p>\n</blockquote>\n<p>It's clear for an algebraic extension this is equivalent to the old definition.<br>\nThere's also <a href=\"https://stacks.math.columbia.edu/tag/030I\">stacks#030I</a></p>",
        "id": 410207126,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703714978
    },
    {
        "content": "<p>Oops, the LaTeX formula in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/SeparableDegree.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/SeparableDegree.html</a> is broken, probably due to two <code>_</code> in the formula confuses the parser, make it think of being italic texts. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I don't know how to fix it, though.</p>",
        "id": 410293463,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703770177
    },
    {
        "content": "<p>\"File a bug on dog-gen4\", probably. I think this feature is known to be somewhat brittle</p>",
        "id": 410294834,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703770815
    },
    {
        "content": "<p>Earlier discussion <a href=\"#narrow/stream/287929-mathlib4/topic/LaTeX.20problem.20in.20docstring/near/401021551\">here</a>, including the doc-gen3 way to fix this.</p>",
        "id": 410295273,
        "sender_full_name": "Utensil Song",
        "timestamp": 1703771062
    },
    {
        "content": "<p>I created <a href=\"https://github.com/leanprover-community/mathlib4/pull/9318\">#9318</a>, but I don't know if this fix works, since I don't know how to preview it.</p>",
        "id": 410332087,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703790747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/410202992\">said</a>:</p>\n<blockquote>\n<p>I think we even have <code>S4.map (separableClosure E K).val = separableClosure F K</code> but you may not need that :)</p>\n</blockquote>\n<p>Nice observation, I added this as <a href=\"https://github.com/leanprover-community/mathlib4/blob/c0b5458e5811bb8076b876c9409ca706402f2df0/Mathlib/FieldTheory/SeparableClosure.lean#L114\">separableClosure.eq_map_of_separableClosure_eq_bot</a>.</p>",
        "id": 410365838,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703810716
    },
    {
        "content": "<p>Now the draft PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/8696\">#8696</a> consists of two new files:</p>\n<ul>\n<li><code>Mathlib/FieldTheory/SeparableClosure.lean</code>: the definition and basic properties of (relative) separable closure, about 400 lines.</li>\n<li><code>Mathlib/FieldTheory/PurelyInseparable.lean</code>: the definition and basic properties of purely inseparable extensions, more than 600 lines. This file also contains <strong>maximal purely inseparable subextension</strong> and its basic properties. I named it <code>perfectClosure</code> since it is just like (relative) perfect closure. Two questions:<ul>\n<li>Is it a good name?</li>\n<li>Should I split this part into a new file, perhaps <code>Mathlib/FieldTheory/RelPerfectClosure.lean</code>? Currently this part is about 250 lines.</li>\n</ul>\n</li>\n</ul>",
        "id": 410366981,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703811243
    },
    {
        "content": "<p>By the way it would be great to have purely inseparable iff epi in the category of fields.<br>\nThis will be useful when defining radicial morphisms.</p>",
        "id": 410368890,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703812349
    },
    {
        "content": "<p>The answer to \"should I split this file\" is almost always yes.</p>",
        "id": 410368933,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703812382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/410368890\">said</a>:</p>\n<blockquote>\n<p>By the way it would be great to have purely inseparable iff epi in the category of fields.<br>\nThis will be useful when defining radicial morphisms.</p>\n</blockquote>\n<p>I've not heard it before. Let me study it later.</p>\n<p>[EDIT] Currently I have this which may be related to what you said: <a href=\"https://github.com/leanprover-community/mathlib4/blob/c0b5458e5811bb8076b876c9409ca706402f2df0/Mathlib/FieldTheory/PurelyInseparable.lean#L206\">isPurelyInseparable_iff_finSepDegree_eq_one</a></p>\n<p>By the way, I've heard that it's not a good idea to define an object using universal property over all types, as this will introduce universe problems. Can someone clarify?</p>",
        "id": 410373445,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703814860
    },
    {
        "content": "<blockquote>\n<p>it would be great to have purely inseparable iff epi in the category of fields.</p>\n</blockquote>\n<p>That's immediate from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isPurelyInseparable_iff_mem_pow</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"n\">ExpChar</span> <span class=\"n\">F</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsPurelyInseparable</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>(<a href=\"https://github.com/leanprover-community/mathlib4/blob/c0b5458e5811bb8076b876c9409ca706402f2df0/Mathlib/FieldTheory/PurelyInseparable.lean#L102-L103\">permalink</a>) together with injectivity of Frobenius in the codomain (which must also be of characteristic q).<br>\n(but it should go into some file that imports category theory ...)</p>",
        "id": 410385396,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703822706
    },
    {
        "content": "<p>I think this only gives one direction?</p>",
        "id": 410385698,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703822955
    },
    {
        "content": "<p>Oh I guess the other direction is what Jz posted, because the finSepDegree of E/F is equal to one means there is exactly one F-embedding of E into the algebraic closure, so if E/F is not purely inseparable there would be at least two embeddings, so F-&gt;E isn't an epimorphism.</p>",
        "id": 410386286,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703823486
    },
    {
        "content": "<p>Yes but we need epi -&gt; algebraic to use that</p>",
        "id": 410387225,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703824302
    },
    {
        "content": "<p>I have a proof that epi -&gt; algebraic (not yet formalized) but it depends on <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsTranscendenceBasis.isAlgebraic#doc\">docs#IsTranscendenceBasis.isAlgebraic</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsAlgClosure.equivOfEquiv#doc\">docs#IsAlgClosure.equivOfEquiv</a>. The idea is that you can take a maximal purely transcendental extension T of F in E, over which E is algebraic. If the transcendental basis is not empty (i.e. if E/F is transcendental), then T has nontrivial F-automorphisms (e.g. send a transcendental element x to x+1), which you can extend to its algebraic closure Tbar. If you compose an T-embedding of E into Tbar with this automorphism, you get a different F-embedding, since it's already different when restricted to T. Is there a simpler proof?</p>",
        "id": 410391796,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703828170
    },
    {
        "content": "<p>The proof I have is more or less the same. We don't have transcendental bases in mathlib afaik though</p>",
        "id": 410392052,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703828437
    },
    {
        "content": "<p>We have them! It's my first link above (just corrected).</p>",
        "id": 410392159,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703828534
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/410373445\">said</a>:</p>\n<blockquote>\n<p>By the way, I've heard that it's not a good idea to define an object using universal property over all types, as this will introduce universe problems. Can someone clarify?</p>\n</blockquote>\n<p>You cannot quantify over all universes so you will end up with a family of definitions and you will need to show that they are equivalent and it will be hard to deal with.</p>",
        "id": 410392317,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703828725
    },
    {
        "content": "<p>I think we can just generalize <code>isPurelyInseparable_iff_finSepDegree_eq_one</code> to the transcendental case; it's fortunate that our definition of <code>Emb F E</code> uses the algebraic closure of E rather than of F ... Maybe we should go back to revise the <a href=\"https://github.com/leanprover-community/mathlib4/blob/fb3fd7cd7a0004f3d9bc0daf99c3d767cf6e7600/Mathlib/FieldTheory/SeparableDegree.lean#L26\">claim</a> that \"if E / F is not algebraic, then this definition makes no mathematical sense.\"</p>",
        "id": 410394051,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703830142
    },
    {
        "content": "<blockquote>\n<p>By the way, I've heard that it's not a good idea to define an object using universal property over all types, as this will introduce universe problems. Can someone clarify?</p>\n</blockquote>\n<p>It's not forbidden to quantify over a universe in a definition but you have to be careful that the universe is large enough (usually the max of all universes involved) to contain the desired universal object, which would be the same (isomorphic) in all higher universes, but may be trivial in lower universes. (See \"ulifting groups doesn't preserve colimits\" <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/tensor.20products.20commute.20with.20direct.20limits/near/275178330\">here</a>.) Plus it's often possible to restrict the objects you quantify over (e.g. for flatness it suffices to consider all (f.g.) ideals of the ring rather than all modules in a universe), and then prove the universal property in all universes higher or lower. It's generally preferable to have a definition that is easy to verify and derive strong consequences from the weak definition.</p>",
        "id": 410395068,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703830986
    },
    {
        "content": "<p>I think maybe it's better not talking about category theory things directly in this file, instead, we may provide necessary results which lead to the desired conclusions directly. For example, for a purely inseparable extension <code>E / F</code>, we can provide a result that it's epi (just add <code>(K : Type w) [Field K] ...</code> to the parameters). Conversely, for an extension which is not purely inseparable, originally we should say \"there is a field <code>K</code> which makes it not epi\", but perhaps we can find <code>K</code> explicitly, for example, just take some algebraic closure? In this way we can avoid universe level problems.</p>",
        "id": 410432355,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703856288
    },
    {
        "content": "<p>It would be great if there are universe polymorphic versions, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsPurelyInseparable</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">],</span>\n    <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">RingHom.comp</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→+*</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is good enough for me.</p>",
        "id": 410448819,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703866797
    },
    {
        "content": "<p>Yeah we could provide a category-theory-free version of this result in the PurelyInseparable file. No one would object importing transcendence bases into a new file, I guess. </p>\n<p><del>By the way, I think my proof was overly complicated: we can directly compose with the automorphism and we need not use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsAlgClosure.equivOfEquiv#doc\">docs#IsAlgClosure.equivOfEquiv</a> to extend it and compose with that.</del> Nope, we still need it.</p>",
        "id": 410452875,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703869317
    },
    {
        "content": "<p>The second part of the PR, <a href=\"https://github.com/leanprover-community/mathlib4/pull/9338\">#9338</a>, concerning on the separable closure, is ready for review.</p>",
        "id": 410467730,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703876999
    },
    {
        "content": "<p>Initial comments:</p>\n<ol>\n<li>\n<p>I wonder if it should just be called <code>sepClosure</code> for consistency with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSepClosure#doc\">docs#IsSepClosure</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSepClosed%3F#doc\">docs#IsSepClosed?</a> Maybe add a namespace so it becomes <code>IntermediateField.sepClosure</code>.</p>\n</li>\n<li>\n<p>We don't currently have <code>SepClosure</code> right? Should we define it as the <code>sepClosure</code> in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgebraicClosure%3F#doc\">docs#AlgebraicClosure?</a></p>\n</li>\n</ol>",
        "id": 410471195,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703878849
    },
    {
        "content": "<ul>\n<li>We have <code>IsAlgClosed</code>, <code>IsAlgClosure</code> but algebraic closure is still called <code>AlgebraicClosure</code>. Not sure <code>sepClosure</code> is a good name.</li>\n<li>Also I don't know if it's a good idea to put it into <code>IntermediateField</code> namespace. In my opinion, <code>separableClosure</code> is very like <code>normalClosure</code>, but <code>normalClosure</code> is not in namespace.</li>\n<li><code>AlgebraicClosure</code> is a <code>Type</code> but <code>separableClosure</code> is an <code>IntermediateField</code>. Should we define <code>SeparableClosure</code> as <code>separableClosure</code> converted to a type?</li>\n</ul>",
        "id": 410472850,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703880080
    },
    {
        "content": "<p>Okay, it seems you are following convention while my suggestions are not. </p>\n<p>Lean will know every field has an extension satisfying IsSepClosure through <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSepClosed.of_isAlgClosed#doc\">docs#IsSepClosed.of_isAlgClosed</a> and the new <code>separableClosure.isSepClosure</code>. Writing <code>separableClosure F (AlgebraicClosure E)</code> is a bit lengthy though. Maybe we could just add an <code>abbrev SeparableClosure : Type _ := separableClosure F (AlgebraicClosure E)</code>.</p>",
        "id": 410474118,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703880898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/410448819\">said</a>:</p>\n<blockquote>\n<p>It would be great if there are universe polymorphic versions, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsPurelyInseparable</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">],</span>\n    <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">RingHom.comp</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→+*</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is good enough for me.</p>\n</blockquote>\n<p>What about this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- If `E / F` is purely inseparable, then for any field `L`, the map `(E →+* L) → (F →+* L)`</span>\n<span class=\"sd\">induced by `algebraMap F E` is injective. In other words, a purely inseparable field extension</span>\n<span class=\"sd\">is an epimorphism in the category of fields. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">IsPurelyInseparable.injective_comp_algebraMap</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsPurelyInseparable</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→+*</span> <span class=\"n\">L</span> <span class=\"bp\">↦</span> <span class=\"n\">f.comp</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">heq</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hF</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ExpChar.exists</span> <span class=\"n\">F</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">isPurelyInseparable_iff_mem_pow</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n  <span class=\"n\">replace</span> <span class=\"n\">heq</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">heq</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">RingHom.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">heq</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">hF</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hprime</span> <span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">one_pow</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">heq</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">charP_of_injective_ringHom</span> <span class=\"o\">(</span><span class=\"n\">f.comp</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">q</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">Fact.mk</span> <span class=\"n\">hprime</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">map_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">iterate_frobenius</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">heq</span>\n  <span class=\"n\">exact</span> <span class=\"n\">iterate_frobenius_inj</span> <span class=\"n\">L</span> <span class=\"n\">q</span> <span class=\"n\">n</span> <span class=\"n\">heq</span>\n\n<span class=\"sd\">/-- If `L` is an algebraically closed field containing `E`, such that the map</span>\n<span class=\"sd\">`(E →+* L) → (F →+* L)` induced by `algebraMap F E` is injective, then `E / F` is</span>\n<span class=\"sd\">purely inseparable. In other words, epimorphisms in the category of fields must be</span>\n<span class=\"sd\">purely inseparable extensions. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">IsPurelyInseparable.of_injective_comp_algebraMap</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAlgClosed</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→+*</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→+*</span> <span class=\"n\">L</span> <span class=\"bp\">↦</span> <span class=\"n\">f.comp</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsPurelyInseparable</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 410483629,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703888182
    },
    {
        "content": "<p>I hope the condition in <code>IsPurelyInseparable.of_injective_comp_algebraMap</code> is correct (copied from <a href=\"https://math.stackexchange.com/a/687914\">https://math.stackexchange.com/a/687914</a>).</p>",
        "id": 410483803,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703888339
    },
    {
        "content": "<p>The statements look fine. In the first theorem [Field L] could be any reduced ring, in which Frobenius is injective. In the second theorem we could replace the IsAlgClosed + Nonempty by a standard minpoly_splits condition, but that requires L be an E-algebra ... Anyway I think we should extract a version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.Lifts.exists_lift_of_splits#doc\">docs#IntermediateField.Lifts.exists_lift_of_splits</a> where <code>algebraMap F K</code> is replaced by <code>algebraMap x.carrier K</code>, which would give us the \"extension lemma\" in the SE answer, and a simpler proof without using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsAlgClosure.equivOfEquiv#doc\">docs#IsAlgClosure.equivOfEquiv</a>.</p>",
        "id": 410486733,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703890716
    },
    {
        "content": "<p>Added <a href=\"https://github.com/leanprover-community/mathlib4/blob/fb6bb408b755eb1fc61fb94e6dcf5661a30c9c57/Mathlib/FieldTheory/PurelyInseparable.lean#L470\">separableClosure.eq_adjoin_of_isAlgebraic</a></p>\n<blockquote>\n<p>If <code>K / E / F</code> is a field extension tower, such that <code>E / F</code> is algebraic, then <code>separableClosure E K = adjoin E (separableClosure F K)</code>.</p>\n</blockquote>\n<p>and <a href=\"https://github.com/leanprover-community/mathlib4/blob/fb6bb408b755eb1fc61fb94e6dcf5661a30c9c57/Mathlib/FieldTheory/PurelyInseparable.lean#L291\">IsPurelyInseparable.injective_comp_algebraMap</a>.</p>",
        "id": 410498356,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703899094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/410486733\">said</a>:</p>\n<blockquote>\n<p>Anyway I think we should extract a version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.Lifts.exists_lift_of_splits#doc\">docs#IntermediateField.Lifts.exists_lift_of_splits</a> where <code>algebraMap F K</code> is replaced by <code>algebraMap x.carrier K</code>, which would give us the \"extension lemma\" in the SE answer, and a simpler proof without using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsAlgClosure.equivOfEquiv#doc\">docs#IsAlgClosure.equivOfEquiv</a>.</p>\n</blockquote>\n<p>Sounds a good idea. Would you like to do that? Since I'm not familiar with that codebase.</p>",
        "id": 410570102,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703967273
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/9392\">#9392</a>. Several outstanding tasks towards the proof (suggestion to alternative routes also welcome):</p>\n<ul>\n<li>\n<p>a version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsTranscendenceBasis.isAlgebraic#doc\">docs#IsTranscendenceBasis.isAlgebraic</a> with <code>IntermediateField.adjoin</code> instead of <code>Algebra.adjoin</code> using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.IsAlgebraic.tower_top_of_injective#doc\">docs#Algebra.IsAlgebraic.tower_top_of_injective</a> (the file doesn't currently import <code>IntermediateField</code>).</p>\n</li>\n<li>\n<p>if <code>f : ι → A</code> is an F-AlgebraicIndependent family, then we have <code>IsFractionRing (MvPolynomial ι R) (IntermediateField.adjoin F (Set.range f))</code> (you need to put the Algebra instance manually though). We can then use <code>MvPolynomial.aeval</code> and <code>IsLocalization.lift</code> to define maps out of <code>adjoin F (Set.range f)</code>. In particular, there is an F-AlgHom sending any F-algebraic independent family in a field to any F-algebraic independent family in another field.</p>\n</li>\n<li>\n<p>transform an algebraic independent family (e.g. replace one element by a nonzero rational function in it, or maybe something similar to <a href=\"https://en.wikipedia.org/wiki/Nielsen_transformation#Definitions\">Neilsen transformation</a> for free groups) to obtain another indpendent family. Combined with the previous item we obtain nontrivial F-endomorphisms of the purely transcendental extension <code>adjoin F (Set.range f)</code>. It would be nice to prove something about the cardinality of the AlgHom/AlgEquiv types, if more precise and general results are possible. (I'd expect F-AlgHoms from F(B) into a field K of transcendental degree d ≥ #B &gt; 0 over F have cardinality equal to #K^#B, because being independent should be a generic property and not reduce the cardinality substantially. Being a generating set (which induces an AlgEquiv) is not generic, but I also expect it not to reduce the cardinality.)</p>\n</li>\n</ul>\n<p>BTW, apparently we don't have transcendence degree and its well-definedness yet.</p>",
        "id": 410749970,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704139030
    },
    {
        "content": "<p>/poll For an infinite separable algebraic extension <code>E/F</code>, we have <code>#(E →ₐ[F] AlgebraicClosure E) = 2 ^ Module.rank F E</code>.<br>\nIt's mathematically trivial.<br>\nIt's true but requires some proof.<br>\nI'm not sure if it's true.<br>\nIt's not always true.</p>",
        "id": 410950027,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704252633
    },
    {
        "content": "<p>Just a fun survey to gauge how valuable it is to formalize this :)<br>\nThe first option is meant to say: It is trivial given that the number of embeddings is equal to the rank in the finite case.</p>",
        "id": 410950050,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704252662
    },
    {
        "content": "<p>I'd vote for the second option but am to shy to actually vote. The first one looks definitely wrong to me. On the other hand, I've never seen that result used in algebra; possibly model theory of alg closed fields would use it, I don't know.</p>",
        "id": 410964024,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1704263693
    },
    {
        "content": "<p>I'm not sure if it is true, but I would be more inclined to vote for the second option if you had added the assertion that <code>E/F</code> has <em>countable</em> dimension.</p>",
        "id": 410997907,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1704281146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/410950050\">said</a>:</p>\n<blockquote>\n<p>Just a fun survey to gauge how valuable it is to formalize this :)</p>\n</blockquote>\n<p>Maybe you need a human-readable proof first <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 411002878,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704283521
    },
    {
        "content": "<p>Here's <a href=\"https://github.com/leanprover-community/mathlib4/compare/master...Field_Card_Emb#diff-b81cd054c6d0d3b5ec67375c744108a376fac72268fb370be590431a9039c467R143-R236\">some code</a> that may convince you it should be true for arbitrary infinite rank :)</p>",
        "id": 411025102,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704292648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/405902140\">said</a>:</p>\n<blockquote>\n<p>Indeed, it happens for any algebraic extension of infinite separable degree, where you make infinitely many choices to define an embedding. I suspect <code>#(Emb F E) = 2^Module.rank F (separableClosure F E)</code> is always true in the infinite case (&lt;= is easy but &gt;= may require transfinite induction), and I agree <code>sepDegree</code> should be redefined and <code>finSepDegree</code> can be kept.</p>\n</blockquote>\n<p>Okay I've now successfully formalized in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9480\">#9480</a> a proof of this conjecture which I made one month ago; some parts are tricky and it takes about 500 lines of code in total, and you can refer to <a href=\"https://github.com/leanprover-community/mathlib4/blob/Field_Card_Emb/Mathlib/SetTheory/Cardinal/FieldEmb.lean?rgh-link-date=2024-01-06T08%3A02%3A04Z#L20-L137\">the docstrings</a> if you want to read about formalization details as well as a proof in natural language.<br>\n... except there's <a href=\"https://github.com/leanprover-community/mathlib4/pull/9480/files#diff-b81cd054c6d0d3b5ec67375c744108a376fac72268fb370be590431a9039c467R624-R625\">one sorry</a> left for the general result about algebraic extensions (the separable case is sorry-free), which awaits <span class=\"user-mention\" data-user-id=\"366779\">@Jz Pan</span>'s work that shows <code>E / separableClosure F E</code> is purely inseparable to enter mathlib.</p>",
        "id": 411486335,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704528688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/411486335\">said</a>:</p>\n<blockquote>\n<p>... except there's <a href=\"https://github.com/leanprover-community/mathlib4/pull/9480/files#diff-b81cd054c6d0d3b5ec67375c744108a376fac72268fb370be590431a9039c467R624-R625\">one sorry</a> left for the general result about algebraic extensions (the separable case is sorry-free), which awaits Jz Pan's work that shows <code>E / separableClosure F E</code> is purely inseparable to enter mathlib.</p>\n</blockquote>\n<p>OK, let me submit the existing works of purely inseparable extensions as a PR.</p>",
        "id": 411498245,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704538915
    },
    {
        "content": "<p>By the way do we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mrow><mi>L</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><munder><mo>∏</mo><mi>ι</mi></munder><mi>ι</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><msup><mo stretchy=\"false\">)</mo><mrow><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>F</mi><msub><mo stretchy=\"false\">]</mo><mi>i</mi></msub></mrow></msup></mrow><annotation encoding=\"application/x-tex\">N_{L/F}(a) = (\\prod\\limits_{\\iota}\\iota(a))^{[L:F]_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3552em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">L</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.838em;vertical-align:-0.95em;\"></span><span class=\"mopen\">(</span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.75em;\"><span style=\"top:-2.15em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">ι</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∏</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ι</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mathnormal mtight\">L</span><span class=\"mrel mtight\">:</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose mtight\"><span class=\"mclose mtight\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> yet?</p>",
        "id": 411498719,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1704539300
    },
    {
        "content": "<p>It's unlikely we have this for general finite extensions. <del>Not sure if</del> it's already in mathlib for finite separable extensions (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.norm_eq_prod_embeddings#doc\">docs#Algebra.norm_eq_prod_embeddings</a>). I think it is used extensively in algebraic number theory.</p>",
        "id": 411503679,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704543358
    },
    {
        "content": "<p>We do have the separable version. But this could allow us to drop separability conditions here and there (including <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.isIntegral_norm#doc\">docs#Algebra.isIntegral_norm</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.norm_norm#doc\">docs#Algebra.norm_norm</a> etc.) and I was wondering if this will follow from your work?</p>",
        "id": 411504127,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1704543774
    },
    {
        "content": "<p>I think this should follows easily. Let me (or someone else) check later.</p>",
        "id": 411504266,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704543910
    },
    {
        "content": "<p>For trace we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=trace_eq_sum_embeddings#doc\">docs#trace_eq_sum_embeddings</a> (why is it in global namespace?). By the way we don't have <code>Algebra.charpoly</code>, but only <code>Matrix.charpoly</code> and <code>LinearMap.charpoly</code> (<code>Algebra.charpoly</code> should be defined easily using <code>Matrix.charpoly</code>).</p>",
        "id": 411504449,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704544094
    },
    {
        "content": "<p>The purely inseparable extension <a href=\"https://github.com/leanprover-community/mathlib4/pull/9488\">#9488</a> is ready for review. There are several small TODOs (e.g. move results to suitable files) I'll do later. There are also big TODOs I decided to leave for future PRs.</p>",
        "id": 411511845,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704551899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/411504449\">said</a>:</p>\n<blockquote>\n<p>By the way we don't have <code>Algebra.charpoly</code>, but only <code>Matrix.charpoly</code> and <code>LinearMap.charpoly</code> (<code>Algebra.charpoly</code> should be defined easily using <code>Matrix.charpoly</code>).</p>\n</blockquote>\n<p>Can you take <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.charpoly#doc\">docs#LinearMap.charpoly</a> of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.lsmul#doc\">docs#LinearMap.lsmul</a>, or is <code>Algebra.charpoly</code> is something else? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.lmul#doc\">docs#Algebra.lmul</a> is used instead in the definition of trace and norm, but we need not use it for <code>charpoly</code> because <code>charpoly</code> isn't a homomorphism ...</p>",
        "id": 411529384,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704567643
    },
    {
        "content": "<p>You're right, <code>Algebra.charpoly</code> is just <code>S → R[X]</code>, it does not preserve addition or multiplication. It is just <del><code>fun x =&gt; (Algebra.lmul R S x).toLinearMap.charpoly</code></del> <code>fun x =&gt; (Algebra.lmul R S x).charpoly</code>.</p>",
        "id": 411533101,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704570311
    },
    {
        "content": "<p><code>Algebra.lmul R S</code> is an AlgHom but <code>Algebra.lmul R S x</code> is already a LinearMap ...</p>",
        "id": 411535824,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704572361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/411498719\">said</a>:</p>\n<blockquote>\n<p>By the way do we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mrow><mi>L</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><munder><mo>∏</mo><mi>ι</mi></munder><mi>ι</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><msup><mo stretchy=\"false\">)</mo><mrow><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>F</mi><msub><mo stretchy=\"false\">]</mo><mi>i</mi></msub></mrow></msup></mrow><annotation encoding=\"application/x-tex\">N_{L/F}(a) = (\\prod\\limits_{\\iota}\\iota(a))^{[L:F]_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3552em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">L</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.838em;vertical-align:-0.95em;\"></span><span class=\"mopen\">(</span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.75em;\"><span style=\"top:-2.15em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">ι</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∏</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ι</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mathnormal mtight\">L</span><span class=\"mrel mtight\">:</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose mtight\"><span class=\"mclose mtight\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> yet?</p>\n</blockquote>\n<p>You can rewrite the LHS as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mrow><mi>L</mi><mi mathvariant=\"normal\">/</mi><mi>S</mi></mrow></msub><mo stretchy=\"false\">(</mo><msub><mi>N</mi><mrow><mi>S</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">N_{L/S}(N_{S/F}(a))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3552em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">L</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">))</span></span></span></span> using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.norm_norm#doc\">docs#Algebra.norm_norm</a> where S is <code>separableClosure F L</code>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mrow><mi>S</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><munder><mo>∏</mo><mi>ι</mi></munder><mi>ι</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">N_{S/F}(a)= (\\prod\\limits_{\\iota}\\iota(a))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3552em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.7em;vertical-align:-0.95em;\"></span><span class=\"mopen\">(</span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.75em;\"><span style=\"top:-2.15em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">ι</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∏</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ι</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">))</span></span></span></span> by the separable case (notice the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ι</mi></mrow><annotation encoding=\"application/x-tex\">\\iota</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ι</span></span></span></span> here are actually restrictions from L), and we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>F</mi><msub><mo stretchy=\"false\">]</mo><mi>i</mi></msub><mo>=</mo><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[L:F]_i = [L:S]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span>. For x in S, we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mrow><mi>L</mi><mi mathvariant=\"normal\">/</mi><mi>S</mi></mrow></msub><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mrow><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mrow><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow></msup><msup><mo stretchy=\"false\">)</mo><mrow><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">N_{L/S}(x^{[L:S]})=(x^{[L:S]})^{[L:S]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2432em;vertical-align:-0.3552em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">L</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mathnormal mtight\">L</span><span class=\"mrel mtight\">:</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mathnormal mtight\">L</span><span class=\"mrel mtight\">:</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mathnormal mtight\">L</span><span class=\"mrel mtight\">:</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span></span></span></span> by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.norm_algebraMap#doc\">docs#Algebra.norm_algebraMap</a>, because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mrow><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x^{[L:S]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.888em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mathnormal mtight\">L</span><span class=\"mrel mtight\">:</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span></span></span></span> is in L, because L/S is purely inseparable. (Or you can take arbitrary q^n-th power of x that lies in L, not necessarily the [L:S]th power). Then by injectivity of Frobenius we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mrow><mi>L</mi><mi mathvariant=\"normal\">/</mi><mi>S</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>x</mi><mrow><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">N_{L/S}(x)=x^{[L:S]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3552em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">L</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.888em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mathnormal mtight\">L</span><span class=\"mrel mtight\">:</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span></span></span></span>, which concludes the proof.</p>",
        "id": 411538460,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704575161
    },
    {
        "content": "<p>Whoops, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.norm_norm#doc\">docs#Algebra.norm_norm</a> currently requires separability ...</p>",
        "id": 411542848,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704579783
    },
    {
        "content": "<p>Yes. One of the applications is to relax the separability condition on that lemma.</p>",
        "id": 411567608,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1704601246
    },
    {
        "content": "<p>For a proof, let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><msup><mi>p</mi><mi>n</mi></msup></msup><mo>=</mo><msup><mi>a</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>∈</mo><msub><mi>F</mi><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\">a^{p^n} = a&#x27; \\in F_s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.88em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.88em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7385em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.791em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mi>L</mi></msub><mi mathvariant=\"normal\">/</mi><mi>F</mi><mo stretchy=\"false\">(</mo><msup><mi>a</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>N</mi><mrow><msub><mi>F</mi><mi>s</mi></msub><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow></msub><mo stretchy=\"false\">(</mo><msup><mi>a</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><msup><mo stretchy=\"false\">)</mo><mrow><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>F</mi><msub><mo stretchy=\"false\">]</mo><mi>i</mi></msub></mrow></msup><mo>=</mo><mo stretchy=\"false\">(</mo><munder><mo>∏</mo><mi>ι</mi></munder><mi>ι</mi><mo stretchy=\"false\">(</mo><msup><mi>a</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><msup><mo stretchy=\"false\">)</mo><mrow><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>F</mi><msub><mo stretchy=\"false\">]</mo><mi>i</mi></msub></mrow></msup></mrow><annotation encoding=\"application/x-tex\">N_L/F(a&#x27;) = N_{F_s/F}(a&#x27;)^{[L:F]_i} = (\\prod\\limits_{\\iota}\\iota(a&#x27;))^{[L:F]_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2432em;vertical-align:-0.3552em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mathnormal mtight\">L</span><span class=\"mrel mtight\">:</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose mtight\"><span class=\"mclose mtight\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.838em;vertical-align:-0.95em;\"></span><span class=\"mopen\">(</span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.75em;\"><span style=\"top:-2.15em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">ι</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∏</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ι</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mathnormal mtight\">L</span><span class=\"mrel mtight\">:</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose mtight\"><span class=\"mclose mtight\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> and use the fact that frobenius is injective.</p>",
        "id": 411567694,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1704601371
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 411572341,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704606517
    },
    {
        "content": "<p>Your first step uses the fact that for a tower L/K/F of extensions and <code>x : K</code>, we have <code>norm F (algebraMap K L x) = norm F x ^ [L : K]</code>, which seems missing in mathlib. It can be proven by observing that <code>L</code> is isomorphic to the direct sum of <code>[L : K]</code> copies of <code>K</code> as a <code>K</code>-module and therefore also as an <code>F</code>-module, and that the LHS is the determinant of <code>x</code> acting on <code>L</code> while the RHS is the determinant of <code>x</code> acting on <code>K ^ [L : K]</code> (both as <code>F</code>-modules). The isomorphism conjugates one x-action to the other, so you can show the determinants are equal using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.det_conj#doc\">docs#LinearMap.det_conj</a>. To compute the determinant of <code>K</code> on <code>K ^ [L : K]</code>, however, you probably need something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.trace_eq_sum_trace_restrict%27#doc\">docs#LinearMap.trace_eq_sum_trace_restrict'</a> (this feels too general; maybe you can work directly with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.blockDiagonal#doc\">docs#Matrix.blockDiagonal</a>) ...</p>",
        "id": 411573255,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704607421
    },
    {
        "content": "<p>Hmm, I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.smul_leftMulMatrix_algebraMap#doc\">docs#Algebra.smul_leftMulMatrix_algebraMap</a> gets most of the way there. (It's used in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.norm_eq_norm_adjoin#doc\">docs#Algebra.norm_eq_norm_adjoin</a>)</p>",
        "id": 411573551,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704607762
    },
    {
        "content": "<p>The first step is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.norm_algebraMap#doc\">docs#Algebra.norm_algebraMap</a></p>",
        "id": 411574315,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1704608650
    },
    {
        "content": "<p>I think it only applies when K=F?<br>\nAnyway, I've been able to <a href=\"https://github.com/leanprover-community/mathlib4/compare/master...Norm_Trace_Separable?quick_pull=1\">generalize norm_eq_norm_adjoin itself</a>.<br>\nFeel free to push to the branch; it would be nice to systematically generalize all Separable assumptions about norm and trace.</p>",
        "id": 411574667,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704609117
    },
    {
        "content": "<p>I pushed a generalization of Algebra.norm_algebraMap.</p>",
        "id": 411575567,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1704610181
    },
    {
        "content": "<p>I also pushed a version not assuming finiteness. It would be nice if it doesn't make the proof 1x longer ...</p>",
        "id": 411577150,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704611737
    },
    {
        "content": "<blockquote>\n<p>I'd expect F-AlgHoms from F(B) into a field K of transcendental degree d ≥ #B &gt; 0 over F have cardinality equal to #K^#B   (here F(B) is a purely transcendental extension of F with basis B)</p>\n</blockquote>\n<p>I thought more about this and by now have convinced myself this is true as well as the following (I now use |X| to denote the cardinality rather than #X):</p>\n<ol>\n<li>\n<p>For a transcendental extension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">K/F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> with tr.deg. d &gt; 0, both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>dim</mtext><mi>F</mi></msub><mo stretchy=\"false\">(</mo><mi>K</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{dim}_F(K)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">dim</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">∣</mo><mi>K</mi><mo fence=\"true\">∣</mo></mrow><annotation encoding=\"application/x-tex\">\\left|K\\right|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose delimcenter\" style=\"top:0em;\">∣</span></span></span></span></span> are equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>max</mi><mo>⁡</mo><mo stretchy=\"false\">{</mo><mrow><mo fence=\"true\">∣</mo><mi>F</mi><mo fence=\"true\">∣</mo></mrow><mo separator=\"true\">,</mo><mi>d</mi><mo separator=\"true\">,</mo><msub><mi mathvariant=\"normal\">ℵ</mi><mn>0</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\max\\{\\left|F\\right|, d, \\aleph_0\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">max</span><span class=\"mopen\">{</span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose delimcenter\" style=\"top:0em;\">∣</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\">ℵ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span>. (Clearly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>dim</mtext><mi>F</mi></msub><mo stretchy=\"false\">(</mo><mi>K</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mrow><mo fence=\"true\">∣</mo><mi>K</mi><mo fence=\"true\">∣</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\text{dim}_F(K)\\le\\left|K\\right|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">dim</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose delimcenter\" style=\"top:0em;\">∣</span></span></span></span></span>, and the upper bound readily follows from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.cardinal_mk_le_max#doc\">docs#MvPolynomial.cardinal_mk_le_max</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.IsAlgebraic.cardinal_mk_le_max#doc\">docs#Algebra.IsAlgebraic.cardinal_mk_le_max</a>. For the lower bound, it's easy to exhibit linearly independent subsets of cardinalities |F| (take 1/(x-a) for a in F), d (take a transcendence basis), and ℵ₀ (take X^n for n in ℕ).</p>\n</li>\n<li>\n<p>The number of F-AlgHoms from F(B) to K is clearly bounded above by |K|^|B|. To show it's bounded below by the same, note that |K|=max(|F|,d,ℵ₀) by the above. Showing there are at least |F|^|B| F-AlgHoms is easy: just choose an injective map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> to a transcendence basis of K/F, then for every function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>:</mo><mi>B</mi><mo>→</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">a : B \\to F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>, there is a F-AlgHom sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>a</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(b)+a(b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>∈</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">b\\in B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>. If d &lt; ℵ₀, we show there are ℵ₀^|B| F-AlgHoms by sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>b</mi><msup><mo stretchy=\"false\">)</mo><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f(b)^{n(b)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">b</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span> for each function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>:</mo><mi>B</mi><mo>→</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">n : B \\to \\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>. If d ≥ ℵ₀, then we can partition d into |B| (≤ d) parts of size d, so there are at least d^|B| injective maps from B to d, which gives rise to at least d^|B| F-AlgHoms. (If d &lt; |B| there is no F-AlgHom at all, due to well-definedness of tr.deg.)</p>\n</li>\n</ol>",
        "id": 411585334,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704619621
    },
    {
        "content": "<ol start=\"3\">\n<li>\n<p>The same argument can be used to count the number of F-automorphisms (AlgEquiv) of F(B): those <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>a</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(b)+a(b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span> readily produce |F|^|B| automorphisms. If |B| ≥ ℵ₀, we have |B| = |B x B| and we can show <code>B ≃ B</code> has cardinality exactly |B|^|B| because for each function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>B</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">f : B \\to B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> and fixed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><mn>0</mn></msub><mo>∈</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">b_0 \\in B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, the map that sends <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>b</mi><mo separator=\"true\">,</mo><msub><mi>b</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>B</mi><mo>×</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">(b, b_0) \\in B \\times B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(b, f(b))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">))</span></span></span></span> can be extended to a self-bijection of B x B. These self-bijections of B give rise to F-AlgEquivs of F(B). If |B| &lt; ℵ₀, we need to exhibit ℵ₀^|B|=ℵ₀ F-AlgEquivs of F(B), which is possible if F is infinite, or if |B| &gt; 1 (send (X,Y) to (X,Y+X^n) for algebraically independent X and Y). If F is a finite field and |B|=1, we get PGL(2,F) of order |F|^3-|F|.</p>\n</li>\n<li>\n<p>To count <code>Field.Emb F F(B)</code>, we specialize to K = algebraic closure of F(B), which has tr.deg. d = |B|, so the answer is |F(B)|^|B| = max{|F|,|B|,ℵ₀}^|B|. (This is not always determined by the dimension max{|F|,|B|,ℵ₀}.) A general transcendental extension E is an algebraic extension of some F(B), but the algebraic part E/F(B), even when small in dimension, can contribute disproportionately to <code>Field.Emb F E</code>. For example, there are only countably many embeddings of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(X)/\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathbb\">Q</span></span></span></span> into its algebraic closure, but uncountably many automorphisms of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"true\">‾</mo></mover><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\overline{\\mathbb{Q}}/\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1389em;vertical-align:-0.25em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span><span style=\"top:-3.8089em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1667em;\"><span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathbb\">Q</span></span></span></span>, even though both extensions have countable dimension.</p>\n</li>\n<li>\n<p>In general, we can't say much about the number of F-endomorphisms of an extension over F with a nontrivial algebraic part: it could be very small or very large. For example, the reals have no nontrivial endomorphisms despite having uncountable transcendental degree over the rationals.</p>\n</li>\n</ol>\n<p>Hopefully this gives as complete a picture as it can be regarding the number of embeddings of a transcendental extension.</p>",
        "id": 411585351,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704619642
    },
    {
        "content": "<p>For the trace and norm thing, maybe an explicit description of <code>Field.embProdEmbOfIsAlgebraic F E K</code> is useful, in particular if one of the extensions is purely inseparable, then <code>Field.Emb F E ≃ Field.Emb F K</code> or <code>Field.Emb E K ≃ Field.Emb F K</code>, it's reasonable if we can give an explicit description of these isomorphisms.</p>",
        "id": 411633893,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704663288
    },
    {
        "content": "<p>Or perhaps it's better to work with <code>_ →ₐ[_] L</code> instead of <code>Field.Emb _ _</code> where <code>L</code> is a sufficient large common field.</p>",
        "id": 411634013,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704663409
    },
    {
        "content": "<p>In the proof of multiplicativity of separable degree, I'm sutck with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.intermediateFieldMap#doc\">docs#IntermediateField.intermediateFieldMap</a>, I think this result doesn't require that <code>e</code> to be an isomorphism, but only injective (which is satisfied automatically since they are fields). Same as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgEquiv.subalgebraMap#doc\">docs#AlgEquiv.subalgebraMap</a>. Am I missing something? The related one is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgEquiv.ofInjective#doc\">docs#AlgEquiv.ofInjective</a>, but it can only map the whole ring, but not subalgebras inside it.</p>",
        "id": 412004679,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704831057
    },
    {
        "content": "<p>The first two are computable so they require the inverses from the AlgEquivs.</p>",
        "id": 412005473,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704831373
    },
    {
        "content": "<p>I see.</p>\n<p>I think I have another way to tackle this. Suppose <code>i : E →ₐ[F] K</code>, <code>S : IntermediateField F E</code>, and <code>S' := S.map i</code>. Then <code>S' = (i.comp S.val).fieldRange</code> should be true. Then I can use <code>AlgEquiv.ofInjective</code> to get that isomorphism.</p>",
        "id": 412005886,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704831545
    },
    {
        "content": "<p>We have two related results: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgHom.fieldRange_eq_map#doc\">docs#AlgHom.fieldRange_eq_map</a>  and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgHom.map_fieldRange#doc\">docs#AlgHom.map_fieldRange</a>, but not the result I mentioned.</p>",
        "id": 412006079,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704831628
    },
    {
        "content": "<p>Oh, I can combine them with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subalgebra.range_val#doc\">docs#Subalgebra.range_val</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.range_val#doc\">docs#IntermediateField.range_val</a>  or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.fieldRange_val#doc\">docs#IntermediateField.fieldRange_val</a>. Great!</p>",
        "id": 412006465,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704831796
    },
    {
        "content": "<p>I'm stuck with the following: do we have this?</p>\n<blockquote>\n<p>If <code>K / E / F</code> are field extensions, <code>L</code> is an intermediate field of <code>K / F</code>, <code>B</code> is an <code>F</code>-basis of <code>L</code>, then <code>B</code> generates <code>E(L)</code> as an <code>E</code>-vector space. In particular, <code>[E(L) : E] ≤ [L : F]</code>.</p>\n</blockquote>\n<p>I think this holds whenever one of <code>L / F</code> and <code>E / F</code> is algebraic. It's not true if both of them are not algebraic, for example if <code>K=F(X,Y)</code>, <code>L=F(X)</code> and <code>E=F(Y)</code>.</p>",
        "id": 412611295,
        "sender_full_name": "Jz Pan",
        "timestamp": 1705089367
    },
    {
        "content": "<p>I think the key is to show that the E-span of a B is a subalgebra (i.e. it contains 1 and is closed under multiplication), and then it follows easily that it equals the E-subalgebra of K generated by L (let me denote it by E[L]). For this you need to write the product of two elements in B as a F-linear combination of  elements in B, which, when you multiply by an element of E, will be an E-linear combination of elements in B, i.e. in the E-span of B. Then, if L is algebraic over F then E[L] is algebraic over E (or maybe use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.adjoin_algebraic_toSubalgebra#doc\">docs#IntermediateField.adjoin_algebraic_toSubalgebra</a> directly), and if E is algebraic over F then E[L] is algebraic over L (this one may be hard to state or prove), so in either case E[L] will be a field, so it must equal the intermediate field of K/E generated by L.</p>",
        "id": 412651281,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1705109037
    },
    {
        "content": "<p>Oh, and we could add a <code>Subalgebra</code> version of it, which doesn't require any algebraicity conditions I think.</p>",
        "id": 412696454,
        "sender_full_name": "Jz Pan",
        "timestamp": 1705141712
    },
    {
        "content": "<p>I think the following is equivalent to the above statement:</p>\n<blockquote>\n<p>If <code>{ u_i }</code> is an <code>F</code>-basis of <code>L</code>, <code>{ v_j }</code> is an <code>F</code>-basis of <code>E</code>, then <code>{ u_i * v_j }</code> generates <code>E(L)</code> as an <code>F</code>-vector space.</p>\n</blockquote>\n<p>And this statement is symmetric in <code>E</code> and <code>L</code> (of course this means that they should be <code>IntermediateField F K</code>). I think it's closely related to linearly disjoint. Maybe we should call it <code>LinearGenerates</code>?</p>",
        "id": 412705015,
        "sender_full_name": "Jz Pan",
        "timestamp": 1705147651
    },
    {
        "content": "<blockquote>\n<p>Oh, and we could add a <code>Subalgebra</code> version of it, which doesn't require any algebraicity conditions I think.</p>\n</blockquote>\n<p>Here we go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Adjoin</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">test1b</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">bL</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"n\">ι</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra.toSubmodule</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Submodule.span</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">bL</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">bL</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.mem_span_range_iff_exists_finsupp</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">bL.repr</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n    <span class=\"n\">use</span> <span class=\"n\">y.mapRange</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">algebraMap</span> <span class=\"n\">L</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.total</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n      <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">L</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bL.total_repr</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.total_apply</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.sum</span><span class=\"o\">,</span> <span class=\"n\">map_sum</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">L</span> <span class=\"n\">K</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.sum_mapRange_index</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">zero_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">Finsupp.sum</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Algebra.smul_def</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">L</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">IsScalarTower.algebraMap_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">bL</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Algebra.adjoin_eq_of_le</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h0.trans</span> <span class=\"o\">(</span><span class=\"n\">Algebra.span_le_adjoin</span> <span class=\"n\">E</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin_mono</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">bL</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Submonoid.closure</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">bL</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">Submonoid.closure_induction</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">bL</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one_mem</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"bp\">↦</span> <span class=\"n\">mul_mem</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Algebra.adjoin_eq_span_of_subset</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h2.trans</span> <span class=\"n\">h0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It only requires <code>CommSemiring</code> but not <code>Field</code>.</p>\n<p>I found that using <code>Submodule.span</code> is more convenient than using <code>Function.Surjective (Finsupp.total ...)</code>, since it has more APIs.</p>",
        "id": 412712964,
        "sender_full_name": "Jz Pan",
        "timestamp": 1705155206
    },
    {
        "content": "<p>This is even shorter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- NOTE: In fact it only requires `F`, `E`, `K` to be `CommSemiring`.</span>\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">test1b'</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra.toSubmodule</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Subalgebra.toSubmodule</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">E</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:=</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">Submodule.span_le_restrictScalars</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">S</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">E</span> <span class=\"n\">S</span> <span class=\"n\">at</span> <span class=\"n\">h0</span>\n  <span class=\"k\">have</span> <span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">Submodule.subset_span</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">E</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Algebra.adjoin_eq_of_le</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h0.trans</span> <span class=\"o\">(</span><span class=\"n\">Algebra.span_le_adjoin</span> <span class=\"n\">E</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin_mono</span> <span class=\"n\">hS</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Submonoid.closure</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">Submonoid.closure_induction</span> <span class=\"n\">h</span> <span class=\"n\">hS</span> <span class=\"o\">(</span><span class=\"n\">one_mem</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">mul_mem</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">Algebra.adjoin_eq_span_of_subset</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h2.trans</span> <span class=\"n\">h0</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- NOTE: In fact it only requires `F`, `E`, `K` to be `CommSemiring`.</span>\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">test1b</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">bL</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"n\">ι</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra.toSubmodule</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Submodule.span</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">bL</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">test1b'</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">L.range_isScalarTower_toAlgHom</span><span class=\"o\">,</span> <span class=\"n\">Submodule.map_span</span><span class=\"o\">,</span> <span class=\"n\">Submodule.map_top</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">Set.range_comp</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">Submodule.map</span> <span class=\"n\">L.val</span><span class=\"o\">)</span> <span class=\"n\">bL.span_eq.symm</span>\n</code></pre></div>",
        "id": 412735987,
        "sender_full_name": "Jz Pan",
        "timestamp": 1705174817
    },
    {
        "content": "<p>What about calling it <code>Subalgebra.adjoin_eq_span_of_eq_span</code> and <code>Subalgebra.adjoin_eq_span_basis</code>?</p>",
        "id": 412736418,
        "sender_full_name": "Jz Pan",
        "timestamp": 1705175333
    },
    {
        "content": "<p>Now I'm stuck at this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Adjoin</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- TODO: move to suitable location</span>\n<span class=\"c1\">-- NOTE: In fact it only requires `F`, `E`, `K` to be `CommSemiring`.</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Subalgebra.adjoin_eq_span_of_eq_span</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra.toSubmodule</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Subalgebra.toSubmodule</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">E</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:=</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">Submodule.span_le_restrictScalars</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">S</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">E</span> <span class=\"n\">S</span> <span class=\"n\">at</span> <span class=\"n\">h0</span>\n  <span class=\"k\">have</span> <span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">Submodule.subset_span</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">E</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Algebra.adjoin_eq_of_le</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h0.trans</span> <span class=\"o\">(</span><span class=\"n\">Algebra.span_le_adjoin</span> <span class=\"n\">E</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin_mono</span> <span class=\"n\">hS</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Submonoid.closure</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">Submonoid.closure_induction</span> <span class=\"n\">h</span> <span class=\"n\">hS</span> <span class=\"o\">(</span><span class=\"n\">one_mem</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">mul_mem</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">Algebra.adjoin_eq_span_of_subset</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h2.trans</span> <span class=\"n\">h0</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- TODO: move to suitable location</span>\n<span class=\"c1\">-- NOTE: In fact it only requires `F`, `E`, `K` to be `CommSemiring`.</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Subalgebra.adjoin_eq_span_basis</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">bL</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"n\">ι</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra.toSubmodule</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Submodule.span</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">bL</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">L.adjoin_eq_span_of_eq_span</span> <span class=\"n\">E</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">L.range_isScalarTower_toAlgHom</span><span class=\"o\">,</span> <span class=\"n\">Submodule.map_span</span><span class=\"o\">,</span> <span class=\"n\">Submodule.map_top</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">Set.range_comp</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">Submodule.map</span> <span class=\"n\">L.val</span><span class=\"o\">)</span> <span class=\"n\">bL.span_eq.symm</span>\n\n<span class=\"c1\">-- TODO: move to suitable location</span>\n<span class=\"c1\">-- NOTE: In fact it only requires `F` be `Field`, others be `CommRing`.</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Subalgebra.adjoin_rank_le</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Module.rank</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">Module.rank</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">bL</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Basis.exists_basis</span> <span class=\"n\">F</span> <span class=\"n\">L</span>\n  <span class=\"n\">change</span> <span class=\"n\">Module.rank</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra.toSubmodule</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">)))</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">L.adjoin_eq_span_basis</span> <span class=\"n\">E</span> <span class=\"n\">bL</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">bL.mk_eq_rank''</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rank_span_le</span> <span class=\"n\">_</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">trans</span> <span class=\"n\">Cardinal.mk_range_le</span>\n\n<span class=\"c1\">-- TODO: move to suitable location</span>\n<span class=\"c1\">-- TODO: In fact it only requires either `L / F` or `E / F` is algebraic</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">IntermediateField.adjoin_rank_le_of_isAlgebraic</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Module.rank</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">Module.rank</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">Module.rank</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">L.toSubalgebra</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toSubalgebra</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">Module.rank</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">L.toSubalgebra.adjoin_rank_le</span> <span class=\"n\">E</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">L.toSubalgebra</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">IsAlgebraic</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">IsAlgebraic.tower_top</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">isAlgebraic_iff.1</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩))</span>\n  <span class=\"c1\">-- rw [adjoin_algebraic_toSubalgebra this]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 412761575,
        "sender_full_name": "Jz Pan",
        "timestamp": 1705192215
    },
    {
        "content": "<p>In the last result I want to <code>rw</code> something, but no matter what I have tried, it always complains about <code>motive is not correct</code>. What should I do?</p>",
        "id": 412761677,
        "sender_full_name": "Jz Pan",
        "timestamp": 1705192282
    },
    {
        "content": "<p>Problem solved (ad-hoc): use <code>(Subalgebra.equivOfEq ...).toLinearEquiv.rank_eq</code></p>",
        "id": 412763798,
        "sender_full_name": "Jz Pan",
        "timestamp": 1705193233
    },
    {
        "content": "<p>Tower law for (infinite) separable degree is added in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9488\">#9488</a>. I'll look at the suggestions on <code>perfectClosure</code> by <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>  in the following days.</p>",
        "id": 412970151,
        "sender_full_name": "Jz Pan",
        "timestamp": 1705329304
    },
    {
        "content": "<p>I should say now it's too many codes in it.</p>",
        "id": 412970375,
        "sender_full_name": "Jz Pan",
        "timestamp": 1705329370
    },
    {
        "content": "<p>In my draft there are two results which are not used in the proof of multiplicity of separable degrees. I don't know if they are useful or not, and if they should be added into the purely inseparable file.</p>\n<blockquote>\n<p>(A) If <code>E / F</code> is purely inseparable, <code>f</code> is a separable irreducible polynomial in <code>F[X]</code>, then it is also irreducible in <code>E[X]</code>.</p>\n<p>(B) If <code>K / E / F</code> is a field extension tower such that <code>E / F</code> is purely inseparable, if <code>x</code> is an element of <code>K</code> whose minimal polynomial over <code>F</code> is separable, then it has the same minimal polynomial over <code>F</code> and over <code>E</code>.</p>\n</blockquote>\n<p>Clearly the (B) implies (A) by taking <code>K</code> to be <code>E</code> adjoin a root of <code>f</code>.</p>",
        "id": 422727923,
        "sender_full_name": "Jz Pan",
        "timestamp": 1708562869
    },
    {
        "content": "<p>The proof of (B) can be proceeded as follows: from <code>F(x) / F</code> separable we know that <code>E(x) / E</code> is also separable (an easy consequence of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=separableClosure.adjoin_eq_of_isAlgebraic#doc\">docs#separableClosure.adjoin_eq_of_isAlgebraic</a>), while <code>E(x) / F(x)</code>is purely inseparable (by <code>pow_mem</code>). Apply the multiplicity of (finite) separable degree we know that <code>F(x) / F</code> and <code>E(x) / E</code> have the same degree, which yields the conclusion. (Or one can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Field.sepDegree_eq_of_isPurelyInseparable_of_isSeparable#doc\">docs#Field.sepDegree_eq_of_isPurelyInseparable_of_isSeparable</a>.) Any other simpler proof?</p>",
        "id": 422728680,
        "sender_full_name": "Jz Pan",
        "timestamp": 1708563406
    },
    {
        "content": "<p>I would throw them in anyway</p>",
        "id": 422762437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708587538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/422762437\">said</a>:</p>\n<blockquote>\n<p>I would throw them in anyway</p>\n</blockquote>\n<p>added as <a href=\"https://github.com/leanprover-community/mathlib4/pull/10882\">#10882</a>. Comments welcome.</p>",
        "id": 423932628,
        "sender_full_name": "Jz Pan",
        "timestamp": 1709170143
    },
    {
        "content": "<p><em>ping</em> any progress on reviewing <a href=\"https://github.com/leanprover-community/mathlib4/pull/10404\">#10404</a>?</p>",
        "id": 426255507,
        "sender_full_name": "Jz Pan",
        "timestamp": 1710302457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>, do you have time to look at this again? If you're happy with this I can merge.</p>",
        "id": 426255996,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710302725
    },
    {
        "content": "<p>Thanks for the ping, I've approved!</p>",
        "id": 426286685,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1710320092
    },
    {
        "content": "<p>What is the situation of separability degree in mathlib? I remember we wanted (or maybe we did) change the definition, or something like that.</p>",
        "id": 426301480,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710325020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/426301480\">said</a>:</p>\n<blockquote>\n<p>What is the situation of separability degree in mathlib? I remember we wanted (or maybe we did) change the definition, or something like that.</p>\n</blockquote>\n<p>We changed the definition of separable degree of infinite extensions. Now all the definitions are consistent, and almost all results are proved, except for the multiplicity of inseparable degree of infinite extensions (needs linearly disjointness), and one or two hard TODOs regarding transcendental extensions.</p>\n<p>Another thing to be done is generalize results of traces, norms, characteristic polynomials, etc., of a finite extension to non-separable case, see the discussion in this thread.</p>",
        "id": 426321517,
        "sender_full_name": "Jz Pan",
        "timestamp": 1710331619
    }
]