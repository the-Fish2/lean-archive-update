[
    {
        "content": "<p>Is there a proof in Mathlib that the number of positive divisors of <br>\np_1^a_1... is (a_1+1)*(a_2+1)...? Could even generalize to UFD's with finitely many units if you want. But I'm just curious about for $\\mathbb{N}$.</p>",
        "id": 416214060,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1705520101
    },
    {
        "content": "<p>Can you state it in lean?</p>",
        "id": 416215016,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705520512
    },
    {
        "content": "<p>I can try, not sure if I stated it correctly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Padics.PadicVal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">count_divisors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">Nat.divisors</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">Finset.fold</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">*</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span><span class=\"o\">((</span><span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Nat.factors</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 416219315,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1705522326
    },
    {
        "content": "<p>I don't think you'll find anything in mathlib in that form. Try rephrasing using <code>Finset.prod</code>?</p>",
        "id": 416220289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705522758
    },
    {
        "content": "<p>Ok</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Padics.PadicVal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">count_divisors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">Nat.divisors</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.prod</span> <span class=\"o\">(</span><span class=\"n\">Nat.factors</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span><span class=\"o\">((</span><span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But do you think it's in Mathlib already?</p>",
        "id": 416330166,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1705523023
    },
    {
        "content": "<p>I don't know -- I haven't memorised all of mathlib yet. I'm looking for it. I see that we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/NumberTheory/ArithmeticFunction.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/NumberTheory/ArithmeticFunction.html</a> so probably you want to be using <code>\\sigma 0</code> rather than <code>(Nat.divisors n).card</code></p>",
        "id": 416330365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705523105
    },
    {
        "content": "<p>I think<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.ArithmeticFunction.IsMultiplicative.multiplicative_factorization#doc\">docs#Nat.ArithmeticFunction.IsMultiplicative.multiplicative_factorization</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.ArithmeticFunction.isMultiplicative_sigma#doc\">docs#Nat.ArithmeticFunction.isMultiplicative_sigma</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.ArithmeticFunction.sigma_zero_apply_prime_pow#doc\">docs#Nat.ArithmeticFunction.sigma_zero_apply_prime_pow</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.ArithmeticFunction.sigma_zero_apply#doc\">docs#Nat.ArithmeticFunction.sigma_zero_apply</a><br>\nshould get you there</p>",
        "id": 416330376,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1705523112
    },
    {
        "content": "<p>Oh nice thanks!</p>",
        "id": 416331197,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1705523469
    },
    {
        "content": "<p>This looks like it gives a statement involving <code>Finsupp.prod</code>. Formalisation is a very precise thing Andy -- there are many ways to formalise an informal statement such as the one in your first post. If you're happy with the <code>Finsupp.prod</code> version then it looks like it's not too hard to prove from what we have, although there will still be some fiddling if you really want to see padicValNat involved.</p>",
        "id": 416331245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705523485
    },
    {
        "content": "<p>Well I am not too wedded to padicVal so that's ok. I did end up writing it as a <a href=\"http://Finset.prod\">Finset.prod</a> instead for no reason.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.ArithmeticFunction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.PNat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Factorization.Basic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat.ArithmeticFunction</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">count_divisors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">PNat</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">Nat.divisors</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.prod</span> <span class=\"o\">(</span><span class=\"n\">n.val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">primeFactors</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">factorization</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sigma_zero_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IsMultiplicative.multiplicative_factorization</span><span class=\"o\">]</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Finsupp.prod</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Finset.prod_congr</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">hp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sigma_zero_apply_prime_pow</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">prime_of_mem_primeFactors</span> <span class=\"n\">hp</span>\n  <span class=\"n\">exact</span> <span class=\"n\">isMultiplicative_sigma</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>The online environment isn't working for me so I'm not sure if I'm missing imports.</p>",
        "id": 416334323,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1705524906
    },
    {
        "content": "<p>I don't think you should be using <code>PNat</code>? Also if you open <code>BigOperators</code>, the RHS can be written as <code>∏ p in n.1.primeFactors, (factorization n p + 1)</code></p>",
        "id": 416334944,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1705525166
    },
    {
        "content": "<p><del>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.ArithmeticFunction.sigma_zero_apply_prime_pow#doc\">docs#Nat.ArithmeticFunction.sigma_zero_apply_prime_pow</a> .</del> [Edit: <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>]</p>",
        "id": 416335529,
        "sender_full_name": "Richard Copley",
        "timestamp": 1705525390
    },
    {
        "content": "<p>Ah can you explain why PNat is not right here? I just wanted to avoid 0</p>",
        "id": 416451942,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1705528522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"662620\">Andy Jiang</span> has marked this topic as resolved.</p>",
        "id": 416648892,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705611641
    },
    {
        "content": "<p>Hi, I was looking for this theorem the other day! Would it be okay to get this into the Mathlib <span class=\"user-mention\" data-user-id=\"662620\">@Andy Jiang</span>? I got a bit too excited and golfed it already. </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">card_divisors</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hnne0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">divisors</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">primeFactors</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">factorization</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">sigma_zero_apply</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isMultiplicative_sigma</span><span class=\"bp\">.</span><span class=\"n\">multiplicative_factorization</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">hnne0</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">prod_congr</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">sigma_zero_apply_prime_pow</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">prime_of_mem_primeFactors</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 440882441,
        "sender_full_name": "Hyeokjun Kwon",
        "timestamp": 1716825711
    },
    {
        "content": "<p>Looks like a good PR, <span class=\"user-mention\" data-user-id=\"479089\">@Hyeokjun Kwon</span>!</p>",
        "id": 440993891,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716886493
    },
    {
        "content": "<p>I was hoping that I would be able to get some sort of permission from <span class=\"user-mention\" data-user-id=\"662620\">@Andy Jiang</span> but it seems he hasn't been active on Zulip for at least 4 months. Should I just make a PR anyway? If so, how should I credit them?</p>",
        "id": 441076294,
        "sender_full_name": "Hyeokjun Kwon",
        "timestamp": 1716914109
    },
    {
        "content": "<p>Two nitpicks on the code. I would avoid using <code>rfl</code> if the definitional equivalence is defined outside the file you are working in. There are certainly times when <code>rfl</code> is unavoidable, but usually if the direct theorem is available, you should use it (or use <code>simp</code>). The other nitpick is that combining <code>·</code> function notation and lambdas is a bit awkward (and it doesn't save you any characters in this case).</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">card_divisors</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hnne0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">divisors</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">primeFactors</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">factorization</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">sigma_zero_apply</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isMultiplicative_sigma</span><span class=\"bp\">.</span><span class=\"n\">multiplicative_factorization</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">hnne0</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">prod_congr</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">support_factorization</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">sigma_zero_apply_prime_pow</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">prime_of_mem_primeFactors</span><span class=\"w\"> </span><span class=\"n\">h</span>\n</code></pre></div>",
        "id": 441080228,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1716915718
    },
    {
        "content": "<p>Personally, I don't think you need permission to submit a PR. The code looks very much your own.</p>",
        "id": 441080871,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1716915971
    },
    {
        "content": "<p>You can add Andy as a co-author of the PR.</p>",
        "id": 441083803,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716917246
    },
    {
        "content": "<p>You don't need to credit me. Thanks for doing the PR.</p>",
        "id": 441117464,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1716931451
    }
]