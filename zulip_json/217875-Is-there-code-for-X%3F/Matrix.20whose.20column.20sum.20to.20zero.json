[
    {
        "content": "<p>Let M be a r × (r+1) matrix such that the sum of its column is equal to zero. Then all square matrices obtained by deleting one column of M have the same determinant in absolute value. (This is a well-known results for people that works on the regulator of a number field <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>) I don't think we have anything like this in the library but we might have something close enough.</p>\n<p>Also, I have the feeling that there is probably a better, more general way, of stating the result.</p>",
        "id": 441726121,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1717166988
    },
    {
        "content": "<p>Hmm, have you already tried stating it in Lean? Because my first naive guess would involve <code>Matrix.reindex</code> and I think it would quickly become quite ugly.</p>",
        "id": 441729242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717167774
    },
    {
        "content": "<p>I have a statement  although I am not sure it is 100% correct (there's a good chance I mixed up rows and columns somewhere):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">BigOperators</span><span class=\"w\"> </span><span class=\"n\">Classical</span>\n\n<span class=\"kd\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Fintype</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Fintype</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">LinearOrderedCommRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hv</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∑</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">j₁</span><span class=\"w\"> </span><span class=\"n\">j₂</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e₁</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">//</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"n\">j₁</span><span class=\"o\">})</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e₂</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">//</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"n\">j₂</span><span class=\"o\">})</span>\n\n<span class=\"kd\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">Matrix.of</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e₁</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">Matrix.of</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e₂</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 441730294,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1717168028
    },
    {
        "content": "<p>But indeed, it gets messy very rapidly and I want to make sure it is the right way to go before working on it more. (Right now, I am trying to see if I could use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.discr#doc\">docs#Algebra.discr</a> somehow...)</p>",
        "id": 441730807,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1717168158
    },
    {
        "content": "<p>I think your statement is even relatively clean...</p>",
        "id": 441738342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717169992
    },
    {
        "content": "<p>I think using <code>reindex</code> is still slightly cleaner there, but not by much</p>",
        "id": 441741120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717170738
    },
    {
        "content": "<p>I would first state it as </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">BigOperators</span><span class=\"w\"> </span><span class=\"n\">Classical</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">LinearOrderedCommRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hv</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∑</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">j₁</span><span class=\"w\"> </span><span class=\"n\">j₂</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">submatrix</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">succAbove</span><span class=\"w\"> </span><span class=\"n\">j₁</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">submatrix</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">succAbove</span><span class=\"w\"> </span><span class=\"n\">j₂</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>An then generalize to Fintype.</p>",
        "id": 441742937,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1717171214
    },
    {
        "content": "<p>Hum, that sounds like a sensible idea...</p>",
        "id": 441743440,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1717171299
    },
    {
        "content": "<p>And I think the factor is <code>Int.negOnePow (j₁ - j₂) • </code> so it works for arbitrary (comm)rings</p>",
        "id": 441743893,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1717171383
    },
    {
        "content": "<p>Check out <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.det_succ_column_zero#doc\">docs#Matrix.det_succ_column_zero</a> and the other Laplacian expansion lemmas for references on how <code>submatrix</code> is used</p>",
        "id": 441782821,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1717182325
    },
    {
        "content": "<p>That's a clean way of stating it!</p>",
        "id": 441857290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717217857
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13475\">#13475</a></p>",
        "id": 442190229,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1717404946
    }
]