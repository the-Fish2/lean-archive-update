[
    {
        "content": "<p>Is there a type of finite set that has a builtin default representation, such as a requirement that the elements can be sorted and a representation of them as a sorted list?</p>",
        "id": 440765128,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716779528
    },
    {
        "content": "<p>Perhaps <a href=\"https://leanprover-community.github.io/mathlib4_docs/Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">Batteries.RBSet</a>.</p>",
        "id": 440770907,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716784363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span> Something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype#doc\">docs#Fintype</a> ?</p>",
        "id": 440782061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716790696
    },
    {
        "content": "<p>If you want to be able to sort the elements, you additionally need to assume something like <code>LinearOrder</code></p>",
        "id": 440782122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716790729
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FinEnum#doc\">docs#FinEnum</a> ?</p>",
        "id": 440782232,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716790787
    },
    {
        "content": "<p>I'm not sure. I'm trying to replace the <code>List</code>s here in this representation of finite state automata with something equivalent to a finite set, but that is computable and displayable.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">SymbolStepMultiple</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">DecidableEq</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">DecidableEq</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">start_state</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">stop_state_list</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">deriving</span><span class=\"w\"> </span><span class=\"n\">Repr</span>\n\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">EpsilonStepMultiple</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">DecidableEq</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">start_state</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">stop_state_list</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">deriving</span><span class=\"w\"> </span><span class=\"n\">Repr</span>\n\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">EpsilonNFA</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">DecidableEq</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">DecidableEq</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">symbol_step_list</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">SymbolStepMultiple</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">epsilon_step_list</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">EpsilonStepMultiple</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">starting_state_list</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">accepting_state_list</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">deriving</span><span class=\"w\"> </span><span class=\"n\">Repr</span>\n</code></pre></div>",
        "id": 440783490,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716791388
    },
    {
        "content": "<p>That is, I want to be able to extract the result of evaluating it and display it.</p>",
        "id": 440783856,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716791542
    },
    {
        "content": "<p>I can do that with <code>List</code>, but trying to prove equivalence to a regular language isn't going so well, so trying to simplify it a bit.</p>",
        "id": 440784949,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716791958
    },
    {
        "content": "<p>Can't you define a representation for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset%3F#doc\">docs#Finset?</a> Either have it <code>unsafe</code>, I'm not sure how that works, or assume some kind of order</p>",
        "id": 440789626,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1716793969
    },
    {
        "content": "<p>Finset already has an (unsafe) representation, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.instRepr#doc\">docs#Finset.instRepr</a></p>",
        "id": 440789928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716794079
    },
    {
        "content": "<p>What are the implications of it being <code>unsafe</code>? Should I be worried about that?</p>",
        "id": 440790705,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716794360
    },
    {
        "content": "<p>It means you can't prove things about the string representation</p>",
        "id": 440804063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716799036
    },
    {
        "content": "<p>If you want something safe, you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sort#doc\">docs#Finset.sort</a> to get a list that you can print \"safely\"</p>",
        "id": 440804174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716799079
    },
    {
        "content": "<p>I see. Thank you.</p>",
        "id": 440899414,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716833262
    }
]