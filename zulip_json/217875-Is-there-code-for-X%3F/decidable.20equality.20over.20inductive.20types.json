[
    {
        "content": "<p>it there a way to automatically infer decidable equality over an inductive type built only from a base with decidable equality?</p>",
        "id": 420862635,
        "sender_full_name": "Jared green",
        "timestamp": 1707629962
    },
    {
        "content": "<p>does <code>deriving DecidableEq</code> work?</p>",
        "id": 420863082,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707630471
    },
    {
        "content": "<p>can i see an example of how that would look:</p>",
        "id": 420863175,
        "sender_full_name": "Jared green",
        "timestamp": 1707630563
    },
    {
        "content": "<p>sure!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span>\n  <span class=\"bp\">|</span> <span class=\"n\">two</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Foo.one</span> <span class=\"bp\">=</span> <span class=\"n\">Foo.two</span> <span class=\"c1\">-- false</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Foo.one</span> <span class=\"bp\">=</span> <span class=\"n\">Foo.one</span> <span class=\"c1\">-- true</span>\n</code></pre></div>",
        "id": 420863245,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707630620
    },
    {
        "content": "<p>it doesnt work.</p>",
        "id": 420863369,
        "sender_full_name": "Jared green",
        "timestamp": 1707630746
    },
    {
        "content": "<p>ah okay... could you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of what you're trying to do?</p>",
        "id": 420863407,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707630820
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n</code></pre></div>",
        "id": 420863517,
        "sender_full_name": "Jared green",
        "timestamp": 1707630954
    },
    {
        "content": "<p>im getting an error further down the line and im not sure whether this is responsible</p>",
        "id": 420863590,
        "sender_full_name": "Jared green",
        "timestamp": 1707631041
    },
    {
        "content": "<p>I see... well, I'm not sure either since I don't know what error you're getting, but in theory adding <code>deriving DecidableEq</code> should derive decidable equality for a type</p>",
        "id": 420863669,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707631154
    },
    {
        "content": "<p>how can we know that?</p>",
        "id": 420863707,
        "sender_full_name": "Jared green",
        "timestamp": 1707631203
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">infer_instance</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 420864255,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707631704
    },
    {
        "content": "<p>of course, if you have <code>open Classical</code> then everything is decidable and you don't need to derive it in the first place</p>",
        "id": 420864322,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707631800
    },
    {
        "content": "<p>well, unless you're trying to avoid <code>noncomputable</code> defs</p>",
        "id": 420864404,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707631898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/decidable.20equality.20over.20inductive.20types/near/420863669\">said</a>:</p>\n<blockquote>\n<p>I see... well, I'm not sure either since I don't know what error you're getting, but in theory adding <code>deriving DecidableEq</code> should derive decidable equality for a type</p>\n</blockquote>\n<p>Note that <code>deriving DecidableEq</code> does not always work. In particular, it doesn't handle:</p>\n<ul>\n<li>Indexed inductive types (I'm not sure <code>DecidableEq</code> is provable for indexed inductives in general)</li>\n<li>Nested inductive types (doable, should be handled soon™)</li>\n<li>Inductives types with recursive occurences inside dependent families such as:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span> <span class=\"c1\">--fails</span>\n</code></pre></div>",
        "id": 420873902,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1707642015
    }
]