[
    {
        "content": "<p>How would I get all Possible Combinations of two Elements in List, excluding Duplicates. If i have a List [a,b,c], I want [[a,b],[b,c],[a,c]]. List.product does not work for me because it would return [a,a], [b,b] and [c,c] as well for this example. Is there a function that does this?</p>",
        "id": 425172394,
        "sender_full_name": "Christian K",
        "timestamp": 1709756954
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.sublistsLen#doc\">docs#List.sublistsLen</a> is the mathlib function but not in the order you requested. Composing with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.reverse#doc\">docs#List.reverse</a> probably works. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.sublists#doc\">docs#List.sublists</a> is also in the right order so you may <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.filter#doc\">docs#List.filter</a> by length.</p>",
        "id": 425173777,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709757549
    },
    {
        "content": "<p>Ok, thank you very much, this works for me. But how can i get these Lists with the length 2 as pairs -&gt; (a,b), (b,c) etc.</p>",
        "id": 425177492,
        "sender_full_name": "Christian K",
        "timestamp": 1709759019
    },
    {
        "content": "<p>You can define a function from <code>List α</code> to  <code>α × α</code> if <code>α</code> is inhabited; otherwise you can still define a function from <code>{l : List α // l.length = 2}</code>to <code>α × α</code> and you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.map#doc\">docs#List.map</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.attach#doc\">docs#List.attach</a> with it.</p>",
        "id": 425181217,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709760704
    },
    {
        "content": "<p>You might also be interested in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.offDiag#doc\">docs#Finset.offDiag</a></p>",
        "id": 425182245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709761153
    },
    {
        "content": "<p>Oh, this looks very interesting. I know the {w : a | prop} Notation, but what does the {w :a // prop } Notation do? The same thing as the other one?</p>",
        "id": 425236028,
        "sender_full_name": "Christian K",
        "timestamp": 1709793123
    },
    {
        "content": "<p>Almost: | defines a set and // defines a type</p>",
        "id": 425236117,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709793182
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.sym2#doc\">docs#List.sym2</a> is similar to your original question, but it gives <code>[(a,a),(a,b),(a,c),(b,b),(b,c),(c,c)]</code>. That's different from <code>List.product</code> since each pair is unordered (that's what <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sym2#doc\">docs#Sym2</a> is, unordered pairs, the so-called \"symmetric square\").</p>",
        "id": 425236545,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709793453
    },
    {
        "content": "<p>If you change the definition of <code>List.sym2</code> to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pairs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Sym2</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">++</span> <span class=\"n\">pairs</span> <span class=\"n\">xs</span>\n</code></pre></div>\n<p>then it should do what you are asking. If you don't want <code>Sym2</code>, you can change that to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pairs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">++</span> <span class=\"n\">pairs</span> <span class=\"n\">xs</span>\n</code></pre></div>\n<p>or modify that to use <code>{l : List α // l.length = 2}</code> instead.</p>",
        "id": 425236719,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709793582
    },
    {
        "content": "<p>Thank you for these great suggestions, the last option works perfectly</p>",
        "id": 425279475,
        "sender_full_name": "Christian K",
        "timestamp": 1709809630
    }
]