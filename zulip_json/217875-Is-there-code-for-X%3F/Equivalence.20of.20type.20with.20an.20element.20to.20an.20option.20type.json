[
    {
        "content": "<p>Do we have something that, given <code>(a : A)</code>, establishes an equivalence between <code>A</code> and <code>Option {b : A // a \\neq b}</code>? I would have assumed this would be called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.optionSubtype#doc\">docs#Equiv.optionSubtype</a>, but that is something else.</p>",
        "id": 424331279,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709329887
    },
    {
        "content": "<p>Isn't that <code>Equiv.optionSubtype a |&gt;.symm (.refl _) |&gt;.1</code>?</p>",
        "id": 424333693,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1709331077
    },
    {
        "content": "<p>does that complete the sorry here somehow?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Equiv.toOption</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">Option</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 424333896,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709331172
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Option</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Equiv.toOption</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">Option</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Equiv.optionSubtype</span> <span class=\"n\">a</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 424334147,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1709331285
    },
    {
        "content": "<p>We do have this directly too. Look around <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pointed#doc\">docs#Pointed</a>, specifically the equivalence with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PartFun#doc\">docs#PartFun</a></p>",
        "id": 424354012,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709344830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Equivalence.20of.20type.20with.20an.20element.20to.20an.20option.20type/near/424354012\">said</a>:</p>\n<blockquote>\n<p>We do have this directly too. Look around <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pointed#doc\">docs#Pointed</a>, specifically the equivalence with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PartFun#doc\">docs#PartFun</a></p>\n</blockquote>\n<p>I don't see this in that file, and the second link is broken, can you point it out?</p>",
        "id": 424420381,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709393287
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11095\">#11095</a> can be scrapped if this object exists somewhere</p>",
        "id": 424420457,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709393359
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PartialFun#doc\">docs#PartialFun</a></p>",
        "id": 424427343,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1709398890
    },
    {
        "content": "<p>It's used within the categorical equivalence. Sorry I'm not at a computer</p>",
        "id": 424435559,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709405210
    }
]