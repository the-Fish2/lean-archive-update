[
    {
        "content": "<p>Do we have a lemma for this or a lemma that would make such a lemma superfluous?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Rat.nat_cast_div_eq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">subst</span> <span class=\"n\">hb</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.div_eq_sub_mod_div</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_div</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_sub_mod</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.cast_ne_zero.mpr</span> <span class=\"n\">hb</span><span class=\"o\">),</span>\n      <span class=\"n\">Nat.cast_sub</span> <span class=\"o\">(</span><span class=\"n\">Nat.mod_le</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">sub_div</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 423369392,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1708944369
    },
    {
        "content": "<p>why are you assuming <code>z : ℚ</code>?</p>",
        "id": 423369863,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708944563
    },
    {
        "content": "<p>Fixed <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 423370007,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1708944614
    },
    {
        "content": "<p>That proof doesn't work (because the statement isn't true) if you <code>import Mathlib</code>. Perhaps this has something to do with Mathlib redefining <code>/</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n      <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">.</span> <span class=\"n\">subst</span> <span class=\"n\">hb</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">EuclideanDomain.mod_eq_sub_mul_div</span><span class=\"o\">,</span> <span class=\"n\">div_sub_div_same</span><span class=\"o\">,</span> <span class=\"n\">sub_sub_self</span><span class=\"o\">,</span> <span class=\"n\">mul_div</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_div_right_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_div_right_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Rat.coe_nat_div_self</span><span class=\"o\">,</span>\n    <span class=\"n\">Nat.div_self</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">hb</span><span class=\"o\">),</span> <span class=\"n\">div_mul_comm</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Did you have a set of imports where it does work?</p>",
        "id": 423378055,
        "sender_full_name": "Richard Copley",
        "timestamp": 1708947638
    },
    {
        "content": "<p>This is a snippet that works stand-alone for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Cast.Field</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.CharZero.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Rat.nat_cast_div_eq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">subst</span> <span class=\"n\">hb</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.div_eq_sub_mod_div</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_div</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_sub_mod</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.cast_ne_zero.mpr</span> <span class=\"n\">hb</span><span class=\"o\">),</span>\n      <span class=\"n\">Nat.cast_sub</span> <span class=\"o\">(</span><span class=\"n\">Nat.mod_le</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">sub_div</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 423382449,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1708949311
    },
    {
        "content": "<p>Here's what changed, for what it's worth:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">xxx</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.coercions</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">xxx</span>\n<span class=\"c1\">-- def xxx : ℕ → ℕ → ℚ :=</span>\n<span class=\"c1\">-- fun a b =&gt; Nat.cast (a % b)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.EuclideanDomain.Instances</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">xxx</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.coercions</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">xxx</span>\n<span class=\"c1\">-- def xxx : ℕ → ℕ → ℚ :=</span>\n<span class=\"c1\">-- fun a b =&gt; Nat.cast a % Nat.cast b</span>\n</code></pre></div>",
        "id": 423386771,
        "sender_full_name": "Richard Copley",
        "timestamp": 1708951043
    },
    {
        "content": "<p>Yes, writing <code>↑(a % b)</code> instead, solves the disambiguity.</p>",
        "id": 423387506,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1708951317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I was shocked too, but I think I have come to terms with it.<br>\nWe <em>want</em> for example <code>(a / b : ℝ)</code> to mean <code>↑a / ↑b</code>, not <code>↑(a / b)</code>.<br>\nAnd we want <code>(a % b : ℚ)</code> to mean <em>something</em>, but <code>↑a % ↑b</code> doesn't make sense until <code>ℚ</code> gets a <code>Mod</code> instance, so <code>↑(a % b)</code> it is.</p>",
        "id": 423391254,
        "sender_full_name": "Richard Copley",
        "timestamp": 1708952645
    },
    {
        "content": "<p>And <span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span>'s is the right solution, not a workaround</p>",
        "id": 423391484,
        "sender_full_name": "Richard Copley",
        "timestamp": 1708952746
    },
    {
        "content": "<p>Since we switched from lean 3 to lean 4 I've never had any idea what we want <code>(a / b : \\R)</code> to mean.</p>",
        "id": 423391861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708952881
    },
    {
        "content": "<p>Neither does lean!</p>",
        "id": 423392757,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708953184
    },
    {
        "content": "<p>We really don't want fields getting this % instance but it's not really possible (I don't think) to turn it off, right?</p>",
        "id": 423397701,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708954747
    },
    {
        "content": "<p>Maybe we could make a linter for % on Q</p>",
        "id": 423398829,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708955109
    }
]