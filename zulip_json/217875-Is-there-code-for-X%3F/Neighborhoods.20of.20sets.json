[
    {
        "content": "<p>Do we have something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.prod</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">metric</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inflate</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">⋃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">ball</span> <span class=\"n\">z</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inflate'</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">⋃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">closed_ball</span> <span class=\"n\">z</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_open_inflate</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">inflate</span> <span class=\"n\">K</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_open_Union</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">is_open_ball</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_compact.is_compact_inflate'</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_compact</span> <span class=\"o\">(</span><span class=\"n\">inflate'</span> <span class=\"n\">K</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">×</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">K</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">closed_ball</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">ε</span> <span class=\"bp\">=</span> <span class=\"n\">inflate'</span> <span class=\"n\">K</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">this</span> <span class=\"bp\">▸</span> <span class=\"n\">is_compact.image</span> <span class=\"o\">(</span><span class=\"n\">hK.prod</span> <span class=\"o\">(</span><span class=\"n\">is_compact_closed_ball</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">continuity</span><span class=\"o\">),</span>\n  <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">z₁</span><span class=\"o\">,</span> <span class=\"n\">z₂</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩,</span> <span class=\"n\">h₃</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mem_Union.mpr</span> <span class=\"o\">⟨⟨</span><span class=\"n\">z₁</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h₃</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_Union.mp</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">complex.dist_eq</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h₂</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Mandatory <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> comment: my goal is to get a statement of differentiability of contour integral as a function of the contour, using <code>has_deriv_at_integral_of_dominated_loc_of_lip</code>, and ultimately to define primitives of holomorphic functions on star-like domains by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">primitive</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">z₀</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∫</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">z₀</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 287310102,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1656063736
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.thickening\">docs#metric.thickening</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.cthickening\">docs#metric.cthickening</a></p>",
        "id": 287310138,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656063767
    },
    {
        "content": "<p>Also, I assume you know about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/star_convex\">docs#star_convex</a>?</p>",
        "id": 287310362,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656063942
    },
    {
        "content": "<p>That's my next step :-)</p>",
        "id": 287310487,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1656064020
    },
    {
        "content": "<p>While I'm asking : do we know that if a compact <code>K</code> is contained in an open set <code>U</code> then so is one of its <code>cthickening</code>s? That follows from continuity of the distance and feels like one more thing that <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> must have done at some point</p>",
        "id": 287310866,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1656064292
    },
    {
        "content": "<p>I think you can get there using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/disjoint.exists_cthickenings\">docs#disjoint.exists_cthickenings</a> (which I needed for geometric Hahn-Banach) by taking <code>s := K</code>, <code>t := Uᶜ</code>.</p>",
        "id": 287311046,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656064411
    },
    {
        "content": "<p>Ah, indeed that's going to give it directly</p>",
        "id": 287311147,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1656064471
    },
    {
        "content": "<p>And while I am using <code>zulip_search [yael]</code> : do we know that the cthickening of a compact set is compact under realistic assumptions?</p>",
        "id": 287311219,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1656064525
    },
    {
        "content": "<p><span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> I think not. The closest we have seems to be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.cthickening_eq_bUnion_closed_ball\">docs#is_compact.cthickening_eq_bUnion_closed_ball</a>, which brings you back to your definition of<code>inflate'</code> above.</p>",
        "id": 287311408,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656064649
    },
    {
        "content": "<p>Yes and then we know that finite <code>bUnion</code>s of compact sets are compact but that's not enough. Since my use case is just the complex plane, I will just use <code>metric.bounded.cthickening</code>. Thanks again!</p>",
        "id": 287311735,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1656064882
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14926\">#14926</a> for the lemma you suggested</p>",
        "id": 287323643,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656073380
    },
    {
        "content": "<p>I got to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">star_convex.segment</span> <span class=\"o\">(</span><span class=\"n\">U_star</span> <span class=\"o\">:</span> <span class=\"n\">star_convex</span> <span class=\"n\">ℝ</span> <span class=\"n\">z₀</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U_open</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">∧</span> <span class=\"n\">cthickening</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">segment</span> <span class=\"n\">ℝ</span> <span class=\"n\">z₀</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">segment</span> <span class=\"n\">ℝ</span> <span class=\"n\">z₀</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">U</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">disjoint_iff_subset_compl_right.mpr</span> <span class=\"o\">((</span><span class=\"n\">compl_compl</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">U_star.segment_subset</span> <span class=\"n\">hz</span><span class=\"o\">)),</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"n\">δ_pos</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h1.exists_cthickenings</span> <span class=\"n\">is_compact_segment</span> <span class=\"n\">U_open.is_closed_compl</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">disjoint_iff_subset_compl_right.mp</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"n\">δ_pos</span><span class=\"o\">,</span> <span class=\"n\">h3.trans</span> <span class=\"o\">(</span><span class=\"n\">compl_subset_comm.mp</span> <span class=\"o\">(</span><span class=\"n\">self_subset_cthickening</span> <span class=\"n\">U</span><span class=\"bp\">ᶜ</span><span class=\"o\">))⟩</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>which is the special case for a segment. Will refactor to use your lemma at some point :-)</p>",
        "id": 287324059,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1656073618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span>, you have it!</p>",
        "id": 288946120,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657289870
    },
    {
        "content": "<p>In Mathlib, <code>nhds</code>, reflects to the neighborhood filter. However, I'm wondering if we have the definition of a neighborhood, as defined in Bourbaki, General Topology:</p>\n<ul>\n<li>a set B is a neighborhood of a set A is a neighborhood of a set A if it contains an open cover of A (or an open set that contains A)</li>\n<li>a set B is a neighborhood of a point x if it is a neighborhood of {x}<br>\nThis came up as I'm working on getting the first few definitions of Bourbaki in <a href=\"https://github.com/JADekker/LeanBourbaki\">https://github.com/JADekker/LeanBourbaki</a>, in the effort to link the results in that book to Mathlib.</li>\n</ul>",
        "id": 423777798,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709112564
    },
    {
        "content": "<p>Is that not literally <code>B ∈ 𝓝 A</code>?</p>",
        "id": 423779020,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709112989
    },
    {
        "content": "<p>The docstring of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=nhds#doc\">docs#nhds</a> claims so</p>",
        "id": 423779463,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709113143
    },
    {
        "content": "<p>Sorry, <code>nhds</code> is the filter of neighborhoods of a point. <code>nhdsSet</code> is the filter of neighborhoods of a set.</p>",
        "id": 423779703,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709113216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Neighborhoods.20of.20sets/near/423779020\">said</a>:</p>\n<blockquote>\n<p>Is that not literally <code>B ∈ 𝓝 A</code>?</p>\n</blockquote>\n<p>Yes, it is. I was just wondering if we had a definition, but that is probably not necessary for that project of course, such small statements are fine as well</p>",
        "id": 423779704,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709113217
    },
    {
        "content": "<p>Yes, we have it, it's <code>𝓝ˢ A</code>.</p>",
        "id": 423780238,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1709113411
    },
    {
        "content": "<p>We do not have a standalone predicate, if that's what you asked.</p>",
        "id": 423780648,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709113544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Neighborhoods.20of.20sets/near/423780648\">said</a>:</p>\n<blockquote>\n<p>We do not have a standalone predicate, if that's what you asked.</p>\n</blockquote>\n<p>Yes. That is what I meant! Thanks!</p>",
        "id": 423781310,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709113764
    },
    {
        "content": "<p>What would such a predicate buy you?</p>",
        "id": 423850469,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709136128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Neighborhoods.20of.20sets/near/423850469\">said</a>:</p>\n<blockquote>\n<p>What would such a predicate buy you?</p>\n</blockquote>\n<p>Nothing in Mathlib. In the above project, the goal is to link each result in Bourbaki’s General Topology to a result in Mathlib, to create a reference for the results. I didn’t want to miss this predicate if it was there, that’s why I asked!</p>",
        "id": 423854993,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709137299
    },
    {
        "content": "<p>I think </p>\n<div class=\"codehilite\" data-code-language=\"YAML\"><pre><span></span><code><span class=\"nt\">neighborhood of a set</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nt\">title</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">'Neighborhood</span><span class=\"nv\"> </span><span class=\"s\">of</span><span class=\"nv\"> </span><span class=\"s\">a</span><span class=\"nv\"> </span><span class=\"s\">set'</span>\n<span class=\"w\">  </span><span class=\"nt\">decl</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">'A</span><span class=\"nv\"> </span><span class=\"s\">∈</span><span class=\"nv\"> </span><span class=\"s\">𝓝ˢ</span><span class=\"nv\"> </span><span class=\"s\">B'</span>\n<span class=\"w\">  </span><span class=\"nt\">comment</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">'In</span><span class=\"nv\"> </span><span class=\"s\">mathlib,</span><span class=\"nv\"> </span><span class=\"s\">neighborhoods</span><span class=\"nv\"> </span><span class=\"s\">of</span><span class=\"nv\"> </span><span class=\"s\">sets</span><span class=\"nv\"> </span><span class=\"s\">do</span><span class=\"nv\"> </span><span class=\"s\">not</span><span class=\"nv\"> </span><span class=\"s\">have</span><span class=\"nv\"> </span><span class=\"s\">their</span><span class=\"nv\"> </span><span class=\"s\">own</span><span class=\"nv\"> </span><span class=\"s\">predicate.</span><span class=\"nv\"> </span><span class=\"s\">A</span><span class=\"nv\"> </span><span class=\"s\">set</span><span class=\"nv\"> </span><span class=\"s\">A</span><span class=\"nv\"> </span><span class=\"s\">is</span><span class=\"nv\"> </span><span class=\"s\">a</span>\n<span class=\"w\">    </span><span class=\"s\">neighborhood</span><span class=\"nv\"> </span><span class=\"s\">of</span><span class=\"nv\"> </span><span class=\"s\">a</span><span class=\"nv\"> </span><span class=\"s\">set</span><span class=\"nv\"> </span><span class=\"s\">B</span><span class=\"nv\"> </span><span class=\"s\">if</span><span class=\"nv\"> </span><span class=\"s\">it</span><span class=\"nv\"> </span><span class=\"s\">lies</span><span class=\"nv\"> </span><span class=\"s\">in</span><span class=\"nv\"> </span><span class=\"s\">the</span><span class=\"nv\"> </span><span class=\"s\">neighborhood-of-sets</span><span class=\"nv\"> </span><span class=\"s\">filter</span><span class=\"nv\"> </span><span class=\"s\">𝓝ˢ</span><span class=\"nv\"> </span><span class=\"s\">B'</span>\n<span class=\"w\">  </span><span class=\"nt\">reference</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">'Definition</span><span class=\"nv\"> </span><span class=\"s\">1.4'</span>\n</code></pre></div>",
        "id": 423856135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709137617
    },
    {
        "content": "<p>is not great since it cannot be turned into a link to source code</p>",
        "id": 423856220,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709137639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Neighborhoods.20of.20sets/near/423856220\">said</a>:</p>\n<blockquote>\n<p>is not great since it cannot be turned into a link to source code</p>\n</blockquote>\n<p>Would something like using ‘nhdsSet’ in the ‘decl’ and writing what I have now as a comment be better?</p>",
        "id": 423857927,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709138152
    },
    {
        "content": "<p>Yes.</p>",
        "id": 423858058,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709138179
    },
    {
        "content": "<p>Thank you, this is very helpful in getting the format right!</p>",
        "id": 423859295,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709138542
    },
    {
        "content": "<p>There will definitely be cases where a single decl won’t be enough.</p>",
        "id": 423859573,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709138621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Neighborhoods.20of.20sets/near/423859573\">said</a>:</p>\n<blockquote>\n<p>There will definitely be cases where a single decl won’t be enough.</p>\n</blockquote>\n<p>Yeah, we will have to see how that plays out, perhaps multiple declarations or comma-separated ones will work. I've updated the file now.</p>",
        "id": 423860810,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709138972
    }
]