[
    {
        "content": "<p>Can someone help with this proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">PrimePowerProperDivisors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat.properDivisors</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 420924957,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1707688565
    },
    {
        "content": "<p>I don't think that's true. What if k &gt;= m? Then a can be anything</p>",
        "id": 420925707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707689225
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">not_PrimePowerProperDivisors</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat.properDivisors</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.prime_two</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ne_of_apply_ne</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">∈</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 420925717,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707689235
    },
    {
        "content": "<p>I think you want a slightly different statement. <code>k</code> is an autoimplicit there</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">PrimePowerProperDivisors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat.properDivisors</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 420925731,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707689249
    },
    {
        "content": "<p>(Thanks to <code>slim_check</code> for the counterexample)</p>",
        "id": 420925760,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707689280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500038\">Timo Carlin-Burns</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Need.20help.20with.20primes.20and.20proper.20divisors.20proof/near/420925731\">said</a>:</p>\n<blockquote>\n<p>I think you want a slightly different statement. <code>k</code> is an autoimplicit there</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">PrimePowerProperDivisors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat.properDivisors</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes this is what I was intending thank you</p>",
        "id": 420925894,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1707689384
    },
    {
        "content": "<p>Start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">PrimePowerProperDivisors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat.properDivisors</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hp</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">Nat.dvd_prime_pow</span> <span class=\"n\">hp</span><span class=\"o\">]</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>and maybe end with</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h.1</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">hk</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h.2.false</span>\n  <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk.le</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">pow_lt_pow_iff_right</span> <span class=\"n\">hp.one_lt</span><span class=\"o\">]</span>\n</code></pre></div>\n</div></div>",
        "id": 420926234,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707689677
    },
    {
        "content": "<p>Here is a version using <code>aesop</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Divisors</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"n\">forward</span><span class=\"o\">]</span> <span class=\"n\">le_of_lt</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">PrimePowerProperDivisors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat.properDivisors</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n_prime</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.dvd_prime_pow</span> <span class=\"n\">n_prime</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">pow_lt_pow_iff_right</span> <span class=\"n\">n_prime.one_lt</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 420929204,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707692487
    },
    {
        "content": "<p>Thank you! These do work; however, the <code>pow_lt_pow_iff_right</code> is deprecated and is replaced by <code>pow_lt_pow_iff</code> in Mathlib4 if anyone comes across this zulip chat in the future.</p>",
        "id": 420942166,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1707704282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"628490\">Colin Jones ⚛️</span> has marked this topic as resolved.</p>",
        "id": 420942207,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707704285
    },
    {
        "content": "<p>Isn't it the opposite? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=pow_lt_pow_iff#doc\">docs#pow_lt_pow_iff</a> says that it's deprecated in favor of <code>pow_lt_pow_iff_right</code></p>",
        "id": 420942357,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707704415
    },
    {
        "content": "<p>Sorry my mistake. For some reason, though, my VS code did not recognize <code>pow_lt_pow_iff_right</code> but did recognize <code>pow_lt_pow_iff</code>.</p>",
        "id": 420942434,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1707704507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"628490\">Colin Jones ⚛️</span> has marked this topic as unresolved.</p>",
        "id": 420943216,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707705218
    },
    {
        "content": "<p>How would I show that <code>{n^k | k &lt; m}</code> has type <code>Finset \\N</code></p>",
        "id": 420943276,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1707705259
    },
    {
        "content": "<p>Because I would like to take a finite sum over it in a future proof, but that requires a Finset. I think it is a Finset because the numbers n, k and m are finite so there should be a way to let lean know that this set can be a Finset</p>",
        "id": 420943343,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1707705341
    },
    {
        "content": "<p>Currently <code>Finset</code> doesn't support set comprehension syntax. The moral equivalent of <code>{n^k | k &lt; m}</code> is <code>Finset.image (n ^ ·) (Finset.range m)</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Divisors</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"n\">forward</span><span class=\"o\">]</span> <span class=\"n\">le_of_lt</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">PrimePowerProperDivisors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat.properDivisors</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.image</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n_prime</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.dvd_prime_pow</span> <span class=\"n\">n_prime</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">pow_lt_pow_iff_right</span> <span class=\"n\">n_prime.one_lt</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 420945514,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707707499
    },
    {
        "content": "<p>For some reason <code>aesop</code> isn't closing the goal when I post your solution into VS code.</p>",
        "id": 420945904,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1707707863
    },
    {
        "content": "<p>I've added the attribute line as well.</p>",
        "id": 420945938,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1707707883
    },
    {
        "content": "<p>Hmm. It works in <a href=\"https://live.lean-lang.org\">https://live.lean-lang.org</a>. Maybe you have an out of date version of Mathlib?</p>",
        "id": 420946058,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707708002
    },
    {
        "content": "<p>I updated it just now, but the error is still there unfortunately :(</p>",
        "id": 420946454,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1707708363
    },
    {
        "content": "<p>Is there a way to see what <code>aesop</code> is doing to clear the goal. I don't mind using the step by step method</p>",
        "id": 420946611,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1707708531
    },
    {
        "content": "<p><code>aesop?</code> prints out a tactic script which is approximately equivalent to the proof it generated. You could use <code>aesop?</code> in the web editor and copy the script to VS Code. It will be pretty ugly though so you could also adapt <span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span>'s proof above to the finset case</p>",
        "id": 420948540,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707710461
    },
    {
        "content": "<p>Here is the proof that worked.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">PrimePowerProperDivisors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat.properDivisors</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.image</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n_prime</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.dvd_prime_pow</span> <span class=\"n\">n_prime</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">pow_lt_pow_iff</span> <span class=\"n\">n_prime.one_lt</span>\n  <span class=\"n\">unhygienic</span> <span class=\"n\">ext</span>\n  <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.mem_properDivisors</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_image</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_range</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">a_1</span>\n    <span class=\"n\">unhygienic</span> <span class=\"n\">with_reducible</span> <span class=\"n\">aesop_destruct_products</span>\n    <span class=\"n\">aesop_subst</span> <span class=\"n\">right_1</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span>\n    <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">fwd</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">right</span><span class=\"o\">)</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Exists.intro</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"n\">on_goal</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">Eq.refl</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">a_1</span>\n    <span class=\"n\">unhygienic</span> <span class=\"n\">with_reducible</span> <span class=\"n\">aesop_destruct_products</span>\n    <span class=\"n\">aesop_subst</span> <span class=\"n\">right</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_true</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">fwd</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">left</span><span class=\"o\">)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Exists.intro</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"n\">on_goal</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">Eq.refl</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span>\n<span class=\"c1\">-- with credit to Timo Carlin-Burns &amp; Ruben Van de Velde</span>\n</code></pre></div>",
        "id": 421098926,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1707761870
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"628490\">Colin Jones ⚛️</span> has marked this topic as resolved.</p>",
        "id": 421098957,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707761879
    }
]