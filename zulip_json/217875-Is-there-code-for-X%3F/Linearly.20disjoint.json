[
    {
        "content": "<p>I think we don't have linearly disjoint <a href=\"https://en.wikipedia.org/wiki/Linearly_disjoint\">https://en.wikipedia.org/wiki/Linearly_disjoint</a> in mathlib yet. I think I come to a point that I have to use such concepts.</p>",
        "id": 409430232,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703178317
    },
    {
        "content": "<blockquote>\n<p>algebras <code>A</code>, <code>B</code> over a field <code>k</code> inside some field extension <code>Ω</code> of <code>k</code> are said to be linearly disjoint over <code>k</code> if the following equivalent conditions are met:</p>\n<ul>\n<li>The map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><msub><mo>⊗</mo><mi>k</mi></msub><mi>B</mi><mo>→</mo><mi>A</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\"> A\\otimes _{k}B\\to AB </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> induced by <code>( x , y ) ↦ x y</code> is injective.</li>\n<li>Any <code>k</code>-basis of <code>A</code> remains linearly independent over <code>B</code>.</li>\n<li>If <code>u_i , v_j</code> are <code>k</code>-bases for <code>A</code>, <code>B</code>, then the products <code>u_i v_j</code> are linearly independent over <code>k</code>.</li>\n</ul>\n</blockquote>",
        "id": 409430556,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703178433
    },
    {
        "content": "<p>But I only know the following definition: for any <code>k</code>-embeddings of <code>A</code> and <code>B</code> into <code>Ω</code>, the intersection of their images is <code>k</code>. Is this definition correct?</p>\n<p>[EDIT] I don't think so, unless <code>Ω</code> is sufficiently large such that the above-mentioned embeddings exist, and such that <code>Ω / k</code> is normal.</p>\n<p>More references: <a href=\"https://stacks.math.columbia.edu/tag/09IC\">https://stacks.math.columbia.edu/tag/09IC</a><br>\n<a href=\"https://encyclopediaofmath.org/wiki/Linearly-disjoint_extensions\">https://encyclopediaofmath.org/wiki/Linearly-disjoint_extensions</a><br>\n<a href=\"https://mathoverflow.net/questions/8324/what-does-linearly-disjoint-mean-for-abstract-field-extensions\">https://mathoverflow.net/questions/8324/what-does-linearly-disjoint-mean-for-abstract-field-extensions</a> &lt;-- it can be defined without mentioning <code>Ω</code>, namely, use the definition that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><msub><mo>⊗</mo><mi>k</mi></msub><mi>B</mi></mrow><annotation encoding=\"application/x-tex\"> A\\otimes_kB </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is a field<br>\n<a href=\"https://math.stackexchange.com/questions/381775/when-are-nonintersecting-finite-degree-field-extensions-linearly-disjoint\">https://math.stackexchange.com/questions/381775/when-are-nonintersecting-finite-degree-field-extensions-linearly-disjoint</a></p>",
        "id": 409431547,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703178796
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IntermediateField</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">Ω</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">k</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">k</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">k</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">LinearlyDisjoint</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"bp\">Ω</span><span class=\"o\">),</span> <span class=\"n\">i.range</span> <span class=\"bp\">⊓</span> <span class=\"n\">j.range</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span>\n</code></pre></div>",
        "id": 409431587,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703178814
    },
    {
        "content": "<p>The particular result I need to use is: if <code>A</code> and <code>B</code> are linearly disjoint intermediate fields of <code>Ω / k</code>, then the degree of <code>A ⊔ B / A</code> and <code>B / k</code> are equal.</p>",
        "id": 409431956,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703178934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/409431547\">said</a>:</p>\n<blockquote>\n<p>But I only know the following definition: for any <code>k</code>-embeddings of <code>A</code> and <code>B</code> into <code>Ω</code>, the intersection of their images is <code>k</code>. Is this definition correct?</p>\n</blockquote>\n<p>Using this definition, it's clear that if <code>A / k</code> is separable and <code>B / k</code> is purely inseparable, then they are linearly disjoint.</p>",
        "id": 409432325,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703179063
    },
    {
        "content": "<blockquote>\n<p>But I only know the following definition: for any k-embeddings of A and B into Ω, the intersection of their images is k. Is this definition correct?<br>\n[EDIT] I don't think so, unless Ω is sufficiently large such that the above-mentioned embeddings exist, and such that Ω / k is normal.</p>\n</blockquote>\n<p>I doubt the definition is correct, because <a href=\"https://math.stackexchange.com/a/3009197/12932\">this answer</a> is supposed to be a counterexample. It says there's a inseparable extension disjoint from the perfect closure, and since the perfect closure is normal, it remains disjoint from the inseparable extension no matter how you change their embeddings. The thing that I fail to see is why the two extensions are not <strong>linearly</strong> disjoint, but I can prove it if I assume a statement that I can't find anywhere: if L and K are both linearly disjoint from E over F, then the compositum LK is also linearly disjoint from E over F. Now assume this, and assume for contradiction that the inseparable extension is linearly disjoint from the perfect closure. Since the normal closure of the inseparable extension is the compositum of its  conjugates, which are all disjoint from the perfect closure, the normal closure is also linearly disjoint from the perfect closure, but the normal closure can be split into a purely inseparable extension at the bottom followed by a separable extension at the top, and the purely inseparable part is nontrivial and therefore isn't disjoint from the perfect closure, let alone being linearly disjoint.</p>",
        "id": 410103845,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703653438
    },
    {
        "content": "<p>I don't know what linearly disjoint means but is F=Q and E,K,L the three cubic subfields of the splitting field of X^3-2 a counterexample?</p>",
        "id": 410128693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703670772
    },
    {
        "content": "<p>The cubic subfields are the classical example of disjoint subfields that are not linearly disjoint (so they don't give a counterexample to my hypothesis), but they are not disjoint under every embedding (in fact they're identical under suitable embeddings), so they don't give a counterexample to Jz's claim that we can test linear disjointness using disjointness by varying the embeddings.</p>",
        "id": 410168432,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703690475
    },
    {
        "content": "<p>I realized my hypothesis is very far from true: consider the (abelian) Galois extensions Q(√2), Q(√3) and Q(√6) of Q. Since they are Galois you can check linear disjointness by checking the intersections are Q, so they're pairwise linearly disjoint. However, the compositum of Q(√2) and Q(√3) contains Q(√6) so is definitely not linearly disjoint from it ...</p>",
        "id": 410210629,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703717874
    },
    {
        "content": "<p>It's rare that \"X and Y miss A implies the thing generated by X and Y misses A\" is true in general</p>",
        "id": 410212609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703719332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/410103845\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://math.stackexchange.com/a/3009197/12932\">this answer</a> is supposed to be a counterexample. It says there's a inseparable extension disjoint from the perfect closure, and since the perfect closure is normal, it remains disjoint from the inseparable extension no matter how you change their embeddings. The thing that I fail to see is why the two extensions are not <strong>linearly</strong> disjoint</p>\n</blockquote>\n<p>In that example, <code>K/F</code> is a simple extension (namely, generated by a root of <code>f(T):=T^(p^2)+x*T^p+y</code>). To check whether <code>K</code> and <code>F^perf</code> are linearly disjoint over <code>F</code>, we only need to check that whether <code>K\\otimes_F F^perf = F^perf[T]/(f(T))</code> is a field, namely, whether <code>f(T)</code> is still irreducible over <code>F^perf</code>. Clearly <code>f(T)=(T^p+x^(1/p)*T+y^(1/p))^p</code> which is NOT irreducible over <code>F^perf</code>.</p>",
        "id": 410213821,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703720447
    },
    {
        "content": "<p>This in fact proves that <code>K</code> and <code>E:=F(x^(1/p),y^(1/p))</code> are not linearly disjoint over <code>F</code>. It's easy to see that <code>[KE : F] = p^3</code> which is not equal to <code>[K : F] [E : F] = p^4</code>.</p>",
        "id": 410214677,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703721173
    },
    {
        "content": "<blockquote>\n<p>It's rare that \"X and Y miss A implies the thing generated by X and Y misses A\" is true in general</p>\n</blockquote>\n<p>Indeed! That was also roughly how I realized it's wrong <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/410214677\">said</a>:</p>\n<blockquote>\n<p>This in fact proves that <code>K</code> and <code>E:=F(x^(1/p),y^(1/p))</code> are not linearly disjoint over <code>F</code>. It's easy to see that <code>[KE : F] = p^3</code> which is not equal to <code>[K : F] [E : F] = p^4</code>.</p>\n</blockquote>\n<p>Thanks! It's actually a standard fact that an extension is linearly disjoint from the perfect closure iff it's separable (e.g. Theorem 12.15(ii) in Clark's notes). I think I was partially misguided by this example when I made my \"hypothesis\": the compositum of two extensions linearly disjoint from the perfect closure is also linearly disjoint from the perfect closure, because the compositum of two separable extensions is separable. It's also true that an extension is (linearly) disjoint from the (absolute) separable closure (which is Galois) iff it's purely inseparable (almost by definition).</p>\n<p>It's still unclear whether my weaker hypothesis, that K being linearly disjoint from E over F implies the normal closure of K/F is also linearly disjoint from E over F, is true.</p>",
        "id": 410219710,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703724141
    },
    {
        "content": "<p>What is the definition of \"linearly disjoint\" here?</p>",
        "id": 410273689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703759167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/410273689\">said</a>:</p>\n<blockquote>\n<p>What is the definition of \"linearly disjoint\" here?</p>\n</blockquote>\n<p>Here I use the three equivalent definitions in <a href=\"https://en.wikipedia.org/wiki/Linearly_disjoint\">https://en.wikipedia.org/wiki/Linearly_disjoint</a>. According to <a href=\"https://mathoverflow.net/questions/8324/what-does-linearly-disjoint-mean-for-abstract-field-extensions\">https://mathoverflow.net/questions/8324/what-does-linearly-disjoint-mean-for-abstract-field-extensions</a>, if one of the fields are algebraic over the base field, then it is equivalent to that the tensor product is a field.</p>",
        "id": 410282788,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703763955
    },
    {
        "content": "<p>So what about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>=</mo><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">F=\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>=</mo><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">K=\\mathbb{Q}(2^{1/3})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1/3</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>=</mo><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mrow><mo>−</mo><mn>3</mn></mrow></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">E=\\mathbb{Q}(\\sqrt{-3})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1156em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8656em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">−</span><span class=\"mord\">3</span></span></span><span style=\"top:-2.8256em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1744em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 410283749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703764523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/410283749\">said</a>:</p>\n<blockquote>\n<p>So what about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>=</mo><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">F=\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>=</mo><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">K=\\mathbb{Q}(2^{1/3})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1/3</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>=</mo><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mrow><mo>−</mo><mn>3</mn></mrow></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">E=\\mathbb{Q}(\\sqrt{-3})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1156em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8656em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">−</span><span class=\"mord\">3</span></span></span><span style=\"top:-2.8256em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1744em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>?</p>\n</blockquote>\n<p>That is linearly disjoint, you can check it via, for example, <code>x^2+3</code> is still irreducible in <code>K</code>. In fact I believe that two finite extensions with coprime degrees are linearly disjoint.</p>",
        "id": 410285054,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703765194
    },
    {
        "content": "<p>Right, and the normal closure of K/F is not linearly disjoint from E so it's a counterexample to your hypothesis if I've understood things correctly</p>",
        "id": 410293000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703769935
    },
    {
        "content": "<p>Indeed this example works. Thanks! It's so simple that I feel bad about missing it. </p>\n<blockquote>\n<p>for any k-embeddings of A and B into Ω, the intersection of their images is k. Is this definition correct?</p>\n</blockquote>\n<p>I now feel we can find separable counterexamples to this as well.</p>\n<p>Besides: I thought about the proofs of multiplicativity of (in)separability degree, and it seems we need the fact that [KS:K] = [S:F] and [KS:S]=[K:F] for purely inseparable K/F and separable S/F at some point (either equality is equivalent to linearly disjointness in the finite case). The easiest way to show these seem to be showing that an F-linearly independent family in S remains linearly independent over K using <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/410095817\">Cohn's argument</a> in the other thread, then we immediately get the first equality and that KS is isomorphic to the tensor product of K and S over F (linear disjointness), and then we can deduce that any F-linearly independent family in K remains linearly independent over S and get the second equality. I don't know what proof <span class=\"user-mention\" data-user-id=\"366779\">@Jz Pan</span> has in mind but it seems to me that going through linear disjointness can't be avoided.</p>",
        "id": 410321367,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703783837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/410321367\">said</a>:</p>\n<blockquote>\n<p>... but it seems to me that going through linear disjointness can't be avoided.</p>\n</blockquote>\n<p>I think you are right. Although the intermediate result</p>\n<blockquote>\n<p>For <code>K / E / F</code> with <code>E / F</code> algebraic, <code>separableClosure E K = adjoin E (separableClosure F K)</code></p>\n</blockquote>\n<p>can be proved without using linearly disjoint, the proof of multiplicity of (infinite) separable degree (under the assumption that <code>E / F</code> algebraic, which is required, otherwise there are counterexamples) needs it.</p>\n<p>Here is my sketch. Let's denote <code>S := separableClosure F E</code>.</p>\n<ul>\n<li>It's easy to prove that <code>separableClosure F K = separableClosure S K</code>.</li>\n<li>Apply the above intermediate result to <code>K / E / S</code> we know that <code>separableClosure E K = adjoin E (separableClosure S K)</code>.</li>\n<li>Since <code>E / S</code> is purely inseparable and <code>separableClosure S K / S</code> is separable, they are linearly disjoint, hence <code>[separableClosure E K : E] = [separableClosure S K : S]</code>, therefore <code>[K : F]_s = [separableClosure F K : F] = [separableClosure S K : F] = [separableClosure S K : S] [S : F] =[separableClosure E K : E] [S : F] = [K : E]_s [E : F]_s</code>.</li>\n</ul>\n<p>It looks like that the keypoint is to prove <code>[separableClosure E K : E] = [separableClosure S K : S]</code>. Let me see if it can be proved without explicitly define <code>LinearlyDisjoint</code> (but of course we need the property that it preserves linearly independent subsets).</p>",
        "id": 410331784,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703790500
    },
    {
        "content": "<p>Allow me to remind you that Bourbaki  (<em>Algebra</em>, chap 4, §5, n°2) does this in a reasonable generality, the same as the one in Wikipedia, so it seems, namely for subalgebras of a given field extension. Browsing the subsequent pages, this notion is used quite extensively for their development of the (in)separable closures.</p>",
        "id": 410332120,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1703790787
    },
    {
        "content": "<p>Here's an example of two extensions K and L of Q of degree p (a prime) that are disjoint from all conjugates of each other but are not linearly disjoint. Write L=Q(x) and it suffices that the minimal polynomial of x splits into two irreducible polynomials of degree &gt; 1 over K: firstly, KL = K(x) would then have degree &lt;= p(p-2) over Q so K and L can't be linearly disjoint over Q, and secondly, K doesn't contain any root of the minimal polynomial because it doesn't split out a degree 1 factor over K, so K is disjoint from all conjugates of L=Q(x) (since [L:Q] is prime, if K is not disjoint from a conjugate of L it must be equal to it). Such an example is given <a href=\"https://mathoverflow.net/a/120910/3332\">on MO</a>, where p=7 and the minimal polynomial factors into irreducibles of degree 3 and 4 over K.</p>",
        "id": 410392955,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703829307
    },
    {
        "content": "<p>I think the multiplicativity proof I have in mind is slightly less involved since it doesn't require considering <code>separableClosure S K</code>. Let <code>S = separableClosure F E</code>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>E</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> <code>= separableClosure E K</code> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>F</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> <code>= separableClosure F K</code>. We have the intermediate result <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>E</mi></msub><mo>=</mo><mi>E</mi><msub><mi>S</mi><mi>F</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_E=ES_F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and our goal is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><msub><mi>S</mi><mi>E</mi></msub><mo>:</mo><mi>E</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>S</mi><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">[</mo><msub><mi>S</mi><mi>F</mi></msub><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[S_E:E][S:F]=[S_F:F]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span></span></span></span>. Since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><msub><mi>S</mi><mi>F</mi></msub><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">[</mo><msub><mi>S</mi><mi>F</mi></msub><mo>:</mo><mi>S</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>S</mi><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[S_F:F]=[S_F:S][S:F]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span></span></span></span> we just need to show <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><msub><mi>S</mi><mi>E</mi></msub><mo>:</mo><mi>E</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mi>E</mi><msub><mi>S</mi><mi>F</mi></msub><mo>:</mo><mi>E</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">[</mo><msub><mi>S</mi><mi>F</mi></msub><mo>:</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[S_E:E]=[ES_F:E]=[S_F:S]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span>, and this follows from the linear disjointness of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>F</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>. But Cohn actually proves this directly, so no need to introduce linear disjointness here; however if you want to prove the multiplicativity of the <em>in</em>separable degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>K</mi><mo>:</mo><msub><mi>S</mi><mi>F</mi></msub><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mi>K</mi><mo>:</mo><msub><mi>S</mi><mi>E</mi></msub><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[K:S_F]=[K:S_E][E:S]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span>, then it boils down to the other equality <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>E</mi><msub><mi>S</mi><mi>F</mi></msub><mo>:</mo><msub><mi>S</mi><mi>F</mi></msub><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[ES_F:S_F]=[E:S]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span>, which does seem to require the isomorphism with the tensor product as an intermediary.<br>\nI haven't thought through all formalization details though. e.g. S is an <code>IntermediateField F E</code> and you'd need to <code>map</code> it to <code>IntermediateField F K</code> and use <code>inclusion</code> to get a S-algebra structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>F</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 410401525,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703835899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/410392955\">said</a>:</p>\n<blockquote>\n<p>Here's an example of two extensions K and L of Q of degree p (a prime) that are disjoint from all conjugates of each other but are not linearly disjoint.</p>\n</blockquote>\n<p>I see. Abstractly, <code>PSL_2(F_7)</code> has two <del>non-isomorphic</del> non-conjugate subgroups of index 7, hence <code>K</code> and <code>L</code> are disjoint from all conjugates of each other. But it doesn't have subgroups of index 49, so they cannot be linarly disjoint.</p>",
        "id": 410431309,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703855502
    },
    {
        "content": "<p>There are two conjugacy classes of subgroups of index 7, but subgroups in both classes are still isomorphic (to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">S_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>). See e.g. page 6 of <a href=\"https://core.ac.uk/download/pdf/82115272.pdf\">this paper</a> which apparently contains a proof, or page 7 of <a href=\"https://scholarsarchive.byu.edu/cgi/viewcontent.cgi?article=1161&amp;context=etd\">this</a>. (On the other hand <a href=\"https://www.weddslist.com/groups/genus3/psl(2,7).html\">this page</a> seems to wrongly suggest there is only one conjugacy class.)</p>",
        "id": 410451892,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703868665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/410401525\">said</a>:</p>\n<blockquote>\n<p>... Cohn actually proves this directly, so no need to introduce linear disjointness here; however if you want to prove the multiplicativity of the <em>in</em>separable degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>K</mi><mo>:</mo><msub><mi>S</mi><mi>F</mi></msub><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mi>K</mi><mo>:</mo><msub><mi>S</mi><mi>E</mi></msub><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[K:S_F]=[K:S_E][E:S]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span>, then it boils down to the other equality <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>E</mi><msub><mi>S</mi><mi>F</mi></msub><mo>:</mo><msub><mi>S</mi><mi>F</mi></msub><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[ES_F:S_F]=[E:S]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span>, which does seem to require the isomorphism with the tensor product as an intermediary.</p>\n</blockquote>\n<p>Probably we can use the equivalent definition of (2) and (3) of linearly djsoint? I think Cohn's book actually proves the (2) holds. The condition (2) by its definition is not symmetric in <code>A</code> and <code>B</code>, but the condition (3) is. So if we can prove the equivalency of (2) and (3), then we may deduce (2) with <code>A</code> and <code>B</code> exchanged, hence prove the multiplicativity of inseparable degree. Is this correct?</p>",
        "id": 410756467,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704142957
    },
    {
        "content": "<p>The three conditions are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">-</span> <span class=\"n\">The</span> <span class=\"n\">map</span> <span class=\"bp\">$$</span> <span class=\"n\">A</span><span class=\"bp\">\\</span><span class=\"n\">otimes</span> <span class=\"n\">_</span><span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">}</span><span class=\"n\">B</span><span class=\"bp\">\\</span><span class=\"n\">to</span> <span class=\"n\">AB</span> <span class=\"bp\">$$</span> <span class=\"n\">induced</span> <span class=\"kd\">by</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">injective.</span>\n<span class=\"bp\">-</span> <span class=\"n\">Any</span> <span class=\"bp\">`</span><span class=\"n\">k</span><span class=\"bp\">`-</span><span class=\"n\">basis</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">A</span><span class=\"bp\">`</span> <span class=\"n\">remains</span> <span class=\"n\">linearly</span> <span class=\"n\">independent</span> <span class=\"n\">over</span> <span class=\"bp\">`</span><span class=\"n\">B</span><span class=\"bp\">`.</span>\n<span class=\"bp\">-</span> <span class=\"n\">If</span> <span class=\"bp\">`</span><span class=\"n\">u_i</span> <span class=\"o\">,</span> <span class=\"n\">v_j</span><span class=\"bp\">`</span> <span class=\"n\">are</span> <span class=\"bp\">`</span><span class=\"n\">k</span><span class=\"bp\">`-</span><span class=\"n\">bases</span> <span class=\"n\">for</span> <span class=\"bp\">`</span><span class=\"n\">A</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">B</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"k\">then</span> <span class=\"n\">the</span> <span class=\"n\">products</span> <span class=\"bp\">`</span><span class=\"n\">u_i</span> <span class=\"n\">v_j</span><span class=\"bp\">`</span> <span class=\"n\">are</span> <span class=\"n\">linearly</span> <span class=\"n\">independent</span> <span class=\"n\">over</span> <span class=\"bp\">`</span><span class=\"n\">k</span><span class=\"bp\">`.</span>\n</code></pre></div>\n<p>We can certainly connect (2) and (3) directly, but it's not really more difficult than connecting with (1). (We already have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Basis.tensorProduct#doc\">docs#Basis.tensorProduct</a>.) So we might as well just introduce the notion of linear disjointness.</p>",
        "id": 410768164,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704151684
    },
    {
        "content": "<p>This is my first attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Adjoin</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">Field</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Two intermediate fields `A` and `B` of `E / F` are called linearly disjoint, if any `F`-linearly</span>\n<span class=\"sd\">independent subset of `A` remains linearly independent over `B`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">LinearlyDisjoint</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">LinearIndependent</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1.1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">linearlyDisjoint_iff_linearIndependent_mul</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearlyDisjoint</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">y.1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">×</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1.1.1</span> <span class=\"bp\">*</span> <span class=\"n\">x.2.1.1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">LinearlyDisjoint.comm</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">LinearlyDisjoint</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LinearlyDisjoint</span> <span class=\"n\">B</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linearlyDisjoint_iff_linearIndependent_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">linearIndependent_equiv</span> <span class=\"o\">(</span><span class=\"n\">Equiv.prodComm</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">hb</span> <span class=\"n\">ha</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">IntermediateField</span>\n</code></pre></div>",
        "id": 410771242,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704154380
    },
    {
        "content": "<p>Currently I restrict myself to <code>IntermediateField</code>s. Later we'll see if they can be generalized.</p>",
        "id": 410771301,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704154414
    },
    {
        "content": "<p>Also, my writing <code>LinearIndependent F (fun x : a ↦ x.1)</code> is slightly different from that appeared in the definition of <code>Module.rank</code>. Does this matter?</p>",
        "id": 410771410,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704154458
    },
    {
        "content": "<p>Looks good! What's slightly different? To me they look like syntactically equal. You used both linear independence in A and in E in the definition, but it should be easy to convert between them using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.linearIndependent_iff#doc\">docs#LinearMap.linearIndependent_iff</a>.</p>",
        "id": 410773502,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704155681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/410773502\">said</a>:</p>\n<blockquote>\n<p>Looks good! What's slightly different? To me they look like syntactically equal.</p>\n</blockquote>\n<p>In <code>Module.rank</code> it is <code>LinearIndependent F ((↑) : a → A)</code> where <code>a</code> becomes a <code>Subtype</code>, but in <code>LinearIndependent F (fun x : a ↦ x.1)</code> the <code>a</code> is a <code>Set.Elem</code>. It's not clear to me the differences between them, but for the <code>LinearIndependent F (fun x : a × b ↦ x.1.1.1 * x.2.1.1)</code> it's product of two <code>Set.Elem</code>, I don't know how to write it as <code>Subtype</code>.</p>\n<blockquote>\n<p>You used both linear independence in A and in E in the definition, but it should be easy to convert between them using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.linearIndependent_iff#doc\">docs#LinearMap.linearIndependent_iff</a>.</p>\n</blockquote>\n<p>I'm not sure if it's better to write <code>LinearIndependent F (fun x : a ↦ x.1)</code> or <code>LinearIndependent F (fun x : a ↦ x.1.1)</code>, the first one is on <code>A</code>, the second one is on <code>E</code>. They are equivalent since <code>A -&gt; E</code> is injective. But you need some existing theorems to transfer them.</p>",
        "id": 410774383,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704156202
    },
    {
        "content": "<p>Isn't <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Elem#doc\">docs#Set.Elem</a> also a subtype? It's definition is literally <code>↑s = { x : α // x ∈ s }</code>.</p>",
        "id": 410787252,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704164631
    },
    {
        "content": "<p>OK, I have managed to prove the equivalency of (2) and (3):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Adjoin</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.TensorProductBasis</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">Field</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Two intermediate fields `A` and `B` of `E / F` are called linearly disjoint, if any `F`-linearly</span>\n<span class=\"sd\">independent subset of `A` remains linearly independent over `B`. Marked as `protected` because later</span>\n<span class=\"sd\">we will define linearly disjoint for two abstract fields over a base field. -/</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">LinearlyDisjoint</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">},</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">LinearIndependent</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1.1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">key_lemma</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">×</span> <span class=\"n\">b</span> <span class=\"bp\">→₀</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→₀</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">Finsupp.total</span> <span class=\"n\">b</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">y.1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">l.curry.mapRange</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.total</span> <span class=\"n\">b</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">y.1</span><span class=\"o\">))</span> <span class=\"n\">h0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finsupp.total</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">×</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">×</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1.1.1</span> <span class=\"bp\">*</span> <span class=\"n\">x.2.1.1</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">=</span>\n      <span class=\"n\">Finsupp.total</span> <span class=\"n\">a</span> <span class=\"n\">E</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1.1</span><span class=\"o\">)</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">z</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x.1.1</span> <span class=\"bp\">*</span> <span class=\"n\">y.1.1</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.total_apply</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.total_apply</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">Finsupp.sum_mapRange_index</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">zero_smul</span> <span class=\"n\">B</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"bp\">←</span> <span class=\"n\">l.sum_curry_index</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">zero_smul</span> <span class=\"n\">F</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">add_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">Finsupp.sum</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.total_apply</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.sum</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_smul</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">ext</span> <span class=\"n\">y</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Algebra.smul_def</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">x.1.1</span> <span class=\"n\">y.1.1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">LinearlyDisjoint.linearIndependent_mul</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">A.LinearlyDisjoint</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">y.1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">×</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1.1.1</span> <span class=\"bp\">*</span> <span class=\"n\">x.2.1.1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">replace</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">ha</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linearIndependent_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span> <span class=\"n\">hb</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">intro</span> <span class=\"n\">l</span> <span class=\"n\">hl</span>\n  <span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">l.curry.mapRange</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.total</span> <span class=\"n\">b</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">y.1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.zero_apply</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Finsupp.curry_apply</span><span class=\"o\">,</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">l.curry</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.onFinset_apply</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.zero_apply</span><span class=\"o\">]</span> <span class=\"n\">using</span>\n      <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">key_lemma</span> <span class=\"n\">l</span> <span class=\"n\">L</span> <span class=\"n\">rfl</span> <span class=\"bp\">▸</span> <span class=\"n\">hl</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">Finsupp.zero_apply</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">LinearlyDisjoint.of_linearIndependent_mul</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">B</span><span class=\"o\">},</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">y.1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">×</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1.1.1</span> <span class=\"bp\">*</span> <span class=\"n\">x.2.1.1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">A.LinearlyDisjoint</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"n\">ha</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Basis.ofVectorSpaceIndex</span> <span class=\"n\">F</span> <span class=\"n\">B</span>\n  <span class=\"k\">let</span> <span class=\"n\">basis</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"n\">b</span> <span class=\"n\">F</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">Basis.ofVectorSpace</span> <span class=\"n\">F</span> <span class=\"n\">B</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">y.1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">convert</span> <span class=\"n\">basis.linearIndependent</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Basis.extend_apply_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">replace</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linearIndependent_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">intro</span> <span class=\"n\">l</span> <span class=\"n\">hl</span>\n  <span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">Finsupp.finsuppProdEquiv.symm</span> <span class=\"o\">(</span><span class=\"n\">l.mapRange</span> <span class=\"n\">basis.repr</span> <span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.finsuppProdEquiv</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapRange</span>\n      <span class=\"o\">(</span><span class=\"n\">Finsupp.total</span> <span class=\"n\">b</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">y.1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.finsuppProdEquiv.apply_symm_apply</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">Finsupp.mapRange_comp</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)]</span>\n    <span class=\"n\">convert</span> <span class=\"n\">l.mapRange_id.symm</span>\n    <span class=\"n\">ext</span> <span class=\"n\">y</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">convert</span> <span class=\"n\">basis.total_repr</span> <span class=\"n\">y</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Basis.ofVectorSpace_apply_self</span> <span class=\"n\">F</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">key_lemma</span> <span class=\"n\">L</span> <span class=\"n\">l</span> <span class=\"n\">this</span> <span class=\"bp\">▸</span> <span class=\"n\">hl</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.finsuppProdEquiv.symm_apply_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">Finsupp.mapRange</span> <span class=\"n\">basis.repr.symm</span> <span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.mapRange_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Finsupp.mapRange_comp</span> <span class=\"n\">basis.repr.symm</span> <span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">basis.repr</span>\n    <span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">])]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l.mapRange</span> <span class=\"n\">id</span> <span class=\"n\">rfl</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">convert</span> <span class=\"n\">this</span>\n    <span class=\"n\">exact</span> <span class=\"n\">basis.repr.toEquiv.symm_comp_self.symm</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.mapRange_id</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">linearlyDisjoint_iff_linearIndependent_mul</span> <span class=\"o\">:</span>\n    <span class=\"n\">A.LinearlyDisjoint</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">B</span><span class=\"o\">},</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">y.1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">×</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1.1.1</span> <span class=\"bp\">*</span> <span class=\"n\">x.2.1.1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"bp\">↦</span> <span class=\"n\">H.linearIndependent_mul</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">LinearlyDisjoint.of_linearIndependent_mul</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">LinearlyDisjoint.comm</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">A.LinearlyDisjoint</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B.LinearlyDisjoint</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linearlyDisjoint_iff_linearIndependent_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">linearIndependent_equiv</span> <span class=\"o\">(</span><span class=\"n\">Equiv.prodComm</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">H</span> <span class=\"n\">hb</span> <span class=\"n\">ha</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">linearlyDisjoint_comm</span> <span class=\"o\">:</span> <span class=\"n\">A.LinearlyDisjoint</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">B.LinearlyDisjoint</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">LinearlyDisjoint.comm</span><span class=\"o\">,</span> <span class=\"n\">LinearlyDisjoint.comm</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"sd\">/-- Two abstract field `E` and `K` over `F` are called linearly disjoint, if their tensor product</span>\n<span class=\"sd\">over `F` is a field. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">LinearlyDisjoint</span> <span class=\"o\">:=</span> <span class=\"n\">IsField</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">LinearlyDisjoint.isAlgebraic</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">LinearlyDisjoint</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"bp\">∨</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 411070414,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704310939
    },
    {
        "content": "<p><del>But it requires <code>set_option maxHeartbeats 400000</code></del> By splitting it into three parts, it can be removed, but it's still very slow. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> It's struggling to write down such proof.</p>\n<p>Perhaps someone could golf the proof a little bit?</p>\n<p>[EDIT] I found that the two <code>rw [← Finsupp.mapRange_comp]</code> in the proof of <code>LinearlyDisjoint.of_linearIndependent_mul</code> are the same thing: it's <code>basis.repr.symm</code> (which should be proved to be equal to <code>Finsupp.total b B F (fun y ↦ y.1)</code>) and <code>basis.repr</code>. I don't know how to optimize it, though.</p>",
        "id": 411070664,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704311058
    },
    {
        "content": "<p>I'll take a look later! I forgot to mention this, but it would be handy to prove that the existence of a basis of A/F that is linearly independent over B is sufficient to guarantee linear disjointness.</p>",
        "id": 411071503,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704311416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/411071503\">said</a>:</p>\n<blockquote>\n<p>it would be handy to prove that the existence of a basis of A/F that is linearly independent over B is sufficient to guarantee linear disjointness.</p>\n</blockquote>\n<p>OK, noted it.</p>",
        "id": 411073572,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704312319
    },
    {
        "content": "<p>I plan to open a draft PR. Is it better to put it inside <code>FieldTheory</code>, or <code>LinearAlgebra</code>?</p>",
        "id": 411103269,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704328053
    },
    {
        "content": "<p>This is slightly better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">LinearlyDisjoint.of_linearIndependent_mul</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">B</span><span class=\"o\">},</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">y.1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">×</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1.1.1</span> <span class=\"bp\">*</span> <span class=\"n\">x.2.1.1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">A.LinearlyDisjoint</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"n\">ha</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Basis.ofVectorSpaceIndex</span> <span class=\"n\">F</span> <span class=\"n\">B</span>\n  <span class=\"k\">let</span> <span class=\"n\">basis</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"n\">b</span> <span class=\"n\">F</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">Basis.ofVectorSpace</span> <span class=\"n\">F</span> <span class=\"n\">B</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">y.1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">convert</span> <span class=\"n\">basis.linearIndependent</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Basis.extend_apply_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">replace</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linearIndependent_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">intro</span> <span class=\"n\">l</span> <span class=\"n\">hl</span>\n  <span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">Finsupp.finsuppProdEquiv.symm</span> <span class=\"o\">(</span><span class=\"n\">l.mapRange</span> <span class=\"n\">basis.repr</span> <span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.finsuppProdEquiv</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapRange</span>\n      <span class=\"o\">(</span><span class=\"n\">Finsupp.total</span> <span class=\"n\">b</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">y.1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.finsuppProdEquiv.apply_symm_apply</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">Finsupp.mapRange_comp</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)]</span>\n    <span class=\"n\">convert</span> <span class=\"n\">l.mapRange_id.symm</span>\n    <span class=\"n\">ext</span> <span class=\"n\">y</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">convert</span> <span class=\"n\">basis.total_repr</span> <span class=\"n\">y</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Basis.ofVectorSpace_apply_self</span> <span class=\"n\">F</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">key_lemma</span> <span class=\"n\">L</span> <span class=\"n\">l</span> <span class=\"n\">this</span> <span class=\"bp\">▸</span> <span class=\"n\">hl</span><span class=\"o\">),</span> <span class=\"k\">show</span> <span class=\"n\">Finsupp.finsuppProdEquiv</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">Finsupp.mapRange_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>It only requires one <code>rw [← Finsupp.mapRange_comp]</code>.</p>",
        "id": 411105962,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704329513
    },
    {
        "content": "<p><span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span><span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span><span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span> Do we have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Adjoin</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">→₀</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearIndependent</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapRange</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Namely, if a matrix over <code>F</code> has linear independent columns, then its base change over <code>E</code> also has linear independent columns. The only proof I know for it uses matrix determinant.</p>",
        "id": 411239164,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704392681
    },
    {
        "content": "<blockquote>\n<p>the existence of a basis of A/F that is linearly independent over B is sufficient to guarantee linear disjointness.</p>\n</blockquote>\n<p>It seems that I need to use the above result to prove this.</p>",
        "id": 411239775,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704392970
    },
    {
        "content": "<p>Here's an abstract way to prove this:<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.TensorProduct.basis#doc\">docs#Algebra.TensorProduct.basis</a> gives you an isomorphism between <code>E ⊗[F] (a →₀ F)</code> and <code>a →₀ E</code> (same for <code>a</code> replaced with <code>b</code>), and recall a family of vectors in a F-module M is linearly independent iff the induced map (<a href=\"http://Finsupp.total\">Finsupp.total</a>) from <code>a →₀ F</code> to <code>M</code> (<code>= b →₀ F</code> in our case) is injective. What you want to prove is equivalent to that the base-changed map from <code>a →₀ E</code> to <code>E ⊗[F] M ≅ b →₀ E</code> is injective, so all you need is that <code>E/F</code> is flat. Mathlib knows <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Flat.of_free#doc\">docs#Module.Flat.of_free</a>, but our definition of flatness applies to ideals in F, not arbitrary F-modules. Either we wait for Jujian's PRs to land in mathlib (I should probably go back to review them ...), or you could extract lemmas from the proofs of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Flat.directSum#doc\">docs#Module.Flat.directSum</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Flat.self#doc\">docs#Module.Flat.self</a> etc. that applies to an arbitrary module M rather than just ideals.</p>",
        "id": 411263907,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704403558
    },
    {
        "content": "<p>You mean more generally we should prove that if <code>M</code> is a <code>F</code>-module, a subset of <code>M</code> is <code>F</code>-linearly independent (namely, the induced linear map <code>(a →₀ F) → M</code> is injective), then the induced subset in <code>M ⊗[F] E</code> is <code>E</code>-linearly independent. So we need to prove that <code>- ⊗[F] E</code> preserves injection (when <code>E / F</code> is flat).</p>",
        "id": 411271254,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704407141
    },
    {
        "content": "<p>But that proof must involve determinant argument as I said before, if I remembered correctly (from Atiyah-Macdonald or Matsumura).</p>",
        "id": 411271384,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704407211
    },
    {
        "content": "<p>I'm not sure what's the determinant argument? We're not necessarily dealing with a square matrix, right?</p>\n<blockquote>\n<p>So we need to prove that - ⊗[F] E preserves injection (when E / F is flat).</p>\n</blockquote>\n<p>Yes, currently the flatness argument for a free F-module E goes like this: (1) <code>- ⊗[F] F</code> preserves injectivity because we have natural isomorphisms <code>M ⊗[F] F ≅ M</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Flat.self#doc\">docs#Module.Flat.self</a>); (2) if <code>- ⊗[F] N i</code> preserves injectivity for a family of modules <code>N i</code>, then <code>- ⊗[F] N</code> also preserves injectivity, where <code>N</code> is the direct sum of the <code>N i</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Flat.directSum#doc\">docs#Module.Flat.directSum</a>); (3) if <code>- ⊗[F] M</code> preserves injectivity and <code>M</code> and <code>N</code> are isomorphic <code>F</code>-modules, then <code>- ⊗[F] N</code> also preserves injectivity (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Flat.of_linearEquiv#doc\">docs#Module.Flat.of_linearEquiv</a>); (4) since <code>a →₀ F</code> is isomorphic to a direct sum of copies of <code>F</code>, <code>- ⊗[F] a →₀ F</code> preserves injectivity by (1), (2) and (3) (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Flat.finsupp#doc\">docs#Module.Flat.finsupp</a>); (5) since a free module <code>M</code> is isomorphic to some <code>a →₀ F</code>, <code>- ⊗[F] M</code> preserves injectivity by (3) and (4) (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Flat.of_free#doc\">docs#Module.Flat.of_free</a>). However, currently all these proofs quantify over ideals of <code>R</code> rather than arbitrary modules, and you could just lift the quantifier one level up to get the general versions.</p>",
        "id": 411278045,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704410946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/411278045\">said</a>:</p>\n<blockquote>\n<p>I'm not sure what's the determinant argument? We're not necessarily dealing with a square matrix, right?</p>\n</blockquote>\n<p>Let's prove that if a matrix <code>M</code> over <code>F</code> has linearly independent columns, then its base change over <code>E</code> also has linear independent columns. We may assume that <code>M</code> has only finitely many columns, as the original result holds when it holds for all <code>M[all,J]</code> as <code>J</code> runs over all finite subsets of column (indices).</p>\n<p>Say <code>M</code> has <code>n</code> columns. Then its columns are linearly independent is equivalent to that there exists <code>n</code> rows such that the <code>n * n</code> submatrix has non-zero determinant (namely, column rank is equal to rank). Now consider the <code>M</code> base change to <code>E</code>. Then the above mentioned <code>n * n</code> submatrix base change to <code>E</code> still has non-zero determinant. This means that the <code>M</code> base change to <code>E</code> still have linearly independent columns.</p>",
        "id": 411280280,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704412418
    },
    {
        "content": "<p>I don't know any direct proof of this, namely suppose there is a <code>E</code>-linear combination of the columns of <code>M</code> which sums to zero, it's not obvious to produce a <code>F</code>-linear combination of them which still sums to zero, hence I don't know how to apply the condition that these columns are <code>F</code>-linear independent.</p>",
        "id": 411280709,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704412725
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Matrix.rank_transpose</span><span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">Matrix.rank</span> <span class=\"o\">(</span><span class=\"n\">Matrix.transpose</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Matrix.rank</span> <span class=\"n\">A</span>\n<span class=\"c1\">-- TODO: prove this in greater generality.</span>\n</code></pre></div>\n<p><code>LinearOrderedField</code> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span><span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 411281456,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704413038
    },
    {
        "content": "<p>The rank of a matrix should be equal to the largest natural number <code>n</code> such that there exists a <code>n * n</code> minor which has non-zero determinant. I think we don't have this in mathlib yet. Otherwise <code>Matrix.rank_transpose</code> is trivial.</p>",
        "id": 411282219,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704413310
    },
    {
        "content": "<p>Abstractly, the rank of a map <code>M -&gt; N</code> between two finite-dimensional <code>F</code>-vector space should be equal to the largest natural number <code>n</code> such that there exist <code>F^n -&gt; M</code> and <code>N -&gt; F^n</code> such that the composite map <code>F^n -&gt; M -&gt; N -&gt; F^n</code> is bijective. Using this it's also easy to prove <code>Matrix.rank_transpose</code> as it's the rank of <code>N^* -&gt; M^*</code>, and by taking dual of the above we get <code>F^n &lt;- M^* &lt;- N^* &lt;- F^n</code>, vice versa.</p>",
        "id": 411282778,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704413564
    },
    {
        "content": "<p>By using the above abstract argument, the Gaussian elimination is not needed (I think).</p>",
        "id": 411284178,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704414167
    },
    {
        "content": "<blockquote>\n<p>So we need to prove that <code>- ⊗[F] E</code> preserves injection (when <code>E / F</code> is flat).</p>\n</blockquote>\n<p>I think we can cheat over fields. Since an <code>F</code>-linear map is injective if and only if it has left inverse (only true for modules over fields), and tensor product preserves this property (true as long as <code>E</code> is an algebra over a field <code>F</code>), so it preserves injection.</p>",
        "id": 411298702,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704421755
    },
    {
        "content": "<p>Got this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Adjoin</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.TensorProductBasis</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">Field</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">LinearMap</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">injective_iff_exists_leftInverse_of_divisionRing</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Function.LeftInverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">h.injective</span><span class=\"o\">⟩</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">bm</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Basis.exists_basis</span> <span class=\"n\">F</span> <span class=\"n\">M</span>\n  <span class=\"k\">let</span> <span class=\"n\">m'</span> <span class=\"o\">:=</span> <span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">bm</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≃</span> <span class=\"n\">m'</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.ofInjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">bm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H.comp</span> <span class=\"n\">bm.injective</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">linearIndependent_equiv</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">Subtype.val</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">bm.linearIndependent.map'</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.ker_eq_bot_of_injective</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">h.extend</span> <span class=\"n\">m'.subset_univ</span>\n  <span class=\"k\">let</span> <span class=\"n\">bn</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"n\">n</span> <span class=\"n\">F</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">Basis.extend</span> <span class=\"n\">h</span>\n  <span class=\"k\">let</span> <span class=\"n\">g'</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y.1</span> <span class=\"bp\">∈</span> <span class=\"n\">m'</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">bm</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">e.symm</span> <span class=\"o\">⟨</span><span class=\"n\">y.1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">Finsupp.total</span> <span class=\"n\">n</span> <span class=\"n\">M</span> <span class=\"n\">F</span> <span class=\"n\">g'</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">comp</span> <span class=\"n\">bn.repr.toLinearMap</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">g.comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">LinearMap.id</span> <span class=\"o\">:=</span> <span class=\"n\">bm.ext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">y'</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"n\">x</span>\n    <span class=\"n\">change</span> <span class=\"n\">Finsupp.total</span> <span class=\"n\">n</span> <span class=\"n\">M</span> <span class=\"n\">F</span> <span class=\"n\">g'</span> <span class=\"o\">(</span><span class=\"n\">bn.repr</span> <span class=\"n\">y'.1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bm</span> <span class=\"n\">x</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">y'.1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Basis.subset_extend</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">y'.2</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"k\">show</span> <span class=\"n\">bn</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y'.1</span> <span class=\"k\">from</span> <span class=\"n\">Basis.extend_apply_self</span> <span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">bn.repr_self</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.total_single</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">y'.2</span><span class=\"o\">,</span> <span class=\"n\">dite_true</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"n\">bm</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Equiv.ofInjective_symm_apply</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">this</span> <span class=\"n\">x</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">LinearMap</span>\n</code></pre></div>",
        "id": 411426738,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704485701
    },
    {
        "content": "<p>There should also be a <code>surjective_iff_exists_rightInverse_of_divisionRing</code> <del>but I haven't written down the proof yet. I plan to finish the basic properties of linearly disjoint first.</del></p>",
        "id": 411427260,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704485960
    },
    {
        "content": "<p>And we don't need to repeat the argument for the surjective one, since the injective one already implies that all short exact sequence splits, so we can make use of this to prove the surjective one.</p>",
        "id": 411427900,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704486303
    },
    {
        "content": "<p>This proof is without using basis argument but using split exact argument. Not much shorter than the basis argument, though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">surjective_iff_exists_rightInverse_of_divisionRing</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Surjective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Function.RightInverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">h.surjective</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap.ker</span> <span class=\"n\">f</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">injective_iff_exists_leftInverse_of_divisionRing</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">K.injective_subtype</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">f.toFun.invFun</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Function.RightInverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">Function.rightInverse_invFun</span> <span class=\"n\">H</span>\n  <span class=\"k\">let</span> <span class=\"n\">g'</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">K.subtype</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">g'</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.id</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">K.subtype.comp</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">K.subtype</span> <span class=\"n\">_</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sub_add</span><span class=\"o\">,</span> <span class=\"n\">sub_right_comm</span><span class=\"o\">,</span> <span class=\"n\">sub_add</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_sub</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_sub</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">LinearMap.mem_ker</span><span class=\"o\">,</span> <span class=\"n\">map_sub</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">K.subtype</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">⟩</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨⟨⟨</span><span class=\"n\">g'</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hg'</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">]),</span>\n    <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"n\">hg'</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"n\">map_add</span><span class=\"o\">]⟩,</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">RingHom.id_apply</span><span class=\"o\">,</span>\n      <span class=\"n\">hg'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">]),</span> <span class=\"n\">hg'</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">map_smul</span><span class=\"o\">]⟩,</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n        <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">map_sub</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">map_coe_ker</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">]⟩</span>\n</code></pre></div>",
        "id": 411453367,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704500386
    },
    {
        "content": "<p>But it saves brain. <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 411453572,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704500471
    },
    {
        "content": "<p>You missed <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.exists_rightInverse_of_surjective#doc\">docs#LinearMap.exists_rightInverse_of_surjective</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.exists_leftInverse_of_injective#doc\">docs#LinearMap.exists_leftInverse_of_injective</a> ...</p>",
        "id": 411454832,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704501012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/411454832\">said</a>:</p>\n<blockquote>\n<p>You missed <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.exists_rightInverse_of_surjective#doc\">docs#LinearMap.exists_rightInverse_of_surjective</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.exists_leftInverse_of_injective#doc\">docs#LinearMap.exists_leftInverse_of_injective</a> ...</p>\n</blockquote>\n<p>Oops. I waste a whole day to write down these proofs. <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> No wonder I can't find them using Loogle, they don't mention <code>Function.Injective</code> or <code>Function.Surjective</code> or <code>Function.LeftInverse</code> or <code>Function.RightInverse</code>.</p>",
        "id": 411455303,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704501255
    },
    {
        "content": "<p>yeah maybe <code>injective</code> should be changed to <code>ker_eq_bot</code>?</p>",
        "id": 411456776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704501979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/411456776\">said</a>:</p>\n<blockquote>\n<p>yeah maybe <code>injective</code> should be changed to <code>ker_eq_bot</code>?</p>\n</blockquote>\n<p>For <code>Ring</code> they are equivalent (but not for <code>Semiring</code>).</p>",
        "id": 411460439,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704503968
    },
    {
        "content": "<p>right but that doesn't justify the naming!</p>",
        "id": 411463107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704505805
    },
    {
        "content": "<p>Do we have <code>LinearMap.baseChange_id</code>? It can be proved using <code>TensorProduct.AlgebraTensorModule.ext</code> and <code>LinearMap.baseChange_tmul</code>.</p>",
        "id": 411464882,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704507123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/411239164\">said</a>:</p>\n<blockquote>\n<p><span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span><span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span><span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span> Do we have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Adjoin</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">→₀</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearIndependent</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapRange</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Namely, if a matrix over <code>F</code> has linear independent columns, then its base change over <code>E</code> also has linear independent columns. The only proof I know for it uses matrix determinant.</p>\n</blockquote>\n<p>I've solved this goal using the tensor product approach and it takes 90 lines; <code>tensorFinsupp</code> is a more general version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.TensorProduct.basis#doc\">docs#Algebra.TensorProduct.basis</a> that is only R-linear rather than S-linear, but it seems missing in mathlib.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.TensorProduct</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">S</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"bp\">!</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">finsuppTensor</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">ofLinear</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.lift</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Finsupp.total</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">Finsupp.lsingle</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">Finsupp.lsum</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Finsupp.single</span> <span class=\"bp\">·</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"bp\">!</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">tensorFinsupp</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">TensorProduct.comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">finsuppTensor</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span> <span class=\"o\">(</span><span class=\"n\">Injective</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tensorFinsupp_rTensor</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">tensorFinsupp</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"n\">f.rTensor</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finsupp.mapRange.linearMap</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">tensorFinsupp</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">ι</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">x.induction_on</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">y.induction_linear</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">hy</span> <span class=\"n\">hz</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">TensorProduct.tmul_add</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">TensorProduct.liftAux</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">ι</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finsupp_flat</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"o\">(</span><span class=\"n\">f.rTensor</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">tensorFinsupp</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply_fun</span> <span class=\"n\">tensorFinsupp</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"n\">ι</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">tensorFinsupp_rTensor</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">FunLike.congr_fun</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">LinearMap</span> <span class=\"n\">LinearEquiv</span>\n\n<span class=\"n\">nonrec</span> <span class=\"kd\">def</span> <span class=\"n\">LinearEquiv.lTensor</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">ofLinear</span> <span class=\"o\">(</span><span class=\"n\">f.lTensor</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f.symm.lTensor</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">lTensor_comp</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">lTensor_comp</span><span class=\"o\">])</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Module.Free</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">flat_of_free</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"o\">(</span><span class=\"n\">f.rTensor</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Module.Free.chooseBasis</span> <span class=\"n\">R</span> <span class=\"n\">S</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">b.repr.lTensor</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finsupp_flat</span> <span class=\"n\">hf</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">LinearEquiv.lTensor</span><span class=\"o\">,</span> <span class=\"n\">ofLinear_apply</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">comp_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">rTensor_comp_lTensor</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">lTensor_comp_rTensor</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">b.repr.lTensor</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">flat_of_free'</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"o\">(</span><span class=\"n\">f.lTensor</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.comm</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.injective</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">flat_of_free</span> <span class=\"n\">S</span> <span class=\"n\">hf</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">comm_comp_lTensor_comp_comm_eq</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module.Free</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">LinearIndependent.algebraTensor</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearIndependent</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.mk</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"bp\">∘</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linearIndependent_iff_injective_total</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">tensorFinsupp</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEquiv.injective_comp</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">flat_of_free'</span> <span class=\"n\">S</span> <span class=\"n\">h</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">refine</span> <span class=\"n\">x.induction_on</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">y.induction_linear</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">hy</span> <span class=\"n\">hz</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">LinearEquiv.coe_toEquiv</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span> <span class=\"n\">hz</span> <span class=\"bp\">⊢</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">TensorProduct.tmul_add</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">TensorProduct.liftAux</span><span class=\"o\">,</span> <span class=\"n\">TensorProduct.smul_tmul'</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">LinearEquiv.coe_toEquiv</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">LinearIndependent.mapRange_linearMap</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearIndependent</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.mapRange.linearMap</span> <span class=\"o\">(</span><span class=\"n\">Algebra.ofId</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toLinearMap</span> <span class=\"bp\">∘</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">of_comp</span> <span class=\"o\">(</span><span class=\"n\">Algebra.TensorProduct.basis</span> <span class=\"n\">S</span> <span class=\"n\">Finsupp.basisSingleOne</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">repr.symm.toLinearMap</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">convert</span> <span class=\"n\">H.algebraTensor</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Function.comp.assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∘</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">x.induction_linear</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"bp\">⊢;</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Algebra.ofId_apply</span><span class=\"o\">,</span> <span class=\"n\">TensorProduct.smul_tmul'</span><span class=\"o\">,</span> <span class=\"n\">TensorProduct.smul_tmul</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">LinearIndependent.mapRange</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearIndependent</span> <span class=\"n\">S</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapRange</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">H.mapRange_linearMap</span>\n</code></pre></div>",
        "id": 411691388,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704703041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span> may be interested because the first part of the above code proves that a free module is flat in 50 lines. (<a href=\"#narrow/stream/116395-maths/topic/flat.20modules/near/407319391\">cross</a> <a href=\"#narrow/stream/116395-maths/topic/flat.20modules/near/407857419\">ref</a>)</p>",
        "id": 411691672,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704703165
    },
    {
        "content": "<p>Glorious!</p>",
        "id": 411734561,
        "sender_full_name": "Richard Copley",
        "timestamp": 1704719111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/411691388\">said</a>:</p>\n<blockquote>\n<p>I've solved this goal using the tensor product approach and it takes 90 lines</p>\n</blockquote>\n<p>Thank you very much! I'm stuck with the last <code>sorry</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Adjoin</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.TensorProductBasis</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">Field</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">→₀</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">F</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearIndependent</span> <span class=\"n\">E</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapRange</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">Finsupp.total</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">F</span> <span class=\"n\">v</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">g.comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span>  <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap.exists_leftInverse_of_injective</span> <span class=\"n\">_</span> <span class=\"n\">H</span>\n  <span class=\"k\">let</span> <span class=\"n\">f'</span> <span class=\"o\">:=</span> <span class=\"n\">f.baseChange</span> <span class=\"n\">E</span>\n  <span class=\"k\">let</span> <span class=\"n\">g'</span> <span class=\"o\">:=</span> <span class=\"n\">g.baseChange</span> <span class=\"n\">E</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg'</span> <span class=\"o\">:</span> <span class=\"n\">g'.comp</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"n\">LinearMap.id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.baseChange_comp</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hg</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"n\">TensorProduct.AlgebraTensorModule.ext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">LinearMap.baseChange_tmul</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"k\">let</span> <span class=\"n\">ba</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.TensorProduct.basis</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">Basis.ofRepr</span> <span class=\"o\">(</span><span class=\"n\">LinearEquiv.refl</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">→₀</span> <span class=\"n\">F</span><span class=\"o\">)))</span>\n  <span class=\"k\">let</span> <span class=\"n\">bb</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.TensorProduct.basis</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">Basis.ofRepr</span> <span class=\"o\">(</span><span class=\"n\">LinearEquiv.refl</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">→₀</span> <span class=\"n\">F</span><span class=\"o\">)))</span>\n  <span class=\"k\">let</span> <span class=\"n\">f''</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bb.repr.toLinearMap.comp</span> <span class=\"n\">f'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">ba.repr.symm.toLinearMap</span>\n  <span class=\"k\">let</span> <span class=\"n\">g''</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ba.repr.toLinearMap.comp</span> <span class=\"n\">g'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">bb.repr.symm.toLinearMap</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg''</span> <span class=\"o\">:</span> <span class=\"n\">g''.comp</span> <span class=\"n\">f''</span> <span class=\"bp\">=</span> <span class=\"n\">LinearMap.id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">LinearIndependent</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">LinearMap.ker_eq_bot_of_inverse</span> <span class=\"n\">hg''</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Basis.ofRepr</span> <span class=\"o\">(</span><span class=\"n\">LinearEquiv.refl</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">→₀</span> <span class=\"n\">E</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Basis.coe_ofRepr</span><span class=\"o\">,</span> <span class=\"n\">LinearEquiv.refl_symm</span><span class=\"o\">,</span> <span class=\"n\">LinearEquiv.refl_apply</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.total_single</span><span class=\"o\">,</span>\n    <span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"n\">Basis.coe_repr_symm</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">LinearEquiv.coe_coe</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">Algebra.TensorProduct.basis_apply</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.baseChange_tmul</span><span class=\"o\">,</span>\n    <span class=\"n\">Algebra.TensorProduct.basis_repr_tmul</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 411737264,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704720186
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">hg''</span> <span class=\"o\">:</span> <span class=\"n\">g''.comp</span> <span class=\"n\">f''</span> <span class=\"bp\">=</span> <span class=\"n\">LinearMap.id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">change</span> <span class=\"n\">ba.repr</span> <span class=\"bp\">∘ₗ</span> <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"bp\">∘ₗ</span> <span class=\"o\">(</span><span class=\"n\">bb.repr.symm.toLinearMap</span> <span class=\"bp\">∘ₗ</span> <span class=\"n\">bb.repr.toLinearMap</span><span class=\"o\">)</span> <span class=\"bp\">∘ₗ</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"bp\">∘ₗ</span>\n        <span class=\"n\">ba.repr.symm.toLinearMap</span> <span class=\"bp\">=</span> <span class=\"n\">LinearMap.id</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">LinearEquiv.coe_trans</span><span class=\"o\">,</span> <span class=\"n\">LinearEquiv.self_trans_symm</span><span class=\"o\">,</span> <span class=\"n\">LinearEquiv.refl_toLinearMap</span><span class=\"o\">,</span>\n      <span class=\"n\">LinearMap.id_comp</span><span class=\"o\">,</span> <span class=\"n\">hg'</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.id_comp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">LinearEquiv.coe_trans</span><span class=\"o\">,</span>\n      <span class=\"n\">LinearEquiv.symm_trans_self</span><span class=\"o\">,</span> <span class=\"n\">LinearEquiv.refl_toLinearMap</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 411740324,
        "sender_full_name": "Richard Copley",
        "timestamp": 1704721379
    },
    {
        "content": "<p>Thank you very much. Now my proof (only for this particular result) is shorter than Junyan's proof. <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 411741749,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704721882
    },
    {
        "content": "<p>I uploaded my code as a draft PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/9651\">#9651</a>.</p>",
        "id": 412339594,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704978689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/411691388\">said</a>:</p>\n<blockquote>\n<p>I've solved this goal using the tensor product approach and it takes 90 lines; <code>tensorFinsupp</code> is a more general version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.TensorProduct.basis#doc\">docs#Algebra.TensorProduct.basis</a> that is only R-linear rather than S-linear, but it seems missing in mathlib.</p>\n</blockquote>\n<p>Would you submit your code as a PR?</p>",
        "id": 412354805,
        "sender_full_name": "Jz Pan",
        "timestamp": 1704983507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> I think your <code>finsuppTensor</code> and <code>tensorFinsupp</code> are special cases of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finsuppTensorFinsupp#doc\">docs#finsuppTensorFinsupp</a>. Maybe your results can be put into that file?</p>",
        "id": 422513920,
        "sender_full_name": "Jz Pan",
        "timestamp": 1708469157
    },
    {
        "content": "<p>Oh, <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span>  was also looking for a result similar to <code>finsuppTensor</code> and <code>tensorFinsupp</code> earlier today.</p>",
        "id": 422514501,
        "sender_full_name": "Richard Copley",
        "timestamp": 1708469435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> , how do your <code>finsuppTensor</code> and <code>tensorFinsupp</code>compare with what I indicate here:<br>\n<a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tensor.20Product/near/422584588\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tensor.20Product/near/422584588</a></p>",
        "id": 422585911,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708511077
    },
    {
        "content": "<p><del>If your construction is easy</del> (update: I see your PR and it's indeed easy), I think my <code>finsuppTensor</code> should be defined using your <code>tensorProductLeft</code> together with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp.mapRange.equiv#doc\">docs#Finsupp.mapRange.equiv</a>, even though the other way around is also possible (requires associativity of tensor product and two applications of <code>finsuppTensor</code>).</p>",
        "id": 422662469,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1708534146
    },
    {
        "content": "<p>Here's a puzzle from <span class=\"user-mention\" data-user-id=\"366779\">@Jz Pan</span>'s last question <a href=\"https://github.com/leanprover-community/mathlib4/pull/9651#issuecomment-1965158850\">here</a>. What's an example of two non-torsion elements <code>m : M</code> and <code>n : N</code> in two R-modules M and N such that <code>m ⊗ n</code> is torsion in <code>M ⊗ N</code>? (Here I'm interested in the notion of non-torsion in the sense that <code>r : R ↦ r • m</code> is injective, or that {m} is R-linearly independent.) As Jz observed, neither M nor N could be flat. If we could produce such an example we could probably massage it into a counterexample to item 3 in the link.</p>",
        "id": 424452058,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709419727
    },
    {
        "content": "<p>Is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> commutative or any ring (or do you care about semirings or whatever?)</p>",
        "id": 424452181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709419841
    },
    {
        "content": "<p>Yeah you may assume R is a commutative ring.</p>",
        "id": 424452321,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709420009
    },
    {
        "content": "<p><a href=\"https://math.stackexchange.com/questions/255304/how-does-one-show-that-this-tensor-product-is-not-torsion-free\">Here</a> is an example of a tensor product of torsion-free modules that is not torsion-free, but the given torsion element is not a pure tensor.</p>",
        "id": 424452392,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709420074
    },
    {
        "content": "<p>ha ha I was just working through exactly that example confident that it would be a counterexample!</p>",
        "id": 424452535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709420199
    },
    {
        "content": "<p>SE suggested <a href=\"https://math.stackexchange.com/questions/4690628/tensor-product-of-two-torsion-free-elements\">this question</a> to me when I'm about to ask the question (only typed the title), with an answer saying such example doesn't exist. Now I need to verify the proof; maybe it even extends to linear independent subsets of cardinality &gt; 1?</p>",
        "id": 425019568,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709708820
    },
    {
        "content": "<p>The same arguments works for a reduced ring. For the general case, I am not sure (the proof there is written in a fairly obscure way…)</p>",
        "id": 425040900,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709717511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> I'd like to add your definition of <code>finsuppTensor</code> to <a href=\"https://github.com/leanprover-community/mathlib4/pull/11598\">#11598</a>; currently it is only a draft, some others were added but not your <code>finsuppTensor</code> yet. Comments are welcome.</p>",
        "id": 428432270,
        "sender_full_name": "Jz Pan",
        "timestamp": 1711158058
    },
    {
        "content": "<p>(only basic definitions; not including the following results on flat and free)</p>",
        "id": 428432372,
        "sender_full_name": "Jz Pan",
        "timestamp": 1711158150
    },
    {
        "content": "<p>Should we wait for <a href=\"https://github.com/leanprover-community/mathlib4/pull/10824\">#10824</a> or is this something independent?</p>",
        "id": 428436272,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1711161924
    },
    {
        "content": "<p>I see you're refactoring <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finsuppTensorFinsupp%27#doc\">docs#finsuppTensorFinsupp'</a> through the new <code>finsuppTensorFinsuppLid</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11598\">#11598</a>. I agree this can be done independently of <a href=\"https://github.com/leanprover-community/mathlib4/pull/10824\">#10824</a>.</p>",
        "id": 428440844,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1711166023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/428436272\">said</a>:</p>\n<blockquote>\n<p>Should we wait for <a href=\"https://github.com/leanprover-community/mathlib4/pull/10824\">#10824</a> or is this something independent?</p>\n</blockquote>\n<p>Thanks for the information. Currently my change in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11598\">#11598</a>  is independent of it, buy what I was also planned are <code>finsupp[Scalar](Left|Right)</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10824\">#10824</a>.</p>",
        "id": 429058224,
        "sender_full_name": "Jz Pan",
        "timestamp": 1711178506
    },
    {
        "content": "<p>By the way, do we have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.TensorProduct.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">TensorProduct.lid</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">TensorProduct.rid</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">LinearEquiv.toLinearMap_injective</span>\n  <span class=\"n\">apply</span> <span class=\"n\">TensorProduct.ext'</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 429097429,
        "sender_full_name": "Jz Pan",
        "timestamp": 1711213690
    },
    {
        "content": "<p>@loogle TensorProduct.lid, TensorProduct.rid</p>",
        "id": 429097498,
        "sender_full_name": "Jz Pan",
        "timestamp": 1711213788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> TensorProduct.lid, TensorProduct.rid</p>",
        "id": 429097593,
        "sender_full_name": "Jz Pan",
        "timestamp": 1711213856
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Coevaluation.html#contractLeft_assoc_coevaluation%27\">contractLeft_assoc_coevaluation'</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Coevaluation.html#contractLeft_assoc_coevaluation\">contractLeft_assoc_coevaluation</a></p>",
        "id": 429097596,
        "sender_full_name": "loogle",
        "timestamp": 1711213856
    },
    {
        "content": "<p><strong>ping</strong> Could someone look at PRs <a href=\"https://github.com/leanprover-community/mathlib4/pull/11598\">#11598</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/11635\">#11635</a>?</p>",
        "id": 429725552,
        "sender_full_name": "Jz Pan",
        "timestamp": 1711481574
    },
    {
        "content": "<p>My suggestion to <a href=\"https://github.com/leanprover-community/mathlib4/pull/11635\">#11635</a> is that maybe we can mark some apply lemmas as simp lemmas (<a href=\"https://github.com/leanprover-community/mathlib4/pull/10824#discussion_r1536662221\">https://github.com/leanprover-community/mathlib4/pull/10824#discussion_r1536662221</a>).</p>",
        "id": 429725894,
        "sender_full_name": "Jz Pan",
        "timestamp": 1711481702
    },
    {
        "content": "<p>I also need this result</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- TODO: move to suitable file ?</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">_root_.Module.Flat.preserves_injective_linearMap'</span>\n    <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M'</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Module.Flat</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hL</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.lTensor</span> <span class=\"n\">N</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- rw [Module.Flat.lTensor_inj_iff_rTensor_inj]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">LinearMap.comm_comp_rTensor_comp_comm_eq</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">LinearEquiv.coe_coe</span><span class=\"o\">,</span>\n    <span class=\"n\">EmbeddingLike.comp_injective</span><span class=\"o\">,</span> <span class=\"n\">EquivLike.injective_comp</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Module.Flat.preserves_injective_linearMap</span> <span class=\"n\">L</span> <span class=\"n\">hL</span>\n</code></pre></div>\n<p>but I don't know if it worth to be added to mathlib. The whole <code>simp_rw</code> can be replaced by the commented out <code>rw</code>, but which is a deprecated function with no replacements. This confuses me about the current design of <code>Module.Flat</code>. Anyone could answer this?</p>",
        "id": 429938605,
        "sender_full_name": "Jz Pan",
        "timestamp": 1711570155
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Flat.Basic</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Module.Flat.preserves_injective_linearMap'</span>\n    <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M'</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Module.Flat</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hL</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.lTensor</span> <span class=\"n\">N</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">LinearMap.comm_comp_rTensor_comp_comm_eq</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">preserves_injective_linearMap</span> <span class=\"n\">L</span> <span class=\"n\">hL</span>\n</code></pre></div>\n<p>The same method is used in several proofs in the file to replace <code>lTensor_inj_iff_rTensor_inj</code>. I'd be fine if you want to restore <code>lTensor_inj_iff_rTensor_inj</code> near <code>comm_comp_rTensor_comp_comm_eq</code> but it shouldn't be namespaced <code>Module.Flat</code> (and should we have <code>Surjective</code>, <code>Bijective</code> versions too?</p>",
        "id": 429950570,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1711574071
    },
    {
        "content": "<p>Thank you very much.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/429950570\">said</a>:</p>\n<blockquote>\n<p>I'd be fine if you want to restore <code>lTensor_inj_iff_rTensor_inj</code> near <code>comm_comp_rTensor_comp_comm_eq</code> but it shouldn't be namespaced <code>Module.Flat</code> (and should we have <code>Surjective</code>, <code>Bijective</code> versions too?</p>\n</blockquote>\n<p>I have no preference for restoring <code>lTensor_inj_iff_rTensor_inj</code> or not; but perhaps you're right, it should be under the namespace <code>LinearMap</code> instead.</p>\n<p>What bothers me is: should I add <code>Module.Flat.preserves_injective_linearMap'</code> into mathlib.</p>",
        "id": 429969819,
        "sender_full_name": "Jz Pan",
        "timestamp": 1711584451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/429969819\">said</a>:</p>\n<blockquote>\n<p>What bothers me is: should I add <code>Module.Flat.preserves_injective_linearMap'</code> into mathlib.</p>\n</blockquote>\n<p>I'd prefer combining <code>Module.Flat.preserves_injective_linearMap</code> and <code>lTensor_inj_iff_rTensor_inj</code> for this. So maybe we should indeed restore the latter ...</p>",
        "id": 430039822,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1711622904
    },
    {
        "content": "<p>I'd prefer having both versions, tensoring on the left and tensoring on the right. This will be used so frequently that I think its worth it to have both.</p>",
        "id": 430040096,
        "sender_full_name": "Christian Merten",
        "timestamp": 1711623006
    },
    {
        "content": "<p>Another point is: should the original <code>Module.Flat.preserves_injective_linearMap</code> be renamed with <code>Module.Flat.rTensor_preserves_injective_linearMap</code>? Then the new <code>Module.Flat.preserves_injective_linearMap'</code> should be called <code>Module.Flat.lTensor_preserves_injective_linearMap</code>.</p>\n<p>If you think the name is too long, maybe they can also be called <code>Module.Flat.(l|r)Tensor_preserves_injective</code>, omitting <code>linearMap</code> since <code>(l|r)Tensor</code> can only take <code>LinearMap</code> as an input, so this will not cause ambiguity (not really, <code>injective</code> can also means injective module (?)).</p>",
        "id": 430045083,
        "sender_full_name": "Jz Pan",
        "timestamp": 1711625003
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11748\">#11748</a></p>",
        "id": 430154440,
        "sender_full_name": "Jz Pan",
        "timestamp": 1711656466
    },
    {
        "content": "<p>Are these results useful? I need to use them to find out finitely generated submodules of <code>M</code> and <code>N</code> once an element of <code>M ⊗[R] N</code> is given.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.TensorProduct.Basic</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">S.map</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">i.1</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">i.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">TensorProduct.induction_on</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tmul</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨{(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)},</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">Sx</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">Sy</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Sx</span> <span class=\"bp\">+</span> <span class=\"n\">Sy</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Multiset.map_add</span><span class=\"o\">,</span> <span class=\"n\">Multiset.sum_add</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]⟩</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">S.sum</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">m</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">TensorProduct.induction_on</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tmul</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Finsupp.single</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">Sx</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">Sy</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span>\n    <span class=\"n\">use</span> <span class=\"n\">Sx</span> <span class=\"bp\">+</span> <span class=\"n\">Sy</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.sum_add_index'</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">TensorProduct.tmul_add</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>Seems that they should be an immediate consequence of <code>TensorProduct.span_tmul_eq_top</code>, but I don't know how to write a one-line proof.</p>",
        "id": 430428056,
        "sender_full_name": "Jz Pan",
        "timestamp": 1711841634
    },
    {
        "content": "<p>I used similar results in our work with <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span>, but finitely resorted on the file about direct limits and tensor products.</p>",
        "id": 430455256,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1711869101
    },
    {
        "content": "<p>Finally I used this version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.TensorProduct.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Dimension.Finite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Submodule</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- TODO: move to suitable file and give it a better name</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">S.map</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">i.1</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">i.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">TensorProduct.induction_on</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tmul</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨{(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)},</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">Sx</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">Sy</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Sx</span> <span class=\"bp\">+</span> <span class=\"n\">Sy</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Multiset.map_add</span><span class=\"o\">,</span> <span class=\"n\">Multiset.sum_add</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]⟩</span>\n\n<span class=\"c1\">-- TODO: move to suitable file and give it a better name</span>\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">test2L</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M'</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">M'</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">R</span> <span class=\"n\">M'</span> <span class=\"bp\">∧</span>\n      <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"n\">hM</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rTensor</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">choose</span> <span class=\"n\">Sx</span> <span class=\"n\">hSx</span> <span class=\"n\">using</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">test1</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">Finset.sum</span> <span class=\"n\">Finset.univ</span> <span class=\"n\">Sx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">i.1.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span>\n  <span class=\"k\">let</span> <span class=\"n\">M'</span> <span class=\"o\">:=</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">M'</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">span_le.2</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">Multiset.mem_toFinset</span><span class=\"o\">,</span> <span class=\"n\">Multiset.mem_map</span><span class=\"o\">,</span> <span class=\"n\">Prod.exists</span><span class=\"o\">,</span>\n      <span class=\"n\">exists_and_right</span><span class=\"o\">,</span> <span class=\"n\">Subtype.exists</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hx</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M'</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i.1.1</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"k\">then</span> <span class=\"o\">⟨</span><span class=\"n\">i.1.1</span><span class=\"o\">,</span> <span class=\"n\">subset_span</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">i.2</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">x'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">Sx</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">M'</span><span class=\"o\">,</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">,</span> <span class=\"n\">inferInstance</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">hSx</span><span class=\"o\">,</span> <span class=\"n\">map_multiset_sum</span><span class=\"o\">,</span> <span class=\"n\">Multiset.map_map</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Multiset.map_congr</span> <span class=\"n\">rfl</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i.1.1</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Multiset.mem_toFinset</span><span class=\"o\">,</span> <span class=\"n\">Multiset.mem_map</span><span class=\"o\">,</span> <span class=\"n\">SetLike.coe_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">Prod.exists</span><span class=\"o\">,</span>\n      <span class=\"n\">exists_and_right</span><span class=\"o\">,</span> <span class=\"n\">Subtype.exists</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i.2.1</span><span class=\"o\">,</span> <span class=\"n\">i.2.2</span><span class=\"o\">,</span> <span class=\"n\">Multiset.mem_of_le</span> <span class=\"o\">(</span><span class=\"n\">Finset.single_le_sum</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">hi</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- TODO: move to suitable file and give it a better name</span>\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">test2Lpair</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"n\">y'</span> <span class=\"o\">:</span> <span class=\"n\">M'</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">M'</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">R</span> <span class=\"n\">M'</span> <span class=\"bp\">∧</span>\n      <span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"n\">hM</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rTensor</span> <span class=\"n\">N</span> <span class=\"n\">x'</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"n\">hM</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rTensor</span> <span class=\"n\">N</span> <span class=\"n\">y'</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">M'</span><span class=\"o\">,</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">,</span> <span class=\"n\">hfin</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">test2L</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">M'</span><span class=\"o\">,</span> <span class=\"n\">x'</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x'</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">,</span> <span class=\"n\">hfin</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- TODO: move to suitable file and give it a better name</span>\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">test2R</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N'</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"n\">N'</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">R</span> <span class=\"n\">N'</span> <span class=\"bp\">∧</span>\n      <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"n\">hN</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lTensor</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">N'</span><span class=\"o\">,</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">,</span> <span class=\"n\">hfin</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">test2L</span> <span class=\"n\">N</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">TensorProduct.comm</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"n\">hN</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lTensor</span> <span class=\"n\">M</span> <span class=\"bp\">∘ₗ</span> <span class=\"n\">TensorProduct.comm</span> <span class=\"n\">R</span> <span class=\"n\">N'</span> <span class=\"n\">M</span> <span class=\"bp\">=</span>\n      <span class=\"o\">(</span><span class=\"n\">TensorProduct.comm</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">∘ₗ</span> <span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"n\">hN</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rTensor</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n    <span class=\"n\">TensorProduct.ext'</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">N'</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">TensorProduct.comm</span> <span class=\"n\">R</span> <span class=\"n\">N'</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">hN</span><span class=\"o\">,</span> <span class=\"n\">hfin</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span><span class=\"o\">((</span><span class=\"n\">TensorProduct.comm</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">LinearEquiv.symm_apply_apply</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">key</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- TODO: move to suitable file and give it a better name</span>\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">test2Rpair</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N'</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"n\">y'</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"n\">N'</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">R</span> <span class=\"n\">N'</span> <span class=\"bp\">∧</span>\n      <span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"n\">hN</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lTensor</span> <span class=\"n\">M</span> <span class=\"n\">x'</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"n\">hN</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lTensor</span> <span class=\"n\">M</span> <span class=\"n\">y'</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">M'</span><span class=\"o\">,</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">,</span> <span class=\"n\">hfin</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">test2R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">M'</span><span class=\"o\">,</span> <span class=\"n\">x'</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x'</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">,</span> <span class=\"n\">hfin</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 430747718,
        "sender_full_name": "Jz Pan",
        "timestamp": 1712049653
    },
    {
        "content": "<p>By the way, the file <code>LinearAlgebra/TensorProduct/Basic</code> gets too long (in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11731\">#11731</a>). What should I do now?</p>",
        "id": 430748167,
        "sender_full_name": "Jz Pan",
        "timestamp": 1712049834
    },
    {
        "content": "<p>You can just ignore the error by adding the corresponding line (ie <code>Mathlib/LinearAlgebra/TensorProduct/Basic.lean#L1: ERR_NUM_LIN: 1700 file contains 1554 lines, try to split it up</code>) to <code>style-exception.txt</code></p>",
        "id": 430748324,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712049890
    },
    {
        "content": "<p>I see. When the number of lines in <code>Mathlib/LinearAlgebra/TensorProduct/Basic.lean</code> changed, should the corresponding line in <code>style-exception.txt</code> be also changed?</p>",
        "id": 430749220,
        "sender_full_name": "Jz Pan",
        "timestamp": 1712050229
    },
    {
        "content": "<p>No, only the <code>1700</code> matters. That's the number of lines you're allowed</p>",
        "id": 430749356,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712050285
    },
    {
        "content": "<p>I complained before that this was very unclear and that the error message didn't tell you how to ignore it. cc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> who got this right with shake.</p>",
        "id": 430749509,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712050329
    },
    {
        "content": "<p>speaking of that error message, although the 1700 has a particular meaning the formatting is really not good for that, it looks like it's talking about 1700 files with slightly wrong grammar</p>",
        "id": 430770565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712057842
    },
    {
        "content": "<p>Now I'm stuck (mathematically) at this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Dimension.Free</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test9</span>\n    <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StrongRankCondition</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It is the <code>n = 1</code> case of &lt;<a href=\"https://mathoverflow.net/questions/89040\">https://mathoverflow.net/questions/89040</a>&gt;, it is said that it's not hard (TM) to show this result. But I cannot think a proof of it. I guess that a preimage of <code>y : E</code> can be <code>b.symm y * b.symm (b 1 ^ 2)</code> but I cannot prove the correctness of it (unless assume <code>E</code> is a domain).</p>",
        "id": 433404424,
        "sender_full_name": "Jz Pan",
        "timestamp": 1713222544
    },
    {
        "content": "<p>This should lead to a generalization of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subalgebra.eq_bot_of_finrank_one#doc\">docs#Subalgebra.eq_bot_of_finrank_one</a></p>",
        "id": 433405347,
        "sender_full_name": "Jz Pan",
        "timestamp": 1713223026
    },
    {
        "content": "<p>Let <code>x : E</code> be defined as <code>x := b 1</code>. The multiplication map <code>(y : E) =&gt; x * y</code> by <code>x</code> is an endomorphism of <code>E</code> as a <code>F</code>-module, but as it is free of rank one, it must be equal to the scalar multiplication by an element in <code>a : F</code> (this is like a <code>1×1</code>-matrix), then for all <code>y : E</code>, we have <code>x * y = a • y</code>. In particular, for <code>y = 1</code>, we get that <code>x</code> is the image of <code>a</code> by <code>algebraMap F E</code>, and this easily implies the result.</p>",
        "id": 433409663,
        "sender_full_name": "Joël Riou",
        "timestamp": 1713225424
    },
    {
        "content": "<p>Thank you very much, this code works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Dimension.Free</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bijective_algebraMap_of_linearEquiv</span>\n    <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Function.Bijective</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b.symm</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">b.symm</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">b.symm</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b.symm</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">b.symm.toLinearMap</span> <span class=\"bp\">∘ₗ</span> <span class=\"bp\">.</span><span class=\"n\">mulLeft</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∘ₗ</span> <span class=\"n\">b.toLinearMap</span>\n    <span class=\"n\">change</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">b.symm</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b.symm</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">j</span> <span class=\"mi\">1</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b.symm</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply_fun</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">b.apply_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">b.apply_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">b.symm</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n      <span class=\"bp\">←</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">b.apply_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">Algebra.smul_def</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Function.bijective_iff_has_inverse.2</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">b.symm</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">b.symm</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">b.injective</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">Algebra.smul_def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">b.apply_symm_apply</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">Algebra.commutes</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">Algebra.smul_def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Algebra.smul_def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n      <span class=\"n\">b.apply_symm_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>It's a little bit longer, though.</p>",
        "id": 433602640,
        "sender_full_name": "Jz Pan",
        "timestamp": 1713300409
    },
    {
        "content": "<p>Please have a look at this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- unused</span>\n<span class=\"c1\">-- TODO: move to suitable place</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">_root_.Subalgebra.finite_iSup_of_finite</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">iSup_univ</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Set.Finite.induction_on</span> <span class=\"n\">Set.finite_univ</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iSup_emptyset</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">finite_bot</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iSup_insert</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">finite_sup</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- unused</span>\n<span class=\"c1\">-- TODO: move to suitable place</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">_root_.Subalgebra.gc</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">GaloisConnection</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span>  <span class=\"bp\">↦</span> <span class=\"n\">Algebra.adjoin_le_iff</span>\n\n<span class=\"c1\">-- unused</span>\n<span class=\"c1\">-- TODO: move to suitable place</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">_root_.Subalgebra.biSup_adjoin_simple</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">⨆</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">K</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">K</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">iSup_subtype''</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">gc.l_iSup</span><span class=\"o\">,</span> <span class=\"n\">iSup_subtype''</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">S.biUnion_of_singleton</span>\n\n<span class=\"c1\">-- unused</span>\n<span class=\"c1\">-- XXX</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">_root_.Algebra.adjoin.finite</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">IsIntegral</span> <span class=\"n\">K</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">K</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hx.fg_adjoin_singleton</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Module.Finite.iff_fg.2</span> <span class=\"n\">this</span>\n\n<span class=\"c1\">-- unused</span>\n<span class=\"c1\">-- XXX</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">_root_.Subalgebra.finite_adjoin</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">IsIntegral</span> <span class=\"n\">K</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">K</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">toSubmodule</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">K</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Module.Finite.iff_fg</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">fg_adjoin_of_finite</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hS</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Set.finite_coe_iff</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The first three are API analogues to that of intermediate fields, which are not in mathlib yet. Originally, I want to use them to prove the last two results, since I can't find them using loogle. However, later I found them by using <code>Submodule.FG</code> instead of <code>Module.Finite</code>. So I think these two are not needed to be added to mathlib. But what about the first three?</p>",
        "id": 434612322,
        "sender_full_name": "Jz Pan",
        "timestamp": 1713726899
    },
    {
        "content": "<p><em>ping</em> what's the progress of <a href=\"https://github.com/leanprover-community/mathlib4/pull/11731\">#11731</a>?</p>",
        "id": 435365047,
        "sender_full_name": "Jz Pan",
        "timestamp": 1714043472
    },
    {
        "content": "<p>I'm really sorry, this looks great to me but I don't have access to a computer with internet until Saturday. You might be better off bringing this up in the PR review stream.</p>",
        "id": 435386186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714050719
    },
    {
        "content": "<p>Oops, I think this slipped through the maintainer merge queue. Just bumped it there.</p>",
        "id": 435397445,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714053719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint/near/435386186\">said</a>:</p>\n<blockquote>\n<p>... You might be better off bringing this up in the PR review stream.</p>\n</blockquote>\n<p>Thank you for the information. But I have trouble subscribing or viewing this stream; subscribing is always unsuccessful, and I can only see the messages two years ago in it.</p>",
        "id": 435456706,
        "sender_full_name": "Jz Pan",
        "timestamp": 1714074567
    },
    {
        "content": "<p>I split the first part of this PR, concerning linearly disjointness of submodules, as <a href=\"https://github.com/leanprover-community/mathlib4/pull/12434\">#12434</a>, and is ready for review. Comments welcome.</p>",
        "id": 435456956,
        "sender_full_name": "Jz Pan",
        "timestamp": 1714074657
    },
    {
        "content": "<p><a class=\"stream\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews\">#PR reviews</a> is the stream I'm talking about. Can you confirm that you can't see recent messages in this stream? I don't think it's private so this should probably be a bug report unless I've made a mistake</p>",
        "id": 435457300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714074778
    },
    {
        "content": "<p>I can only see the messages in that stream around year 2022. It's not loading any newer messages. Maybe I should try refreshing the web browser. The Zulip web UI works weirdly and never runs properly in my browser, for example, it doesn't load newest messages first, but always insists load message around 2022 first.</p>",
        "id": 435460334,
        "sender_full_name": "Jz Pan",
        "timestamp": 1714075966
    },
    {
        "content": "<p>Try the app?</p>",
        "id": 435461600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714076530
    },
    {
        "content": "<p>I have just download the Windows app, it is 200MB+ and seems just a browser based app... Looks like nothing have changed yet.</p>\n<p>After restarting my computer, there are some recent messages in PR reviews channel, in both web UI and Windows app.</p>\n<p>I tried close and reopen the Windows app, the whole recent partipicated conversation list get disappared and needed to be downloaded again (and which takes a few minutes). Huh! It's not even cached locally by the app. This makes the app the same as the web UI, no any advantages. I decided to uninstall it to save a few hundred megabytes from my harddisk.</p>",
        "id": 435479751,
        "sender_full_name": "Jz Pan",
        "timestamp": 1714085867
    },
    {
        "content": "<p>I have never had to wait a few minutes for anything to happen ever when using the Linux app, so I don't really know what's going on at your end</p>",
        "id": 435486129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714090609
    },
    {
        "content": "<p><em>ping</em> could someone look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/12498\">#12498</a>? <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312498.20some.20linear.20maps.20induced.20by.20mul.2E.20for.20submodules/near/440929818\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.2312498.20some.20linear.20maps.20induced.20by.20mul.2E.20for.20submodules/near/440929818</a></p>",
        "id": 446690887,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719255103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"366779\">@Jz Pan</span>, three generic comments:</p>\n<ol>\n<li>There are open reviewer comments on the PR. If there's nothing further to do with these, mark them as resolved. Otherwise these will steer new reviewers away from looking at the PR.</li>\n<li>There's a merge conflict, which will prevent the PR appearing on the <a href=\"https://bit.ly/3cKk3ld\">#queue</a>.</li>\n<li>Requests to look at PRs are better done in the <code>PR reviews</code> channel.</li>\n</ol>",
        "id": 446750995,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719277578
    },
    {
        "content": "<p>Sorry for the noise, but I already posted the thread in reviews channel for almost one month, and got no response.</p>",
        "id": 446838200,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719310558
    },
    {
        "content": "<p>I would suggest for a comment like <a href=\"https://github.com/leanprover-community/mathlib4/pull/12498#discussion_r1652446945\">https://github.com/leanprover-community/mathlib4/pull/12498#discussion_r1652446945</a> that you don't click resolve, but instead mention the reviewer by @name, and explain why you disagree with their suggestion. Notice that their suggestion had been up, without a response from you, for that last month.</p>",
        "id": 446839690,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719310929
    }
]