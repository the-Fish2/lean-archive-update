[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">enum</span> <span class=\"bp\">=</span> <span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">),(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">),(</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">)]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- I want a array version of `List.enum`</span>\n<span class=\"kd\">def</span> <span class=\"n\">Array.enum</span> <span class=\"o\">(</span><span class=\"n\">ar</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">indexes</span> <span class=\"o\">:=</span> <span class=\"n\">List.range</span> <span class=\"n\">ar.size</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">List.toArray</span>\n  <span class=\"n\">Array.zip</span> <span class=\"n\">indexes</span> <span class=\"n\">ar</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">enum</span>\n</code></pre></div>",
        "id": 411489696,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1704531710
    },
    {
        "content": "<p>After searching the library, it appears that there is no Array counterpart to the <code>List.enum</code> function. Am I missing something?</p>",
        "id": 411489858,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1704531801
    },
    {
        "content": "<p>If you know the <code>List.range</code> counterpart of <code>Array</code>, please let me know.</p>",
        "id": 411489951,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1704531878
    },
    {
        "content": "<p>I think that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Array.range#doc\">docs#Array.range</a> exists.  I do not know about <code>enum</code>.</p>",
        "id": 411490401,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1704532311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> <br>\nThanks.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Init.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Array.enum</span> <span class=\"o\">(</span><span class=\"n\">ar</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">indexes</span> <span class=\"o\">:=</span> <span class=\"n\">Array.range</span> <span class=\"n\">ar.size</span>\n  <span class=\"n\">Array.zip</span> <span class=\"n\">indexes</span> <span class=\"n\">ar</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">enum</span>\n</code></pre></div>",
        "id": 411490496,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1704532407
    },
    {
        "content": "<p>In that same file, there is also this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Array.zipWithIndex</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>  <span class=\"c1\">-- #[(3, 0), (2, 1), (1, 2)]</span>\n</code></pre></div>",
        "id": 411490626,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1704532518
    },
    {
        "content": "<p>Thank you. The <code>zipWithIndex</code> is very close to what I want, but in a different order of elements than the <code>enum</code>.</p>",
        "id": 411490757,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1704532634
    },
    {
        "content": "<p>If <code>Array.enum</code> is indeed missing from the library, I thought it should be added.</p>",
        "id": 411492349,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1704533828
    }
]