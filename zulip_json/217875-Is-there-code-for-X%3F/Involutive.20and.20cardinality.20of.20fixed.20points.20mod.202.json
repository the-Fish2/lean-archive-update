[
    {
        "content": "<p>Do we have these</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.Involutive</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f.fixedPoints</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">≡</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">f.fixedPoints</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>? I tried proving the first one myself using setoids but failed.</p>",
        "id": 411521037,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1704560000
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.Perm.card_fixedPoints_modEq#doc\">docs#Equiv.Perm.card_fixedPoints_modEq</a> should be relevant I think</p>",
        "id": 411521570,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704560504
    },
    {
        "content": "<p>That's great! After changing <code>ZMOD</code> to <code>MOD</code> I came up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lem</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.Involutive</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">≡</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">f.fixedPoints</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Equiv.Perm.card_fixedPoints_modEq</span>\n  <span class=\"n\">case</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">1</span>\n  <span class=\"n\">case</span> <span class=\"n\">hf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"n\">Function.End.mul_def</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Function.Involutive.comp_self</span> <span class=\"n\">hf</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.Involutive</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f.fixedPoints</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">lem</span> <span class=\"n\">f</span> <span class=\"n\">hf</span>\n  <span class=\"n\">simp_all</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.even_iff.mpr</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 411521971,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1704560799
    }
]