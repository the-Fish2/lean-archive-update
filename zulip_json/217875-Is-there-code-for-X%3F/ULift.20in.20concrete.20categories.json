[
    {
        "content": "<p>Currently there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.uliftFunctor#doc\">docs#CategoryTheory.uliftFunctor</a> for universe lifting functorially from <code>Type u</code> to <code>Type (max u v)</code> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.ULift.upFunctor#doc\">docs#CategoryTheory.ULift.upFunctor</a> for general categories. Is there a convenient way to obtain for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MonCat.uliftFunctor</span> <span class=\"o\">:</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"bp\">⥤</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">MonCat.of</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">MonCat.ofHom</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"o\">⟨⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">ULift.up</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x.down</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">map_id</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_comp</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 425696349,
        "sender_full_name": "Christian Merten",
        "timestamp": 1709998885
    },
    {
        "content": "<p>Maybe slightly better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MonCat.uliftFunctor</span> <span class=\"o\">:</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"bp\">⥤</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">MonCat.of</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">MonCat.ofHom</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">MulEquiv.ulift.symm.toMonoidHom.comp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f.comp</span> <span class=\"n\">MulEquiv.ulift.toMonoidHom</span>\n  <span class=\"n\">map_id</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_comp</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 425699025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710001117
    },
    {
        "content": "<p>There should be something akin to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulEquiv.ulift#doc\">docs#MulEquiv.ulift</a> for each category you care about, so the pattern is at least easy to repeat</p>",
        "id": 425699098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710001196
    },
    {
        "content": "<p>Thanks, so no general construction in sight? Having this for <code>MonCat</code>, <code>CommMonCat</code>, <code>GroupCat</code>, <code>CommGroupCat</code> seems quite messy.</p>",
        "id": 425699205,
        "sender_full_name": "Christian Merten",
        "timestamp": 1710001270
    },
    {
        "content": "<p>Maybe there could be a \"faithful ULift\" typeclass on bundled categories.</p>",
        "id": 425699440,
        "sender_full_name": "Christian Merten",
        "timestamp": 1710001443
    },
    {
        "content": "<p>Do you mean bundled categories, or concrete categories?</p>",
        "id": 425699838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710001747
    },
    {
        "content": "<p>I was actually thinking bundled categories, and thought of something along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">checkBinderAnnotations</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ClassFactory</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">HomFactory</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ClassFactory.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ClassFactory.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">⦄</span> <span class=\"o\">⦃</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">c'</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ClassFactory.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">{</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ClassFactory.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}}</span>\n  <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">HomFactory</span> <span class=\"n\">c</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">homLiftUp</span> <span class=\"o\">:</span> <span class=\"n\">HomFactory</span> <span class=\"n\">c</span> <span class=\"n\">c'</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">homLiftDown</span> <span class=\"o\">:</span> <span class=\"n\">HomFactory</span> <span class=\"n\">c'</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">homUp</span> <span class=\"o\">:</span> <span class=\"n\">HomFactory</span> <span class=\"n\">c'</span> <span class=\"n\">c'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">FaithfulULift</span> <span class=\"n\">where</span>\n  <span class=\"n\">uliftInst</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c'</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">uliftHom</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">homLiftUp</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">uliftInst</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"n\">uliftInv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">homLiftDown</span> <span class=\"o\">(</span><span class=\"n\">uliftInst</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n  <span class=\"c1\">-- a condition on composition of uliftHom and uliftInv, needs some inter-universal BundledHom maybe?</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">BundledHom</span> <span class=\"n\">hom</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BundledHom</span> <span class=\"n\">homUp</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">BundledHom.uliftFunctor</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">FaithfulULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">homLiftUp</span> <span class=\"n\">homLiftDown</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Bundled</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">⥤</span> <span class=\"o\">(</span><span class=\"n\">Bundled</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Bundled.of</span> <span class=\"n\">c'</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inst.uliftInst</span> <span class=\"n\">X</span> <span class=\"n\">X.str</span><span class=\"o\">)</span>\n  <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">show</span> <span class=\"bp\">@</span><span class=\"n\">homUp</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inst.uliftInst</span> <span class=\"n\">X</span> <span class=\"n\">X.str</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inst.uliftInst</span> <span class=\"n\">Y</span> <span class=\"n\">Y.str</span><span class=\"o\">)</span>\n    <span class=\"c1\">-- inter-universal BundledHom might yield: uliftHom ∘ f ∘ uliftInv</span>\n    <span class=\"gr\">admit</span>\n  <span class=\"n\">map_id</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_comp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>To make this work, I need some inter-universal <code>BundledHom</code> that allows composing homs between objects in different universes, as it is the case for <code>MonoidHom</code>. But for this I would like to quantify over universes, which I think is not possible?</p>",
        "id": 425714326,
        "sender_full_name": "Christian Merten",
        "timestamp": 1710013980
    }
]