[
    {
        "content": "<p>Is there a better way to avoid <code>unsafe</code> in the value domain when using <code>lean</code> to perform NbPE for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mrow><mi>β</mi><mi>η</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_{\\beta\\eta}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05278em;\">β</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">η</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>-calculus :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">VarId</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"bp\">|</span> <span class=\"n\">Str</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">VarId</span>\n <span class=\"bp\">|</span> <span class=\"n\">Level</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">VarId</span> <span class=\"c1\">-- de Bruijn level</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">VarId</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">VarId</span> <span class=\"n\">where</span>\n  <span class=\"n\">beq</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₂</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Str</span> <span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">Str</span> <span class=\"n\">s₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s₁</span> <span class=\"bp\">==</span> <span class=\"n\">s₂</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Level</span> <span class=\"n\">n₁</span><span class=\"o\">,</span> <span class=\"n\">Level</span> <span class=\"n\">n₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n₁</span> <span class=\"bp\">==</span> <span class=\"n\">n₂</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">VarId</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Str</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Level</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"x\"</span> <span class=\"bp\">++</span> <span class=\"n\">reprPrec</span> <span class=\"n\">n</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"o\">:</span> <span class=\"n\">VarId</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Term</span>\n <span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Term</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Term</span>\n <span class=\"bp\">|</span> <span class=\"n\">Lam</span> <span class=\"o\">:</span> <span class=\"n\">VarId</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Term</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"uninitialized\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Term.repr</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Std.Format</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reprPrec</span> <span class=\"n\">v</span> <span class=\"n\">i</span>\n  <span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"(\"</span> <span class=\"bp\">++</span> <span class=\"n\">f.repr</span> <span class=\"n\">i</span> <span class=\"bp\">++</span> <span class=\"s2\">\" \"</span> <span class=\"bp\">++</span> <span class=\"n\">a.repr</span> <span class=\"n\">i</span> <span class=\"bp\">++</span> <span class=\"s2\">\")\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lam</span> <span class=\"n\">v</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"(λ \"</span> <span class=\"bp\">++</span> <span class=\"n\">reprPrec</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">++</span> <span class=\"s2\">\" . \"</span> <span class=\"bp\">++</span> <span class=\"n\">b.repr</span> <span class=\"n\">i</span> <span class=\"bp\">++</span> <span class=\"s2\">\")\"</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">Term.repr</span> <span class=\"n\">i</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Var'</span> <span class=\"o\">(</span><span class=\"n\">varId</span> <span class=\"o\">:</span> <span class=\"n\">VarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Var</span> <span class=\"n\">varId</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lam'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">VarId</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">Level</span> <span class=\"n\">n</span>\n    <span class=\"n\">Lam</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">App'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">inductive</span> <span class=\"n\">Value</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Tm</span> <span class=\"o\">(</span><span class=\"n\">tm</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Fn</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Value</span><span class=\"o\">)</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Value</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">Value.Tm</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inhabited.default</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Value</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">Term.eval</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">VarId</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Value</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Value</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">f.eval</span> <span class=\"n\">r</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Fn</span> <span class=\"n\">f'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f'</span> <span class=\"bp\">$</span> <span class=\"n\">a.eval</span> <span class=\"n\">r</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"expected function\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lam</span> <span class=\"n\">v</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fn</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b.eval</span> <span class=\"k\">fun</span> <span class=\"n\">v'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"bp\">==</span> <span class=\"n\">v'</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">r</span> <span class=\"n\">v'</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">LType</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Base</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">LType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Arr</span> <span class=\"o\">:</span> <span class=\"n\">LType</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">LType</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">LType</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">LType</span>\n\n<span class=\"kd\">mutual</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">reify</span> <span class=\"o\">:</span> <span class=\"n\">LType</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Value</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Base</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Tm</span> <span class=\"n\">tm</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Arr</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">,</span> <span class=\"n\">Fn</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lam'</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reify</span> <span class=\"n\">t₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"n\">reflect</span> <span class=\"n\">t₁</span> <span class=\"o\">(</span><span class=\"n\">Var'</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"type mismatch\"</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">reflect</span> <span class=\"o\">:</span> <span class=\"n\">LType</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Value</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Base</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tm</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Tm</span> <span class=\"n\">tm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Arr</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Fn</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reflect</span> <span class=\"n\">t₂</span> <span class=\"o\">(</span><span class=\"n\">App'</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">reify</span> <span class=\"n\">t₁</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"kd\">end</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">LType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">reify</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">e.eval</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"unbound variable\"</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- λ f x . (λ y . f y) (f x)</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:=</span>\n  <span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">Arr</span> <span class=\"o\">(</span><span class=\"n\">Arr</span> <span class=\"o\">(</span><span class=\"n\">Base</span> <span class=\"s2\">\"a\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Base</span> <span class=\"s2\">\"b\"</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Arr</span> <span class=\"o\">(</span><span class=\"n\">Base</span> <span class=\"s2\">\"a\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Base</span> <span class=\"s2\">\"b\"</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">Lam</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"f\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Lam</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">Lam</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"y\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"f\"</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"y\"</span><span class=\"o\">))))</span>\n  <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"f\"</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"x\"</span><span class=\"o\">))))))</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 410697905,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1704092217
    },
    {
        "content": "<p>I don't think it can be done. As some evidence, consider that <code>eval</code> does not use typing information at all, and as a result it executes like an untyped lambda calculus evaluator:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:=</span>\n  <span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">Base</span> <span class=\"s2\">\"a\"</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">App</span>\n    <span class=\"o\">(</span><span class=\"n\">Lam</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"x\"</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"x\"</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"n\">Lam</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"x\"</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)))))</span>\n<span class=\"c1\">-- stack overflow</span>\n</code></pre></div>",
        "id": 410702929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704097061
    },
    {
        "content": "<p>Therefore the denotational semantics for these terms cannot be regular lean functions, and so <code>Value</code> really does have to be <code>unsafe</code> because it is not mathematically well defined. You can do it with a less \"executable\" encoding but my reading of <a href=\"https://www.cse.chalmers.se/~peterd/papers/Caminha.pdf\">https://www.cse.chalmers.se/~peterd/papers/Caminha.pdf</a> (which I assume is your reference) is that this is kind of the point</p>",
        "id": 410703046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704097186
    },
    {
        "content": "<p>There is also the following remark, which looks pertinent:</p>\n<blockquote>\n<p>Remark 1. It would be possible to let E be an object-type-indexed set family, as in the previous section, rather than a single set. We will not pursue such an approach for two reasons, though. First, for practical applications, it is important that correctness of the algorithm can be established in a straightforward way even when it is expressed in a non-dependently typed functional language. And second, there are additional complications in expressing the normalization algorithm for the call-by-value setting in the next section in a dependent-typed setting. The problems have to do with the interaction between computational effects such as continuations with a dependent type structure; at the time of writing, we do not have a viable dependently-typed algorithm for that case.</p>\n</blockquote>",
        "id": 410703258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704097406
    },
    {
        "content": "<p>I got a version of this code working for <em>typed</em> STLC lambda terms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">VarId</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Str</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">VarId</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Level</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">VarId</span> <span class=\"c1\">-- de Bruijn level</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Inhabited</span>\n<span class=\"kn\">open</span> <span class=\"n\">VarId</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">VarId</span> <span class=\"n\">where</span>\n  <span class=\"n\">beq</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₂</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Str</span> <span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">Str</span> <span class=\"n\">s₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s₁</span> <span class=\"bp\">==</span> <span class=\"n\">s₂</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Level</span> <span class=\"n\">n₁</span><span class=\"o\">,</span> <span class=\"n\">Level</span> <span class=\"n\">n₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n₁</span> <span class=\"bp\">==</span> <span class=\"n\">n₂</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">VarId</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Str</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Level</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"x\"</span> <span class=\"bp\">++</span> <span class=\"n\">reprPrec</span> <span class=\"n\">n</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">LType</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Base</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">LType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Arr</span> <span class=\"o\">:</span> <span class=\"n\">LType</span> <span class=\"bp\">→</span> <span class=\"n\">LType</span> <span class=\"bp\">→</span> <span class=\"n\">LType</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">LType.repr</span> <span class=\"o\">:</span> <span class=\"n\">LType</span> <span class=\"bp\">→</span> <span class=\"n\">Std.Format</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Base</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"{A}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Arr</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"({A.repr} → {B.repr})\"</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">LType</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"n\">v</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">LType.repr</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">LType</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"o\">:</span> <span class=\"n\">VarId</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n <span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n <span class=\"bp\">|</span> <span class=\"n\">Lam</span> <span class=\"o\">:</span> <span class=\"n\">VarId</span> <span class=\"bp\">→</span> <span class=\"n\">LType</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"uninitialized\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Term.repr</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Std.Format</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_root_.repr</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"(\"</span> <span class=\"bp\">++</span> <span class=\"n\">f.repr</span> <span class=\"bp\">++</span> <span class=\"s2\">\" \"</span> <span class=\"bp\">++</span> <span class=\"n\">a.repr</span> <span class=\"bp\">++</span> <span class=\"s2\">\")\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lam</span> <span class=\"n\">v</span> <span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"(λ {_root_.repr v} : {t.repr} . {b.repr})\"</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"n\">v</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Term.repr</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Var'</span> <span class=\"o\">(</span><span class=\"n\">varId</span> <span class=\"o\">:</span> <span class=\"n\">VarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Var</span> <span class=\"n\">varId</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lam'</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">LType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">VarId</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">Level</span> <span class=\"n\">n</span>\n    <span class=\"n\">Lam</span> <span class=\"n\">v</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">App'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Value</span> <span class=\"o\">:</span> <span class=\"n\">LType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Base</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Arr</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Value</span> <span class=\"n\">t₁</span> <span class=\"bp\">→</span> <span class=\"n\">Value</span> <span class=\"n\">t₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Value.default</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">τ</span><span class=\"o\">},</span> <span class=\"n\">Value</span> <span class=\"n\">τ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Base</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inhabited.default</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Arr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">default</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Value</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">Value.default</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">TTerm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">VarId</span> <span class=\"bp\">→</span> <span class=\"n\">LType</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">LType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TTerm</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">TTerm</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">Arr</span> <span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">TTerm</span> <span class=\"n\">T</span> <span class=\"n\">τ₁</span> <span class=\"bp\">→</span> <span class=\"n\">TTerm</span> <span class=\"n\">T</span> <span class=\"n\">τ₂</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">τ₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TTerm</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">v'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">v'</span> <span class=\"k\">then</span> <span class=\"n\">τ₁</span> <span class=\"k\">else</span> <span class=\"n\">T</span> <span class=\"n\">v'</span><span class=\"o\">)</span> <span class=\"n\">τ₂</span> <span class=\"bp\">→</span> <span class=\"n\">TTerm</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">Arr</span> <span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">τ</span><span class=\"o\">,</span> <span class=\"n\">TTerm</span> <span class=\"n\">T</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">default</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TTerm.toTerm</span> <span class=\"o\">:</span> <span class=\"n\">TTerm</span> <span class=\"n\">T</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Var</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">App</span> <span class=\"n\">t₁.toTerm</span> <span class=\"n\">t₂.toTerm</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">v</span> <span class=\"n\">τ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lam</span> <span class=\"n\">v</span> <span class=\"n\">τ</span> <span class=\"n\">b.toTerm</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Term.toTTerm</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"bp\">Σ</span> <span class=\"n\">τ</span><span class=\"o\">,</span> <span class=\"n\">TTerm</span> <span class=\"n\">T</span> <span class=\"n\">τ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">v</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">t₁.toTTerm</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">Arr</span> <span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span><span class=\"o\">,</span> <span class=\"n\">t₁</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">τ₁'</span><span class=\"o\">,</span> <span class=\"n\">t₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">t₂.toTTerm</span>\n      <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">τ₁</span> <span class=\"bp\">=</span> <span class=\"n\">τ₁'</span> <span class=\"k\">then</span> <span class=\"o\">⟨</span><span class=\"n\">τ₂</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">t₁</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">t₂</span><span class=\"o\">)⟩</span> <span class=\"k\">else</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"type mismatch\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"type mismatch\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lam</span> <span class=\"n\">v</span> <span class=\"n\">τ₁</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">b.toTTerm</span>\n    <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">v</span> <span class=\"n\">τ₁</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TTerm.eval</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">VarId</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Value</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">TTerm</span> <span class=\"n\">T</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">Value</span> <span class=\"n\">τ</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f.eval</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a.eval</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"o\">(</span><span class=\"n\">τ₁</span> <span class=\"o\">:=</span> <span class=\"n\">τ₁</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b.eval</span> <span class=\"k\">fun</span> <span class=\"n\">v'</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">v'</span> <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">r</span> <span class=\"n\">v'</span>\n\n<span class=\"kd\">mutual</span>\n<span class=\"kd\">def</span> <span class=\"n\">reify</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">τ</span><span class=\"o\">,</span> <span class=\"n\">Value</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Base</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tm</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Arr</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lam'</span> <span class=\"n\">t₁</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reify</span> <span class=\"n\">t₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"n\">reflect</span> <span class=\"n\">t₁</span> <span class=\"o\">(</span><span class=\"n\">Var'</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">reflect</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">τ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Value</span> <span class=\"n\">τ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Base</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tm</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Arr</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reflect</span> <span class=\"n\">t₂</span> <span class=\"o\">(</span><span class=\"n\">App'</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">reify</span> <span class=\"n\">t₁</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Term.toTTerm</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">default</span><span class=\"o\">)</span> <span class=\"n\">e</span>\n  <span class=\"n\">reify</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">e.eval</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"unbound variable\"</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- λ f x . (λ y . f y) (f x)</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:=</span>\n  <span class=\"n\">norm</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">Lam</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"f\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Arr</span> <span class=\"o\">(</span><span class=\"n\">Base</span> <span class=\"s2\">\"a\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Base</span> <span class=\"s2\">\"a\"</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">Lam</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Base</span> <span class=\"s2\">\"a\"</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">App</span>\n    <span class=\"o\">(</span><span class=\"n\">Lam</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"y\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Base</span> <span class=\"s2\">\"a\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"f\"</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"y\"</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"f\"</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">Str</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)))</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 410707650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704101557
    },
    {
        "content": "<p>Without having types in the lambdas, I'm not sure how to write the typechecking stage <code>Term.toTTerm</code>, even given a top level type annotation, because you can have terms like <code>(λ x. e) x : A</code> where the type of <code>x</code> is unbound</p>",
        "id": 410707786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704101684
    },
    {
        "content": "<p>You could probably do a more complex type inference algorithm like algorithm W but it doesn't seem to be the focus here</p>",
        "id": 410707921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704101781
    },
    {
        "content": "<p>wow, thanks so much for all these suggestions! I went to sleep right after posting this. Glad to see it works given enough type info and I would agree that type inference will be too overkilling for the purpose here.</p>",
        "id": 410721094,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1704113789
    },
    {
        "content": "<p>Interestingly, DT does work here as an encoding of the object language.</p>",
        "id": 410721262,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1704113978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639630\">Schrodinger ZHU Yifan</span> has marked this topic as resolved.</p>",
        "id": 410721609,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704114187
    }
]