[
    {
        "content": "<p>It seems that <code>ofPPFormat</code> can be used to create a <code>MessageData</code> „lazily“. I expect this would be very useful in tactic code of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">throwError</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"foo bar {← baz}\"</span>\n</code></pre></div>\n<p>where <code>baz : MetaM MessageData</code> is a possibly expensive operation, and you don’t want to run it unless someone really looks at the message, so that <code>try tac</code> will not spend time assembling the error message.</p>\n<p>But I don’t quite understand the plumbing here. Can one write a </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lazyMessageData</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MessageData</span> <span class=\"bp\">→</span> <span class=\"n\">MessageData</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lazyMessageData</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MessageData</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">MessageData</span>\n</code></pre></div>\n<p>somehow?</p>",
        "id": 432139421,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712644594
    },
    {
        "content": "<p>Here is a first attempt, although I expect it loses the ability to hover…</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">_root_.Lean.MessageData.thunk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">MessageData</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MessageData</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">ofPPFormat</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">{</span> <span class=\"n\">pp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">ppctx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">msg</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">()</span>\n      <span class=\"n\">msg.formatAux</span>\n        <span class=\"o\">{</span><span class=\"n\">currNamespace</span> <span class=\"o\">:=</span> <span class=\"n\">ppctx.currNamespace</span><span class=\"o\">,</span> <span class=\"n\">openDecls</span> <span class=\"o\">:=</span> <span class=\"n\">ppctx.openDecls</span><span class=\"o\">}</span>\n        <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">{</span><span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">ppctx.env</span><span class=\"o\">,</span> <span class=\"n\">mctx</span> <span class=\"o\">:=</span> <span class=\"n\">ppctx.mctx</span><span class=\"o\">,</span> <span class=\"n\">lctx</span> <span class=\"o\">:=</span> <span class=\"n\">ppctx.lctx</span><span class=\"o\">,</span> <span class=\"n\">opts</span> <span class=\"o\">:=</span> <span class=\"n\">ppctx.opts</span><span class=\"o\">})</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">msg</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">()</span>\n      <span class=\"n\">msg.format</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>It seems hard to use <code>ofPPformat</code> for this without losing the info hover.</p>\n<p>Let’s try adding a constructor <code>.thunk  : Thunk MessageData → MessageData</code>… that works ok if the delayed code is pure, until you need to do <code>MetaM</code> stuff lazily, then<code>Thunk</code> is too restrictive, but <code>.thunk : IO MessageData → MessageData</code> fails <code>inductive</code> can’t recurse through <code>IO</code>, it seems… oh wey.</p>",
        "id": 432165307,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712651179
    },
    {
        "content": "<p>Here is my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span> <span class=\"n\">Term</span> <span class=\"n\">Command</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lazyMessageData</span> <span class=\"o\">(</span><span class=\"n\">mx</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MessageData</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MessageData</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">metaCtx</span> <span class=\"bp\">←</span> <span class=\"n\">readThe</span> <span class=\"n\">Meta.Context</span>\n  <span class=\"k\">let</span> <span class=\"n\">metaSt</span> <span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">Meta.State</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreCtx</span> <span class=\"bp\">←</span> <span class=\"n\">readThe</span> <span class=\"n\">Core.Context</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreSt</span> <span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">Core.State</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">MessageData.ofPPFormat</span> <span class=\"o\">{</span>\n    <span class=\"n\">pp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span>\n        <span class=\"o\">(</span><span class=\"n\">mx</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">addMessageContextFull</span><span class=\"o\">)</span>\n          <span class=\"bp\">|&gt;.</span><span class=\"n\">run'</span> <span class=\"n\">metaCtx</span> <span class=\"n\">metaSt</span>\n          <span class=\"bp\">|&gt;.</span><span class=\"n\">toIO</span> <span class=\"n\">coreCtx</span> <span class=\"n\">coreSt</span>\n      <span class=\"n\">MessageData.format</span> <span class=\"n\">m</span>\n    <span class=\"o\">}</span>\n  <span class=\"n\">return</span> <span class=\"n\">m</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#test\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Command.liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"bp\">←</span> <span class=\"n\">lazyMessageData</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"lazy: {t}\"</span><span class=\"o\">)</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"eager: {t}\"</span>\n\n\n<span class=\"bp\">#</span><span class=\"n\">test</span> <span class=\"mi\">42</span>\n</code></pre></div>\n<p>You are right that it loses hovers. I am not entirely sure, but I'd say this is a bug. Perhaps in <a href=\"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Widget/InteractiveDiagnostic.lean#L105\"><code>msgToInteractiveAux</code></a>?</p>",
        "id": 432354415,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1712702675
    },
    {
        "content": "<p>Is this \"save all the state for a callback\" what <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=control#doc\">docs#control</a> is for?</p>",
        "id": 432360697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712706335
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>! I am playing around with something similar in <a href=\"https://github.com/leanprover/lean4/pull/3234\">https://github.com/leanprover/lean4/pull/3234</a> now.</p>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I thought so, but couldn't get it to work. Maybe we don’t have the necessary instances to go from <code>MetaM</code> to <code>IO</code>?</p>",
        "id": 432424773,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712732303
    }
]