[
    {
        "content": "<p>Do we have that the colimit of some <code>SingleObj G ‚•§ Type*</code> is the quotient by the induced <code>MulAction</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">SingleObj</span> <span class=\"n\">G</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">J.obj</span> <span class=\"o\">(</span><span class=\"n\">SingleObj.star</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">J.map</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n  <span class=\"n\">one_smul</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">show</span> <span class=\"n\">J.map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">FunctorToTypes.map_id_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">mul_smul</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">show</span> <span class=\"n\">J.map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">J.map</span> <span class=\"n\">h</span> <span class=\"bp\">‚â´</span> <span class=\"n\">J.map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">SingleObj.comp_as_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">FunctorToTypes.map_comp_apply</span><span class=\"o\">,</span> <span class=\"n\">types_comp_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quotCocone</span> <span class=\"o\">:</span> <span class=\"n\">Cocone</span> <span class=\"n\">J</span> <span class=\"n\">where</span>\n  <span class=\"n\">pt</span> <span class=\"o\">:=</span> <span class=\"n\">MulAction.orbitRel.Quotient</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">J.obj</span> <span class=\"o\">(</span><span class=\"n\">SingleObj.star</span> <span class=\"n\">G</span><span class=\"o\">))</span>\n  <span class=\"n\">Œπ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">SingleObj.natTrans</span>\n    <span class=\"n\">intro</span> <span class=\"n\">g</span>\n    <span class=\"k\">show</span> <span class=\"n\">J.map</span> <span class=\"n\">g</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚ü¶</span><span class=\"n\">x</span><span class=\"bp\">‚üß</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚ü¶</span><span class=\"n\">x</span><span class=\"bp\">‚üß</span><span class=\"o\">)</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">types_comp_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Quotient.sound</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Exists.intro</span> <span class=\"n\">g</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quotCoconeIsColimit</span> <span class=\"o\">:</span> <span class=\"n\">IsColimit</span> <span class=\"o\">(</span><span class=\"n\">quotCocone</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">desc</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">fac</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">uniq</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Loogling for <code>MulAction.orbitRel</code> and <code>CategoryTheory.Limits.IsColimit</code> did not yield anything, but I wanted to make sure, I am not missing something.</p>",
        "id": 419335746,
        "sender_full_name": "Christian Merten",
        "timestamp": 1706822609
    },
    {
        "content": "<p>I don't think we have this.</p>",
        "id": 419335874,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706822656
    },
    {
        "content": "<p>Can you reuse anything from <code>Mathlib.CategoryTheory.Limits.Types</code>?</p>",
        "id": 419336208,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706822794
    },
    {
        "content": "<p>It's straightforward enough there's no particular need to reuse anything, I guess.</p>",
        "id": 419336241,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706822813
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.Types.colimitCocone#doc\">docs#CategoryTheory.Limits.Types.colimitCocone</a> essentially gives this, except for identifying the sigma type over <code>Unit</code> with a single type.</p>",
        "id": 419336479,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706822918
    },
    {
        "content": "<p>Maybe we should develop some API for (co)limits of categories with a single isomorphism class of objects?</p>",
        "id": 419336541,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706822953
    },
    {
        "content": "<p>The equivalence relation defined for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.Types.Quot#doc\">docs#CategoryTheory.Limits.Types.Quot</a> should be the same as the one from <code>orbitRel</code> right?</p>",
        "id": 419336715,
        "sender_full_name": "Christian Merten",
        "timestamp": 1706823027
    },
    {
        "content": "<p>I think so, yes.</p>",
        "id": 419336791,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706823065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Colimit.20of.20functor.20from.20.60SingleObj.60.20is.20quotient/near/419336541\">said</a>:</p>\n<blockquote>\n<p>Maybe we should develop some API for (co)limits of categories with a single isomorphism class of objects?</p>\n</blockquote>\n<p>You mean with target <code>Type</code> or more generally?</p>",
        "id": 419336998,
        "sender_full_name": "Christian Merten",
        "timestamp": 1706823157
    },
    {
        "content": "<p>Mostly for type (or more generally concrete cats satisfying some (co)limit preservation condition), but maybe there are interesting things one can say more generally?</p>",
        "id": 419337891,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706823536
    },
    {
        "content": "<p>I guess it's true in general that when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is a monoid acting on some object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> in a category, that one gets a functor as you describe above, and if the categorical quotient <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mi mathvariant=\"normal\">/</mi><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">X/M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> exists then it is the colimit of this functor. That would be a nice thing to formalize! I guess the limit is the categorical \"fixed points\" construction?</p>",
        "id": 419338712,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706823864
    },
    {
        "content": "<p>I don't think mathlib knows about quotients of objects in general categories.</p>",
        "id": 419338763,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706823895
    },
    {
        "content": "<p>Isn't a categorical quotient (if it exists), by definition the colimit of some <code>SingleObj G ‚•§ C</code>?</p>",
        "id": 419339171,
        "sender_full_name": "Christian Merten",
        "timestamp": 1706824081
    },
    {
        "content": "<p>Well, it depends on how you define it :)</p>",
        "id": 419339270,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706824110
    },
    {
        "content": "<p>It's also the universal object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> with a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>‚Üí</mo><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">X \\to Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> which is equivariant where the action on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> is trivial.</p>",
        "id": 419339406,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706824186
    },
    {
        "content": "<p>I think I prefer the colimit definition though, since you need to have the functor <code>SingleObj G ‚•§ C</code> to define the action anyway.</p>",
        "id": 419339690,
        "sender_full_name": "Christian Merten",
        "timestamp": 1706824311
    },
    {
        "content": "<p>Well here one could define it as a morphism of monoids from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">End(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 419339789,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706824339
    },
    {
        "content": "<p>This is all about single object categories though, not as you initially suggested, about <del>connected groupoids</del> categories with a single isomorphism class, I don't know if there is anything intersting to say about that.<br>\n(connected groupoids are only one case of these)</p>",
        "id": 419339948,
        "sender_full_name": "Christian Merten",
        "timestamp": 1706824424
    },
    {
        "content": "<p>Btw, yes <code>Types.Quot.Rel</code> and <code>MulAction.orbitRel</code> agree up to twisting arguments and inverting morphisms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">J.obj</span> <span class=\"o\">(</span><span class=\"n\">SingleObj.star</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Types.Quot.Rel</span> <span class=\"n\">J</span> <span class=\"o\">‚ü®</span><span class=\"n\">SingleObj.star</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">SingleObj.star</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">‚ü©</span>\n    <span class=\"bp\">‚Üî</span> <span class=\"n\">Setoid.Rel</span> <span class=\"o\">(</span><span class=\"n\">MulAction.orbitRel</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">J.obj</span> <span class=\"o\">(</span><span class=\"n\">SingleObj.star</span> <span class=\"n\">G</span><span class=\"o\">)))</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rhs</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Setoid.comm'</span><span class=\"o\">]</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 419342250,
        "sender_full_name": "Christian Merten",
        "timestamp": 1706825413
    },
    {
        "content": "<p>Where should this go?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Types.Quot.Rel.iff_orbitRel</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">J.obj</span> <span class=\"o\">(</span><span class=\"n\">SingleObj.star</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Types.Quot.Rel</span> <span class=\"n\">J</span> <span class=\"o\">‚ü®</span><span class=\"n\">SingleObj.star</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">SingleObj.star</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">‚ü©</span>\n    <span class=\"bp\">‚Üî</span> <span class=\"n\">Setoid.Rel</span> <span class=\"o\">(</span><span class=\"n\">MulAction.orbitRel</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">J.obj</span> <span class=\"o\">(</span><span class=\"n\">SingleObj.star</span> <span class=\"n\">G</span><span class=\"o\">)))</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">g</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">symm</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rhs</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Setoid.comm'</span><span class=\"o\">]</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lhs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Types.Quot.equivOrbitRelQuotient</span> <span class=\"o\">:</span>\n    <span class=\"n\">Types.Quot</span> <span class=\"n\">J</span> <span class=\"bp\">‚âÉ</span> <span class=\"n\">MulAction.orbitRel.Quotient</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">J.obj</span> <span class=\"o\">(</span><span class=\"n\">SingleObj.star</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">Quot.lift</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">‚ü¶</span><span class=\"n\">p.2</span><span class=\"bp\">‚üß</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quotient.sound</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"o\">(</span><span class=\"n\">Types.Quot.Rel.iff_orbitRel</span> <span class=\"n\">J</span> <span class=\"n\">a.2</span> <span class=\"n\">b.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">Quot.lift</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quot.mk</span> <span class=\"n\">_</span> <span class=\"o\">‚ü®</span><span class=\"n\">SingleObj.star</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">‚ü©)</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Quot.sound</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">Types.Quot.Rel.iff_orbitRel</span> <span class=\"n\">J</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quot.inductionOn</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quot.inductionOn</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Types.quotientEquiv</span> <span class=\"o\">:</span>\n    <span class=\"n\">colimit</span> <span class=\"n\">J</span> <span class=\"bp\">‚âÉ</span> <span class=\"n\">MulAction.orbitRel.Quotient</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">J.obj</span> <span class=\"o\">(</span><span class=\"n\">SingleObj.star</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Types.colimitEquivQuot</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">Types.Quot.equivOrbitRelQuotient</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>New file in a new folder, e.g. <code>Mathlib.CategoryTheory.Limits.Shapes.Quotients.Types</code>?</p>",
        "id": 419512280,
        "sender_full_name": "Christian Merten",
        "timestamp": 1706898846
    },
    {
        "content": "<p>We could add the characterisation that <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> suggested yesterday in that folder as well.</p>",
        "id": 419512449,
        "sender_full_name": "Christian Merten",
        "timestamp": 1706898912
    },
    {
        "content": "<p>And maybe name the folder <code>SingleObj</code> instead of <code>Quotients</code> to not discriminate against limits.</p>",
        "id": 419512548,
        "sender_full_name": "Christian Merten",
        "timestamp": 1706898962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Colimit.20of.20functor.20from.20.60SingleObj.60.20is.20quotient/near/419339406\">said</a>:</p>\n<blockquote>\n<p>It's also the universal object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> with a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>‚Üí</mo><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">X \\to Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> which is equivariant where the action on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> is trivial.</p>\n</blockquote>\n<p>Is this what you had in mind?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">u‚ÇÇ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">IsQuotient</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí*</span> <span class=\"n\">End</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n  <span class=\"n\">œÄ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Q</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">‚â´</span> <span class=\"n\">œÄ</span> <span class=\"bp\">=</span> <span class=\"n\">œÄ</span>\n  <span class=\"n\">desc</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span>\n  <span class=\"n\">fac</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">œÄ</span> <span class=\"bp\">‚â´</span> <span class=\"n\">desc</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">g</span>\n  <span class=\"n\">uniq</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">œÄ</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g'</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">g'</span> <span class=\"bp\">=</span> <span class=\"n\">desc</span> <span class=\"n\">g</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 419545244,
        "sender_full_name": "Christian Merten",
        "timestamp": 1706912952
    },
    {
        "content": "<p>I think just <code>Mathlib.CategoryTheory.Limits.Shapes.SingleObj</code> is right.</p>",
        "id": 419570008,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706929878
    },
    {
        "content": "<p>This is <a href=\"https://github.com/leanprover-community/mathlib4/pull/10213\">#10213</a>.</p>",
        "id": 419597018,
        "sender_full_name": "Christian Merten",
        "timestamp": 1706956561
    }
]