[
    {
        "content": "<p>I want to proof something like <code>a b c d e p q s : R,   a * b * c * d * e &lt; p * q * e * d * s</code>. Suppose I want to apply</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">bc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>and transform the goal into <code>a * b * c * d &lt; p * q * d * s</code> and <code>0 &lt; e</code>.</p>\n<p>Then apply again on <code>d</code> to turn the goal into <code>a * b * c &lt; p * q * s</code> and <code>0 &lt; d</code></p>\n<p>Is there a tactic to free me from always reorder the terms manually?</p>\n<p>Thanks.</p>",
        "id": 429172106,
        "sender_full_name": "Casavaca",
        "timestamp": 1711269243
    },
    {
        "content": "<p>Try <code>gcongr _ * _ * _ * ?_ * ?_</code></p>",
        "id": 429172217,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711269326
    },
    {
        "content": "<p>What is <code>R</code>? Can you write a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> if Yael's suggestion doesn't answer your question?</p>",
        "id": 429172269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711269364
    },
    {
        "content": "<p>There's also <code>convert_to</code> to create equalities that you could prove with <code>ring</code>. The <code>using</code> clause tells <code>convert_to</code> the depth at which it should stop trying to pull things apart.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert_to</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">·</span> <span class=\"n\">ring</span>\n  <span class=\"bp\">·</span> <span class=\"n\">ring</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_lt_mul_of_pos_left</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  case bc</span>\n<span class=\"cm\">  a b c d e p q s : ℝ</span>\n<span class=\"cm\">  ⊢ a * b * c * d &lt; p * q * d * s</span>\n\n<span class=\"cm\">  case a0</span>\n<span class=\"cm\">  a b c d e p q s : ℝ</span>\n<span class=\"cm\">  ⊢ 0 &lt; e</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 429172437,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711269490
    },
    {
        "content": "<p><code>move_mul [e]</code> should also move <code>e</code> to the far right (and using <code>←e</code> moves it to the far left).</p>",
        "id": 429177689,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711272883
    },
    {
        "content": "<p>E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">move_mul</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>   <span class=\"c1\">-- ⊢ a * b * c * d * e &lt; p * q * d * s * e</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_lt_mul_of_pos_right</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  case bc</span>\n<span class=\"cm\">  a b c d e p q s : ℝ</span>\n<span class=\"cm\">  ⊢ a * b * c * d &lt; p * q * d * s</span>\n\n<span class=\"cm\">  case a0</span>\n<span class=\"cm\">  a b c d e p q s : ℝ</span>\n<span class=\"cm\">  ⊢ 0 &lt; e</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 429178351,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711273530
    },
    {
        "content": "<p>Thank you all. I meant \"ℝ\" when I typed R. <code>move_mul</code> is very useful because I don't have to manually locate the term by \"gcongr _ * _ * _ * ?_ * ?_\" or manually rewrite all the terms by \"convert_to e * (a * b * c * d) &lt; e * (p * q * d * s)\".</p>",
        "id": 429229626,
        "sender_full_name": "Casavaca",
        "timestamp": 1711301344
    },
    {
        "content": "<p>I got another question:</p>\n<p>How do I do this? Basically I want to make Lean merge the constants.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- h : 2 * a * (2 * b) * (2 * c) = d</span>\n  <span class=\"n\">magic_norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- h : (8 : ℝ) * (a * b * c) = d</span>\n</code></pre></div>",
        "id": 430925039,
        "sender_full_name": "Casavaca",
        "timestamp": 1712124247
    },
    {
        "content": "<p>Oh, I did not implement <code>move_mul at</code>?  I think that I did in lean3.</p>\n<p>Otherwise, maybe <code>move_mul [a, b, c] at h; rw [show (2 : ℝ) * 2 * 2 = 8 by norm_num] at h</code> would work?</p>\n<p>(Even if it did, I agree that it is not ideal.)</p>",
        "id": 430926210,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712124885
    },
    {
        "content": "<p>There was a recent thread about a tactic for \"collecting terms\", but I'm on mobile now.</p>",
        "id": 430926308,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712124943
    },
    {
        "content": "<p>You're right. \"collecting terms\" wanted to achieve similar goal.<br>\nYou did implement move_mul. In this case, it can be weird because if goal is \"2 * a * 2 * a * 2 * a\", you can't apply move_mul, it would say that 2 is already left_most, and a is already right most</p>",
        "id": 430926533,
        "sender_full_name": "Casavaca",
        "timestamp": 1712125065
    },
    {
        "content": "<p>Repetitions should be allowed and respected: <code>move_mul [a, a, a]</code> should do what you want.</p>",
        "id": 430926695,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712125142
    },
    {
        "content": "<p>(And it is a bug if it does not work: there is some care taken in \"uniquifing\" the input, to preserve multiplicities.)</p>",
        "id": 430926808,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712125202
    },
    {
        "content": "<p>I.e. <code>move_mul [a, a]</code> should not be the same as <code>move_mul [a]; move_mul [a]</code>.</p>",
        "id": 430927031,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712125334
    },
    {
        "content": "<p>Thanks. <code>move_mul [2, 2]</code> worked, but we don't have <code>move_mul ... at ...</code> yet. It would be nice if we can have something like move_combine_constant.</p>",
        "id": 430927584,
        "sender_full_name": "Casavaca",
        "timestamp": 1712125730
    },
    {
        "content": "<p>Ok, I had <code>at</code> in Lean 3, but did not port it.  The \"combine constants\" part I think that has never part of any tactic, though maybe it is part of the specs for <code>ring</code>.  However, also <code>ring</code> does not support the <code>at ...</code> syntax.</p>",
        "id": 430928069,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712126027
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span>\n  <span class=\"c1\">-- ⊢ a * b * c * 8 = d</span>\n</code></pre></div>",
        "id": 430928160,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712126061
    }
]