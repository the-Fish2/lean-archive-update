[
    {
        "content": "<p>I have a linear map f  from V to W and some vector v in V, are there defintions/results for the sequence (v, f(v), f(f(v)), ...)<br>\nand the space it spans? Specifically if V is finite dimensional, we can find a basis of the span by truncating the sequence after a certain number of terms.</p>",
        "id": 418620539,
        "sender_full_name": "Lucas Whitfield",
        "timestamp": 1706529310
    },
    {
        "content": "<p>are you taking the span in the vector space of sequences of elements of W or in W itself? </p>\n<p>This can all be formulated in lean, of course, but it's a very special situation so I doubt there is much in mathlib about specifically this case.</p>",
        "id": 418624137,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706530647
    },
    {
        "content": "<p>If you want help formulating these sorts of assertions in lean, then <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> is the right stream to use.</p>",
        "id": 418625138,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706531000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Span.20of.20repeated.20linear.20map.20application/near/418624137\">said</a>:</p>\n<blockquote>\n<p>are you taking the span in the vector space of sequences of elements of W or in W itself? </p>\n<p>This can all be formulated in lean, of course, but it's a very special situation so I doubt there is much in mathlib about specifically this case.</p>\n</blockquote>\n<p>in W itself. I figure this isn't too hard to do, but I was just wondering if there was a more general formulation of this sort of statement to avoid unnecessary work.</p>",
        "id": 418634496,
        "sender_full_name": "Lucas Whitfield",
        "timestamp": 1706534184
    },
    {
        "content": "<p>If <code>V</code> is finite dimensional and <code>f</code> is a linear map from <code>V</code>, then we certainly will have in the library the fact that the image of <code>f</code> is finite dimensional. Now your question doesn't typecheck because <code>v : V</code> while <code>f v : W</code>. So you should start by formulating a more precise question, preferably providing a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 418635044,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706534391
    },
    {
        "content": "<p>Oops, f should be an endomorphism. This is my first question on here, sorry about the lack of proper formulation.</p>",
        "id": 418635659,
        "sender_full_name": "Lucas Whitfield",
        "timestamp": 1706534609
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Module.Finite</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Module.Finite</span> <span class=\"n\">F</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">F</span> <span class=\"o\">{</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"o\">})</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 418637251,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706535124
    },
    {
        "content": "<p>That's the statement that the span you're considering is finite dimensional.</p>",
        "id": 418639494,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706535882
    },
    {
        "content": "<p>From this it should be quite easy to get the assertion that some truncation spans this subspace.</p>",
        "id": 418639830,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706535980
    },
    {
        "content": "<p>And here is one way (possibly non-optimal) to formulate your original assertion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Module.Finite</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">F</span> <span class=\"o\">{</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"o\">}),</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">B.repr.symm</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.single</span> <span class=\"n\">i</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">Submodule.subset_span</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 418641712,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706536608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"685134\">Lucas Whitfield</span> has marked this topic as resolved.</p>",
        "id": 418700097,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706554548
    }
]