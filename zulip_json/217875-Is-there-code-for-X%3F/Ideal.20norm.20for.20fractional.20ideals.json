[
    {
        "content": "<p>I don't think we have anything about the (absolute) norm of fractional ideals in Mathlib but maybe someone has done some work on this on the side. I am mostly interested in the analog of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.natAbs_det_basis_change#doc\">docs#Ideal.natAbs_det_basis_change</a> for fractional ideals.</p>",
        "id": 410851492,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1704204824
    },
    {
        "content": "<p>In FLT-regular we had to generalize ideal norms to non-free <code>B/A</code>, but we had nothing regarding fractional ideals.</p>",
        "id": 410860795,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1704208553
    },
    {
        "content": "<p>I have started to work on this and made some progress. So far, I have been able to prove that the norm is multiplicative and generalizes the norm of ideals. Still, I want to make sure that people are okay with two choices I made before going on. First, for the definition of the norm, I used the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.FractionalIdeal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.Norm</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">FractionalIdeal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Pointwise</span> <span class=\"n\">nonZeroDivisors</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Submonoid</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">FractionalIdeal</span> <span class=\"n\">S</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">den</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">I.2.choose</span><span class=\"o\">,</span> <span class=\"n\">I.2.choose_spec.1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">I.den</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">Algebra.linearMap</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Infinite</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module.Free</span> <span class=\"n\">ℤ</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module.Finite</span> <span class=\"n\">ℤ</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">FractionalIdeal</span> <span class=\"n\">R⁰</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">absNorm</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Ideal.absNorm</span> <span class=\"n\">I.num</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">|</span><span class=\"n\">Algebra.norm</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">I.den</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">|</span>\n</code></pre></div>\n<p>That is, if <code>I</code> is a fractional ideal, there exists <code>d</code> such that <code>d  • I</code> is an ideal and the norm is defined by <code>Norm I = Norm ( d • I) / |Norm d|</code>.  I also proved that the norm of <code>I</code> does not depend on the choice of <code>d</code>.</p>\n<p>The second choice I made, as can be seen in the above code, is that I decided to restrict to the case of <code>IsFractionRing</code>. The construction could hold in a more general setting but then a lot of hypothesis have to be carried around to prove anything nontrivial  like  multiplicativity and I am not sure the results would be useful anyway in a larger setting.</p>",
        "id": 411050702,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1704302598
    },
    {
        "content": "<p>I can't see <code>FractionRing</code> anywhere in the above code, only <code>IsFractionRing</code>. What am I doing wrong?</p>",
        "id": 411051241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704302861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Ideal.20norm.20for.20fractional.20ideals/near/411051241\">said</a>:</p>\n<blockquote>\n<p>I can't see <code>FractionRing</code> anywhere in the above code, only <code>IsFractionRing</code>. What am I doing wrong?</p>\n</blockquote>\n<p>You're right, I meant <code>IsFractionRing</code>. I corrected my message. Thanks!</p>",
        "id": 411051675,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1704303064
    },
    {
        "content": "<p>oh that's great! I thought you were saying \"I want to restrict to <code>FractionRing</code> and that would have been a lousy idea in my opinion -- but restricting to <code>IsFractionRing</code> sounds fine -- do you know any applications of this beyond the global field theory? Oh -- wait -- are you restricting to number fields? I'm not sure the function field people will like that...</p>",
        "id": 411052951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704303602
    },
    {
        "content": "<p>It looks very reasonable to me. Why <code>Infinite R</code>? <code>CharZero R</code> seems more natural.</p>",
        "id": 411053489,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1704303840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Ideal.20norm.20for.20fractional.20ideals/near/411053489\">said</a>:</p>\n<blockquote>\n<p>It looks very reasonable to me. Why <code>Infinite R</code>? <code>CharZero R</code> seems more natural.</p>\n</blockquote>\n<p>I just copied the hypothesis of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.absNorm#doc\">docs#Ideal.absNorm</a>.</p>",
        "id": 411053901,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1704304019
    },
    {
        "content": "<p>Kevin, I think that function fields are included inasmuch as they are included in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=deal.absNorm#doc\">docs#deal.absNorm</a></p>",
        "id": 411054092,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1704304094
    },
    {
        "content": "<p>I forget why we had infinite there <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 411054741,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704304397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Ideal.20norm.20for.20fractional.20ideals/near/411054741\">said</a>:</p>\n<blockquote>\n<p>I forget why we had infinite there <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>Wait, I thought that <code>Infinite</code> was there for the function field case actually. Am I missing something?</p>",
        "id": 411055286,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1704304622
    },
    {
        "content": "<p>It was <code>[Module.Free ℤ R]</code> that got me worried about the function field case.</p>",
        "id": 411056055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704304913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Ideal.20norm.20for.20fractional.20ideals/near/411056055\">said</a>:</p>\n<blockquote>\n<p>It was <code>[Module.Free ℤ R]</code> that got me worried about the function field case.</p>\n</blockquote>\n<p>Oh, I see <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 411056195,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1704304953
    },
    {
        "content": "<p>Yeah I also confused myself! I think originally, we tried to give more general definitions then added some assumptions as we weren't sure what the right definitions should be in complete generality, so ended up in this position.</p>",
        "id": 411056397,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704305013
    },
    {
        "content": "<p><code>Module.Free</code> is the reason why I thought about <code>CharZero</code> :D</p>",
        "id": 411057104,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1704305220
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9613\">#9613</a></p>",
        "id": 412141284,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1704893929
    },
    {
        "content": "<p>The definition of the norm looks as it is a particular case of extending a morphism of monoids by localization.</p>",
        "id": 412283103,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1704957666
    },
    {
        "content": "<p>This is probably true, but <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FractionalIdeal#doc\">docs#FractionalIdeal</a> is not defined via localization (it uses #docsIsFractional), so this would require a refactor.</p>",
        "id": 412290217,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1704961387
    },
    {
        "content": "<p>It should be relatively easy to define a suitable map <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submonoid.LocalizationWithZeroMap#doc\">docs#Submonoid.LocalizationWithZeroMap</a> to fractional ideals and then using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submonoid.LocalizationWithZeroMap.lift#doc\">docs#Submonoid.LocalizationWithZeroMap.lift</a>, it should give the construction. I'll give it a try and see what happens.</p>",
        "id": 412294107,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1704962991
    },
    {
        "content": "<p>Well, it seems there is a lot of API missing to prove what is needed. So I guess I'll agree with Riccardo that a refactor of <code>FractionalIdeal</code> is needed first.</p>",
        "id": 412372074,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1704988410
    },
    {
        "content": "<p>I think we can already put a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsLocalization#doc\">docs#IsLocalization</a> instance on fraction ideals (they form a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FractionalIdeal.semifield#doc\">docs#FractionalIdeal.semifield</a> over the semiring of ideals; we don't seem to have the Algebra instance yet, only <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FractionalIdeal.coeIdealHom#doc\">docs#FractionalIdeal.coeIdealHom</a>). If we generalize <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsFractionRing#doc\">docs#IsFractionRing</a> to semirings then we can put a IsFractionRing instance.</p>",
        "id": 412399296,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704997938
    }
]