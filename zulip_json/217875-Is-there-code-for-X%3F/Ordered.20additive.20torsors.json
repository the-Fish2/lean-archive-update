[
    {
        "content": "<p>Let <code>V</code> be an <code>R</code>-module, for some commutative ring <code>R</code>.  I'd like to consider some power series spaces of the form <code>(z ^  α)V((z))</code>, for some <code>α</code> in a group containing the integers, such as the complex numbers.  That is, exponents lie in some coset, and I'd like to impose an order on the coset compatible with translation by integers, so that elements are defined by the condition that support is bounded below.  This would allow me to use existing Hahn series API to express the <code>R((z))</code>-module structure.  Do we have typeclass language for expressing this combination of order and AddTorsor structure?</p>",
        "id": 430407711,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1711820839
    },
    {
        "content": "<p>It seems like <code>CovariantClass</code> works pretty well.</p>",
        "id": 430528648,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1711938670
    },
    {
        "content": "<p>You might possibly need <code>ContravariantClass</code> as well</p>",
        "id": 430554701,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711956084
    },
    {
        "content": "<p>Thank you.  It looks like I also need an <code>AddAction</code> version of <code>Finest.addAntidiagonal</code>, and a <code>WithTop</code> version of <code>HahnSeries.order</code>.</p>",
        "id": 430666334,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1712006772
    }
]