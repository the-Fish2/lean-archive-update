[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 441221001,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716982332
    },
    {
        "content": "<p>Didn't you write a tactic to do this once? ;-)</p>",
        "id": 441228108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716985168
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"w\">  </span><span class=\"n\">left_inv</span><span class=\"w\"> </span><span class=\"n\">sg</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">map_map</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">right_inv</span><span class=\"w\"> </span><span class=\"n\">sh</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">map_map</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">map_rel_iff'</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">sg1</span><span class=\"w\"> </span><span class=\"n\">sg2</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"bp\">⟨</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simpa</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">map_map</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">using</span>\n<span class=\"w\">      </span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">map_mono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"bp\">→*</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">map_mono</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 441230172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716985917
    },
    {
        "content": "<p>I can't find it for any subobjects</p>",
        "id": 441230263,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716985932
    },
    {
        "content": "<p>Thanks Eric!</p>",
        "id": 441283372,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717002995
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submodule.orderIsoMapComap#doc\">docs#Submodule.orderIsoMapComap</a><br>\nand more examples, though most are not about the same type of subobjects:<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Submodule, OrderIso</p>",
        "id": 441284405,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717003427
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/Submodule/Lattice.html#AddSubgroup.toIntSubmodule\">AddSubgroup.toIntSubmodule</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/Submodule/Lattice.html#AddSubmonoid.toNatSubmodule\">AddSubmonoid.toNatSubmodule</a>, and <a href=\"https://loogle.lean-lang.org/?q=Submodule%2C%20OrderIso\">32 more</a></p>",
        "id": 441284408,
        "sender_full_name": "loogle",
        "timestamp": 1717003428
    },
    {
        "content": "<p>I would have been tempted to use Subgroup.comap because it's better definitionally...</p>",
        "id": 441287784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717004939
    },
    {
        "content": "<p>Yes, I'd already made that change locally. Note however that the function Junyan found above uses map for the forward direction and comap for the backward direction, thereby avoiding mentioning <code>f.symm</code> directly. Not sure what will turn out best.</p>",
        "id": 441307571,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717013212
    },
    {
        "content": "<p>I would have used comap in both directions :-)</p>",
        "id": 441318196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717017030
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">comap</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"w\">  </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">comap</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"n\">left_inv</span><span class=\"w\"> </span><span class=\"n\">sg</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">comap_comap</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">right_inv</span><span class=\"w\"> </span><span class=\"n\">sh</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">comap_comap</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">map_rel_iff'</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">sg1</span><span class=\"w\"> </span><span class=\"n\">sg2</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">simpa</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">comap_le_comap_of_surjective</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">surjective</span>\n</code></pre></div>",
        "id": 441318969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717017317
    },
    {
        "content": "<p>I don't know why <code>simp [Subgroup.comap_le_comap_of_surjective f.symm.surjective]</code> gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>application type mismatch\n  Subgroup.comap_le_comap_of_surjective (MulEquiv.surjective f.symm)\nargument\n  MulEquiv.surjective f.symm\nhas type\n  Function.Surjective ⇑f.symm : Prop\nbut is expected to have type\n  Function.Surjective ⇑?m.6925 : Prop\n</code></pre></div>",
        "id": 441319180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717017381
    },
    {
        "content": "<p>You need <code>simp [Subgroup.comap_le_comap_of_surjective (f := f.symm.toMonoidHom) f.symm.surjective]</code> because lean cannot figure out the <code>toMonoidHom</code> part on its own without the type signature of the goal as a hint.</p>",
        "id": 441319743,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1717017587
    }
]