[
    {
        "content": "<p>I'm looking for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">differentiable_ofReal</span> <span class=\"o\">:</span> <span class=\"n\">Differentiable</span> <span class=\"n\">ℝ</span> <span class=\"n\">ofReal'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which I'm expecting to exist in Mathlib, but<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"ifferentiable\", \"ofReal\"</p>",
        "id": 418072750,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706187109
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 418072756,
        "sender_full_name": "loogle",
        "timestamp": 1706187111
    },
    {
        "content": "<p>Can this really be missing, or am I looking for it in the wrong way?</p>",
        "id": 418073008,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706187185
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span></p>",
        "id": 418075817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706188130
    },
    {
        "content": "<p>Here is a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">differentiable_ofReal</span> <span class=\"o\">:</span> <span class=\"n\">Differentiable</span> <span class=\"n\">ℝ</span> <span class=\"n\">ofReal'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">ofReal'</span> <span class=\"mi\">1</span> <span class=\"n\">x</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_iff_tendsto.mpr</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Real.norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">real_smul</span><span class=\"o\">,</span> <span class=\"n\">ofReal_sub</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">norm_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">tendsto_const_nhds_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">H.hasFDerivAt</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>(without investing too much thought).</p>",
        "id": 418076119,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706188233
    },
    {
        "content": "<p>Can you derive it from <code>isometry_ofReal</code>?</p>",
        "id": 418076217,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706188266
    },
    {
        "content": "<p>There are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasDerivAt.comp_ofReal#doc\">docs#HasDerivAt.comp_ofReal</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasDerivAt.ofReal_comp#doc\">docs#HasDerivAt.ofReal_comp</a>, which one could use, but it is a bit strange that the derivative of the function itself does not seem to be available.</p>",
        "id": 418076351,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706188322
    },
    {
        "content": "<p>A one-liner:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">differentiable_ofReal</span> <span class=\"o\">:</span> <span class=\"n\">Differentiable</span> <span class=\"n\">ℝ</span> <span class=\"n\">ofReal'</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">HasDerivAt.ofReal_comp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hasDerivAt_id</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hasFDerivAt</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 418076854,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706188508
    },
    {
        "content": "<p>Maybe this is better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">hasDerivAt_ofReal</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">ofReal'</span> <span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">HasDerivAt.ofReal_comp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hasDerivAt_id</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">differentiableAt_ofReal</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DifferentiableAt</span> <span class=\"n\">ℝ</span> <span class=\"n\">ofReal'</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">hasDerivAt_ofReal</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">differentiableAt</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">differentiable_ofReal</span> <span class=\"o\">:</span> <span class=\"n\">Differentiable</span> <span class=\"n\">ℝ</span> <span class=\"n\">ofReal'</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hasDerivAt_ofReal</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hasFDerivAt</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 418077458,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706188701
    },
    {
        "content": "<p>If all you need is <code>Differentiable</code>, then the shortest proof is <code>Complex.ofRealClm.differentiable</code>.</p>",
        "id": 418095234,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706194061
    },
    {
        "content": "<p>But we should add a bunch of lemmas about <code>Complex.ofReal'</code> to the library.</p>",
        "id": 418095501,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706194126
    },
    {
        "content": "<p>Do you volunteer to do that?</p>",
        "id": 418095542,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706194138
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.ofRealClm#doc\">docs#Complex.ofRealClm</a><br>\nNow I know what \"Clm\" stands for <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 418095599,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706194153
    },
    {
        "content": "<p>BTW, it should be renamed to <code>ofRealCLM</code></p>",
        "id": 418095669,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706194175
    },
    {
        "content": "<p>(in this and several other definitions)</p>",
        "id": 418095735,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706194193
    },
    {
        "content": "<p>Same for <code>Cle</code> -&gt; <code>CLE</code></p>",
        "id": 418095791,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706194204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Differentiability.20of.20the.20natural.20map.20.E2.84.9D.20.E2.86.92.20.E2.84.82/near/418095542\">said</a>:</p>\n<blockquote>\n<p>Do you volunteer to do that?</p>\n</blockquote>\n<p>I can do that eventually.</p>\n<p>I have a fairly long list of API lemmas that should go to various parts of Mathlib and that I'm planning to PR at some point; I can include the lemmas I've stated above (and perhaps more if somebody tells me what else might be needed) in that list.</p>",
        "id": 418096039,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706194282
    },
    {
        "content": "<p>We should also have lemmas about <code>ContDiffAt</code> etc (if we don't have them yet).</p>",
        "id": 418096474,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706194400
    },
    {
        "content": "<p>Possibly, about iterated derivatives.</p>",
        "id": 418096517,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706194413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Differentiability.20of.20the.20natural.20map.20.E2.84.9D.20.E2.86.92.20.E2.84.82/near/418095669\">said</a>:</p>\n<blockquote>\n<p>BTW, it should be renamed to <code>ofRealCLM</code></p>\n</blockquote>\n<p>Or <code>ofRealL</code>?</p>",
        "id": 418105576,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706196810
    },
    {
        "content": "<p>I prefer <code>CLM</code> personally. The <code>L</code> is too closely tied to notation.</p>",
        "id": 418108940,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706197685
    },
    {
        "content": "<p>And what would you call a non-continuous version (nevermind that we don't need one in this case)?</p>",
        "id": 418109084,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706197731
    },
    {
        "content": "<p>We have some names with the small <code>l</code> I believe?</p>",
        "id": 418111412,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706198411
    },
    {
        "content": "<p>My point is it doesn't adhere to the naming convention, e.g. <code>Complex.OfReall</code>. Or did you mean subscript <code>\\_l</code>?</p>",
        "id": 418115995,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706199704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Differentiability.20of.20the.20natural.20map.20.E2.84.9D.20.E2.86.92.20.E2.84.82/near/418096039\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Differentiability.20of.20the.20natural.20map.20.E2.84.9D.20.E2.86.92.20.E2.84.82/near/418095542\">said</a>:</p>\n<blockquote>\n<p>Do you volunteer to do that?</p>\n</blockquote>\n<p>I can do that eventually.</p>\n<p>I have a fairly long list of API lemmas that should go to various parts of Mathlib and that I'm planning to PR at some point; I can include the lemmas I've stated above (and perhaps more if somebody tells me what else might be needed) in that list.</p>\n</blockquote>\n<p>By the way, I recommend starting on making such PRs sooner rather than later, both to prevent the task from seeming insurmountable and so other people can use your work already</p>",
        "id": 418123347,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706201854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Differentiability.20of.20the.20natural.20map.20.E2.84.9D.20.E2.86.92.20.E2.84.82/near/418115995\">said</a>:</p>\n<blockquote>\n<p>My point is it doesn't adhere to the naming convention, e.g. <code>Complex.OfReall</code>. Or did you mean subscript <code>\\_l</code>?</p>\n</blockquote>\n<p>Yes I meant subscript.</p>",
        "id": 418125694,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706202530
    },
    {
        "content": "<p>Yeah, that's possible, I suppose, but it still feels like we're letting notation infect naming.</p>",
        "id": 418132693,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706204607
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10018\">#10018</a> fixes <code>Clm</code>/<code>Cle</code></p>",
        "id": 418188795,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706230059
    }
]