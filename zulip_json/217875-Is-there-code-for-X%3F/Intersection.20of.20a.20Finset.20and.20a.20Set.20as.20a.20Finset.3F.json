[
    {
        "content": "<p>Is there a simple way to obtain the intersection of <code>s : Finset α</code> and <code>t : Set α</code> as a <code>Finset α</code>? Loogling for <code>Finset, Set, \"inter\"</code> does not produce anything close.</p>",
        "id": 409632051,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703273012
    },
    {
        "content": "<p><code>s.filter (· ∈ t)</code></p>",
        "id": 409632234,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703273138
    },
    {
        "content": "<p>... not so easily discoverable if you think of intersections ...</p>",
        "id": 409632452,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703273275
    },
    {
        "content": "<p>Feel free to add this use case to the docstring of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.filter#doc\">docs#Finset.filter</a> !</p>",
        "id": 409632763,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703273423
    },
    {
        "content": "<p>I think might also be able to do <code>Set.toFinset (s \\cap t)</code></p>",
        "id": 409632897,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703273510
    },
    {
        "content": "<p>I'll try to remember that. BTW, <code>s.filter t</code> also works (given <code>[DecidablePred t]</code>), but I guess this is defeq abuse...</p>",
        "id": 409632964,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703273530
    },
    {
        "content": "<p>(Yeah, that's defeq abuse)</p>",
        "id": 409632992,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703273548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Intersection.20of.20a.20Finset.20and.20a.20Set.20as.20a.20Finset.3F/near/409632897\">said</a>:</p>\n<blockquote>\n<p>I think might also be able to do <code>Set.toFinset (s \\cap t)</code></p>\n</blockquote>\n<p><code>failed to synthesize instance  Fintype ↑(↑s ∩ t)</code></p>",
        "id": 409633022,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703273564
    },
    {
        "content": "<p>The correct phrasing of <code>DecidablePred t</code> is <code>DecidablePred (· ∈ t)</code> by the way</p>",
        "id": 409633149,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703273632
    },
    {
        "content": "<p>I know, but to get <code>s.filter t</code> to work, <code>DecidablePred (· ∈ t)</code>does not cut it.</p>",
        "id": 409633232,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703273666
    },
    {
        "content": "<p>Yes, because that's defeq abuse, as you pointed out.</p>",
        "id": 409633272,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703273700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Intersection.20of.20a.20Finset.20and.20a.20Set.20as.20a.20Finset.3F/near/409633022\">said</a>:</p>\n<blockquote>\n<p><code>failed to synthesize instance  Fintype ↑(↑s ∩ t)</code></p>\n</blockquote>\n<p><code>Set.toFinset</code> doesn't let you avoid decidability unfortunately. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Finite</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">)]</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Set.toFinset</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 409633620,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703273902
    },
    {
        "content": "<p>I'll go with the <code>filter</code> version for now and see how I get along with that.</p>",
        "id": 409633694,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703273961
    },
    {
        "content": "<p>One way you can find out what you're missing is to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Finite</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Set.toFinset</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and poke around the term until you find a Classical instance.</p>",
        "id": 409633699,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703273965
    },
    {
        "content": "<p><code>[DecidablePred (· ∈ t)]</code> is needed for the <code>s.filter</code> version as well, so it is perhaps easy to guess in this case.</p>",
        "id": 409633849,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703274051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Intersection.20of.20a.20Finset.20and.20a.20Set.20as.20a.20Finset.3F/near/409632763\">said</a>:</p>\n<blockquote>\n<p>Feel free to add this use case to the docstring of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.filter#doc\">docs#Finset.filter</a> !</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9239\">#9239</a></p>",
        "id": 409716202,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703336809
    }
]