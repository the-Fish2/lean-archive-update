[
    {
        "content": "<p>I need to prove <code>|1/4 + x * (-1/2)| * 2 = |1 - x*2| * 1/2</code>. Is there a quicker way to do that then proving <code>2 = |2|</code> and <code>1/2 = |1/2|</code> and then using <code>abs_mul</code>?</p>",
        "id": 423454950,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1708970700
    },
    {
        "content": "<p>Could you please put that in the form of an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 423455231,
        "sender_full_name": "Richard Copley",
        "timestamp": 1708970805
    },
    {
        "content": "<p>Sure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 423455598,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1708970934
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)),</span> <span class=\"bp\">←</span> <span class=\"n\">abs_mul</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">ring_nf</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">mul_self_nonneg</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 423457687,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708971668
    },
    {
        "content": "<p>Not sure if it is much quicker than what you had in mind, though.</p>",
        "id": 423457753,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708971697
    },
    {
        "content": "<p>Thanks! Does it automatically know to show that <code>2*2</code> is nonnegative? How does it do that?</p>",
        "id": 423458200,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1708971874
    },
    {
        "content": "<p>No, it doesn't: that's the last line of the proof.</p>",
        "id": 423458541,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708971988
    },
    {
        "content": "<p>Oh, I see, it created a new goal. I didn't know that <code>rw</code> could do that, interesting. Thanks!</p>",
        "id": 423458631,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1708972022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690858\">Command Master</span> has marked this topic as resolved.</p>",
        "id": 423458654,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708972026
    },
    {
        "content": "<p>Or this (again, not much less fiddly than what you suggested).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">abs_div</span><span class=\"o\">,</span> <span class=\"n\">abs_mul</span><span class=\"o\">,</span> <span class=\"n\">abs_div</span><span class=\"o\">,</span> <span class=\"n\">abs_one</span><span class=\"o\">,</span> <span class=\"n\">abs_two</span><span class=\"o\">,</span> <span class=\"n\">eq_div_iff</span> <span class=\"n\">two_ne_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">ring_nf</span>\n</code></pre></div>",
        "id": 423460656,
        "sender_full_name": "Richard Copley",
        "timestamp": 1708972734
    },
    {
        "content": "<p>Is there a way to show that the elements of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span>  <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>with n&lt;10 forms a finite set</p>",
        "id": 423811046,
        "sender_full_name": "Timothy Harevy",
        "timestamp": 1709124740
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Finite</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">''</span> <span class=\"n\">Set.Iic</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span> <span class=\"n\">exact</span> <span class=\"n\">Set.toFinite</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">''</span> <span class=\"n\">Set.Iic</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">''</span> <span class=\"n\">Set.Iic</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span> <span class=\"n\">exact</span> <span class=\"n\">Set.finite_Iic</span> <span class=\"mi\">10</span>\n</code></pre></div>",
        "id": 423815755,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1709126403
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 423843489,
        "sender_full_name": "Timothy Harevy",
        "timestamp": 1709134241
    }
]