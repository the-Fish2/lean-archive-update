[
    {
        "content": "<p>I'm looking for a <code>HasDerivAt</code> version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=hasFDerivAt_tsum_of_isPreconnected#doc\">docs#hasFDerivAt_tsum_of_isPreconnected</a>, but cannot find anything.<br>\nI have tried to switch over to <code>FDeriv</code>s using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=hasDerivAt_iff_hasFDerivAt#doc\">docs#hasDerivAt_iff_hasFDerivAt</a>, but then I run into the problem that I need to prove that <code>ContinuousLinearMap.smulRight 1 (∑' (n : α), f' n x) =\n  ∑' (n : α), ContinuousLinearMap.smulRight 1 (f' n x)</code>, at which point I'm getting stuck...</p>",
        "id": 410063277,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703621763
    },
    {
        "content": "<p>What <code>Summable</code> assumptions do you have?</p>",
        "id": 410070658,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703627622
    },
    {
        "content": "<p>I want to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hasDerivAt_sum_primes_log</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.re</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Primes</span><span class=\"o\">,</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"bp\">∑'</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Primes</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Basically, I have summability of <code>f n * n^(-s)</code> for <code>1 &lt; s.re</code>, from which I can derive summability of <code>log (1 - f n * p^(-s))⁻¹</code> using results from <a href=\"https://github.com/leanprover-community/mathlib4/pull/9270\">#9270</a>.</p>",
        "id": 410071039,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703627886
    },
    {
        "content": "<p>If you have enough <code>Summable</code> assumptions, then you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.map_tsum#doc\">docs#ContinuousLinearMap.map_tsum</a> with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.smulRightL#doc\">docs#ContinuousLinearMap.smulRightL</a></p>",
        "id": 410071274,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703628050
    },
    {
        "content": "<p>Another approach is to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum_apply#doc\">docs#tsum_apply</a> and a combination of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasDerivAt.hasFDerivAt#doc\">docs#HasDerivAt.hasFDerivAt</a> with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasFDerivAt.hasDerivAt#doc\">docs#HasFDerivAt.hasDerivAt</a></p>",
        "id": 410071392,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703628106
    },
    {
        "content": "<p>I can try that (tomorrow or so; it is getting late here). But why is there no <code>HasDerivAt</code> version?</p>",
        "id": 410071412,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703628115
    },
    {
        "content": "<p>Because nobody PRd it.</p>",
        "id": 410071492,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703628133
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum_apply#doc\">docs#tsum_apply</a> didn't work inside the <code>tsum</code>, probably since the thing summed over is not a function, but some kind of homomorphism.</p>",
        "id": 410071534,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703628157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>  wrote this file.</p>",
        "id": 410071592,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703628187
    },
    {
        "content": "<p>Generally speaking, I find it rather difficult to prove statements about concrete functions, series etc.</p>",
        "id": 410071632,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703628212
    },
    {
        "content": "<p>Yes, once you start specializing general theorems to specific functions, you find a lot of gaps in the library.</p>",
        "id": 410071862,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703628398
    },
    {
        "content": "<p>...and it is a bit tough to have to fill them when you are just a non-specialist \"customer\" and don't know that part of the library well.</p>",
        "id": 410071990,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703628510
    },
    {
        "content": "<p>BTW, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.map_tsum#doc\">docs#ContinuousLinearMap.map_tsum</a> does not seem to fit the situation; I'd need something like <code>ContinuousLinearMap.smulRight_tsum</code>.</p>",
        "id": 410072167,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703628715
    },
    {
        "content": "<p>You can apply it to <code>smulRightL 1</code></p>",
        "id": 410072230,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703628746
    },
    {
        "content": "<p>I'll open a PR either soon or tomorrow specializing to <code>deriv</code></p>",
        "id": 410078275,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1703634203
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9295\">#9295</a><br>\nI didn't touch the \"higher derivatives\" section because I'm too tired for it, but if someone wants to do it feel free to do so.</p>",
        "id": 410081480,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1703636417
    },
    {
        "content": "<p>It is a really nice experience that you whine in the evening that something is missing in Mathlib, and when you get up the next day, it's there! Thanks <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span>  !</p>",
        "id": 410132764,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703672754
    }
]