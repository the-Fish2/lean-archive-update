[
    {
        "content": "<p>Do we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> (the rational equivalent of <code>GaussianInt</code>)?</p>",
        "id": 412581762,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705077901
    },
    {
        "content": "<p>Oops, seems I don't know the syntax for inline latex (fixed).</p>",
        "id": 412581880,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705077941
    },
    {
        "content": "<p>Double dollars</p>",
        "id": 412581900,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705077953
    },
    {
        "content": "<p>Not in mathlib, afaik. But the VU (A'dam) project had  <code>quad_ring</code> for quadratic number fields.</p>",
        "id": 412582169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1705078057
    },
    {
        "content": "<p>I'll just spell it out as tuples for now; I need only a tiny bit of it.</p>",
        "id": 412582262,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705078084
    },
    {
        "content": "<p><code>CliffordAlgebra (-.sq : QuadraticForm ℚ ℚ)</code>, but it's computationally awful <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 412582916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705078356
    },
    {
        "content": "<p>I think <code>ℚ × ℚ</code> is easier for the moment.  Mostly I want to take linear combinations. :)</p>",
        "id": 412583223,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705078450
    },
    {
        "content": "<p>Also discussed here:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/419231-Lean-Together-2024/topic/Form.2E.20of.20class.20num.2E.20comp.2E.20.26.20Mordell.20eqns.20-.20NIrvana.20Coppola/near/411963891\">said</a>:</p>\n<blockquote>\n<p>A question for the community: is it time to merge some subset of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZSqrtd#doc\">docs#ZSqrtd</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex#doc\">docs#Complex</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GaussianInt#doc\">docs#GaussianInt</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Unitization#doc\">docs#Unitization</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TrivSqZeroExt#doc\">docs#TrivSqZeroExt</a> into a single structure that would work here too for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><msqrt><mi>d</mi></msqrt><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}[\\sqrt{d}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1822em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">[</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9322em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">d</span></span></span><span style=\"top:-2.8922em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1078em;\"><span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>?</p>\n</blockquote>",
        "id": 412583478,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705078534
    },
    {
        "content": "<p>I think that independently of the spell we choose we want a characteristic predicate rather than an explicit definition.</p>",
        "id": 412585493,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705079157
    },
    {
        "content": "<p>Well that will raise an interesting question because these objects have a nontrivial automorphism so are not the solution to a (certain kind of) universal problem. You can be isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span></span></span></span> in two ways, and for <del>all</del> most of the other characteristic predicates we have (e.g. localisations in algebra, and limits/colimits in category theory) they are characterising something rigid (i.e. no nontrivial automorphisms).</p>",
        "id": 412590736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705081106
    },
    {
        "content": "<p>You can do the ugly thing and choose an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> but this is like choosing a basis -- this is breaking symmetry and proving certain theorems will be harder.</p>",
        "id": 412590863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705081173
    },
    {
        "content": "<p>The type class could pick out <code>i</code>.</p>",
        "id": 412594815,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705082628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/GaussianRat/near/412585493\">said</a>:</p>\n<blockquote>\n<p>I think that independently of the spell we choose we want a characteristic predicate rather than an explicit definition.</p>\n</blockquote>\n<p>+1 for this (and similarly for everything else in mathlib)</p>",
        "id": 412594918,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705082654
    },
    {
        "content": "<p>I'm starting to think more and more that <em>literally</em> everything we define should have a \"characteristic predicate\" of some sort</p>",
        "id": 412595089,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705082724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> We already have a predicate for algebraic closures, right?</p>",
        "id": 412596578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1705083293
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsAlgebraicClosure#doc\">docs#IsAlgebraicClosure</a></p>",
        "id": 412596683,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705083343
    },
    {
        "content": "<p>That's a 404 but you might be right (I changed \"all\" to \"most\" :-) )</p>",
        "id": 412596790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705083380
    },
    {
        "content": "<p>I guess we have IsAlgebraic and AlgebraicallyClosed</p>",
        "id": 412596889,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705083419
    },
    {
        "content": "<p>The issue will be that the proposition <code>isGaussianRat</code> will be a proposition but it won't be as useful as you think (e.g. you won't be able to get a map to the complexes because you'll have to choose an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>) and <code>isPointedGaussianRat</code>will involve a choice so won't be a Prop and there will be a risk of diamonds.</p>",
        "id": 412597474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705083637
    },
    {
        "content": "<p>But something can surely be done since you can characterize the Gaussian rats as the unique extension of <span class=\"tex-error\">$$\\Q$$</span> of degree 2 which contains some element whose square is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 412597732,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705083743
    },
    {
        "content": "<p>Why should <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span></span></span></span> get preferential treatment among all nontrivial number fields? (Also, we do have <code>CylcotomicField 4 Rat</code>.)</p>",
        "id": 412597749,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705083747
    },
    {
        "content": "<p>It shouldn't.</p>",
        "id": 412597781,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705083766
    },
    {
        "content": "<p>So there should be predicates for each other number field as well? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 412597865,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705083801
    },
    {
        "content": "<p>I'm claiming that the answer is yes, for the explicit number fields</p>",
        "id": 412597920,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705083824
    },
    {
        "content": "<p>What is an \"explicit number field\"?</p>",
        "id": 412598005,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705083847
    },
    {
        "content": "<p>I knew you were going to ask that :)</p>",
        "id": 412598028,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705083856
    },
    {
        "content": "<p>And I don't have an answer</p>",
        "id": 412598083,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705083877
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><mroot><mn>2</mn><mn>3</mn></mroot><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\sqrt[3]{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7869em;\"><span style=\"top:-2.9647em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mrow><msqrt><mn>3</mn></msqrt><mo>+</mo><mn>5</mn></mrow></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\sqrt{\\sqrt{3}+5})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3222em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0722em;\"><span class=\"svg-align\" style=\"top:-3.2em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">3</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">5</span></span></span><span style=\"top:-3.0322em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.28em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl0 -0\nc4.7,-7.3,11,-11,19,-11\nH40000v40H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM1001 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1678em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, ...</p>",
        "id": 412598186,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705083913
    },
    {
        "content": "<p>I guess given some field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> and some irreducible poly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> you could make a characteristic predicate for an extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> generated by a root of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>.</p>",
        "id": 412598399,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705083996
    },
    {
        "content": "<p>\"There exists a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>-algebra isomorphism with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">⟨</mo><mi>f</mi><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}[X]/\\langle f \\rangle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">⟩</span></span></span></span>\".</p>",
        "id": 412598551,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705084061
    },
    {
        "content": "<p>Yeah something like that</p>",
        "id": 412598714,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705084129
    },
    {
        "content": "<p>But then the point is that given a field with such an instance the only things you will ever be able to say about such a field must be compatible with that algebra iso, and you couldn’t use any other implementation details</p>",
        "id": 412598870,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705084191
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsAdjoinRoot#doc\">docs#IsAdjoinRoot</a> is apparently not well known enough ...</p>",
        "id": 412601610,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1705085282
    },
    {
        "content": "<p>But that has data!</p>",
        "id": 412602053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705085429
    },
    {
        "content": "<p>so it does \"choose a basis\"</p>",
        "id": 412602074,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705085437
    },
    {
        "content": "<p>I'm sure now Kevin will contest the use of \"Is\" in \"IsAdjointRoot\"</p>",
        "id": 412602153,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705085489
    },
    {
        "content": "<p>Yes I think it's a great shame that there are type-valued declarations called <code>Is...</code>, with <code>IsROrC</code> being the canonical one I complain about.</p>",
        "id": 412608119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705088041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/GaussianRat/near/412590863\">said</a>:</p>\n<blockquote>\n<p>You can do the ugly thing and choose an $i$ but this is like choosing a basis -- this is breaking symmetry and proving certain theorems will be harder.</p>\n</blockquote>\n<p>Okay but you could have a type synonym <code>OtherC</code> which has an <code>IsROrC</code> instance where <code>I := -I</code>. Similarly, you could have synonyms which change the non-canonical choice of basis.</p>",
        "id": 412614929,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705091079
    },
    {
        "content": "<p>Yes but these ideas which people have about this topic just sound to me like it's 1900 and people are saying \"you don't need vector spaces, you can just use R^n and carry around matrices\". Yes you can do this, I'm just saying it's a lousy idea! However I've never managed to explicitly give an example of this because we're nowhere near the part of the Langlands philosophy where you see the issues in lean yet.</p>\n<p>Basically I'm going to come back to this later and do IsROrC the way I want to do it but only when I need it which might be in quite a long time</p>",
        "id": 412616382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705091708
    },
    {
        "content": "<p>\"<code>IsRorC</code> done right\"</p>",
        "id": 412617841,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705092361
    },
    {
        "content": "<p>What about <code>Polynomial.IsSplittingField ℚ K (Polynomial.X ^ 2 + 1)</code> using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.IsSplittingField#doc\">docs#Polynomial.IsSplittingField</a></p>",
        "id": 412618552,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1705092643
    },
    {
        "content": "<p>We can in fact characterize an algebraic extension (not necessarily normal) by the set of polynomials in the base field that have a root in it, or equivalently by the set of minimal polynomials of its elements over the base field, but those are not finite amounts of data. See I.M.Isaacs, <em><a href=\"https://www.tandfonline.com/doi/pdf/10.1080/00029890.1980.11995085\">Roots of Polynomials in Algebraic Extensions of Fields</a></em>.<br>\n<a href=\"/user_uploads/3121/nIS6uVvXal2ZTo0HvSP1oxPu/image.png\">image.png</a><br>\n<a href=\"/user_uploads/3121/-27H-c733hWRXVXmDfjY9won/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/nIS6uVvXal2ZTo0HvSP1oxPu/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/nIS6uVvXal2ZTo0HvSP1oxPu/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-27H-c733hWRXVXmDfjY9won/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/-27H-c733hWRXVXmDfjY9won/image.png\"></a></div>",
        "id": 412623612,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1705095139
    },
    {
        "content": "<p>Back to the original question: the simplest concrete model is probably <code>AdjoinRoot ℚ (X^2+1)</code>, which is simpler than both SplittingField (how <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CyclotomicField#doc\">docs#CyclotomicField</a> is defined) and CliffordAlgebra.</p>\n<p>If the focus is on computability we should introduce something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Zsqrtd#doc\">docs#Zsqrtd</a> but in a more general form. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZSqrtd#doc\">docs#ZSqrtd</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex#doc\">docs#Complex</a> are both homogeneous products, i.e. of the form R × R (but packaged as a structure). The other two examples <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Unitization#doc\">docs#Unitization</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TrivSqZeroExt#doc\">docs#TrivSqZeroExt</a> that Eric gave are heterogeneous products (also allow different universes).</p>\n<p>For computing with number fields, rings and finite fields it's probably more important to generalize the former two from <code>R × R</code> to <code>Fin n → R</code>, and generalize the polynomials X^2-d and X^2+1 to arbitrary monic polynomials. The addition already comes with <code>Fin n → R</code> and the multiplication can be easily defined computably like <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.F0.9D.94.BD.E2.82.84/near/321047870\">this</a>, but I didn't go on to prove it's isomorphic to AdjoinRoot as an R-algebra. As I remarked there, even though you can characterize finite fields as splitting fields of X^p^n-X or just by the cardinality p^n, for concrete computations you'd still choose a primitive polynomial <code>Fin n → 𝔽_p </code>.</p>",
        "id": 412623618,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1705095144
    },
    {
        "content": "<p>If there really is a need for concrete quadratic stuff then perhaps one should just define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mn>2</mn></msup><mo>+</mo><mi>a</mi><mi>X</mi><mo>+</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R[X]/(X^2+aX+b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span> as a function of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> as <code>re, im : R</code> with the induced +,- and *.</p>",
        "id": 412623857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705095298
    },
    {
        "content": "<p>I am slightly concerned that this is just making another way to do something we can already do though</p>",
        "id": 412623893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705095324
    },
    {
        "content": "<p>That would also be convenient for working with hyperelliptic curves, for example.</p>",
        "id": 412623952,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705095363
    },
    {
        "content": "<p>Projective coordinates for elliptic curves <a href=\"https://github.com/leanprover-community/mathlib4/pull/8485\">#8485</a> originally used the \"structure with three fields\" design but David changed it to <code>Fin 3 → R</code> by my request, because there's already a <code>Units R</code>-action on it that you'd quotient by, and it's easier to connect to MvPolynomial.</p>",
        "id": 412624382,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1705095611
    },
    {
        "content": "<p>I think it does make sense to have a representation for quadratic rings and fields that is convenient to use with concrete examples, as they tend to occur quite a bit more frequently in applications than more general extensions.</p>",
        "id": 412624487,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705095680
    },
    {
        "content": "<p>If you make a structure <code>re, im : R</code> you need to manually put the +,- instances, and I wouldn't call the * induced.</p>",
        "id": 412624517,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1705095696
    },
    {
        "content": "<p>You possibly could use the isomorphism with <code>Fin 2 \\to R</code> to transport the structure?</p>",
        "id": 412624637,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705095756
    },
    {
        "content": "<blockquote>\n<p>as they tend to occur quite a bit more frequently in applications than more general extensions.</p>\n</blockquote>\n<p>If that's the case then it's better to follow Eric's <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/GaussianRat/near/412583478\">suggestion</a> to unify all four.</p>",
        "id": 412624669,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1705095783
    },
    {
        "content": "<p>Yeah, it would be reasonable to define the AdjoinRoot algebra structure on <code>Fin n → R</code> generally and transport to R x R in the special case of quadratic rings.</p>",
        "id": 412624788,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1705095866
    },
    {
        "content": "<p>If we are fine with choosing a root why not just use AdjoinRoot and define <code>re</code> and <code>im</code> as <code>b.basis.repr · 0</code> and <code>b.basis.repr · 1</code> where <code>b</code> is some <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AdjoinRoot.powerBasis#doc\">docs#AdjoinRoot.powerBasis</a></p>",
        "id": 412625245,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1705096132
    },
    {
        "content": "<p>AdjoinRoot is defined using Polynomial, so I don't think anything that goes through it can be computable ... (I guess it's a more subtle question whether the kernel could reduce results of operations to a normal form, though.)</p>",
        "id": 412625401,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1705096222
    },
    {
        "content": "<p>Do we really care about <code>computable</code> computable? I thought having a good set of simp lemmas and/or tactics is the computable we care about.</p>",
        "id": 412625643,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1705096378
    },
    {
        "content": "<p>The thread has diverged a fair ways, but in my actual use case I do need it to be fully computational.  But I'm also happy with just tuples for now, and in general I'm okay if computational needs define their own types with noncomputable isomorphisms into the mathematical structures for proving theorems.</p>",
        "id": 412626636,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705096859
    },
    {
        "content": "<p>In that case you can take a look at <em><a href=\"https://dl.acm.org/doi/pdf/10.1145/3573105.3575682\">Formalized Class Group Computations and Integral Points on Mordell Elliptic Curves</a></em> by <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> et al. The code is <a href=\"https://github.com/lean-forward/class-group-and-mordell-equation\">here</a> and they actually took the \"structure with two fields approach\" rather than <code>Fin 2 → R</code> <span aria-label=\"melting face\" class=\"emoji emoji-1fae0\" role=\"img\" title=\"melting face\">:melting_face:</span><br>\n<a href=\"/user_uploads/3121/vlh7fEvmM1D83XX_JM5_74HM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vlh7fEvmM1D83XX_JM5_74HM/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/vlh7fEvmM1D83XX_JM5_74HM/image.png\"></a></div>",
        "id": 412627609,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1705097366
    },
    {
        "content": "<blockquote>\n<p>Do we really care about computable computable? I thought having a good set of simp lemmas and/or tactics is the computable we care about.</p>\n</blockquote>\n<p>It's nice to be able to prove identities in ℕ, ℤ, and ℚ by <code>rfl</code>, and it would be nice to extend this to finite extensions of them. There are occasionally talks about proofs by reflection too ... I realize that <code>Fin n → R</code> doesn't quite serve this goal (unlike <code>R × R</code>) because <code>rfl</code> won't do <code>funext</code> and <code>fin_cases</code>, but <code>by decide</code> probably works. <code>AdjoinRoot</code> is a quotient type and certainly doesn't reduce the representative to something of lower degree, <del>but I realize you can probably put a <code>DecidableEq</code> instance on it to make <code>by decide</code> work too.</del></p>\n<p><strong>Edit</strong>: I think the instance can be constructed computably (if the monic polynomial <code>p</code> you mod by has a computable <code>support</code> and if the ring has DecidableEq), but would require you redefine modByMonic in a computable way (but you can do that within your decision algorithm). Once the polynomials are reduced to degree <code>&lt; n := natDegree p</code> you can just compare the first <code>n</code> coefficients. The problem is that this instance won't be able to decide an equality between terms that involve polynomial multiplication, because a coefficient of a product of polynomials is a sum over a Finset constructed from the supports, and if the supports are noncomputable (e.g. from an earlier addition or multiplication step) then the coefficient won't reduce. So unless we redefine polynomial multiplication in a computable way (for your specific ring with DecidableEq, or use the DFinsupp approach) the instance won't be of much use.</p>",
        "id": 412628504,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1705097800
    },
    {
        "content": "<p>I'd like to report here that I developed a framework that allows computing polynomial operations and deciding properties by kernel reduction (<code>rfl</code>) using typeclasses as opposed to meta-programming, but I haven't got time to implement computations in AdjoinRoot following this approach yet. Details are in <a href=\"#narrow/stream/113489-new-members/topic/Compute.20roots.20of.20polynomials/near/420832934\">this thread</a></p>",
        "id": 420984091,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707729964
    }
]