[
    {
        "content": "<p>Is there a tactic used to prove order relations automatically? <code>linarith</code> only works for <code>[LinearOrderedCommRing R]</code>, what about we only have a linear order or even only a preorder? For example, <code>linarith</code> fails to solve</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thank you!</p>",
        "id": 412705912,
        "sender_full_name": "Yelong Hua",
        "timestamp": 1705148396
    },
    {
        "content": "<p>The tactic <code>exact?</code> will solve that particular one, but I'm not sure there's a tactic for general linear orders.</p>",
        "id": 412711186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705153501
    },
    {
        "content": "<p><code>aesop (add unsafe [le_trans, lt_trans, le_of_lt, lt_of_le_of_lt, lt_of_lt_of_le])</code> should do most of the simple goals you throw at it.</p>",
        "id": 412711300,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705153566
    },
    {
        "content": "<p><code>aesop</code> alone fails on this one (aah but if you tell it the relevant lemmas then it does it :-) )</p>",
        "id": 412711308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705153578
    },
    {
        "content": "<p>Should one also add <code>lt_of_le_of_lt</code> and <code>lt_of_lt_of_le</code>?</p>",
        "id": 412711361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705153653
    },
    {
        "content": "<p>No, because that's just <code>lt_trans (le_of_lt _) _</code> or <code>lt_trans _ (le_of_lt _)</code></p>",
        "id": 412711461,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705153737
    },
    {
        "content": "<p>I don't believe you? <code>lt_trans</code> is strictly weaker than <code>lt_of_le_of_lt</code> for things like Nat.</p>",
        "id": 412712493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705154751
    },
    {
        "content": "<p>Uh yeah of course. Edited my message</p>",
        "id": 412712927,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705155156
    },
    {
        "content": "<p>OK, my last two messages in this thread should now be ignored because they're confusing, and I believe your edited message.</p>",
        "id": 412713169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705155427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631684\">Yelong Hua</span> has marked this topic as resolved.</p>",
        "id": 412787879,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705214276
    }
]