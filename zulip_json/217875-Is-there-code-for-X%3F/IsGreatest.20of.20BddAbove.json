[
    {
        "content": "<p>I was wondering if the following (or some suitable generalization) is already in mathlib and I just didn't find it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IsGreatest_of_BddAbove</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">S.Nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">BddAbove</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">IsGreatest</span> <span class=\"n\">S</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">sSup</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.sSup_mem</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">=&gt;</span><span class=\"n\">ConditionallyCompleteLattice.le_csSup</span> <span class=\"n\">S</span> <span class=\"n\">x</span> <span class=\"n\">h2</span> <span class=\"n\">hx</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 438819584,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1715784050
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsClosed.isGreatest_csSup#doc\">docs#IsClosed.isGreatest_csSup</a> ?</p>",
        "id": 438823179,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715784986
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IsGreatest_of_BddAbove</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">S.Nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">BddAbove</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">IsGreatest</span> <span class=\"n\">S</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">isClosed_discrete</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isGreatest_csSup</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 438823483,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715785067
    },
    {
        "content": "<p>No need to invoke topology, though</p>",
        "id": 438823596,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715785084
    },
    {
        "content": "<p>Doesn't seem like we have it explicitly, but Ruben is right that the correct lemma to have is not yours but <code>s.Nonempty → BddAbove s → IsGreatest s (sSup s)</code></p>",
        "id": 438824035,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715785194
    },
    {
        "content": "<p>More interesting is what's the right type class</p>",
        "id": 438824428,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715785283
    },
    {
        "content": "<p><code>ConditionallyCompleteLattice</code> + <code>LocallyFiniteOrder</code></p>",
        "id": 438824570,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715785319
    }
]