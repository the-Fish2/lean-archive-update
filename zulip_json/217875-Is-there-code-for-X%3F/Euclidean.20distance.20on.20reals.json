[
    {
        "content": "<p>An undergraduate asked me this in class today and I'm still stumped:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.EuclideanDist</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Euclidean.dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 423820434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709127827
    },
    {
        "content": "<p>I don't think that's true?</p>",
        "id": 423822973,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709128523
    },
    {
        "content": "<p>That's because we don't know anything about <code>Euclidean.dist</code>except that it's continuously differentiable</p>",
        "id": 423823287,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709128607
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Euclidean.dist#doc\">docs#Euclidean.dist</a> on a space <code>E</code> is defined using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=toEuclidean#doc\">docs#toEuclidean</a>, which is defined using an arbitrary continuous linear identification of <code>E</code> with <code>Fin (dim E) → ℝ</code>.</p>",
        "id": 423823292,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709128610
    },
    {
        "content": "<p>There's no guarantee that this arbitrary identification preserves the distance between <code>ℝ</code> and <code>Fin 1 → ℝ</code></p>",
        "id": 423823478,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709128662
    },
    {
        "content": "<p>Note that we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.dist_eq#doc\">docs#Real.dist_eq</a>, so it seems you should use <code>dist</code>.</p>",
        "id": 423823656,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709128706
    },
    {
        "content": "<p>Sounds like <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/InnerProductSpace/EuclideanDist.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/InnerProductSpace/EuclideanDist.html</a> needs a warning that you probably don't want it</p>",
        "id": 423823837,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709128766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Euclidean.20distance.20on.20reals/near/423823292\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Euclidean.dist#doc\">docs#Euclidean.dist</a> on a space <code>E</code> is defined using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=toEuclidean#doc\">docs#toEuclidean</a>, which is defined using an arbitrary continuous linear identification of <code>E</code> with <code>Fin (dim E) → ℝ</code>.</p>\n</blockquote>\n<p>Exactly, and I don't believe it's reasonable to have such a function in the library, whose existence can only lead to misunderstanding.</p>",
        "id": 424122325,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709246555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Euclidean.20distance.20on.20reals/near/423823837\">said</a>:</p>\n<blockquote>\n<p>Sounds like <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/InnerProductSpace/EuclideanDist.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/InnerProductSpace/EuclideanDist.html</a> needs a warning that you probably don't want it</p>\n</blockquote>\n<p>We lay want the existence of such a thing, that you can summon with <code>obtain</code>, without any guarantee of any compatibility.</p>",
        "id": 424122457,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709246638
    },
    {
        "content": "<p>AFAIR, I added this when I was working on the smooth partition of unity. Probably, we should remove it now (e.g., by using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=toEuclidean#doc\">docs#toEuclidean</a> instead).</p>",
        "id": 424273196,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709308363
    },
    {
        "content": "<p>By using what instead? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=toEuclidean#doc\">docs#toEuclidean</a> is a fairly dangerous function.</p>",
        "id": 424302662,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709317284
    },
    {
        "content": "<p>Why is it dangerous?</p>",
        "id": 424302846,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709317366
    },
    {
        "content": "<p>because me and Jujian spent 5 minutes trying to prove the result at the top of this thread ;-)</p>",
        "id": 424303654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709317685
    },
    {
        "content": "<p>I understand why <code>Euclidean.dist</code> is misleading. What's wrong with <code>toEuclidean</code>?</p>",
        "id": 424304355,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709317932
    },
    {
        "content": "<p>Because that isomorphism depends on choices you can't predict. IMO, it should be written as an existential statement.</p>",
        "id": 424304702,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709318073
    },
    {
        "content": "<p>But I see that this definition depends on the analogous <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearEquiv.ofFinrankEq#doc\">docs#ContinuousLinearEquiv.ofFinrankEq</a> about which I would  raise the same criticism.</p>",
        "id": 424304830,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709318126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Euclidean.20distance.20on.20reals/near/424304702\">said</a>:</p>\n<blockquote>\n<p>Because that isomorphism depends on choices you can't predict. IMO, it should be written as an existential statement.</p>\n</blockquote>\n<p>Using <code>choose</code> in the name might be a better compromise</p>",
        "id": 424323356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709326063
    },
    {
        "content": "<p>Mathlib is full of functions that use choice to pick a somewhat arbitrary definition</p>",
        "id": 424323438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709326089
    },
    {
        "content": "<p>Using <code>choose</code> in the name might be useful indeed. On the other hand, what is the obstruction to using an existential statement with an <code>obtain</code> in a proof when no canonical stuff can be given? (Sometimes, I observed that the <code>obtain</code> tactic failed in a way I don't understand…)</p>",
        "id": 424325200,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709326946
    },
    {
        "content": "<p>The problem with using an existential is that you have to put every property you could think of under the same existential</p>",
        "id": 424328462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709328484
    },
    {
        "content": "<p>(or you make some data-carrying object that means \"has a canonical isomorphism with euclidean space\", and have the existential unpack to that)</p>",
        "id": 424328539,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709328532
    },
    {
        "content": "<p>Sometimes <code>ofFinrankEq</code> is used to define non-canonical constants. Probably, they can be replaced by <code>sInf</code>s.</p>",
        "id": 424367277,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709357688
    }
]