[
    {
        "content": "<p>We have <code>HasDerivAt</code>; is there a reason not to have <code>HasDerivOn</code> (mimicking <code>DifferentiableOn</code>)? Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">HasDerivOn</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 410881953,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1704217584
    },
    {
        "content": "<p><code>HasDerivOn</code> would presumably be defined in terms of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasDerivWithinAt#doc\">docs#HasDerivWithinAt</a> instead. In any case, I think that most of the time it would be more painful to use because you’d end up with a lot of unnecessary lambdas.</p>",
        "id": 410883489,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1704218310
    }
]