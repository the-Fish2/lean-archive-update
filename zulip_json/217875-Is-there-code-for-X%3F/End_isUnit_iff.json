[
    {
        "content": "<p>I am sure this is already in Mathlib4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Units</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">End_isUnit_iff</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Function.End</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsUnit</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">Function.Bijective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 412751847,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1705184824
    },
    {
        "content": "<p>I think a more idiomatic spelling would be something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Function.End</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">≃</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 412752147,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705185113
    },
    {
        "content": "<p>But I can't seem to find that one either</p>",
        "id": 412752215,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705185150
    },
    {
        "content": "<p>I think we probably want both spellings</p>",
        "id": 412752521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705185451
    },
    {
        "content": "<p>Adam's spelling we already have for Module.End and for affine maps, and possibly more</p>",
        "id": 412752537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705185476
    },
    {
        "content": "<p>I think the names are a complete mess though</p>",
        "id": 412752587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705185489
    },
    {
        "content": "<p>And I don't think we have the <code>IsUnit</code> version for (edit: m)any morphisms</p>",
        "id": 412752603,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705185506
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.End_isUnit_iff#doc\">docs#Module.End_isUnit_iff</a></p>",
        "id": 412752614,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705185515
    },
    {
        "content": "<p>That's the only one I could find</p>",
        "id": 412752638,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705185535
    },
    {
        "content": "<p>Yeah, that's what I found.</p>",
        "id": 412752639,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1705185535
    },
    {
        "content": "<p>My proof is pretty bad... </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Units</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">End_isUnit_iff</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Function.End</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsUnit</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">Function.Bijective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Function.bijective_iff_has_inverse</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Function.leftInverse_iff_comp</span><span class=\"o\">,</span><span class=\"bp\">@</span><span class=\"n\">Function.rightInverse_iff_comp</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">hu</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"n\">use</span> <span class=\"n\">u.inv</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hu</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">u.inv_val</span><span class=\"o\">,</span><span class=\"n\">u.val_inv</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">hg1</span><span class=\"o\">,</span><span class=\"n\">hg2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"n\">use</span> <span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">inv</span><span class=\"o\">:=</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">val_inv</span><span class=\"o\">:=</span><span class=\"n\">hg2</span><span class=\"o\">,</span><span class=\"n\">inv_val</span><span class=\"o\">:=</span><span class=\"n\">hg1</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 412752802,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1705185657
    },
    {
        "content": "<p>Found <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.Perm.equivUnitsEnd#doc\">docs#Equiv.Perm.equivUnitsEnd</a> by Loogle</p>",
        "id": 412753353,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1705186087
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 412753358,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1705186094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Function.End, Units</p>",
        "id": 412753365,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1705186104
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/Perm/Basic.html#Equiv.Perm.equivUnitsEnd\">Equiv.Perm.equivUnitsEnd</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/Perm/Basic.html#Equiv.Perm.val_equivUnitsEnd_apply\">Equiv.Perm.val_equivUnitsEnd_apply</a>, and <a href=\"https://loogle.lean-lang.org/?q=Function.End%2C%20Units\">4 more</a></p>",
        "id": 412753367,
        "sender_full_name": "loogle",
        "timestamp": 1705186105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Function.End, IsUnit</p>",
        "id": 412753398,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1705186142
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 412753399,
        "sender_full_name": "loogle",
        "timestamp": 1705186142
    },
    {
        "content": "<p>On the other hand, there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.isUnit_iff_isIso#doc\">docs#CategoryTheory.isUnit_iff_isIso</a></p>",
        "id": 412829262,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705250955
    }
]