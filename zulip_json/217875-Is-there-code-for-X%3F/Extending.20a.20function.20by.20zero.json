[
    {
        "content": "<p>I would like to define a function <code> ℕ → ℝ</code> from a given list <code>L</code> of real numbers, by assigning to every <code>n</code> less than the length on <code>L</code> its element <code>L[n]</code>, and otherwise 0. This is what I did, with two elementary lemmas on the definition.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ext0</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">L.length</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ext00</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span> <span class=\"n\">L.length</span><span class=\"o\">):</span>\n    <span class=\"n\">ext0</span> <span class=\"n\">L</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">L</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">ext0</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">dite_eq_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">use</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ext0l</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span> <span class=\"n\">L.length</span><span class=\"o\">):</span>\n    <span class=\"n\">ext0</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">L.length</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">L.length</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">ext0</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">dite_eq_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_iff_le_pred</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>I am not sure about defining if using by_cases. Is there a better way?</p>",
        "id": 429896535,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1711555665
    },
    {
        "content": "<p>I think that your definition is actually equivalent to what is below (and I golfed a little bit your lemmas):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ext0</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">L.length</span> <span class=\"k\">then</span> <span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ext00</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span> <span class=\"n\">L.length</span><span class=\"o\">):</span>\n    <span class=\"n\">ext0</span> <span class=\"n\">L</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">L</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ext0</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_iff</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ext0l</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span> <span class=\"n\">L.length</span><span class=\"o\">):</span>\n    <span class=\"n\">ext0</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">L.length</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">L.length</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ext0</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_iff</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_iff_le_pred</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 429900003,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711556686
    },
    {
        "content": "<p>why not just <code>L[n]!</code>? Or if you don't want a panic, <code>L[n]?.getD default</code>?</p>",
        "id": 429900532,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711556843
    }
]