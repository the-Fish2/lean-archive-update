[
    {
        "content": "<p>I see there is the <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Complex/Exponential.html#Real.exp\"><code>Real.exp</code></a> function. Is the number <code>e</code> defined?</p>",
        "id": 445695991,
        "sender_full_name": "Iocta",
        "timestamp": 1718828717
    },
    {
        "content": "<p>It is <code>Real.exp 1</code>. I don't think there is a notation for it</p>",
        "id": 445696115,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718828764
    },
    {
        "content": "<p>In the sense that when we need it we just write <code>Real.exp 1</code>.</p>",
        "id": 445696191,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718828816
    },
    {
        "content": "<p>There is a unicode character for this: U+2107 <code>‚Ñá</code>, but that looks an awful lot like epsilon. Potentially we could use <code>ùëí</code>, which is U+1D452, in the <code>Real</code> scope.</p>",
        "id": 445889516,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1718899842
    },
    {
        "content": "<p>i think introducing that notation might trick people into writing <code>e^x</code> rather than <code>Real.exp x</code>, which might lead to defeq problems?</p>",
        "id": 445934981,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1718911396
    },
    {
        "content": "<p>It's probably not a good idea, but that could be addressed with a macro:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">notation</span><span class=\"w\"> </span><span class=\"s2\">\"ùëí\"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">exp</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"kn\">macro_rules</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">ùëí</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">exp</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"bp\">ùëí</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"c1\">-- Real.exp 2</span>\n</code></pre></div>",
        "id": 445969503,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718924982
    },
    {
        "content": "<p>But then other people would write <code>e^z</code> to mean <code>Complex.exp z</code></p>",
        "id": 446018236,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1718953213
    },
    {
        "content": "<p>then something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Complex</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">NaturalExp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">exp</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"c1\">-- possibly more fields, i'm not sure what kind of requirements are natural here</span>\n\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">NaturalExp</span><span class=\"w\"> </span><span class=\"n\">Real</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">exp</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">exp</span>\n\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">NaturalExp</span><span class=\"w\"> </span><span class=\"n\">Complex</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">exp</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Complex</span><span class=\"bp\">.</span><span class=\"n\">exp</span>\n\n<span class=\"kn\">notation</span><span class=\"w\"> </span><span class=\"s2\">\"ùëí\"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">NaturalExp</span><span class=\"bp\">.</span><span class=\"n\">exp</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"kn\">macro_rules</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">ùëí</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">NaturalExp</span><span class=\"bp\">.</span><span class=\"n\">exp</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">ùëí</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">exp</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">ùëí</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">Complex</span><span class=\"bp\">.</span><span class=\"n\">exp</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 446046788,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1718963267
    },
    {
        "content": "<p>i imagine fields like <code>exp_add</code> and <code>exp_zero</code> are some natural conditions... but these aren't sufficient conditions to uniquely define <code>(ùëí ^ .)</code></p>",
        "id": 446050167,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1718964451
    },
    {
        "content": "<p>If it's just a notation class we usually don't need to add conditions</p>",
        "id": 446062506,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1718969026
    },
    {
        "content": "<p>i suppose that's fair...</p>",
        "id": 446067513,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1718971017
    },
    {
        "content": "<p>but i imagine unifying the api involved would be useful...</p>",
        "id": 446067790,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1718971101
    },
    {
        "content": "<p>and i think that takes more than just a notation class</p>",
        "id": 446067851,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1718971127
    },
    {
        "content": "<p>I don't know if it's wise to unify the API, just let lemmas for all the different <code>exp</code>s apply IMO</p>",
        "id": 446088889,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1718978263
    },
    {
        "content": "<p>Don't forget <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NormedSpace.exp#doc\">docs#NormedSpace.exp</a></p>",
        "id": 446089070,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718978321
    },
    {
        "content": "<p>I think we don't need the macro expansion for <code>ùëí ^ x</code> if we just put in the docstring for the notation that it should only be used for <code>Real.exp 1</code>.</p>",
        "id": 446100099,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1718981826
    },
    {
        "content": "<p><code>elab_rules | `(ùëí ^ $x) =&gt; throwError \"don't do this\"</code></p>",
        "id": 446117415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718986850
    },
    {
        "content": "<p>that could be a linter...</p>",
        "id": 446312543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719083677
    },
    {
        "content": "<p>linters like this can be <code>elab_rules</code>, you mean? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 446312733,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719083819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Euler's.20number.20e/near/446312543\">said</a>:</p>\n<blockquote>\n<p>that could be a linter...</p>\n</blockquote>\n<p>What's the difference between a linter and an elaborator that throws a warning using <code>logLint</code>?</p>",
        "id": 446454250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719166777
    },
    {
        "content": "<p>It is easier to silence the linter than the elaborator.</p>",
        "id": 446454685,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719166916
    },
    {
        "content": "<p>Well, if the elaborator calls <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Linter.logLintIf#doc\">docs#Lean.Linter.logLintIf</a> then the silencing mechanism is unchanged</p>",
        "id": 446468408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719173520
    },
    {
        "content": "<p>Note, I count \"fake linters\" that run during elaboration but use <code>logLint</code> as linters for this purpose</p>",
        "id": 446739699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719271257
    },
    {
        "content": "<p>(an example of which is <code>linter.deprecated</code>)</p>",
        "id": 446739725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719271274
    }
]