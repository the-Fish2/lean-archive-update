[
    {
        "content": "<p>Do we have this? Or can we prove it in an easy manner?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Eval</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Cardinal</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Polynomial.exists_eval_ne_zero_of_natDegree_lt_card</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfR</span> <span class=\"o\">:</span> <span class=\"n\">f.natDegree</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">#</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">f.eval</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 419485817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706889332
    },
    {
        "content": "<p>I suppose the proof should use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.card_roots#doc\">docs#Polynomial.card_roots</a></p>",
        "id": 419485966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706889366
    },
    {
        "content": "<p>I don't have an answer to your question but you need coefficients to be a field, right? E.g., <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2x + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> (with <code>R = ℤ</code>).</p>",
        "id": 419487949,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706889992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> in the statement there is <code>≠ 0</code> (I am assuming you read something like <code>... = 0</code>.</p>",
        "id": 419488313,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706890106
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 419488372,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706890130
    },
    {
        "content": "<p>I think you can prove it quickly via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.eq_zero_of_natDegree_lt_card_of_eval_eq_zero#doc\">docs#Polynomial.eq_zero_of_natDegree_lt_card_of_eval_eq_zero</a></p>",
        "id": 419488910,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706890279
    },
    {
        "content": "<p>Thanks for the pointer!</p>",
        "id": 419489214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706890356
    },
    {
        "content": "<p>Something along the lines of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span> <span class=\"n\">Cardinal</span> <span class=\"n\">Function</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Polynomial.exists_eval_ne_zero_of_natDegree_lt_card</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfR</span> <span class=\"o\">:</span> <span class=\"n\">f.natDegree</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">#</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">f.eval</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span><span class=\"bp\">!</span> <span class=\"n\">H</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">Infinite</span> <span class=\"n\">R</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">zero_of_eval_zero</span> <span class=\"n\">_</span> <span class=\"n\">H</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">fintypeOfNotInfinite</span> <span class=\"n\">hfin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">eq_zero_of_natDegree_lt_card_of_eval_eq_zero</span> <span class=\"n\">f</span> <span class=\"n\">injective_id</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">aesop</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 419489576,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706890469
    },
    {
        "content": "<p>Wasn't <code>by_contra'</code> renamed <code>by_contra</code>? I was expecting the get immediately the statement in the <code>∀ (x : R), eval x f = 0</code> form.</p>",
        "id": 419493318,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706891706
    },
    {
        "content": "<p>There's <code>by_contra!</code></p>",
        "id": 419494052,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706891949
    },
    {
        "content": "<p>Thanks for the pointers</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Cardinal</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Polynomial.exists_eval_ne_zero_of_natDegree_lt_card</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfR</span> <span class=\"o\">:</span> <span class=\"n\">f.natDegree</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">#</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">f.eval</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hf</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">hR</span><span class=\"bp\">|</span><span class=\"n\">hR</span> <span class=\"o\">:=</span> <span class=\"n\">finite_or_infinite</span> <span class=\"n\">R</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.ofFinite</span> <span class=\"n\">R</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Polynomial.eq_zero_of_natDegree_lt_card_of_eval_eq_zero</span> <span class=\"n\">f</span> <span class=\"n\">Function.injective_id</span> <span class=\"n\">hf</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mk_fintype</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hfR</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hfR</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Polynomial.funext</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hf</span>\n</code></pre></div>",
        "id": 419497029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706892972
    },
    {
        "content": "<p>If you want to use it, <code>aesop</code> can do the two lines about cardinality.</p>",
        "id": 419498014,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706893326
    },
    {
        "content": "<p>Nice</p>",
        "id": 419498922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706893700
    }
]