[
    {
        "content": "<p>I was hoping to prove something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Prod.Lex</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">monotone_prod_fst_lex</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×ₗ</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">t.1</span> <span class=\"bp\">≤</span> <span class=\"n\">c.1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Using <code>refine Monotone.imp ?_ h</code> reduces the goal to <code>Monotone Prod.fst</code>, but my usual methods are leading me into circles here.</p>",
        "id": 422078968,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1708244613
    },
    {
        "content": "<p>Probably something with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prod.Lex.le_iff#doc\">docs#Prod.Lex.le_iff</a></p>",
        "id": 422079307,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708244952
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">monotone_prod_fst_lex</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×ₗ</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">t.1</span> <span class=\"bp\">≤</span> <span class=\"n\">c.1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"o\">((</span><span class=\"n\">Prod.Lex.le_iff</span> <span class=\"n\">t</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">LT.lt.le</span> <span class=\"n\">h'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_refl</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 422080701,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1708246425
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 422080708,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1708246436
    },
    {
        "content": "<p>Strictly speaking that statement is ill-typed; it should mention <code>ofLex</code> before using <code>.1</code></p>",
        "id": 422081246,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708246932
    }
]