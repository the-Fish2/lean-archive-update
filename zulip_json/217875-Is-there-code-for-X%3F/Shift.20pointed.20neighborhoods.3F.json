[
    {
        "content": "<p>I'm looking for the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>There are lemmas like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.const_add#doc\">docs#Filter.Tendsto.const_add</a>, but they seem to always need a non-pointed neighborhood in the target. I tried to fiddle around a bit with <code>apply?</code>, but it did not seem to produce anything helpful.</p>\n<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Filter.Tendsto, \"const\", \"add\"</p>",
        "id": 412818623,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705242097
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/Filter/AtTopBot.html#Filter.tendsto_atBot_add_const_left\">Filter.tendsto_atBot_add_const_left</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/Filter/AtTopBot.html#Filter.tendsto_atBot_add_const_right\">Filter.tendsto_atBot_add_const_right</a>, and <a href=\"https://loogle.lean-lang.org/?q=Filter.Tendsto%2C%20%22const%22%2C%20%22add%22\">11 more</a></p>",
        "id": 412818625,
        "sender_full_name": "loogle",
        "timestamp": 1705242099
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Filter.tendsto_iff_comap.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Eq.le</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n</code></pre></div>\n<p>leaves me at <code>⊢ 𝓝[≠] 0 = Filter.comap (fun w ↦ 1 + w) (𝓝[≠] 1)</code>,  which <em>looks</em> like <code>simp</code> or so should be able to solve it,  but no luck...</p>",
        "id": 412818729,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705242184
    },
    {
        "content": "<p>I would try to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tendsto_nhdsWithin_iff#doc\">docs#tendsto_nhdsWithin_iff</a> together with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=eventually_nhdsWithin_of_forall#doc\">docs#eventually_nhdsWithin_of_forall</a></p>",
        "id": 412819928,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1705243179
    },
    {
        "content": "<p>Or use the fact that your map is an homeomorphism and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Embedding.map_nhdsWithin_eq#doc\">docs#Embedding.map_nhdsWithin_eq</a></p>",
        "id": 412820147,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1705243308
    },
    {
        "content": "<p>But I guess some more specialized API for the case of homeomorphisms wouldn’t hurt</p>",
        "id": 412820209,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1705243333
    },
    {
        "content": "<p>This comes up when you want to change the base-point of a limit, as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It would be nice to have lemmas in Mathlib that make that easy.</p>",
        "id": 412822152,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705244745
    },
    {
        "content": "<p>To un-#xy, this is what I'm really after here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">‖.‖⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Maybe the approach I was taking is not the best one?</p>",
        "id": 412823331,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705245705
    },
    {
        "content": "<p>Didn't we have the exact same conversation a couple of weeks ago?</p>",
        "id": 412823523,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705245864
    },
    {
        "content": "<p>In <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Shifted.20limits/near/409025823\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Shifted.20limits/near/409025823</a>?</p>",
        "id": 412823560,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705245914
    },
    {
        "content": "<p>Right (I had forgotten about that conversation). I guess the lemmas you were suggesting there  are still missing. <del>So I'll try to open a PR adding them</del>. Re-reading, I see that you did open <a href=\"https://github.com/leanprover-community/mathlib4/pull/9166\">#9166</a>, but it has not been merged so far.</p>",
        "id": 412823829,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705246104
    },
    {
        "content": "<p>It is labeled \"awaiting-author\" since three weeks or so...</p>",
        "id": 412823976,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705246224
    },
    {
        "content": "<p>Ok, I commited the suggested change, let's see if it builds.</p>",
        "id": 412824135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705246358
    },
    {
        "content": "<p>Is there an easy way of constructing the homeomorphism given by translation (on a topological (additive) group)?</p>",
        "id": 412825494,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705247509
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Homeomorph.addRight#doc\">docs#Homeomorph.addRight</a></p>",
        "id": 412825603,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705247575
    },
    {
        "content": "<p>(I needed <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Homeomorph.addLeft#doc\">docs#Homeomorph.addLeft</a> instead.)</p>",
        "id": 412825718,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705247684
    }
]