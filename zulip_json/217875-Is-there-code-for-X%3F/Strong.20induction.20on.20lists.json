[
    {
        "content": "<p>Does a theorem like the following already exists somewhere in some form?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Note: The induction hypothesis states \"if l₂ is a strict suffix of hd::tl, then p l₂\".</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">List.strongInduction</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">[])</span>\n    <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">hd₁</span> <span class=\"n\">tl₁</span> <span class=\"n\">l₂</span><span class=\"o\">},</span> <span class=\"n\">hd₁</span><span class=\"o\">::</span><span class=\"n\">tl₁</span> <span class=\"bp\">++</span> <span class=\"n\">l₂</span> <span class=\"bp\">=</span> <span class=\"n\">hd</span><span class=\"o\">::</span><span class=\"n\">tl</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">hd</span><span class=\"o\">::</span><span class=\"n\">tl</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"n\">len</span>\n  <span class=\"n\">induction</span> <span class=\"n\">len</span> <span class=\"n\">using</span> <span class=\"n\">Nat.strongInductionOn</span> <span class=\"n\">generalizing</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"o\">‹</span><span class=\"n\">Nat</span><span class=\"o\">›</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">l</span>\n  <span class=\"n\">case</span> <span class=\"n\">ind.succ.cons</span> <span class=\"n\">hi</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hi</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp_arith</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">])</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">all_goals</span> <span class=\"n\">simp_all</span>\n</code></pre></div>\n<p>If not, would it be viable to add this to mathlib?</p>",
        "id": 410570895,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1703968037
    },
    {
        "content": "<p>Maybe it is/should be in Std?</p>",
        "id": 410645896,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1704040943
    }
]