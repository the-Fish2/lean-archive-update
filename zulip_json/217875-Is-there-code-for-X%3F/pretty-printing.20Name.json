[
    {
        "content": "<p>What is the idiomatic way to say </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Something about {name}\"</span>\n</code></pre></div>\n<p>where <code>name : Lean.Name</code> when <code>name</code> refers to a global name, so that it becomes clickable in the info view?</p>",
        "id": 421464024,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707922959
    },
    {
        "content": "<p>Adapting some code for the <code>#explode</code> tactic, this seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ppConst</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MessageData</span> <span class=\"o\">:=</span>\n  <span class=\"n\">try</span>\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">resolveGlobalConstNoOverloadCore</span> <span class=\"n\">n</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">mkConstWithLevelParams</span> <span class=\"n\">n</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">ofPPFormat</span> <span class=\"o\">{</span> <span class=\"n\">pp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">ctx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ctx.runMetaM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withOptions</span> <span class=\"o\">(</span><span class=\"n\">pp.tagAppFns.set</span> <span class=\"bp\">·</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n          <span class=\"c1\">-- The pp.tagAppFns option causes the `delabConst` function to annotate</span>\n          <span class=\"c1\">-- the constant with terminfo, which is necessary for seeing the type on mouse hover.</span>\n          <span class=\"n\">PrettyPrinter.ppExprWithInfos</span> <span class=\"o\">(</span><span class=\"n\">delab</span> <span class=\"o\">:=</span> <span class=\"n\">PrettyPrinter.Delaborator.delabConst</span><span class=\"o\">)</span> <span class=\"n\">e</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"{e}\"</span> <span class=\"o\">}</span>\n  <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pure</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Something about {← ppConst `List.cons}\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Something about {← ppConst `List.cons'}\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">mkSort</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 421491425,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707930367
    },
    {
        "content": "<p>Thanks! That reminded me that there is a <code>Lean.ppConst</code> in std that I can use to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">{</span><span class=\"n\">ppConst</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"n\">thm1</span><span class=\"o\">)}</span>\n</code></pre></div>\n<p>(which works fine, but is still a mouthful).</p>",
        "id": 421492908,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707930784
    },
    {
        "content": "<p>Oh, someone seems to have upstreamed that code I wrote for <code>#explode</code> to std :-)</p>",
        "id": 421496581,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707931858
    },
    {
        "content": "<p>By the way, use <code>mkConstWithLevelParams</code> instead, since that uses the level parameters from the declaration, rather than creating new metavariables. It looks nicer on hover, unless you do want to signify these are separate level parameters.</p>",
        "id": 421496632,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707931877
    },
    {
        "content": "<p>It’s also shorter :-D</p>",
        "id": 421496707,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707931912
    }
]