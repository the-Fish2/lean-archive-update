[
    {
        "content": "<p>I am trying to show that for any f in C₀(X, ℝ) there is a sequence gn with compact support such that gn tends to f. In doing this, I noticed that the norm of C₀(X, ℝ) is defined through BoundedContinuousFunction. On the other hand, to construct gn, I need to multiply with a compactly supported function by Urysohn's lemma and the result is in C₀(X, ℝ), which is an extension of C(X, ℝ) but not of BCF. Is there any nice way to do this?</p>",
        "id": 420839989,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1707606591
    },
    {
        "content": "<p>Do we not have a constructor from compactly supported functions to C_0? Also, an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would help.</p>",
        "id": 420843856,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707610479
    },
    {
        "content": "<p>Doesn't seem like it, but I didn't check carefully. I think the thing to do is to add this constructor.</p>",
        "id": 420844072,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707610691
    },
    {
        "content": "<p>thanks for your reply!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.UrysohnsLemma</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.ContinuousFunction.ZeroAtInfty</span>\n<span class=\"kn\">open</span> <span class=\"n\">ZeroAtInfty</span> <span class=\"n\">Filter</span> <span class=\"n\">Urysohns</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocallyCompactSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n <span class=\"o\">[</span><span class=\"n\">T2Space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C₀</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span>\n <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">C₀</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">,</span><span class=\"n\">ℂ</span><span class=\"o\">)),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">HasCompactSupport</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"n\">g</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">gn</span> <span class=\"o\">:</span> <span class=\"n\">C₀</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">ℂ</span><span class=\"o\">)),</span> <span class=\"n\">HasCompactSupport</span> <span class=\"n\">gn</span> <span class=\"bp\">∧</span> <span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">gn</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">gn</span> <span class=\"o\">:</span> <span class=\"n\">C₀</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">ℂ</span><span class=\"o\">)),</span> <span class=\"n\">HasCompactSupport</span> <span class=\"n\">gn</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">‖</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">gn</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"gr\">sorry</span> <span class=\"c1\">-- by Urysohn</span>\n  <span class=\"k\">have</span> <span class=\"n\">h21</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">exact</span> <span class=\"n\">Nat.one_div_pos_of_nat</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">gn</span><span class=\"o\">,</span> <span class=\"n\">hgn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span>\n  <span class=\"n\">use</span> <span class=\"n\">gn</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hgn.left</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">BoundedContinuousFunction.norm_le</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">h21</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hgn.right</span>\n</code></pre></div>\n<p>I was hoping that this would work. Instead, the error message seems to say that f - gn is C₀(X, ℝ), while the norm is defined for <code>BoundedContinuousFunction</code>.</p>",
        "id": 420844952,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1707611679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"382902\">@Yoh Tanimoto</span> are you referring to the error on the last line?</p>",
        "id": 420846017,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707612880
    },
    {
        "content": "<p>I think the problem is that you're passing in a proof of a <code>&lt;</code> relation, but <code>norm_le</code> (as the name suggests) requires a <code>≤</code> relation</p>",
        "id": 420846170,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707613055
    },
    {
        "content": "<p>the error message is definitely unhelpful... technically it tells you the problem but it's so verbose that it's difficult to spot the actual issue</p>",
        "id": 420846405,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707613287
    },
    {
        "content": "<p>ah! I thought it was a problem of the type of  f - gn... Thank you!</p>",
        "id": 420846507,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1707613365
    },
    {
        "content": "<p>no problem!</p>",
        "id": 420846643,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707613545
    },
    {
        "content": "<p>FYI, if you're curious, I believe the reason this works is that we have an instance that enables the coercion from C₀(_, _) to BCF: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZeroAtInftyContinuousMap.instBoundedContinuousMapClass#doc\">docs#ZeroAtInftyContinuousMap.instBoundedContinuousMapClass</a></p>\n<p>I think this might've been what you were asking about in your original message</p>",
        "id": 420847684,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1707614649
    },
    {
        "content": "<p>ah yes, I didn't understand that it meant that there was the coercion. great!</p>",
        "id": 420848306,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1707615394
    }
]