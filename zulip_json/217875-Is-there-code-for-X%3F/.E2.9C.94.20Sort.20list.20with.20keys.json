[
    {
        "content": "<p>I have a <code>List α</code>, and I want to sort it (descending) with respect to some function <code>f :  α → ℝ</code>. I want to use merge sort with the relation <code>(f · ≥ f ·)</code>, but this relation isn't automatically total and transitive. Is there some way to specify this relation which is immediately total and transitive? Alternatively, is there a way to sort the list directly WRT <code>f</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s.mergeSort</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.sorted_mergeSort</span>\n  <span class=\"c1\">-- failed to synthesize</span>\n  <span class=\"c1\">--   IsTotal α fun x x_1 =&gt; f x ≥ f x_1</span>\n</code></pre></div>",
        "id": 428061190,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1710999944
    },
    {
        "content": "<p>Order.Preimage might work</p>",
        "id": 428061342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711000072
    },
    {
        "content": "<p>Like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span><span class=\"n\">o</span> <span class=\"n\">GE.ge</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s.mergeSort</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span><span class=\"n\">o</span> <span class=\"n\">GE.ge</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.sorted_mergeSort</span>\n  <span class=\"c1\">-- failed to synthesize</span>\n  <span class=\"c1\">--   IsTotal α (f ⁻¹'o GE.ge)</span>\n</code></pre></div>\n<p>It still can't synthesize it, sadly.</p>",
        "id": 428061695,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711000362
    },
    {
        "content": "<p>no luck it seems</p>",
        "id": 428061731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711000409
    },
    {
        "content": "<p>there don't seem to be a lot of theorems about the unbundled order classes</p>",
        "id": 428061746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711000426
    },
    {
        "content": "<p>it's not particularly hard to provide the instances though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s.mergeSort</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">IsTotal</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">le_total</span> <span class=\"bp\">..</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">IsTrans</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">le_trans</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span><span class=\"o\">⟩</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.sorted_mergeSort</span>\n</code></pre></div>",
        "id": 428062284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711000805
    },
    {
        "content": "<p>Yeah. Thanks!</p>",
        "id": 428063817,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711002012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690858\">Daniel Weber</span> has marked this topic as resolved.</p>",
        "id": 428063821,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711002017
    }
]