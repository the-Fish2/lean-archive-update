[
    {
        "content": "<p>Does a lemma like <code>invOf_smul_eq_iff_eq_smul</code> below already exist in Mathlib4? I looked expecting to find something like it, but failed.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Invertible.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">invOf_smul_self_smul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">smul_assoc</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">invOf_mul_self'</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- c.f. mul_invOf_self_assoc</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">smul_invOf_self_assoc</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⅟</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">smul_assoc</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_invOf_self</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- c.f. mul_left_inj_of_invertible</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">smul_inj_of_invertible</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">⅟</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">)⟩</span>\n\n<span class=\"c1\">-- c.f. invOf_mul_eq_iff_eq_mul_left</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">invOf_smul_eq_iff_eq_smul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">⅟</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">smul_inj_of_invertible</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">smul_invOf_self_assoc</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Thanks!</p>\n<p>Christopher</p>",
        "id": 417529406,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1706044377
    },
    {
        "content": "<p>We certainly have them for <code>r : Rˣ</code> which is the more canonical spelling. Is there a reason in particular you are opting for <code>Invertible r</code>?</p>",
        "id": 417529639,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706044458
    },
    {
        "content": "<p><code>[Invertible (2 : R)] </code> is the formulation in the file I was working on:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/LinearAlgebra/QuadraticForm/Basic.lean#L986\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/LinearAlgebra/QuadraticForm/Basic.lean#L986</a></p>",
        "id": 417530200,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1706044665
    },
    {
        "content": "<p>in that case I would lift <code>2</code> to <code>Rˣ</code>.</p>",
        "id": 417530335,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706044718
    },
    {
        "content": "<p>We probably don't want the third one, because:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">smul_inj_of_invertible</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IsUnit.smul_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">isUnit_of_invertible</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 417530367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706044729
    },
    {
        "content": "<p>I think all the ones about <code>invOf</code> are worth having</p>",
        "id": 417530424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706044752
    },
    {
        "content": "<p>Then you have access to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=inv_smul_smul#doc\">docs#inv_smul_smul</a> and all the declarations around there.</p>",
        "id": 417530436,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706044758
    },
    {
        "content": "<p>Though there should be a one-lemma proof in terms of the<code>Units</code> spelling</p>",
        "id": 417530485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706044787
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">invOf_smul_smul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inv_smul_smul</span> <span class=\"o\">(</span><span class=\"n\">unitOfInvertible</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">smul_invOf_smul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⅟</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">smul_inv_smul</span> <span class=\"o\">(</span><span class=\"n\">unitOfInvertible</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">invOf_smul_eq_iff</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">⅟</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inv_smul_eq_iff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">unitOfInvertible</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 417530869,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706044925
    },
    {
        "content": "<p><del>do we not have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=smul_inv_smul#doc\">docs#smul_inv_smul</a> ?</del></p>",
        "id": 417530894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706044937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/smul.20by.20invertible.20element.2E/near/417530335\">said</a>:</p>\n<blockquote>\n<p>in that case I would lift <code>2</code> to <code>Rˣ</code>.</p>\n</blockquote>\n<p>Mathlib sees <code>R</code> as an additive monoid, but does it also see it as a multiplicative monoid?</p>",
        "id": 417531940,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1706045317
    },
    {
        "content": "<p>Sure, it's a <code>Semiring</code>.</p>",
        "id": 417532271,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706045450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/smul.20by.20invertible.20element.2E/near/417532271\">said</a>:</p>\n<blockquote>\n<p>Sure, it's a <code>Semiring</code>.</p>\n</blockquote>\n<p>I was trying <code>variable [IsUnit (2 : R)]</code>instead of <code>[Invertible r]</code>  - but I must be barking up the wrong tree.</p>",
        "id": 417532359,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1706045485
    },
    {
        "content": "<p>You can do <code>#synth Monoid R</code> (<code>variable {R: Type*} [Semiring R]</code> in scope) to check.</p>",
        "id": 417532398,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706045504
    },
    {
        "content": "<p>Note: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsUnit#doc\">docs#IsUnit</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units#doc\">docs#Units</a> are not the same thing (although they're closely related).</p>",
        "id": 417532518,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706045533
    },
    {
        "content": "<p>I'm not necessarily saying you should replace your <code>[Invertible (2 : R)]</code> hypotheses, just that in the proofs you can upgrade to <code>Rˣ</code> (as Eric has shown above) to get access to the fact that you have a group action.</p>",
        "id": 417532647,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706045599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/smul.20by.20invertible.20element.2E/near/417530869\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">invOf_smul_smul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inv_smul_smul</span> <span class=\"o\">(</span><span class=\"n\">unitOfInvertible</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">smul_invOf_smul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⅟</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">smul_inv_smul</span> <span class=\"o\">(</span><span class=\"n\">unitOfInvertible</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">invOf_smul_eq_iff</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">⅟</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inv_smul_eq_iff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">unitOfInvertible</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Would a PR adding these results into <code>Algebra/Module/Basic</code> be a worthwhile thing?</p>",
        "id": 417534280,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1706046302
    },
    {
        "content": "<p>These should be stated about monoid actions not modules</p>",
        "id": 417535946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706046999
    },
    {
        "content": "<p>Those lemmas probably belong next to the group lemmas</p>",
        "id": 417535970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706047010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/smul.20by.20invertible.20element.2E/near/417535946\">said</a>:</p>\n<blockquote>\n<p>These should be stated about monoid actions not modules</p>\n</blockquote>\n<p>Do you mean in <code>GroupTheory/GroupAction/Group</code>?</p>",
        "id": 417538416,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1706047992
    },
    {
        "content": "<p>That sounds good to me</p>",
        "id": 417545476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706051535
    },
    {
        "content": "<p>There may be other lemmas you can duplicate for <code>invOf</code> in the same file</p>",
        "id": 417545489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706051543
    },
    {
        "content": "<p>How about this: <a href=\"https://github.com/leanprover-community/mathlib4/pull/9972\">https://github.com/leanprover-community/mathlib4/pull/9972</a> ?</p>",
        "id": 417962997,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1706130099
    },
    {
        "content": "<p>Your new instance looks like it duplicates <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units.instMulAction#doc\">docs#Units.instMulAction</a></p>",
        "id": 417983341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706140193
    }
]