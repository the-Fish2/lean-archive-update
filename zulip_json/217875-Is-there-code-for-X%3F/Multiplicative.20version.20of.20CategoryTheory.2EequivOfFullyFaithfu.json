[
    {
        "content": "<p>Is there a multiplicative version of <code>CategoryTheory.equivOfFullyFaithful</code>? I.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Functor</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equivMulOfFullyFaithful</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Full</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Faithful</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">End</span> <span class=\"n\">X</span> <span class=\"bp\">≃*</span> <span class=\"n\">End</span> <span class=\"o\">(</span><span class=\"n\">F.obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">MulEquiv.mk'</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">equivOfFullyFaithful_apply</span><span class=\"o\">,</span> <span class=\"n\">equivOfFullyFaithful_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">equivOfFullyFaithful_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">End.mul_def</span><span class=\"o\">,</span> <span class=\"n\">map_comp</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This is essentially the equivalence version of <code>CategoryTheory.Functor.mapEnd</code>. Same question for <code>Aut</code>.</p>",
        "id": 411813273,
        "sender_full_name": "Christian Merten",
        "timestamp": 1704746756
    },
    {
        "content": "<p>loogle doesn't find any: <span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> CategoryTheory.Full, MulEquiv</p>",
        "id": 411828817,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704753618
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 411828818,
        "sender_full_name": "loogle",
        "timestamp": 1704753618
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mulEquivOfFullyFaithful</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Full</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Faithful</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">End</span> <span class=\"n\">X</span> <span class=\"bp\">≃*</span> <span class=\"n\">End</span> <span class=\"o\">(</span><span class=\"n\">F.obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toEquiv</span> <span class=\"o\">:=</span> <span class=\"n\">equivOfFullyFaithful</span> <span class=\"n\">F</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">mapEnd</span> <span class=\"n\">X</span> <span class=\"n\">F</span>\n</code></pre></div>",
        "id": 411829286,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704753849
    },
    {
        "content": "<p>I added <code>@[simps!]</code> (<code>!</code> because lean complained about <code>@[simps]</code> alone). How do I see which simp lemmas are generated?</p>",
        "id": 411830103,
        "sender_full_name": "Christian Merten",
        "timestamp": 1704754312
    },
    {
        "content": "<p>You can write <code>whatsnew in</code> before your declaration, or perhaps append a <code>?</code> after <code>simps!</code> (not sure if this works)</p>",
        "id": 411830270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704754420
    },
    {
        "content": "<p>Adding <code>?</code> worked. Thanks! <code>@[simps!?]</code> looks quite funny.</p>",
        "id": 411830369,
        "sender_full_name": "Christian Merten",
        "timestamp": 1704754457
    },
    {
        "content": "<p>Even <code>@[simps?!]</code> works :D</p>",
        "id": 411830433,
        "sender_full_name": "Christian Merten",
        "timestamp": 1704754494
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9566\">#9566</a></p>",
        "id": 411831116,
        "sender_full_name": "Christian Merten",
        "timestamp": 1704754852
    }
]