[
    {
        "content": "<p>If <code>[Field K] [Field L] [Algebra K L]</code>, do we have a typeclass for \"L is algebraic over K\"? We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.IsAlgebraic#doc\">docs#Algebra.IsAlgebraic</a>, but </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Algebra.IsAlgebraic</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">cannot find synthesization order for instance Algebra.IsAlgebraic with type</span>\n<span class=\"cm\">  (R : Type u) → (A : Type v) → [inst : CommRing R] → [inst_1 : Ring A] → [inst : Algebra R A] → Prop</span>\n<span class=\"cm\">all remaining arguments have metavariables:</span>\n<span class=\"cm\">  CommRing ?R</span>\n<span class=\"cm\">  Ring ?A</span>\n<span class=\"cm\">  @Algebra ?R ?A CommRing.toCommSemiring Ring.toSemiring</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 437546938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715123295
    },
    {
        "content": "<p>Ha! We should probably refactor mathlib. Idem dito for <code>Algebra.IsIntegral</code></p>",
        "id": 437571110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715140131
    },
    {
        "content": "<p>I think you mean <code>attribute [class] Algebra.IsAlgebraic</code> not <code>instance</code>. I was very puzzled about the error for a moment :)</p>",
        "id": 437603510,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1715157209
    },
    {
        "content": "<p>Let me see if I can quickly turn <code>IsIntegral</code> and <code>IsAlgebraic</code> into a class.</p>",
        "id": 437604516,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1715157584
    },
    {
        "content": "<p>Should we redefine <code>Algebra.IsAlgebraic</code> as <code>Subalgebra.IsAlgebraic \\top</code> to match <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monoid.FG#doc\">docs#Monoid.FG</a> etc?</p>",
        "id": 437618464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715162782
    },
    {
        "content": "<p>(the other way around seems fine too, but consistency seems valuable here)</p>",
        "id": 437618653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715162858
    },
    {
        "content": "<p>Hmm, I thought the new synthesis algorithm could avoid loops...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">FiniteDimensional.finiteDimensional_self</span> <span class=\"n\">to</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">of</span> <span class=\"n\">Algebra.FiniteType</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Algebra.FiniteType</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Algebra.FiniteType</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">of</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">of</span> <span class=\"n\">Algebra.FiniteType</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">Algebra.FiniteType</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Algebra.FiniteType</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">of</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">of</span> <span class=\"n\">Algebra.FiniteType</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">Algebra.FiniteType</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Algebra.FiniteType</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">of</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span>\n          <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">of</span> <span class=\"n\">Algebra.FiniteType</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span>\n          <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">Algebra.FiniteType</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Algebra.FiniteType</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">of</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span>\n          <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">of</span> <span class=\"n\">Algebra.FiniteType</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span>\n          <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">Algebra.FiniteType</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Algebra.FiniteType</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">of</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span>\n          <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span>\n              <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">of</span> <span class=\"n\">Algebra.FiniteType</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"mi\">501</span> <span class=\"n\">more</span> <span class=\"n\">entries...</span> <span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 437620606,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1715163690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Typeclass.20for.20algebraic.20extension.20of.20fields.3F/near/437618464\">said</a>:</p>\n<blockquote>\n<p>Should we redefine <code>Algebra.IsAlgebraic</code> as <code>Subalgebra.IsAlgebraic \\top</code> to match <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monoid.FG#doc\">docs#Monoid.FG</a> etc?</p>\n</blockquote>\n<p>Hopefully we can do this somewhat more easily after changing it into a class, since it's no longer equal to <code>∀ x, IsAlgebraic R x</code> by definition.</p>",
        "id": 437620746,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1715163739
    },
    {
        "content": "<p>Oh right, <code>Algebra.IsAlgebraic.isIntegral</code> has type <code>Algebra.IsAlgebraic K A → Algebra.IsIntegral K A</code>, not <code>∀ [Algebra.IsAlgebraic K A], Algebra.IsIntegral K A</code> and the system doesn't quite support implications correctly.</p>",
        "id": 437621078,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1715163883
    },
    {
        "content": "<p>Should <code>alias</code> turn arguments that have the type of a class into instance implicits?</p>",
        "id": 437621423,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1715164028
    },
    {
        "content": "<p>Finally done fixing everything! <a href=\"https://github.com/leanprover-community/mathlib4/pull/12761\">#12761</a></p>",
        "id": 437662271,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1715178239
    },
    {
        "content": "<p>Merged! Thanks so much Anne!</p>",
        "id": 439092136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715889747
    }
]