[
    {
        "content": "<p>I've encountered a scenario where I've got quite a lot of proofs by cases with contexts which contain</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p</span>\n<span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span>\n</code></pre></div>\n<p>I want to quickly dispatch with these trivially false cases, but I've been surprised to find that none of the standard tactics I'm trying deal with this - not even aesop.</p>\n<p>Of course I can write a little lemma which makes this quite efficient, but when I see something trivial like this that's not being dealt with I start to get suspicious that I'm missing a trick.</p>\n<p>How would an experienced user deal with this? Is there a tactic that will handle this automatically? What about for slightly less straightforward contradictions?</p>",
        "id": 424666288,
        "sender_full_name": "Sam",
        "timestamp": 1709562245
    },
    {
        "content": "<p>does <code>simp [h_1] at h_2</code> work?</p>",
        "id": 424667010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709562445
    },
    {
        "content": "<p>Ooh, I guess it'll need the <code>contextual</code> flag</p>",
        "id": 424667187,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709562476
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n</code></pre></div>",
        "id": 424668103,
        "sender_full_name": "Chris Wong",
        "timestamp": 1709562717
    },
    {
        "content": "<p>That <code>simp</code> gives <code>h_2</code> as <code>(∃ x, x ∈ b) ∧ ¬p</code>. That might be useful on the path to proving it, but what I was really hoping for was for something like <code>contradiction</code> to go ahead and close the whole subgoal immediately.</p>",
        "id": 424668116,
        "sender_full_name": "Sam",
        "timestamp": 1709562721
    },
    {
        "content": "<p>Oh wow yeah, <code>tauto</code> does it! This is going to sound stupid (because it is) but for some reason I've gone all this time believing <code>tauto</code> didn't exist in Lean 4 anymore... Whoops!</p>",
        "id": 424668563,
        "sender_full_name": "Sam",
        "timestamp": 1709562838
    },
    {
        "content": "<p>Brilliant - thanks <span class=\"user-mention\" data-user-id=\"294142\">@Chris Wong</span>! I'm glad I posted this because I definitely was missing a trick!</p>",
        "id": 424668887,
        "sender_full_name": "Sam",
        "timestamp": 1709562921
    },
    {
        "content": "<p>I have a lot of theorems I need to tidy up with tauto now...</p>",
        "id": 424669019,
        "sender_full_name": "Sam",
        "timestamp": 1709562955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"428422\">Sam</span> has marked this topic as resolved.</p>",
        "id": 424669067,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709562962
    },
    {
        "content": "<p>Does <code>hint</code> solve it?</p>",
        "id": 424734116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709581153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Quickly.20dealing.20with.20contradictory.20forall.20and.20exists/near/424734116\">said</a>:</p>\n<blockquote>\n<p>Does <code>hint</code> solve it?</p>\n</blockquote>\n<p>No - I've never seen <code>hint</code> suggest <code>tauto</code> on the things I've been working on.</p>",
        "id": 424734283,
        "sender_full_name": "Sam",
        "timestamp": 1709581206
    },
    {
        "content": "<p>All I know is that <code>hint</code> tries a random collection of tactics and there is still some discussion to be had about which tactics it should be trying. Your situation is an argument for saying that <code>tauto</code> should be added.</p>",
        "id": 424734479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709581310
    },
    {
        "content": "<p>Yeah that makes sense. Perhaps one solution would be to introduce a <code>hint!</code> variant that's more aggressive and uses a larger list at the expense of longer running time. That would be useful in situations like mine where the user isn't necessarily experienced enough to have all of the useful tactics memorised, and where <code>hint</code> is a very useful learning/discovery tool.</p>",
        "id": 424735005,
        "sender_full_name": "Sam",
        "timestamp": 1709581521
    },
    {
        "content": "<p>(I have no idea if appending exclamation marks is still a naming convention for stronger tactic variants in Lean 4 - I'm just going off of how <code>library_search!</code> used to be.)</p>",
        "id": 424735451,
        "sender_full_name": "Sam",
        "timestamp": 1709581690
    },
    {
        "content": "<p>(Yes, it is!)</p>",
        "id": 424736485,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709582105
    },
    {
        "content": "<p>Registering a new hint tactic is just <code>register_hint_tactic tauto</code>. I like the idea of <code>hint!</code> if anyone wants to implement.</p>",
        "id": 424784908,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709607229
    },
    {
        "content": "<p>You'd just have to duplicate <code>register_hint_tactic</code> to add also <code>register_hint!_tactic</code>.</p>",
        "id": 424784961,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709607251
    },
    {
        "content": "<p>But just registering <code>tauto</code> in the meantime is probably fine.</p>",
        "id": 424784973,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709607262
    },
    {
        "content": "<p>Ah thanks for pointing out how easy it is to add <code>hint</code> tactics - I've added <code>tauto</code> locally for now and might throw a few more on there too.</p>\n<p>I've also just been having a glance at <code>hint</code>'s source, and there's this note:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">If</span> <span class=\"n\">one</span> <span class=\"n\">tactic</span> <span class=\"n\">succeeds</span> <span class=\"n\">and</span> <span class=\"n\">closes</span> <span class=\"n\">the</span> <span class=\"n\">goal</span><span class=\"o\">,</span> <span class=\"n\">we</span> <span class=\"n\">don't</span> <span class=\"n\">look</span> <span class=\"n\">at</span> <span class=\"n\">subsequent</span> <span class=\"n\">tactics.</span>\n</code></pre></div>\n<p>I reckon a stronger <code>hint!</code> variant should keep going and try them all. If I'm using it as a learning tool, I want to know all of the ways that might work, not just the first one in the list.</p>",
        "id": 424799288,
        "sender_full_name": "Sam",
        "timestamp": 1709617075
    },
    {
        "content": "<p>Or maybe that should be true for basic <code>hint</code> too, but I assume that current behaviour was added for good reason.</p>",
        "id": 424799366,
        "sender_full_name": "Sam",
        "timestamp": 1709617118
    }
]