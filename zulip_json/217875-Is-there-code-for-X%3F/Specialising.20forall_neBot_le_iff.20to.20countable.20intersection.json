[
    {
        "content": "<p>Hi, is there a way to specialise the result Ultrafilter.forall_neBot_le_iff (<a href=\"https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Mathlib/Order/Filter/Ultrafilter.lean#L473-L477\">https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Mathlib/Order/Filter/Ultrafilter.lean#L473-L477</a>) to require only the Countable Intersection property? See the below MWE for my approach; I have one step that I cannot manage to fill in because I'm not sure how to deal with the coercions here (my experience with these is (severely) lacking; I did the math and thought the result should be correct, but it could be I'm missing some small condition? </p>\n<p>The relevance is in my PR for Lindelöf spaces: <a href=\"https://github.com/leanprover-community/mathlib4/pull/9107\">#9107</a>. I'm trying to also get an ultrafilter characterisation for Lindelöf spaces, and figured that this result would be an important step for that. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Countable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.CountableInter</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Compactness.Compact</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Ultrafilter.countable_intersection_forall_neBot_le_iff</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">CountableInterFilter</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">NeBot</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Ultrafilter</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">CountableInterFilter</span> <span class=\"n\">f.toFilter</span> <span class=\"bp\">→</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">hf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">f.neBot</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">assumption</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">hf</span> <span class=\"n\">hfg</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Ultrafilter.of_le</span> <span class=\"n\">f</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">H</span>\n    <span class=\"n\">refine</span> <span class=\"o\">{</span> <span class=\"n\">countable_sInter_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">countable_sInter_mem</span> <span class=\"o\">}</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">a.countable_sInter_mem</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">Ultrafilter.of_le</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hfg</span>\n</code></pre></div>",
        "id": 409457323,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1703189116
    },
    {
        "content": "<p>Is there a version of <code>Ultrafilter.exists_le</code> for filters with countable intersections?</p>",
        "id": 410861199,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704208697
    },
    {
        "content": "<p>I'm not aware of this. I originally thought that I needed this to get some of the results in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9107\">#9107</a> working, but I have bypassed the result in some of the more important usages by directly proving the required results.</p>",
        "id": 410862259,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704209081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Specialising.20forall_neBot_le_iff.20to.20countable.20intersection/near/409457323\">said</a>:</p>\n<blockquote>\n<p>I'm trying to also get an ultrafilter characterisation for Lindelöf spaces, and figured that this result would be an important step for that. </p>\n</blockquote>\n<p>I'm trying to understand the statement of your theorem, does it mention <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>-complete ultrafilters on a set? The existence of non-principal ones requires large cardinals (perhaps you are well-aware of this).</p>",
        "id": 410863073,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1704209423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327749\">Pedro Sánchez Terraf</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Specialising.20forall_neBot_le_iff.20to.20countable.20intersection/near/410863073\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Specialising.20forall_neBot_le_iff.20to.20countable.20intersection/near/409457323\">said</a>:</p>\n<blockquote>\n<p>I'm trying to also get an ultrafilter characterisation for Lindelöf spaces, and figured that this result would be an important step for that. </p>\n</blockquote>\n<p>I'm trying to understand the statement of your theorem, does it mention <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>-complete ultrafilters on a set? The existence of non-principal ones requires large cardinals (perhaps you are well-aware of this).</p>\n</blockquote>\n<p>The theorem as written was more of a <code>hopeful guess</code>: I thought the result was correct when I sketched the proof, but I couldn't find any reference for it. I couldn't close the above argument, so I thought something was missing/I was missing some insight. You are right that it does not mention sigma-complete ultrafilters, I didn't think of including these. I'm not too strong with ultrafilters anyway, so perhaps I should leave that aspect open (especially as I couldn't find an ultrafilter characterisation of Lindelöf spaces online...)</p>",
        "id": 410863776,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704209763
    }
]