[
    {
        "content": "<p>Does something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instNameHere</span> <span class=\"o\">[</span><span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DistribSMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">where</span> <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"n\">mul_add</span>\n</code></pre></div>\n<p>cause any problems? <br>\nIf it's okay, is there a good place to put it?  <code>#find_home</code> only suggested the file I was working on.</p>",
        "id": 419160866,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1706754823
    },
    {
        "content": "<p>You could try <code>#find_home!</code> for a possibly better suggestion.</p>",
        "id": 419179652,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706767314
    },
    {
        "content": "<p>(I am not sure about the other questions that you asked.)</p>",
        "id": 419179710,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706767334
    },
    {
        "content": "<p>That instance looks fine to me</p>",
        "id": 419189288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706773554
    },
    {
        "content": "<p>Can there ever be any problems with Prop instances? And yes, find_home currently doesn't work with things that create auxiliary declarations in the background</p>",
        "id": 419207407,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706780302
    },
    {
        "content": "<p>This is not a Prop-valued instance, though</p>",
        "id": 419223357,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1706785879
    },
    {
        "content": "<p>Ah, I forget it's <em>not</em> a mixin</p>",
        "id": 419225799,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706786714
    },
    {
        "content": "<p>Are you sure about <code>find_home</code>?  I thought that I fixed that with the <code>#find_home!</code> syntax...</p>",
        "id": 419253650,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706796544
    },
    {
        "content": "<p>I wasn't aware of <code>find_home!</code></p>",
        "id": 419255247,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706797023
    },
    {
        "content": "<p><code>#find_home!</code> worked!</p>",
        "id": 419255607,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1706797121
    },
    {
        "content": "<p>Answer: <code>Mathlib.Algebra.SMulWithZero</code></p>",
        "id": 419255759,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1706797171
    },
    {
        "content": "<p>Great!  What <code>find_home!</code> should do is to compute the same sup of the imports, but removing the current file from the set of imports before the sup step.  The sup could still be the current file, but in that case it should be meaningful!</p>",
        "id": 419256471,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706797323
    },
    {
        "content": "<p>It's a bit surprising, since neither <code>NonUnitalNonAssocSemiring</code> nor <code>DistribSMul</code> appear in the file.  I guess the <code>Mathlib.Algebra.Ring.Opposite</code> import brings in the ring theory.</p>",
        "id": 419257811,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1706797664
    },
    {
        "content": "<p>It is also possible that there are other bugs in <code>find_home</code>...</p>",
        "id": 419258163,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706797771
    },
    {
        "content": "<p>Thanks for your input!<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/10162\">#10162</a></p>",
        "id": 419279354,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1706803636
    },
    {
        "content": "<p>I took the liberty of adding an extra white line to separate the text and the <code>---</code> from the PR description, for what I think is the intended formatting!</p>",
        "id": 419281213,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706804119
    },
    {
        "content": "<p>Thank you!  I was wondering how to get rid of the boldface type.</p>",
        "id": 419281686,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1706804235
    },
    {
        "content": "<p>I think that it is a markdown \"feature\": text around <code>---</code> is subject to be interpreted as a header.</p>",
        "id": 419282568,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706804462
    }
]