[
    {
        "content": "<p>Is there a version of <code>fold</code> for sigma types, where the type can change each step of the fold? I think the type signature would be something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">sigma_fold</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">)</span>  <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"n\">i0</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Sigma</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>.... or something, I don't know exactly what I'm expecting.... Maybe it can be accomplished with a regular <code>fold</code>, I need to think more</p>",
        "id": 417504590,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706034602
    },
    {
        "content": "<p>Please provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with a <code>sorry</code>.</p>",
        "id": 417520453,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706040667
    },
    {
        "content": "<p>E.g., you can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sigma_fold</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">i0</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Sigma</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">x.1</span> <span class=\"n\">y.1</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x.1</span> <span class=\"n\">y.1</span> <span class=\"n\">x.2</span> <span class=\"n\">y.2</span><span class=\"o\">⟩)</span> <span class=\"o\">⟨</span><span class=\"n\">i0</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 417520855,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706040829
    },
    {
        "content": "<p>BTW, you can use different index types for <code>α</code> and <code>β</code>.</p>",
        "id": 417520925,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706040845
    },
    {
        "content": "<p>Or even just <code>l.foldl (fun x y =&gt; ⟨_, g _ _ x.2 y.2⟩) ⟨_, a⟩</code></p>",
        "id": 417551369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706054831
    },
    {
        "content": "<p>Ahh yes. Alright, so I guess it's all properly 'captured' by the Sigma type then. Mmm. Thanks!</p>",
        "id": 417551604,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706054958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> has marked this topic as resolved.</p>",
        "id": 417551609,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706054960
    }
]