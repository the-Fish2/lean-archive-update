[
    {
        "content": "<p>Do we have the following instances in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.UniformSpace.Pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.PiL2</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OrderedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OrderedSMul</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>More generally, how does one do linear algebra with <code>EuclideanSpace</code>? I cannot work with <code>n → ℝ</code> as I need an inner product space structure.</p>",
        "id": 410447632,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1703866165
    },
    {
        "content": "<p>I don't think we have them but they are easy to prove. The correct way to prove them is by adding instances of the form <code>OrderedAddCommGroup α → OrderedAddCommGroup (WithLp α)</code>.</p>",
        "id": 410448135,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703866435
    },
    {
        "content": "<p>Thanks! I'll try these out.</p>",
        "id": 410448281,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1703866486
    },
    {
        "content": "<p>Do I need to worry about compatibility of these structures with <code>n → ℝ</code>?</p>",
        "id": 410448483,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1703866587
    },
    {
        "content": "<p>We surely have the module instance</p>",
        "id": 410448722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703866730
    },
    {
        "content": "<p>It's not immediately obvious to me if inheriting the order is the right thing to do  morally (though certainly it won't cause any diamonds so far)</p>",
        "id": 410448955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703866848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> might have an opinion</p>",
        "id": 410449051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703866908
    },
    {
        "content": "<p>It's not clear to me what you want to do with the order (or even how you would define it), mathematically. Can you explain a little bit the context?</p>",
        "id": 410450447,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1703867770
    },
    {
        "content": "<p>Get it from the pi type?</p>",
        "id": 410455470,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703870459
    },
    {
        "content": "<p>Yes, I think the proposal is to keep the \"box\" ordering that the pi type has, which feels slightly odd given we throw out the box metric</p>",
        "id": 410460299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703872460
    },
    {
        "content": "<p>Note that most (all?) other instances for <code>EuclideanSpace</code> are invariant under rotations.</p>",
        "id": 410461195,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703872830
    },
    {
        "content": "<p>I need to use this theorem <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ConvexCone.hyperplane_separation_of_nonempty_of_isClosed_of_nmem#doc\">docs#ConvexCone.hyperplane_separation_of_nonempty_of_isClosed_of_nmem</a> which is stated for inner product spaces and also need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ConvexCone.positive#doc\">docs#ConvexCone.positive</a> which requires an order.</p>",
        "id": 410464352,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1703875009
    },
    {
        "content": "<p><del>I could just add a version of the theorem about vectors explicitly and forget about <code>EuclideanSpace</code></del></p>",
        "id": 410464438,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1703875077
    },
    {
        "content": "<p>Basically the theorems about convex cones are geometric and are basis independent. But their application to LP requires the standard basis.</p>",
        "id": 410464844,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1703875381
    },
    {
        "content": "<p>You should take the positive cone in the pi space and push it though an isomorphism</p>",
        "id": 410468638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703877428
    },
    {
        "content": "<p>Do we have a version of the hyperplane separation in terms of the dual space instead of the inner product?</p>",
        "id": 410469318,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703877796
    },
    {
        "content": "<p>I don't think so. In fact, the dual cone isn't even defined in the dual space but is only defined internally: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.innerDualCone#doc\">docs#Set.innerDualCone</a></p>",
        "id": 410471459,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1703879047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Algebra.20instances.20on.20EuclideanSpace/near/410448722\">said</a>:</p>\n<blockquote>\n<p>We surely have the module instance</p>\n</blockquote>\n<p>Do you know where this is?</p>",
        "id": 410471654,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1703879180
    },
    {
        "content": "<p>Ah found it <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WithLp.instModule#doc\">docs#WithLp.instModule</a> </p>\n<p>I'll try to use this instance and the positive cone idea. Hopefully this should be enough <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span> <br>\nThanks,</p>",
        "id": 410472320,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1703879693
    },
    {
        "content": "<p><code>infer_instance</code> should have found the instance for you</p>",
        "id": 410479267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703884529
    },
    {
        "content": "<p>Yes indeed it does! I think I failed at the others and didn't try this one at all. Thanks!</p>",
        "id": 410481757,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1703886609
    }
]