[
    {
        "content": "<p>Is there any way to do agda style case splitting? I imported <code>import «Std».CodeAction</code> but the only suggestion for holes is to start a tactics proof.</p>",
        "id": 424168198,
        "sender_full_name": "Solomon",
        "timestamp": 1709275202
    },
    {
        "content": "<p>I don't know what agda style case splitting is...<br>\nIf you <code>import Std</code> you might get more code actions. And if you <code>import Mathlib</code> you might get even more.<br>\nCan you give an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of what you are expecting?</p>",
        "id": 424168812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709275619
    },
    {
        "content": "<p>In Agda if you have a function with a hole in it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>You can press a <code>ctrl-c ctrl-c</code> on the hole and enter the variable name and it will insert a pattern match on the variable. This is incredibly helpful, especially when working with inductive types and sigma types.</p>",
        "id": 424175162,
        "sender_full_name": "Solomon",
        "timestamp": 1709279192
    },
    {
        "content": "<p>That would be great to have. I think we have something similar where you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n</code></pre></div>\n<p>(but not <code>match n with</code>, for whatever reason) and you get a code action to complete it to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>so doing it for function definitions should be possible as well.</p>",
        "id": 424179379,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1709281322
    },
    {
        "content": "<p>At least if the type is a function you can generate the pattern match:</p>\n<p><a href=\"/user_uploads/3121/fhjkUze_FKXwb_DiQp72yS0l/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/fhjkUze_FKXwb_DiQp72yS0l/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/fhjkUze_FKXwb_DiQp72yS0l/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 424179972,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709281591
    },
    {
        "content": "<p>Nice! I need to get better at discovering and using these code actions</p>",
        "id": 424200192,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1709288678
    },
    {
        "content": "<p>It'd be neat if <code>match n</code> would generate a code action too!</p>",
        "id": 424305498,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709318390
    },
    {
        "content": "<p>Yes, every now and then I rediscover it doesn’t and I’m disappointed.</p>",
        "id": 424305666,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709318441
    },
    {
        "content": "<p>This has made me wonder why it is again we need <code>nomatch</code> syntax. Wouldn't <code>match x</code> with no <code>with</code> clause suffice for <code>nomatch x</code>?</p>\n<p>Then <code>match x</code> by itself could suggest a code action with the cases you need to handle, if indeed there are any cases you need to handle.</p>",
        "id": 424306082,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709318620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Agda.20style.20interactive.20case.20splitting.3F/near/424179972\">said</a>:</p>\n<blockquote>\n<p>At least if the type is a function you can generate the pattern match:</p>\n<p><a href=\"/user_uploads/3121/fhjkUze_FKXwb_DiQp72yS0l/image.png\">image.png</a></p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>What do i need to import to get this code action?</p>",
        "id": 424332230,
        "sender_full_name": "Solomon",
        "timestamp": 1709330343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Agda.20style.20interactive.20case.20splitting.3F/near/424305666\">said</a>:</p>\n<blockquote>\n<p>Yes, every now and then I rediscover it doesn’t and I’m disappointed.</p>\n</blockquote>\n<p>Maybe you should report an issue or ping me when these things happen ;)</p>",
        "id": 424390110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709368482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Agda.20style.20interactive.20case.20splitting.3F/near/424306082\">said</a>:</p>\n<blockquote>\n<p>This has made me wonder why it is again we need <code>nomatch</code> syntax. Wouldn't <code>match x</code> with no <code>with</code> clause suffice for <code>nomatch x</code>?</p>\n<p>Then <code>match x</code> by itself could suggest a code action with the cases you need to handle, if indeed there are any cases you need to handle.</p>\n</blockquote>\n<p>I think we should also allow <code>match x</code> <em>with</em> an (empty) <code>with</code>, along the lines of <a href=\"https://github.com/leanprover/lean4/pull/3555\">lean#3555</a></p>",
        "id": 424390387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709368593
    },
    {
        "content": "<p>I don't like that <code>nomatch</code> requires learning a new keyword, it's less discoverable.</p>",
        "id": 424390541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709368658
    },
    {
        "content": "<p>But I guess it's too late now to stop the <code>nofun</code> in 4.7.0-rc1 which is imminent...</p>",
        "id": 424390883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709368753
    },
    {
        "content": "<p>It’s only a release candidate, I'd say it is only fair to listen to feedback from our rc beta testers (i.e. mathlib) :-)</p>\n<p>To me it seems reasonable for <code>match x with</code> to be accepte  instead of <code>nomatch x</code>, but I didn’t follow the discussions around <code>nomatch</code> and <code>nofun</code> fully. OTOH, the <code>nomatch</code> is a nice explicit herald. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 424393882,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1709370243
    },
    {
        "content": "<p>I also wonder if the <code>nofun</code> keyword is necessary if <code>(nomatch \\.)</code> is equivalent (assuming it is)</p>",
        "id": 424395916,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1709372060
    },
    {
        "content": "<p><code>nofun</code> is to <code>fun | a =&gt; _ | b =&gt; _</code> as <code>nomatch x</code> is to <code>match x with | a =&gt; _ | b =&gt; _</code></p>",
        "id": 424396234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709372332
    },
    {
        "content": "<p>It's also not equivalent to that, it's equivalent to <code>(nomatch ., ., .)</code> with the appropriate number of <code>.</code></p>",
        "id": 424396268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709372373
    },
    {
        "content": "<p>that is, the empty argument might not be the first one</p>",
        "id": 424396343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709372421
    },
    {
        "content": "<p>although, having written that, the <code>nomatch a, b</code> form is hella ambiguous and I think it's a good argument for <code>match a, b with</code> working</p>",
        "id": 424396464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709372544
    },
    {
        "content": "<blockquote>\n<p>I didn’t follow the discussions around <code>nomatch</code> and <code>nofun</code> fully</p>\n</blockquote>\n<p>There weren't really any (at least not in public), it was a suggestion and then an implementation. I recall Scott mentioning that he was surprised it was taken seriously</p>",
        "id": 424396617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709372703
    },
    {
        "content": "<p>The implementation is based on <code>fun.</code> and <code>match x with.</code> which I added to std to replace uses of the empty pattern match (<code>match x with end</code> and <code>def foo : empty -&gt; A.</code>) in lean 3</p>",
        "id": 424396717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709372804
    },
    {
        "content": "<p>the dot was there to avoid ambiguity with the lean parser, it would not have been necessary if implemented in core, but then it got absorbed into core</p>",
        "id": 424396820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709372894
    },
    {
        "content": "<p>Although another syntax suggestion that is making the rounds in rust land is the \"never pattern\" <code>!</code>, and some discussion about deprecating <code>match x {}</code> in favor of <code>match x { ! }</code>. Agda uses <code>()</code> as a never pattern but I think that's not an option in either lean or rust because that means the value of the unit type</p>",
        "id": 424397026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709373099
    },
    {
        "content": "<p>The lean version of that might look like <code>fun | !</code></p>",
        "id": 424397179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709373187
    },
    {
        "content": "<p>but on the other hand lean doesn't use <code>!</code> as syntax for the empty type, and adding it as a term would probably make for lots of ambiguity with all the other uses of <code>!</code></p>",
        "id": 424397369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709373294
    }
]