[
    {
        "content": "<p>Let <code>n</code> and <code>m</code> be natural numbers, written as <code>n = ∏ pᵢ^nᵢ</code>and <code>m = ∏ pᵢ^mᵢ</code> (product over the primes). What is the best way of writing the number <code>∏ pᵢ^kᵢ</code>, where <code>kᵢ = nᵢ</code> if <code>nᵢ &lt; mᵢ</code> and <code>0</code> otherwise? I can do by hand, but I feel it's better to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.factorization#doc\">docs#Nat.factorization</a> in a clever way.</p>\n<p>For contest: I am proving that if <code>x</code> and <code>y</code> are commuting elements in a group with <code>orderOf x = n</code> and <code>orderOf y = m</code> then there is an element of order <code>lcm n m</code>: it's possible to give the actual element, but it involves the number above.</p>",
        "id": 424842814,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709636128
    },
    {
        "content": "<p>Re the context: my guess is that you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.xgcd#doc\">docs#Nat.xgcd</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.gcdA#doc\">docs#Nat.gcdA</a> etc to do this without having to factor anything.</p>",
        "id": 424845128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709636921
    },
    {
        "content": "<p>(my instinct is that the element you're after is x^gcdA m n * y^gcdB m n or something like that: note that I didn't check anything here)</p>",
        "id": 424845355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709636983
    },
    {
        "content": "<p>Let me think about that after lunch. The point is writing the lcm as the product of a divisor of <code>m</code> and a divisor of <code>n</code>, but the two divisors must be coprime.</p>",
        "id": 424847319,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709637688
    },
    {
        "content": "<p>I don't see how to make something like this work: the only case where we can compute the order of the product is when the orders are coprime, so I have the impression bezout is useless here.</p>",
        "id": 424851482,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709639304
    },
    {
        "content": "<p>I think we don't have a function</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">minL</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">m</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 424852851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709639827
    },
    {
        "content": "<p>Otherwise you could map that over the exponents</p>",
        "id": 424852906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709639853
    },
    {
        "content": "<p>Yeah, I guess that doing it by hand is not that bad.</p>",
        "id": 424854957,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709640598
    },
    {
        "content": "<p>My instinct is still very much that one doesn't ever need to factorise anything and that your suggested approach is going to be more painful than a direct approach. </p>\n<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> are the LCM and GCD of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo separator=\"true\">,</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m,n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>:</mo><mo>=</mo><msup><mi>x</mi><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>G</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x&#x27;:=x^{n/G}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.888em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\">G</span></span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>:</mo><mo>=</mo><msup><mi>y</mi><mrow><mi>m</mi><mi mathvariant=\"normal\">/</mi><mi>G</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">y&#x27;:=y^{m/G}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0824em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\">G</span></span></span></span></span></span></span></span></span></span></span></span> both have order <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>=</mo><msup><mi>x</mi><mrow><mo mathvariant=\"normal\">′</mo><mi>u</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">y&#x27;=x&#x27;^u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mathnormal mtight\">u</span></span></span></span></span></span></span></span></span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> coprime to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>. Then something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>u</mi></msup><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x^uy</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">u</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> should work? Even if I've got the details wrong (which I could well have, I'm in a bit of a rush), something like this seems to me to be a far less painful approach than factoring anything.</p>",
        "id": 424856433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709641184
    },
    {
        "content": "<p>Each prime gives you forbidden congruences for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>: if the exponent of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> is greater than that of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> should not divide <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>, if it's  equal, one value is forbidden mod <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> to the exponent, otherwise it's ok. How can you get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> that satisfies all of these without factoring?</p>",
        "id": 424858757,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709642064
    },
    {
        "content": "<p>Maybe one can avoid using factorizations explicitly by going via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=induction_on_primes#doc\">docs#induction_on_primes</a> ?<br>\n(Just a vague idea; I didn't actually try it.)</p>",
        "id": 424859423,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709642320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Keeping.20only.20the.20primes.20with.20smaller.20valuation/near/424856433\">said</a>:</p>\n<blockquote>\n<p>My instinct is still very much that one doesn't ever need to factorise anything and that your suggested approach is going to be more painful than a direct approach. </p>\n<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> are the LCM and GCD of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo separator=\"true\">,</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m,n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>:</mo><mo>=</mo><msup><mi>x</mi><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>G</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x&#x27;:=x^{n/G}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.888em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\">G</span></span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>:</mo><mo>=</mo><msup><mi>y</mi><mrow><mi>m</mi><mi mathvariant=\"normal\">/</mi><mi>G</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">y&#x27;:=y^{m/G}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0824em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\">G</span></span></span></span></span></span></span></span></span></span></span></span> both have order <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>=</mo><msup><mi>x</mi><mrow><mo mathvariant=\"normal\">′</mo><mi>u</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">y&#x27;=x&#x27;^u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mathnormal mtight\">u</span></span></span></span></span></span></span></span></span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> coprime to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>. Then something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>u</mi></msup><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x^uy</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">u</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> should work? Even if I've got the details wrong (which I could well have, I'm in a bit of a rush), something like this seems to me to be a far less painful approach than factoring anything.</p>\n</blockquote>\n<p>...both have order <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>=</mo><msup><mi>x</mi><mrow><mo mathvariant=\"normal\">′</mo><mi>u</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">y&#x27;=x&#x27;^u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mathnormal mtight\">u</span></span></span></span></span></span></span></span></span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> coprime to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>. How can you find a relation between <code>x</code> and <code>y</code>? Note that I am not in a cyclic group (where the proof would be easier).</p>",
        "id": 424861526,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709642988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Keeping.20only.20the.20primes.20with.20smaller.20valuation/near/424859423\">said</a>:</p>\n<blockquote>\n<p>Maybe one can avoid using factorizations explicitly by going via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=induction_on_primes#doc\">docs#induction_on_primes</a> ?<br>\n(Just a vague idea; I didn't actually try it.)</p>\n</blockquote>\n<p>It can be useful, but only to prove the existence, and I would like to give the precise element.</p>\n<p>I guess I will go with the factorization, let's see how painful it is.</p>",
        "id": 424863788,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709643657
    },
    {
        "content": "<p>Well, it's quite painful <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 424896356,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709652965
    },
    {
        "content": "<p>I am not sure what induction principle to use to define the function, it seems we don't have any way of producing a function <code>ℕ → ℕ → ℕ</code> using some induction related to the factorization</p>",
        "id": 424896693,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709653050
    },
    {
        "content": "<p>Aah I was only thinking about the cyclic case! I was imagining that this was a question coming from my comment on your PR about roots of unity, and I had assumed we were in a cyclic group, but I see now that you don't need cyclicity for the result.</p>",
        "id": 424900096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709654020
    },
    {
        "content": "<p>Yes, it comes from that PR, but since I am at this I would like to do the general case</p>",
        "id": 424900203,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709654044
    },
    {
        "content": "<p>Yeah then I retract my comments about it all being Bezout in disguise. Sorry for the noise!</p>",
        "id": 424900430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709654112
    },
    {
        "content": "<p>This may be easier: for each prime pᵢ you can get an element of order pᵢ^max nᵢ mᵢ; it will be a power of x or a power of y depending on whether nᵢ or mᵢ is larger. If you take the product over all primes you get an element with desired order <code>lcm n m</code> (should be easy to prove by induction). (You'd also need to prove commutativity by induction, but that seems manageable.)</p>",
        "id": 424902269,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709654448
    },
    {
        "content": "<p>Yes, this can work. But now I am a little angry against Lean that I am not able to do the other approach, that is very direct mathematically, so I would really like to make it work...</p>",
        "id": 424903257,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709654676
    },
    {
        "content": "<p>Hmm it doesn't actually work because <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp.prod#doc\">docs#Finsupp.prod</a> requires CommMonoid ... we'd need an analogue of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Multiset.noncommProd#doc\">docs#Multiset.noncommProd</a> or use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.prod#doc\">docs#List.prod</a>.</p>",
        "id": 424906035,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709655337
    },
    {
        "content": "<p>I really think this should not be hard:<br>\ngiven <code>a b : ℕ</code>, write <code>Nat.lcm a b = m * n</code> where:</p>\n<ul>\n<li><code>m ∣ a</code></li>\n<li><code>n ∣ b</code></li>\n<li><code>m</code> and <code>n</code> are coprime.</li>\n</ul>",
        "id": 424907330,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709655687
    },
    {
        "content": "<p>We even have an explicit formula:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fst_big</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">a.primeFactors.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">snd_big</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">b.primeFactors.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fst_big</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">snd_big</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.lcm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">hb</span>\n  <span class=\"n\">refine</span> <span class=\"n\">recOnPosPrimePosCoprime</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">hp</span> <span class=\"n\">hn</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">b</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">recOnPosPrimePosCoprime</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"n\">m</span> <span class=\"n\">hq</span> <span class=\"n\">hm</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">a</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span>\n    <span class=\"bp\">·</span> <span class=\"n\">subst</span> <span class=\"n\">hpq</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hnm</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span>\n      <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Nat.lcm</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">pow_dvd_pow</span> <span class=\"n\">p</span> <span class=\"n\">hnm</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">Nat.lcm_mul_left</span><span class=\"o\">]</span>\n          <span class=\"n\">simp</span>\n        <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">fst_big</span><span class=\"o\">,</span> <span class=\"n\">primeFactors_prime_pow</span> <span class=\"n\">hm.ne'</span><span class=\"o\">,</span> <span class=\"n\">snd_big</span><span class=\"o\">,</span> <span class=\"n\">primeFactors_prime_pow</span> <span class=\"n\">hn.ne'</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Nat.lcm</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">pow_dvd_pow</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">hnm</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">Nat.lcm_mul_left</span><span class=\"o\">]</span>\n          <span class=\"n\">simp</span>\n        <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">fst_big</span><span class=\"o\">,</span> <span class=\"n\">primeFactors_prime_pow</span> <span class=\"n\">hm.ne'</span><span class=\"o\">,</span> <span class=\"n\">snd_big</span><span class=\"o\">,</span> <span class=\"n\">primeFactors_prime_pow</span> <span class=\"n\">hn.ne'</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>this is surely going to work, but it's very brutal.</p>",
        "id": 424907492,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709655726
    },
    {
        "content": "<p>For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">fst_big</span><span class=\"o\">,</span> <span class=\"n\">primeFactors_prime_pow</span> <span class=\"n\">hm.ne'</span><span class=\"o\">,</span> <span class=\"n\">snd_big</span><span class=\"o\">,</span> <span class=\"n\">primeFactors_prime_pow</span> <span class=\"n\">hn.ne'</span><span class=\"o\">,</span>\n        <span class=\"n\">Ne.symm</span> <span class=\"n\">hpq</span><span class=\"o\">,</span> <span class=\"n\">Coprime.lcm_eq_mul</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">coprime_pow_primes</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">hq</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">Ne.symm</span> <span class=\"n\">hpq</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>proves the first sorry</p>",
        "id": 424908703,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709656049
    },
    {
        "content": "<p>This reminds me of a problem I ran into with arithmetic functions where the lcm didn't behave well. Would an argument like in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7787\">#7787</a> work better than going through induction? This feels pretty promising:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fst_big</span> <span class=\"o\">:=</span>\n    <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">primeFactors.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">snd_big</span> <span class=\"o\">:=</span>\n    <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">primeFactors.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fst_big</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">snd_big</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.lcm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fst_big</span><span class=\"o\">,</span> <span class=\"n\">snd_big</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a.lcm</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">lcm_ne_zero</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">Nat.multiplicative_factorization</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"n\">Finsupp.prod_of_support_subset</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:=(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">primeFactors</span><span class=\"o\">),</span> <span class=\"n\">Finset.prod_filter</span><span class=\"o\">,</span> <span class=\"n\">Finset.prod_filter</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">Finset.prod_mul_distrib</span><span class=\"o\">]</span>\n\n  <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 424910747,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1709656582
    },
    {
        "content": "<p>(note I slightly changed the definitions to make the argument smoother)</p>",
        "id": 424910833,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1709656608
    },
    {
        "content": "<p>Ah, using <code>(a*b).primeFactors</code> is surely a good idea, thanks!</p>",
        "id": 424911306,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709656729
    },
    {
        "content": "<p>But I really don't see how you can avoid using some kind of induction with the primes.</p>",
        "id": 424912255,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709656950
    },
    {
        "content": "<p>Like this? (this needs some cleaning up, of course)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fst_big</span> <span class=\"o\">:=</span>\n    <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">primeFactors.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">snd_big</span> <span class=\"o\">:=</span>\n    <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">primeFactors.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fst_big_eq</span> <span class=\"o\">:</span>\n    <span class=\"n\">fst_big</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">primeFactors</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fst_big</span><span class=\"o\">,</span> <span class=\"n\">Finset.prod_filter</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span> <span class=\"k\">with</span> <span class=\"n\">p</span>\n  <span class=\"n\">split_ifs</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">snd_big_eq</span> <span class=\"o\">:</span>\n    <span class=\"n\">snd_big</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">primeFactors</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">snd_big</span><span class=\"o\">,</span> <span class=\"n\">Finset.prod_filter</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span> <span class=\"k\">with</span> <span class=\"n\">p</span>\n  <span class=\"n\">split_ifs</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fst_big</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">snd_big</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.lcm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fst_big_eq</span><span class=\"o\">,</span> <span class=\"n\">snd_big_eq</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a.lcm</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">lcm_ne_zero</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">Nat.multiplicative_factorization</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"n\">Finsupp.prod_of_support_subset</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:=(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">primeFactors</span><span class=\"o\">),</span>\n    <span class=\"bp\">←</span> <span class=\"n\">Finset.prod_mul_distrib</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">pow_add</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Finset.prod_congr</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">_</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.factorization_lcm</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.sup_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nat.factorization</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">Nat.factorization</span> <span class=\"n\">a</span> <span class=\"n\">p</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"n\">Nat.not_lt.mpr</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">sup_of_le_left</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"o\">(</span><span class=\"n\">Nat.not_le.mp</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n      <span class=\"n\">sup_of_le_right</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_not_ge</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.factorization_lcm</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.support_sup</span><span class=\"o\">,</span> <span class=\"n\">primeFactors_mul</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">Nat.support_factorization</span> <span class=\"o\">,</span> <span class=\"n\">Nat.support_factorization</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 424915387,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1709657803
    },
    {
        "content": "<p>Wow, thanks!! You can even change the definition to what <code>fst_big_eq</code> gives (I plan to use a notation)</p>",
        "id": 424915734,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709657914
    },
    {
        "content": "<p>Here is an attempt using prime-induction. (Two sorries left, but I have to cook dinner...)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Int.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Nat.lcm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">m.Coprime</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">a</span> <span class=\"n\">using</span> <span class=\"n\">induction_on_primes</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">hp</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">dvd_rfl</span><span class=\"o\">,</span> <span class=\"n\">one_dvd</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">dvd_rfl</span><span class=\"o\">,</span> <span class=\"n\">dvd_rfl</span><span class=\"o\">,</span> <span class=\"n\">Nat.gcd_one_left</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">h₄</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h₄</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Nat.Prime.not_coprime_iff_dvd.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h₄</span><span class=\"o\">⟩</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dvd_antisymm</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_dvd_mul_left</span> <span class=\"n\">p</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h₁</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Nat.lcm_dvd</span> <span class=\"o\">(</span><span class=\"n\">Nat.mul_dvd_mul_left</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.dvd_lcm_left</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Dvd.dvd.mul_left</span> <span class=\"n\">h₂</span> <span class=\"n\">p</span>\n      <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.Coprime.mul</span> <span class=\"o\">((</span><span class=\"n\">Nat.Prime.coprime_iff_not_dvd</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"n\">h₄</span>\n    <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dvd_antisymm</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Dvd.dvd.mul_left</span> <span class=\"n\">h₂</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">h₄</span><span class=\"o\">⟩</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h₁</span><span class=\"o\">]</span>\n        <span class=\"n\">refine</span> <span class=\"n\">Nat.lcm_dvd</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.dvd_lcm_right</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"bp\">▸</span> <span class=\"n\">Nat.lcm_dvd</span> <span class=\"o\">((</span><span class=\"n\">Nat.dvd_mul_left</span> <span class=\"n\">a</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_lcm_left</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n          <span class=\"n\">Nat.dvd_lcm_right</span> <span class=\"bp\">..</span>\n</code></pre></div>",
        "id": 424918110,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709658605
    },
    {
        "content": "<p>Another way to define <code>fst_big</code> / <code>snd_big</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fst_big</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.lcm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization.prod</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span>\n  <span class=\"k\">if</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">snd_big</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.lcm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization.prod</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span>\n  <span class=\"k\">if</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fst_big</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">snd_big</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.lcm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">factorization_prod_pow_eq_self</span> <span class=\"o\">(</span><span class=\"n\">lcm_ne_zero</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">)]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fst_big</span><span class=\"o\">,</span> <span class=\"n\">snd_big</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Finsupp.prod_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">split_ifs</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fst_big_dvd</span> <span class=\"o\">:</span> <span class=\"n\">fst_big</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">factorization_prod_pow_eq_self</span> <span class=\"n\">ha</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.prod_of_support_subset</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.lcm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization.support</span><span class=\"o\">)]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Finset.prod_dvd_prod_of_dvd</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"n\">p</span> <span class=\"bp\">-;</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"bp\">;</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">le</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">factorization_lcm</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">pow_dvd_pow</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">sup_le</span> <span class=\"n\">le_rfl</span> <span class=\"n\">le</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">one_dvd</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.mem_support_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span> <span class=\"bp\">⊢</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">factorization_lcm</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_sup_iff.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 424919227,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709658950
    },
    {
        "content": "<p>This is really a wonderful community, now I only have to choose what is my preferred answer :)</p>",
        "id": 424919543,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709659064
    },
    {
        "content": "<p>The fact that the proof is two lines long</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fst_big</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.lcm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization.prod</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span>\n  <span class=\"k\">if</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">snd_big</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.lcm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization.prod</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span>\n  <span class=\"k\">if</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fst_big</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">snd_big</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.lcm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">factorization_prod_pow_eq_self</span> <span class=\"o\">(</span><span class=\"n\">lcm_ne_zero</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">),</span> <span class=\"n\">fst_big</span><span class=\"o\">,</span> <span class=\"n\">snd_big</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Finsupp.prod_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">split_ifs</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>seems a very good sign. Let me see how to prove that they're coprime.</p>",
        "id": 424919864,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709659176
    },
    {
        "content": "<p>Maybe I've shuffled all difficulties into proving coprimality ... I now think we should make use of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.factorizationEquiv#doc\">docs#Nat.factorizationEquiv</a></p>",
        "id": 424923024,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709660183
    },
    {
        "content": "<p>I have to stop for today and I will not have time tomorrow, but if any of you want to PR this I will be very happy to review. (Note that having this result about <code>Nat</code> will make the result about the order completely trivial)</p>",
        "id": 424924400,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709660598
    },
    {
        "content": "<p>Anyway it seems that by definition, for any prime prime p, the valuation of one of the two numbers is 1, and I guess we know (in some form) that this implies coprimality</p>",
        "id": 424928337,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709661910
    },
    {
        "content": "<p>Ops, I confused being equal to 1 and having valuation 0</p>",
        "id": 424929545,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709662323
    },
    {
        "content": "<p>Upon further thought, I think my approach does not work the way I tried it (at some point it may be necessary to move the maximal <code>p</code>-power from <code>n</code> to <code>m</code>).</p>",
        "id": 424934770,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709664218
    },
    {
        "content": "<p>(BTW, the efficient way to implement this would be to use <em>coprime factorization</em> : given positive natural numbers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>, one can efficiently compute pairwise coprime numbers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>p</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_1, \\ldots, p_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> greater than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> can be written as power products of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>.)</p>",
        "id": 424935515,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709664488
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> 's approach is a good one, maybe going through <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.factorizationEquiv_inv_apply#doc\">docs#Nat.factorizationEquiv_inv_apply</a> to compute the factorization of the two numbers</p>",
        "id": 424937244,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709665153
    },
    {
        "content": "<p>This should be generalizable to GCD monoids or at least factorization monoids, I assume?</p>",
        "id": 424940921,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709666414
    },
    {
        "content": "<p>Coprimality is actually not hard:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coprime</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fst_big</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Coprime</span> <span class=\"o\">(</span><span class=\"n\">snd_big</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fst_big</span><span class=\"o\">,</span> <span class=\"n\">snd_big</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">coprime_prod_left_iff.mpr</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"bp\">↦</span> <span class=\"n\">coprime_prod_right_iff.mpr</span> <span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"n\">hq</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"bp\">;</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h'</span>\n  <span class=\"n\">any_goals</span> <span class=\"n\">apply</span> <span class=\"n\">coprime_one_left</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">coprime_one_right</span>\n  <span class=\"n\">refine</span> <span class=\"n\">coprime_pow_primes</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">prime_of_mem_primeFactors</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prime_of_mem_primeFactors</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I tried to use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fst_big</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"o\">:=</span> <span class=\"n\">factorizationEquiv.symm</span>\n  <span class=\"o\">⟨(</span><span class=\"n\">Nat.lcm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n    <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">hp</span> <span class=\"bp\">↦</span> <span class=\"n\">prime_of_mem_primeFactors</span> <span class=\"o\">(</span><span class=\"n\">Finset.filter_subset</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hp</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>but it doesn't simplify things (and it's annoying that Lean can't rewrite the definition using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.factorizationEquiv_inv_apply#doc\">docs#Nat.factorizationEquiv_inv_apply</a> because it uses Subtype.val rather than PNat.val / coercion ... we should fix the lemma)</p>",
        "id": 424941665,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709666709
    },
    {
        "content": "<p>Great!</p>",
        "id": 424942765,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709667109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Keeping.20only.20the.20primes.20with.20smaller.20valuation/near/424940921\">said</a>:</p>\n<blockquote>\n<p>This should be generalizable to GCD monoids or at least factorization monoids, I assume?</p>\n</blockquote>\n<p>I can prove it for UFDs but I don't know if it generalizes to GCD monoids:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CancelCommMonoidWithZero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">UniqueFactorizationMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">IsRelPrime.exists_isRelPrime_mul_eq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsRelPrime</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">ca</span> <span class=\"n\">cb</span><span class=\"o\">,</span> <span class=\"n\">IsRelPrime</span> <span class=\"n\">ca</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">IsRelPrime</span> <span class=\"n\">cb</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">IsRelPrime</span> <span class=\"n\">ca</span> <span class=\"n\">cb</span> <span class=\"bp\">∧</span> <span class=\"n\">ca</span> <span class=\"bp\">*</span> <span class=\"n\">cb</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">UniqueFactorizationMonoid.induction_on_coprime</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"n\">hu</span> <span class=\"bp\">-</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">isRelPrime_one_left</span><span class=\"o\">,</span> <span class=\"n\">hu.isRelPrime_left</span><span class=\"o\">,</span> <span class=\"n\">isRelPrime_one_left</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"n\">hp</span> <span class=\"bp\">-</span>\n    <span class=\"n\">obtain</span> <span class=\"n\">dvd</span> <span class=\"bp\">|</span> <span class=\"n\">hpa</span> <span class=\"o\">:=</span> <span class=\"n\">hp.irreducible.dvd_or_isRelPrime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isRelPrime_one_left</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h.of_dvd_left</span> <span class=\"n\">dvd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pow_left</span><span class=\"o\">,</span> <span class=\"n\">isRelPrime_one_left</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hpa.pow_left</span><span class=\"o\">,</span> <span class=\"n\">isRelPrime_one_left</span><span class=\"o\">,</span> <span class=\"n\">isRelPrime_one_right</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hp</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"n\">h0</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">xa</span><span class=\"o\">,</span> <span class=\"n\">xb</span><span class=\"o\">,</span> <span class=\"n\">hxa</span><span class=\"o\">,</span> <span class=\"n\">hxb</span><span class=\"o\">,</span> <span class=\"n\">hxab</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">left_ne_zero_of_mul</span> <span class=\"n\">h0</span><span class=\"o\">)</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ya</span><span class=\"o\">,</span> <span class=\"n\">yb</span><span class=\"o\">,</span> <span class=\"n\">hya</span><span class=\"o\">,</span> <span class=\"n\">hyb</span><span class=\"o\">,</span> <span class=\"n\">hyab</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span> <span class=\"o\">(</span><span class=\"n\">right_ne_zero_of_mul</span> <span class=\"n\">h0</span><span class=\"o\">)</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">IsRelPrime.mul_left_iff</span><span class=\"o\">,</span> <span class=\"n\">IsRelPrime.mul_right_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">xa</span> <span class=\"bp\">*</span> <span class=\"n\">ya</span><span class=\"o\">,</span> <span class=\"n\">xb</span> <span class=\"bp\">*</span> <span class=\"n\">yb</span><span class=\"o\">,</span> <span class=\"n\">hxa.mul_left</span> <span class=\"n\">hya</span><span class=\"o\">,</span> <span class=\"n\">hxb.mul_left</span> <span class=\"n\">hyb</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">hxab.mul_right</span> <span class=\"n\">hp.1.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_left</span> <span class=\"o\">(</span><span class=\"n\">hp.2.1.symm.mul_right</span> <span class=\"n\">hyab</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_mul_mul_comm</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">extract_gcd'</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CancelCommMonoidWithZero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">GCDMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">gcd</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x'</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">gcd</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y'</span> <span class=\"bp\">∧</span> <span class=\"n\">IsRelPrime</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">Associated</span> <span class=\"o\">(</span><span class=\"n\">lcm</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gcd</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x'</span> <span class=\"bp\">*</span> <span class=\"n\">y'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">y'</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">extract_gcd</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">gcd_isUnit_iff_isRelPrime</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hu</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">y'</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h0</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">x</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lcm_zero_left</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">.</span><span class=\"n\">of_mul_left</span> <span class=\"o\">((</span><span class=\"n\">gcd_mul_lcm</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">h0</span> <span class=\"o\">((</span><span class=\"n\">gcd_eq_zero_iff</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">UniqueFactorizationMonoid.exists_isRelPrime_mul_associated_lcm</span> <span class=\"o\">[</span><span class=\"n\">GCDMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">ca</span> <span class=\"n\">cb</span><span class=\"o\">,</span> <span class=\"n\">ca</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">cb</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">IsRelPrime</span> <span class=\"n\">ca</span> <span class=\"n\">cb</span> <span class=\"bp\">∧</span> <span class=\"n\">ca</span> <span class=\"bp\">*</span> <span class=\"n\">cb</span> <span class=\"bp\">=</span> <span class=\"n\">lcm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">assoc</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">extract_gcd'</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">eq_lcm</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">assoc.symm</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h0</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">a</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">dvd_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">one_dvd</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">isRelPrime_one_right</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"n\">zero_mul</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">lcm_zero_left</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ca</span><span class=\"o\">,</span> <span class=\"n\">cb</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hp.exists_isRelPrime_mul_eq</span> <span class=\"n\">_</span>\n    <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">h0</span> <span class=\"o\">((</span><span class=\"n\">gcd_eq_zero_iff</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">cb</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ca</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">ca</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">cb</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">eq</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">u.mul_inv_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">isRelPrime_mul_unit_right_right</span> <span class=\"n\">u.isUnit</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hab.mul_right</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.mul_right</span> <span class=\"o\">(</span><span class=\"n\">hb.mul_left</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">eq_lcm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">congr</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">ca</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 425004222,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709699138
    },
    {
        "content": "<p>asked as <a href=\"https://math.stackexchange.com/questions/4875914/factorization-into-coprimes-subordinate-to-two-given-coprimes-in-gcd-domain\">https://math.stackexchange.com/questions/4875914/factorization-into-coprimes-subordinate-to-two-given-coprimes-in-gcd-domain</a></p>",
        "id": 425017523,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709707607
    },
    {
        "content": "<p>We want the version for N anyway: everything is computable there.</p>",
        "id": 425017813,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709707780
    },
    {
        "content": "<p>BTW is there a tactic to close equality goals in commutative monoids such as those in the lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">eq</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">u.mul_inv_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>? I tried <code>group</code> and <code>abel</code> but they don't work, and <code>ring</code> requires addition.</p>",
        "id": 425135507,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709744443
    },
    {
        "content": "<p>I think <code>abel</code> is supposed to do it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ca</span> <span class=\"n\">cb</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ca</span> <span class=\"bp\">+</span> <span class=\"n\">cb</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">cb</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">ca</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">abel</span>\n</code></pre></div>\n<p>this works, but not if I remove the <code>Add</code></p>",
        "id": 425253274,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709801033
    },
    {
        "content": "<p>Anyway, do you want to PR these results?</p>",
        "id": 425253366,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709801066
    },
    {
        "content": "<p>Indeed the docstring for abel says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># The `abel` tactic</span>\n\n<span class=\"cm\">Evaluate expressions in the language of additive, commutative monoids and groups.</span>\n\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 425254034,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709801379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> do you mind if I PR your work for <code>N</code>? I need it for an application to cyclotomic fields.</p>",
        "id": 425461801,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709882556
    },
    {
        "content": "<p>Please always feel free to!</p>",
        "id": 425462462,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709882958
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 425465505,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709884567
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11235\">#11235</a></p>",
        "id": 425523525,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709906247
    }
]