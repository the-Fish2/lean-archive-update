[
    {
        "content": "<p>If I have multiple instances on a type is there a clean way to force the instances to have the same underlying instances if they share any. For example CanonicallyOrderedAddCommMonoid and Lattice both have a LE. But I can't prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.Canonical.Defs</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_sup</span> <span class=\"o\">[</span><span class=\"n\">Lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CanonicallyOrderedAddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}:</span> <span class=\"mi\">0</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sup_of_le_right</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">zero_le</span> <span class=\"n\">a</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">LE.le</span> <span class=\"n\">Preorder.toLE</span> <span class=\"n\">PartialOrder.toPreorder</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>since</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">OrderedAddCommMonoid.toPartialOrder.1.1.1</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">SemilatticeSup.toPartialOrder.1.1.1</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 417135617,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1705882663
    },
    {
        "content": "<p>Indeed, you can't prove the result because you have nothing ensuring the two <code>LE</code>s are equal.</p>\n<p>The easy fix is <code>class CanonicallyOrderedLatticeAddCommMonoid (A) extends Lattice A, CanonicallyOrderedAddCommMonoid  A</code>, but there may be a nicer spelling</p>",
        "id": 417137183,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705883509
    },
    {
        "content": "<p>This works, thanks!</p>\n<p>I guess this explains all of the diamond classes, I guess there is no way to do it inline in the theorem?<br>\nAlthough this does lead to another thing I've been wondering, why does OrderBot require a LE, but most everything else (such as Lattice) comes equipped with one?</p>\n<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">OrderBot</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⊥</span>\n</code></pre></div>\n<p>has the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">LE</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>Is this purely to avoid creating a bunch of classes that have OrderBot as one of the superclasses?</p>",
        "id": 417140276,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1705885289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"562941\">Andrew Carter</span> has marked this topic as resolved.</p>",
        "id": 417140557,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705885441
    }
]