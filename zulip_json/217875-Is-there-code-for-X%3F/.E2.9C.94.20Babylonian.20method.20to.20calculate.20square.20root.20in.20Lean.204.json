[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> # Babylonian method to calculate square root in Lean 4</span>\n<span class=\"cm\">## Question</span>\n<span class=\"cm\">* `Real.sqrt` is not computable. Is there a natural way to link the concrete algorithms to compute square root with square root's formal definition?</span>\n<span class=\"cm\">* I want to generate some kind of warning when fuel runs out and exits, but I don't want to wrap the output in IO for that purpose. Is there a better way?</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">### arguments</span>\n<span class=\"sd\">* s : target value</span>\n<span class=\"sd\">* xₙ : value in process</span>\n<span class=\"sd\">* fuel : max number of iteration</span>\n<span class=\"sd\">* error : allowable error</span>\n<span class=\"sd\">### return</span>\n<span class=\"sd\">square roof of `s`. In detail, `x : Float` such that `|x² - s| &lt; error`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">sqrt.loop</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xₙ</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fuel</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">001</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">fuel</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"warning: out of fuel\"</span>\n    <span class=\"n\">return</span> <span class=\"n\">xₙ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fuel</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">next</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">xₙ</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"bp\">/</span><span class=\"n\">xₙ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n    <span class=\"k\">if</span> <span class=\"n\">next</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">error</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">next</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">error</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">next</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">sqrt.loop</span> <span class=\"n\">s</span> <span class=\"n\">next</span> <span class=\"n\">fuel</span> <span class=\"n\">error</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fuel</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">001</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"n\">sqrt.loop</span> <span class=\"n\">s</span> <span class=\"n\">init</span> <span class=\"n\">fuel</span> <span class=\"n\">error</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"mi\">55324</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 431642149,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712381373
    },
    {
        "content": "<p>(By the way, is there a standard way to annotate function arguments with doc comments?)</p>",
        "id": 431642238,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712381467
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 431642350,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712381627
    },
    {
        "content": "<p>Oh, I found a <code>Float.sqrt</code>.</p>",
        "id": 431646610,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712385778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 431646638,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712385791
    }
]