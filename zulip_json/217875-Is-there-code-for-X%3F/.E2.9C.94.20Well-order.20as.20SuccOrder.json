[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">WellFoundedLT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SuccOrder</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">SuccOrder.ofCore</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span> <span class=\"k\">then</span> <span class=\"n\">wellFounded_lt.min</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hi</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_isMax_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hi</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Set.Nonempty</span><span class=\"o\">,</span> <span class=\"n\">mem_setOf</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">hi</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨(</span><span class=\"n\">wellFounded_lt.min_le</span> <span class=\"bp\">·</span> <span class=\"n\">hi</span><span class=\"o\">),</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">wellFounded_lt.min_mem</span> <span class=\"n\">_</span> <span class=\"n\">hi</span><span class=\"o\">)⟩)</span>\n    <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">↦</span> <span class=\"n\">dif_neg</span> <span class=\"o\">(</span><span class=\"n\">not_not_intro</span> <span class=\"n\">hi</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">not_isMax_iff.mpr</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is this in mathlib in some form? If not, should I add it? I'd like to talk about successors on <code>o.out.α</code> for an ordinal <code>o</code>.</p>",
        "id": 410809389,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704182868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459227\">@Violeta Hernández</span> was talking about it but I'm pretty sure it never made it to mathlib.</p>",
        "id": 410809481,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704182924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> has marked this topic as resolved.</p>",
        "id": 410809823,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704183146
    }
]