[
    {
        "content": "<p>akin to how there is <code>CovariantClass</code> and <code>ContravariantClass</code> for <code>OrderedMonoid</code> and the like, i'd like to know if there is a mixin way to express that <code>0 &lt;= 1</code> and <code>a &lt;= b -&gt; 0 &lt;= c -&gt; c * a &lt;= c * b</code></p>",
        "id": 424009417,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709209938
    },
    {
        "content": "<p>the obvious start is <code>{R:Type*} [Ring R] [PartialOrder R] [CovariantClass R R (.+.) (.&lt;=.)]</code> but i dont know if there are any additional mixins i can use to express <code>[OrderedRing R]</code></p>",
        "id": 424009735,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709210058
    },
    {
        "content": "<p><code>ZeroLEOneClass</code> exists. Does that answer the first half?</p>",
        "id": 424009927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709210146
    },
    {
        "content": "<p>yes, thanks!</p>",
        "id": 424010012,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709210168
    },
    {
        "content": "<p>ah i found it, apparently you can do <code>[CovariantClass R&gt;=0 R (.*.) (.&lt;=.)]</code> and that will work... and it has an abbreviation <code>PosMulMono R</code></p>",
        "id": 424010372,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709210305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> has marked this topic as resolved.</p>",
        "id": 424010385,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709210310
    }
]