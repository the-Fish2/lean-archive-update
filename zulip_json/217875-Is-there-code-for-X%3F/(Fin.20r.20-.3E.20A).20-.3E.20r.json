[
    {
        "content": "<p>Is there a function that takes a function defined on <code>Fin r</code> and returns r? Couldn't find it on Loogle</p>",
        "id": 438511949,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715669814
    },
    {
        "content": "<p>In almost every situation where you might want such a function, you can use <code>r</code> directly since it's already in your context</p>",
        "id": 438515544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715671438
    },
    {
        "content": "<p>I need to get the row length of a <code>Matrix (Fin r) (Fin s) Rat</code>. I can't use s, because that's what I'm trying to prove: that the row length is equal to the number of columns</p>",
        "id": 438610023,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715703385
    },
    {
        "content": "<p>What is the type of your term?</p>",
        "id": 438610339,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715703483
    },
    {
        "content": "<p>Could you please specify, what term?</p>",
        "id": 438610560,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715703550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627751\">Vivek Rajesh Joshi</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.28Fin.20r.20-.3E.20A.29.20-.3E.20r/near/438610023\">said</a>:</p>\n<blockquote>\n<p>the row length is equal to the number of columns</p>\n</blockquote>\n<p>This doesn't sound like a theorem.</p>",
        "id": 438610622,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715703565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627751\">Vivek Rajesh Joshi</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.28Fin.20r.20-.3E.20A.29.20-.3E.20r/near/438610560\">said</a>:</p>\n<blockquote>\n<p>Could you please specify, what term?</p>\n</blockquote>\n<p>You have a matrix of a certain type, right? Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> please?</p>",
        "id": 438610854,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715703628
    },
    {
        "content": "<p>Yeah, the type of my matrix is <code>Matrix (Fin r) (Fin s) Rat</code></p>",
        "id": 438611042,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715703694
    },
    {
        "content": "<p>So you want to prove that <code>s = s</code>. The proof is <code>rfl</code>. This smells like <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>.</p>",
        "id": 438611539,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715703852
    },
    {
        "content": "<p>I'm having some trouble formalising the statement itself, so I don't have much to show for my attempt so far. I'll show an example of what I'm trying to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mat</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">;</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"bp\">;</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"o\">(</span><span class=\"n\">mat</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"n\">mat.transpose</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n</code></pre></div>",
        "id": 438611598,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715703878
    },
    {
        "content": "<p>You're having trouble to state it because you don't have a theorem to be stated.</p>",
        "id": 438611793,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715703948
    },
    {
        "content": "<p>I do, but I'm unable to state it for empty matrices. This is what I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rowLengthOfMatEqNumCol</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 438612114,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715704044
    },
    {
        "content": "<p>The 0 is problematic because r could be 0</p>",
        "id": 438612335,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715704096
    },
    {
        "content": "<p>Maybe use <code>Fin (r + 1)</code> instead, to make sure it's not zero?</p>",
        "id": 438612862,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715704272
    },
    {
        "content": "<p>Or maybe you want to say the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"n\">A.transpose</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 438612867,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715704274
    },
    {
        "content": "<p>This statement is an equivalent way to say it. It has a one-token proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"n\">A.transpose</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 438613087,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715704348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.28Fin.20r.20-.3E.20A.29.20-.3E.20r/near/438612862\">said</a>:</p>\n<blockquote>\n<p>Maybe use <code>Fin (r + 1)</code> instead, to make sure it's not zero?</p>\n</blockquote>\n<p>Yeah, and handle the empty case separately. I could try it.</p>",
        "id": 438613230,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715704407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.28Fin.20r.20-.3E.20A.29.20-.3E.20r/near/438613087\">said</a>:</p>\n<blockquote>\n<p>This statement is an equivalent way to say it. It has a one-token proof:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"n\">A.transpose</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ohh nice. That should solve it, thanks!</p>",
        "id": 438613358,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715704449
    },
    {
        "content": "<p>It doubt I gave you anything useful.</p>",
        "id": 438613396,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715704464
    },
    {
        "content": "<p>No, this actually answered my initial question too. Seems like <code>simp</code> just uses <code>List.length_ofFn</code>, which was what I asked for in the beginning.<br>\nI'm new to the whole formalisation process, and I realise this might not be the best way to implement what I want. But at least this gets me closer to what I want to finally implement, and I can worry about optimising it later.</p>",
        "id": 438614545,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715704839
    },
    {
        "content": "<p>Is your use case that you want to prove a certain identity by arranging some data into a matrix in two different ways <code>A</code> and <code>B</code> where you prove <code>A.transpose = B</code> and then utilize something like the example above? If so, just by being able to <em>state</em> <code>A.transpose = B</code> you already know their sizes coïncide at compile time, so no need to prove anything that actually takes the matrices as an input.</p>",
        "id": 438618275,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715706134
    },
    {
        "content": "<p>Another similarly vacuous example is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">C</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fC</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">R</span> <span class=\"n\">C</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">fC.elems.val.map</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toList.length</span> <span class=\"bp\">=</span> <span class=\"n\">fC.elems.val.toList.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Again, note that the only thing that matters is the instance <code>[fC : Fintype C]</code> which you already had. You can check that <code>A</code> is irrelevant by being able to state the very same thing without the matrix <code>A</code> at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fC</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">fC.elems.val.map</span> <span class=\"n\">A'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toList.length</span> <span class=\"bp\">=</span> <span class=\"n\">fC.elems.val.toList.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 438618976,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715706381
    },
    {
        "content": "<p>There was a function in which I wanted to get the column corresponding to an element in a row, so I wanted to convert the type of the index of that element from <code>Nat</code> to <code>Fin s</code> where s is the number of columns, for which I had to prove that the index value is less than s. I interpret s as row length and proved so, but I later realised that in the function, s had the value of number of columns. <br>\nLooking back, there most likely is a much simpler way to do this. I'll see about it soon.<br>\nI think a part of the problem is that the function accepts 2 unrelated nested lists, which are supposed to be the list of rows and list of columns of the matrix.</p>",
        "id": 438622610,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715707813
    },
    {
        "content": "<p>You have lists containing the indices of the matrix or lists containing the data of the matrix?</p>",
        "id": 438622978,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715707942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627751\">Vivek Rajesh Joshi</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.28Fin.20r.20-.3E.20A.29.20-.3E.20r/near/438612335\">said</a>:</p>\n<blockquote>\n<p>The 0 is problematic because r could be 0</p>\n</blockquote>\n<p>No it can't, because if you use <code>M 0</code>, you need to have <code>0 &lt; r</code>, hence <code>r </code> is not zero.<br>\n(Note that if <code>r = 0</code>, all the lines of <code>M</code> have length 1000.)</p>",
        "id": 438664589,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715723391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.28Fin.20r.20-.3E.20A.29.20-.3E.20r/near/438622978\">said</a>:</p>\n<blockquote>\n<p>You have lists containing the indices of the matrix or lists containing the data of the matrix?</p>\n</blockquote>\n<p>They contain the data of the matrix</p>",
        "id": 438703173,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715741263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.28Fin.20r.20-.3E.20A.29.20-.3E.20r/near/438664589\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"627751\">Vivek Rajesh Joshi</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.28Fin.20r.20-.3E.20A.29.20-.3E.20r/near/438612335\">said</a>:</p>\n<blockquote>\n<p>The 0 is problematic because r could be 0</p>\n</blockquote>\n<p>No it can't, because if you use <code>M 0</code>, you need to have <code>0 &lt; r</code>, hence <code>r </code> is not zero.<br>\n(Note that if <code>r = 0</code>, all the lines of <code>M</code> have length 1000.)</p>\n</blockquote>\n<p>Doesn't the matrix <code>!![]</code> have type <code>Matrix (Fin 0) (Fin 0) ?a</code>?</p>",
        "id": 438703413,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715741344
    },
    {
        "content": "<p>Yes, because <code>!![]</code>builds such a matrix and Lean is a typed language. My point was that mathematically you can't recognize between <code>Matrix (Fin 0) (Fin 3145)</code> and <code>Matrix (Fin 2718) (Fin 0)</code>. One would represent the zero linear map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"bold\">R</mi><mn>3145</mn></msup><mo>→</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\mathbf R^{3145}\\to 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3145</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> and the other one the zero linear map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>→</mo><msup><mi mathvariant=\"bold\">R</mi><mn>2718</mn></msup></mrow><annotation encoding=\"application/x-tex\">0 \\to \\mathbf R^{2718}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2718</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 438731310,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715753628
    }
]