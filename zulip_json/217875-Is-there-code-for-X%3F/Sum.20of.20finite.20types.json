[
    {
        "content": "<p>Hi!</p>\n<p>I have a very quick question. Is there a bijection between Sigma types of standard finite types <code>Fin</code> and the standard finite type with the sum as the number of elements?</p>\n<p>I tried to look for it in mathlib, but I couldn't spot it anywhere.</p>\n<p>Many thanks!</p>",
        "id": 437948452,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1715331335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  Fin, Sum</p>",
        "id": 437948605,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1715331395
    },
    {
        "content": "<p>The bot won't answer me, but I think you're looking for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finSumFinEquiv#doc\">docs#finSumFinEquiv</a></p>",
        "id": 437948678,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1715331435
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Sum.20of.20finite.20types\">#general &gt; Sum of finite types</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 437949453,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715331807
    },
    {
        "content": "<p>Thanks! I'm looking for the version of that for Sigma types</p>",
        "id": 437950505,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1715332308
    },
    {
        "content": "<p>Could you give a Lean statement of the equivalence you're looking for?</p>",
        "id": 437950902,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1715332486
    },
    {
        "content": "<p>Hm... the following might not exactly be valid lean syntax, but this is what I am looking for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 437952985,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1715333401
    },
    {
        "content": "<p>We don't have it, but <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finPiFinEquiv#doc\">docs#finPiFinEquiv</a> is very close and you should get inspiration from it</p>",
        "id": 437953824,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715333804
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 437954820,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1715334334
    },
    {
        "content": "<p>Is there perhaps another way in which you count elements of Sigma types, or is counting just not something that happens in mathlib?</p>",
        "id": 437956562,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1715335137
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.card_sigma#doc\">docs#Fintype.card_sigma</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Cardinal.mk_sigma#doc\">docs#Cardinal.mk_sigma</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.card_sigma#doc\">docs#Finset.card_sigma</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.card_sigmaLift#doc\">docs#Finset.card_sigmaLift</a> are some versions, depending on what you want.</p>",
        "id": 437959763,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1715336678
    },
    {
        "content": "<p>The first one, together with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.equivFinOfCardEq#doc\">docs#Fintype.equivFinOfCardEq</a> will also produce the other equivalence you looked for (not computably though).</p>",
        "id": 437959835,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1715336724
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FinEnum.instSigma#doc\">docs#FinEnum.instSigma</a> might be another answer to your question, if by \"count\" you mean \"enumerate\"</p>",
        "id": 438032961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715367808
    }
]