[
    {
        "content": "<p>Which parts of the following definition already exist?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.PFilter</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Multiset.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OrderedAddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">addMink''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">addMink'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Order.Ideal</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Order.Ideal</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">addMink''</span> <span class=\"n\">x.carrier</span> <span class=\"n\">y.carrier</span>\n  <span class=\"k\">have</span> <span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">Order.IsIdeal</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- TODO `IsLowerSet`</span>\n    <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">hx₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">x.nonempty</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y₁</span><span class=\"o\">,</span> <span class=\"n\">hy₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">y.nonempty</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x₁</span> <span class=\"bp\">+</span> <span class=\"n\">y₁</span><span class=\"o\">,</span> <span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">hx₁</span><span class=\"o\">,</span> <span class=\"n\">y₁</span><span class=\"o\">,</span> <span class=\"n\">hy₁</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- TODO `DirectedOn`</span>\n  <span class=\"n\">hz.toIdeal</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">addMink</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Order.PFilter</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Order.PFilter</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">addMink'</span> <span class=\"n\">x.dual</span> <span class=\"n\">y.dual</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Multiset.sumMink</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"o\">(</span><span class=\"n\">Order.PFilter</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Order.PFilter</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"n\">s.foldl</span> <span class=\"n\">addMink</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- I want `⟨{0 : M}⟩` for the base case</span>\n</code></pre></div>\n<p>I would like to define <code>Multiset.sumMink</code> with as little manual work as possible.</p>",
        "id": 409392868,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703166654
    },
    {
        "content": "<p>See <a href=\"https://tqft.net/mathlib4files/Data/Set/Pointwise/Basic\">file#Data/Set/Pointwise/Basic</a></p>",
        "id": 409393017,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703166708
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Order.Ideal</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">x.carrier</span> <span class=\"bp\">+</span> <span class=\"n\">y.carrier</span>\n    <span class=\"n\">lower'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">nonempty'</span> <span class=\"o\">:=</span> <span class=\"n\">x.nonempty.add</span> <span class=\"n\">y.nonempty</span>\n    <span class=\"n\">directed'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Order.Ideal</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">lower'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">nonempty'</span> <span class=\"o\">:=</span> <span class=\"n\">Set.zero_nonempty</span>\n    <span class=\"n\">directed'</span> <span class=\"o\">:=</span> <span class=\"n\">directedOn_singleton</span> <span class=\"n\">IsRefl.reflexive</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">Order.Ideal</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">SetLike.coe_injective.addCommMonoid</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>is probably a good start</p>",
        "id": 409396917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703167874
    },
    {
        "content": "<p>Every one of those sorries should probably be a standalone lemma, though we might not have them already</p>",
        "id": 409396961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703167893
    }
]