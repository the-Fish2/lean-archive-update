[
    {
        "content": "<p>Surely we have this in some form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but <code>exact?</code> and <code>#synth</code> aren't finding it for me. This is data -- I want the one for which <code>IsScalarTower A B C</code> is true :-)</p>",
        "id": 442779521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717592260
    },
    {
        "content": "<p>Is it called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.trans#doc\">docs#Algebra.trans</a> or something?</p>",
        "id": 442780377,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1717592451
    },
    {
        "content": "<p>No, I guess not. You can always compose the structure maps and use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom.toAlgebra#doc\">docs#RingHom.toAlgebra</a></p>",
        "id": 442780566,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1717592490
    },
    {
        "content": "<p>I would do <code>((algebraMap B C).comp (algebraMap A C)).toAlgebra</code> and <code>IsScalarTower.of_algebraMap_eq' rfl</code></p>",
        "id": 442780627,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1717592506
    },
    {
        "content": "<p>The module version is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.compHom#doc\">docs#Module.compHom</a> btw. Maybe we can have one for algebras.</p>",
        "id": 442780897,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1717592563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/algebra.20over.20an.20algebra.20is.20an.20algebra/near/442780566\">said</a>:</p>\n<blockquote>\n<p>No, I guess not. You can always compose the structure maps and use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom.toAlgebra#doc\">docs#RingHom.toAlgebra</a></p>\n</blockquote>\n<p>I always worry about diamonds when doing this kind of thing.</p>",
        "id": 442781152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717592623
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? This is fine in a local proof, and should be fine as long as you control where the algebra instances can come from.</p>",
        "id": 442782138,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1717592855
    },
    {
        "content": "<p>In my example I'm not worried :-) If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is the integers of a number field (or a Dedekind domain which isn't a field) with field of fractions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>⊆</mo><mi>K</mi><mo>⊆</mo><msubsup><mi mathvariant=\"double-struck\">A</mi><mi>K</mi><mi>f</mi></msubsup><mo>⊆</mo><msub><mo>∏</mo><mrow><mi>v</mi><mo>&lt;</mo><mi mathvariant=\"normal\">∞</mi></mrow></msub><msub><mi>K</mi><mi>v</mi></msub></mrow><annotation encoding=\"application/x-tex\">R\\subseteq K\\subseteq \\mathbb{A}_K^f\\subseteq \\prod_{v&lt;\\infty}K_v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2605em;vertical-align:-0.2935em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.967em;\"><span style=\"top:-2.4065em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span><span style=\"top:-3.1809em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2935em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0771em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0777em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"mrel mtight\">&lt;</span><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (third ring is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DedekindDomain.FiniteAdeleRing#doc\">docs#DedekindDomain.FiniteAdeleRing</a>  and 4th is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DedekindDomain.ProdAdicCompletions#doc\">docs#DedekindDomain.ProdAdicCompletions</a>) and I keep needing everything to be an algebra over every smaller thing.</p>",
        "id": 442792331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717595071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/algebra.20over.20an.20algebra.20is.20an.20algebra/near/442780627\">said</a>:</p>\n<blockquote>\n<p>I would do <code>((algebraMap B C).comp (algebraMap A C)).toAlgebra</code> and <code>IsScalarTower.of_algebraMap_eq' rfl</code></p>\n</blockquote>\n<p>I also believe that this is the right approach, and the <code>IsScalarTower</code> takes care of diamonds. In our project with <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span>  we had this all over the places to pass from something global (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>, ring of integers, number fields) to an extension of a local field.</p>",
        "id": 442794058,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1717595456
    },
    {
        "content": "<p>Thanks! Obviously it can't be an instance in general because you can't predict B in advance but I'm in the same situation (four rings coming from number theory which I need to glue together, all types) and I'll try this approach.</p>",
        "id": 442827487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717603306
    },
    {
        "content": "<p>To avoid diamonds, you may need to construct the smul field by hand</p>",
        "id": 442832901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717604416
    },
    {
        "content": "<p>This is exactly what I'm asking about -- I don't know the pitfalls here. How should I define the smul field then? Are you saying the <code>toAlgebra</code> approach suggested above might lead to diamonds?</p>",
        "id": 442837027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717605348
    },
    {
        "content": "<p>I don't see how <code>smul</code> would be defined without the structure maps except for something that looks silly like <code>(a \\bu 1) \\bu b</code> or something like that.</p>",
        "id": 442837800,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1717605486
    },
    {
        "content": "<p>In the special case of adeles, of course you could be much more direct.</p>",
        "id": 442838079,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1717605537
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.copy#doc\">docs#Algebra.copy</a> ?</p>",
        "id": 442839094,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1717605739
    }
]