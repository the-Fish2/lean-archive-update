[
    {
        "content": "<p>I'm trying to make some PR code run fast (i.e. less heartbeats), so I'm trying to remove some expensive tactics like <code>linarith</code>. What fastest proof of the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p><code>linarith</code> does this in <code>886</code>. I can't something to do it super quickly, the best I have (from using <code>apply?</code> several times) is</p>\n<p><code>Ne.symm (Int.ne_of_lt  (Int.le_sub_left_of_add_le (Int.le_of_lt hk)))</code>  </p>\n<p>which is <code>80</code>,  quite ugly, but much faster. I bet that there is just some lemma I'm not finding (or maybe this is basically as good as it gets). Is there a faster way to do this?</p>",
        "id": 438422352,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1715624571
    },
    {
        "content": "<p>This looks pretty fast already. I would try instantiating the implicit parameters of these lemmas, but elaborating them might actually be slower than inferring.</p>",
        "id": 438423632,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1715625095
    },
    {
        "content": "<p>Fast, but doesn't work :) Unless I misunderstood what you meant, or something changed in Lean or Mathlib between your version and mine to break it.<br>\nI would have guessed it would be hard to beat <code>by omega</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- 59</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Ne.symm</span> <span class=\"o\">(</span><span class=\"n\">Int.ne_of_lt</span>  <span class=\"o\">(</span><span class=\"n\">Int.le_sub_left_of_add_le</span> <span class=\"o\">(</span><span class=\"n\">Int.le_of_lt</span> <span class=\"n\">hk</span><span class=\"o\">)))</span>\n<span class=\"c1\">-- application type mismatch</span>\n<span class=\"c1\">--   Int.le_of_lt hk</span>\n<span class=\"c1\">-- argument</span>\n<span class=\"c1\">--   hk</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   3 ≤ k - 1 : Prop</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   1 + (0 + 1) &lt; k : Prop</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- 170</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">Int.negSucc_not_nonneg</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">hk.trans</span> <span class=\"n\">h.le</span><span class=\"o\">))</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- 125</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 438425317,
        "sender_full_name": "Richard Copley",
        "timestamp": 1715625801
    },
    {
        "content": "<p>hmm yes omega does it in 102 (on mine), which is good enough for me, so thats probably what I'll use.</p>",
        "id": 438426416,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1715626219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/heartbeat.20.22golf.22/near/438425317\">said</a>:</p>\n<blockquote>\n<p>Fast, but doesn't work :) Unless I misunderstood what you meant, or something changed in Lean or Mathlib between your version and mine to break it.<br>\nI would have guessed it would be hard to beat <code>by omega</code>.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- 59</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Ne.symm</span> <span class=\"o\">(</span><span class=\"n\">Int.ne_of_lt</span>  <span class=\"o\">(</span><span class=\"n\">Int.le_sub_left_of_add_le</span> <span class=\"o\">(</span><span class=\"n\">Int.le_of_lt</span> <span class=\"n\">hk</span><span class=\"o\">)))</span>\n<span class=\"c1\">-- application type mismatch</span>\n<span class=\"c1\">--   Int.le_of_lt hk</span>\n<span class=\"c1\">-- argument</span>\n<span class=\"c1\">--   hk</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   3 ≤ k - 1 : Prop</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   1 + (0 + 1) &lt; k : Prop</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- 170</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">Int.negSucc_not_nonneg</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">hk.trans</span> <span class=\"n\">h.le</span><span class=\"o\">))</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- 125</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>oh also, I had a typo in my original post, <code>(hk : 3 ≤ k)</code>, which is why it doesnt work for you!</p>",
        "id": 438427082,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1715626449
    },
    {
        "content": "<p>I thought I'd fixed fast enough, but you were faster :P</p>",
        "id": 438427154,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1715626481
    },
    {
        "content": "<p>For those playing heartbeat golf, notice that <code>master</code> now supports <code>count_heartbeats in my_tactic</code>.</p>",
        "id": 438471220,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715644307
    },
    {
        "content": "<p>(i.e. you can count heartbeats in a single proof step, rather than the whole declaration)</p>",
        "id": 438471266,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715644324
    },
    {
        "content": "<p>And remember that the relevant scale for heartbeats is 200000. Whether a step takes 80 or 800 is basically irrelevant.</p>",
        "id": 438471335,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715644359
    },
    {
        "content": "<p>The difference can accumulate, though...</p>",
        "id": 438532175,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715677426
    }
]