[
    {
        "content": "<p>Do we have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">summable_iff_bounded</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Summable</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"n\">BoundedAtFilter</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p><code>summable_of_sum_range_le</code> is close to one direction but it wants <code>forall</code> instead of <code>eventually</code></p>",
        "id": 425682018,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1709986780
    },
    {
        "content": "<p>I asked Github Copilot and it suggested starting with <code>rw [summable_iff_cauchy_seq_finset]</code> (which doesn't exist), so if you can guess what it's supposed to say then it might be missing API.</p>",
        "id": 425692372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709995679
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">cumsum</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">summable_iff_bounded</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"n\">BoundedAtFilter</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">cumsum</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">l0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cumsum</span> <span class=\"n\">u</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">atTop</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">isBigO_one_nat_atTop_iff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">cumsum</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"o\">(</span><span class=\"n\">cumsum</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"n\">h₁₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.sum_le_sum_of_subset_of_nonneg</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h₁₂</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hu</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">l2</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">i</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">abs_eq_self.mpr</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">l4</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">cumsum</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sum_nonneg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hu</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">l3</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">cumsum</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"n\">cumsum</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Real.norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_eq_self</span><span class=\"o\">,</span> <span class=\"n\">l4</span><span class=\"o\">]</span>\n\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">BoundedAtFilter</span><span class=\"o\">,</span> <span class=\"n\">l0</span><span class=\"o\">,</span> <span class=\"n\">l3</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sum_le_hasSum</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hu</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">h1</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">cases'</span> <span class=\"n\">tendsto_of_monotone</span> <span class=\"n\">l1</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span>\n    <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n₀</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">tendsto_atTop_atTop.mp</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">h1</span> <span class=\"n\">n₀</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">n₀</span> <span class=\"n\">le_rfl</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">summable_of_absolute_convergence_real</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">l2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 425760627,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1710064743
    },
    {
        "content": "<p>How about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=summable_of_norm_bounded#doc\">docs#summable_of_norm_bounded</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=summable_of_sum_le#doc\">docs#summable_of_sum_le</a> ?</p>",
        "id": 425780918,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710083497
    },
    {
        "content": "<p>Or if you really want partial sums <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.tsum_le_of_sum_range_le#doc\">docs#Real.tsum_le_of_sum_range_le</a></p>",
        "id": 425782292,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710084806
    },
    {
        "content": "<p>I hadn't found that one, thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">summable_iff_bounded</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"n\">BoundedAtFilter</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">cumsum</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">l0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cumsum</span> <span class=\"n\">u</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">atTop</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">isBigO_one_nat_atTop_iff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">cumsum</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">l4</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">cumsum</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sum_nonneg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hu</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">l3</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">cumsum</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"n\">cumsum</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Real.norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_eq_self</span><span class=\"o\">,</span> <span class=\"n\">l4</span><span class=\"o\">]</span>\n\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">BoundedAtFilter</span><span class=\"o\">,</span> <span class=\"n\">l0</span><span class=\"o\">,</span> <span class=\"n\">l3</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sum_le_hasSum</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hu</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">h1</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">summable_of_sum_range_le</span> <span class=\"n\">hu</span> <span class=\"n\">h1</span>\n</code></pre></div>\n<p>Probably still golfable using incantations like <code>lift u to N -&gt; NNReal using hu</code> or something, but that's for later.</p>",
        "id": 425789049,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1710091069
    }
]