[
    {
        "content": "<p>How should I write down <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>œÄ</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>‚âÖ</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\pi_1(\\mathbb{R}^n, x) \\cong 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">œÄ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚âÖ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>? I got the following but the first two <code>example</code>s don't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.AlgebraicTopology.FundamentalGroupoid.FundamentalGroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Homotopy.HomotopyGroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Complex.Circle</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NormedDivisionRing</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FundamentalGroup</span> <span class=\"o\">(</span><span class=\"n\">ball</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">‚âÉ*</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FundamentalGroup</span> <span class=\"o\">(</span><span class=\"n\">ball</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">‚âÉ*</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FundamentalGroup</span> <span class=\"n\">circle</span> <span class=\"n\">x</span> <span class=\"bp\">‚âÉ*</span> <span class=\"n\">‚Ñ§</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(Maybe my actual question is how to write the trivial group)</p>",
        "id": 438650134,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1715718410
    },
    {
        "content": "<p><code>Subsingleton (FundamentalGroup (ball 0 1) x)</code>? (also please can we disable Zulip automatically putting quote around copy-pasted code by default?)</p>",
        "id": 438650592,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1715718571
    },
    {
        "content": "<p>What quote? <br>\nSubsingleton (FundamentalGroup (ball 0 1) x)<br>\nworks fine</p>",
        "id": 438650721,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1715718616
    },
    {
        "content": "<p>If I copy as in the image <br>\n<a href=\"/user_uploads/3121/aDbX-aSsNsCj55MnNt01REDC/image.png\">image.png</a><br>\nand I paste inside the chat box, it gives</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/aDbX-aSsNsCj55MnNt01REDC/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/aDbX-aSsNsCj55MnNt01REDC/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"n\">FundamentalGroup</span> <span class=\"o\">(</span><span class=\"n\">ball</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">`</span>\n</code></pre></div>",
        "id": 438650932,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1715718696
    },
    {
        "content": "<p>Oh same for me. Weird behaviour</p>",
        "id": 438651101,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1715718739
    },
    {
        "content": "<p>Btw, I think that <code>Subsingleton</code> is better, but <code>Unit</code> works for the trivial group.</p>",
        "id": 438651200,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715718777
    },
    {
        "content": "<p>Thanks, I think that <em>might</em> become useful but I'll stick with Subsingleton for now</p>",
        "id": 438651501,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1715718886
    },
    {
        "content": "<p>Actually then shouldn't it be Subsingleton and Nonempty? Though one's implified since FundamentalGroup is a <code>Group</code></p>",
        "id": 438651769,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1715718972
    },
    {
        "content": "<p><code>Subsingleton</code> is very flexible and <code>Nonempty</code> you get for free.</p>",
        "id": 438651912,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715719026
    },
    {
        "content": "<p>Another way is <code>SimplyConnectedSpace (ball 0 1)</code></p>",
        "id": 438653313,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1715719524
    },
    {
        "content": "<p>Oh, it's precisely the definition Damiano gave :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A simply connected space is one whose fundamental groupoid is equivalent to `Discrete Unit` -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">mk_iff</span> <span class=\"n\">simply_connected_def</span><span class=\"kd\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">SimplyConnectedSpace</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">equiv_unit</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">FundamentalGroupoid</span> <span class=\"n\">X</span> <span class=\"bp\">‚âå</span> <span class=\"n\">Discrete</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 438653513,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1715719602
    },
    {
        "content": "<p>(As a small correction to what I said, <code>SimplyConnectedSpace (ball 0 1)</code> is stronger than the statement that the fundamental group of <code>ball 0 1</code> at any base point is trivial, because it also includes the fact that <code>ball 0 1</code> is path connected.)</p>",
        "id": 438654204,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1715719811
    },
    {
        "content": "<p>Also are any of these results formalised in Mathlib? For <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup><mo separator=\"true\">,</mo><msup><mi mathvariant=\"script\">D</mi><mi>n</mi></msup><mo separator=\"true\">,</mo><msup><mi mathvariant=\"double-struck\">S</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n, \\mathcal{D}^n, \\mathbb{S}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 438655147,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1715720109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Fundamental.20Group.20of.20R.5En.20or.20D.5En.20or.20S.5En/near/438650932\">said</a>:</p>\n<blockquote>\n<p>If I copy as in the image <br>\n<a href=\"/user_uploads/3121/aDbX-aSsNsCj55MnNt01REDC/image.png\">image.png</a><br>\nand I paste inside the chat box, it gives</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"n\">FundamentalGroup</span> <span class=\"o\">(</span><span class=\"n\">ball</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">`</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>If you right click you can \"paste as plain-text\" in Windows or \"paste and match style\" in MacOS. There are keyboard shortcuts as well, but I don't remember them off hand.</p>",
        "id": 438656186,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1715720439
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/L4O5eB9BqJ7tjff9tCvDLixC/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/L4O5eB9BqJ7tjff9tCvDLixC/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/L4O5eB9BqJ7tjff9tCvDLixC/image.png\"></a></div>",
        "id": 438656257,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1715720464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Fundamental.20Group.20of.20R.5En.20or.20D.5En.20or.20S.5En/near/438651200\">said</a>:</p>\n<blockquote>\n<p>Btw, I think that <code>Subsingleton</code> is better, but <code>Unit</code> works for the trivial group.</p>\n</blockquote>\n<p>Why is <code>Subsingleton</code> the contrary of <code>Nontrivial</code>?</p>",
        "id": 438663087,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715722842
    },
    {
        "content": "<p>I was not very clear.  What I meant is that working with <code>Subsingleton (...)</code> has a chance of harnessing typeclass inference, while working with <code>FundamentalGroup (ball 0 1) x ‚âÉ* 0</code> is further removed from it.  So my comment was merely stating that using <code>Subsingleton</code> may provide a smoother formalisation experience.</p>\n<p>However, since the original question could have been interpreted as \"what is the trivial group\", I thought that answering that could be useful.</p>",
        "id": 438666426,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715724052
    },
    {
        "content": "<p>I think you were clear. What is not clear to me is the choice of names ‚Äî there is a useful <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nontrivial#doc\">docs#Nontrivial</a> class that works well to characterize nontrivial algebraic structures (which (most of the time) are pointed), while the opposite class is called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subsingleton#doc\">docs#Subsingleton</a> and not <code>Trivial</code>.</p>",
        "id": 438731845,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715753894
    },
    {
        "content": "<p>Oh, I see!  I kind of like moving away from from the word Trivial, which to me seems over-used in maths.</p>",
        "id": 438733946,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715754899
    },
    {
        "content": "<p>Certainly. But <code>Subsingleton</code> had a set theoretic feeling that blocked me at once when I saw you using this Typeclass to characterize a trivial group. (Until I looked back at the definitions and observed that is exactly opposite to <code>Nontrivial</code>.)</p>",
        "id": 438737289,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715756421
    },
    {
        "content": "<p>Right and I find that the extra possibility of allowing empty is great!  My favourite mental formalisation of separated and of proper involve <code>Subsingleton</code> and <code>Subsingleton + Nonempty</code>!</p>",
        "id": 438738703,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715756972
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subsingleton#doc\">docs#Subsingleton</a> is a great TypeClass. The only thing which is not great is its name, since a subsingleton is not always a subset of a singleton.</p>",
        "id": 438739079,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715757122
    },
    {
        "content": "<p>(Note that it‚Äôs a type theory terminology not a random Mathlib one)</p>",
        "id": 438739241,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1715757181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Fundamental.20Group.20of.20R.5En.20or.20D.5En.20or.20S.5En/near/438739079\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subsingleton#doc\">docs#Subsingleton</a> is a great TypeClass. The only thing which is not great is its name, since a subsingleton is not always a subset of a singleton.</p>\n</blockquote>\n<p>I'm confused, isn't subsingleton defined to be a subset of a singleton set (even constructively)?</p>",
        "id": 438739498,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1715757265
    },
    {
        "content": "<p>nlab seems to agree</p>",
        "id": 438739517,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1715757274
    }
]