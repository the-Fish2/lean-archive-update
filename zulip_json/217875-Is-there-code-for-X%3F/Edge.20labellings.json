[
    {
        "content": "<p>Is the concept of edge labellings on simple graphs in mathlib?</p>\n<p>I want to formalize infinite Ramsey's theorem but couldn't find anything I can use besides the basic definitions for graphs.</p>",
        "id": 429693055,
        "sender_full_name": "Nir Paz",
        "timestamp": 1711470150
    },
    {
        "content": "<p>I don't believe there's anything about edge labelings in particular. You can formalize them in a number of ways:</p>\n<ol>\n<li>functions <code>G.edge_set -&gt; L</code></li>\n<li>functions <code>Sym2 V -&gt; L</code>, where you only ever look at values on <code>G.edge_set</code></li>\n<li>functions <code>Sym2 V -&gt; Option L</code>, where the image is not-<code>none</code> iff the input is in <code>G.edge_set</code></li>\n<li>functions <code>V -&gt; V -&gt; L</code> or <code>V -&gt; V -&gt; Option L</code> that are symmetric (but at this point, you probably want the next option)</li>\n<li>reformalize simple graphs to be labeled simple graphs, with a function <code>V -&gt; V -&gt; Option L</code> rather than <code>V -&gt; V -&gt; Prop</code>, and, if needed, create a label-erase map to <code>SimpleGraph V</code>, along with lemmas carrying structure over from one to the other. (Then a labeling of a simple graph would be a <code>LabeledSimpleGraph V L</code> that maps to it.)</li>\n</ol>\n<p>Which you choose depends on what you need out of the structure. For example, if you don't need the lattice structure on <code>SimpleGraph</code>, or any of the theory of subgraphs, you could probably do well with working right with symmetric <code>V -&gt; V -&gt; Option L</code> functions.</p>",
        "id": 429695783,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711470981
    },
    {
        "content": "<ol start=\"6\">\n<li>reformalize graphs to use Serre's definition and use <code>E -&gt; L</code> is also a possibility</li>\n</ol>",
        "id": 429699292,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1711472131
    },
    {
        "content": "<p>I believe <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> has infinite Ramsey? Not sure anymore</p>",
        "id": 429703232,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1711473406
    },
    {
        "content": "<p>A formalization of infinite Ramsey's theorem probably shouldn't mention graphs. I would expect it to be about something like functions <code>Finset Nat -&gt; L</code> for <code>L</code> some finite type.</p>",
        "id": 429708270,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1711475089
    },
    {
        "content": "<p>Maybe functions <code>Sym2 Nat -&gt; L</code> if you are only interested in the 2-dimensional statement?</p>",
        "id": 429708536,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1711475182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464202\">Felix Weilacher</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Edge.20labellings/near/429708270\">said</a>:</p>\n<blockquote>\n<p>A formalization of infinite Ramsey's theorem probably shouldn't mention graphs. I would expect it to be about something like functions <code>Finset Nat -&gt; L</code> for <code>L</code> some finite type.</p>\n</blockquote>\n<p>I wouldn't want to work with graphs just doing it for fun, I assumed graphs were best if I wanted it to be mathlib approp. But maybe doing something like this and proving the graph version later is better</p>",
        "id": 429713439,
        "sender_full_name": "Nir Paz",
        "timestamp": 1711476957
    },
    {
        "content": "<p>I have infinite Ramsey in Lean 3, it's linked from Freek's page. I also have edge labellings for the ramsey project. I agree that infinite hypergraph Ramsey shouldn't need to mention graphs - just like anything else about hypergraphs. My code for edge labellings is pretty close to PR-able, I just haven't got round to it: it's the top half of <a href=\"https://github.com/b-mehta/ExponentialRamsey/blob/master/ExponentialRamsey/Prereq/Ramsey.lean\">https://github.com/b-mehta/ExponentialRamsey/blob/master/ExponentialRamsey/Prereq/Ramsey.lean</a></p>",
        "id": 429719981,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1711479304
    },
    {
        "content": "<p>My infinite Ramsey code is compact but impenetrable, so I'd have no objection to someone just starting fresh. I do think however that the statement I had was the correct one to formalise, and that (even for a personal project) the hypergraph version is better to do. In particular going straight for hypergraphs rather than simple graphs means the induction is quite a bit easier to run. I also don't mind trying to do this myself, but I can't give any time estimate on when I'd be able to</p>",
        "id": 429721470,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1711479841
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12167\">#12167</a> does the infinite Ramsey theorem for hypergraphs. The finite versions will follow once Konig's infinity lemma is proved.</p>",
        "id": 433430803,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1713236670
    },
    {
        "content": "<p>I have some Lean 3 proofs of Konig's lemma, but do you need that? Could you apply a general compactness argument instead?</p>\n<p>Here are two examples in mathlib: <a href=\"https://github.com/leanprover-community/mathlib4/blob/ca1a851ae33af82f567dde4f039ee30747494fd8/Mathlib/Combinatorics/SimpleGraph/Finsubgraph.lean#L119-L153\">https://github.com/leanprover-community/mathlib4/blob/ca1a851ae33af82f567dde4f039ee30747494fd8/Mathlib/Combinatorics/SimpleGraph/Finsubgraph.lean#L119-L153</a> <a href=\"https://github.com/leanprover-community/mathlib4/blob/ca1a851ae33af82f567dde4f039ee30747494fd8/Mathlib/Combinatorics/Hall/Basic.lean#L123-L163\">https://github.com/leanprover-community/mathlib4/blob/ca1a851ae33af82f567dde4f039ee30747494fd8/Mathlib/Combinatorics/Hall/Basic.lean#L123-L163</a></p>\n<p>These are using category theory language: every inverse system of nonempty finite sets is nonempty. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=nonempty_sections_of_finite_inverse_system#doc\">docs#nonempty_sections_of_finite_inverse_system</a></p>",
        "id": 433431460,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713236976
    }
]