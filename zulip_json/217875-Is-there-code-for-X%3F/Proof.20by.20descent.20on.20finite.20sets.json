[
    {
        "content": "<p>In the middle of a proof I would need something similar to a descent argument for finsets, that say if a property of Finsets is true for the empty one, false for the singletons and if it is true for a Finset with more than one element (called non-trivial), then it is true for the subset removing one element, then the property is only true for the empty set. I tried to prove it using induction on Finsets but I am completely stuck. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">descent</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"kt\">Prop</span><span class=\"o\">}{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hempty</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsingle</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span><span class=\"n\">s.Nontrivial</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span>  <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Finset.erase</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span><span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Any suggestion will be very much appreciated. Also suggestions proposing more natural but essentially equivalent results.</p>",
        "id": 410186162,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1703700735
    },
    {
        "content": "<p>I suspect it will be easier to do induction on <code>fun s ↦ p s → s = ∅</code> in your application.<br>\nEDIT: maybe not</p>",
        "id": 410186764,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703701159
    },
    {
        "content": "<p>Here's a more natural statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">descent</span> <span class=\"o\">(</span><span class=\"n\">hempty</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsingle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">})</span>\n   <span class=\"o\">(</span><span class=\"n\">hind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s.Nonempty</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">hs</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hempty</span><span class=\"o\">⟩</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hs</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">nonempty_iff_ne_empty.2</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cons_induction</span> <span class=\"n\">hsingle</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">ha</span> <span class=\"n\">hs</span> <span class=\"n\">ih</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"bp\">$</span> <span class=\"n\">hind</span> <span class=\"n\">_</span> <span class=\"n\">hs</span> <span class=\"n\">_</span> <span class=\"n\">ha</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 410188463,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703702232
    },
    {
        "content": "<p>It's not quite what you want, though</p>",
        "id": 410188468,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703702239
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Card</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">descent'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hempty</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsingle</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">})</span>\n    <span class=\"o\">(</span><span class=\"n\">hind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s.Nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Finset.erase</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span><span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">↦</span> <span class=\"n\">e</span> <span class=\"bp\">▸</span> <span class=\"n\">hempty</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.card_eq_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">generalizing</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">H</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">s.Nonempty</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.nonempty_iff_ne_empty</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Finset.card_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Nat.succ_ne_zero</span> <span class=\"n\">n</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hxs</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hind</span> <span class=\"n\">s</span> <span class=\"n\">this</span> <span class=\"n\">H</span>\n    <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.card_erase_of_mem</span> <span class=\"n\">hxs</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">hs</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.card_eq_one.mp</span> <span class=\"n\">hn</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hsingle</span> <span class=\"n\">_</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">descent</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"kt\">Prop</span><span class=\"o\">}{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hempty</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsingle</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span><span class=\"n\">s.Nontrivial</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span>  <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Finset.erase</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span><span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">descent'</span> <span class=\"n\">hempty</span> <span class=\"n\">hsingle</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hn</span> <span class=\"n\">hs</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">|</span><span class=\"n\">hs'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hn.exists_eq_singleton_or_nontrivial</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hsingle</span> <span class=\"n\">_</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hind</span> <span class=\"n\">s</span> <span class=\"n\">hs'</span> <span class=\"n\">hs</span>\n</code></pre></div>",
        "id": 410189355,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703702794
    },
    {
        "content": "<p>I have a better solution coming</p>",
        "id": 410189788,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703703084
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Card</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Finset</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Nontrivial.exists_ne</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.Nontrivial</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span><span class=\"bp\">!;</span> <span class=\"n\">exact</span> <span class=\"n\">not_nontrivial_singleton</span> <span class=\"bp\">$</span> <span class=\"n\">hs.mono</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">↦</span> <span class=\"n\">mem_singleton.2</span> <span class=\"bp\">$</span> <span class=\"n\">this</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Nontrivial.erase_nonempty</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.Nontrivial</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s.erase</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">hs.exists_ne</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n\n<span class=\"sd\">/-- Suppose that, given objects defined on all nonempty strict subsets of any nontrivial finset `s`,</span>\n<span class=\"sd\">one knows how to define an object on `s`. Then one can inductively define an object on all finsets,</span>\n<span class=\"sd\">starting from singletons and iterating. This can be used either to define data, or to prove</span>\n<span class=\"sd\">properties.</span>\n\n<span class=\"sd\">TODO: Actually let `p` be `Sort`-valued. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">elab_as_elim</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">Nonempty.strong_induction</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s.Nonempty</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">singleton_nonempty</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">s</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.Nontrivial</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">⊂</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"n\">hs.nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">hs</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"n\">hs</span> <span class=\"o\">:=</span> <span class=\"n\">hs.exists_eq_singleton_or_nontrivial</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h₀</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">h₁</span> <span class=\"n\">hs</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">hts</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">card_lt_card</span> <span class=\"n\">hts</span>\n      <span class=\"n\">exact</span> <span class=\"n\">ht.strong_induction</span> <span class=\"n\">h₀</span> <span class=\"n\">h₁</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">Nonempty.strong_induction</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.card</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">descent</span> <span class=\"o\">(</span><span class=\"n\">hempty</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsingle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">})</span>\n   <span class=\"o\">(</span><span class=\"n\">hind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s.Nontrivial</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">s.erase</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n   <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hempty</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">not_nonempty_iff_eq_empty</span><span class=\"o\">]</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">hps</span> <span class=\"n\">hs</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">hs</span> <span class=\"n\">using</span> <span class=\"n\">Nonempty.strong_induction</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hsingle</span> <span class=\"n\">_</span> <span class=\"n\">hps</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hpa</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hind</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">hps</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">_</span> <span class=\"n\">hs.erase_nonempty</span> <span class=\"o\">(</span><span class=\"n\">erase_ssubset</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">hpa</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Finset</span>\n</code></pre></div>",
        "id": 410190992,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703703786
    },
    {
        "content": "<p>Everything but <code>descent</code> should be in mathlib. Feel free to PR it (or to tell me to do it).</p>",
        "id": 410191069,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703703818
    },
    {
        "content": "<p>I would very pleased if you PR all these...</p>",
        "id": 410191571,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1703704114
    },
    {
        "content": "<p>(excluding \"descent\")</p>",
        "id": 410191605,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1703704132
    },
    {
        "content": "<p>Yeah, it turns out that \"descent\" just means \"strong induction\" if you squint at it right</p>",
        "id": 410192273,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703704595
    },
    {
        "content": "<p><del>It's annoying that all Finset induction principles uses Forall rather than Exists (of an element to insert), so we must relegate to induction on the cardinality. <a href=\"https://github.com/leanprover-community/mathlib4/pull/9123\">#9123</a> is a move in the right direction (uses Exists), but it's for Set, not Finset.</del></p>",
        "id": 410192559,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703704807
    },
    {
        "content": "<p>But that's because the version with <code>Exists</code> is usually false? It's only true over finite types.</p>",
        "id": 410192808,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703704999
    },
    {
        "content": "<p>I don't think you assumed finiteness of α when proving <code>theorem descent</code>?</p>",
        "id": 410192933,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703705068
    },
    {
        "content": "<p>How is that related to <a href=\"https://github.com/leanprover-community/mathlib4/pull/9123\">#9123</a> ?</p>",
        "id": 410192966,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703705109
    },
    {
        "content": "<p>Oh I see what you're saying. You're right the versions with Exists are not always true.<br>\nI see that <code>descent</code> is not exactly \"contrapositive\" of the induction principle . <a href=\"https://github.com/leanprover-community/mathlib4/pull/9123\">#9123</a> does assume finiteness.</p>",
        "id": 410193095,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703705196
    },
    {
        "content": "<p>However <a href=\"https://github.com/leanprover-community/mathlib4/pull/9123\">#9123</a> seems to be a special case of what we have here (once translated to <code>Set</code>).</p>",
        "id": 410193319,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703705353
    },
    {
        "content": "<p>(you need to apply <code>ᶜ</code> everywhere)</p>",
        "id": 410196219,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703707271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315546\">Xavier Xarles</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Proof.20by.20descent.20on.20finite.20sets/near/410191571\">said</a>:</p>\n<blockquote>\n<p>I would very pleased if you PR all these...</p>\n</blockquote>\n<p>Wish granted: <a href=\"https://github.com/leanprover-community/mathlib4/pull/9308\">#9308</a></p>",
        "id": 410197020,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703707715
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">descent</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"kt\">Prop</span><span class=\"o\">}{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hempty</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsingle</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span><span class=\"n\">s.Nontrivial</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span>  <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Finset.erase</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span><span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hempty</span><span class=\"o\">⟩</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hsingle</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">strongInduction</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nonempty_of_ne_empty</span> <span class=\"n\">hsingle</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists_eq_singleton_or_nontrivial</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hak</span><span class=\"o\">,</span> <span class=\"n\">hap</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hind</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">hp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">k.erase</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">erase_ssubset</span> <span class=\"n\">hak</span><span class=\"o\">)</span> <span class=\"n\">hap</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>this is an easier approach that is at worst missing the <code>sorry</code> lemma (I have to run, but it's easy i promise!)</p>",
        "id": 410199998,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703709980
    },
    {
        "content": "<p>The proof by   <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>  finished:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Card</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">descent</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"kt\">Prop</span><span class=\"o\">}{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hempty</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsingle</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span><span class=\"n\">s.Nontrivial</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span>  <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Finset.erase</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span><span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hempty</span><span class=\"o\">⟩</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hsingle</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">strongInduction</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nonempty_of_ne_empty</span> <span class=\"n\">hsingle</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists_eq_singleton_or_nontrivial</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hak</span><span class=\"o\">,</span> <span class=\"n\">hap</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hind</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">hp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">k.erase</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">erase_ssubset</span> <span class=\"n\">hak</span><span class=\"o\">)</span> <span class=\"n\">hap</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nonempty_iff_ne_empty</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Finset.erase_nonempty</span> <span class=\"n\">hak</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 410214785,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1703721311
    },
    {
        "content": "<p>Is eric's sorry not my <code>Finset.Nontrivial.erase_nonempty</code> above?</p>",
        "id": 410253264,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703746895
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 411004548,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1704284222
    }
]