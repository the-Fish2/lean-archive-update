[
    {
        "content": "<p>Is there a nicer way to prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">WithBot</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">  </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">bot</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">coe</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">WithBot</span><span class=\"bp\">.</span><span class=\"n\">coe_natCast</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">WithBot</span><span class=\"bp\">.</span><span class=\"n\">coe_le_coe</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_id</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">WithBot</span><span class=\"bp\">.</span><span class=\"n\">coe_natCast</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">WithBot</span><span class=\"bp\">.</span><span class=\"n\">coe_lt_coe</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_id</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">    </span><span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 446515163,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1719202988
    },
    {
        "content": "<p>You should add the missing simp lemma that <code>(a : WithBot Nat) &lt;= (b : WithBot Nat)</code> iff <code>a &lt;= b</code> to Mathlib.</p>",
        "id": 446520563,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719206871
    },
    {
        "content": "<p>I think a better lemma to add might be <code>(a : WithBot Nat) = some a</code>, and then it's just <code>coe_le_coe</code></p>",
        "id": 446520852,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1719207091
    },
    {
        "content": "<p>That wouldn't help with <code>WithBot Real</code></p>",
        "id": 446536026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719213717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/le_pred_of_lt.20for.20WithBot.20.E2.84.95/near/446520563\">said a less general version of</a>:</p>\n<blockquote>\n<p>You should add the missing simp lemma that <code>(a : WithBot A) &lt;= (b : WithBot A)</code> iff <code>a &lt;= b</code>, for <code>a b : Nat</code>, to Mathlib.</p>\n</blockquote>\n<p>I guess there are quite a lot of these to add: Bot/Top, le/lt, special case where one or both of a and b are 0/1/ofNat, intCast versions of the same, lemmas with intCast on one side and natCast on the other, ...</p>",
        "id": 446536486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719213881
    },
    {
        "content": "<p>(To clarify, Eric doesn't mean that you shouldn't add this simp lemma, but that it should be more general that for Nat.)</p>",
        "id": 446536988,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719214067
    },
    {
        "content": "<p>I actually misread your suggestion as being the general one, and meant that Daniel's lemma probably isn't useful in the presence of (my reading of) yours</p>",
        "id": 446538331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719214386
    }
]