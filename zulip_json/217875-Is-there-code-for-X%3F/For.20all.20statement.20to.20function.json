[
    {
        "content": "<p>Is there a code for if I have </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>∗</mo><mi>n</mi><mo>≤</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\forall n \\in \\mathbb{N},y*n\\le x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;vertical-align:-0.1944em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span></p>\n<p>is there a way I can view a for-all statement as a function of n that is bounded above by x</p>",
        "id": 420233400,
        "sender_full_name": "Timothy Harevy",
        "timestamp": 1707306150
    },
    {
        "content": "<p>Can you be a little more precise? Do you want to write in lean this statement?</p>",
        "id": 420234368,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707306590
    },
    {
        "content": "<p>My guess is the value <code>Sup (Set.range (. * n))</code></p>",
        "id": 420237477,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1707307791
    },
    {
        "content": "<p>I have a statement that says for all n, y<em>n is less than equal to x I want to change that in LEAN to the function y</em>n that is bounded above by x</p>",
        "id": 420238114,
        "sender_full_name": "Timothy Harevy",
        "timestamp": 1707308011
    },
    {
        "content": "<p>Can you write the lean code for what you have and what you want, rather than just writing mathematics? There are many lean implementations of one mathematical specification.</p>",
        "id": 420239485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707308474
    },
    {
        "content": "<p>I have shown this </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>And want to know of it is possible to change this statement into the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">is_upper_bound</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 420252406,
        "sender_full_name": "Timothy Harevy",
        "timestamp": 1707312708
    },
    {
        "content": "<p>Can you write a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? <code>is_upper_bound</code> does not exist in mathlib.</p>",
        "id": 420252975,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707312859
    },
    {
        "content": "<p>I've defined it as such</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_upper_bound</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"bp\">≤</span><span class=\"n\">M</span>\n</code></pre></div>",
        "id": 420253381,
        "sender_full_name": "Timothy Harevy",
        "timestamp": 1707312971
    },
    {
        "content": "<p>In this case <code>is_upper_bound (fun n ↦ y*n) x</code> does not make sense, since <code>(fun n ↦ y*n)</code> is a function, not a set.</p>",
        "id": 420253587,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707313049
    },
    {
        "content": "<p>(also note that we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=upperBounds#doc\">docs#upperBounds</a>)</p>",
        "id": 420253656,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707313073
    },
    {
        "content": "<p>Okay thank you</p>",
        "id": 420254001,
        "sender_full_name": "Timothy Harevy",
        "timestamp": 1707313178
    },
    {
        "content": "<p>You can of course consider the upper bound of the range of the function, that is what you want.</p>",
        "id": 420254224,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707313235
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_upper_bound</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"bp\">≤</span><span class=\"n\">M</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">is_upper_bound</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hb</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 420254479,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707313319
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">is_upper_bound</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">hb.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>if you like making things unreadable.</p>",
        "id": 420255070,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707313518
    },
    {
        "content": "<p>We also have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.forall_range_iff#doc\">docs#Set.forall_range_iff</a></p>",
        "id": 424905849,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709655287
    }
]