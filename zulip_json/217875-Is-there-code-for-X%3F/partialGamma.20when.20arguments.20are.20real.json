[
    {
        "content": "<p>We have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">partialGamma</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">..</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exp</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm interested in the case where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>∈</mo><mi mathvariant=\"double-struck\">R</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>s</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">s \\in \\mathbb{R},~s \\geq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;vertical-align:-0.1944em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mpunct\">,</span><span class=\"mspace nobreak\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, in which case partialGamma maps into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>. Is there something like a Real.partialGamma that takes care of this? I couldn't find it in the docs. <br>\nI'm effectively interested in showing that the CDF of a Gamma distribution equals a constant multiplied by a partialGamma evaluated at some choice of s and X. I'm just curious whether there is something useful out there, or whether I should just program this by hand?</p>",
        "id": 410985766,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704275687
    },
    {
        "content": "<p>You can just take the real part</p>",
        "id": 410985983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704275777
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 410986143,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704275878
    },
    {
        "content": "<p>This is a standard trick, see e.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.cos#doc\">docs#Real.cos</a></p>",
        "id": 410986485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704276058
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 410987141,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704276288
    }
]