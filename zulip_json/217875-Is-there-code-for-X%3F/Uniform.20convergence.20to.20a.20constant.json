[
    {
        "content": "<p>Are these in Mathlib already?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Uniformity</span> <span class=\"n\">Uniform</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">UniformSpace</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendstoUniformly_iff_nhds</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">TendstoUniformly</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">s</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">u</span> <span class=\"n\">hu</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">UniformSpace.ball_mem_nhds</span> <span class=\"n\">_</span> <span class=\"n\">hu</span><span class=\"o\">)‚ü©</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">UniformSpace.mem_nhds_iff.mp</span> <span class=\"n\">hs</span>\n  <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">v</span> <span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendstoUniformlyOnFilter_iff_nhds</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">TendstoUniformlyOnFilter</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">s</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">p</span> <span class=\"bp\">√óÀ¢</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">n.1</span> <span class=\"n\">n.2</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">u</span> <span class=\"n\">hu</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">UniformSpace.ball_mem_nhds</span> <span class=\"n\">b</span> <span class=\"n\">hu</span><span class=\"o\">)‚ü©</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">UniformSpace.mem_nhds_iff.mp</span> <span class=\"n\">hs</span>\n  <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">using</span> <span class=\"n\">h2</span> <span class=\"n\">hn</span>\n</code></pre></div>\n<p>Sometimes it can be useful to speak about uniform convergence to a value rather than a function, and this makes sense without a uniform space structure.</p>",
        "id": 436833359,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714721992
    }
]