[
    {
        "content": "<p>I have the following lemma that I need to prove, and I can do so quite painfully, with a significant number of rewrites. Is there any tactic that will solve this, or a smart way to deal with these kinds of goals in general?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h₂</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 442138412,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1717384458
    },
    {
        "content": "<p><code>omega</code> will solve this one, I think that's now the go-to for Nat/Int. There's also <code>linarith</code>.</p>",
        "id": 442140099,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717385630
    },
    {
        "content": "<p>Ah, thank you.</p>",
        "id": 442140180,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1717385678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"699800\">Brandon Harad</span> has marked this topic as resolved.</p>",
        "id": 442140185,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717385680
    },
    {
        "content": "<p><code>linarith</code> might only work if you <code>zify</code> first (just guessing, not at a computer right now)</p>",
        "id": 442169380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717399061
    },
    {
        "content": "<p>It does solve it, which makes sense to me given that the result is expressed only using addition.</p>",
        "id": 442169717,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1717399158
    },
    {
        "content": "<p>But the proof \"uses subtraction\" (in the form of cancellation) right? It might be interesting to use <code>show_term</code> on the proof generated by <code>linarith</code> to see if integers are involved. If you're proving this theorem because you're giving eg a self-contained proof about a home-rolled definition of the integers then this would indicate that your proof is \"circular\" in the sense that lean is using its own integers to prove basic facts about your integers.</p>",
        "id": 442170231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717399296
    },
    {
        "content": "<p>I only mention this because this is a result which you need when developing the basic theory of integers as a quotient from scratch, and proving it just using NNG techniques is a slight pain (you add the same thing to both sides and then use cancellation lemmas and a bunch of rearranging and rewriting).</p>",
        "id": 442170697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717399430
    },
    {
        "content": "<p>Which does happen to be why I need it, so fantastic guess.</p>",
        "id": 442170820,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1717399462
    },
    {
        "content": "<p>A novice inspection of the show_term message seems to confirm that.</p>",
        "id": 442171033,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1717399527
    },
    {
        "content": "<p>I suppose I'll have to do something about that.</p>",
        "id": 442171060,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1717399536
    },
    {
        "content": "<p>Why? It's not actually circular.</p>",
        "id": 442171225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717399577
    },
    {
        "content": "<p>But it does somewhat violate the purpose of the exercise.</p>",
        "id": 442171361,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1717399628
    },
    {
        "content": "<p>While it is sorta funny to do something \"from scratch\" in a setting whose greatest strength is the work done by the community, I would prefer if there was no reliance on the real integers being hidden.</p>",
        "id": 442171627,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1717399694
    },
    {
        "content": "<p>My take on this is: develop <code>MyNat</code>, play NNG, realise that level 1000 of NNG is now getting quite boring and ideally you need high powered tactics to solve all possible basic NNG levels, give up on MyNat and use Nat instead to save you a lot of bother, and then start on MyInt defined using Nat but you're allowed all Nat tactics and who cares how they work. Same with MyRat and MyReal and MyComplex. I would not like to develop the basic theory of any of these by hand without having complete access to all the tactics which can manipulate the thing before.</p>",
        "id": 442172129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717399843
    },
    {
        "content": "<p>So you either write all of these tactics, which would be a complete waste of time because MyOmega for MyNat would be a research project in its own, or you just \"cheat\".</p>",
        "id": 442172400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717399932
    },
    {
        "content": "<p>I suppose that would be a better idea.</p>",
        "id": 442172406,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1717399934
    },
    {
        "content": "<p>On second thought, it isn't really cheating, it's just acclimating to working with community resources in Lean.</p>",
        "id": 442172507,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1717399967
    },
    {
        "content": "<p>Thank you for your suggestion.</p>",
        "id": 442172537,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1717399976
    },
    {
        "content": "<p>Of course the people who wrote <em>actual</em> <code>Nat</code> couldn't rely on this trick, and to make matters worse, actual Int is defined in a mathematically awful way which makes proving the lemmas about it much harder</p>",
        "id": 442173024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717400123
    },
    {
        "content": "<p>But it's a one-off payment and the benefit is a more computation-friendly Int.</p>",
        "id": 442173177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717400169
    },
    {
        "content": "<p>How convenient that I'm not one of those people.</p>",
        "id": 442173345,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1717400233
    },
    {
        "content": "<p>I felt just the same way when I did all-but-one of those exercises above! (I never made MyReal from Rat...)</p>",
        "id": 442178019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717401606
    },
    {
        "content": "<p>You've inspired/reminded me to make my work public: it's <a href=\"https://github.com/ImperialCollegeLondon/IUM/blob/main/IUM/2023/IntegerGame.lean\">https://github.com/ImperialCollegeLondon/IUM/blob/main/IUM/2023/IntegerGame.lean</a></p>",
        "id": 442179124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717401891
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"sd\">/-- Addition on integers. -/</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MyInt</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">MyInt</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">MyInt</span><span class=\"w\">  </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Quotient</span><span class=\"bp\">.</span><span class=\"n\">map₂</span><span class=\"w\"> </span><span class=\"n\">MyPreint</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"c1\">-- to show this is well-defined, we need to</span>\n<span class=\"w\">  </span><span class=\"c1\">-- show some lemma or other</span>\n<span class=\"w\">  </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"w\">         </span><span class=\"bp\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MyPreint</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"c1\">-- So prove this lemma</span>\n<span class=\"w\">  </span><span class=\"n\">linarith</span>\n\n<span class=\"c1\">-- `+` notation</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"n\">MyInt</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">add</span>\n</code></pre></div>",
        "id": 442179265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717401934
    },
    {
        "content": "<p>Even worse:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"sd\">/-- Multiplication on integers. -/</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MyInt</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">MyInt</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">MyInt</span><span class=\"w\">  </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Quotient</span><span class=\"bp\">.</span><span class=\"n\">map₂</span><span class=\"w\"> </span><span class=\"n\">MyPreint</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"c1\">-- to show this is well-defined, we need to show some lemma or other</span>\n<span class=\"w\">  </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"w\">         </span><span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MyPreint</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"c1\">-- so prove this lemma (which in this case is nonlinear)</span>\n<span class=\"w\">  </span><span class=\"n\">zify</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"c1\">-- cheat by using Lean integers</span>\n<span class=\"w\">  </span><span class=\"n\">linear_combination</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"c1\">-- found using `polyrith`</span>\n<span class=\"w\">  </span><span class=\"c1\">--nlinarith would also work</span>\n</code></pre></div>",
        "id": 442179528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717402002
    },
    {
        "content": "<p>So NNG is <code>MyNat</code>, the repo above contains <code>MyInt</code> (with the final boss being <code>instance : LinearOrderedCommRing MyInt</code>) and <code>MyRat</code>, I never wrote <code>MyReal</code>, and <code>MyComplex</code> is <a href=\"https://github.com/ImperialCollegeLondon/complex-number-game\">https://github.com/ImperialCollegeLondon/complex-number-game</a> which I never translated into Lean 4 yet.</p>",
        "id": 442180007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717402127
    },
    {
        "content": "<p>If you want to avoid tactics which use Lean integers, then have fun proving that multiplication is well-defined! I could envisage \"NNG2: the tedious levels\". The actual game to write would be \"NNG2, a game for computer scientists: here's how to write tactics which solve all the things you need for MyNat to make defining the integers easy\"</p>",
        "id": 442181098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717402431
    },
    {
        "content": "<p>(I should confess that in the past I have indeed had fun proving that multiplication on MyInt is well-defined using only things I'd proved about MyNat. It's quite an interesting challenge!)</p>",
        "id": 442183243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717403008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Solving.20large.20addition-based.20goals.20painlessly/near/442181098\">said</a>:</p>\n<blockquote>\n<p>If you want to avoid tactics which use Lean integers, then have fun proving that multiplication is well-defined! I could envisage \"NNG2: the tedious levels\". The actual game to write would be \"NNG2, a game for computer scientists: here's how to write tactics which solve all the things you need for MyNat to make defining the integers easy\"</p>\n</blockquote>\n<p>Honestly that's not a bad idea, we need more learning resources for tactic writing</p>",
        "id": 442191304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717405235
    },
    {
        "content": "<p>I would start with tauto though, seems easier than omega</p>",
        "id": 442191518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717405294
    },
    {
        "content": "<p>I do a (pretty poor) job of a tactic-writing demo in NNG in Algorithm world; I showcase</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">macro</span><span class=\"w\"> </span><span class=\"s2\">\"simp_add\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"o\">(</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">add_left_comm</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">add_comm</span><span class=\"o\">]))</span>\n</code></pre></div>\n<p>for an <code>abel</code>-like tactic, and make an instance of <code>DecidableEq ℕ</code> so we can prove <code>2 + 2 = 4</code> in a far less painful way (<code>decide</code>) than in the tutorial level (which is about 5 <code>rw [add_succ]</code>s etc), and that's it. There is big scope for more here, but of course I'm not the person to do it, and I worry about shoehorning it into the Lean gameserver framework unless we encourage users early on to break out of the standard \"type in a line and press execute\" format and move onto the more freeform format that lots of people don't know exists (\"editor mode\") but which you can get to by clicking on <code>&lt;/&gt;</code>:</p>\n<p><a href=\"/user_uploads/3121/qgd12YT8S9RvAMMifcDIffJg/editor.png\">editor.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/qgd12YT8S9RvAMMifcDIffJg/editor.png\" title=\"editor.png\"><img src=\"/user_uploads/3121/qgd12YT8S9RvAMMifcDIffJg/editor.png\"></a></div>",
        "id": 442214156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717410901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Solving.20large.20addition-based.20goals.20painlessly/near/442214156\">said</a>:</p>\n<blockquote>\n<p>I worry about shoehorning it into the Lean gameserver framework</p>\n</blockquote>\n<p>I would love to extend the Lean gameserver framework to allow for definitions more broadly, so that one level may ask a user to define a datatype or function and then later levels ask users to prove things about or build on-top of those definitions.</p>\n<p>Doing this is a game-friendly usable manner feels like it would provide a very challenging design problem.</p>\n<p>I've been playing around with the server a bit, but I'm not confident I'd be equal to the task.</p>",
        "id": 442580629,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1717520819
    }
]