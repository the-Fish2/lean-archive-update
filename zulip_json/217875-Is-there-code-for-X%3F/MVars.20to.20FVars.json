[
    {
        "content": "<p>Given a array of <code>Lean.Expr</code>s that contain <code>MVars</code>, is there an easy way to turn all MVars into local declarations (assigned ones as <code>let</code> declarations, or instantiated if that’s easier; unassigned one as fresh variables).</p>\n<p>(A bit like <code>abstractMVars</code> followed by <code>lambdaTelescope</code>, but visiting more than one expression).</p>",
        "id": 421490281,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707930034
    },
    {
        "content": "<p>Maybe cargo-culting <code>abstractMVars</code> is the way to go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mvarsToContext</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">es</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">mctx</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMCtx</span><span class=\"o\">),</span> <span class=\"n\">lctx</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">),</span> <span class=\"n\">ngen</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getNGen</span><span class=\"o\">),</span> <span class=\"n\">abstractLevels</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}</span>\n  <span class=\"n\">for</span> <span class=\"n\">e'</span> <span class=\"k\">in</span> <span class=\"n\">es</span> <span class=\"k\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">AbstractMVars.abstractExprMVars</span> <span class=\"n\">e'</span> <span class=\"n\">s</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">AbstractMVars.abstractExprMVars</span> <span class=\"n\">e</span> <span class=\"n\">s</span>\n  <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">s'</span>\n  <span class=\"n\">setNGen</span> <span class=\"n\">s.ngen</span>\n  <span class=\"n\">setMCtx</span> <span class=\"n\">s.mctx</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">s.lctx.mkForall</span> <span class=\"n\">s.fvars</span> <span class=\"n\">e</span>\n  <span class=\"n\">forallBoundedTelescope</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">s.fvars.size</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 421491508,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707930396
    }
]