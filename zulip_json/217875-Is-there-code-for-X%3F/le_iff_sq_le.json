[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/pulling.20continuity.20past.20integrals/near/411054948\">said</a>:</p>\n<blockquote>\n<p>I think it isn't the first time I don't manage to find the first lemma above. Is it really missing?</p>\n</blockquote>\n<p>I think you're meant to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=pow_left_strictMonoOn#doc\">docs#pow_left_strictMonoOn</a></p>",
        "id": 411055271,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704304618
    },
    {
        "content": "<p>Indeed, I think the first lemma is missing.</p>",
        "id": 411055272,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704304619
    },
    {
        "content": "<p>Eric, that only gives you one direction of the <code>↔</code></p>",
        "id": 411055483,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704304695
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StrictMonoOn.le_iff_le#doc\">docs#StrictMonoOn.le_iff_le</a></p>",
        "id": 411055512,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704304706
    },
    {
        "content": "<p>Oh I see what you mean. That seems really messy, I vote for just adding the lemma.</p>",
        "id": 411055778,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704304818
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>; this little discussion should be moved to a separate thread probably</p>",
        "id": 411055836,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704304842
    },
    {
        "content": "<p>Eric, do you mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">le_iff_sq_le</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">pow_left_strictMonoOn</span> <span class=\"n\">zero_lt_two.ne'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_iff_le</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 411056330,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704304996
    },
    {
        "content": "<p>If there is nothing simpler then I think it is worth adding the lemma.</p>",
        "id": 411056388,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704305011
    },
    {
        "content": "<p>it's what I've been using for the past little bit; in some slight solace it holds for linear ordered semirings too! but I agree it's messy</p>",
        "id": 411056564,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704305056
    },
    {
        "content": "<p>Your lemma is not there because you wrote it the wrong way around!</p>",
        "id": 411062427,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704307500
    },
    {
        "content": "<p>Do you mean switching sides of the iff?</p>",
        "id": 411062613,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704307580
    },
    {
        "content": "<p>It doesn't change anything, right?</p>",
        "id": 411062631,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704307587
    },
    {
        "content": "<p>I guess it changes whether the lemma obeys the \"left hand side should be more complicated than the right hand side\" rule</p>",
        "id": 411062700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704307619
    },
    {
        "content": "<p>The proof is still the complicated</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">le_iff_sq_le</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">pow_left_strictMonoOn</span> <span class=\"n\">zero_lt_two.ne'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_iff_le</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span>\n</code></pre></div>",
        "id": 411062713,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704307624
    },
    {
        "content": "<p>right?</p>",
        "id": 411062731,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704307633
    },
    {
        "content": "<p>I would be happy to add to Mathlib</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">pow_le_pow_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">pow_left_strictMonoOn</span> <span class=\"n\">n.succ_ne_zero</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_iff_le</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sq_le_sq_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pow_le_pow_iff</span> <span class=\"mi\">1</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span>\n</code></pre></div>\n<p>What do you think <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>?</p>",
        "id": 411063071,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704307782
    },
    {
        "content": "<p>Golfing/finding the right general statement for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">abs_le_of_mem_uIoc_zero</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">Ι</span> <span class=\"mi\">0</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">Set.mem_uIoc.1</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">(⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">abs_of_pos</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">abs_of_pos</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hx.trans_le</span> <span class=\"n\">hxy</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_nonpos</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">abs_of_neg</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hxy.trans_le</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">neg_le_neg</span> <span class=\"n\">hxy.le</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sq_le_of_mem_uIoc_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">Ι</span> <span class=\"mi\">0</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">pow_le_pow_left</span> <span class=\"o\">(</span><span class=\"n\">abs_nonneg</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs_le_of_mem_uIoc_zero</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>would also be nice.</p>",
        "id": 411063357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704307909
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=pow_le_pow_iff_left#doc\">docs#pow_le_pow_iff_left</a> is good enough?</p>",
        "id": 411063688,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704308050
    },
    {
        "content": "<p>Note that I added this lemma two weeks ago.</p>",
        "id": 411063803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704308119
    },
    {
        "content": "<p>Btw please don't touch anything in the algebraic order part of mathlib right now.I have a 5.5k lines PR to get merged, and the lemmas you care about are right in the middle of my diff.</p>",
        "id": 411063971,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704308202
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9411\">#9411</a> for reference</p>",
        "id": 411063984,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704308210
    },
    {
        "content": "<p>I can't think of a much better way to state your lemmas. You should use <code>uIcc</code> but that's it.</p>",
        "id": 411064204,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704308291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/le_iff_sq_le/near/411063688\">said</a>:</p>\n<blockquote>\n<p>I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=pow_le_pow_iff_left#doc\">docs#pow_le_pow_iff_left</a> is good enough?</p>\n</blockquote>\n<p>Great. That's one more mysterious exact? failure...</p>",
        "id": 411064615,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704308460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/le_iff_sq_le/near/411064204\">said</a>:</p>\n<blockquote>\n<p>I can't think of a much better way to state your lemmas. You should use <code>uIcc</code> but that's it.</p>\n</blockquote>\n<p>The relevant one for interval integral is <code>uIoc</code>.</p>",
        "id": 411064693,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704308484
    },
    {
        "content": "<p>Ah sure but one is easily a subset of the other</p>",
        "id": 411066044,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704308933
    },
    {
        "content": "<p>Of course I agree the uIoc version should be deduced from a uIcc one.</p>",
        "id": 411066138,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704308977
    },
    {
        "content": "<p>And I won't touch this, don't worry about your PR.</p>",
        "id": 411066156,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704308990
    },
    {
        "content": "<p>I was only trying to help Alex K in another thread.</p>",
        "id": 411066231,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704309005
    }
]