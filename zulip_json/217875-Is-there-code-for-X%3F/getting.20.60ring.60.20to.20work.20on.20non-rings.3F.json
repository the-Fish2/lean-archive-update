[
    {
        "content": "<p>Is there such a thing as <code>ring?</code>? It would be quite useful, e.g., in situations like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℂ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">intVIII</span> <span class=\"n\">intVII</span> <span class=\"n\">intV</span> <span class=\"n\">intIV</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">intVIII</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">intVII</span> <span class=\"bp\">+</span> <span class=\"n\">intV</span> <span class=\"bp\">+</span> <span class=\"n\">intIV</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">intVII</span> <span class=\"bp\">-</span> <span class=\"n\">intV</span> <span class=\"bp\">+</span> <span class=\"n\">intVIII</span> <span class=\"bp\">-</span> <span class=\"n\">intIV</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- ring fails</span>\n</code></pre></div>\n<p>Here is some annoying trivial identity, but <code>ring</code> fails because <code>E</code> is not assumed to be a ring. But if we replace the type of  <code>intIV : E</code> etc by <code>ℂ</code>, then <code>ring</code> works. Could <code>ring?</code> say what it did to prove the identity in the case of <code>ℂ</code>, so I can try the same series of moves in the more general setting...?</p>",
        "id": 421285675,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707843263
    },
    {
        "content": "<p>The way <code>ring</code> works means that a <code>ring?</code> doesn't really make sense, unfortunately.</p>",
        "id": 421286137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707843423
    },
    {
        "content": "<p>I guess that in principle, one could try to reconstruct a sequence of <code>rw</code>s from the term that <code>ring</code> produces (if it produces one). But that seems nontrivial.</p>",
        "id": 421286261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707843476
    },
    {
        "content": "<p>But there is <code>ring1</code>, right? Doesn't that try to put expressions in \"normal form\"?</p>",
        "id": 421286395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707843508
    },
    {
        "content": "<p>No, that's <code>ring_nf</code></p>",
        "id": 421286731,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707843609
    },
    {
        "content": "<p>does <code>abel</code> work here?</p>",
        "id": 421286824,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707843639
    },
    {
        "content": "<p>Yes!! Thank you!</p>",
        "id": 421287010,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707843703
    },
    {
        "content": "<p>It's not a ring but it is an abelian group:-)</p>",
        "id": 421295069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707846556
    },
    {
        "content": "<p>Yep, I didn't know <code>abel</code> existed. Learn something new every day!...</p>",
        "id": 421315941,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707854365
    },
    {
        "content": "<p>Maybe you could benefit from rereading Chapter 8 of <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> then.</p>",
        "id": 421317368,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707854909
    },
    {
        "content": "<p>(this is where <code>abel</code> is mentioned in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a>)</p>",
        "id": 421317422,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707854931
    },
    {
        "content": "<p>I'm sure I'd benefit a lot from reading Chapters 1 - 11!... (Just need a few more hours in a day...)</p>",
        "id": 421317715,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707855036
    }
]