[
    {
        "content": "<p>Is there somewhere:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mono_of_pullback_mono</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HasPullback</span> <span class=\"n\">f</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mono</span> <span class=\"o\">(</span><span class=\"n\">pullback.fst</span> <span class=\"o\">:</span> <span class=\"n\">pullback</span> <span class=\"n\">f</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Mono</span> <span class=\"n\">f</span> <span class=\"n\">where</span>\n  <span class=\"n\">right_cancellation</span> <span class=\"o\">{</span><span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">heq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">pullback.lift</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">heq</span> <span class=\"bp\">=</span> <span class=\"n\">pullback.lift</span> <span class=\"n\">g</span> <span class=\"n\">g</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">cancel_mono</span> <span class=\"n\">pullback.fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">limit.lift_π</span><span class=\"o\">,</span> <span class=\"n\">PullbackCone.mk_π_app</span><span class=\"o\">]</span>\n    <span class=\"n\">convert_to</span> <span class=\"n\">pullback.lift</span> <span class=\"n\">g</span> <span class=\"n\">g</span> <span class=\"n\">rfl</span> <span class=\"bp\">≫</span> <span class=\"n\">pullback.snd</span> <span class=\"bp\">=</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">pullback.lift_snd</span> <span class=\"n\">g</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">limit.lift_π</span><span class=\"o\">,</span> <span class=\"n\">PullbackCone.mk_π_app</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 412751942,
        "sender_full_name": "Christian Merten",
        "timestamp": 1705184907
    },
    {
        "content": "<p>No but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Diagonal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mono_of_pullback_mono</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HasPullback</span> <span class=\"n\">f</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mono</span> <span class=\"o\">(</span><span class=\"n\">pullback.fst</span> <span class=\"o\">:</span> <span class=\"n\">pullback</span> <span class=\"n\">f</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Mono</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">isIso_of_mono_of_isSplitEpi</span> <span class=\"o\">(</span><span class=\"n\">pullback.fst</span> <span class=\"o\">:</span> <span class=\"n\">pullback</span> <span class=\"n\">f</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pullback.diagonal_isKernelPair</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono_of_isIso_fst</span>\n</code></pre></div>",
        "id": 412776443,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1705202824
    },
    {
        "content": "<p>I'd say you can make the proof inline unless you need to use it several times.</p>",
        "id": 412777376,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1705203678
    },
    {
        "content": "<p>And also for the title, I think diagonal map usually refers to <code>X ⟶ pullback f f</code>and I think we are indeed missing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Diagonal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span> <span class=\"n\">pullback</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mono_of_diagonal_epi</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HasPullback</span> <span class=\"n\">f</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Epi</span> <span class=\"o\">(</span><span class=\"n\">pullback.diagonal</span> <span class=\"n\">f</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Mono</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">isIso_of_epi_of_isSplitMono</span> <span class=\"o\">(</span><span class=\"n\">pullback.diagonal</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">IsIso</span> <span class=\"o\">(</span><span class=\"n\">pullback.fst</span> <span class=\"o\">:</span> <span class=\"n\">diagonalObj</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">IsIso.inv_eq_of_hom_inv_id</span> <span class=\"o\">(</span><span class=\"n\">diagonal_fst</span> <span class=\"n\">f</span><span class=\"o\">))]</span>\n    <span class=\"n\">infer_instance</span>\n  <span class=\"o\">(</span><span class=\"n\">pullback.diagonal_isKernelPair</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono_of_isIso_fst</span>\n</code></pre></div>",
        "id": 412777377,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1705203680
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 412799589,
        "sender_full_name": "Christian Merten",
        "timestamp": 1705225161
    }
]