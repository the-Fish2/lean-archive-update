[
    {
        "content": "<p>I recently wrote this lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">StateM.set_set_then</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">StateM</span> <span class=\"n\">σ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">do</span>\n      <span class=\"n\">set</span> <span class=\"n\">s</span>\n      <span class=\"n\">set</span> <span class=\"n\">s'</span>\n      <span class=\"n\">q</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"k\">do</span>\n      <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">s'</span>\n      <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">s</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">StateT.run_bind</span><span class=\"o\">,</span> <span class=\"n\">StateT.run_set</span><span class=\"o\">,</span> <span class=\"n\">Id.pure_eq</span><span class=\"o\">,</span> <span class=\"n\">Id.bind_eq</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>And several others like it to manipulate State monadic programs. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is this the sort of thing that counts as \"monadic verification support\" on the Std4 roadmap? Should I think about cleaning these lemmas up and PRing them there/does there already exist something like this in Lean/Std/Mathlib?</p>",
        "id": 419747769,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707094917
    },
    {
        "content": "<p>this should probably be done in the generality of <code>StateT</code> when possible</p>",
        "id": 419747855,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707094986
    },
    {
        "content": "<p>I'm a bit dubious that this actually scales up to a full verification rewrite system</p>",
        "id": 419747887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707095032
    },
    {
        "content": "<p>my impression playing with similar projects is that you end up just unfolding the do notation into lambdas and state properties about the result of <code>StateT.run ...</code></p>",
        "id": 419747961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707095078
    },
    {
        "content": "<p>I mean, it seems fine enough as a rewrite rule, it just doesn't look like enough in general</p>",
        "id": 419748010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707095153
    },
    {
        "content": "<p>I think some combination of <span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span>  and Leo will say more about this in the near future, but \"monadic verification support\" is a big undertaking, and we <em>very</em> much want a good solution, but are not excited about having partial solutions in Std.</p>",
        "id": 419748956,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707096055
    },
    {
        "content": "<p>Ok then, I won't PR it. Mario, I am indeed trying to unfold properties about the result of <code>StateT.run</code>, but <code>simp</code> kept timing out, so I wrote these lemmas hoping I could do some intermediate simplification to speed things up.</p>",
        "id": 419750480,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707097238
    },
    {
        "content": "<p>That sounds worth investigation, do you have a MWE?</p>",
        "id": 419772966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707114977
    },
    {
        "content": "<p>Well, I think the issue is that if I minimized it, it probably wouldn't time out any more.</p>",
        "id": 419884356,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707151652
    },
    {
        "content": "<p>Let me try and rework it.</p>",
        "id": 419884998,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707151837
    },
    {
        "content": "<p>Incredible, after months of trying to prove this lemma I have miraculously found the right combination of <code>maxHeartbeats</code> <code>maxRecDepth</code> and order of simp lemma applications to prove it. I have no idea why it didn't work before, I could have sworn I had tried all of these tricks in almost every conceivable permutation.</p>",
        "id": 419902777,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707157785
    }
]