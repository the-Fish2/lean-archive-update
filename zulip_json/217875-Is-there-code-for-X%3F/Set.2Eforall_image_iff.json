[
    {
        "content": "<p>We have <code>Finset.forall_image</code> and <code>Set.forall_image2_iff</code>, so I'm surprised that I can't find <code>Set.forall_image_iff</code>.  Is that because it's handlable with other simps?  It would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Set.forall_image_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422610363,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708519966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> has marked this topic as resolved.</p>",
        "id": 422610384,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708519974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> has marked this topic as unresolved.</p>",
        "id": 422610407,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708519981
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.ball_image_iff#doc\">docs#Set.ball_image_iff</a></p>",
        "id": 422611276,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708520276
    },
    {
        "content": "<p>One of the all-time winners for worst lemma name</p>",
        "id": 422611373,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708520295
    },
    {
        "content": "<p>Thanks.  Yes, it didn't occur to me to search for ball.</p>",
        "id": 422611402,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708520306
    },
    {
        "content": "<p>Actually I'm really annoyed by this name (and have been for a long time) and I have five minutes. Let me open a PR.</p>",
        "id": 422611515,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708520346
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 422611553,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708520358
    },
    {
        "content": "<p>Can't we just add lots of aliases instead of deleting lemma names?</p>",
        "id": 422612413,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708520589
    },
    {
        "content": "<p>I don't see why every lemma has to have a unique name</p>",
        "id": 422612458,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708520602
    },
    {
        "content": "<p>Yeah but <code>Set.mem_ball_iff</code> really is just a bad name</p>",
        "id": 422613226,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708520818
    },
    {
        "content": "<p>What did you change it to?</p>",
        "id": 422614470,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708521197
    },
    {
        "content": "<p>I'm going to change it to <code>Set.forall_mem_image</code></p>",
        "id": 422614969,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708521356
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10816\">#10816</a></p>",
        "id": 422646638,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708530178
    },
    {
        "content": "<p>Looks good (modulo the linting), thanks! I'd like a second opinion before borsing it, though, because these names have been here for so long that there may be a reason.</p>",
        "id": 422648853,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708530748
    },
    {
        "content": "<p>Feel free to push fixes. I need to work for the next few hours.</p>",
        "id": 422650360,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708531121
    },
    {
        "content": "<p>I agree that this name was especially bad. I do think we should err against fully changing names in future as opposed to just adding aliases</p>",
        "id": 422652590,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708531658
    },
    {
        "content": "<p>I don't understand your stance. Most lemma names are clear improvements. It's quite rare that a lemma has several valid names</p>",
        "id": 422672427,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708537062
    },
    {
        "content": "<p>I can think of many. Plus, names are cheap - why do we care so much if people choose the wrong one? I think this can only be a positive to discoverability (with the caveat that maybe tools like Loogle need to handle aliases especially; not sure if they do already)</p>",
        "id": 422682807,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708541034
    },
    {
        "content": "<p>I think a norm of leaving old names in place with a comment pointing to the new one would be great.  But I agree this would be a shift in mathlib policy.</p>",
        "id": 422694009,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708544759
    },
    {
        "content": "<p>One can add the old name as a deprecated alias (to help migration downstream).</p>",
        "id": 422696176,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708545650
    },
    {
        "content": "<p>But I'm not sure why it needs to be deprecates. There is zero maintenance overhead to keeping names around. I'd favour deprecating maybe particularly bad names like this one, but in general I don't know why we can't have <code>two_plus_two_eq</code> and <code>two_plus_two_eq_four</code></p>",
        "id": 422698750,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708546741
    }
]