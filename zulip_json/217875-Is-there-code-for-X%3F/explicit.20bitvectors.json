[
    {
        "content": "<p>Suppose I want to write a definition of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b3</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BitVec</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getMsb</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">b0</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getMsb</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b1</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getMsb</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b2</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getMsb</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">b3</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>What's the easiest way to define <code>foo</code> and prove those properties? When bitvectors were represented by lists of booleans, we could take the definition to be <code>{ val := [b0, b1, b2, b3] }</code> and then the proofs were all <code>rfl</code>.</p>",
        "id": 427841343,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1710900948
    },
    {
        "content": "<p>there should hopefully be a definition such that the proof is <code>by simp [foo]</code> at least</p>",
        "id": 427842799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710901843
    },
    {
        "content": "<p>Yes, I can give you</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b3</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BitVec</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">ofBoolList</span> <span class=\"o\">[</span><span class=\"n\">b0</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">,</span> <span class=\"n\">b3</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getMsb</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">b0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getMsb</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getMsb</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getMsb</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">b3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 427842814,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710901861
    },
    {
        "content": "<p>There's one or two easy sorries, but I could have a PR up shortly.</p>",
        "id": 427842876,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710901896
    },
    {
        "content": "<p>although I think it's weird that <code>getMsb</code> would have this effect in this case, I would expect <code>b0</code> to be the lsb</p>",
        "id": 427842983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710901962
    },
    {
        "content": "<p>I think <code>BE</code> needs to be in the name of <code>ofBoolList</code> there</p>",
        "id": 427843025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710901988
    },
    {
        "content": "<p>Sure.</p>",
        "id": 427843038,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710901998
    },
    {
        "content": "<p>Should there be the pair <code>ofBoolListLE</code> and <code>ofBoolListBE</code>?</p>",
        "id": 427843061,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710902016
    },
    {
        "content": "<p>In the meantime, I got these working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.BitVec.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Sub.Defs</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">BitVec</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">getMsb_cons_zero</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">getMsb</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">getMsb</span><span class=\"o\">,</span> <span class=\"n\">cons</span><span class=\"o\">,</span> <span class=\"n\">ofBool</span><span class=\"o\">]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">getMsb_cons_succ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">getMsb</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">getMsb</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">.</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sub_lt_of_pos_le</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_pos</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">tsub_tsub</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">getMsb</span><span class=\"o\">,</span> <span class=\"n\">cons</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">getMsb</span><span class=\"o\">,</span> <span class=\"n\">cons</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">BitVec</span>\n</code></pre></div>\n<p>I think that will serve my purposes, but I'll be happy to see a nicer solution.</p>",
        "id": 427844294,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1710902797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span>, you may be using an old Std: BitVec is all in the Lean repository now.</p>",
        "id": 427844363,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710902871
    },
    {
        "content": "<p>Also, you need to start using <code>omega</code>. I just also needed to prove <code>getMsb_cons_succ</code>, but just wrote:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">getMsb_cons_succ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getMsb</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x.getMsb</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cons</span><span class=\"o\">,</span> <span class=\"n\">cond_eq_if</span><span class=\"o\">]</span>\n  <span class=\"n\">omega</span>\n</code></pre></div>\n<p>:-)</p>",
        "id": 427845336,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710903591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span>, would you check if <a href=\"https://github.com/leanprover/lean4/pull/3721\">lean#3721</a> covers what you need?</p>",
        "id": 427846914,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710904703
    },
    {
        "content": "<p>Thank you, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> .  I appreciate the help.</p>\n<p><code>ofBoolListBE</code> and <code>getMsb_ofBoolListBE</code> solved the problem I asked about. In terms of recapturing functionality I had with previous versions of <code>BitVec</code>, I needed to convert to and from a <code>Fin n → Bool</code> representation, which I managed to do with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ofFnBE</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BitVec</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ofBoolListBE</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.length_ofFn</span><span class=\"o\">])</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">getMsb_ofFnBE</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">getMsb</span> <span class=\"o\">(</span><span class=\"n\">ofFnBE</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.length_ofFn</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">i.2</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ofFnBE</span><span class=\"o\">,</span> <span class=\"n\">getMsb_cast</span><span class=\"o\">,</span> <span class=\"n\">List.getD_eq_get</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ofFnBE_getMsb</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ofFnBE</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getMsb</span> <span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_of_getMsb_eq</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">getMsb_ofFnBE</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I had a surprisingly hard time proving that <code>toNat</code> is injective, but I managed it with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">toNat_inj</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b1.toNat</span> <span class=\"bp\">=</span> <span class=\"n\">b2.toNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">b2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">b1</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">rcases</span> <span class=\"n\">b2</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">b2</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 428216401,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1711054579
    },
    {
        "content": "<p>These look good. Would you like to PR them?</p>",
        "id": 428218958,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711055598
    },
    {
        "content": "<p>Isn't <code>_inj</code> usually reserved for the <code>Iff</code> lemma?</p>",
        "id": 428229277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711060529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/explicit.20bitvectors/near/428218958\">said</a>:</p>\n<blockquote>\n<p>Would you like to PR them?</p>\n</blockquote>\n<p>Yes, I'll try to do this soon. (I am swamped.)</p>",
        "id": 429095830,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1711212449
    }
]