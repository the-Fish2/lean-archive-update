[
    {
        "content": "<p>What's a quick way to show this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ContDiffOn.hasDeriv_deriv</span> <span class=\"o\">{</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">œÜDiff</span> <span class=\"o\">:</span> <span class=\"n\">ContDiffOn</span> <span class=\"n\">‚Ñù</span> <span class=\"mi\">1</span> <span class=\"n\">œÜ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x_in_s</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasDerivAt</span> <span class=\"n\">œÜ</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">œÜ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 425986377,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1710182313
    },
    {
        "content": "<p>Also this one please: (basically trying to extract the expected information out of <code>ContDiff _ 1</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ContDiffOn.continuousOn_deriv</span> <span class=\"o\">{</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">œÜDiff</span> <span class=\"o\">:</span> <span class=\"n\">ContDiffOn</span> <span class=\"n\">‚Ñù</span> <span class=\"mi\">1</span> <span class=\"n\">œÜ</span> <span class=\"o\">(</span><span class=\"n\">Set.uIcc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">ContinuousOn</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">œÜ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.uIcc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 425986725,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1710182434
    },
    {
        "content": "<p>The second one is almost solved by </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ContDiffOn.continuousOn_deriv</span> <span class=\"o\">{</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">œÜDiff</span> <span class=\"o\">:</span> <span class=\"n\">ContDiffOn</span> <span class=\"n\">‚Ñù</span> <span class=\"mi\">1</span> <span class=\"n\">œÜ</span> <span class=\"o\">(</span><span class=\"n\">Set.uIcc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">ContinuousOn</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">œÜ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.uIcc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ContDiffOn.continuousOn</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span><span class=\"o\">:=</span><span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">contDiffOn_succ_iff_deriv_of_isOpen</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>It would work on <code>Set.Ioo a b</code>, the closed interval needs some more massaging. This is also nice example for <code>fun_prop</code>, a tactic that would ideally solve this automatically but it fails completely here.</p>",
        "id": 425999528,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1710187378
    },
    {
        "content": "<p>I‚Äôm not sure the first one is true.</p>",
        "id": 426003187,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710188917
    },
    {
        "content": "<p>And indeed the following isn‚Äôt super promising:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ContDiffOn</span> <span class=\"n\">‚Ñù</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">contDiffOn_id.congr</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 426003927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710189197
    },
    {
        "content": "<p>So you lemma would apply to the absolute value function with <code>s = {0}</code>, <code>x = 0</code> and <code>œÜ = abs</code>.</p>",
        "id": 426004067,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710189255
    },
    {
        "content": "<p>Argh. You would think whatever <code>ContDiffOn _ 1</code> is doing under the hood, it means \"once continuously differentiable\"... which in particular would be (a) differentiable, and (b) the derivative would be continuous. Not so, you say!... :(</p>",
        "id": 426011424,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1710192447
    },
    {
        "content": "<p>Ok, what if <code>s</code> in the first one is restricted to an interval <code>Set.Ioo a b</code> with <code>a &lt; b</code>...?</p>",
        "id": 426011642,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1710192524
    },
    {
        "content": "<p>Then there is no problem. The whole discussion is what it means to be differentiable on a set that is not open. On an open set there is no subtlety.</p>",
        "id": 426013770,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710193442
    },
    {
        "content": "<p>The problem is your statement mixes an assumption that see only the restriction of <code>œÜ</code> to <code>s</code> with a conclusion that has nothing to do with <code>s</code>.</p>",
        "id": 426013915,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710193501
    },
    {
        "content": "<p>Ok good; and is there easy API to conclude <code>HasDerivAt œÜ (deriv œÜ x) x</code>? (I didn't find it...)</p>",
        "id": 426013950,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1710193518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Mixing.20.60ContDiffOn.60.20and.20.60deriv.60/near/426013915\">said</a>:</p>\n<blockquote>\n<p>The problem is your statement mixes an assumption that see only the restriction of <code>œÜ</code> to <code>s</code> with a conclusion that has nothing to do with <code>s</code>.</p>\n</blockquote>\n<p>(Well, I'd asked for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>‚àà</mo><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">x\\in s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚àà</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span>, so not <em>nothing</em>...?)</p>",
        "id": 426014023,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1710193552
    },
    {
        "content": "<p>This is not the conclusion.</p>",
        "id": 426014127,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710193584
    },
    {
        "content": "<p><code>HasDerivAt</code> has nothing specific to <code>s</code>.</p>",
        "id": 426014173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710193619
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContDiffOn.contDiffAt#doc\">docs#ContDiffOn.contDiffAt</a> asking s is a neighborhood of x</p>",
        "id": 426014174,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1710193620
    },
    {
        "content": "<p>Sure, asking to <code>s</code> is open is too much, being a neighborhood of <code>x</code> is enough.</p>",
        "id": 426014254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710193675
    },
    {
        "content": "<p>Thanks, and is there then API connecting <code>ContDiffAt</code> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>‚â•</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n\\ge1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚â•</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> to <code>HasDerivAt f (deriv f x) x</code>...?</p>",
        "id": 426014310,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1710193686
    },
    {
        "content": "<p>Yes, there are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContDiffAt.hasStrictDerivAt#doc\">docs#ContDiffAt.hasStrictDerivAt</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasStrictDerivAt.hasDerivAt#doc\">docs#HasStrictDerivAt.hasDerivAt</a></p>",
        "id": 426014646,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1710193863
    },
    {
        "content": "<p>Ah, perfect! <code>ContDiffAt.hasStrictDerivAt</code> is what I couldn't find...</p>",
        "id": 426025906,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1710198854
    }
]