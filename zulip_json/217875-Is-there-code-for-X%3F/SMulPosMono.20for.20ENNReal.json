[
    {
        "content": "<p>I needed and proved SMulPosMono for ENNReal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ENNReal</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ENNReal.instSMulPosMono</span> <span class=\"o\">:</span> <span class=\"n\">SMulPosMono</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">hnm</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nsmul_eq_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">gcongr</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ENNReal.instPosSMulMono</span> <span class=\"o\">:</span> <span class=\"n\">PosSMulMono</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">hnm</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nsmul_eq_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">gcongr</span>\n</code></pre></div>\n<p>However the SMulPosMono docstring tells me I should probably not prove it directly and it should follow from other classes. The question is: do you see something else I should prove about ENNReal that would imply that? ENNReal is not an OrderedSMul nor a SMulPosStrictMono because of infinity.</p>",
        "id": 416724473,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1705650492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> (pinged because you authored the SMulPosMono file)</p>",
        "id": 416724635,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1705650586
    },
    {
        "content": "<p>IMHO, we should have instances for <code>Nat</code> and <code>Int</code> that assume monotonicity of addition and nothing more.</p>",
        "id": 416725764,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705651113
    },
    {
        "content": "<p>I think what you're doing is correct, Rémy.</p>",
        "id": 416727851,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705652050
    },
    {
        "content": "<p>I purposely wrote a somewhat aggressive docstring to make sure we don't accidentally settle on a wrong design decision too quickly, but here this looks fine.</p>",
        "id": 416727974,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705652118
    },
    {
        "content": "<p>I agree with Yury that a proof for much more general types is possible, but I don't know the classes related to order and operations.<br>\nMy proof above generalizes to the following, but there should be no need for a multiplication:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharZero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SMulPosMono</span> <span class=\"n\">ℕ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">hnm</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nsmul_eq_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">gcongr</span>\n</code></pre></div>\n<p>Should I use something like <code>[CovariantClass α α (· + · ) (· ≤ ·)]</code>?</p>",
        "id": 416729262,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1705652653
    },
    {
        "content": "<p>That works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Function.swap</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SMulPosMono</span> <span class=\"n\">ℕ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">hnm</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_eq</span><span class=\"o\">,</span> <span class=\"n\">nonpos_iff_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hnm</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hnm</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_eq</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hnm</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">le_rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"n\">hnm</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">hnm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">AddMonoid.nsmul_succ</span> <span class=\"n\">m</span> <span class=\"n\">b</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nsmul_eq_smul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">conv_lhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">add_le_add</span> <span class=\"n\">hb</span> <span class=\"n\">le_rfl</span>\n</code></pre></div>",
        "id": 416730616,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1705653280
    },
    {
        "content": "<p>Might as well use <code>OrderedAddCommMonoid</code></p>",
        "id": 416737115,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705655904
    },
    {
        "content": "<p>I think that either one of <code>CovariantClass</code> assumptions should be enough but I'm on a phone now, so can't test.</p>",
        "id": 416747011,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705659473
    },
    {
        "content": "<p>You're right, I can remove one of the two CovariantClass if I replace <code>add_le_add</code> by <code>add_le_add_right</code> on the last line.</p>",
        "id": 416972310,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1705740485
    }
]