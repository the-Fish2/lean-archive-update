[
    {
        "content": "<p>I'm surprised there's no one-liner closing this? (If a function's image is <code>univ</code>, then the function is <code>Surjective</code>.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- exact? fails</span>\n<span class=\"c1\">-- simp? fails</span>\n<span class=\"c1\">-- apply? junk</span>\n<span class=\"c1\">-- rw? junk</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 420351293,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707343587
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.range_iff_surjective#doc\">docs#Set.range_iff_surjective</a></p>",
        "id": 420351623,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707343740
    },
    {
        "content": "<p>I don't understand why <code>simp</code> is not firing. We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.image_univ#doc\">docs#Set.image_univ</a></p>",
        "id": 420351829,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707343836
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">Set.range_iff_surjective.mp</span> <span class=\"o\">(</span><span class=\"n\">image_univ</span> <span class=\"bp\">▸</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 420351883,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707343868
    },
    {
        "content": "<p>Because I forgot <code>at hf</code></p>",
        "id": 420351948,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707343899
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hf</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>works, and from here it's easy to find Jireh's proof.</p>",
        "id": 420352071,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707343945
    },
    {
        "content": "<p>Ah! So I needed to <code>simp at hf</code> first. I wouldn't have thought of that...</p>",
        "id": 420352121,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707343986
    },
    {
        "content": "<p>(Is there a yoga for why that would help?)</p>",
        "id": 420352166,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707344007
    },
    {
        "content": "<p>The thing to realize is that <code>f '' univ</code> is not the canonical spelling, it's <code>Set.range f</code>.</p>",
        "id": 420352177,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707344014
    },
    {
        "content": "<p>The idea is <code>f '' univ</code> is a strange way of writing the image</p>",
        "id": 420352215,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707344033
    },
    {
        "content": "<p>I would start your standard list of tactics with <code>simp_all</code>,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp_all</span>\n<span class=\"c1\">-- exact? works</span>\n<span class=\"c1\">-- simp? fails</span>\n<span class=\"c1\">-- apply? junk</span>\n<span class=\"c1\">-- rw? junk</span>\n</code></pre></div>",
        "id": 420352380,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707344095
    },
    {
        "content": "<p>Note that if <code>simp</code> does something, it is almost always a good thing, since a lot of results are written using the <code>simp</code> normal form (exactly as in this case)</p>",
        "id": 420352590,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707344175
    },
    {
        "content": "<p>Yeah, <code>simp</code> normal form is a nice concept to be on top of (and I wasn't on top of it for years). If your hypothesis isn't in simp normal form then it's difficult to use, because there might only be one lemma about it in the whole library, namely the simp lemma turning the hypothesis into its simp normal form where suddenly there are many lemmas which now apply :-)</p>",
        "id": 420353786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707344739
    },
    {
        "content": "<p>Great, that's exactly what I was hoping to learn. <code>simp_all</code> instead of just <code>simp</code>. Love it!</p>",
        "id": 420356723,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707346279
    }
]