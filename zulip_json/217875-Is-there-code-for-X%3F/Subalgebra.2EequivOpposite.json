[
    {
        "content": "<p>Do we have this (or is it correct):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Subalgebra.equivOpposite</span>\n    <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I think we only have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submodule.equivOpposite#doc\">docs#Submodule.equivOpposite</a>, but not the above. Also, I think <code>Submodule.equivOpposite</code> is also an <code>OrderIso</code>, but this is also not in mathlib yet?</p>",
        "id": 431693970,
        "sender_full_name": "Jz Pan",
        "timestamp": 1712427556
    },
    {
        "content": "<p>It seems correct</p>",
        "id": 431695214,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712428496
    },
    {
        "content": "<p>I started with this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">_root_.Subalgebra.fromOpposite</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">MulOpposite.unop</span> <span class=\"o\">(</span><span class=\"n\">Submodule.equivOpposite</span> <span class=\"o\">(</span><span class=\"n\">toSubmodule</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">algebraMap_mem'</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">_root_.Subalgebra.toOpposite</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">where</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">Submodule.equivOpposite.symm</span> <span class=\"o\">(</span><span class=\"n\">MulOpposite.op</span> <span class=\"o\">(</span><span class=\"n\">toSubmodule</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">algebraMap_mem'</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">_root_.Subalgebra.equivOpposite</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but it immediately crashes Lean at the <code>by sorry</code> code <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 431695379,
        "sender_full_name": "Jz Pan",
        "timestamp": 1712428597
    },
    {
        "content": "<p><code>algebraMap_mem' r := sorry</code> works, but <code>algebraMap_mem' r := by sorry</code> crashes</p>",
        "id": 431695593,
        "sender_full_name": "Jz Pan",
        "timestamp": 1712428774
    },
    {
        "content": "<p>OK this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">_root_.Subalgebra.equivOpposite</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">MulOpposite.unop</span> <span class=\"o\">(</span><span class=\"n\">Submodule.equivOpposite</span> <span class=\"o\">(</span><span class=\"n\">toSubmodule</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"bp\">↦</span> <span class=\"n\">S.mul_mem</span> <span class=\"n\">hb</span> <span class=\"n\">ha</span>\n    <span class=\"n\">algebraMap_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">S.algebraMap_mem</span> <span class=\"o\">}</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">Submodule.equivOpposite.symm</span> <span class=\"o\">(</span><span class=\"n\">MulOpposite.op</span> <span class=\"o\">(</span><span class=\"n\">toSubmodule</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"bp\">↦</span> <span class=\"n\">S.mul_mem</span> <span class=\"n\">hb</span> <span class=\"n\">ha</span>\n    <span class=\"n\">algebraMap_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">S.algebraMap_mem</span> <span class=\"o\">}</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_rel_iff'</span> <span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Submodule.comap_le_comap_iff_of_surjective</span> <span class=\"o\">(</span><span class=\"n\">MulOpposite.opLinearEquiv</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">surjective</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I still need to define the map from <code>S</code> to <code>equivOpposite S</code>...</p>",
        "id": 431697596,
        "sender_full_name": "Jz Pan",
        "timestamp": 1712430059
    },
    {
        "content": "<p>do we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subring.equivOpposite#doc\">docs#Subring.equivOpposite</a></p>",
        "id": 431700369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712432438
    },
    {
        "content": "<p>It might make sense to build all the weaker versions along the way at the same time</p>",
        "id": 431700393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712432464
    },
    {
        "content": "<p>I raised the issue of the crash <a href=\"#narrow/stream/270676-lean4/topic/entering.20tactic.20mode.20causes.20stack.20overflow/near/431700283\">here</a>.</p>",
        "id": 431700406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712432479
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submonoid.equivOpposite#doc\">docs#Submonoid.equivOpposite</a>, right?</p>",
        "id": 431700409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712432482
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submonoid.op#doc\">docs#Submonoid.op</a> ?</p>",
        "id": 431700420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712432495
    },
    {
        "content": "<p>Aha, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddSubmonoid.opEquiv#doc\">docs#AddSubmonoid.opEquiv</a></p>",
        "id": 431700440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712432521
    },
    {
        "content": "<p>I guess we need to unify these names too</p>",
        "id": 431700481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712432526
    },
    {
        "content": "<p>PR created as <a href=\"https://github.com/leanprover-community/mathlib4/pull/12846\">#12846</a>.</p>",
        "id": 438195877,
        "sender_full_name": "Jz Pan",
        "timestamp": 1715531539
    }
]