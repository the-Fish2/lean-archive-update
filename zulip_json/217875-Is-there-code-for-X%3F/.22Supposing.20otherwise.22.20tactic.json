[
    {
        "content": "<p>Is there a tactic or idiom for obtaining an assumption given a proof that the alternative implies the goal? Informally, \"We may assume that <code>P</code>, for supposing otherwise we reach the desired conclusion.\"</p>\n<p>Here's an example cobbled together to illustrate what I mean. It defines a tactic <code>otherwise</code>, then uses it (below the comment <code>-- Use it</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Parser.Term</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Parser</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">otherwiseDecl</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span>\n  <span class=\"o\">(((</span><span class=\"n\">atomic</span> <span class=\"o\">(</span><span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">Term.binderIdent</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"s2\">\" : \"</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">hygieneInfo</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">termParser</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">Term.binderIdent</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">Parser.optional</span> <span class=\"o\">(</span><span class=\"s2\">\" using \"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">termParser</span><span class=\"o\">))</span> <span class=\"bp\">&gt;&gt;</span>\n    <span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">Term.showRhs</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">term_parser</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"n\">otherwise</span><span class=\"bp\">»</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span><span class=\"o\">:</span><span class=\"n\">leadPrec</span>\n  <span class=\"n\">withPosition</span> <span class=\"o\">(</span><span class=\"s2\">\"otherwise \"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">otherwiseDecl</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">Term.optSemicolon</span> <span class=\"n\">termParser</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">macro</span> <span class=\"bp\">«</span><span class=\"n\">otherwise</span><span class=\"bp\">»</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">expandOtherwise</span> <span class=\"o\">:</span> <span class=\"n\">Macro</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">otherwise</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span> <span class=\"k\">from</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">Classical.em</span> <span class=\"bp\">$</span><span class=\"n\">type</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">¬$</span><span class=\"n\">type</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">otherwise</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span> <span class=\"kd\">by</span><span class=\"bp\">%$</span><span class=\"n\">b</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">Classical.em</span> <span class=\"bp\">$</span><span class=\"n\">type</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span><span class=\"bp\">%$</span><span class=\"n\">b</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">¬$</span><span class=\"n\">type</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">otherwise</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">using</span> <span class=\"bp\">$</span><span class=\"n\">elim</span> <span class=\"k\">from</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Or.elim</span> <span class=\"bp\">$</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">otherwise</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">using</span> <span class=\"bp\">$</span><span class=\"n\">elim</span> <span class=\"kd\">by</span><span class=\"bp\">%$</span><span class=\"n\">b</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Or.elim</span> <span class=\"bp\">$</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span><span class=\"bp\">%$</span><span class=\"n\">b</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwUnsupported</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"otherwise \"</span> <span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">otherwiseDecl</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">refine_lift</span> <span class=\"n\">otherwise</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"bp\">;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"kn\">section</span>\n\n<span class=\"c1\">-- Use it</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">groundbreaking_result</span> <span class=\"n\">easy_case</span> <span class=\"n\">remaining_cases</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">easy_part</span> <span class=\"o\">:</span> <span class=\"n\">easy_case</span> <span class=\"bp\">→</span> <span class=\"n\">groundbreaking_result</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">long_difficult_proof</span> <span class=\"o\">:</span> <span class=\"n\">remaining_cases</span> <span class=\"bp\">→</span> <span class=\"n\">groundbreaking_result</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">hor</span> <span class=\"o\">:</span> <span class=\"n\">easy_case</span> <span class=\"bp\">∨</span> <span class=\"n\">remaining_cases</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">groundbreaking_result</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">otherwise</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">easy_case</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">easy_part</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- h : ¬easy_case</span>\n  <span class=\"c1\">-- ⊢ groundbreaking_result</span>\n  <span class=\"n\">exact</span> <span class=\"n\">long_difficult_proof</span> <span class=\"o\">(</span><span class=\"n\">hor.resolve_left</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">hor</span> <span class=\"o\">:</span> <span class=\"n\">easy_case</span> <span class=\"bp\">∨</span> <span class=\"n\">remaining_cases</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">groundbreaking_result</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">otherwise</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"n\">hor</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">easy_part</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- h : remaining_cases</span>\n  <span class=\"c1\">-- ⊢ groundbreaking_result</span>\n  <span class=\"n\">exact</span> <span class=\"n\">long_difficult_proof</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 435758445,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714225511
    },
    {
        "content": "<p>Isn't that just <code>by_cases</code> though, if you squint a bit?</p>",
        "id": 435758561,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714225602
    },
    {
        "content": "<p>Yeah. Or <code>cases</code>, or <code>apply Or.elim ...</code> (without even squinting), or a simplified kind of <code>wlog</code>. But it has (or could have) a name that expresses its intent, and its indentation is more convenient.</p>",
        "id": 435758864,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714225868
    },
    {
        "content": "<p>I think <code>by_cases</code> is the idiom that I was forgetting. Thanks!</p>",
        "id": 435759028,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714226000
    },
    {
        "content": "<p>That's fair</p>",
        "id": 435759055,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714226025
    },
    {
        "content": "<p>Note that you can also do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n<span class=\"n\">case</span> <span class=\"n\">neg</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"c1\">-- false case</span>\n<span class=\"c1\">-- true case</span>\n</code></pre></div>",
        "id": 435759122,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714226066
    }
]