[
    {
        "content": "<p>Do we have analytic continuation? Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">AnalyticContinuation</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f_on_s</span> <span class=\"o\">:</span> <span class=\"n\">AnalyticOn</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">g_on_t</span> <span class=\"o\">:</span> <span class=\"n\">AnalyticOn</span> <span class=\"n\">ℂ</span> <span class=\"n\">g</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_eq_g_on_cap</span> <span class=\"o\">:</span> <span class=\"n\">Set.EqOn</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">s_open</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t_open</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cap_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">Set.Nonempty</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃!</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">AnalyticOn</span> <span class=\"n\">ℂ</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">Set.EqOn</span> <span class=\"n\">h</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">Set.EqOn</span> <span class=\"n\">h</span> <span class=\"n\">g</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 431432396,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712283236
    },
    {
        "content": "<p>Or even this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">AnalyticContinuation'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f_on_s</span> <span class=\"o\">:</span> <span class=\"n\">AnalyticOn</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">g_on_t</span> <span class=\"o\">:</span> <span class=\"n\">AnalyticOn</span> <span class=\"n\">ℂ</span> <span class=\"n\">g</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u_sub</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u_open</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">u_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">Set.Nonempty</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_eq_g_on_u</span> <span class=\"o\">:</span> <span class=\"n\">Set.EqOn</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set.EqOn</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 431433303,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712283586
    },
    {
        "content": "<p>this is a completely naive guess, but is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AnalyticOn.eqOn_of_preconnected_of_eventuallyEq#doc\">docs#AnalyticOn.eqOn_of_preconnected_of_eventuallyEq</a> related at all?</p>",
        "id": 431433724,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712283916
    },
    {
        "content": "<p>I think that should work, thanks!!</p>",
        "id": 431435198,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712285157
    }
]