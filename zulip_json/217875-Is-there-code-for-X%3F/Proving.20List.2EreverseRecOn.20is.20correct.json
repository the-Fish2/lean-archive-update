[
    {
        "content": "<p>Is this statement provable? It feels like it needs some clever generalization trick that I'm out of practice with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">List</span>\n\n<span class=\"c1\">-- the easy one</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">reverseRecOn_nil</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"o\">[])</span>\n    <span class=\"o\">(</span><span class=\"n\">append_singleton</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]))</span> <span class=\"o\">:</span>\n    <span class=\"n\">reverseRecOn</span> <span class=\"o\">[]</span> <span class=\"n\">nil</span> <span class=\"n\">append_singleton</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- I can't make any progress here</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">reverseRecOn_concat</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"o\">[])</span>\n    <span class=\"o\">(</span><span class=\"n\">append_singleton</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]))</span> <span class=\"o\">:</span>\n    <span class=\"n\">reverseRecOn</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">motive</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">])</span> <span class=\"n\">nil</span> <span class=\"n\">append_singleton</span> <span class=\"bp\">=</span>\n      <span class=\"n\">append_singleton</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">reverseRecOn</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">motive</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"n\">nil</span> <span class=\"n\">append_singleton</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 425635738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709951286
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.reverseRecOn#doc\">docs#List.reverseRecOn</a>)</p>",
        "id": 425635753,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709951319
    },
    {
        "content": "<p>I tried changing the definition to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">reverseRecOn</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"o\">[])</span>\n    <span class=\"o\">(</span><span class=\"n\">append_singleton</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]))</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">reverse</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">motive</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pf1</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">motive</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pf2</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"n\">append_singleton</span> <span class=\"n\">_</span> <span class=\"n\">head</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">reverseRecOn</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"n\">nil</span> <span class=\"n\">append_singleton</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">l.length</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">tail.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">length_reverse</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">length_cons</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.lt_succ</span><span class=\"o\">]</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">InvImage</span><span class=\"o\">,</span> <span class=\"n\">length_reverse</span><span class=\"o\">]</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">pf1</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">reverse</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[])</span> <span class=\"o\">:</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"bp\">$</span><span class=\"n\">h.symm</span><span class=\"o\">)</span>\n  <span class=\"n\">pf2</span> <span class=\"o\">{</span><span class=\"n\">head</span> <span class=\"n\">tail</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">reverse</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reverse</span> <span class=\"n\">tail</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">head</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"bp\">$</span><span class=\"n\">h.symm</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but it didn't seem to help; the <code>match h : _</code> is super hard to do anything with</p>",
        "id": 425635782,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709951347
    },
    {
        "content": "<p>Ah, got it: <a href=\"https://github.com/leanprover-community/mathlib4/pull/11257\">#11257</a></p>",
        "id": 425637727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709953351
    },
    {
        "content": "<p>A follow-up puzzle:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bidirectionalRec_cons_append</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">singleton</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"n\">cons_append</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">])))</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">bidirectionalRec</span> <span class=\"n\">nil</span> <span class=\"n\">singleton</span> <span class=\"n\">cons_append</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">]))</span> <span class=\"bp\">=</span>\n      <span class=\"n\">cons_append</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">bidirectionalRec</span> <span class=\"n\">nil</span> <span class=\"n\">singleton</span> <span class=\"n\">cons_append</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">l</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bidirectionalRec</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">List.cons_append</span><span class=\"o\">,</span> <span class=\"n\">bidirectionalRec</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">List.cons_append</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 425680065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709984859
    },
    {
        "content": "<p>Is there a reason we don't have List.reverseRec?</p>",
        "id": 443327058,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1717776757
    },
    {
        "content": "<p>Looks like an oversight</p>",
        "id": 443327108,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717776795
    },
    {
        "content": "<p>Arguably having <code>On</code> variants of recursion functions is a waste of time</p>",
        "id": 443329908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717778041
    },
    {
        "content": "<p>I agree, especially since nowadays we can choose the order of arguments ourselves using named arguments.</p>",
        "id": 443334587,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717779884
    }
]