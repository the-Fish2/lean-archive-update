[
    {
        "content": "<p>Is there something existing similar to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ε_net</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">M.dist</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n</code></pre></div>\n<p>(I would have written it in terms of being a covering but didn't know how to state it that way.)</p>",
        "id": 420103397,
        "sender_full_name": "Chris Henson",
        "timestamp": 1707242192
    },
    {
        "content": "<p>I don't know the answer, but note that <code>A</code> and <code>N</code> are terms not types, so it might be more idiomatic to write <code>\\forall a \\in A, \\exists n \\in N, ...</code></p>",
        "id": 420104139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707242435
    },
    {
        "content": "<p>If the def exists it probably should appear in the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TotallyBounded#doc\">docs#TotallyBounded</a> ...</p>",
        "id": 420105667,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707242979
    },
    {
        "content": "<p>Not your question, but the canonical way to state this in Lean is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Metric</span>\n<span class=\"kd\">def</span> <span class=\"n\">ε_net</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">ball</span> <span class=\"n\">n</span> <span class=\"n\">ε</span>\n</code></pre></div>",
        "id": 420109833,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1707244436
    },
    {
        "content": "<p>I don't expect this definition to exists, but there might be lemmas that have <code>A ⊆ ⋃ n ∈ N, ball n ε</code> or something similar as an hypothesis/conclusion.</p>",
        "id": 420110014,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1707244497
    },
    {
        "content": "<p>Thank you all, seeing the idiomatic ways to write things is helpful coming from Coq.</p>",
        "id": 420111850,
        "sender_full_name": "Chris Henson",
        "timestamp": 1707245122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"687698\">Chris Henson</span> has marked this topic as resolved.</p>",
        "id": 420111906,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707245139
    },
    {
        "content": "<p>... or <code>A ⊆ Metric.thickening ε n</code>. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Metric.thickening#doc\">docs#Metric.thickening</a></p>",
        "id": 420120746,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707248153
    },
    {
        "content": "<p>We have lemmas about existence of eps nets but no definition.</p>",
        "id": 424903032,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709654625
    }
]