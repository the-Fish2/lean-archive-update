[
    {
        "content": "<p>Hi, I want to establish the following, which I have a hard time in doing. Is this in Mathlib under some name that I couldn't find, or is this missing? If the latter, does anyone have any pointers? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.CardinalInter</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Ordinal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Cofinality</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span> <span class=\"n\">Cardinal</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">{</span><span class=\"n\">hreg</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.IsRegular</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">#↑</span><span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">#↑</span><span class=\"o\">(</span><span class=\"n\">Prod.snd</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Prod.snd</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#↑</span><span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Prod.snd</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 435552365,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714124754
    },
    {
        "content": "<p>Intuitively, sending a point to its projection should be an injective function, but I've not been particularly succesful with that attempt</p>",
        "id": 435552746,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714124893
    },
    {
        "content": "<p>I can establish that the function is injective: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#↑</span><span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Prod.snd</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Prod.mk.eta</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hxy</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 435553722,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714125246
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.CardinalInter</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Ordinal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Cofinality</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span> <span class=\"n\">Cardinal</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">{</span><span class=\"n\">hreg</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.IsRegular</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">#↑</span><span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">#↑</span><span class=\"o\">(</span><span class=\"n\">Prod.snd</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Prod.snd</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#↑</span><span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Prod.snd</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">mk_le_of_injective</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨⟨</span><span class=\"n\">a.1.fst</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">a.1.snd</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩⟩)</span>\n    <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n    <span class=\"n\">use</span> <span class=\"n\">a.1.snd</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n    <span class=\"n\">use</span> <span class=\"n\">a.1.fst</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Prod.ext_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">SetCoe.ext</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 435554173,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714125431
    },
    {
        "content": "<p>Possibly you can write my function as a restriction of your <code>f</code>, but that seems harder than writing out the function you need manually</p>",
        "id": 435555042,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714125754
    },
    {
        "content": "<p>Excellent, thank you! Do you think this is worth PR'ing in some form? (I'm just using it as a building block in 1 lemma at the moment)</p>",
        "id": 435555874,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714126069
    },
    {
        "content": "<p>I don't know</p>",
        "id": 435573908,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714133592
    },
    {
        "content": "<p>Of course some assumptions can be dropped here, I forgot to remove them here...<br>\nI've ran into a situation where I wanted this result before, but then I found a (situation-specific) work-around that was shorter than this. In general I guess it may be useful to have? Or some result that establishes that <code>s</code> is a subset of the product in the RHS?</p>",
        "id": 435574681,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714133925
    }
]