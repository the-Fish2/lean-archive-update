[
    {
        "content": "<p>I need this elementary lemma (I have a proof, but surely too long). </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">NoZeroDivisors_iff_IsDomain_or_Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">L</span><span class=\"o\">]:</span>\n    <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">L</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">IsDomain</span> <span class=\"n\">L</span> <span class=\"bp\">∨</span> <span class=\"n\">Subsingleton</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 410898285,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1704225635
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">NoZeroDivisors_iff_IsDomain_or_Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">L</span><span class=\"o\">]:</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">L</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">IsDomain</span> <span class=\"n\">L</span> <span class=\"bp\">∨</span> <span class=\"n\">Subsingleton</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">h.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"gr\">sorry</span><span class=\"o\">)⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">or_iff_not_imp_right</span><span class=\"o\">,</span> <span class=\"n\">not_subsingleton_iff_nontrivial</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">t.to_isDomain</span>\n</code></pre></div>\n<p>where the <code>sorry</code> is that Subsingleton rings are NZDs, I couldn't seem to find that quickly oddly</p>",
        "id": 410899675,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704226224
    },
    {
        "content": "<p>That was the same place I was stuck. Of course one can prove it, but it seems it should be more elementary...</p>",
        "id": 410900946,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1704226959
    },
    {
        "content": "<p>doesn't seem to exist oddly</p>",
        "id": 410901548,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704227307
    },
    {
        "content": "<p>Can be golfed, but everything is more or less there</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.GroupWithZero.Defs</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">NoZeroDivisors_iff_IsDomain_or_Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">L</span><span class=\"o\">]:</span>\n    <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">L</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">IsDomain</span> <span class=\"n\">L</span> <span class=\"bp\">∨</span> <span class=\"n\">Subsingleton</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">nzd</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">nt</span> <span class=\"o\">:</span> <span class=\"n\">Nontrivial</span> <span class=\"n\">L</span>\n    <span class=\"bp\">·</span> <span class=\"n\">left</span>\n      <span class=\"n\">exact</span> <span class=\"n\">IsDomain.mk</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_nontrivial_iff_subsingleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">nt</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Or.inr</span> <span class=\"n\">nt</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">isd</span> <span class=\"n\">ss</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">IsDomain.to_noZeroDivisors</span> <span class=\"n\">L</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">NoZeroDivisors.mk</span>\n      <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n      <span class=\"n\">left</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Subsingleton.eq_zero</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 410904362,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1704228858
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">NoZeroDivisors_iff_IsDomain_or_Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">L</span><span class=\"o\">]:</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">L</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">IsDomain</span> <span class=\"n\">L</span> <span class=\"bp\">∨</span> <span class=\"n\">Subsingleton</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">h.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">NoZeroDivisors.mk</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Subsingleton.eq_zero</span> <span class=\"n\">_</span><span class=\"o\">)))⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">or_iff_not_imp_right</span><span class=\"o\">,</span> <span class=\"n\">not_subsingleton_iff_nontrivial</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">t.to_isDomain</span>\n</code></pre></div>",
        "id": 410905472,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1704229416
    },
    {
        "content": "<p>This lemma might help:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">isDomain_iff_noZeroDivisors_and_nontrivial</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">L</span><span class=\"o\">]:</span>\n    <span class=\"n\">IsDomain</span> <span class=\"n\">L</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">NoZeroDivisors</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">Nontrivial</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">inferInstance</span><span class=\"o\">,</span> <span class=\"n\">inferInstance</span><span class=\"o\">⟩,</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{}⟩</span>\n</code></pre></div>",
        "id": 410909796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704231781
    },
    {
        "content": "<p>What seems to be missing is the instance that a trivial ring has no zero divisors</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n  <span class=\"n\">NoZeroDivisors.mk</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Subsingleton.eq_zero</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 410911942,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1704232989
    },
    {
        "content": "<p>Funnily, trying to apply lazily your lemma led me to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">L</span><span class=\"o\">]:</span>\n    <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">L</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">IsDomain</span> <span class=\"n\">L</span> <span class=\"bp\">∨</span> <span class=\"n\">Subsingleton</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">classical</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">isDomain_iff_noZeroDivisors_and_nontrivial</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">not_nontrivial_iff_subsingleton</span><span class=\"o\">]</span>\n    <span class=\"n\">generalize</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n    <span class=\"n\">generalize</span> <span class=\"n\">Nontrivial</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">q</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- p ↔ (p ∧ q) ∨ ¬q  does not hold</span>\n</code></pre></div>",
        "id": 410914463,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1704234425
    },
    {
        "content": "<p>That instance looks like a performance issue to me, but maybe I'm wrong</p>",
        "id": 410914897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704234691
    },
    {
        "content": "<p>It should certainly be a lemma if nothing else</p>",
        "id": 410914919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704234709
    },
    {
        "content": "<p>There's probably very little chance that this lemma has to be found automatically by the TypeClass inference system.</p>",
        "id": 410975228,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1704270542
    },
    {
        "content": "<p>Do you think it is a good idea to do a PR with some of these?</p>",
        "id": 410993754,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1704279385
    },
    {
        "content": "<p>Done <a href=\"https://github.com/leanprover-community/mathlib4/pull/9407\">#9407</a><br>\nBut there is a problem with the cache.</p>",
        "id": 411004714,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1704284301
    },
    {
        "content": "<p>For the cache, see <a href=\"#narrow/stream/113488-general/topic/The.20cache.20doesn't.20work\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/The.20cache.20doesn't.20work</a></p>",
        "id": 411005096,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704284482
    },
    {
        "content": "<p>While we're at it, it would probably be a good thing to give the proofs for all properties of rings (modules, spaces…) which are introduced in mathlib when they hold for the trivial ring (module, space…).</p>",
        "id": 411005403,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1704284631
    },
    {
        "content": "<p>Not necessarily, since that would create diamonds. <code>NoZeroDivisors</code> is alright because it's Prop-valued.</p>",
        "id": 411005599,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704284701
    },
    {
        "content": "<p>(For example, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isNoetherian_of_subsingleton#doc\">docs#isNoetherian_of_subsingleton</a> exists, but not <code>isArtinian_of_subsingleton</code>, nor the fact that the zero module is noetherian…)</p>",
        "id": 411005654,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1704284737
    },
    {
        "content": "<p>Not necessarily as instances. Just the theorems when they hold.</p>",
        "id": 411005753,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1704284765
    },
    {
        "content": "<p>We already have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isArtinian_of_finite#doc\">docs#isArtinian_of_finite</a> though</p>",
        "id": 411042173,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704299244
    }
]