[
    {
        "content": "<p>Is there a way to pass a discharger to <code>rewrite</code> or <code>rw</code>, i.e. a tactic to be run on all <em>new</em> goals created by <code>rw</code>? For example in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">overlap</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">overlap</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">overlap</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">overlap</span><span class=\"o\">,</span> <span class=\"n\">overlap</span><span class=\"o\">,</span> <span class=\"n\">overlap</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"n\">all_goals</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>I’d like to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">overlap</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">overlap</span><span class=\"o\">,</span> <span class=\"n\">overlap</span><span class=\"o\">,</span> <span class=\"n\">overlap</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">simp</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>or in other cases maybe <code>rewrite [… ] using assumption</code>.</p>\n<p>Or else a rw-independent good way of saying “run tactic x on all goals except the first”?</p>",
        "id": 434055676,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1713449251
    },
    {
        "content": "<p>There doesn't seem to be any relevant configuration option in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.Rewrite.Config#doc\">docs#Lean.Meta.Rewrite.Config</a>. Here's my attempt at writing a <code>with_discharger</code> tactic to operate on all side-goals created by the main tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tactic</span> <span class=\"s2\">\" with_discharger \"</span> <span class=\"n\">disch</span><span class=\"o\">:</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTactic</span> <span class=\"n\">tac</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_mainGoal</span> <span class=\"o\">::</span> <span class=\"n\">sideGoals</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">getUnsolvedGoals</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"c1\">-- (no goals to be solved)</span>\n  <span class=\"n\">for</span> <span class=\"n\">sideGoal</span> <span class=\"k\">in</span> <span class=\"n\">sideGoals</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">newSideGoals</span> <span class=\"bp\">←</span> <span class=\"n\">evalTacticAt</span> <span class=\"n\">disch</span> <span class=\"n\">sideGoal</span>\n    <span class=\"n\">unless</span> <span class=\"n\">newSideGoals.isEmpty</span> <span class=\"k\">do</span>\n      <span class=\"n\">throwError</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Failed to close goal {sideGoal} with {disch}\"</span>\n</code></pre></div>\n<p>The example with this tactic looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">overlap</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">overlap</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">overlap</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">overlap</span><span class=\"o\">,</span> <span class=\"n\">overlap</span><span class=\"o\">,</span> <span class=\"n\">overlap</span><span class=\"o\">]</span> <span class=\"n\">with_discharger</span> <span class=\"n\">simp</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 434061911,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1713450829
    },
    {
        "content": "<p>That’s neat! I wonder if this just doesn’t come up too often, or why it doesn’t exist already.</p>",
        "id": 434064133,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1713451451
    }
]