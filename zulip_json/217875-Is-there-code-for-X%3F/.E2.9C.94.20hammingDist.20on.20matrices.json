[
    {
        "content": "<p>i'd like to interpret matrices <code>x y: Matrix A B C</code> as a map <code>A x B -&gt; C</code>, to then use the hammingdistance to compare them... i can't seem to find a natural way to endow <code>Matrix A B C</code> with this distance... using <code>Hamming (Matrix A B C)</code> will result in an error... furthermore, simply evaluating <code>hammingDist x y</code> will compare the rows of the matrices, giving rise to the wrong notion of distance...</p>",
        "id": 429110410,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711223899
    },
    {
        "content": "<p>What about <code>hammingDist x.uncurry y.uncurry</code>?</p>",
        "id": 429110617,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711224067
    },
    {
        "content": "<p>although that does work, i'd prefer to use some kind of typecasting instead if possible, to be able to unify <code>ι -&gt; C</code> with <code>Matrix A B C</code>.</p>",
        "id": 429110866,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711224258
    },
    {
        "content": "<p>What do you mean by \"typecasting\"?</p>",
        "id": 429110883,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711224283
    },
    {
        "content": "<p>it might not be the right word for what i mean...</p>",
        "id": 429110986,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711224388
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"n\">abbrev</span> <span class=\"n\">Matrix.instHammingNormedAddCommGroup</span> <span class=\"o\">:</span>\n    <span class=\"n\">NormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">WithLp</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">WithLp</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>and I think is the right norm?</p>",
        "id": 429111162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711224565
    },
    {
        "content": "<p>how does that work? what does <code>WithLp</code> mean/do?</p>",
        "id": 429111293,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711224671
    },
    {
        "content": "<p>also, i'm using custom typeclasses for norms to explicitly restrict the codomain of the norm to <code>ENat</code></p>",
        "id": 429111462,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711224800
    },
    {
        "content": "<p>Sorry, that doesn't work at all, you want the <code>L0</code> norm not the <code>L1</code> norm</p>",
        "id": 429112858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711225791
    },
    {
        "content": "<p>what about defining a coercion from <code>Matrix A B C</code> to <code>(A x B) -&gt; C</code>? then you could treat the former as the latter</p>",
        "id": 429113815,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711226605
    },
    {
        "content": "<p>how would i go about that?</p>",
        "id": 429114878,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711227419
    },
    {
        "content": "<p>something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">uncurryMatrix</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 429115065,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711227587
    },
    {
        "content": "<p>yeah, you could do <code>instance uncurryMatrix : Coe (Matrix A B C) ((A × B) → C) := ⟨Function.uncurry⟩</code></p>",
        "id": 429115573,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711227915
    },
    {
        "content": "<p>I think a coe instance is a bad idea here</p>",
        "id": 429115808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711228093
    },
    {
        "content": "<p>how so?</p>",
        "id": 429115838,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711228123
    },
    {
        "content": "<p>you should listen to Eric, haha</p>",
        "id": 429115897,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711228193
    },
    {
        "content": "<p>I just threw that out there as a random suggestion, but I would definitely defer to Eric on this</p>",
        "id": 429115984,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711228260
    },
    {
        "content": "<p>i don't disagree, i'd just like to understand why defining that instance is a bad idea so i won't have to ask next time</p>",
        "id": 429115994,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711228270
    },
    {
        "content": "<p>Coercions often end up inserted automatically when you don't want them</p>",
        "id": 429116012,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711228292
    },
    {
        "content": "<p>So start off with a plain function to the casting, and turn it into a coercion later if you find it actually helps</p>",
        "id": 429116023,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711228313
    },
    {
        "content": "<p>But all it will change is how things appear in the goal view</p>",
        "id": 429116094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711228348
    },
    {
        "content": "<p>would the <code>Hamming</code> type be <code>Hamming (fun (_ : (A × B)) =&gt; C)</code>?</p>",
        "id": 429116636,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711228724
    },
    {
        "content": "<p>You can drop all of the parens there</p>",
        "id": 429116992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711228950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"684366\">@Edward van de Meent</span> could you just do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Dist</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">m1</span> <span class=\"n\">m2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hammingDist</span> <span class=\"n\">m1.uncurry</span> <span class=\"n\">m2.uncurry</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>it's essentially what Yael suggested, but it means that any function that requires a distance metric will automatically interpret the matrices the way you want</p>",
        "id": 429118324,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711229901
    },
    {
        "content": "<p>yes, that could work... thanks!</p>",
        "id": 429118666,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711230234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> has marked this topic as resolved.</p>",
        "id": 429118669,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711230241
    },
    {
        "content": "<p>You probably want that instance to be scoped.</p>",
        "id": 429131185,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1711240555
    },
    {
        "content": "<p>I don't use instances actually, I use a structure which bundles the measure instead, sidestepping diamonds alltogether</p>",
        "id": 429167328,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711265949
    }
]