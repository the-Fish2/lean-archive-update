[
    {
        "content": "<p>What is the most ergonomic way to replace a hypothesis <code>a : Int</code> with its negation?</p>\n<p>One can jump through hoops with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Int.neg_neg</span> <span class=\"n\">a</span>\n<span class=\"n\">generalize</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">subst</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>but that feels pretty tedious, and ends up with a different name.</p>\n<p>I guess we could write an appropriate <code>XXX</code> so we could write <code>cases a using XXX</code>, but it seems a lot of work to prepare such lemmas for all invertible operations.</p>",
        "id": 431738197,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712472326
    },
    {
        "content": "<p><code>obtain ⟨a, rfl⟩ : ∃ b, -b = a := ⟨-a, a.neg_neg⟩</code>?</p>",
        "id": 431738414,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712472483
    },
    {
        "content": "<p>(needs a .neg_neg.symm, but yes!)</p>",
        "id": 431738464,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712472532
    },
    {
        "content": "<p>Edited to avoid the <code>.symm</code>!</p>",
        "id": 431738864,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712472963
    },
    {
        "content": "<p><code>revert a; rw [neg_involutive.surjective.forall]; intro a</code>?</p>",
        "id": 431772134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712496432
    },
    {
        "content": "<p>Another option (in case you still want more options)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.neg_neg</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n<span class=\"n\">set</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">a</span>\n</code></pre></div>",
        "id": 431787694,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1712505942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/How.20to.20replace.20.60a.20.3A.20Int.60.20with.20.60-a.60.3F/near/431772134\">said</a>:</p>\n<blockquote>\n<p><code>revert a; rw [neg_involutive.surjective.forall]; intro a</code>?</p>\n</blockquote>\n<p>This would also require re-introducing any other hypotheses that involve <code>a</code>.</p>",
        "id": 431788587,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1712506317
    },
    {
        "content": "<p>That's perhaps an argument for \"rewrite by a surjective function\" being a tactic</p>",
        "id": 431810138,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712518577
    }
]