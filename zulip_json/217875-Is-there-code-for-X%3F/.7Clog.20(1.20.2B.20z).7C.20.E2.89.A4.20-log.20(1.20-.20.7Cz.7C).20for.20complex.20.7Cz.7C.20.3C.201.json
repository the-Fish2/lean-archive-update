[
    {
        "content": "<p>Do we have the titular bound, or lemmas that would give it in few steps?  The power series proof is not hard but it feels like there should be something more algebraic:</p>\n<p><a href=\"https://math.stackexchange.com/questions/4844828/non-power-series-proof-that-log-1-z-le-log-1-z\">https://math.stackexchange.com/questions/4844828/non-power-series-proof-that-log-1-z-le-log-1-z</a></p>",
        "id": 412860278,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705278334
    },
    {
        "content": "<p>Off-topic: On mobile I can't see the subject of the thread :-/ (it's truncated) (but I can see the stackexchange question with the thread in) (oh and I can see the title if I edit my own reply!)</p>",
        "id": 412900942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705304646
    },
    {
        "content": "<p>Is this close enough to what you are looking for?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exp_le_exp.mp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">exp_log</span><span class=\"o\">,</span> <span class=\"n\">exp_neg</span><span class=\"o\">,</span> <span class=\"n\">exp_log</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_iff_of_pos_right</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inv_mul_cancel</span> <span class=\"n\">h.ne'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_self_sub_mul_self</span><span class=\"o\">,</span> <span class=\"n\">sub_le_iff_le_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_add_of_le_of_nonneg</span> <span class=\"n\">rfl.le</span> <span class=\"o\">(</span><span class=\"n\">mul_self_nonneg</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 412901860,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1705305135
    },
    {
        "content": "<p>Not quite: it’s important that I’m bounding the complex log.</p>",
        "id": 412902194,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705305320
    },
    {
        "content": "<p>Geoffrey didn't write a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> but I was guessing they wanted the result for x complex</p>",
        "id": 412902200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705305323
    },
    {
        "content": "<p>The integral proof is easy enough, so I’ll go with that.</p>",
        "id": 412902332,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705305388
    },
    {
        "content": "<p>Ah, I missed <code>complex</code>!</p>",
        "id": 412902374,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1705305408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.7Clog.20.281.20.2B.20z.29.7C.20.3C.3D.20-log.20.281.20-.20.7Cz.7C.29/near/412900942\">said</a>:</p>\n<blockquote>\n<p>Off-topic: On mobile I can't see the subject of the thread :-/ (it's truncated) (but I can see the stackexchange question with the thread in) (oh and I can see the title if I edit my own reply!)</p>\n</blockquote>\n<p>Ironically I was only lazy about that because I wrote the question on mobile too. :/</p>",
        "id": 412903759,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705306017
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.FundThmCalculus</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Log.Deriv</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">## `Complex.log (1 + z) ≤ -Real.log (1 - abs z)` for `abs z &lt; 1`</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span> <span class=\"o\">(</span><span class=\"n\">abs</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"sd\">/-- Bound `abv (a + b)` from below via the triangle inequality -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">AbsoluteValue.le_add'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderedCommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NoZeroDivisors</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">abv</span> <span class=\"o\">:</span> <span class=\"n\">AbsoluteValue</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">abv</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">abv</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">abv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">abv.add_le</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simpa</span>\n\n<span class=\"sd\">/-- Bound `Complex.log (1 + z)` in terms of `Real.log`.</span>\n\n<span class=\"sd\">    It feels like this lemma should have an algebraic proof, but I don't see it:</span>\n<span class=\"sd\">      https://math.stackexchange.com/questions/4844828 -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Complex.abs_log_one_add_le</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">Complex.log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">abs</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">m1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"bp\">↦</span> <span class=\"n\">Right.mul_lt_one_of_le_of_lt_of_nonneg</span> <span class=\"n\">m</span> <span class=\"n\">z1</span> <span class=\"o\">(</span><span class=\"n\">Complex.abs.nonneg</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">dc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">uIcc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span>\n      <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">Complex.log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">t</span> <span class=\"n\">m</span>\n    <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.clog_real</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">hasDerivAt_mul_const</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">const_add</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp_ofReal</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Complex.mem_slitPlane_of_norm_lt_one</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">norm_mul</span><span class=\"o\">,</span> <span class=\"n\">Complex.norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">Complex.abs_ofReal</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">zero_le_one</span><span class=\"o\">,</span> <span class=\"n\">uIcc_of_le</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">m</span>\n      <span class=\"n\">apply</span> <span class=\"n\">m1</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">abs_le</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"n\">m.2</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">dr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">uIcc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span>\n      <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"bp\">-</span><span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"n\">z</span><span class=\"o\">)))</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">t</span> <span class=\"n\">m</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">zero_le_one</span><span class=\"o\">,</span> <span class=\"n\">uIcc_of_le</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">m</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(((</span><span class=\"n\">hasDerivAt_mul_const</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">const_sub</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"o\">((</span><span class=\"n\">sub_pos.mpr</span> <span class=\"o\">(</span><span class=\"n\">m1</span> <span class=\"n\">_</span> <span class=\"n\">m.2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ne'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">neg</span>\n  <span class=\"k\">have</span> <span class=\"n\">ic</span> <span class=\"o\">:</span> <span class=\"n\">IntervalIntegrable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"n\">MeasureTheory.volume</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ContinuousOn.intervalIntegrable_of_Icc</span> <span class=\"n\">zero_le_one</span>\n    <span class=\"n\">apply</span> <span class=\"n\">continuousOn_const.div</span> <span class=\"o\">(</span><span class=\"n\">Continuous.continuousOn</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">continuity</span><span class=\"o\">))</span>\n    <span class=\"n\">intro</span> <span class=\"n\">t</span> <span class=\"o\">⟨</span><span class=\"n\">t0</span><span class=\"o\">,</span><span class=\"n\">t1</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Complex.abs.ne_zero_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ne_of_gt</span>\n    <span class=\"k\">calc</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">)</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≥</span> <span class=\"n\">Complex.abs</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Complex.abs.le_add'</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"bp\">|</span><span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_one</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">Complex.abs_ofReal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"n\">sub_pos.mpr</span> <span class=\"o\">(</span><span class=\"n\">m1</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">abs_le.mpr</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"n\">t1</span><span class=\"o\">⟩))</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">neg_div</span><span class=\"o\">,</span> <span class=\"n\">neg_neg</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">dr</span>\n  <span class=\"k\">have</span> <span class=\"n\">ir</span> <span class=\"o\">:</span> <span class=\"n\">IntervalIntegrable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"n\">MeasureTheory.volume</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ContinuousOn.intervalIntegrable_of_Icc</span> <span class=\"n\">zero_le_one</span>\n    <span class=\"n\">apply</span> <span class=\"n\">continuousOn_const.div</span> <span class=\"o\">(</span><span class=\"n\">Continuous.continuousOn</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">continuity</span><span class=\"o\">))</span>\n    <span class=\"n\">intro</span> <span class=\"n\">t</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">t1</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">sub_pos.mpr</span> <span class=\"o\">(</span><span class=\"n\">m1</span> <span class=\"n\">_</span> <span class=\"n\">t1</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"n\">fc</span> <span class=\"o\">:=</span> <span class=\"n\">intervalIntegral.integral_eq_sub_of_hasDerivAt</span> <span class=\"n\">dc</span> <span class=\"n\">ic</span>\n  <span class=\"k\">have</span> <span class=\"n\">fr</span> <span class=\"o\">:=</span> <span class=\"n\">intervalIntegral.integral_eq_sub_of_hasDerivAt</span> <span class=\"n\">dr</span> <span class=\"n\">ir</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Complex.ofReal_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">Complex.ofReal_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">Complex.log_one</span><span class=\"o\">,</span>\n    <span class=\"n\">sub_zero</span><span class=\"o\">,</span> <span class=\"n\">Real.log_one</span><span class=\"o\">,</span> <span class=\"n\">neg_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">fc</span> <span class=\"n\">fr</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">fc</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">fr</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Complex.norm_eq_abs</span><span class=\"o\">]</span>\n  <span class=\"n\">clear</span> <span class=\"n\">dc</span> <span class=\"n\">dr</span> <span class=\"n\">fc</span> <span class=\"n\">fr</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">intervalIntegral.norm_integral_le_integral_norm</span> <span class=\"n\">zero_le_one</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">apply</span> <span class=\"n\">intervalIntegral.integral_mono_on</span> <span class=\"n\">zero_le_one</span> <span class=\"n\">ic.norm</span> <span class=\"n\">ir</span>\n  <span class=\"n\">intro</span> <span class=\"n\">t</span> <span class=\"o\">⟨</span><span class=\"n\">t0</span><span class=\"o\">,</span><span class=\"n\">t1</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">norm_div</span><span class=\"o\">,</span> <span class=\"n\">Complex.norm_eq_abs</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">div_le_div_of_le_left</span> <span class=\"o\">(</span><span class=\"n\">Complex.abs.nonneg</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub_pos.mpr</span> <span class=\"o\">(</span><span class=\"n\">m1</span> <span class=\"n\">_</span> <span class=\"n\">t1</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"k\">calc</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≥</span> <span class=\"n\">Complex.abs</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Complex.abs.le_add'</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_one</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">Complex.abs_ofReal</span><span class=\"o\">,</span> <span class=\"n\">_root_.abs_of_nonneg</span> <span class=\"n\">t0</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 412931318,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705316065
    },
    {
        "content": "<p>One can rewrite (changing the sign of z) the question as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mo>−</mo><mi>log</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mo>−</mo><mi>log</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi mathvariant=\"normal\">∣</mi><mi>z</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">|-\\log(1-z)|\\leq-\\log(1-|z|)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span></span></span></span> which is now of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∣</mi><mi>z</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">|f(z)|\\leq f(|z|)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span></span></span></span> for z in the open disc</p>",
        "id": 412945139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705320985
    },
    {
        "content": "<p>However for this to be mathematically meaningful f has to be a function which takes a complex but outputs a real if it's real</p>",
        "id": 412945408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705321097
    },
    {
        "content": "<p>Which is implied by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi>z</mi><mo stretchy=\"true\">‾</mo></mover><mo stretchy=\"false\">)</mo><mo>=</mo><mover accent=\"true\"><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">f(\\overline{z})=\\overline{f(z)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6306em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span><span style=\"top:-3.5506em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.25em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.87em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25em;\"><span></span></span></span></span></span></span></span></span></p>",
        "id": 412945596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705321194
    },
    {
        "content": "<p>Nice.  Though alas nothing like that holds for general real/complex <code>f</code> pairs (e.g., <code>sin</code>).</p>",
        "id": 412945665,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705321208
    },
    {
        "content": "<p>It does feel weird that there isn't a more intuitive proof, though.</p>",
        "id": 412945735,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705321243
    },
    {
        "content": "<p>I think the key fact is that the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> in your example has nonnegative real coefficients in its power series expansion and so now I'm wondering if this is a standard class of complex functions. Presumably the stackexchange proof generalises to such a statement.</p>",
        "id": 412946018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705321367
    },
    {
        "content": "<p>So probably you're ok with <code>sinh</code> rather than <code>sin</code></p>",
        "id": 412946126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705321409
    },
    {
        "content": "<p>Yes, and there the nonnegative coefficients correspond to <code>sinh</code> blowing up along the real axis rather than the imaginary axis.</p>",
        "id": 412946222,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705321444
    },
    {
        "content": "<p><code>sin</code> obeys a similar inequality in the other direction. :)</p>",
        "id": 412946317,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705321480
    }
]