[
    {
        "content": "<p>Is there code for the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int.gcd</span> <span class=\"n\">q.num</span> <span class=\"n\">q.den</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>or </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsCoprime</span> <span class=\"n\">q.num</span> <span class=\"n\">q.den</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I searched a bit, but only found <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RatFunc.isCoprime_num_denom#doc\">docs#RatFunc.isCoprime_num_denom</a>.</p>",
        "id": 425546047,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1709913580
    },
    {
        "content": "<p>If you look at the definition of <code>Rat</code>, you will see that there is a field</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">reduced</span> <span class=\"o\">:</span> <span class=\"n\">num.natAbs.Coprime</span> <span class=\"n\">den</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>\n<p>So you can use that to derive the exact statement you want :)</p>",
        "id": 425548428,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709914352
    },
    {
        "content": "<p>One of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat#doc\">docs#Rat</a> 's field seems to be <code>reduced</code> which is what you want</p>",
        "id": 425548444,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1709914357
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsCoprime</span> <span class=\"n\">q.num</span> <span class=\"n\">q.den</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">q.reduced</span> <span class=\"c\">/-</span><span class=\"cm\"> Introduce this into the scope -/</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c\">/-</span><span class=\"cm\"> Let the tactics do its magic -/</span>\n</code></pre></div>",
        "id": 425548542,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709914399
    }
]