[
    {
        "content": "<p>Hi, in my efforts to define various concepts of tightness, I just defined asymptotically tight sequences, but I'd like to extend this to asymptotically tight nets. What is the proper/preferred way of setting this up? My current definition is the following, where I'd like to replace ‚Ñï by a directed set. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IsAsymptoticallyTight</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Œºs</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Measure</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">IsCompact</span> <span class=\"n\">K</span> <span class=\"bp\">‚àß</span> <span class=\"n\">Filter.limsup</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"n\">Œºs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">·∂ú</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œµ</span>\n</code></pre></div>",
        "id": 436223709,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714466832
    },
    {
        "content": "<p>Can you rewrite your definition in terms of filters instead? That would likely be easier to generalize. Like, a single measure being tight means <code>Tendsto Œº something (ùìù 0)</code> where <code>something : Filter (Set Œ±)</code> is appropriately chosen.</p>",
        "id": 436236866,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714471555
    },
    {
        "content": "<p>I want to say <code>something := (cocompact Œ±).smallSets</code> but I'm really not sure</p>",
        "id": 436237132,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714471655
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.eventually_smallSets#doc\">docs#Filter.eventually_smallSets</a></p>",
        "id": 436237570,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714471852
    },
    {
        "content": "<p>I think I see your point, so you would be able to unify Uniformly Tight and Asymptotically Tight (on sequences/nets) by properly picking a filter, and Tight (for one measure) would then be given by restricting Uniformly Tight to one element? I'd need to think about how to implement this and correctly set this up, but it would certainly be the Mathlib way...</p>",
        "id": 436237871,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714471963
    },
    {
        "content": "<p>I believe  tight for one measure would be simpler as a single Tendsto but otherwise yes that would be my point. And then you get the whole Filter API so you never have to slice epsilons into 3 parts ever again.</p>",
        "id": 436238144,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714472072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Nets.20instead.20of.20sequences/near/436238144\">said</a>:</p>\n<blockquote>\n<p>I believe  tight for one measure would be simpler as a single Tendsto but otherwise yes that would be my point. And then you get the whole Filter API so you never have to slice epsilons into 3 parts ever again.</p>\n</blockquote>\n<p>That is a big advantage of course! I'll try to play around with that a bit when I have the time. If you like puzzling with this, feel free to write up the definitions and I'll modify my existing API to work for these! Otherwise, I'll give it a shot sometime soon!</p>",
        "id": 436238395,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714472169
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Uniformity</span> <span class=\"n\">Uniform</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isTight</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">Tendsto</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">cocompact</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">smallSets</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">isTight</span> <span class=\"n\">Œº</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">Œµ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">IsCompact</span> <span class=\"n\">K</span> <span class=\"bp\">‚àß</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"bp\">·∂ú</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">isTight</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.tendsto_nhds</span><span class=\"o\">,</span> <span class=\"n\">Filter.eventually_smallSets</span><span class=\"o\">,</span> <span class=\"n\">Filter.mem_cocompact</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">forall‚ÇÇ_congr</span> <span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"n\">Œµ</span> <span class=\"bp\">-</span> <span class=\"bp\">;</span> <span class=\"n\">constructor</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">rintro</span> <span class=\"o\">‚ü®</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">‚ü©,</span> <span class=\"n\">hA</span><span class=\"o\">‚ü©</span>\n    <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">hA</span> <span class=\"n\">K</span><span class=\"bp\">·∂ú</span> <span class=\"n\">h2</span><span class=\"o\">‚ü©</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">rintro</span> <span class=\"o\">‚ü®</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">‚ü©</span>\n    <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">K</span><span class=\"bp\">·∂ú</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">subset_rfl</span><span class=\"o\">‚ü©,</span> <span class=\"k\">fun</span> <span class=\"n\">A</span> <span class=\"n\">hA</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Œº.mono</span> <span class=\"n\">hA</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">trans</span> <span class=\"n\">h2</span><span class=\"o\">‚ü©</span>\n</code></pre></div>",
        "id": 436245798,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714475239
    },
    {
        "content": "<p>Amazing, thank you for your effort! I will refactor using this, and I'll think a bit about how to write the analogous definition of this for a set of measures/sequence of measures/net of measures!</p>",
        "id": 436247964,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714475975
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IsTightAtFilter_v1</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Measure</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">‚àÄ</span> <span class=\"n\">Œµ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">IsCompact</span> <span class=\"n\">K</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">·∂ú</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œµ</span>\n</code></pre></div>\n<p>but that is not really satisfactory. I would really like to write this in terms of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TendstoUniformlyOnFilter#doc\">docs#TendstoUniformlyOnFilter</a> but that requires a <code>UniformSpace</code> which <code>ENNReal</code> is not (but only small values matter, so it should be workable ...)</p>",
        "id": 436287711,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714488241
    },
    {
        "content": "<p>Alternatively, we could put a uniform structure on <code>ENNReal</code> that matches its topology, as in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=compactSpace_uniformity#doc\">docs#compactSpace_uniformity</a> and be done with it.</p>",
        "id": 436292375,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714489442
    },
    {
        "content": "<p>If I'm interpreting this correctly, we would than have, in the notation of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TendstoUniformlyOnFilter#doc\">docs#TendstoUniformlyOnFilter</a>, <code>F = Œπ ‚Üí Measure Œ±</code> and <code>f = 0 : Measure Œ±</code>? Or am I misinterpreting this?</p>",
        "id": 436295205,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714490118
    },
    {
        "content": "<p>There are indices going along one filter and sets going along the cocompact based other filters, I always forget which is which in tendstouniformlyonfilter but in any case uniform tightness would be easier to start with.</p>",
        "id": 436331159,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714501804
    },
    {
        "content": "<p>Why isn't <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENNReal#doc\">docs#ENNReal</a> a uniform space?</p>",
        "id": 436522392,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1714577454
    },
    {
        "content": "<p>Is it not the same issue as why it's not a metric space? namely that it would induce a topology where <code>Nat.cast : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû</code> does not tend to <code>‚àû</code>?</p>",
        "id": 436522631,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1714577538
    },
    {
        "content": "<p>There is no natural metric space structure on ENNReal, indeed, but there is a canonical uniform structure, as it's a compact space. It would make sense to have it in mathlib, I guess nobody has needed it yet.</p>",
        "id": 436524612,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1714578246
    },
    {
        "content": "<p>Do we have a homeomorphism between ENNReal and unitInterval somewhere available?</p>",
        "id": 436562793,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714593168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">S√©bastien Gou√´zel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Nets.20instead.20of.20sequences/near/436524612\">said</a>:</p>\n<blockquote>\n<p>There is no natural metric space structure on ENNReal, indeed, but there is a canonical uniform structure</p>\n</blockquote>\n<p>Interesting. That's what I wanted to be true, but I didn't actually know whether it was</p>",
        "id": 436565730,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1714594440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Nets.20instead.20of.20sequences/near/436562793\">said</a>:</p>\n<blockquote>\n<p>Do we have a homeomorphism between ENNReal and unitInterval somewhere available?</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENNReal.orderIsoUnitIntervalBirational#doc\">docs#ENNReal.orderIsoUnitIntervalBirational</a></p>",
        "id": 436565860,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1714594499
    },
    {
        "content": "<p>So we can just say this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">UniformSpace</span> <span class=\"n\">ENNReal</span> <span class=\"o\">:=</span>\n  <span class=\"n\">UniformSpace.comap</span> <span class=\"n\">ENNReal.orderIsoUnitIntervalBirational</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 436567740,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714595403
    },
    {
        "content": "<p>No because most likely that doesn't give the correct topology on <code>ENNReal</code> up to defeq</p>",
        "id": 436568307,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1714595676
    },
    {
        "content": "<p>Indeed, it won't, but it should be easy to prove it's propeq</p>",
        "id": 436568637,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1714595823
    },
    {
        "content": "<p>It's propeq because it is canonical, if everything is set up right.</p>",
        "id": 436568679,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714595847
    },
    {
        "content": "<p>Yes, exactly. The way I would go about it is by observing that both <code>ENNReal</code> and <code>unitInterval</code> are both endowed with the order topology and then I would use the fact that <code>ENNReal.orderIsoUnitIntervalBirational</code> is an <code>OrderIso</code>.</p>",
        "id": 436570537,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1714596605
    },
    {
        "content": "<p>IIUC, if we really need the <code>TopologicalSpace</code> to be defeq to the one obtained from the <code>UniformSpace</code> we can always remove the current instance and prove <code>[OrderTopology ENNReal]</code> using the fact that we have an <code>OrderIso</code>?</p>",
        "id": 436571387,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714596946
    },
    {
        "content": "<p>That too would work, although I'm afraid there's a bootstrapping issue: the topology on <code>unitInterval</code> comes much later</p>",
        "id": 436575685,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1714598813
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">ENNReal.instTopologicalSpaceENNReal</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">UniformSpace</span> <span class=\"n\">ENNReal</span> <span class=\"o\">:=</span>\n  <span class=\"n\">UniformSpace.comap</span> <span class=\"n\">ENNReal.orderIsoUnitIntervalBirational</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">ENNReal</span> <span class=\"o\">:=</span> <span class=\"n\">UniformSpace.toTopologicalSpace</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OrderTopology</span> <span class=\"n\">ENNReal</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">induced_orderTopology</span> <span class=\"n\">ENNReal.orderIsoUnitIntervalBirational</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hxz</span><span class=\"o\">,</span> <span class=\"n\">hzy</span><span class=\"o\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"bp\">‚àß</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">exists_between</span> <span class=\"n\">hxy</span>\n  <span class=\"n\">use</span> <span class=\"n\">ENNReal.orderIsoUnitIntervalBirational.invFun</span> <span class=\"n\">z</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 436575934,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714598922
    },
    {
        "content": "<p>Is it clear, on this definition, that the inclusion of Real into ENNReal induces it's topology?</p>",
        "id": 436618898,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1714627573
    },
    {
        "content": "<p>Antoine, please reconsider your previous message <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 436625495,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1714631757
    },
    {
        "content": "<p>The inclusion from <code>NNReal</code> to <code>ENNReal</code> however should indeed be easily shown to induce the topology because it is an order embedding and both <code>NNReal</code> and <code>ENNReal</code>are equipped with their order topology</p>",
        "id": 436625695,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1714631842
    },
    {
        "content": "<p>Instead of changing the definition of the topology on ENNReal, you could probably keep the original one, but adjust the definition of the uniform space to make sure that the topology is definitionally the original one, with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformSpace.replaceTopology#doc\">docs#UniformSpace.replaceTopology</a>.</p>",
        "id": 436633289,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1714635154
    },
    {
        "content": "<p>Like this,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">UniformSpace</span> <span class=\"n\">ENNReal</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">UniformSpace.comap</span> <span class=\"n\">ENNReal.orderIsoUnitIntervalBirational</span> <span class=\"n\">inferInstance</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">replaceTopology</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ENNReal.instTopologicalSpaceENNReal</span><span class=\"o\">,</span> <span class=\"n\">UniformSpace.toTopologicalSpace</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">StrictMono.induced_topology_eq_preorder</span> <span class=\"o\">(</span><span class=\"n\">OrderIso.strictMono</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Remains to show <code>OrdConnected (univ : Set (Icc 0 1))</code> which is suspiciously close to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.ordConnected_Icc#doc\">docs#Set.ordConnected_Icc</a> so I'm guessing a proper incantation around <code>Subtype.val</code> would close it, but I have to go now. Will try a bit later.</p>",
        "id": 436643265,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714638816
    },
    {
        "content": "<p><a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Nets.20instead.20of.20sequences/near/436643265\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tight.20measures\">#Is there code for X? &gt; Tight measures</a> by <span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span>.</p>",
        "id": 436643443,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714638867
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">toto</span> <span class=\"o\">:</span> <span class=\"n\">UniformSpace</span> <span class=\"n\">ENNReal</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">UniformSpace.comap</span> <span class=\"n\">ENNReal.orderIsoUnitIntervalBirational</span> <span class=\"n\">inferInstance</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">replaceTopology</span>\n    <span class=\"o\">(</span><span class=\"n\">StrictMono.induced_topology_eq_preorder</span> <span class=\"o\">(</span><span class=\"n\">OrderIso.strictMono</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">RelIso.range_eq</span><span class=\"o\">,</span> <span class=\"n\">ordConnected_univ</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">toto.toTopologicalSpace</span> <span class=\"bp\">=</span> <span class=\"n\">ENNReal.instTopologicalSpaceENNReal</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 436665531,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714646994
    },
    {
        "content": "<p>I want to react with some kind of triumphant <code>rfl</code> emoji :-)</p>",
        "id": 436665653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714647030
    },
    {
        "content": "<p>example : <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> := rofl</p>",
        "id": 436666892,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714647481
    },
    {
        "content": "<p>well <code>rfl</code> used to be called <code>refl</code> so maybe we need to start a campaign to rename it <code>rofl</code></p>",
        "id": 436667168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714647582
    },
    {
        "content": "<p>Proof by rofloxovity</p>",
        "id": 436667471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714647675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Nets.20instead.20of.20sequences/near/436625495\">said</a>:</p>\n<blockquote>\n<p>Antoine, please reconsider your previous message <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n</blockquote>\n<p>By ‚Äúwas it clear‚Äù, I meant ‚Äúwas it clear to Lean‚Äù, aka ‚Äúdefeq‚Äù, that...</p>",
        "id": 436766834,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1714679749
    },
    {
        "content": "<p>Antoine, Ya√´l points out a typo in your message.</p>",
        "id": 436767238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714679897
    },
    {
        "content": "<p>You wrote that reals are contained in extended <em>non-negative</em> reals.</p>",
        "id": 436767353,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714679942
    },
    {
        "content": "<p>Oh, sorry. (That must be the autocorrect.)</p>",
        "id": 436779429,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1714685202
    }
]