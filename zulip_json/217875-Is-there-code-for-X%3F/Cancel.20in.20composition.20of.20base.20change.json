[
    {
        "content": "<p>Is there a lemma on cancelling the intermediate base change in a composition of base changes, i.e. something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">baseChangeCancel</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>If <code>M</code> is a <code>S</code>-algebra, this can be deduced from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsBaseChange.comp#doc\">docs#IsBaseChange.comp</a> . Note that also the <code>Module</code> instance is not inferred, here I want to act on <code>M ⊗[R] N</code> by acting on <code>N</code>.</p>",
        "id": 418363602,
        "sender_full_name": "Christian Merten",
        "timestamp": 1706310419
    },
    {
        "content": "<p>I'm quite sure we have this.</p>",
        "id": 418367015,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706312987
    },
    {
        "content": "<p>hmmm... maybe not.</p>",
        "id": 418367156,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706313103
    },
    {
        "content": "<p>In mathlib, the module with the larger base has to be on the left of the tensor product</p>",
        "id": 418398770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706342758
    },
    {
        "content": "<p>So <code>Module S (N ⊗[R] M)</code> should be found automatically there</p>",
        "id": 418398830,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706342807
    },
    {
        "content": "<p>And the def you want would then be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">baseChangeCancel</span> <span class=\"o\">:</span>\n  <span class=\"n\">N</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 418398981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706342984
    },
    {
        "content": "<p>I think this follows from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct.AlgebraTensorModule.assoc#doc\">docs#TensorProduct.AlgebraTensorModule.assoc</a> ?</p>",
        "id": 418399054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706343047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Cancel.20in.20composition.20of.20base.20change/near/418399054\">said</a>:</p>\n<blockquote>\n<p>I think this follows from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct.AlgebraTensorModule.assoc#doc\">docs#TensorProduct.AlgebraTensorModule.assoc</a> ?</p>\n</blockquote>\n<p><del>Probably you meant <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct.assoc#doc\">docs#TensorProduct.assoc</a> (The algebra version only applies if <code>N</code> is a <code>S</code>-Algebra), but still I am not sure how I proceed with this, since <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct.assoc#doc\">docs#TensorProduct.assoc</a> works with three modules over the same ring.</del></p>",
        "id": 418401296,
        "sender_full_name": "Christian Merten",
        "timestamp": 1706345610
    },
    {
        "content": "<p><del>Nvmd, I think you meant <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct.AlgebraTensorModule.assoc#doc\">docs#TensorProduct.AlgebraTensorModule.assoc</a> and this looks more promising.</del> I clicked on your link earlier and it gave me a 404, but I think you edited your message. Thanks!</p>",
        "id": 418401389,
        "sender_full_name": "Christian Merten",
        "timestamp": 1706345708
    },
    {
        "content": "<p>Took me some time, but your suggestion worked:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">baseChangeCancel</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n    <span class=\"n\">AlgebraTensorModule.congr</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.rid</span> <span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">LinearEquiv.neg</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">g.symm</span> <span class=\"bp\">≪≫ₗ</span> <span class=\"o\">(</span><span class=\"n\">AlgebraTensorModule.assoc</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">S</span> <span class=\"n\">N</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 418403638,
        "sender_full_name": "Christian Merten",
        "timestamp": 1706347823
    },
    {
        "content": "<p>Unfortunately in the doc string of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct.AlgebraTensorModule.assoc#doc\">docs#TensorProduct.AlgebraTensorModule.assoc</a> some variable names were mixed up, I fixed it in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10051\">#10051</a>.</p>",
        "id": 418404702,
        "sender_full_name": "Christian Merten",
        "timestamp": 1706348958
    }
]