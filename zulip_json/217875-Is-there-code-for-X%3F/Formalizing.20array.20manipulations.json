[
    {
        "content": "<p>In my programming tasks, I frequently work with arrays. Below is an example of the kind of manipulations I'm interested in performing.</p>\n<p>The current proof for this manipulation appears cumbersome and contains gaps.</p>\n<p>Is there a more efficient way to streamline this type of work?</p>\n<p>Specifically, I'm wondering if using <code>Finset.sup'</code> is a good approach.</p>\n<p>Also, I understand that using <code>Fin</code> for indexing would eliminate the need for index boundary proofs, it has the limitation of only ranging from zero. My use cases often require indexing that starts from values above zero.</p>\n<p>As a side note, I've customized the syntax for <code>Finset.sup</code> and <code>Finset.sup'</code> for better readability. <code>Finset.sup'</code> is further distinguished by including the hypothesis <code>[H]</code> next to the arrow.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Algebra</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std.ExtendedBinder</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Delaborator</span> <span class=\"n\">SubExpr</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">bigmax</span><span class=\"o\">)</span> <span class=\"s2\">\"⇑ \"</span> <span class=\"o\">(</span><span class=\"s2\">\"[\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">extBinder</span> <span class=\"s2\">\", \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">scoped</span> <span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">bigmax</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Finset.sup</span> <span class=\"n\">Finset.univ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Finset.sup</span> <span class=\"n\">Finset.univ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">hne</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Finset.sup'</span> <span class=\"n\">Finset.univ</span> <span class=\"bp\">$</span><span class=\"n\">hne</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">bigmaxin</span><span class=\"o\">)</span> <span class=\"s2\">\"⇑ \"</span> <span class=\"n\">extBinder</span> <span class=\"s2\">\" in \"</span> <span class=\"n\">term</span> <span class=\"s2\">\", \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">scoped</span> <span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">bigmaxin</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Finset.sup</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Finset.sup</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">scoped</span> <span class=\"n\">delab</span> <span class=\"n\">app.Finset.sup</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">delabFinsetSup</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"n\">whenPPOption</span> <span class=\"n\">getPPNotation</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getAppArgs</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f.isLambda</span>\n  <span class=\"k\">let</span> <span class=\"n\">ppDomain</span> <span class=\"bp\">←</span> <span class=\"n\">getPPOption</span> <span class=\"n\">getPPPiBinderTypes</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">withAppArg</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withBindingBodyUnusedName</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">delab</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">s.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">Finset.univ</span> <span class=\"mi\">2</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">binder</span> <span class=\"bp\">←</span>\n      <span class=\"k\">if</span> <span class=\"n\">ppDomain</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">withNaryArg</span> <span class=\"mi\">1</span> <span class=\"n\">delab</span>\n        <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">extBinder</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">i</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">extBinder</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">i</span><span class=\"o\">):</span><span class=\"n\">ident</span><span class=\"o\">)</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"bp\">$</span><span class=\"n\">binder</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">ss</span> <span class=\"bp\">←</span> <span class=\"n\">withNaryArg</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">delab</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">i</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">ss</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">BigOperators</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Finset.sup'_add_const</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">univ.Nonempty</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bdd</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">sup'_le</span>\n    <span class=\"n\">intros</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">b</span> <span class=\"n\">_</span>\n    <span class=\"n\">gcongr</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">univ_eq_attach</span><span class=\"o\">,</span> <span class=\"n\">mem_attach</span><span class=\"o\">,</span> <span class=\"n\">le_sup'_iff</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">Subtype.exists</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"n\">b</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">coe_mem</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"n\">trivial</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">univ_eq_attach</span><span class=\"o\">,</span> <span class=\"n\">le_sup'_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_attach</span><span class=\"o\">,</span> <span class=\"n\">add_le_add_iff_right</span><span class=\"o\">,</span> <span class=\"n\">sup'_le_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">forall_true_left</span><span class=\"o\">,</span> <span class=\"n\">Subtype.forall</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">Subtype.exists</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span><span class=\"n\">Array</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hi1</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.size</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hi2</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">univ.Nonempty</span><span class=\"o\">}</span>\n        <span class=\"o\">:</span> <span class=\"bp\">⇑</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a.1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">b.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span> <span class=\"bp\">-</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">):</span> <span class=\"n\">WithBot</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">⇑</span><span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">)]</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a.1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">b.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"c1\">-- how to move (by sorry) to the list of parameters ?</span>\n <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span> <span class=\"bp\">⇑</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a.1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">b.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span> <span class=\"bp\">-</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">):</span><span class=\"n\">WithBot</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a.1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">b.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span> <span class=\"bp\">-</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">))</span>      <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sup'_eq_sup</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a.1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">b.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span> <span class=\"bp\">-</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">congr</span><span class=\"bp\">!</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sup'_eq_sup</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">univ_eq_attach</span><span class=\"o\">,</span> <span class=\"n\">attach_nonempty_iff</span><span class=\"o\">,</span> <span class=\"n\">nonempty_Ico</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a.1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">b.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span> <span class=\"bp\">-</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">))</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coe_sup'</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">sup'_eq_sup</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n                                                                                        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">univ_eq_attach</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n                                                                                        <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">!</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sup'_eq_sup</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">congr</span>\n                                                                                        <span class=\"n\">assumption</span><span class=\"bp\">;</span>\n                                                                                        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">univ_eq_attach</span><span class=\"o\">]</span>\n                                                                                        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">attach_nonempty_iff</span><span class=\"o\">,</span> <span class=\"n\">nonempty_Ico</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n                                                                                        <span class=\"k\">let</span> <span class=\"n\">x</span><span class=\"o\">:=</span> <span class=\"n\">a.prop</span><span class=\"bp\">;</span>\n                                                                                        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.Ico_zero_eq_range</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x</span>\n                                                                                        <span class=\"n\">assumption</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a.1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">b.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">)</span>   <span class=\"o\">:=</span>  <span class=\"kd\">by</span> <span class=\"n\">congr</span><span class=\"bp\">!</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"bp\">;</span>\n                                                                                           <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n                                                                                             <span class=\"n\">lhs</span>\n                                                                                             <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n                                                                                             <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.sub_eq_add_neg</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n                                                                                           <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n                                                                                            <span class=\"n\">lhs</span>\n                                                                                            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sup'_add_const</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"o\">]</span>\n                                                                                            <span class=\"bp\">.</span> <span class=\"n\">skip</span>\n                                                                                            <span class=\"bp\">.</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">x</span><span class=\"o\">:=</span><span class=\"n\">a.prop</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">x</span> <span class=\"bp\">⊢;</span> <span class=\"n\">assumption</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 434850273,
        "sender_full_name": "Vlad",
        "timestamp": 1713821453
    },
    {
        "content": "<p>I'd agree that your <code>sup'_add_const</code> looks overwrought given that this is possible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sup'_add_const</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s.Nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">sup'</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sup'</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">comp_sup'_eq_sup'_comp</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sup_add</span> <span class=\"bp\">·</span> <span class=\"bp\">·</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 434873604,
        "sender_full_name": "A.",
        "timestamp": 1713831442
    },
    {
        "content": "<p>Inspired by Alistair's answer, here's a bit shorter proof. Still quite long for such a trivial example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Algebra</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std.ExtendedBinder</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Delaborator</span> <span class=\"n\">SubExpr</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">bigmax</span><span class=\"o\">)</span> <span class=\"s2\">\"⇑ \"</span> <span class=\"o\">(</span><span class=\"s2\">\"[\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">extBinder</span> <span class=\"s2\">\", \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">scoped</span> <span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">bigmax</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Finset.sup</span> <span class=\"n\">Finset.univ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Finset.sup</span> <span class=\"n\">Finset.univ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">hne</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Finset.sup'</span> <span class=\"n\">Finset.univ</span> <span class=\"bp\">$</span><span class=\"n\">hne</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">bigmaxin</span><span class=\"o\">)</span> <span class=\"s2\">\"⇑ \"</span> <span class=\"n\">extBinder</span> <span class=\"s2\">\" in \"</span> <span class=\"n\">term</span> <span class=\"s2\">\", \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">scoped</span> <span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">bigmaxin</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Finset.sup</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Finset.sup</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">scoped</span> <span class=\"n\">delab</span> <span class=\"n\">app.Finset.sup</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">delabFinsetSup</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"n\">whenPPOption</span> <span class=\"n\">getPPNotation</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getAppArgs</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f.isLambda</span>\n  <span class=\"k\">let</span> <span class=\"n\">ppDomain</span> <span class=\"bp\">←</span> <span class=\"n\">getPPOption</span> <span class=\"n\">getPPPiBinderTypes</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">withAppArg</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withBindingBodyUnusedName</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">delab</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">s.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">Finset.univ</span> <span class=\"mi\">2</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">binder</span> <span class=\"bp\">←</span>\n      <span class=\"k\">if</span> <span class=\"n\">ppDomain</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">withNaryArg</span> <span class=\"mi\">1</span> <span class=\"n\">delab</span>\n        <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">extBinder</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">i</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">extBinder</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">i</span><span class=\"o\">):</span><span class=\"n\">ident</span><span class=\"o\">)</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"bp\">$</span><span class=\"n\">binder</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">ss</span> <span class=\"bp\">←</span> <span class=\"n\">withNaryArg</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">delab</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">i</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">ss</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">BigOperators</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Finset.sup'_add_const</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s.Nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">sup'</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sup'</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">comp_sup'_eq_sup'_comp</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sup_add</span> <span class=\"bp\">·</span> <span class=\"bp\">·</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Finset.sup'_const_add</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s.Nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">sup'</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sup'</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.add_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">sup'_add_const</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"o\">)]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Int.add_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span><span class=\"n\">Array</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hi1</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.size</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hi2</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">univ.Nonempty</span><span class=\"o\">}</span>\n        <span class=\"o\">:</span> <span class=\"bp\">⇑</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a.1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">b.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span> <span class=\"bp\">-</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">):</span> <span class=\"n\">WithBot</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">⇑</span><span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">)]</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a.1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">b.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">)):</span><span class=\"n\">ℤ</span><span class=\"o\">)</span>\n <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span> <span class=\"bp\">⇑</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a.1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">b.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span> <span class=\"bp\">-</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">):</span><span class=\"n\">WithBot</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a.1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">b.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span> <span class=\"bp\">-</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">))</span>      <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sup'_eq_sup</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a.1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">b.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span> <span class=\"bp\">-</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">congr</span><span class=\"bp\">!</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sup'_eq_sup</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">univ_eq_attach</span><span class=\"o\">,</span> <span class=\"n\">attach_nonempty_iff</span><span class=\"o\">,</span> <span class=\"n\">nonempty_Ico</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a.1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">b.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span> <span class=\"bp\">-</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">))</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coe_sup'</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">sup'_eq_sup</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n                                                                                        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">univ_eq_attach</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">coe_sup'</span><span class=\"o\">]</span>\n                                                                                        <span class=\"n\">congr</span><span class=\"bp\">!</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sup'_eq_sup</span><span class=\"o\">]</span>\n                                                                                        <span class=\"n\">congr</span><span class=\"bp\">!</span>\n                                                                                        <span class=\"n\">trivial</span>\n                                                                                        <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">⇑</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a.1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">b.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">)</span>   <span class=\"o\">:=</span>  <span class=\"kd\">by</span> <span class=\"n\">congr</span><span class=\"bp\">!</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"bp\">;</span>\n                                                                                           <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Int.sub_eq_add_neg</span><span class=\"o\">]</span>\n                                                                                           <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sup'_add_const</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">a.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">)]</span>\n                                                                                           <span class=\"k\">let</span> <span class=\"n\">x</span><span class=\"o\">:=</span><span class=\"n\">a.prop</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">x</span> <span class=\"bp\">⊢;</span> <span class=\"n\">assumption</span>\n\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 435022399,
        "sender_full_name": "Vlad",
        "timestamp": 1713889645
    }
]