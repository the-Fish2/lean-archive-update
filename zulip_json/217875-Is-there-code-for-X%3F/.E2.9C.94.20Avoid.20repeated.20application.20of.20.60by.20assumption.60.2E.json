[
    {
        "content": "<p>Earlier, I came across the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">P1</span> <span class=\"n\">P2</span> <span class=\"n\">P3</span> <span class=\"n\">P4</span> <span class=\"n\">P5</span> <span class=\"n\">P6</span> <span class=\"n\">P7</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">P1</span> <span class=\"bp\">→</span> <span class=\"n\">P2</span> <span class=\"bp\">→</span> <span class=\"n\">P3</span> <span class=\"bp\">→</span> <span class=\"n\">P4</span> <span class=\"bp\">→</span> <span class=\"n\">P5</span> <span class=\"bp\">→</span> <span class=\"n\">P6</span> <span class=\"bp\">→</span> <span class=\"n\">P7</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">P1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">P2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">P3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">P4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">P5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">P6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>My question is whether the repeated application of <code>by assumption</code> here can be written concisely.<br>\nWhere <code>P1, ... , P7</code> are in fact complex propositions, and it is not possible to use <code>aesop</code> or <code>tauto</code>.</p>",
        "id": 430902482,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712108534
    },
    {
        "content": "<p><code>solve_by_elim</code>.</p>",
        "id": 430903335,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712109173
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">P1</span> <span class=\"n\">P2</span> <span class=\"n\">P3</span> <span class=\"n\">P4</span> <span class=\"n\">P5</span> <span class=\"n\">P6</span> <span class=\"n\">P7</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">P1</span> <span class=\"bp\">→</span> <span class=\"n\">P2</span> <span class=\"bp\">→</span> <span class=\"n\">P3</span> <span class=\"bp\">→</span> <span class=\"n\">P4</span> <span class=\"bp\">→</span> <span class=\"n\">P5</span> <span class=\"bp\">→</span> <span class=\"n\">P6</span> <span class=\"bp\">→</span> <span class=\"n\">P7</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">P1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">P2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">P3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">P4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">P5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">P6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  failed</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">solve_by_elim</span>\n</code></pre></div>",
        "id": 430903689,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712109388
    },
    {
        "content": "<p>Oh, you may need <code>(config := {maxDepth := 10})</code> or something like that.</p>",
        "id": 430903722,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712109418
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">P1</span> <span class=\"n\">P2</span> <span class=\"n\">P3</span> <span class=\"n\">P4</span> <span class=\"n\">P5</span> <span class=\"n\">P6</span> <span class=\"n\">P7</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">P1</span> <span class=\"bp\">→</span> <span class=\"n\">P2</span> <span class=\"bp\">→</span> <span class=\"n\">P3</span> <span class=\"bp\">→</span> <span class=\"n\">P4</span> <span class=\"bp\">→</span> <span class=\"n\">P5</span> <span class=\"bp\">→</span> <span class=\"n\">P6</span> <span class=\"bp\">→</span> <span class=\"n\">P7</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">P1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">P2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">P3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">P4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">P5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">P6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">H</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">solve_by_elim</span>\n</code></pre></div>\n<p>This works! Thank you</p>",
        "id": 430904207,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712109705
    },
    {
        "content": "<p>By the way, I think we can simplify H to P7 . How can I do that?</p>",
        "id": 430904328,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712109768
    },
    {
        "content": "<p><code>apply H &lt;;&gt; solve_by_elim</code> is really wrong. :-) Applying hypotheses is exactly what solve_by_elim is for. Do try setting the maxDepth.</p>",
        "id": 430904520,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712109889
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">P1</span> <span class=\"n\">P2</span> <span class=\"n\">P3</span> <span class=\"n\">P4</span> <span class=\"n\">P5</span> <span class=\"n\">P6</span> <span class=\"n\">P7</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">P1</span> <span class=\"bp\">→</span> <span class=\"n\">P2</span> <span class=\"bp\">→</span> <span class=\"n\">P3</span> <span class=\"bp\">→</span> <span class=\"n\">P4</span> <span class=\"bp\">→</span> <span class=\"n\">P5</span> <span class=\"bp\">→</span> <span class=\"n\">P6</span> <span class=\"bp\">→</span> <span class=\"n\">P7</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">P1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">P2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">P3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">P4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">P5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">P6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">replace</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">P7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">H</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span>\n</code></pre></div>",
        "id": 430904522,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712109891
    },
    {
        "content": "<p>It would be nice if <code>simp at H</code> could provide this kind of simplification.</p>",
        "id": 430904721,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712110016
    },
    {
        "content": "<blockquote>\n<p>Do try setting the maxDepth.</p>\n</blockquote>\n<p>It works in this simple example, but not in the original example I was trying to solve.</p>",
        "id": 430904846,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712110087
    },
    {
        "content": "<p>I think you're misunderstanding what <code>simp</code> does. That's certainly out of scope.</p>",
        "id": 430904860,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712110102
    },
    {
        "content": "<p>Does <code>by simp [*]</code> work here? I suspect so.</p>",
        "id": 430904878,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712110123
    },
    {
        "content": "<p>Is there generally a concise way to simplify propositions such as <code>H</code> here?</p>",
        "id": 430904952,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712110192
    },
    {
        "content": "<p>I'm not sure what you mean by \"simplify\" here.</p>",
        "id": 430905007,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712110211
    },
    {
        "content": "<p>it means transforming <code>H</code> to <code>P7</code> here.</p>",
        "id": 430905037,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712110245
    },
    {
        "content": "<p>So substituting hypotheses into arguments? <code>solve_by_elim</code>. e.g. <code>replace H : P7 := by solve_by_elim</code> (possibly needing to increase the maxDepth, as above).</p>",
        "id": 430905096,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712110320
    },
    {
        "content": "<p>Ok. thanks.</p>",
        "id": 430905156,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712110351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 430905159,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712110354
    }
]