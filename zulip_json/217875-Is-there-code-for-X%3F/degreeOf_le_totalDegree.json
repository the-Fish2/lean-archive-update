[
    {
        "content": "<p>This seems to be missing... I would love to see a 1-line proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">MvPolynomial.degreeOf_le_totalDegree</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">φ.degreeOf</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">φ.totalDegree</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 419499143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706893793
    },
    {
        "content": "<p>Ok, I got a proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">MvPolynomial.degreeOf_le_iff</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">degreeOf</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">support</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.lt_succ_iff</span><span class=\"o\">,</span> <span class=\"n\">degreeOf_lt_iff</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_pos</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">MvPolynomial.degreeOf_le_totalDegree</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">φ.degreeOf</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">φ.totalDegree</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">degreeOf_le_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_totalDegree</span> <span class=\"n\">hd</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">d.support</span>\n  <span class=\"k\">then</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Finset.single_le_sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">zero_le'</span><span class=\"o\">)</span> <span class=\"n\">hi</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.not_mem_support_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hi</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">zero_le</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 419501681,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706894763
    },
    {
        "content": "<p>As a consequence, I now have a sorry-free proof of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">MvPolynomial.IsHomogeneous.exists_eval_ne_zero_of_totalDegree_le_card</span>\n    <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hF₀</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"n\">F.IsHomogeneous</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn₀</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"bp\">#</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">eval</span> <span class=\"n\">r</span> <span class=\"n\">F</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 419501883,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706894846
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.restrictTotalDegree_le_restrictDegree#doc\">docs#MvPolynomial.restrictTotalDegree_le_restrictDegree</a> which you can combine with mem_restrictDegree, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.degreeOf_lt_iff#doc\">docs#MvPolynomial.degreeOf_lt_iff</a> etc. and maybe get a shorter proof.</p>",
        "id": 419503816,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1706895547
    },
    {
        "content": "<p>You can remove <code>n \\neq 0</code>, right? If <code>F</code> is homogeneous of degree <code>0</code> it is constant.</p>",
        "id": 419503881,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706895570
    },
    {
        "content": "<p>Good point</p>",
        "id": 419505398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706896174
    },
    {
        "content": "<p>I have this somewhere but I don't remember where <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> Maybe LeanCamCombi?</p>",
        "id": 419514856,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706899758
    }
]