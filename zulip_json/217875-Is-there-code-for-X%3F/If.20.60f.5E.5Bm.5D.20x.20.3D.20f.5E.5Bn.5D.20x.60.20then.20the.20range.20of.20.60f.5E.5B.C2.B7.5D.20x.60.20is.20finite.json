[
    {
        "content": "<p>I feel like the following proof is unreasonably long. Is there any filter/periodicPts API that can make this easier?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hnm</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set.Finite</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"bp\">·</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">hnm'</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"n\">generalizing</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">hnm.symm</span> <span class=\"n\">h.symm</span> <span class=\"o\">(</span><span class=\"n\">hnm.lt_or_lt.resolve_left</span> <span class=\"n\">hnm'</span><span class=\"o\">)</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Set.Finite.ofFinset</span> <span class=\"o\">((</span><span class=\"n\">Finset.range</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"bp\">·</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_image</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_range</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_range</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">H.choose</span><span class=\"o\">,</span> <span class=\"n\">H.choose_spec.2</span><span class=\"o\">⟩,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"n\">using</span> <span class=\"n\">Nat.strong_induction_on</span>\n  <span class=\"n\">next</span> <span class=\"n\">k</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_or_le</span> <span class=\"n\">k</span> <span class=\"n\">m</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">ha'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">Nat.sub_lt_self</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_pos_of_lt</span> <span class=\"n\">hnm'</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat.sub_le_of_le_add</span> <span class=\"o\">(</span><span class=\"n\">le_add_right</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)))</span>\n    <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha'</span><span class=\"o\">,</span> <span class=\"n\">tsub_tsub_assoc</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"n\">hnm'.le</span><span class=\"o\">,</span> <span class=\"n\">Function.iterate_add_apply</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">Function.iterate_add_apply</span><span class=\"o\">,</span> <span class=\"n\">tsub_add_cancel_of_le</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›]</span>\n</code></pre></div>",
        "id": 433306577,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1713191424
    },
    {
        "content": "<p>I tried to split it up. Did I miss any of the lemmas in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.range_add_const</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">CanonicallyOrderedAddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Ici</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_Ici</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">e</span> <span class=\"bp\">▸</span> <span class=\"n\">le_add_self</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">add_comm</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">exists_add_of_le</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Function.Periodic.image_Ico_eq_image_Ico</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Periodic</span> <span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_add</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">add_lt_add_left</span> <span class=\"n\">hc</span> <span class=\"n\">a</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">image_Ico_eq_image_Ico</span> <span class=\"n\">h</span> <span class=\"n\">hc</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.succ_eq_succ</span><span class=\"o\">,</span>\n      <span class=\"n\">Order.Ico_succ_right</span><span class=\"o\">,</span> <span class=\"n\">Order.Icc_succ_left</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Ioo_insert_left</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">Ioo_insert_right</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">image_insert_eq</span><span class=\"o\">,</span> <span class=\"n\">image_insert_eq</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Function.Periodic.image_Ico</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Periodic</span> <span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">range</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">image_subset_range</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">range_subset_iff.2</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h.image_Ico_eq_image_Ico</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h.image_Ico_eq_image_Ico</span> <span class=\"n\">hc</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">le_rfl</span><span class=\"o\">,</span> <span class=\"n\">add_lt_add_left</span> <span class=\"n\">hc</span> <span class=\"n\">x</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">range_finite_of_eventually_periodic</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">atTop</span><span class=\"o\">]</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Filter.eventually_atTop.mp</span> <span class=\"n\">hf</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Function.Periodic</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">hN</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_add_left</span> <span class=\"n\">N</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">add_right_comm</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">image_univ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Ici_bot</span><span class=\"o\">,</span> <span class=\"n\">bot_eq_zero'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Ico_union_Ici_eq_Ici</span> <span class=\"n\">N.zero_le</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">range_add_const</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">image_union</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">range_comp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">this.image_Ico</span> <span class=\"n\">hk</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">Set.finite_Ico</span> <span class=\"mi\">0</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">union</span> <span class=\"o\">((</span><span class=\"n\">Set.finite_Ico</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hnm</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set.Finite</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"bp\">·</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">hlt</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"n\">generalizing</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">this</span> <span class=\"n\">hnm.symm</span> <span class=\"n\">h.symm</span> <span class=\"o\">(</span><span class=\"n\">hnm.lt_or_lt.resolve_left</span> <span class=\"n\">hlt</span><span class=\"o\">)</span>\n  <span class=\"n\">refine</span> <span class=\"n\">range_finite_of_eventually_periodic</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"n\">Nat.lt_sub_of_add_lt</span> <span class=\"o\">((</span><span class=\"n\">zero_add</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"n\">hlt</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">Filter.eventually_atTop.mpr</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">use</span> <span class=\"n\">n</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">tsub_add_cancel_of_le</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_tsub_cancel_of_le</span> <span class=\"n\">hlt.le</span><span class=\"o\">,</span>\n    <span class=\"n\">Function.iterate_add_apply</span><span class=\"o\">,</span> <span class=\"n\">Function.iterate_add_apply</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 433790451,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1713364915
    },
    {
        "content": "<p>Presumably you can simplify <code>Function.Periodic.image_Ico</code> by mimicking the proof of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Periodic.image_Ioc#doc\">docs#Function.Periodic.image_Ioc</a> (although your version is already quite simple).</p>",
        "id": 433822995,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1713369516
    },
    {
        "content": "<p>Alas, <code>Nat</code> is not a <code>LinearOrderedAddCommGroup</code></p>",
        "id": 433833665,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1713372838
    },
    {
        "content": "<p>I missed that condition. Maybe some of these lemmas can be generalized to a weaker type class?</p>",
        "id": 433843951,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1713376508
    },
    {
        "content": "<p>Here is a generalization of some Mathlib lemmas so that it also works for <code>Nat</code> (not quite connected to the lemmas you need though):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Periodic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span> <span class=\"n\">Set</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_add_nsmul_eq_add_nsmul</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Archimedean</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Sub</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderedSub</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsLeftCancelAdd</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ExistsAddOfLE</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- todo: maybe show that `x` is unique</span>\n  <span class=\"n\">classical</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Archimedean.arch</span> <span class=\"n\">y</span> <span class=\"n\">ha</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">h2l</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.findX</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Archimedean.arch</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">ha</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsub_le_iff_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hl</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">tsub_le_iff_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2l</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">le_tsub_of_add_le_left</span><span class=\"bp\">;</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsub_lt_iff_left</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">not_le</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">l</span>\n    <span class=\"bp\">·</span> <span class=\"n\">nth_rw</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_smul</span> <span class=\"n\">ℕ</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_eq</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"n\">hk</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h.trans</span> <span class=\"n\">hk</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nsmul_le_nsmul_iff_left</span> <span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n      <span class=\"n\">omega</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h2l</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_of_add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n      <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsub_add_cancel_of_le</span> <span class=\"n\">hl</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Function.Periodic.exists_mem_Ico₀'</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Archimedean</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Sub</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderedSub</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsLeftCancelAdd</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ExistsAddOfLE</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Periodic</span> <span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hkl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_add_nsmul_eq_add_nsmul</span> <span class=\"n\">hc</span> <span class=\"n\">x</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h.nsmul</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hkl</span><span class=\"o\">,</span> <span class=\"n\">h.nsmul</span> <span class=\"n\">k</span><span class=\"o\">]⟩</span>\n</code></pre></div>",
        "id": 433883424,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1713392231
    },
    {
        "content": "<p>Andrew, your first lemma is just <code>ext</code> + <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=le_iff_exists_add#doc\">docs#le_iff_exists_add</a></p>",
        "id": 433929739,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713419963
    },
    {
        "content": "<p>In the initial proof, you prove that the range of your function equals the image of <code>range m</code> (when <code>n&lt;m</code>). On the other hand, you only need the inclusion to get finiteness, and that might simplify the proof a little bit.</p>",
        "id": 434019506,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1713437563
    }
]