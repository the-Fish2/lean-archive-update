[
    {
        "content": "<p>I need an explicit description of the elements of the power of an ideal <code>I : Ideal R</code> spanned by a <code>S : Set R</code>. Ideally this formulation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Ideal.mem_span_pow</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">Ideal.span</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n    <span class=\"n\">MvPolynomial.IsHomogeneous</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">MvPolynomial.eval</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is there something towards this? The forward direction is rather straightforward using induction on <code>n</code> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submodule.span_induction#doc\">docs#Submodule.span_induction</a>, the backwards direction seems to be worse.</p>",
        "id": 434579865,
        "sender_full_name": "Christian Merten",
        "timestamp": 1713696604
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Ideal.mem_span_pow</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">Ideal.span</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n    <span class=\"n\">MvPolynomial.IsHomogeneous</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">MvPolynomial.eval</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">p.sum_single</span><span class=\"o\">,</span> <span class=\"n\">map_finsupp_sum</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.sum</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sum_mem</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">c</span> <span class=\"n\">hc</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">MvPolynomial.single_eq_monomial</span><span class=\"o\">,</span> <span class=\"n\">MvPolynomial.eval_monomial</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_mem_left</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">hp</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hc</span><span class=\"o\">),</span> <span class=\"n\">MvPolynomial.weightedDegree_one</span><span class=\"o\">,</span>\n      <span class=\"n\">MvPolynomial.degree</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Finset.prod_pow_eq_pow_sum</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.prod</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Ideal.prod_mem_prod</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">Ideal.pow_mem_pow</span> <span class=\"o\">(</span><span class=\"n\">subset_span</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 434584055,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1713701232
    },
    {
        "content": "<p>Thanks a lot! I derailed at the goal state <code>(Finsupp.prod c fun n e ↦ ↑n ^ e) ∈ Ideal.span S ^ n</code> which I eventually could prove by induction on <code>n</code>, but your solution is way shorter.</p>",
        "id": 434584349,
        "sender_full_name": "Christian Merten",
        "timestamp": 1713701586
    }
]