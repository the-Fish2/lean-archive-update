[
    {
        "content": "<p>I found</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.mul_sub_mod</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>surprisingly awkward to prove. (I need it in Lean, so no imports suggestions are best, but I would be happy with any suggestions of quick proofs.)</p>",
        "id": 428096106,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711016781
    },
    {
        "content": "<p>This was indeed quite painful. At least each individual proof is pretty simple, and these are some useful lemmas to have anyway. Not quite mathlib-free</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.mod_lt_iff</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">zero_lt_of_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mod_lt</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.add_one_mod</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mod_add_mod</span><span class=\"o\">]</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mod_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n  <span class=\"n\">refine</span> <span class=\"n\">h2.not_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_ne</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">elim</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_one_le_iff</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.add_mod_eq_add_mod_cancel_right</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mod</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_mod</span><span class=\"o\">]⟩</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_one_mod</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n    <span class=\"bp\">·</span> <span class=\"n\">omega</span>\n    <span class=\"bp\">·</span> <span class=\"n\">contradiction</span> <span class=\"c1\">-- can omega be taught how to do this?</span>\n    <span class=\"bp\">·</span> <span class=\"n\">contradiction</span> <span class=\"c1\">-- can omega be taught how to do this?</span>\n    <span class=\"bp\">·</span> <span class=\"n\">omega</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"n\">using</span> <span class=\"n\">Nat.recAux</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.add_mod_eq_add_mod_cancel_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">%</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_mod_eq_add_mod_cancel_right</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.sub_mod_eq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">%</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">%</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">le.dest</span> <span class=\"n\">h3</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">le.dest</span> <span class=\"n\">h4</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h5</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">add_mod</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_mod</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_mod_eq_add_mod_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">mod_eq_of_lt</span> <span class=\"n\">h5</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.mul_sub_mod</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.pos_of_mul_pos_right</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">zero_lt_of_lt</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_mod_eq</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_one_le_iff</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 428107094,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711020720
    },
    {
        "content": "<p>Oh, that is nicer that what I came to. Is it just <code>simp_rw</code> and <code>split_ifs</code> from Mathlib?</p>",
        "id": 428108969,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711021449
    },
    {
        "content": "<p>Hmm, slightly more, okay.</p>",
        "id": 428109419,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711021613
    },
    {
        "content": "<p>I am pretty confused why all the <code>simp_rw</code>s don't work at <code>rw</code>!</p>",
        "id": 428109447,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711021628
    },
    {
        "content": "<p>Your two queries about <code>omega</code> are surely bugs in <code>omega</code>.</p>",
        "id": 428110065,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711021873
    },
    {
        "content": "<p>My brutal proof is at <a href=\"https://github.com/leanprover/lean4/pull/3727/files#diff-0dbeee478bb270c49a85d373a39875ebc427323eea248ffa741743cad1648813R813\">https://github.com/leanprover/lean4/pull/3727/files#diff-0dbeee478bb270c49a85d373a39875ebc427323eea248ffa741743cad1648813R813</a>. I will try to reconcile them later. :-)</p>",
        "id": 428110444,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711022035
    },
    {
        "content": "<p>I had to run right after sending, I didn't have time to investigate how much of Mathlib I used.</p>",
        "id": 428163860,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711036789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Nat.2Emul_sub_mod/near/428109447\">said</a>:</p>\n<blockquote>\n<p>I am pretty confused why all the <code>simp_rw</code>s don't work at <code>rw</code>!</p>\n</blockquote>\n<p>Both <code>simp_rw</code> work as <code>rw</code> if you write the first rewrite rule twice.</p>",
        "id": 428164091,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711036835
    },
    {
        "content": "<p>Brutal, but import free (just for fun):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.mul_sub_mod</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Nat.eq_zero_or_pos</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">subst</span> <span class=\"n\">hn</span> <span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_sub</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_sub</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_mod</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.not_lt_zero</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Nat.mul_zero</span> <span class=\"n\">_</span> <span class=\"bp\">▸</span> <span class=\"n\">hp</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.exists_eq_add_of_le</span> <span class=\"n\">h</span>\n    <span class=\"k\">suffices</span> <span class=\"n\">c</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_add_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_cancel</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">hc'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">suffices</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_lt_self</span> <span class=\"n\">Nat.zero_lt_one</span> <span class=\"n\">hn</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.add_mod</span><span class=\"o\">,</span>\n          <span class=\"bp\">←</span> <span class=\"n\">Nat.mul_add_mod</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n      <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.add_sub_assoc</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.mul_succ</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_one</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_pred_eq_of_pos</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n        <span class=\"n\">Nat.sub_eq_iff_eq_add</span> <span class=\"o\">(</span><span class=\"n\">Nat.mul_pos</span> <span class=\"n\">hn</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_right_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">cases</span> <span class=\"n\">Nat.lt_or_ge</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">hlt</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">hlt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc'</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">hge</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.exists_eq_add_of_le</span> <span class=\"n\">hge</span>\n      <span class=\"k\">have</span> <span class=\"n\">hk'</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_of_add_lt_add_left</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.add_sub_assoc</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_assoc</span> <span class=\"n\">hn</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Nat.add_lt_add_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">Nat.mod_lt</span> <span class=\"n\">c</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_sub_one_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.mod_lt</span> <span class=\"n\">x</span> <span class=\"n\">hn</span><span class=\"o\">))</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_mod_left</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"n\">hk'</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">n</span> <span class=\"n\">_</span><span class=\"o\">))]</span> <span class=\"n\">at</span> <span class=\"n\">hc'</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Nat.ne_of_lt</span> <span class=\"n\">hk'</span> <span class=\"n\">hc'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div>",
        "id": 428181946,
        "sender_full_name": "Richard Copley",
        "timestamp": 1711041999
    },
    {
        "content": "<p>This could go next to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mul_sub_div#doc\">docs#Nat.mul_sub_div</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Contrapose</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.mod_eq_sub_div_mul</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_eq_iff_eq_add</span> <span class=\"o\">(</span><span class=\"n\">div_mul_le_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">Nat.mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mod_add_div</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.mul_sub_mod</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mod_eq_sub_div_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_sub_div</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_sub</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.sub_sub</span><span class=\"o\">,</span>\n    <span class=\"n\">Nat.mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.mul_sub_left_distrib</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_sub_self</span><span class=\"o\">,</span> <span class=\"n\">mul_succ</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mod_add_div</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_right_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.add_sub_add_right</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_le_iff</span><span class=\"o\">,</span> <span class=\"n\">Nat.div_lt_iff_lt_mul</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_comm</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.le_zero.mp</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.zero_le</span>\n</code></pre></div>",
        "id": 428240356,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1711067544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>, unfortunately I really need a mathlib free version, as this is for a BitVec application.</p>",
        "id": 428250825,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711074918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>, I've fixed the omega bug in <a href=\"https://github.com/leanprover/lean4/pull/3736\">lean#3736</a>.</p>",
        "id": 428250836,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711074927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>, however yours is easy to-demathlib! Thanks!</p>",
        "id": 428251472,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711075378
    }
]