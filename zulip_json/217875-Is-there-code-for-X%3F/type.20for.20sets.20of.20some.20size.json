[
    {
        "content": "<p>i'd like to formalise steiner systems, where i have the following definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Steiner</span> <span class=\"o\">(</span><span class=\"n\">ι₁</span> <span class=\"n\">ι₂</span> <span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">blocks</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"n\">blocks_have_size</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">blocks</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≃</span> <span class=\"n\">ι₁</span>\n  <span class=\"n\">blocks_are_unique</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≃</span> <span class=\"n\">ι₁</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">blocks</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>in particular i'm wondering if there is a good way to unify the two parameters in <code>blocks_are_unique</code>, or maybe even have the data be a function instead.<br>\na type for sets of a certain size <code>SizedSet S ι</code> would allow the following definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Steiner</span> <span class=\"o\">(</span><span class=\"n\">ι₁</span> <span class=\"n\">ι₂</span> <span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">get_block</span> <span class=\"o\">:</span> <span class=\"n\">SizedSet</span> <span class=\"n\">S</span> <span class=\"n\">ι₁</span> <span class=\"bp\">→</span> <span class=\"n\">SizedSet</span> <span class=\"n\">S</span> <span class=\"n\">ι₂</span>\n  <span class=\"n\">get_block_unique</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">SizedSet</span> <span class=\"n\">S</span> <span class=\"n\">ι₁</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">SizedSet</span> <span class=\"n\">S</span> <span class=\"n\">ι₁</span><span class=\"o\">,</span> <span class=\"n\">s2</span> <span class=\"bp\">⊆</span> <span class=\"n\">get_block</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">get_block</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">get_block</span> <span class=\"n\">s2</span>\n</code></pre></div>\n<p>a working (but kinda ugly) version with <code>(s: Set C) × (ι₁ ≃ s)</code> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Steiner'</span> <span class=\"o\">(</span><span class=\"n\">ι₁</span> <span class=\"n\">ι₂</span> <span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n  <span class=\"n\">get_block</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">ι₁</span> <span class=\"bp\">≃</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">C</span>\n  <span class=\"n\">get_block_size</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">ι₁</span> <span class=\"bp\">≃</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ι₂</span> <span class=\"bp\">≃</span> <span class=\"n\">get_block</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">hs</span><span class=\"o\">⟩</span>\n  <span class=\"n\">get_block_unique</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hs₁</span> <span class=\"o\">:</span> <span class=\"n\">ι₁</span> <span class=\"bp\">≃</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">hs₂</span> <span class=\"o\">:</span> <span class=\"n\">ι₁</span> <span class=\"bp\">≃</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">get_block</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span><span class=\"n\">hs₁</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">get_block</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span><span class=\"n\">hs₂</span><span class=\"o\">⟩</span> <span class=\"bp\">↔</span> <span class=\"n\">s₂</span> <span class=\"bp\">⊆</span> <span class=\"n\">get_block</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span><span class=\"n\">hs₁</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 434339877,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1713525141
    },
    {
        "content": "<p>i see that we don't have heterogeneous comparison or subsets, so i'm guessing that i will have to be content with the first approach <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>",
        "id": 434341716,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1713525896
    },
    {
        "content": "<p>although maybe an appropriate SetLike instance helps... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 434341889,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1713525973
    },
    {
        "content": "<p>Your definition does not seem to use <code>ι₂</code>;  is there a typo somewhere?</p>",
        "id": 434593447,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1713710305
    },
    {
        "content": "<p>It is sometimes tempting to store all the datas in the type, but that obliges to sometimes painful coercions. A case where this is necessary is when you need to have additional structures afterwards, for example, if you need a group to act on your <code>SizedSet S ι</code>. For that reason, in my work on permutation groups (formalization of a theorem of Jordan…), I had to implement </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The type of combinations of `n` elements of a type `α` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Nat.Combination</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and the action on <code>Nat.Combination α n</code> of a group that acts on <code>α</code>.</p>",
        "id": 434593757,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1713710626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/type.20for.20sets.20of.20some.20size/near/434593447\">said</a>:</p>\n<blockquote>\n<p>Your definition does not seem to use <code>ι₂</code></p>\n</blockquote>\n<p>it is at the <code>get_block_size</code> field</p>",
        "id": 434597535,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1713714023
    },
    {
        "content": "<p>or in the signature of the get_block function, depending which definition you meant</p>",
        "id": 434597804,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1713714275
    }
]