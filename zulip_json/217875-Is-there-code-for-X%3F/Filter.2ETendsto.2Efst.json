[
    {
        "content": "<p>I could have sworn we had something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Filter.Tendsto.fst</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">Z</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">X</span> <span class=\"bp\">√ó</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">continuous_fst.tendsto</span> <span class=\"n\">_</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">comp</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>Am I missing something? Do we not want this for some reason?</p>",
        "id": 430490744,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711903667
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Continuous.fst#doc\">docs#Continuous.fst</a>. As for this lemma, it should mention <code>nhds</code> somewhere in its name, because <code>Filter.Tendsto.fst</code> should be about the product of 2 filters, not <code>nhds</code>.</p>",
        "id": 430491629,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1711904458
    },
    {
        "content": "<p>Yes I agree. And I guess we should also add the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.pi#doc\">docs#Filter.pi</a> version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.apply#doc\">docs#Filter.Tendsto.apply</a> ?</p>",
        "id": 430492199,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711904973
    },
    {
        "content": "<p>Yes, <code>Tendsto.apply</code> was there before we added <code>Filter.pi</code>.</p>",
        "id": 430492489,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1711905210
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11812\">#11812</a></p>",
        "id": 430500511,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711912850
    }
]