[
    {
        "content": "<p>A polynomial over an irreducible ring <code>R</code> is irreducible if it is monic and irreducible after<br>\nmapping into an integral domain <code>S</code>. <a href=\"https://math.stackexchange.com/a/4843432/235999\">https://math.stackexchange.com/a/4843432/235999</a></p>\n<p>A generalization to <code>Monic.irreducible_of_irreducible_map</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IntermediateField</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"sd\">/-- A polynomial over an irreducible ring `R` is irreducible if it is monic and irreducible after</span>\n<span class=\"sd\">mapping into an integral domain `S`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Polynomial.Monic.irreducible_of_irreducible_map_of_isPrime_nilradical</span>\n    <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[(</span><span class=\"n\">nilradical</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">IsPrime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">f.Monic</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">Irreducible</span> <span class=\"o\">(</span><span class=\"n\">f.map</span> <span class=\"n\">φ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Irreducible</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">R'</span> <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">nilradical</span> <span class=\"n\">R</span>\n  <span class=\"k\">let</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">R'</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">Ideal.Quotient.lift</span> <span class=\"o\">(</span><span class=\"n\">nilradical</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">φ</span>\n    <span class=\"o\">(</span><span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">RingHom.ker_isPrime</span> <span class=\"n\">φ</span><span class=\"bp\">;</span> <span class=\"n\">nilradical_le_prime</span> <span class=\"o\">(</span><span class=\"n\">RingHom.ker</span> <span class=\"n\">φ</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"n\">R'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"n\">ψ.comp</span> <span class=\"n\">ι</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_map</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hi</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hi</span> <span class=\"o\">:=</span> <span class=\"n\">hm.map</span> <span class=\"n\">ι</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">irreducible_of_irreducible_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hi</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">hi.1</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">mapRingHom</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isUnit_map</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">hu</span> <span class=\"o\">:=</span> <span class=\"n\">hi.2</span> <span class=\"o\">(</span><span class=\"n\">a.map</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b.map</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_mul</span><span class=\"o\">])</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">b.map</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">generalizing</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">])</span> <span class=\"n\">hu.symm</span> <span class=\"o\">(</span><span class=\"n\">hu.resolve_right</span> <span class=\"n\">hb</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">_root_.Polynomial.isUnit_iff.1</span> <span class=\"n\">hb</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsNilpotent</span> <span class=\"o\">(</span><span class=\"n\">b.coeff</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coeff_map</span><span class=\"o\">,</span> <span class=\"n\">coeff_C</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">RingHom.mem_ker</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"n\">RingHom.ker</span> <span class=\"n\">ι</span> <span class=\"bp\">=</span> <span class=\"n\">nilradical</span> <span class=\"n\">R</span> <span class=\"k\">from</span> <span class=\"n\">Ideal.mk_ker</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">h2.symm</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isUnit_of_coeff_isUnit_isNilpotent</span> <span class=\"o\">(</span><span class=\"n\">isUnit_of_mul_isUnit_right</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">a.coeff</span> <span class=\"n\">f.natDegree</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Ideal.isUnit_of_sub_one_mem_jacobson_bot</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"n\">Ideal.radical_le_jacobson</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hn</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">f.leadingCoeff</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"n\">f.natDegree</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">coeff_mul</span><span class=\"o\">,</span> <span class=\"n\">Finset.Nat.sum_antidiagonal_eq_sum_range_succ</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"n\">a.coeff</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">b.coeff</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">Finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_iff_eq_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_self</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">neg_sub</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">neg_mem</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">sum_mem</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">↦</span> <span class=\"n\">Ideal.mul_mem_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hn</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">Nat.sub_ne_zero_of_lt</span> <span class=\"o\">(</span><span class=\"n\">List.mem_range.1</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is this result useful?</p>\n<p>The <code>#find_home</code> cannot find a proper place of it. It cannot be put inside the file where <code>Monic.irreducible_of_irreducible_map</code> defines, since some concepts are not defined yet.</p>\n<p>By the way, seems that we don't have irreducible rings in mathlib yet. Fortunately, <code>[(nilradical R).IsPrime]</code> can be written as an instance.</p>",
        "id": 418746574,
        "sender_full_name": "Jz Pan",
        "timestamp": 1706574787
    },
    {
        "content": "<p>No harm in creating a new file for it!</p>",
        "id": 418747833,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706575608
    },
    {
        "content": "<p>The result is surely useful. Is \"irreducible ring\" standard terminology? Anyway as Scott said you can always create a new file about irreducible rings. Does you result generalize <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.Monic.irreducible_of_irreducible_map#doc\">docs#Polynomial.Monic.irreducible_of_irreducible_map</a> automatically? I mean, is Lean able to find <code>(nilradical R).IsPrime</code> for a domain by itsef?</p>",
        "id": 418788379,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706603548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60Monic.2Eirreducible_of_irreducible_map_of_isPrime_nilradical.60/near/418788379\">said</a>:</p>\n<blockquote>\n<p>Is \"irreducible ring\" standard terminology?</p>\n</blockquote>\n<p>At least in algebraic geometry, for example people usually said \"integral = irreducible + reduced\", but that usually means for schemes. I don't know if this is already a standard in commutative algebra (probably not?).</p>\n<p>The notations on Wikipedia <a href=\"https://en.wikipedia.org/wiki/Irreducible_ring\">https://en.wikipedia.org/wiki/Irreducible_ring</a> confuses me, though. My \"irreducible ring\" refers to \"ring with an irreducible spectrum\" in that article, whereas \"directly irreducible ring\" in that article is usually called \"connected\" by me (since it is equivalent to that the spectrum is connected).</p>\n<blockquote>\n<p>Anyway as Scott said you can always create a new file about irreducible rings.</p>\n</blockquote>\n<p>That's probably a good idea. But I think that is only viable when there are enough results for irreducible rings (perhaps with more connections to algebraic geometry).</p>\n<p>Another possible place for this result is the file where <code>isUnit_of_coeff_isUnit_isNilpotent</code> lives, which file regarding the polynomial and nilpotent elements.</p>\n<blockquote>\n<p>Does you result generalize <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.Monic.irreducible_of_irreducible_map#doc\">docs#Polynomial.Monic.irreducible_of_irreducible_map</a> automatically? I mean, is Lean able to find <code>(nilradical R).IsPrime</code> for a domain by itsef?</p>\n</blockquote>\n<p>Not for now, although this result is easy to add. I've checked that currently no results in mathlib talking about <code>nilradical</code>, <code>Ideal.IsPrime</code> and <code>IsDomain</code> simultaneously.</p>",
        "id": 418808160,
        "sender_full_name": "Jz Pan",
        "timestamp": 1706610941
    },
    {
        "content": "<p>New files are cheap, don't worry about creating one with just a few results if they don't fit neatly anywhere else</p>",
        "id": 418810549,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706611790
    },
    {
        "content": "<p>That is my point, \"irreducible spectrum\" is surely standard, for rings I don't know.</p>",
        "id": 418811869,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706612255
    },
    {
        "content": "<p>Make it one line shorter and without mentioning Jacobson radical:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.RingDivision</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Polynomial.Nilpotent</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"sd\">/-- A polynomial over an irreducible ring `R` is irreducible if it is monic and irreducible after</span>\n<span class=\"sd\">mapping into an integral domain `S`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Polynomial.Monic.irreducible_of_irreducible_map_of_isPrime_nilradical</span>\n    <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[(</span><span class=\"n\">nilradical</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">IsPrime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">f.Monic</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">Irreducible</span> <span class=\"o\">(</span><span class=\"n\">f.map</span> <span class=\"n\">φ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Irreducible</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">R'</span> <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">nilradical</span> <span class=\"n\">R</span>\n  <span class=\"k\">let</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">R'</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">Ideal.Quotient.lift</span> <span class=\"o\">(</span><span class=\"n\">nilradical</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">φ</span>\n    <span class=\"o\">(</span><span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">RingHom.ker_isPrime</span> <span class=\"n\">φ</span><span class=\"bp\">;</span> <span class=\"n\">nilradical_le_prime</span> <span class=\"o\">(</span><span class=\"n\">RingHom.ker</span> <span class=\"n\">φ</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"n\">R'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"n\">ψ.comp</span> <span class=\"n\">ι</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_map</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hi</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hi</span> <span class=\"o\">:=</span> <span class=\"n\">hm.map</span> <span class=\"n\">ι</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">irreducible_of_irreducible_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hi</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">hi.1</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">mapRingHom</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isUnit_map</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">b.map</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">generalizing</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">hi.2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_mul</span><span class=\"o\">])</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">resolve_right</span> <span class=\"n\">hb</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsNilpotent</span> <span class=\"o\">(</span><span class=\"n\">b.coeff</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.isUnit_iff.1</span> <span class=\"n\">hb</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coeff_map</span><span class=\"o\">,</span> <span class=\"n\">coeff_C</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">RingHom.mem_ker</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"n\">RingHom.ker</span> <span class=\"n\">ι</span> <span class=\"bp\">=</span> <span class=\"n\">nilradical</span> <span class=\"n\">R</span> <span class=\"k\">from</span> <span class=\"n\">Ideal.mk_ker</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">h.symm</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isUnit_of_coeff_isUnit_isNilpotent</span> <span class=\"o\">(</span><span class=\"n\">isUnit_of_mul_isUnit_right</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">a.coeff</span> <span class=\"n\">f.natDegree</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">IsUnit.neg_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hn</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">f.leadingCoeff</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"n\">f.natDegree</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">coeff_mul</span><span class=\"o\">,</span> <span class=\"n\">Finset.Nat.sum_antidiagonal_eq_sum_range_succ</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"n\">a.coeff</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">b.coeff</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">Finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_iff_eq_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_self</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_sub_cancel'</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">_</span><span class=\"o\">)),</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">IsNilpotent.sub_one_isUnit</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">show</span> <span class=\"n\">_</span> <span class=\"bp\">∈</span> <span class=\"n\">nilradical</span> <span class=\"n\">R</span> <span class=\"k\">from</span> <span class=\"n\">sum_mem</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">Ideal.mul_mem_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hn</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.sub_ne_zero_of_lt</span> <span class=\"o\">(</span><span class=\"n\">List.mem_range.1</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 418933652,
        "sender_full_name": "Jz Pan",
        "timestamp": 1706654748
    },
    {
        "content": "<p>This is perfectly okay as a standalone file!</p>",
        "id": 418941592,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706658675
    },
    {
        "content": "<p>PR created as <a href=\"https://github.com/leanprover-community/mathlib4/pull/10157\">#10157</a>.</p>",
        "id": 419230425,
        "sender_full_name": "Jz Pan",
        "timestamp": 1706788474
    }
]