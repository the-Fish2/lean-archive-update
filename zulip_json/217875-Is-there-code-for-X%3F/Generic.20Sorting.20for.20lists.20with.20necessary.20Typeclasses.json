[
    {
        "content": "<p>I am using the Array.qsort functionality to sort a List, when needed. This is the function that does it for Ints:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sortInts</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Array.toList</span> <span class=\"bp\">∘</span> <span class=\"n\">flip</span> <span class=\"n\">Array.qsort</span> <span class=\"o\">(</span><span class=\"bp\">·&lt;·</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">Array.mk</span>\n</code></pre></div>\n<p>Now I want to have this function as polimorphic as possible, for every type this LT operation allows. I have tried with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sort</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Array.toList</span> <span class=\"bp\">∘</span> <span class=\"n\">flip</span> <span class=\"n\">Array.qsort</span> <span class=\"o\">(</span><span class=\"bp\">·&lt;·</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">Array.mk</span>\n</code></pre></div>\n<p>(note the LT typeclass constraint), but I am stuck with the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Bool</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>How can I recover the Bool relation?</p>",
        "id": 422321536,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1708386051
    },
    {
        "content": "<p>Add <code>DecidableRel ((.&lt;.) : α → α →α)]</code></p>",
        "id": 422341209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708401624
    },
    {
        "content": "<p>Or use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.mergeSort#doc\">docs#List.mergeSort</a> !</p>",
        "id": 422341240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708401643
    },
    {
        "content": "<p>we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.insertionSort#doc\">docs#List.insertionSort</a> as well, though idk what's more efficient here</p>",
        "id": 422341978,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708402112
    },
    {
        "content": "<p>Thanks for the pointers! However, I am trying to use a version of sort that won't require Mathlib, because of the runtime I expect to run on. I've tried <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> 's suggestion and now I have this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sort</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"o\">((</span><span class=\"bp\">·&lt;·</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Array.toList</span> <span class=\"bp\">∘</span> <span class=\"n\">flip</span> <span class=\"n\">Array.qsort</span> <span class=\"o\">(</span><span class=\"bp\">·&lt;·</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">Array.mk</span>\n</code></pre></div>\n<p>On the DecidableRel (.&lt;.) it says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.1011</span>\n</code></pre></div>\n<p>Is anything missing now?</p>",
        "id": 422422016,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1708437203
    },
    {
        "content": "<p>Whoops, I meant <code> [DecidableRel ((· &lt; ·) : α → α → Prop)]</code></p>",
        "id": 422422578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708437374
    },
    {
        "content": "<p>Now it works, thanks!</p>",
        "id": 422423216,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1708437598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671510\">Bernardo Borges</span> has marked this topic as resolved.</p>",
        "id": 422423283,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708437606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671510\">Bernardo Borges</span> has marked this topic as unresolved.</p>",
        "id": 423116673,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708735875
    },
    {
        "content": "<p>Also in this context, I am working on a polimorphic list sum:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.sum</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.foldl</span> <span class=\"o\">(</span><span class=\"bp\">·+·</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>However this also fails:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to synthesize instance\n  HAdd α α ?m.1836\n\nfailed to synthesize instance\n  OfNat α 0\n</code></pre></div>\n<p>How to require the needed typeclasses? In general, how to I recover these from the error message?</p>",
        "id": 423116807,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1708736007
    },
    {
        "content": "<p>In this case you unfortunately need to know the library. You want <code>[Zero \\a]</code> (mathlib) and <code>[Add \\a]</code> (core)</p>",
        "id": 423116913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708736090
    },
    {
        "content": "<p>Alternatively you could just use <code>[OfNat α 0]</code> directly as the error message asks for. But you won't be able to prove so many interesting statements about your list.sum without further assumptions like being an additive monoid at least.</p>",
        "id": 423157952,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1708770198
    }
]