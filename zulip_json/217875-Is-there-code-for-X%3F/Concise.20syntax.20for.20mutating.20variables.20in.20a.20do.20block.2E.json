[
    {
        "content": "<p>I am trying to create a library that allows a concise procedural language-like writing style when overwriting the value of a variable in a do block.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ### Addition -/</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"s2\">\"+=\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">+=</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">l</span> <span class=\"bp\">+=</span> <span class=\"mi\">2</span>\n  <span class=\"n\">l</span> <span class=\"bp\">+=</span> <span class=\"mi\">3</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">l</span>\n  <span class=\"k\">let</span> <span class=\"n\">check</span> <span class=\"o\">:=</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span>\n  <span class=\"k\">if</span> <span class=\"n\">not</span> <span class=\"n\">check</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.throwServerError</span> <span class=\"s2\">\"error\"</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ### Subtraction -/</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"s2\">\"-=\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">-=</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n  <span class=\"n\">l</span> <span class=\"bp\">-=</span> <span class=\"mi\">2</span>\n  <span class=\"n\">l</span> <span class=\"bp\">-=</span> <span class=\"mi\">3</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">l</span>\n  <span class=\"k\">let</span> <span class=\"n\">check</span> <span class=\"o\">:=</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">if</span> <span class=\"n\">not</span> <span class=\"n\">check</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.throwServerError</span> <span class=\"s2\">\"error\"</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ### List concatenation -/</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"s2\">\"++=\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">++=</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"n\">l</span> <span class=\"bp\">++=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"n\">l</span> <span class=\"bp\">++=</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">l</span>\n  <span class=\"k\">let</span> <span class=\"n\">check</span> <span class=\"o\">:=</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span>\n  <span class=\"k\">if</span> <span class=\"n\">not</span> <span class=\"n\">check</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.throwServerError</span> <span class=\"s2\">\"error\"</span>\n</code></pre></div>\n<p>However, I am stuck on the syntax for mutating arrays and lists. <code>array[i]! := y</code>, which I thought would be a good shorthand for <code>array := array.set! i y</code>, but I would like to hear what others have to say. What syntax would you suggest?</p>",
        "id": 430057979,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711629273
    }
]