[
    {
        "content": "<p>I'd like to have a version of <code>tauto</code> that simplifies tautologies as much as possible, leaving me with the final goal state. In order to avoid an XY problem, I have some bitvector reasoning:</p>\n<p>I start with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">BitVec</span> <span class=\"n\">w</span>\n<span class=\"n\">h</span><span class=\"bp\">✝²</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">#</span><span class=\"n\">w</span>\n<span class=\"n\">h</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">((</span><span class=\"bp\">¬</span><span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">intMin</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">#</span><span class=\"n\">w</span><span class=\"o\">)</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">#</span><span class=\"n\">w</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">intMin</span> <span class=\"n\">w</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">#</span><span class=\"n\">w</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">False</span>\n</code></pre></div>\n<p>and I want to end with the state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">BitVec</span> <span class=\"n\">w</span>\n<span class=\"n\">h</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">#</span><span class=\"n\">w</span>\n<span class=\"n\">em</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"n\">a</span>\n<span class=\"n\">left</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">intMin</span> <span class=\"n\">w</span>\n<span class=\"n\">right</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">#</span><span class=\"n\">w</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">False</span>\n</code></pre></div>\n<p>where the subsingleton property of bitvectors of width 1 creates a contradiction between <code>right✝ : y = -1#w\n</code> and <code>h✝¹ : ¬y = 0#w</code>.</p>\n<p>Currently, <code>tauto</code> from the starting goal ends with \"unsolved goal &lt;END GOAL STATE&gt;\". I want a version of <code>tauto</code> that leaves me there interactively (ie, a version of <code>tauto</code> that is <em>not</em> a finishing tactic).</p>",
        "id": 418614075,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1706526831
    },
    {
        "content": "<p>It seems like <code>Mathlib.Tactic.Tauto.Config</code> is currently empty, so it's unlikely that the tactic can be configured to do this.</p>\n<p>However, the <code>aesop</code> tactic has a configuration option to make it non-terminal: <code>aesop (options := { terminal := False })</code>.</p>\n<p>It might be possible to use <code>aesop</code> as a replacement for <code>tauto</code>, but it probably depends on the specifics of the use-case.</p>",
        "id": 418617193,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1706528017
    },
    {
        "content": "<p>Alternatively. I could PR mathlib adding a config, correct?</p>",
        "id": 418617229,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1706528037
    },
    {
        "content": "<p>Yes</p>",
        "id": 418617331,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1706528068
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 418617344,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1706528074
    }
]