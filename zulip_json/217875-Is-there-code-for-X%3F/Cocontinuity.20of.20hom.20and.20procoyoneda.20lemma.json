[
    {
        "content": "<p>Do we have any of the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span> <span class=\"n\">Opposite</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">HasColimit</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasLimit</span> <span class=\"o\">(</span><span class=\"n\">F.op</span> <span class=\"bp\">⋙</span> <span class=\"n\">coyoneda</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasLimit</span> <span class=\"n\">F.op</span> <span class=\"o\">:=</span> <span class=\"n\">hasLimit_op_of_hasColimit</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">limitOfOpIsoOpColimit</span> <span class=\"o\">:</span> <span class=\"n\">limit</span> <span class=\"n\">F.op</span> <span class=\"bp\">≅</span> <span class=\"n\">op</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">colimit</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cocone</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">colimit.cocone</span> <span class=\"n\">F</span>\n  <span class=\"k\">let</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">IsColimit</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">colimit.isColimit</span> <span class=\"n\">F</span>\n  <span class=\"n\">limit.isoLimitCone</span> <span class=\"o\">⟨</span><span class=\"n\">c.op</span><span class=\"o\">,</span> <span class=\"n\">IsColimit.op</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">homCocont</span> <span class=\"o\">:</span> <span class=\"n\">coyoneda.obj</span> <span class=\"o\">(</span><span class=\"n\">limit</span> <span class=\"n\">F.op</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">F.op</span> <span class=\"bp\">⋙</span> <span class=\"n\">coyoneda</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">preservesLimitIso</span> <span class=\"n\">coyoneda</span> <span class=\"n\">F.op</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">homCocont'</span> <span class=\"o\">:</span> <span class=\"n\">coyoneda.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">colimit</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">F.op</span> <span class=\"bp\">⋙</span> <span class=\"n\">coyoneda</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">coyoneda.mapIso</span> <span class=\"o\">(</span><span class=\"n\">limitOfOpIsoOpColimit</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">≪≫</span> <span class=\"n\">homCocont</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">homCocont'App</span> <span class=\"o\">[</span><span class=\"n\">HasLimitsOfShape</span> <span class=\"n\">I</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">colimit</span> <span class=\"n\">F</span> <span class=\"bp\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">F.op</span> <span class=\"bp\">⋙</span> <span class=\"n\">yoneda.obj</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">homCocont'</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">limitObjIsoLimitCompEvaluation</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I need it for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">HasColimit</span> <span class=\"o\">(</span><span class=\"n\">D.rightOp</span> <span class=\"bp\">⋙</span> <span class=\"n\">coyoneda</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">HasLimitsOfShape</span> <span class=\"n\">J</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span><span class=\"o\">))]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">procoyonedaIso</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">colimit</span> <span class=\"o\">(</span><span class=\"n\">D.rightOp</span> <span class=\"bp\">⋙</span> <span class=\"n\">coyoneda</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">⋙</span> <span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">uliftFunctor.</span><span class=\"o\">{</span><span class=\"n\">u₁</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">homCocont'App</span> <span class=\"n\">_</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n    <span class=\"o\">(</span><span class=\"n\">HasLimit.isoOfNatIso</span> <span class=\"o\">(</span><span class=\"n\">isoWhiskerLeft</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">⋙</span> <span class=\"n\">Prod.sectl</span> <span class=\"n\">C</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">coyonedaLemma</span> <span class=\"n\">C</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>If it does not exist, do you have a suggestion where it should go?</p>",
        "id": 438129082,
        "sender_full_name": "Christian Merten",
        "timestamp": 1715455632
    }
]