[
    {
        "content": "<p>Does such a function exist, or is there some easy way to get this functionality?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Return the proof that `e₁ = e₂` based on specializing `eq` - i.e. `eq` has type `∀ _, _`.</span>\n<span class=\"kd\">def</span> <span class=\"n\">rewriteFromTo</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Lean.Expr</span>\n</code></pre></div>",
        "id": 412936699,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1705318027
    },
    {
        "content": "<p>that sounds somewhat like applying <code>forallMetaTelescope</code> to get a metavariable equality and then unifying it against <code>mkEq e1 e2</code></p>",
        "id": 412937335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705318243
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 413004229,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1705339665
    },
    {
        "content": "<p>You could probably use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.rewrite#doc\">docs#Lean.MVarId.rewrite</a> (or be inspired by its implementation) as a first approximation.</p>\n<p>Since there are two expressions, I guess you want to compute a diff to identify where <code>eq</code> should apply?</p>",
        "id": 413005412,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705340119
    },
    {
        "content": "<p>In my real world scenario I also have the <code>SubExpr.Pos</code> at which the rewrite should happen, so I can pretty much use the approach suggested by Mario.</p>",
        "id": 413010016,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1705342271
    },
    {
        "content": "<p>Ok I'm stuck at what should be the easier part now. What does the whole dance Mario suggested actually look like? I guess it would start like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"c1\">-- The proof that `lhs = rhs` based on `proof : ∀ _, _ = _`.</span>\n<span class=\"kd\">def</span> <span class=\"n\">rewriteFromTo</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">proof</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">proofType</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">proof</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">proofType'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">proofType</span>\n  <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkEq</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"n\">proofType'</span> <span class=\"k\">do</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"proof's type is not defeq to required equality type\"</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But how do we actually instantiate the arguments to <code>proof</code>?</p>",
        "id": 413198800,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1705424259
    },
    {
        "content": "<p>Something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rewriteFromTo</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">proof</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">proofType</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">proof</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">proofType'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">proofType</span>\n  <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkEq</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"n\">proofType'</span> <span class=\"k\">do</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"proof's type is not defeq to required equality type\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">pf</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppN</span> <span class=\"n\">proof</span> <span class=\"n\">args</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 413200500,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705424732
    },
    {
        "content": "<p>Though if you need to synthesize instance arguments then you need to loop through the arguments and still do that.</p>",
        "id": 413200761,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705424800
    }
]