[
    {
        "content": "<p>How do I prove the following in a simple way?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">sInf</span> <span class=\"o\">(</span><span class=\"n\">Real.toEReal</span> <span class=\"bp\">''</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 410765558,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704148982
    },
    {
        "content": "<p>I think that you will need to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Not sure if true with weaker TC assumptions</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">IsGLB.image</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hsx</span> <span class=\"o\">:</span> <span class=\"n\">IsGLB</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"n\">OrdConnected</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">IsGLB</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 410766430,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704149872
    },
    {
        "content": "<p>With corollaries for <code>sInf</code> in a <code>ConditionallyCompleteLattice</code>.</p>",
        "id": 410766477,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704149900
    },
    {
        "content": "<p>I have solved my problem as follows.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">EReal.Ioi_ofReal</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Real.toEReal</span> <span class=\"bp\">''</span> <span class=\"n\">Set.Ioi</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Set.Ioo</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Set.image_comp</span> <span class=\"n\">WithBot.some</span> <span class=\"n\">WithTop.some</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">WithTop.image_coe_Ioi</span><span class=\"o\">,</span> <span class=\"n\">WithBot.image_coe_Ioo</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">sInf</span> <span class=\"o\">(</span><span class=\"n\">Real.toEReal</span> <span class=\"bp\">''</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.Ioi_def</span><span class=\"o\">,</span> <span class=\"n\">EReal.Ioi_ofReal</span><span class=\"o\">,</span> <span class=\"n\">EReal.coe_one</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">csInf_Ioo</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">EReal.coe_lt_top</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I think I will (eventually) add <code>EReal.Ioi_ofReal</code> together with the seven other similar lemmas to one of the preparatory PRs for the extension of the L-series material. (Unless there are objections...)</p>",
        "id": 410843270,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704200771
    },
    {
        "content": "<p>Sounds good! The sooner the better, I'd say</p>",
        "id": 410843390,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704200846
    },
    {
        "content": "<p>Does it make sense to PR stuff right now, with the cache not working?</p>",
        "id": 410843426,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704200869
    },
    {
        "content": "<p>If it's working on your end, then luckily you will get green CI on the first go.</p>",
        "id": 410843591,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704200948
    },
    {
        "content": "<p>You can also base yourself off <code>v2024</code></p>",
        "id": 410843608,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704200961
    },
    {
        "content": "<p>How do I upgrade my current <code>master</code> to precisely this version? (I.e., what's the command syntax for <code>git</code>?)</p>",
        "id": 410843727,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704201005
    },
    {
        "content": "<p><code>git checkout v2024</code> should do</p>",
        "id": 410843875,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704201111
    },
    {
        "content": "<p>That doesn't do what Michael asked though</p>",
        "id": 410844044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704201213
    },
    {
        "content": "<p>This gives me an error (something like \"path specification 'v2024' is not known to git\" [paraphrasing and translating from the German locale...]).</p>",
        "id": 410844055,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704201217
    },
    {
        "content": "<p>I don't know the git command but you can click on the branch name in the bottom left of vscode and find it there.</p>",
        "id": 410844169,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704201261
    },
    {
        "content": "<p>you may need to git pull first</p>",
        "id": 410844287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704201338
    },
    {
        "content": "<p>to move master to that commit, checkout master and then (with a clean working directory) <code>git reset v2024 --hard</code></p>",
        "id": 410844461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704201439
    },
    {
        "content": "<p>I still have a branch (for the PR on bounds on the complex log, which is slowly rotting) in my <code>mathlib</code> directory. If I do <code>git reset v2024 --hard</code> there, will this be a problem?</p>",
        "id": 410844777,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704201606
    },
    {
        "content": "<p>I seem to have ended up with a branch called <code>v2024</code>, which is probably not what I should have done.</p>",
        "id": 410845039,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704201741
    },
    {
        "content": "<p>If you are on a branch then you probably want to rebase onto <code>v2024</code> instead</p>",
        "id": 410845441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704201937
    },
    {
        "content": "<p><code>git rebase v2024</code></p>",
        "id": 410845461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704201949
    },
    {
        "content": "<p>from your branch</p>",
        "id": 410845475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704201954
    },
    {
        "content": "<p>and probably delete the <code>v2024</code> branch</p>",
        "id": 410845528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704201968
    },
    {
        "content": "<p>I switched back to <code>master</code> and deleted the <code>v2024</code> branch. Do I now do <code>git reset v2024</code> or something?</p>",
        "id": 410845716,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704202080
    },
    {
        "content": "<p>yes, <code>git reset v2024 --hard</code> from the master branch</p>",
        "id": 410846896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704202673
    },
    {
        "content": "<p>if you don't use <code>--hard</code> it will keep your working tree the same, meaning that you will end up with hundreds of dirty files from all the changes in master since v2024</p>",
        "id": 410846988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704202713
    },
    {
        "content": "<p>but it's equivalent to <code>git reset v2024</code> and then just discard all changes in the working directory</p>",
        "id": 410847074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704202769
    },
    {
        "content": "<p>Did this, but then <code>lake exe cache get</code> does not work (which is unsurprising, I guess). And <code>lake build</code> starts building a lot of stuff...</p>",
        "id": 410847118,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704202793
    },
    {
        "content": "<p>what does <code>lake exe cache get</code> do?</p>",
        "id": 410847219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704202818
    },
    {
        "content": "<p>produces thousands of lines <code>The requested URL returned error: 403</code>.</p>",
        "id": 410847262,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704202841
    },
    {
        "content": "<p>It is supposed to work on that version, but since about <time datetime=\"2024-01-02T10:07:00Z\">2024-01-02T05:07:00-05:00</time> it's been reporting 403 for everyone</p>",
        "id": 410847297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704202857
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9404\">#9404</a> for the interval lemmas.</p>",
        "id": 410885633,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704219178
    },
    {
        "content": "<p>BTW, should the interval lemmas be tagged <code>simp</code>?</p>",
        "id": 410886348,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704219570
    },
    {
        "content": "<p>Now CI fails at the \"get cache\" stage and doesn't even try to build Mathlib after that (even though I branched off the <code>v2024</code> Mathlib)...<br>\nSo I assume it does not make much sense to PR stuff until the cache problem is solved?</p>",
        "id": 410886842,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704219810
    }
]