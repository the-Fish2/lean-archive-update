[
    {
        "content": "<p>I really like the concept and general approach of FB AI Research's Tensor Comprehensions system (<a href=\"https://github.com/facebookresearch/TensorComprehensions\">Repo</a>, <a href=\"https://facebookresearch.github.io/TensorComprehensions/\">Docs</a>, <a href=\"https://arxiv.org/pdf/1802.04730.pdf\">Paper</a>)<br>\nfor concisely expressing the semantics of (most) deep learning kernels. This starts at typical BLAS routines, but extends over the common einsum approach to expressing tensor contractions that are restricted to the normal add/mul semiring of the usual <code>f32</code> primitive type.</p>\n<p>From the paper:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sgemm</span><span class=\"o\">(</span><span class=\"n\">float</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">float</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">float</span><span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">float</span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">#</span> <span class=\"n\">initialization</span>\n  <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">+=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">#</span> <span class=\"n\">accumulation</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mv</span><span class=\"o\">(</span><span class=\"n\">float</span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">float</span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+=!</span> <span class=\"n\">A</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fcrelu</span><span class=\"o\">(</span><span class=\"n\">float</span><span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">,</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"k\">in</span><span class=\"o\">,</span> <span class=\"n\">float</span><span class=\"o\">(</span><span class=\"n\">O</span><span class=\"o\">,</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"n\">weight</span><span class=\"o\">,</span> <span class=\"n\">float</span><span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"n\">bias</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">out</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">out</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bias</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"n\">out</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"bp\">+=</span> <span class=\"k\">in</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">weight</span><span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">out</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fmaxf</span><span class=\"o\">(</span><span class=\"n\">out</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>The <code>+=!</code> just means \"zero init the target before performing the accumulation/reduction\".</p>\n<p>I'd love to get to use Lean to reason about and discuss/explain custom kernels, particularly including forward/reverse mode vector jacobian/jacobian vector products, getting to check/prove that the modified/transformed kernels indeed compute the supposed derivatives of the original kernel.<br>\nIdeally there'd also be a way to go further and partially specialize dimensions to work out arithmetic intensity (ratio of compute to memory access, indicating whether an implementation is memory-bound or compute-bound, at least for sufficiently regular memory access patterns) and some influence of numerical problems (e.g. catastrophic cancellation) for some concrete implementation that nominally respects the analytical definition, but is trying to offer practical performance.</p>\n<p>I'd hope for some suggestions/pointers to how to use a spiritually similar syntax in Lean, which is at least somewhat amenable to mathlib4's analysis.</p>",
        "id": 412046413,
        "sender_full_name": "namibj",
        "timestamp": 1704851172
    },
    {
        "content": "<p>I haven't read the paper yet but these functions can be implemented with <a href=\"https://github.com/lecopivo/SciLean\">SciLean</a>(library I'm working on). I'm not sure if I have implemented <code>fcrelu</code> correctly either I do not understand the notation or there should be <code>float(O) bias</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">SciLean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">SciLean</span> <span class=\"n\">ArrayType</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sgemm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">M</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"n\">K</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">K</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mapIdx</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">cij</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">cij</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"o\">[(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">[(</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)])</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mv</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"n\">K</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⊞</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">[(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)]</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fcrelu</span> <span class=\"o\">(</span><span class=\"k\">in</span><span class=\"bp\">'</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">,</span><span class=\"n\">I</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">weight</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">O</span><span class=\"o\">,</span><span class=\"n\">I</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">bias</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">O</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">,</span><span class=\"n\">O</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⊞</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">bias</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">in</span><span class=\"bp\">'</span><span class=\"o\">[(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"bp\">*</span> <span class=\"n\">weight</span><span class=\"o\">[(</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>If I add differentiation rules for <code>mapIdx</code> and <code>max</code> then SciLean can also generate derivatives of these functions and provide a \"proof\" of correctness . Right now, such proof would not be complete as SciLean does not prove all the elementary transformation rules and implementation of n-arrays(<code>Float^[n,m,k]</code>) is not yet verified.</p>\n<p>In future, I would like to optimize/rewrite these functions using techniques and ideas from the paper <a href=\"https://people.csail.mit.edu/lamanda/assets/documents/LiuPOPL2022.pdf\">Verified Tensor-Program Optimization Via High-Level Scheduling Rewrites</a> but I will also look at the paper you have mentioned.</p>\n<p>However, many things you have mentioned will not be possible to prove/reason about if these function are defined as normal Lean functions. Because Lean has function extensionality you can't reason about the implementation of a function. Thus reasoning if a function is memory/compute bound would require a different approach. Lastly I have no clue how to reason about numerical problems like catastrophic cancellation.</p>",
        "id": 412291076,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1704961776
    },
    {
        "content": "<p>Hmm, is it possible to reason about the memory access vs. compute aspects from the version you've written there?<br>\nI have a Julia and a C implementation of the fcrelu; the former is just visually inspected, the latter is tested to not segfault; both have been written under my directions from GPT-4 with a relevant excerpt form the paper provided as reference/semantics spec.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">fcrelu</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"o\">::</span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">weight</span><span class=\"o\">::</span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">bias</span><span class=\"o\">::</span><span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"c\"># Dimension assertions</span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">O</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">I3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">bias</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nd\">@assert</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">I2</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">I3</span>\n\n<span class=\"w\">    </span><span class=\"c\"># Initialize the output tensor 'out'</span>\n<span class=\"w\">    </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"c\"># First operation: Initialize 'out' with 'bias'</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">O</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">B</span>\n<span class=\"w\">        </span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bias</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n\n<span class=\"w\">    </span><span class=\"c\"># Second operation: Accumulate the matrix multiplication</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">O</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">I</span>\n<span class=\"w\">        </span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">weight</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n\n<span class=\"w\">    </span><span class=\"c\"># Third operation: Apply ReLU activation</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">O</span>\n<span class=\"w\">        </span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">out</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdlib.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;math.h&gt;</span>\n\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">fcrelu</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">float</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">weight</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">float</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">bias</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">float</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Initialize 'out' with 'bias'</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">o</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bias</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">];</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Accumulate the matrix multiplication</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">o</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">weight</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">];</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Apply ReLU activation</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">o</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fmaxf</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mf\">0.0f</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Example usage</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// Number of batches</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"c1\">// Input size</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"c1\">// Output size</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Allocate memory for input, weights, bias, and output</span>\n<span class=\"w\">    </span><span class=\"kt\">float</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"kt\">float</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">weight</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"kt\">float</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">bias</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"kt\">float</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">));</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Initialize input, weight, bias here (omitted for brevity)</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Call fcrelu</span>\n<span class=\"w\">    </span><span class=\"n\">fcrelu</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">weight</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bias</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Use 'out' here (omitted for brevity)</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Free allocated memory</span>\n<span class=\"w\">    </span><span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">bias</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 412469093,
        "sender_full_name": "namibj",
        "timestamp": 1705030155
    },
    {
        "content": "<p>No, you can't reason about the memory access or compute of the Lean functions I wrote.</p>\n<p>You would have to define a specialized language, its memory model and compute cost. Only then can you reason about stuff like that.</p>\n<p>Your Julia and C versions of <code>fcrelu</code> match my Lean implementation.</p>",
        "id": 412543794,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1705065752
    }
]