[
    {
        "content": "<p>In <code>conv</code> mode, if I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>I understand that <code>left</code> (or <code>lhs</code>) will focus on <code>a</code>, and <code>right</code> (or <code>rhs</code>) will focus on <code>b</code>.</p>\n<p>How can I focus on <code>f</code>?</p>\n<p>If there isn't an easy tactic for that already, is it worth adding?</p>",
        "id": 419039563,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706707828
    },
    {
        "content": "<p>I don't see it (I haven't used <code>conv</code> much in Lean 4 yet), but that is definitely worth having!</p>",
        "id": 419041017,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1706708334
    },
    {
        "content": "<p>What happens if you use the conv widget?</p>",
        "id": 419041191,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706708393
    },
    {
        "content": "<p>If I used it correctly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">Not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"n\">conv</span> <span class=\"n\">target</span>\n</code></pre></div>",
        "id": 419042544,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706708818
    },
    {
        "content": "<p>Maybe <code>conv =&gt; enter [0]</code> would be a reasonable way to specify that, if it gets included in <code>conv</code>.</p>",
        "id": 419046378,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706709856
    },
    {
        "content": "<p>Intuitively, I tried and hoped for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span>\n</code></pre></div>\n<p>but that’s a keyword (not sure if that prevents it from working here)</p>",
        "id": 419046679,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706709943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/conv.20to.20focus.20on.20the.20function/near/419042544\">said</a>:</p>\n<blockquote>\n<p>If I used it correctly:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">Not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"n\">conv</span> <span class=\"n\">target</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Same here.</p>",
        "id": 419047021,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706710032
    },
    {
        "content": "<p>Maybe <code>arg 1</code>?</p>",
        "id": 419048419,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706710427
    },
    {
        "content": "<p>It seems I can simply use <code>apply congrFun</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">congrFun</span>\n    <span class=\"n\">apply</span> <span class=\"n\">congrFun</span>\n    <span class=\"n\">apply</span> <span class=\"n\">congrFun</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h2</span>\n</code></pre></div>\n<p>It shows some extra </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">h.h.g</span>\n<span class=\"n\">PQ</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span>\n<span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>on the side, arising from the implicit argument <code>{g}</code> of <code>congrFun</code>,  which <code>left</code> doesn’t – expected? Can I avoid that easily?</p>",
        "id": 419063410,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706714501
    },
    {
        "content": "<p>In this case you can also write <code>pattern P</code>, I think (might not be practical in a real-world example)</p>",
        "id": 419067807,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706715715
    },
    {
        "content": "<p>Thanks! But yeah, that won’t work in my intended use case (in a non-interactive tactic script)</p>",
        "id": 419067947,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706715749
    },
    {
        "content": "<p>It would make sense having a <code>conv</code> tactic for rewriting the function. That would mimic how <code>simp</code> works: it effectively</p>\n<ol>\n<li>applies this non-existent <code>conv</code> tactic to create a goal to recursively simplify the function, and then it</li>\n<li>applies the <code>congr</code> tactic to create goals for each argument, and then it recursively simplify each argument</li>\n</ol>\n<p>The limitation in <code>congr</code> (and thus <code>enter</code>, <code>left</code>, <code>right</code>, etc.) is because <code>conv</code> is only making use of the congruence lemmas generated for step 2.</p>",
        "id": 419096252,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706724219
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/Tactic/Simp/Main.lean#L366-L378\">Here's the function</a> where <code>simp</code> simplifies the function and then creates a <code>congrFun</code> chain.</p>",
        "id": 419096670,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706724366
    },
    {
        "content": "<p>Created an RFC to ask for a function-focusing conv tactic: <a href=\"https://github.com/leanprover/lean4/issues/3239\">https://github.com/leanprover/lean4/issues/3239</a></p>",
        "id": 419286367,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706805467
    },
    {
        "content": "<p>Also created a PR. Does someone want to sanity check it?<br>\n<a href=\"https://github.com/leanprover/lean4/pull/3240\">https://github.com/leanprover/lean4/pull/3240</a></p>",
        "id": 421995766,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1708161241
    },
    {
        "content": "<p>I had a brief look and it looks good! The only thing I do not understand is the need for <code>← isDefEqGuarded rhs rhs'</code> check but I see this kinds of stuff all over Lean code base so I'm not surprised by it.</p>",
        "id": 422021590,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1708184257
    },
    {
        "content": "<p>If you are in the mood of improving <code>conv</code> would it be possible to modify conv such that you can <code>enter[...]</code> into <code>if c then t else f</code> statements? In particular I want to focus on either <code>t</code> or <code>f</code>.</p>",
        "id": 422021695,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1708184348
    },
    {
        "content": "<p>You can't do this with <code>congr</code>?</p>",
        "id": 422028018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708189785
    },
    {
        "content": "<p>Or left and right? Or possibly arg 2 and arg 3?</p>",
        "id": 422028689,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1708190273
    },
    {
        "content": "<p>Nope it does not work<br>\nmwe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"k\">then</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">enter</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"c1\">-- only 4 works</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422033773,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1708195065
    },
    {
        "content": "<p><code>congr</code> works but then you have to modify the condition and both branches</p>",
        "id": 422033887,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1708195157
    },
    {
        "content": "<p>Interesting, if you do <code>congr</code> you can get into each piece (and use <code>rfl</code> like usual for the ones you don't want to handle), but it creates a non-conv <code>Decidable</code> goal as well, since we don't know the RHS condition yet.</p>",
        "id": 422033966,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708195211
    },
    {
        "content": "<p>That seems to be choking up <code>enter</code></p>",
        "id": 422033972,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708195221
    },
    {
        "content": "<p>I wonder if <code>conv</code> should have some protocol for collecting certain goals that it should be responsible for itself, like eventually discharging this <code>Decidable</code>.</p>",
        "id": 422034006,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708195276
    },
    {
        "content": "<p>It can definitely discharge this: ideally it uses <code>infer_instance</code>, but if that fails it can rewrite the original <code>Decidable</code> to construct the instance.</p>",
        "id": 422034033,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708195320
    },
    {
        "content": "<p>This should probably be reported as an issue</p>",
        "id": 422044321,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1708205629
    }
]