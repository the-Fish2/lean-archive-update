[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">GType</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">GNat</span> <span class=\"o\">:</span> <span class=\"n\">GType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Arrow</span> <span class=\"o\">:</span> <span class=\"n\">GType</span> <span class=\"bp\">→</span> <span class=\"n\">GType</span> <span class=\"bp\">→</span> <span class=\"n\">GType</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">GType</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">GTerm</span> <span class=\"o\">:</span> <span class=\"n\">GType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">App</span>  <span class=\"o\">:</span> <span class=\"n\">GTerm</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">GTerm</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">GTerm</span> <span class=\"n\">B</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Zero</span> <span class=\"o\">:</span> <span class=\"n\">GTerm</span> <span class=\"n\">GNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Succ</span> <span class=\"o\">:</span> <span class=\"n\">GTerm</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"n\">GNat</span> <span class=\"n\">GNat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Rec</span>  <span class=\"o\">:</span> <span class=\"n\">GTerm</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"n\">GNat</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"n\">τ</span> <span class=\"n\">τ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"n\">GNat</span> <span class=\"n\">τ</span><span class=\"o\">)))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">K</span>    <span class=\"o\">:</span> <span class=\"n\">GTerm</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"n\">σ</span> <span class=\"n\">τ</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">S</span>    <span class=\"o\">:</span> <span class=\"n\">GTerm</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"n\">σ</span> <span class=\"n\">ρ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"n\">τ</span> <span class=\"n\">ρ</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">GTerm</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Convertible</span> <span class=\"o\">:</span> <span class=\"n\">GTerm</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">GTerm</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConvApp</span> <span class=\"o\">:</span> <span class=\"n\">Convertible</span> <span class=\"n\">τ</span> <span class=\"n\">τ'</span> <span class=\"bp\">→</span> <span class=\"n\">Convertible</span> <span class=\"n\">σ</span> <span class=\"n\">σ'</span> <span class=\"bp\">→</span> <span class=\"n\">Convertible</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">τ'</span> <span class=\"n\">σ'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConvK</span>   <span class=\"o\">:</span> <span class=\"n\">Convertible</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">K</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">τ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConvS</span>   <span class=\"o\">:</span> <span class=\"n\">Convertible</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">S</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">τ</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">σ</span> <span class=\"n\">ρ</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConvZero</span><span class=\"o\">:</span> <span class=\"n\">Convertible</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">Rec</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">Zero</span><span class=\"o\">)</span> <span class=\"n\">τ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConvSucc</span><span class=\"o\">:</span> <span class=\"n\">Convertible</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">Rec</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">Succ</span> <span class=\"n\">ρ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">σ</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">Rec</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">ρ</span><span class=\"o\">))</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Convertible</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">interpType</span> <span class=\"o\">:</span> <span class=\"n\">GType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">GNat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Arrow</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">interpType</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">interpType</span> <span class=\"n\">σ</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">interpTerm</span> <span class=\"o\">:</span> <span class=\"n\">GTerm</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">interpType</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">interpTerm</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"n\">interpTerm</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Succ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.succ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Rec</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.rec</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">K</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Somehow lean is unhappy about the positivity of the <code>interpTerm</code>. I don't care about soundness for now. What is the easiest way to make it work?</p>",
        "id": 410351503,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1703803499
    },
    {
        "content": "<p>You need to provide an Inhabited instance for interpType a for this to work out properly. <br>\nFor example like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">interpType.mkDefault</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">GType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">interpType</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">A</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">GNat</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Arrow</span> <span class=\"n\">_</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkDefault</span> <span class=\"n\">σ</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">interpType</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">interpType.mkDefault</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>At which point you will notice that recursors are not computable. For some reason that I dont know you cannot mark partial functions as noncomputable so you will probably have to rewrite the recursor as a pattern match.</p>",
        "id": 410354269,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1703804750
    },
    {
        "content": "<p>the <em>easiest</em> way to make it work is to simply remove <code>partial</code>, this function is structurally recursive</p>",
        "id": 410354707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703804942
    },
    {
        "content": "<p>You will have to add <code>noncomputable</code> because the compiler doesn't have support for <code>Nat.rec</code> (or <code>import Mathlib.Util.CompileInductive</code>)</p>",
        "id": 410355042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703805108
    },
    {
        "content": "<blockquote>\n<p>For some reason that I dont know you cannot mark partial functions as noncomputable</p>\n</blockquote>\n<p>My guess is that the reason for this is that the only difference between a partial function and an opaque constant is that you can execute a partial function, so if a partial function can't be compiled then what's the point? You may as well just remove the body and use <code>noncomputable opaque</code> instead</p>",
        "id": 410355373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703805258
    },
    {
        "content": "<p>Ah, I see. Previously I used <code>Nat.rec</code>, then the function is not structurally recursive. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">recNat</span> <span class=\"o\">:</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">recNat</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">interpType</span> <span class=\"o\">:</span> <span class=\"n\">GType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">GNat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Arrow</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">interpType</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">interpType</span> <span class=\"n\">σ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">interpTerm</span> <span class=\"o\">:</span> <span class=\"n\">GTerm</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">interpType</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">interpTerm</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"n\">interpTerm</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Succ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.succ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Rec</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">recNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">K</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Using <code>recNat</code> and removing <code>partial</code> will just work.</p>",
        "id": 410356355,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1703805715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639630\">Schrodinger ZHU Yifan</span> has marked this topic as resolved.</p>",
        "id": 410356480,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703805764
    },
    {
        "content": "<p>No, this is structurally recursive either way, it doesn't matter if you use <code>recNat</code> or <code>Nat.rec</code></p>",
        "id": 410356539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703805794
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/tBzS5HYVWvVjngi9WTG6Mdiu/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tBzS5HYVWvVjngi9WTG6Mdiu/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/tBzS5HYVWvVjngi9WTG6Mdiu/image.png\"></a></div>",
        "id": 410356613,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1703805838
    },
    {
        "content": "<p>however if you use <code>Nat.rec</code> then the compiler will have trouble with it</p>",
        "id": 410356618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703805841
    },
    {
        "content": "<p>did you try adding <code>noncomputable</code>?</p>",
        "id": 410356711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703805872
    },
    {
        "content": "<p>the \"failed to show termination\" part of the error message is a lie</p>",
        "id": 410356754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703805898
    },
    {
        "content": "<p><code>noncomputable</code> works or I just use my own function defs. I prefer the latter since I will use a similar semantic (gluing) encoding to do NbE.</p>",
        "id": 410356937,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1703805971
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span></p>",
        "id": 410356940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703805973
    },
    {
        "content": "<p>If you use <code>import Mathlib.Util.CompileInductive</code> you can just use <code>Nat.rec</code> as is</p>",
        "id": 410357017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703806017
    },
    {
        "content": "<p>but if you aren't running it in <code>#eval</code> then <code>noncomputable</code> works just as well</p>",
        "id": 410357072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703806039
    },
    {
        "content": "<p>honestly this is just a bit of laziness on the part of the code generator to not support this function</p>",
        "id": 410357174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703806083
    },
    {
        "content": "<p>Works fine up to now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">convertible_gives_meta_equality</span> <span class=\"o\">:</span> <span class=\"n\">Convertible</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">interpTerm</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">interpTerm</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConvApp</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">convertible_gives_meta_equality</span> <span class=\"n\">c1</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">convertible_gives_meta_equality</span> <span class=\"n\">c2</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">interpTerm</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConvK</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConvS</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConvZero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConvSucc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">glueType</span> <span class=\"o\">:</span> <span class=\"n\">GType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">GNat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Arrow</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">GTerm</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">glueType</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">glueType</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reifyNat</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">GTerm</span> <span class=\"n\">GNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">App</span> <span class=\"n\">Succ</span> <span class=\"o\">(</span><span class=\"n\">reifyNat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reify</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">τ</span><span class=\"o\">},</span> <span class=\"n\">glueType</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">GTerm</span> <span class=\"n\">τ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">GNat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reifyNat</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Arrow</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">appsem</span> <span class=\"o\">:</span> <span class=\"n\">glueType</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">glueType</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">glueType</span> <span class=\"n\">σ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">glueTerm</span> <span class=\"o\">:</span> <span class=\"n\">GTerm</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">glueType</span> <span class=\"n\">τ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">K</span>       <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">App</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">reify</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span><span class=\"o\">⟩)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">S</span>       <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">App</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">reify</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span> <span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">reify</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">reify</span> <span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">appsem</span> <span class=\"o\">(</span><span class=\"n\">appsem</span> <span class=\"n\">p</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">appsem</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">)⟩⟩)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">appsem</span> <span class=\"o\">(</span><span class=\"n\">glueTerm</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">glueTerm</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Zero</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Succ</span>    <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Succ</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Rec</span>     <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Rec</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">App</span> <span class=\"n\">Rec</span> <span class=\"o\">(</span><span class=\"n\">reify</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">Rec</span> <span class=\"o\">(</span><span class=\"n\">reify</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">reify</span> <span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"n\">recNat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">appsem</span> <span class=\"o\">(</span><span class=\"n\">appsem</span> <span class=\"n\">q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)⟩⟩)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">normalize</span> <span class=\"o\">:</span> <span class=\"n\">GTerm</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">GTerm</span> <span class=\"n\">τ</span> <span class=\"o\">:=</span> <span class=\"n\">reify</span> <span class=\"bp\">∘</span> <span class=\"n\">glueTerm</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">GTerm</span> <span class=\"n\">GNat</span> <span class=\"o\">:=</span> <span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">Succ</span> <span class=\"n\">Zero</span><span class=\"o\">))</span> <span class=\"n\">Zero</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test</span>\n<span class=\"k\">#eval</span> <span class=\"n\">normalize</span> <span class=\"n\">test</span>\n</code></pre></div>\n<p>Thanks a lot for helping me out!</p>",
        "id": 410360509,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1703807885
    }
]