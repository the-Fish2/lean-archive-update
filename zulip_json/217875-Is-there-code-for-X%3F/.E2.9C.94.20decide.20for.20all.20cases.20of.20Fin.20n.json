[
    {
        "content": "<p>i'd like to have lean check each possible case (with decide or something like that), and<br>\nprove <code>f i = g i</code> with <code>i : Fin n</code> in the context... is there some (idiomatic) way to do this?</p>\n<p>my previous approach was to either prove (for that specific <code>n</code>) that <code>i = 0 ∨ i = 1 ∨ i = ... ∨ i = n-1</code>, or to repeatedly use <code>rcases i; decide; rename_i i</code> on the natural number contained in <code>Fin n</code>, ending with <code>contradiction</code>. this obviously gets quite tedious for large <code>n</code>.</p>\n<p>a small example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">hi</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">i</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_eq</span><span class=\"o\">,</span> <span class=\"n\">Fin.zero_eta</span><span class=\"o\">,</span> <span class=\"n\">Matrix.cons_val_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">i</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">i</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_eq</span><span class=\"o\">,</span> <span class=\"n\">Nat.reduceSucc</span><span class=\"o\">,</span> <span class=\"n\">Fin.mk_one</span><span class=\"o\">,</span> <span class=\"n\">Matrix.cons_val_one</span><span class=\"o\">,</span> <span class=\"n\">Matrix.head_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">i</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">i</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Matrix.cons_val_succ'</span><span class=\"o\">,</span> <span class=\"n\">Matrix.cons_val_fin_one</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>the y to my <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> :<br>\ni'd like to prove something similar to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"n\">Fin</span> <span class=\"mi\">6</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">bar</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">bar</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">bar</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">bar</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">bar</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Function.funext_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">zero_apply</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"n\">a</span><span class=\"o\">)]</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- for all cases of a, use simp/decide/something similar</span>\n</code></pre></div>",
        "id": 431392713,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712260954
    },
    {
        "content": "<p>specifically in my case <code>n = 12</code>, so a scalable solution is very much preferred</p>",
        "id": 431392857,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712261023
    },
    {
        "content": "<p>Do you know about the <code>fin_cases</code> tactic?</p>",
        "id": 431393000,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712261087
    },
    {
        "content": "<p>i did not</p>",
        "id": 431393027,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712261099
    },
    {
        "content": "<p>that did the trick, thanks!</p>",
        "id": 431401264,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712264423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> has marked this topic as resolved.</p>",
        "id": 431401275,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712264427
    },
    {
        "content": "<p>Here's the one-line proof of your first <code>example</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Reflection</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">FinVec.etaExpand_eq</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 431414831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712270767
    }
]