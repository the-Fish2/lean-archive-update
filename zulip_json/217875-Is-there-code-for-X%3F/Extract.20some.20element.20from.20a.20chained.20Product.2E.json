[
    {
        "content": "<p>This is probably a question that has already been answered somewhere, but I could not find it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sample</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- I want `2` from `(0, 1, 2, 3)`!</span>\n\n<span class=\"c1\">-- this does not work</span>\n<span class=\"bp\">#</span><span class=\"n\">check_failure</span> <span class=\"n\">sample.3</span>\n\n<span class=\"c1\">-- this does not work</span>\n<span class=\"bp\">#</span><span class=\"n\">check_failure</span> <span class=\"n\">sample</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 434586887,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713704199
    },
    {
        "content": "<p>tuples are right-associative nested, there is no such thing as an n-ary tuple in lean</p>",
        "id": 434589191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713706290
    },
    {
        "content": "<p>so to get at the 2 in <code>(0, 1, 2, 3)</code> (which is really <code>(0, (1, (2, 3)))</code>) you should use <code>sample.2.2.1</code></p>",
        "id": 434589217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713706322
    },
    {
        "content": "<p>I think this API is inconvenient. Why not make it easier to access the nth in a chain of Prods?</p>",
        "id": 434591619,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713708707
    },
    {
        "content": "<p>Because we usually use <code>Fin 4 -&gt; Nat</code> instead. There is the nice notation <code>![0, 1, 2, 3]</code> for this.</p>",
        "id": 434592001,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1713709078
    },
    {
        "content": "<p>oh thanks</p>",
        "id": 434592052,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713709093
    },
    {
        "content": "<p>where  is  <code>![]</code>defined?</p>",
        "id": 434592346,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713709361
    },
    {
        "content": "<p><code>Mathlib.Data.Matrix.Notation</code> I think</p>",
        "id": 434593296,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1713710168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"626349\">@Asei Inoue</span> I think the <code>![]</code> notation for Tuples is specifically defined in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fin/VecNotation.html\">Mathlib.Data.Fin.VecNotation</a></p>",
        "id": 434633093,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1713748206
    },
    {
        "content": "<p>there's also a lot of helper functions for Tuples in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fin/Tuple/Basic.html\">Mathlib.Data.Fin.Tuple.Basic</a> and siblings, if you ever need to do something complex</p>",
        "id": 434633319,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1713748456
    }
]