[
    {
        "content": "<p>I am trying to prove this lemma. The proof in my head is that the coefficients of the polynomial we get from the bind match up 1-to-1 with the coefficients of <code>p</code> where each coefficient with a <code>X sample_removed</code> in it turns into <code>X sample_target ^ d</code>, and none of these overlap because of the degree bound.</p>\n<p>Is there some type to represent these collections of polynomials that I can draw an equivalence between?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">MvPolynomial.bind₁_ite_pow_eq_zero_of</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">sample_removed</span> <span class=\"n\">sample_target</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hsa</span> <span class=\"o\">:</span> <span class=\"n\">sample_target</span> <span class=\"bp\">≠</span> <span class=\"n\">sample_removed</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial.bind₁</span>\n          <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">sample_removed</span> <span class=\"k\">then</span> <span class=\"n\">MvPolynomial.X</span> <span class=\"n\">sample_target</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"k\">else</span> <span class=\"n\">MvPolynomial.X</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n          <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hdegree</span> <span class=\"o\">:</span> <span class=\"n\">p.degreeOf</span> <span class=\"n\">sample_target</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 421169013,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707794242
    },
    {
        "content": "<p>I have been trying to prove it via <code>unfold</code>-bash, but the proof is getting very long, and I don't understand it anymore. I thought I would have to apply induction at some point to prove that none of the coefficients overlap, but I that seems like a messy approach.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">MvPolynomial.bind₁_ite_pow_eq_zero_of</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">sample_removed</span> <span class=\"n\">sample_target</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hsa</span> <span class=\"o\">:</span> <span class=\"n\">sample_target</span> <span class=\"bp\">≠</span> <span class=\"n\">sample_removed</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial.bind₁</span>\n          <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">sample_removed</span> <span class=\"k\">then</span> <span class=\"n\">MvPolynomial.X</span> <span class=\"n\">sample_target</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"k\">else</span> <span class=\"n\">MvPolynomial.X</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n          <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hdegree</span> <span class=\"o\">:</span> <span class=\"n\">p.degreeOf</span> <span class=\"n\">sample_target</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">m</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coeff_zero</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span>\n      <span class=\"n\">coeff</span> <span class=\"n\">m</span> <span class=\"n\">p</span>\n        <span class=\"bp\">=</span>\n      <span class=\"n\">coeff</span>\n        <span class=\"o\">(</span><span class=\"n\">m.erase</span> <span class=\"n\">sample_removed</span> <span class=\"bp\">+</span> <span class=\"n\">Finsupp.single</span> <span class=\"n\">sample_target</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"n\">sample_removed</span><span class=\"o\">))</span>\n        <span class=\"o\">((</span><span class=\"n\">bind₁</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">sample_removed</span> <span class=\"k\">then</span> <span class=\"n\">X</span> <span class=\"n\">sample_target</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"k\">else</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">MvPolynomial.bind₁</span>\n    <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">MvPolynomial.support_sum_monomial_coeff</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">aeval_sum</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">aeval_monomial</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">,</span> <span class=\"n\">ite_pow</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">algebraMap_eq</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_sum</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">,</span> <span class=\"n\">coeff_C_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Finsupp.prod</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.prod_ite</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Finset.filter_eq'</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">apply_ite</span> <span class=\"n\">Finset.prod</span><span class=\"o\">]</span> <span class=\"c1\">-- doesn't work without the argument</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">ite_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">,</span> <span class=\"n\">Finset.prod_empty</span><span class=\"o\">,</span> <span class=\"n\">Finset.prod_singleton</span><span class=\"o\">,</span>\n      <span class=\"n\">ite_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">MvPolynomial.foobar</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- simp_rw [apply_ite]</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">MvPolynomial.monomial_pow</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">MvPolynomial.coeff_monomial_mul'</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_ite</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hsa</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">MvPolynomial.X_pow_eq_monomial</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">MvPolynomial.foobaz</span> <span class=\"n\">sample_removed</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_ite</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MvPolynomial.degreeOf_lt_iff</span> <span class=\"n\">hd</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hdegree</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.filter_filter</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 421169254,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707794484
    },
    {
        "content": "<p>I guess for a concrete \"is there code\" question: Do we have a submodule of degree-bound mvpolynomials like we have degreeLT for polynomials? What should that look like?</p>",
        "id": 421169605,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707794769
    }
]