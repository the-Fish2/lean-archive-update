[
    {
        "content": "<p>Is there any code related to symmetric functions or symmetric polynomials in mathlib?</p>",
        "id": 211324736,
        "sender_full_name": "Jesse Selover",
        "timestamp": 1601072488
    },
    {
        "content": "<p>There's a draft PR of <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, <a href=\"https://github.com/leanprover-community/mathlib/issues/3169\">#3169</a></p>",
        "id": 211325130,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601072791
    },
    {
        "content": "<p>Thanks! I'll take a look</p>",
        "id": 211325381,
        "sender_full_name": "Jesse Selover",
        "timestamp": 1601073019
    },
    {
        "content": "<p>Is anyone still working on this? I'm aware of <a href=\"https://github.com/leanprover-community/mathlib4/pull/3169\">#3169</a> but it seems like there has been no progress in a while. I would be interested in joining / restarting this project!</p>",
        "id": 418300005,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1706283566
    },
    {
        "content": "<p>That's a mathlib3 PR. We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.IsSymmetric#doc\">docs#MvPolynomial.IsSymmetric</a> in mathlib4.</p>",
        "id": 418304202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706284780
    },
    {
        "content": "<p>Cool, thanks! It seems to me that there is still nothing for symmetric functions though? My long term goal would be to have Macdonald polynomials and plethysm, but symmetric functions would be a good starting point.</p>",
        "id": 418307049,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1706285632
    },
    {
        "content": "<p>Maybe <a href=\"https://github.com/leanprover-community/mathlib4/pull/6593\">#6593</a> is of interest to you?</p>",
        "id": 418312454,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706287404
    },
    {
        "content": "<p>Actually <span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> proved quite a few things related to symmetric polynomials</p>",
        "id": 418341446,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706298397
    },
    {
        "content": "<p>Interesting! So, symmetric functions are the colimit in n, in the category of graded rings (this is important), of symmetric polynomials in n variables. This implies that pretty much all the results about symmetric polynomials can be deduced from more general statements about symmetric functions.</p>\n<p>I think it should be feasible to have a working implementation of symmetric functions relatively quickly, considering that some stuff about symmetric polynomials is already in the library. There is a fairly large community in algebraic combinatorics that I'm sure would be very into it. I'm a beginner though, so I don't know where I should start from.</p>\n<p>From that one could build up and define plethysm (which I am very much interested into), Macdonald polynomials, and ideally the most important stuff appearing in <a href=\"https://www.symmetricfunctions.com/index.htm\">https://www.symmetricfunctions.com/index.htm</a>. Having lambda-rings and Hopf algebras might also be useful.</p>",
        "id": 418410367,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1706354819
    },
    {
        "content": "<p>Hi again. I tried starting scribbling something. It seems to me that the easiest way to define the algebra is to define it as the free commutative graded polynomial algebra on countably many indeterminates e_1, e_2, .... I think I can do it, but I do not understand how to define the grading so that e_n has degree n. I tried looking at the examples but couldn't find anything.</p>\n<p>Can anyone help? Is this the correct place where to ask? Thanks!</p>",
        "id": 419464633,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1706882981
    },
    {
        "content": "<p>I think it is already there, in some form. We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddMonoidAlgebra.grade.gradedAlgebra#doc\">docs#AddMonoidAlgebra.grade.gradedAlgebra</a> that looks very promising</p>",
        "id": 419466567,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706883605
    },
    {
        "content": "<p>Mmm, no, maybe it's not what you want exaclty. Do you want to define the ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[x_0, x_1, \\ldots]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mclose\">]</span></span></span></span> and putting a graded ring structure on it?</p>",
        "id": 419471029,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706885005
    },
    {
        "content": "<p>Sort of? I want to define the ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><msub><mi>e</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>e</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mtext> </mtext><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[e_1, e_2, \\dots]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mclose\">]</span></span></span></span>, graded in a way so that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>deg</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msub><mi>e</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\deg(e_n) = n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">de<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, and then show that this is (isomorphic to?) the ring of symmetric functions I want (I don't know how exactly, maybe as limit or colimit of the appropriate graded rings... but that's a problem for later).</p>",
        "id": 419481423,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1706888083
    },
    {
        "content": "<p>In the message above, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">e_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the elementary symmetric function of degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>. It is already implemented in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/MvPolynomial/Symmetric.html#Multiset.esymm\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/MvPolynomial/Symmetric.html#Multiset.esymm</a> for a finite number of variables, but I think it's easier to realise the symmetric function algebra (in infinitely many variables) as free algebra on the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">e_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> elements rather than as a formal power series ring.</p>",
        "id": 419482182,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1706888289
    },
    {
        "content": "<p>The (commutative) free algebra is just <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial#doc\">docs#MvPolynomial</a>, and we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.IsWeightedHomogeneous.WeightedHomogeneousSubmodule.gcomm_monoid#doc\">docs#MvPolynomial.IsWeightedHomogeneous.WeightedHomogeneousSubmodule.gcomm_monoid</a> so you can use stuff in that file to put a graded algebra structure on <code>MvPolynomial ℕ R</code> such that the nth variable has degree n. I'm also convinced that this is isomorphic to the ring of symmetric functions, and I'm curious why it's not explicitly mentioned on Wikipedia or the two <a href=\"https://math.stackexchange.com/questions/3107701/lambda-varprojlim-lambda-n-ring-of-symmetric-functions\">SE</a> <a href=\"https://math.stackexchange.com/questions/3103940/symmetric-functions-vs-symmetric-polynomials\">questions</a>. Maybe it's more important to show it's the limit / colimit, or that it admits an explicit realization as a graded subalgebra of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPowerSeries#doc\">docs#MvPowerSeries</a>.</p>\n<p>I think as a first step we should define the graded AlgHoms between rings of symmetric polynomials in both directions, which may depend on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6593\">#6593</a>. It seems mathlib doesn't currently have a bundled graded AlgHom type, and we should probably define it, otherwise it's hard to talk about (co)limits in the category of graded algebras. Also, given so many definitions, we should probably think about applications and decide which one to emphasize.</p>",
        "id": 419585336,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1706945761
    },
    {
        "content": "<p>It's not mentioned in Wikipedia because Wikipedia is not optimal at the level you're interested in.</p>\n<p>It's present (slightly implicitly) in Lang's <em>Algebra</em> (pages 195ff), in Macdonald's <em>Symmetric functions and Hall polynomials</em> (page 22, at the infinite level where the situation is even clearer), and in many other good sources.</p>",
        "id": 419597468,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706956859
    },
    {
        "content": "<p>Mathlib knows about the graded ring structure on a ring of polynomials with respect to any weight function on the indeterminates (<span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> and I did PR that for our work on divided powers), see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.weightedHomogeneousComponent#doc\">docs#MvPolynomial.weightedHomogeneousComponent</a> for example.</p>",
        "id": 419597933,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706957215
    },
    {
        "content": "<p>Just another example of the power of doing things \"the right way\" the first time -- other people can reuse your ideas.</p>",
        "id": 419598224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706957496
    },
    {
        "content": "<p>Thanks for the insight, that's useful! I agree we should think about applications first, but there are just so many, it's a bit overwhelming. In my field, the most relevant one is probably plethysm; for that we might want to have Lambda Rings first, but there are other equivalent definitions.</p>\n<p>My gut feeling is that \"free graded algebra on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">e_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>\" is the way to go, as it is very flexible, but then there is a bit of work to do to define all the relevant base changes, which will probably come from the colimit structure. What we definitely do NOT want is  \"formal power series in countably many variables that are symmetric\", which is very hard to work with.</p>",
        "id": 420226041,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1707303428
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6593\">#6593</a> seems very relevant, I agree that we need it.</p>",
        "id": 420226552,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1707303602
    },
    {
        "content": "<p>I agree that defining lambda rings and provide some examples would be a good first project to test the API on symmetric functions to be built. Symmetric functions and big Witt vectors are probably the two most prominent examples. I came across this <a href=\"https://mathoverflow.net/a/219800/3332\">MO answer</a> that explains the connection between big Witt vectors and the Hopf algebra of symmetric functions. Note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WittVector#doc\">docs#WittVector</a> is the p-typical Witt vectors, not the big ones (I think they're the projection of the big Witt vectors to the p^n-th components; <a href=\"https://arxiv.org/abs/2010.02595\">Commelin--Lewis</a> lists big Witt vectors as a future project).</p>\n<p>I looked into the definition of lambda rings and though some axioms are identical to those of divided power structures, the others depend on certain polynomials to be defined, for example the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>P</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">P_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> in the picture below (from <a href=\"https://concretenonsense.wordpress.com/2009/07/23/lambda-rings/\">this blog post</a>). It seems this identity as a whole only makes sense in the power series ring with infinitely many variables, though if you want to compute the coefficient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">T^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> it suffices to truncate the product to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi><mo separator=\"true\">,</mo><mn>1</mn><mo>≤</mo><mi>j</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1 \\le i \\le n, 1 \\le j \\le n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7955em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>. So it seems to me the power series representation of symmetric functions seems to be the most natural in this situation, and useful for proving things.</p>\n<p><a href=\"/user_uploads/3121/nj5Wad_tS9zmHXW_SZ6YKTr2/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/nj5Wad_tS9zmHXW_SZ6YKTr2/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/nj5Wad_tS9zmHXW_SZ6YKTr2/image.png\"></a></div>",
        "id": 420336892,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707337722
    },
    {
        "content": "<p>I will also quote</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Mathlib/RingTheory/Polynomial/Dickson.lean :: L116-126</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n\n<span class=\"cm\">### A Lambda structure on `ℤ[X]`</span>\n\n<span class=\"cm\">Mathlib doesn't currently know what a Lambda ring is.</span>\n<span class=\"cm\">But once it does, we can endow `ℤ[X]` with a Lambda structure</span>\n<span class=\"cm\">in terms of the `dickson 1 1` polynomials defined below.</span>\n<span class=\"cm\">There is exactly one other Lambda structure on `ℤ[X]` in terms of binomial polynomials.</span>\n\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 420337330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707337871
    },
    {
        "content": "<p>And I'll mention that <a href=\"https://github.com/leanprover-community/mathlib4/pull/10079\">#10079</a> (which I'm currently working on) will bring us Hopf algebras.</p>",
        "id": 420338547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707338308
    },
    {
        "content": "<p>It could be useful to have the power series representation for Sym (the algebra of symmetric functions - it's about time to give it a name), but I still think it's very inconvenient to use it as a definition. In my experience, when working with symmetric functions, what you really need to know is how to change basis, which will follow from the finite case; the symmetric variables are almost always left implicit.</p>\n<p>For most use cases it's going to be enough to look at the \"finitely many variables\" case, which we still need to do if we want all the limit/colimit structure (and we definitely do). It's probably worth it to show that Sym is isomorphic to the symmetric power series of bounded degree in the X variables, but I'm reasonably confident that it's better to have it as a theorem rather than using it as an actual definition.</p>\n<p>Moreover, already in your picture we see instances of identities among symmetric functions that involve different sets of variables. If we leave the variables implicit, everything can be easily expressed as a tensor product, and specialized later if needed.</p>\n<p>Finally, the expression <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∏</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><msub><mi>X</mi><mi>i</mi></msub><msub><mi>Y</mi><mi>j</mi></msub><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\prod (1 + X_i Y_j T)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span> is pretty much ubiquitous (it's the antipode of the Cauchy kernel), and you can easily express it without the variables. This might not be precise, but up to some small tweak, I believe that if you replace the elementary symmetric functions on the LHS with the complete homogeneous symmetric functions (say, using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo>⊗</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">h_i \\otimes 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> instead of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">E_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>⊗</mo><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">1 \\otimes h_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">F_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>), you get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>λ</mi><mo>⊢</mo><mi>n</mi></mrow></msub><msup><mi>T</mi><mi>n</mi></msup><msub><mi>s</mi><mi>λ</mi></msub><mo>⊗</mo><msub><mi>s</mi><mi>λ</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum_{\\lambda \\vdash n} T^n s_\\lambda \\otimes s_\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1864em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">λ</span><span class=\"mrel mtight\">⊢</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">λ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">λ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, where the sum is over all partitions and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>s</mi><mi>λ</mi></msub></mrow><annotation encoding=\"application/x-tex\">s_\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">λ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> denotes the Schur function.</p>\n<p>Overall, I'm strongly against using the power series representation in the definition of Sym, but I'm open to other opinions if some strong argument for it appears.</p>",
        "id": 420341228,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1707339426
    },
    {
        "content": "<p>I'm really happy that this thread is getting active, there have been a lot of cool ideas and I can see this be a thing in some time! :)</p>",
        "id": 420341467,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1707339527
    },
    {
        "content": "<p>Maybe you can choose a mathematically very easy lemma, and try to prove it using the formulation you prefer, just to check if it is a reasonable choice. Sometimes what is convenient (or inconvenient) in real world math and Lean are different things.</p>",
        "id": 420342714,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707339999
    },
    {
        "content": "<p>The problem is, I have to implement a whole bunch of structure before I can actually prove anything. At the very least, the limit/colimit structure, as a standard way to prove things is by \"lifting\" statements that hold in finitely many variables.</p>\n<p>Anyway, I'm suggesting the \"free polynomial algebra over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">e_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>\" implementation exactly because normally computers are good with symbolic manipulation.</p>",
        "id": 420345416,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1707341152
    },
    {
        "content": "<p>I mean something completely ridiculously trivial for a mathematician. Like what happens with zero variables.</p>",
        "id": 420346305,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707341522
    },
    {
        "content": "<p>Or one variable. Using multivariate polynomials in one variable (that is not the same as polynomials in one variable) is a not so pleasant experience</p>",
        "id": 420346537,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707341602
    },
    {
        "content": "<p>What I mean is that we can keep on discussing forever. If you want to start a project sooner or later you have to make a decision</p>",
        "id": 420347003,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707341767
    },
    {
        "content": "<p>Even if it turns out it's not the best choice we've learned something anyway (for example in the LTE we proved the snake lemma in like 3 different formulations, all mathematically completely identical, and the version that ended in mathlib is completely different)</p>",
        "id": 420347203,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707341857
    },
    {
        "content": "<p>Schemes and group cohomology were also like that -- I think the mathlib version is v3 in both cases. But as we go on with this project of formalising mathematics, the community is getting better at getting the answer right earlier. That's why it's worth coming up with a sample problem or two, so the community can start experimenting with actual code.</p>",
        "id": 420348602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707342458
    },
    {
        "content": "<p>A smaller first project would be defining the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>ρ</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\rho_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (maybe call it <code>ofSucc</code>) and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>ϕ</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\phi_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (<code>toSucc</code>) in the Wikipedia page (see screenshot below), and also the maps from the symmetric functions to the symmetric polynomials and vice versa, and show the triangles are commutative; once we define graded homs, we can go on to show these form limit and colimit diagrams. A question is whether to take the MvPolynomial rings (in finitely many variables) or the subring of symmetric polynomials as the domain and codomain of these maps; we know they're isomorphic by <a href=\"https://github.com/leanprover-community/mathlib4/pull/6593\">#6593</a>. Maybe use the former to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>ϕ</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\phi_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and the latter to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>ρ</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\rho_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> so the definitions don't depend on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6593\">#6593</a>? But we need to use the same thing in order to state <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>ρ</mi><mi>n</mi></msub><mo>∘</mo><msub><mi>ϕ</mi><mi>n</mi></msub><mo>=</mo><mtext>id</mtext></mrow><annotation encoding=\"application/x-tex\">\\rho_n \\circ \\phi_n = \\text{id}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6389em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">id</span></span></span></span></span>, which is probably necessary to show the inverse diagram is a limit. (It should be pretty trivial to show the directed diagram is a colimit in this formulation, assuming that we define the symmetric functions as Alessandro suggests.)</p>\n<p><a href=\"/user_uploads/3121/UTsTmZU5aVZXBih1StvMSyHn/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/UTsTmZU5aVZXBih1StvMSyHn/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/UTsTmZU5aVZXBih1StvMSyHn/image.png\"></a></div>",
        "id": 420351513,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707343685
    },
    {
        "content": "<p>I was thinking the same! It's definitely needed and probably a useful exercise. Let's start with that.</p>",
        "id": 420354172,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1707344917
    },
    {
        "content": "<p>I think it's not substantially harder to define maps between any two algebras of symmetric polynomials (not just consecutive ones), so you actually get a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DirectedSystem#doc\">docs#DirectedSystem</a> (there's no InverseSystem in mathlib as of yet though, but you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.IsLimit#doc\">docs#CategoryTheory.Limits.IsLimit</a>). The <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PerfectClosure#doc\">docs#PerfectClosure</a> API is built using only the consecutive maps, but we need not mimic that ...</p>",
        "id": 420355315,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707345521
    },
    {
        "content": "<p>I believe the first thing to prove is that symmetric polynomials in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> variables are freely generated by the elementary symmetric polynomials (with coefficients in any commutative ring), and weights correspond with degrees.</p>",
        "id": 420357940,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707346945
    },
    {
        "content": "<p>Have we _really_ still not got this? I have set about three student projects on this topic and it's also on the undergraduate problem list...(but we might well not have it...)</p>",
        "id": 420358183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707347090
    },
    {
        "content": "<p>Is that the fundamental theorem that's been sitting in a PR for months?</p>",
        "id": 420358220,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707347111
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6593\">#6593</a></p>",
        "id": 420358230,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707347116
    },
    {
        "content": "<p>Does it make sense to ask for the proof that this isomorphism respect degrees (with appropriate weights)?</p>",
        "id": 420358847,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707347490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Symmetric.20Functions/near/420358220\">said</a>:</p>\n<blockquote>\n<p>Is that the fundamental theorem that's been sitting in a PR for months?</p>\n</blockquote>\n<p>Yeah sorry I've been unmotivated to do the chore that we decided should be done in the prerequisite PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7173\">#7173</a> for months, but there's definitely some fresh motivation from this thread :)</p>",
        "id": 420369235,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707353853
    },
    {
        "content": "<blockquote>\n<p>Does it make sense to ask for the proof that this isomorphism respect degrees (with appropriate weights)?</p>\n</blockquote>\n<p>Browsing through the graded API, I could phrase this result at two levels:</p>\n<ol>\n<li>If a <code>MvPolynomial (Fin n) R</code> IsWeightedHomogeneous of degree k, then its evaluation at the elementary symmetric polynomials (i.e. its image under the isomorphism) IsHomogeneous of degree k.</li>\n<li>The isomorphism sends <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.weightedHomogeneousSubmodule#doc\">docs#MvPolynomial.weightedHomogeneousSubmodule</a> of degree k into <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.homogeneousSubmodule#doc\">docs#MvPolynomial.homogeneousSubmodule</a> of degree k. (This can be taken to the definition of graded homs, but in this case we need to take <code>comap Subalgebra.val</code> of the homogeneousSubmodule to get submodules of the symmetricSubalgebra.</li>\n</ol>\n<p>which should not be hard to prove. It appears that we don't have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GradedRing#doc\">docs#GradedRing</a> structures on MvPolynomial yet (either weighted or unweighted), and there are two unmerged mathlib3 PRs <a href=\"https://github.com/leanprover-community/mathlib/pull/8913\">mathlib#8913</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/10119\">mathlib#10119</a> doing the unweighted. I think we do need the missing piece DirectSum.Decomposition (i.e. the map from the direct sum of graded pieces to the whole algebra is bijective, with an explicit inverse <code>decompose</code>) to show that if a graded hom is an Equiv, then its inverse is also a graded hom.</p>",
        "id": 420369279,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707353871
    },
    {
        "content": "<p>We do have a GradedMonoid instance: <a href=\"https://github.com/leanprover-community/mathlib4/blob/8d817bbea3313e497d6f65f9757dc1b40bc9fc53/Mathlib/RingTheory/MvPolynomial/Homogeneous.lean#L381-L383\">https://github.com/leanprover-community/mathlib4/blob/8d817bbea3313e497d6f65f9757dc1b40bc9fc53/Mathlib/RingTheory/MvPolynomial/Homogeneous.lean#L381-L383</a></p>",
        "id": 420389589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707369539
    },
    {
        "content": "<p>And the two examples below it hint at some graded ring structure being inferred</p>",
        "id": 420389630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707369579
    },
    {
        "content": "<p>It seems there is some backlog on pull requests that might really help with all this stuff. Is there anything useful I can do in the meantime? Say, define complete homogeneous, monomial, and power sum symmetric functions in the finite case?</p>\n<p>Do we have integer partitions/compositions in Lean? How about Young tableaux?</p>",
        "id": 420424308,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1707386939
    },
    {
        "content": "<p>Yes, Young tableaux are there</p>",
        "id": 420432093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707389749
    },
    {
        "content": "<p>See the directory <code>Mathlib/Combinatorics/Young</code></p>",
        "id": 420432194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707389780
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.psum#doc\">docs#MvPolynomial.psum</a> is the power sum symmetric polynomials, and we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/MvPolynomial/NewtonIdentities.html#MvPolynomial.mul_esymm_eq_sum\">Newton‘s identities</a> (<a href=\"#narrow/stream/116395-maths/topic/Newton's.20identities\">Zulip</a>). I don't think we have complete homogeneous and monomial symmetric polynomials in mathlib.</p>\n<blockquote>\n<p>And the two examples below it hint at some graded ring structure being inferred</p>\n</blockquote>\n<p>The two examples show there is a ring structure on the direct sum, but it's not yet known to mathlib that MvPolynomial is isomorphic to the direct sum, for which you need to show the graded pieces are \"linearly independent\" and span the whole space, or better, give an explicit inverse to the map from the direct sum to the whole space. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GradedRing#doc\">docs#GradedRing</a> is the composite of two typeclasses GradedMonoid and DirectSum.Decomposition, and the latter exactly consists of the data of such an inverse. GradedRing instances were constructed in the two PRs I mentioned.</p>\n<blockquote>\n<p>It seems there is some backlog on pull requests that might really help with all this stuff. </p>\n</blockquote>\n<p>Before I get back to the PRs, you could create a branch out of my <a href=\"https://github.com/leanprover-community/mathlib4/tree/FundThm_SymPoly\">branch#FundThm_SymPoly</a>, add some new files, and start working on what you want; the fact the PR isn't in mathlib yet shouldn't block you from building on top of it. You could also make your repo/project depend on a specific branch/commit of mathlib, but I don't see the necessity of a separate repo at this stage.</p>",
        "id": 420585045,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707453014
    },
    {
        "content": "<p>I implemented the complete homogeneous symmetric functions, proved that they are symmetric, and a few lemmas about them. Should I submit a pull request (and wait for it to be rejected, since the code is horrible)?</p>",
        "id": 423269570,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1708873378
    },
    {
        "content": "<p>Maybe it's better to post it here first and get feedback? You could try...</p>",
        "id": 423269950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708873793
    },
    {
        "content": "<p>I think you can go with the PR. Maybe mark it \"RFC\" (request for comment), to make clear you want an initial feedback.</p>",
        "id": 423271529,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708875330
    },
    {
        "content": "<p>Done, it's <a href=\"https://github.com/leanprover-community/mathlib4/pull/10983\">#10983</a>. Looking forward to hear feedback!</p>",
        "id": 423366541,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1708943391
    },
    {
        "content": "<p>I've left a couple of comments but I didn't look at the proofs, I will do it tomorrow.</p>",
        "id": 423480191,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708980212
    },
    {
        "content": "<p>Second attempt! <a href=\"https://github.com/leanprover-community/mathlib4/pull/11026\">#11026</a></p>\n<p>Can I close the old PR and delete the fork? I think having a fork is messing up with my Git somehow.</p>",
        "id": 423702666,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1709070597
    },
    {
        "content": "<p>Yes, you can</p>",
        "id": 423704328,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709071103
    },
    {
        "content": "<p>I'll have a look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/11026\">#11026</a> later toaday, can you fix the build error?</p>",
        "id": 423770331,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709109773
    },
    {
        "content": "<p>I never remember if the error is public or not, anyway it is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">MvPolynomial</span><span class=\"bp\">/</span><span class=\"n\">Symmetric.lean</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">unused</span> <span class=\"kn\">import</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">shake</span> <span class=\"c1\">--fix` to fix this, or `lake exe shake --update` to ignore)</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">MvPolynomial</span><span class=\"bp\">/</span><span class=\"n\">Symmetric.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Data.Set.Card</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 423770359,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709109786
    },
    {
        "content": "<p>I think I already fixed that, maybe it's not pushed yet?</p>",
        "id": 423831361,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1709131005
    },
    {
        "content": "<p>I don't see any commit touching the import lines.</p>",
        "id": 423848772,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709135668
    },
    {
        "content": "<p>Can someone point me in the right direction here not to sure where to start tried using rcases on h but didn't work. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">,</span>  <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">):</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">y_n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y_n</span> <span class=\"n\">n</span> <span class=\"o\">:=</span><span class=\"kd\">by</span><span class=\"o\">{</span>\n\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 424006639,
        "sender_full_name": "Timothy Harevy",
        "timestamp": 1709208832
    },
    {
        "content": "<p><code>choose f hf using h</code>, but you're in the wrong stream and your use of subtraction and division on natural numbers is making your life hard</p>",
        "id": 424008558,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709209595
    },
    {
        "content": "<p>ahh thank you much appeciated</p>",
        "id": 424009080,
        "sender_full_name": "Timothy Harevy",
        "timestamp": 1709209808
    },
    {
        "content": "<p>I just found out about this and now I'm jealous. <a href=\"https://github.com/math-comp/Coq-Combi\">https://github.com/math-comp/Coq-Combi</a></p>",
        "id": 429803152,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1711526691
    }
]