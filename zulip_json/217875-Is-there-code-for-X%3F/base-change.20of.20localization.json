[
    {
        "content": "<p>Dear algebraic geometers of mathlib, </p>\n<p>I would be surprised if something like the following doesn't already exist. Can someone point me in the right direction? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsBasicOpen</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">CommRingCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">RingHom.toAlgebra</span> <span class=\"n\">e</span>\n  <span class=\"n\">IsLocalization.Away</span> <span class=\"n\">f</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">IsBasicOpen.pushout</span>\n    <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">A'</span> <span class=\"n\">B</span> <span class=\"n\">B'</span> <span class=\"o\">:</span> <span class=\"n\">CommRingCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span>\n    <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">A'</span> <span class=\"bp\">⟶</span> <span class=\"n\">B'</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">B'</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsBasicOpen</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">A'</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.IsPushout</span> <span class=\"n\">e</span> <span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsBasicOpen</span> <span class=\"n\">e'</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 432011978,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712592387
    },
    {
        "content": "<p>.... sigh I can't even find the assertion that the base change of a localization is a localization. Do we really not have this?!</p>",
        "id": 432038970,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712599778
    },
    {
        "content": "<p>That's the kind of question which makes me wish I was better at loogling.</p>",
        "id": 432044522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712601826
    },
    {
        "content": "<p>@loogle Localization, TensorProduct</p>",
        "id": 432045633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712602242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Localization, TensorProduct</p>",
        "id": 432046655,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712602533
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 432046662,
        "sender_full_name": "loogle",
        "timestamp": 1712602534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Localization</p>",
        "id": 432046730,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712602554
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/MonoidLocalization.html#Localization\">Localization</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/MonoidLocalization.html#Localization.one\">Localization.one</a>, and <a href=\"https://loogle.lean-lang.org/?q=Localization\">172 more</a></p>",
        "id": 432046735,
        "sender_full_name": "loogle",
        "timestamp": 1712602556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> IsLocalization, TensorProduct</p>",
        "id": 432047121,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712602655
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 432047125,
        "sender_full_name": "loogle",
        "timestamp": 1712602656
    },
    {
        "content": "<p>So what do those responses mean? No theorems with both those functions in the conclusion? No theorems which mention both those functions anywhere at all? etc etc</p>",
        "id": 432051073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712604195
    },
    {
        "content": "<p>No theorems that mention both of these anywhere.</p>",
        "id": 432051392,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712604312
    },
    {
        "content": "<p>Do we have IsTensorProduct? :-)</p>",
        "id": 432051658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712604381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> IsTensorProduct</p>",
        "id": 432051891,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712604458
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/IsTensorProduct.html#TensorProduct.isTensorProduct\">TensorProduct.isTensorProduct</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/IsTensorProduct.html#IsTensorProduct\">IsTensorProduct</a>, and <a href=\"https://loogle.lean-lang.org/?q=IsTensorProduct\">9 more</a></p>",
        "id": 432051896,
        "sender_full_name": "loogle",
        "timestamp": 1712604458
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 432052027,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712604486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  IsTensorProduct, IsLocalization</p>",
        "id": 432052114,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712604514
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 432052116,
        "sender_full_name": "loogle",
        "timestamp": 1712604514
    },
    {
        "content": "<p><span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 432054308,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712605238
    },
    {
        "content": "<p>@loogle IsTensorProduct, Localization</p>",
        "id": 432054551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712605360
    },
    {
        "content": "<p>(Type \"@loo\" and then select @loogle from the pop-up...)</p>",
        "id": 432054687,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712605439
    },
    {
        "content": "<p>Oh yeah, on mobile so didn't spot I'd got it wrong. What are the chances? :-)</p>",
        "id": 432054820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712605493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> IsTensorProduct Localization</p>",
        "id": 432054855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712605508
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/IsTensorProduct.html#TensorProduct.isTensorProduct\">TensorProduct.isTensorProduct</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/IsTensorProduct.html#IsTensorProduct.equiv\">IsTensorProduct.equiv</a>, and <a href=\"https://loogle.lean-lang.org/?q=IsTensorProduct%20Localization\">8 more</a></p>",
        "id": 432054859,
        "sender_full_name": "loogle",
        "timestamp": 1712605509
    },
    {
        "content": "<p>What does that output mean? Either/or, anywhere?</p>",
        "id": 432054931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712605544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> IsTensorProduct, Localization</p>",
        "id": 432055017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712605566
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 432055019,
        "sender_full_name": "loogle",
        "timestamp": 1712605566
    },
    {
        "content": "<p>Oh, like it means \"I ignored Localization\"? My loogle-fu is still so weak</p>",
        "id": 432055155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712605623
    },
    {
        "content": "<p>In case anyone is wondering, this is the last thing I need to show that the functor of points of a scheme is a sheaf on the Zariski site on <code>CommRingCat^op</code>. It feels so silly that we don't have this!</p>",
        "id": 432055767,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712605875
    },
    {
        "content": "<p>Post the statement, finish the functor job and see if someone's nerdsniped into doing it :-)</p>",
        "id": 432057393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712606376
    },
    {
        "content": "<p>it's in <a href=\"https://github.com/leanprover-community/mathlib4/tree/AT-functor-of-points-zariski-descent\">branch#AT-functor-of-points-zariski-descent</a></p>",
        "id": 432059410,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712607204
    },
    {
        "content": "<p>I wonder whether your code could be adapted in order to obtain slightly more general results:</p>\n<ol>\n<li>the Zariski topology on <code>Scheme.{u}</code> is subcanonical: this is the glueing of morphisms of schemes;</li>\n<li>the inclusion of your Zariski affine site in the big Zariski site <code>Scheme.{u}</code> is a continuous functor;</li>\n<li>the direct image functor for this continuous functor is fully faithful (and it would be an equivalence if we could replace <code>Type u</code> by <code>Type (u + 1)</code>...).</li>\n</ol>\n<p>Then, 1. and 2. give that <code>X.functorOfPoints</code>is a sheaf. Then, I think that your API <code>X.affineOpenCover</code> could be used to prove 3. similarly as you prove the special case that <code>schemeToFunctor</code> is fully faithful.</p>",
        "id": 432079942,
        "sender_full_name": "Joël Riou",
        "timestamp": 1712616609
    },
    {
        "content": "<p>Thanks! I’ll think more carefully about these points. For point 3, I took special care to choose <code>Type u</code>. Eventually I want to characterize which sheaves on CommRingCat^op arise from schemes in terms of open subfunctors etc. and define a convenient category equivalent to <code>Scheme</code>. It would be really cool to define, say, the Hilbert scheme in terms of its functor of points in this way :). More generally I’m interested in developing an API for doing scheme theory with <em>just rings</em> which is why so far I’ve mostly ignored the big Zariski site on <code>Scheme</code>.</p>",
        "id": 432082127,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712617817
    },
    {
        "content": "<p>At Imperial we have been taking some first tenative steps to making an API for doing the theory of affine algebraic groups with just Hopf algebras (see Amelia's 10 recent PRs; reviews of <a href=\"https://github.com/leanprover-community/mathlib4/pull/11961\">#11961</a> welcome); this reminds me a bit of how mathlib does elliptic curves over fields with plane cubics rather than smooth proper morphisms (note that the Frey curve is a plane cubic so this is fine for FLT). </p>\n<p>I think that at some point we're going to have to come up with some kind of framework for representability of functors parametrising things of interest to algebraic geometers and I'd be very happy if the Hilbert scheme were the test case. For FLT I'll need moduli spaces of abelian varieties but first things first. Note that Jujian Zhang is pushing on with his work on Proj (reviews of <a href=\"https://github.com/leanprover-community/mathlib4/pull/11920\">#11920</a> welcome) and the Hilbert scheme was one of the applications I had in mind.</p>",
        "id": 432181220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712655480
    },
    {
        "content": "<p>There is<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  IsLocalizedModule IsBaseChange</p>",
        "id": 432223025,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1712665186
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isLocalizedModule_iff_isBaseChange#doc\">docs#isLocalizedModule_iff_isBaseChange</a></p>",
        "id": 432223480,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1712665261
    },
    {
        "content": "<p>For a starter, I would think that the construction of the algebraic Grassmannians (or more generally flag bundles) could be first nice applications of representability theorems based on a Zariski sheaf that is equipped with suitable representable \"open subfunctors\". I am not completely sure that restricting to rings is always better, but for finite flat group schemes I definitely agree (long ago, I very much enjoyed reading Tate's article in the yellow book on FLT!).</p>",
        "id": 432233354,
        "sender_full_name": "Joël Riou",
        "timestamp": 1712667397
    },
    {
        "content": "<p>In any case, proving that big Zariski is subcanonical was so easy with the very nice gluing api that <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> developed that now I think we should have all the approaches :)</p>",
        "id": 432234253,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712667621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/base-change.20of.20localization/near/432223025\">said</a>:</p>\n<blockquote>\n<p>There is<br>\n<span class=\"user-mention silent\" data-user-id=\"644391\">loogle</span>  IsLocalizedModule IsBaseChange</p>\n</blockquote>\n<p>I can make this work. BTW, why doesn't <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isLocalizedModule_iff_isLocalization%27#doc\">docs#isLocalizedModule_iff_isLocalization'</a> use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.linearMap#doc\">docs#Algebra.linearMap</a> ?</p>",
        "id": 432257153,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712672897
    },
    {
        "content": "<p>Good point. It should use that instead.</p>",
        "id": 432258182,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1712673194
    },
    {
        "content": "<p>Ok I'll try to remember to PR a fix at somet point.</p>",
        "id": 432261573,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712674034
    }
]