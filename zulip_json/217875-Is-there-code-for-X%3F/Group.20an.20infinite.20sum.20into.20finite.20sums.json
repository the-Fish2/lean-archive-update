[
    {
        "content": "<p>Is there a way to split an infinite sum into an infinite sum of finite sums (where the domains of the sum form a partition of the original space?</p>",
        "id": 422360222,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708413915
    },
    {
        "content": "<p>Context is I'm trying to generalise</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">summable_lemma</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">HI</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">ι</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">Summable</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">ι</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">x.2</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>from <a href=\"https://github.com/leanprover-community/mathlib4/pull/10377\">#10377</a></p>",
        "id": 422360271,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708413945
    },
    {
        "content": "<p>You can there there via an equivalence between the original index type and <code>Prod</code> I think?</p>",
        "id": 422360988,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708414324
    },
    {
        "content": "<p>That is, first group into infinite sums, then show that the infinite sums are finite</p>",
        "id": 422361112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708414389
    },
    {
        "content": "<p>It can't be that easy because <code>(1 - 1) + (1 - 1) + ...</code> is summable while <code>1 - 1 + 1 - 1 + ...</code> is not</p>",
        "id": 422369343,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708418329
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span></p>",
        "id": 422369479,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708418386
    },
    {
        "content": "<p>Ahah! <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=summable_sigma_of_nonneg#doc\">docs#summable_sigma_of_nonneg</a></p>",
        "id": 422369974,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708418596
    },
    {
        "content": "<p>yes I was about to say that. I used it in the PR</p>",
        "id": 422370325,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1708418736
    },
    {
        "content": "<p>This is the reason I had this <code>sigmaEquiv</code> since I needed to turn the domain into a sigma to use this result. Although I didn't think if there was a more direct way to do this.</p>",
        "id": 422370790,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1708418921
    }
]