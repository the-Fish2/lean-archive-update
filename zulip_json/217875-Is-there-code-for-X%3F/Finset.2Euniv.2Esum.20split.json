[
    {
        "content": "<p>Do we have anything close enough to either of the following lemmas?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Pointwise</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Finset.univ_sum_split</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"k\">let</span> <span class=\"n\">fₚ</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a.val</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">fₙ</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a.val</span><span class=\"o\">)</span>\n    <span class=\"n\">Finset.univ.sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.univ.sum</span> <span class=\"n\">fₚ</span> <span class=\"bp\">+</span> <span class=\"n\">Finset.univ.sum</span> <span class=\"n\">fₙ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Finset.univ_sum_split_of_zero</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">hpf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"k\">let</span> <span class=\"n\">fₚ</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a.val</span><span class=\"o\">)</span>\n    <span class=\"n\">Finset.univ.sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.univ.sum</span> <span class=\"n\">fₚ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.univ_sum_split</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">add_zero</span> <span class=\"n\">_</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_eq_zero</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">_</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hpf</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x.property</span>\n</code></pre></div>",
        "id": 436648513,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714640755
    },
    {
        "content": "<p>I think you may have simplified too much. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum_filter_add_sum_filter_not#doc\">docs#Finset.sum_filter_add_sum_filter_not</a> seems like a more sensible spelling for this kind of thing</p>",
        "id": 436649420,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714641059
    },
    {
        "content": "<p>A general hint when working with sums is to try stating your result over Finset first, rather than working with Fintype</p>",
        "id": 436651633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714641867
    },
    {
        "content": "<p>Can somebody help me with my <code>todo</code> please?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Pointwise</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">todo</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.val.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a.val</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.univ.filter</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val.map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Finset.univ_sum_split</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"k\">let</span> <span class=\"n\">fₚ</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a.val</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">fₙ</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a.val</span><span class=\"o\">)</span>\n    <span class=\"n\">Finset.univ.sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.univ.sum</span> <span class=\"n\">fₚ</span> <span class=\"bp\">+</span> <span class=\"n\">Finset.univ.sum</span> <span class=\"n\">fₙ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Finset.sum_filter_add_sum_filter_not</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_arg₂</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_filter</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_ite</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_const_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Finset.sum</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">todo</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Finset.univ_sum_split_of_zero</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">hpf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"k\">let</span> <span class=\"n\">fₚ</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a.val</span><span class=\"o\">)</span>\n    <span class=\"n\">Finset.univ.sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.univ.sum</span> <span class=\"n\">fₚ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.univ_sum_split</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">add_zero</span> <span class=\"n\">_</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_eq_zero</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">_</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hpf</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x.property</span>\n</code></pre></div>\n<p>I don't know any better way to finish my proof.</p>",
        "id": 436671942,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714649388
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Pointwise</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Finset.univ_sum_split_of_zero</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">hpf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.univ.sum</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">a.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n  <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ.filter</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Finset.sum_subset_zero_on_sdiff</span> <span class=\"o\">(</span><span class=\"n\">Finset.subset_univ</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Finset.sum_subtype</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 436677401,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714651246
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Pointwise</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">todo</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.val.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a.val</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.univ.filter</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val.map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.subtype_map</span><span class=\"o\">,</span> <span class=\"n\">Finset.map_val</span><span class=\"o\">,</span> <span class=\"n\">Finset.subtype_univ</span><span class=\"o\">,</span>\n    <span class=\"n\">Function.Embedding.coe_subtype</span><span class=\"o\">,</span> <span class=\"n\">Multiset.map_map</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_def</span><span class=\"o\">]</span>\n</code></pre></div>\n<p><del>(Fixing the defeq abuse is left as an exercise :))</del> [Edit: fixed] [Edit: rewrite rhs only]</p>",
        "id": 436682556,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714653047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finset.2Euniv.2Esum.20split/near/436677401\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Pointwise</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Finset.univ_sum_split_of_zero</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">hpf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.univ.sum</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">a.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n  <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ.filter</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Finset.sum_subset_zero_on_sdiff</span> <span class=\"o\">(</span><span class=\"n\">Finset.subset_univ</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Finset.sum_subtype</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you very much!!<br>\nAlso, I didn't know <code>trans</code> was a tactic! Good to know!</p>\n<p>Do you mind that I cite you even know I ungolfed your proof (which I apologize for) for consistency of my codebase?<br>\n<a href=\"https://github.com/madvorak/vcsp/blob/05c22491cad415de64db587122d7cfe872215d85/VCSP/Basic.lean#L89\">https://github.com/madvorak/vcsp/blob/05c22491cad415de64db587122d7cfe872215d85/VCSP/Basic.lean#L89</a></p>",
        "id": 436683972,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714653510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finset.2Euniv.2Esum.20split/near/436682556\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Pointwise</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">todo</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.val.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a.val</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.univ.filter</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val.map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">show</span> <span class=\"n\">Finset.univ.val.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">Subtype.val</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Multiset.map_map</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Finset.subtype_map</span><span class=\"o\">,</span> <span class=\"n\">Finset.subtype_univ</span><span class=\"o\">,</span>\n    <span class=\"n\">Finset.map_val</span><span class=\"o\">,</span> <span class=\"n\">Function.Embedding.coe_subtype</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>The identity between subtype of univ and filter of univ go to Mathlib IMO.<br>\nCan we isolate it from the mapping done afterwards?<br>\nWhat name should the lemma have?</p>",
        "id": 436684887,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714653843
    },
    {
        "content": "<p><code>trans</code> is called <code>transitivity</code> in the lean3 days. There is also <code>symm</code> which is useful at times.</p>",
        "id": 436685296,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714653968
    },
    {
        "content": "<blockquote>\n<p>Do you mind that I cite you</p>\n</blockquote>\n<p>Not at all. (It's okay not to cite me as well)</p>",
        "id": 436685455,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714654029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finset.2Euniv.2Esum.20split/near/436685296\">said</a>:</p>\n<blockquote>\n<p><code>trans</code> is called <code>transitivity</code> in the lean3 days. There is also <code>symm</code> which is useful at times.</p>\n</blockquote>\n<p>Yeah, I use <code>symm</code> pretty often.<br>\nI must say that <code>trans</code> is nicer than <code>apply proof.trans</code> which I have been using until now.</p>",
        "id": 436686486,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714654380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finset.2Euniv.2Esum.20split/near/436684887\">said</a>:</p>\n<blockquote>\n<p>The identity between subtype of univ and filter of univ go to Mathlib IMO.<br>\nCan we isolate it from the mapping done afterwards?<br>\nWhat name should the lemma have?</p>\n</blockquote>\n<p>This part?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">todo'</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.val.map</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ.filter</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.subtype_map</span><span class=\"o\">,</span> <span class=\"n\">Finset.map_val</span><span class=\"o\">,</span> <span class=\"n\">Finset.subtype_univ</span><span class=\"o\">,</span>\n    <span class=\"n\">Function.Embedding.coe_subtype</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 436686598,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714654414
    },
    {
        "content": "<p>I'm not sure. The version with mapping was probably more useful?</p>",
        "id": 436687354,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714654651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finset.2Euniv.2Esum.20split/near/436685455\">said</a>:</p>\n<blockquote>\n<p>It's okay not to cite me as well</p>\n</blockquote>\n<p>I like to keep track of which parts of my repo are other people's work.<br>\nEventually, if a paper comes out of it, you will get an acknowledgement like the one we wrote in the middle of the first page here:<br>\n<a href=\"https://arxiv.org/pdf/2302.06420\">https://arxiv.org/pdf/2302.06420</a></p>",
        "id": 436688296,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714654905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finset.2Euniv.2Esum.20split/near/436687354\">said</a>:</p>\n<blockquote>\n<p>I'm not sure. The version with mapping was probably more useful?</p>\n</blockquote>\n<p>It does seem pretty trivial when the non-injective map is not involved.</p>",
        "id": 436690359,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714655501
    },
    {
        "content": "<p>Trivial enough for Lean's automation to take care of it? It doesn't seem to me.</p>",
        "id": 436690931,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714655644
    },
    {
        "content": "<p>I think this would usually suffice. One wouldn't need to think about multisets.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">todo''</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.map</span> <span class=\"o\">(</span><span class=\"n\">Function.Embedding.subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.univ.filter</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.subtype_map</span><span class=\"o\">,</span> <span class=\"n\">Finset.subtype_univ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 436691689,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714655860
    },
    {
        "content": "<p>(<code>aesop</code> can do that one) [Edit: or <code>ext; simp</code>]</p>",
        "id": 436692011,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714655946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finset.2Euniv.2Esum.20split/near/436691689\">said</a>:</p>\n<blockquote>\n<p>I think this would usually suffice. One wouldn't need to think about multisets.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">todo''</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.map</span> <span class=\"o\">(</span><span class=\"n\">Function.Embedding.subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.univ.filter</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.subtype_map</span><span class=\"o\">,</span> <span class=\"n\">Finset.subtype_univ</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Getting from <code>todo''</code> to <code>todo</code> still feels nontrivial. Therefore, I think that <code>todo</code> should go Mathlib even tho <code>todo''</code> is not useful per se.</p>",
        "id": 436693218,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714656246
    },
    {
        "content": "<p>How would you motivate it, if you were writing a PR? It's probably my intuition that is failing me, but I don't see the usefulness.</p>",
        "id": 436693730,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714656409
    },
    {
        "content": "<p>I think Mathlib users should be able to easily translate between filtering and subtyping.<br>\nJust because a task can be broken down to trivial parts does not mean the task is trivial.</p>",
        "id": 436694764,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714656691
    },
    {
        "content": "<p>Fair enough!</p>\n<p>Here's one way to get from one to another, just for fun:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">todo''</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.map</span> <span class=\"o\">(</span><span class=\"n\">Function.Embedding.subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.univ.filter</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.subtype_map</span><span class=\"o\">,</span> <span class=\"n\">Finset.subtype_univ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">todo'</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.val.map</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ.filter</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">Finset.map_val</span> <span class=\"o\">(</span><span class=\"n\">Function.Embedding.subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">Finset.univ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congrArg</span>\n  <span class=\"n\">exact</span> <span class=\"n\">todo''</span> <span class=\"bp\">..</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">todo</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.val.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a.val</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.univ.filter</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val.map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">todo'</span><span class=\"o\">,</span> <span class=\"n\">Multiset.map_map</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_def</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 436696869,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714657259
    },
    {
        "content": "<p>May I PR your code in a form I find suitable?</p>",
        "id": 436703952,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714659092
    },
    {
        "content": "<p>Be my guest.</p>",
        "id": 436704216,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714659158
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12903\">#12903</a></p>",
        "id": 438545347,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715682226
    }
]