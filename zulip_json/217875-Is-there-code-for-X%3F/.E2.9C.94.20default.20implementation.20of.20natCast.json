[
    {
        "content": "<p>i'm trying to declare my own instance of the Field of order 4, and in the hierarchy of proving it is a field, i got up to proving it's a <code>NonUnitalSemiring</code>. The next step is to define <code>natCast</code>, and i was wondering if there is some way to specify the natural choice of natCast 0 = 0 and natCast (n+1) = natCast n + 1? i noticed this exists for nsMul, so i figured something similar might exist for this....</p>",
        "id": 418653501,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1706540033
    },
    {
        "content": "<p>If you just omit those fields (anything with <code>natCast</code> etc in the name) they should be filled in automatically by the system in the correct way.</p>",
        "id": 418660230,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1706541734
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/lZAN3pFfwX2f9aP3vZPWOmXZ/image.png\">image.png</a><br>\nwhen i omit the fields, it gives this error...</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lZAN3pFfwX2f9aP3vZPWOmXZ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/lZAN3pFfwX2f9aP3vZPWOmXZ/image.png\"></a></div>",
        "id": 418668051,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1706543883
    },
    {
        "content": "<p>and i haven't done anything with rfl in the declaration</p>",
        "id": 418668410,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1706543984
    },
    {
        "content": "<p>They are indeed not definitionally equal</p>",
        "id": 418669085,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1706544164
    },
    {
        "content": "<p>surely for the default implementation there should be a default proof that works, though?<br>\nand if they aren't definitionally equal, where do i find the definition?</p>",
        "id": 418670094,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1706544436
    },
    {
        "content": "<p>This should definitely not be an issue. <code>natCast</code> is an implementation detail and mathematicians should not have to worry about it. Can you post fully working code so we can take a look? See <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 418670509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706544533
    },
    {
        "content": "<p>i'm afraid my beginner understanding of lean might not be effective to produce a small example of this. i definitly will need some help, in particular since i am defining F4 from the base up.</p>",
        "id": 418671884,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1706544881
    },
    {
        "content": "<p>I don't need a small example: I just need to see your error on my computer, so 150 lines of code is fine.</p>",
        "id": 418672153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706544959
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/0W_xiVcds2k2RJi6pWUohLun/test.lean\">test.lean</a><br>\nthis should give an error at line  126</p>",
        "id": 418672535,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1706545076
    },
    {
        "content": "<p>Your provided <code>NatCast</code> instance is not pleasing the automation attempt. You can provide default values for fields in structures which is done for the <code>natCat_*</code> proof fields. When these fail, you see errors like this. They can be pretty un-informative</p>",
        "id": 418673172,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706545268
    },
    {
        "content": "<p>Delete the <code>Sub</code>, <code>SMul â„•</code> and <code>Nat.cast</code> instances and it all just works.</p>",
        "id": 418673235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706545293
    },
    {
        "content": "<p>As far as I know, knowing which fields you need to fill in and which fields you should leave well alone is the sort of thing which you can only find out by asking, or looking at what other people are doing.</p>",
        "id": 418673434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706545343
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 418675172,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1706545817
    },
    {
        "content": "<p>For rings it's <code>+</code>, <code>-</code> (unary negation, not binary subtraction) and <code>*</code>, and then you should prove all the ring axioms it asks for and ignore all this stuff about nat and int being attached in various ways, this is just internal stuff.</p>",
        "id": 418675722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706545972
    },
    {
        "content": "<p>The reason I did it by ascending the hierarchy like this is because when I did it in one instance declaration, it complained about not having enough heartbeats...</p>",
        "id": 418676453,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1706546185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> has marked this topic as resolved.</p>",
        "id": 418679460,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706547142
    },
    {
        "content": "<p>You should be fine doing it all in one go. You just need to be aware of the gotchas :-(</p>",
        "id": 418719134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706561910
    }
]